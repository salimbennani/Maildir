Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 13 Nov 2018 04:47:17 -0000
Received: from icoremail.net (unknown [209.85.215.180])
	by mail-app2 (Coremail) with SMTP id by_KCgCn35gOLepbY8uBAQ--.38898S3;
	Tue, 13 Nov 2018 09:46:55 +0800 (CST)
Received: from mail-pg1-f180.google.com (unknown [209.85.215.180])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwDXrzsMLepbCAE1AA--.531S3;
	Tue, 13 Nov 2018 09:46:52 +0800 (CST)
Received: by mail-pg1-f180.google.com with SMTP id z10so4893126pgp.7
        for <xuliker@zju.edu.cn>; Mon, 12 Nov 2018 17:46:52 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:from:to:cc:date:message-id:in-reply-to:references
         :user-agent:mime-version:content-transfer-encoding:sender:precedence
         :list-id;
        bh=+f2bScgf63USfslrxW6BeuGWswkRn2eqNVqvkpEUxQ8=;
        b=OgDL3FKw/vriJnog6eSDcFKVLHQSwqEOOHFqWcF4Xoqgjxlz0ihJoAfWkXlqPS+2lp
         xJNbL4pwQU+xhN2k2elVqN1XspoxSUerjx7v3/8VQ5tvwHvpljgmNbeFhR5zgo4mUTUX
         C+iCOQuVufHfBBAMMnssMz4WXQxnDJpeiiy6oTJXX2Obk8DMuczOgA8TBMcfYhalLOHK
         IXQ0ViTsxeo8e1pQmB6Y81Uy+MS1CegoOVFZujcTxzibvCIKX1vZt+gcXNIdzlVm4Mhn
         LlSV1l01J0BqLHIQY5AsJJTyVIhL5jl+LaWAMOQNbYYO1MVJ/21EmxhBz685MQci4cEe
         6EYg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gIVVggFvWdan0xwO7GEfw63FvO/HDcwlSe/nTfi3jUW3osOXlIu
	5ZATzmZgTxR7JDxx4MZ1M6ELdeR7w520QGbL6B/M1Ed397AEjVgaPg==
X-Received: by 2002:a62:c184:: with SMTP id i126-v6mr3225433pfg.53.1542073612298;
        Mon, 12 Nov 2018 17:46:52 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp3904136pjt;
        Mon, 12 Nov 2018 17:46:50 -0800 (PST)
X-Google-Smtp-Source: AJdET5dHNW4ypMkJmPYx62npFoI5RmCbcMsLYssHgXiu/g5V09CClniZvQYgoM4kqpx+GZKSwr5p
X-Received: by 2002:a62:a511:: with SMTP id v17-v6mr3186550pfm.18.1542073610683;
        Mon, 12 Nov 2018 17:46:50 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542073610; cv=none;
        d=google.com; s=arc-20160816;
        b=uKhQdbuJn3O1zHc79xcgsznWXL0WZMmQQ3+4ADsqjSEao9ymkksRV55FJzPP0dUkGZ
         DbcM1C6eWQsm3KwRzFtPG76XdanI6LjN5R3LZ4NNHnxqHp6bikJDBulKRwP/VreN1e76
         Io9+7JkuWGwKDwKJxW3NV1GVMrwyFbEJ9b1ihyB2FIdUyVRRMbOQpfn7g/uZQw6jPXog
         P7BNpG6+hpkx4lQQ5I6sdwFlK3eHT8beB64DVvcfth06CvI16QrnnzDc2n+YDhVnVar5
         anQg+H1x8ODGrwGMJL/Qx+/wI4UasYokD3QilcSbN6UyjtP6AfGyAE2ABA6vUMkyFY9T
         WVkQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:date:cc:to:from
         :subject;
        bh=+f2bScgf63USfslrxW6BeuGWswkRn2eqNVqvkpEUxQ8=;
        b=Q4Z78V9fPkVWeazOoZ6UEUyiQ3AO3nGubpRJam/kANwjHTGiv1DGsvF2kSQvmQJs6o
         xbLDXgchNlINB/GG9ItoMsFLNu7o8Ouu8Qn1eIfa7Luaa+KfpPVeu0HIEWMkN3xn++xd
         L2JTxxL2DGD62ZHMuKrhfFtm1vLCJ9j4rVK3B1Y4joCAnaHa08bj82v/ORuBhavhFqAt
         VJZ4DbTkcK1UgPS5ZTSBfiJK7Wra9RrR38j+XENEd3n73PYRtCOXAaxEl7yglQ9jOthp
         G3jDQrERO6qFU3+UMwzNGUmu6qcAm7hdL674NPBuS2L45WihV6IBO0rd89Oiqv8lhFWk
         Evcw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id b7-v6si18364985pgn.553.2018.11.12.17.46.36;
        Mon, 12 Nov 2018 17:46:50 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730692AbeKMLlf (ORCPT <rfc822;pilgrimtao@gmail.com>
        + 99 others); Tue, 13 Nov 2018 06:41:35 -0500
Received: from icp-osb-irony-out6.external.iinet.net.au ([203.59.1.106]:53797
        "EHLO icp-osb-irony-out6.external.iinet.net.au" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726111AbeKMLle (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 13 Nov 2018 06:41:34 -0500
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2A1AACYKepb/1Sw0HYNVhwBAQEEAQE?=
 =?us-ascii?q?HBAEBgVEHAQELAYQSg3iIGIxNBoEQg2eFU4R6iSaBeoR0AwICg080DQ0BAwE?=
 =?us-ascii?q?BAQEBAQKGUAIBAyMEUhAYAQwCJgICRxAGE4UWqANwfDMaiheBC4FziRl4gQe?=
 =?us-ascii?q?BETOKYYJXAokShjQyj1cJkTUKAoleA4cDgnSWR4INTS4KgyeCJxeOKWWOGwE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A2A1AACYKepb/1Sw0HYNVhwBAQEEAQEHBAEBgVEHAQELA?=
 =?us-ascii?q?YQSg3iIGIxNBoEQg2eFU4R6iSaBeoR0AwICg080DQ0BAwEBAQEBAQKGUAIBA?=
 =?us-ascii?q?yMEUhAYAQwCJgICRxAGE4UWqANwfDMaiheBC4FziRl4gQeBETOKYYJXAokSh?=
 =?us-ascii?q?jQyj1cJkTUKAoleA4cDgnSWR4INTS4KgyeCJxeOKWWOGwEB?=
X-IronPort-AV: E=Sophos;i="5.54,497,1534780800"; 
   d="scan'208";a="116718302"
Received: from unknown (HELO [192.168.1.28]) ([118.208.176.84])
  by icp-osb-irony-out6.iinet.net.au with ESMTP; 13 Nov 2018 09:36:21 +0800
Subject: [PATCH 4/6] autofs - use struct for mount params
From: Ian Kent <raven@themaw.net>
To: Andrew Morton <akpm@linux-foundation.org>
Cc: Al Viro <viro@ZenIV.linux.org.uk>,
        autofs mailing list <autofs@vger.kernel.org>,
        Kernel Mailing List <linux-kernel@vger.kernel.org>,
        linux-fsdevel <linux-fsdevel@vger.kernel.org>
Date: Tue, 13 Nov 2018 09:36:19 +0800
Message-ID: <154207297923.11064.15608451642929332541.stgit@pluto-themaw-net>
In-Reply-To: <154207295533.11064.12485527860509413072.stgit@pluto-themaw-net>
References: <154207295533.11064.12485527860509413072.stgit@pluto-themaw-net>
User-Agent: StGit/unknown-version
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwDXrzsMLepbCAE1AA--.531S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3GrW8Cryrtr13ur4rtr15XFb_yoW3Zr45pa
	18Zan5t3y8Jr4xCFs7Aw4kXr1YkasxGFWxCFyxJ3yFqw1UJFn5tryIka1aqFyxCrZ8Ga4F
	va1qvrWYgw12ya7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPYb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6w4lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bL6pQU
	UUUU=

Use a structure to hold parsed parameters to simplify the
autofs_parse_options() function call.

Also seperate option parsing and applying the options into
seperate functions.

Signed-off-by: Ian Kent <raven@themaw.net>
---
 fs/autofs/inode.c |  193 ++++++++++++++++++++++++++++++++---------------------
 1 file changed, 116 insertions(+), 77 deletions(-)

diff --git a/fs/autofs/inode.c b/fs/autofs/inode.c
index 93af0d5777ae..53ed6c637cbf 100644
--- a/fs/autofs/inode.c
+++ b/fs/autofs/inode.c
@@ -108,6 +108,17 @@ static const struct super_operations autofs_sops = {
 	.evict_inode	= autofs_evict_inode,
 };
 
+struct autofs_fs_params {
+	int pipefd;
+	kuid_t uid;
+	kgid_t gid;
+	int pgrp;
+	bool pgrp_set;
+	int min_proto;
+	int max_proto;
+	unsigned int type;
+};
+
 enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,
 	Opt_indirect, Opt_direct, Opt_offset};
 
@@ -124,24 +135,26 @@ static const match_table_t tokens = {
 	{Opt_err, NULL}
 };
 
-static int parse_options(char *options, int *pipefd, kuid_t *uid, kgid_t *gid,
-			 int *pgrp, bool *pgrp_set, unsigned int *type,
-			 int *minproto, int *maxproto)
+static int autofs_parse_options(char *options, struct autofs_fs_params *params)
 {
 	char *p;
 	substring_t args[MAX_OPT_ARGS];
 	int option;
+	kuid_t uid;
+	kgid_t gid;
+
+	if (!options)
+		return 1;
 
-	*uid = current_uid();
-	*gid = current_gid();
+	params->pipefd = -1;
 
-	*minproto = AUTOFS_MIN_PROTO_VERSION;
-	*maxproto = AUTOFS_MAX_PROTO_VERSION;
+	params->uid = current_uid();
+	params->gid = current_gid();
 
-	*pipefd = -1;
+	params->min_proto = AUTOFS_MIN_PROTO_VERSION;
+	params->max_proto = AUTOFS_MAX_PROTO_VERSION;
 
-	if (!options)
-		return 1;
+	params->pgrp_set = false;
 
 	while ((p = strsep(&options, ",")) != NULL) {
 		int token;
@@ -152,53 +165,126 @@ static int parse_options(char *options, int *pipefd, kuid_t *uid, kgid_t *gid,
 		token = match_token(p, tokens, args);
 		switch (token) {
 		case Opt_fd:
-			if (match_int(args, pipefd))
+			if (match_int(args, &option))
 				return 1;
+			params->pipefd = option;
 			break;
 		case Opt_uid:
 			if (match_int(args, &option))
 				return 1;
-			*uid = make_kuid(current_user_ns(), option);
-			if (!uid_valid(*uid))
+			uid = make_kuid(current_user_ns(), option);
+			if (!uid_valid(uid))
 				return 1;
+			params->uid = uid;
 			break;
 		case Opt_gid:
 			if (match_int(args, &option))
 				return 1;
-			*gid = make_kgid(current_user_ns(), option);
-			if (!gid_valid(*gid))
+			gid = make_kgid(current_user_ns(), option);
+			if (!gid_valid(gid))
 				return 1;
+			params->gid = gid;
 			break;
 		case Opt_pgrp:
 			if (match_int(args, &option))
 				return 1;
-			*pgrp = option;
-			*pgrp_set = true;
+			params->pgrp = option;
+			params->pgrp_set = true;
 			break;
 		case Opt_minproto:
 			if (match_int(args, &option))
 				return 1;
-			*minproto = option;
+			params->min_proto = option;
 			break;
 		case Opt_maxproto:
 			if (match_int(args, &option))
 				return 1;
-			*maxproto = option;
+			params->max_proto = option;
 			break;
 		case Opt_indirect:
-			set_autofs_type_indirect(type);
+			set_autofs_type_indirect(&params->type);
 			break;
 		case Opt_direct:
-			set_autofs_type_direct(type);
+			set_autofs_type_direct(&params->type);
 			break;
 		case Opt_offset:
-			set_autofs_type_offset(type);
+			set_autofs_type_offset(&params->type);
 			break;
 		default:
 			return 1;
 		}
 	}
-	return (*pipefd < 0);
+	return (params->pipefd < 0);
+}
+
+static int autofs_apply_sbi_options(struct autofs_sb_info *sbi,
+				    struct autofs_fs_params *params)
+{
+	int err;
+
+	sbi->pipefd = params->pipefd;
+
+	if (params->type)
+		sbi->type = params->type;
+
+	/* Test versions first */
+	if (params->max_proto < AUTOFS_MIN_PROTO_VERSION ||
+	    params->min_proto > AUTOFS_MAX_PROTO_VERSION) {
+		pr_err("kernel does not match daemon version\n");
+		pr_err("daemon (%d, %d) kernel (%d, %d)\n",
+			params->min_proto, params->max_proto,
+			AUTOFS_MIN_PROTO_VERSION, AUTOFS_MAX_PROTO_VERSION);
+		goto out;
+	}
+
+	sbi->max_proto = params->max_proto;
+	sbi->min_proto = params->min_proto;
+
+	if (sbi->min_proto > sbi->max_proto)
+		sbi->min_proto = params->max_proto;
+
+	/* Establish highest kernel protocol version */
+	if (sbi->max_proto > AUTOFS_MAX_PROTO_VERSION)
+		sbi->version = AUTOFS_MAX_PROTO_VERSION;
+	else
+		sbi->version = params->max_proto;
+
+	sbi->sub_version = AUTOFS_PROTO_SUBVERSION;
+
+	if (!params->pgrp_set)
+		sbi->oz_pgrp = get_task_pid(current, PIDTYPE_PGID);
+	else {
+		sbi->oz_pgrp = find_get_pid(params->pgrp);
+		if (!sbi->oz_pgrp) {
+			pr_err("could not find process group %d\n",
+			       params->pgrp);
+			goto out;
+		}
+	}
+
+	pr_debug("pipe fd = %d, pgrp = %u\n",
+		  sbi->pipefd, pid_nr(sbi->oz_pgrp));
+
+	sbi->pipe = fget(sbi->pipefd);
+	if (!sbi->pipe) {
+		pr_err("could not open pipe file descriptor\n");
+		goto out_put_pid;
+	}
+
+	err = autofs_prepare_pipe(sbi->pipe);
+	if (err < 0)
+		goto out_fput;
+
+	sbi->catatonic = 0;
+
+	return 0;
+
+out_fput:
+	fput(sbi->pipe);
+out_put_pid:
+	put_pid(sbi->oz_pgrp);
+out:
+	return 1;
 }
 
 static struct autofs_sb_info *autofs_alloc_sbi(struct super_block *s)
@@ -229,12 +315,9 @@ int autofs_fill_super(struct super_block *s, void *data, int silent)
 {
 	struct inode *root_inode;
 	struct dentry *root;
-	struct file *pipe;
-	int pipefd;
+	struct autofs_fs_params params;
 	struct autofs_sb_info *sbi;
 	struct autofs_info *ino;
-	int pgrp = 0;
-	bool pgrp_set = false;
 	int ret = -EINVAL;
 
 	sbi = autofs_alloc_sbi(s);
@@ -267,45 +350,20 @@ int autofs_fill_super(struct super_block *s, void *data, int silent)
 	root = d_make_root(root_inode);
 	if (!root)
 		goto fail_iput;
-	pipe = NULL;
 
 	root->d_fsdata = ino;
 
-	/* Can this call block? */
-	if (parse_options(data, &pipefd, &root_inode->i_uid, &root_inode->i_gid,
-			  &pgrp, &pgrp_set, &sbi->type, &sbi->min_proto,
-			  &sbi->max_proto)) {
+	memset(&params, 0, sizeof(struct autofs_fs_params));
+	if (autofs_parse_options(data, &params)) {
 		pr_err("called with bogus options\n");
 		goto fail_dput;
 	}
+	root_inode->i_uid = params->uid;
+	root_inode->i_gid = params->gid;
 
-	/* Test versions first */
-	if (sbi->max_proto < AUTOFS_MIN_PROTO_VERSION ||
-	    sbi->min_proto > AUTOFS_MAX_PROTO_VERSION) {
-		pr_err("kernel does not match daemon version "
-		       "daemon (%d, %d) kernel (%d, %d)\n",
-		       sbi->min_proto, sbi->max_proto,
-		       AUTOFS_MIN_PROTO_VERSION, AUTOFS_MAX_PROTO_VERSION);
+	ret = autofs_apply_sbi_options(sbi, &params);
+	if (ret)
 		goto fail_dput;
-	}
-
-	/* Establish highest kernel protocol version */
-	if (sbi->max_proto > AUTOFS_MAX_PROTO_VERSION)
-		sbi->version = AUTOFS_MAX_PROTO_VERSION;
-	else
-		sbi->version = sbi->max_proto;
-	sbi->sub_version = AUTOFS_PROTO_SUBVERSION;
-
-	if (pgrp_set) {
-		sbi->oz_pgrp = find_get_pid(pgrp);
-		if (!sbi->oz_pgrp) {
-			pr_err("could not find process group %d\n",
-				pgrp);
-			goto fail_dput;
-		}
-	} else {
-		sbi->oz_pgrp = get_task_pid(current, PIDTYPE_PGID);
-	}
 
 	if (autofs_type_trigger(sbi->type))
 		__managed_dentry_set_managed(root);
@@ -313,20 +371,6 @@ int autofs_fill_super(struct super_block *s, void *data, int silent)
 	root_inode->i_fop = &autofs_root_operations;
 	root_inode->i_op = &autofs_dir_inode_operations;
 
-	pr_debug("pipe fd = %d, pgrp = %u\n", pipefd, pid_nr(sbi->oz_pgrp));
-
-	pipe = fget(pipefd);
-	if (!pipe) {
-		pr_err("could not open pipe file descriptor\n");
-		goto fail_put_pid;
-	}
-	ret = autofs_prepare_pipe(pipe);
-	if (ret < 0)
-		goto fail_fput;
-	sbi->pipe = pipe;
-	sbi->pipefd = pipefd;
-	sbi->catatonic = 0;
-
 	/*
 	 * Success! Install the root dentry now to indicate completion.
 	 */
@@ -336,11 +380,6 @@ int autofs_fill_super(struct super_block *s, void *data, int silent)
 	/*
 	 * Failure ... clean up.
 	 */
-fail_fput:
-	pr_err("pipe file descriptor does not contain proper ops\n");
-	fput(pipe);
-fail_put_pid:
-	put_pid(sbi->oz_pgrp);
 fail_dput:
 	dput(root);
 	goto fail_free;
