Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 14 Nov 2018 14:46:58 -0000
Received: from icoremail.net (unknown [209.85.215.182])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX981M+xbqtqQAQ--.43438S3;
	Wed, 14 Nov 2018 22:37:42 +0800 (CST)
Received: from mail-pg1-f182.google.com (unknown [209.85.215.182])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAnDUkxM+xbzhg_AA--.5812S3;
	Wed, 14 Nov 2018 22:37:37 +0800 (CST)
Received: by mail-pg1-f182.google.com with SMTP id z11so4826038pgu.0
        for <xuliker@zju.edu.cn>; Wed, 14 Nov 2018 06:37:37 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:sender:precedence:list-id;
        bh=s2/owihrhX8Ds9+oNUcEcQtQy7kzAHAObaBtfpKwRWo=;
        b=XyHz1U0eoJOOzmkWOmRmBWqPDJwB8syz00fsCjfd+5aDxhUOXUsuy7fBY2awzi9Ja+
         cY0tkFMW2S0/0gsAUjBC2IMjAGT5HSyER5ij5Bk48BEXV79lEBTS4lxuEsZzos257NdA
         rLMBxkqhw658k2AxzfmRNKSjIt1VHAg2yLEBVTLcd4hB3qN4zK6yb+kaT2+OD4nElAk+
         n3H+XRD0LVYi+mEbSMOKmaO7AKXyR4ugYb8yz4qumc8htFoqfRPFkJkTZrJ2QLQuxljz
         h7Xnijtr8HbEsog4ca36Jhh1wgwc691CGRRiU/k91Gq9yTs3tgPmE4CCebi4Aa1cKIYy
         4crw==
X-Gm-Message-State: AGRZ1gIBr0TG/Gf3YL1j/wONc5LQ7k04+MSLqA0dXA+gAr/dYth4Bb92
	+2i+1bU20iXmxK5zUAuo21DiAttzGcS6+HjmTU/LJllMuCNFob1L8Q==
X-Received: by 2002:a63:3c44:: with SMTP id i4mr1968986pgn.286.1542206256825;
        Wed, 14 Nov 2018 06:37:36 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp5886721pjt;
        Wed, 14 Nov 2018 06:37:35 -0800 (PST)
X-Google-Smtp-Source: AJdET5clI+KKwsX554lVenNc/rPHWZ4TflSgYou47BPhyt3IKXgYKXH2mZ7xhXTBk6K0hUEJeuta
X-Received: by 2002:a62:6fc7:: with SMTP id k190-v6mr2232243pfc.97.1542206255776;
        Wed, 14 Nov 2018 06:37:35 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542206255; cv=none;
        d=google.com; s=arc-20160816;
        b=YMNBM5SZlvGNhF6l71iaAwAoYe0rqNzOg8SzntTT2V2sQXSeTld81Y+iH7YMJqlNVc
         5eK3QhpZx17nX7JxBT/uHanrQ6Bx+HEGBLWUMJCdK3WWi40aX4gcs6gX7XzDU7zrpngv
         k+pW5kwCVgvJKi8ZT0d218WeVqidfKkpeb8T+zDTdn7LxZOiLs4tpr5MMufEaqtlpb0I
         fcSbiL+RfjTyo/keKBD/vQYBTx5uB6RBjWGmIoO30tF5tIrPBGm63V0e5mCx6z+HeSHP
         lKhSgQBmBLK/0jMGt4777DXcP6BrKRaymjTPytNiHQEp2G3HyfwtBdZtp1EvUfcvdA8g
         AT8A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:date:subject:cc:to:from
         :dkim-signature;
        bh=s2/owihrhX8Ds9+oNUcEcQtQy7kzAHAObaBtfpKwRWo=;
        b=LDR/SlM9fNmN81mMdXcxMouyrY7zjIcMb0oDOLgY7wldmaf8HFuI+3hXDFydLwm4FB
         vM3HqzCixXkVkxMbwaQaBBWwK8aeuGVga8SYpdYvakYvCsBoOX3kHjd3pM68IwhxlI57
         KFQVZX27+WhTuZy+ehhPUiCokKiNLugNFiwllAND0UXxmmoRE3CwMANnyJ9uYjZMUA72
         WjBu5Q+mfGFwCTz9T6uWTix9vCefb5gsDVei08dVj56Xm3x/RrOb1iC6cCgnp3peLf35
         tu3yYHvX8YJPxuPx3ZEi+6pKSbvHI++9UNK/ll458QiKnG+QDEItsLMBg5etgxQ4vs5d
         G6RQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20161025 header.b=Gk4ccZ3a;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id o14-v6si22197057pgi.52.2018.11.14.06.37.20;
        Wed, 14 Nov 2018 06:37:35 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732924AbeKOAkB (ORCPT <rfc822;docz2a@gmail.com> + 99 others);
        Wed, 14 Nov 2018 19:40:01 -0500
Received: from mail-pg1-f193.google.com ([209.85.215.193]:41498 "EHLO
        mail-pg1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727357AbeKOAkB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 14 Nov 2018 19:40:01 -0500
Received: by mail-pg1-f193.google.com with SMTP id 70so7451956pgh.8
        for <linux-kernel@vger.kernel.org>; Wed, 14 Nov 2018 06:36:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=s2/owihrhX8Ds9+oNUcEcQtQy7kzAHAObaBtfpKwRWo=;
        b=Gk4ccZ3ain3+y6gmjMYN8RtQFswhzkss12hYhzlujIeCi6v+SDeEzeaHfObZJRkb5E
         SHhRHQb1rHB0+XfeG9sFKSY00QFSOQsEgA+nVuNx87SKkDYKFdQJyVYcOkdfgelTG7zQ
         MD/LiCGgsz1uJN/oroaVjpzcv67Ygd17+gxa34zUpNMn/knadbp6Ye5ztnoAijsxN765
         2AfjMUUlk7G4fczyLyYrFCbTBLFQeCo2mJzaSYH28E5tc+J8RiiXpAQUcp3pUcRuX4EG
         eruhGOd278zwR4HWzrJy1nl+BK8Gnw7l77NQW2lzirMdMpDIurjlmLPeZZ5HXelkw/7L
         1cFw==
X-Received: by 2002:a63:9306:: with SMTP id b6mr1921339pge.36.1542206190658;
        Wed, 14 Nov 2018 06:36:30 -0800 (PST)
Received: from ubuntu.localdomain ([104.238.150.158])
        by smtp.gmail.com with ESMTPSA id 196-v6sm75409350pfc.71.2018.11.14.06.36.28
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 14 Nov 2018 06:36:30 -0800 (PST)
From: Muchun Song <smuchun@gmail.com>
To: mingo@kernel.org, peterz@infradead.org
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH v3] sched/rt: Introduce rt_prio_lower() helper for comparing RT task prority
Date: Wed, 14 Nov 2018 22:36:13 +0800
Message-Id: <20181114143613.99955-1-smuchun@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAnDUkxM+xbzhg_AA--.5812S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3AF48Cw4kXw15Aw4kuw13XFb_yoW3XF4fpa
	n8Wws8tF18Xay2qF1xZrW7Z34rKwn2qFW7trn3K3yrtrn0ywn3KFykAr4jvFZrJryj9FW3
	tr48trW5Cr1DWaUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IYc2Ij64
	vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkI
	ecxEwVCI4VW5XwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_JFI_Gr1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_Cr1j6rxdMxvI
	42IY6I8E87Iv6xkF7I0E14v26F4UJVW0owCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bH
	wIgUUUUU=

We use a value to represent the priority of the RT task. But a smaller
value corresponds to a higher priority. If there are two RT task A and B,
their priorities are prio_a and prio_b, respectively. If prio_a is larger
than prio_b, which means that the priority of RT task A is lower than RT
task B. It may seem a bit strange.

In rt.c, there are many if condition of priority comparison. We need to
think carefully about which priority is higher because of this opposite
logic when read those code. So we introduce rt_prio_lower() helper for
comparing RT task prority, which can make code more readable.

Signed-off-by: Muchun Song <smuchun@gmail.com>
---
 kernel/sched/rt.c | 57 +++++++++++++++++++++++++++++------------------
 1 file changed, 35 insertions(+), 22 deletions(-)

diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 9aa3287ce301..f28157c8212b 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -101,6 +101,15 @@ void init_rt_rq(struct rt_rq *rt_rq)
 	raw_spin_lock_init(&rt_rq->rt_runtime_lock);
 }
 
+/**
+ * rt_prio_lower(a, b) returns true if the priority a is
+ * lower than the priority b, otherwise return false.
+ */
+static inline bool rt_prio_lower(int a, int b)
+{
+	return a > b;
+}
+
 #ifdef CONFIG_RT_GROUP_SCHED
 static void destroy_rt_bandwidth(struct rt_bandwidth *rt_b)
 {
@@ -262,7 +271,7 @@ static void pull_rt_task(struct rq *this_rq);
 static inline bool need_pull_rt_task(struct rq *rq, struct task_struct *prev)
 {
 	/* Try to pull RT tasks here if we lower this rq's prio */
-	return rq->rt.highest_prio.curr > prev->prio;
+	return rt_prio_lower(rq->rt.highest_prio.curr, prev->prio);
 }
 
 static inline int rt_overloaded(struct rq *rq)
@@ -377,7 +386,7 @@ static void enqueue_pushable_task(struct rq *rq, struct task_struct *p)
 	plist_add(&p->pushable_tasks, &rq->rt.pushable_tasks);
 
 	/* Update the highest prio pushable task */
-	if (p->prio < rq->rt.highest_prio.next)
+	if (rt_prio_lower(rq->rt.highest_prio.next, p->prio))
 		rq->rt.highest_prio.next = p->prio;
 }
 
@@ -498,7 +507,7 @@ static void sched_rt_rq_enqueue(struct rt_rq *rt_rq)
 		else if (!on_rt_rq(rt_se))
 			enqueue_rt_entity(rt_se, 0);
 
-		if (rt_rq->highest_prio.curr < curr->prio)
+		if (rt_prio_lower(curr->prio, rt_rq->highest_prio.curr))
 			resched_curr(rq);
 	}
 }
@@ -1044,7 +1053,7 @@ inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)
 	if (&rq->rt != rt_rq)
 		return;
 #endif
-	if (rq->online && prio < prev_prio)
+	if (rq->online && rt_prio_lower(prev_prio, prio))
 		cpupri_set(&rq->rd->cpupri, rq->cpu, prio);
 }
 
@@ -1079,7 +1088,7 @@ inc_rt_prio(struct rt_rq *rt_rq, int prio)
 {
 	int prev_prio = rt_rq->highest_prio.curr;
 
-	if (prio < prev_prio)
+	if (rt_prio_lower(prev_prio, prio))
 		rt_rq->highest_prio.curr = prio;
 
 	inc_rt_prio_smp(rt_rq, prio, prev_prio);
@@ -1092,7 +1101,7 @@ dec_rt_prio(struct rt_rq *rt_rq, int prio)
 
 	if (rt_rq->rt_nr_running) {
 
-		WARN_ON(prio < prev_prio);
+		WARN_ON(rt_prio_lower(prev_prio, prio));
 
 		/*
 		 * This may have been our highest task, and therefore
@@ -1424,7 +1433,7 @@ select_task_rq_rt(struct task_struct *p, int cpu, int sd_flag, int flags)
 	 */
 	if (curr && unlikely(rt_task(curr)) &&
 	    (curr->nr_cpus_allowed < 2 ||
-	     curr->prio <= p->prio)) {
+	     !rt_prio_lower(curr->prio, p->prio))) {
 		int target = find_lowest_rq(p);
 
 		/*
@@ -1432,7 +1441,8 @@ select_task_rq_rt(struct task_struct *p, int cpu, int sd_flag, int flags)
 		 * not running a lower priority task.
 		 */
 		if (target != -1 &&
-		    p->prio < cpu_rq(target)->rt.highest_prio.curr)
+		    rt_prio_lower(cpu_rq(target)->rt.highest_prio.curr,
+				  p->prio))
 			cpu = target;
 	}
 	rcu_read_unlock();
@@ -1475,7 +1485,7 @@ static void check_preempt_equal_prio(struct rq *rq, struct task_struct *p)
  */
 static void check_preempt_curr_rt(struct rq *rq, struct task_struct *p, int flags)
 {
-	if (p->prio < rq->curr->prio) {
+	if (rt_prio_lower(rq->curr->prio, p->prio)) {
 		resched_curr(rq);
 		return;
 	}
@@ -1732,7 +1742,8 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 
 		lowest_rq = cpu_rq(cpu);
 
-		if (lowest_rq->rt.highest_prio.curr <= task->prio) {
+		if (!rt_prio_lower(lowest_rq->rt.highest_prio.curr,
+				   task->prio)) {
 			/*
 			 * Target rq has tasks of equal or higher priority,
 			 * retrying does not release any lock and is unlikely
@@ -1763,7 +1774,7 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 		}
 
 		/* If this rq is still suitable use it. */
-		if (lowest_rq->rt.highest_prio.curr > task->prio)
+		if (rt_prio_lower(lowest_rq->rt.highest_prio.curr, task->prio))
 			break;
 
 		/* try again */
@@ -1823,7 +1834,7 @@ static int push_rt_task(struct rq *rq)
 	 * higher priority than current. If that's the case
 	 * just reschedule current.
 	 */
-	if (unlikely(next_task->prio < rq->curr->prio)) {
+	if (unlikely(rt_prio_lower(rq->curr->prio, next_task->prio))) {
 		resched_curr(rq);
 		return 0;
 	}
@@ -2100,8 +2111,8 @@ static void pull_rt_task(struct rq *this_rq)
 		 * logically higher, the src_rq will push this task away.
 		 * And if its going logically lower, we do not care
 		 */
-		if (src_rq->rt.highest_prio.next >=
-		    this_rq->rt.highest_prio.curr)
+		if (!rt_prio_lower(this_rq->rt.highest_prio.curr,
+				src_rq->rt.highest_prio.next))
 			continue;
 
 		/*
@@ -2121,7 +2132,8 @@ static void pull_rt_task(struct rq *this_rq)
 		 * Do we have an RT task that preempts
 		 * the to-be-scheduled task?
 		 */
-		if (p && (p->prio < this_rq->rt.highest_prio.curr)) {
+		if (p && rt_prio_lower(this_rq->rt.highest_prio.curr,
+				       p->prio)) {
 			WARN_ON(p == src_rq->curr);
 			WARN_ON(!task_on_rq_queued(p));
 
@@ -2133,7 +2145,7 @@ static void pull_rt_task(struct rq *this_rq)
 			 * p if it is lower in priority than the
 			 * current task on the run queue
 			 */
-			if (p->prio < src_rq->curr->prio)
+			if (rt_prio_lower(src_rq->curr->prio, p->prio))
 				goto skip;
 
 			resched = true;
@@ -2167,7 +2179,7 @@ static void task_woken_rt(struct rq *rq, struct task_struct *p)
 	    p->nr_cpus_allowed > 1 &&
 	    (dl_task(rq->curr) || rt_task(rq->curr)) &&
 	    (rq->curr->nr_cpus_allowed < 2 ||
-	     rq->curr->prio <= p->prio))
+	     !rt_prio_lower(rq->curr->prio, p->prio)))
 		push_rt_tasks(rq);
 }
 
@@ -2242,7 +2254,8 @@ static void switched_to_rt(struct rq *rq, struct task_struct *p)
 		if (p->nr_cpus_allowed > 1 && rq->rt.overloaded)
 			rt_queue_push_tasks(rq);
 #endif /* CONFIG_SMP */
-		if (p->prio < rq->curr->prio && cpu_online(cpu_of(rq)))
+		if (rt_prio_lower(rq->curr->prio, p->prio) &&
+		    cpu_online(cpu_of(rq)))
 			resched_curr(rq);
 	}
 }
@@ -2263,18 +2276,18 @@ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
 		 * If our priority decreases while running, we
 		 * may need to pull tasks to this runqueue.
 		 */
-		if (oldprio < p->prio)
+		if (rt_prio_lower(p->prio, oldprio))
 			rt_queue_pull_task(rq);
 
 		/*
 		 * If there's a higher priority task waiting to run
 		 * then reschedule.
 		 */
-		if (p->prio > rq->rt.highest_prio.curr)
+		if (rt_prio_lower(p->prio, rq->rt.highest_prio.curr))
 			resched_curr(rq);
 #else
 		/* For UP simply resched on drop of prio */
-		if (oldprio < p->prio)
+		if (rt_prio_lower(p->prio, oldprio))
 			resched_curr(rq);
 #endif /* CONFIG_SMP */
 	} else {
@@ -2283,7 +2296,7 @@ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
 		 * greater than the current running task
 		 * then reschedule.
 		 */
-		if (p->prio < rq->curr->prio)
+		if (rt_prio_lower(rq->curr->prio, p->prio))
 			resched_curr(rq);
 	}
 }
-- 
2.17.1
