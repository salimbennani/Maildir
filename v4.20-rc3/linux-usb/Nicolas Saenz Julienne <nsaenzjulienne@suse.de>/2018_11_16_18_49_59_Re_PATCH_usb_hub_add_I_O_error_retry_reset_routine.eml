Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 16 Nov 2018 13:50:57 -0000
Received: from icoremail.net (unknown [209.85.214.171])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH+4Loe5baxeiAQ--.48197S3;
	Fri, 16 Nov 2018 18:50:52 +0800 (CST)
Received: from mail-pl1-f171.google.com (unknown [209.85.214.171])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAX_UgEoe5b2ftIAA--.7960S3;
	Fri, 16 Nov 2018 18:50:44 +0800 (CST)
Received: by mail-pl1-f171.google.com with SMTP id b5so4581293plr.4
        for <xuliker@zju.edu.cn>; Fri, 16 Nov 2018 02:50:44 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :message-id:subject:from:to:cc:date:in-reply-to:references
         :user-agent:mime-version:sender:precedence:list-id;
        bh=wKR7IcvrrySB6HQWgl/oEhqVUZk+9iV3vfZYAP8COPI=;
        b=puO5w5kapzB07zNbSQyta/vlILEnbfjLCxMY+I42jLb6tJoP5baQkRkOHTVB+MpyqX
         1MdZmHS5sGkFULcw3V3g1WOJNlf4esox+oBJJJGQVU7T0tUVmJfaFmzsW0fcHsM0Hb3Z
         oDaYyM1Cb0O3jzJQe6xYEflbBXwY5hewLO6YcHP9La+pTEKXoSA5Z2AQqlkbwPTRdogP
         5ZdOf8E/ZDi3FI3IEYUqCOzEDErg23yXHXiw7aAeeXym2IAxHyRPeZ4h12hT6vWvrzw/
         gE6O38tUXie+EYu1T7XlAJrZfX6phU2cxfCXnDNWQU/QhBdfBqABHEAsozwZgESgoqIh
         OFyQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gLsMg2eU/r8JMQJX/A4UxNiqHCJKaxO9owwsqddhEYb5UCJsyLz
	lK1qkQbkgbRkDFwGo8syhi9+GblcWGhNYSeb4Lvoenv84fr5p2E=
X-Received: by 2002:a17:902:166:: with SMTP id 93-v6mr10056916plb.68.1542365444481;
        Fri, 16 Nov 2018 02:50:44 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp254113pju;
        Fri, 16 Nov 2018 02:50:42 -0800 (PST)
X-Google-Smtp-Source: AJdET5dVgkgGFetwLc9QQIGE3dMkjCe3P3LbFyD3FarMXu0oKgjxWxNb3r64/9N0jFvIIeRPxrSz
X-Received: by 2002:a63:ef47:: with SMTP id c7mr9598612pgk.386.1542365442883;
        Fri, 16 Nov 2018 02:50:42 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542365442; cv=none;
        d=google.com; s=arc-20160816;
        b=kswnl2r372WW/sY0qbHAn/mogNn/6g6OqstQP36XwFrKs92p/V6hPI11Ug3lMHdvki
         A3Q88jO6B80VXrbEqNtFaAm+EMupv5xs1wGwHmlXmFeLVOa55tXLYksOVZz3+i2aeNCD
         7N9WW5c4EderkUCxm0StYNnaSuKZ0Ql5/oa2sLUl8vqyWMVCk9FRvtxnkjX4Q66Dy54y
         ar2/ki706uRWhD5TiTiUoGHgM4+d3GIIy5jnB7H28Nt5ufpwMiDflFX3twyX2CmCfaeF
         +O1KFIPd13p6adYCsO+kDmZL92fBSjD/oTQyxjOc8qKiFVIUHn1IrUplcPokz5aeeJZa
         mvew==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:user-agent:references
         :in-reply-to:date:cc:to:from:subject:message-id;
        bh=wKR7IcvrrySB6HQWgl/oEhqVUZk+9iV3vfZYAP8COPI=;
        b=cM+nEcDAuz3vHaPVQBu3wod1WvRCpCpinVLTy3096pfYmNeDWKnVldj/xBL7m8jOe9
         /Cx5kY5CRXNIXDcWDowS6WJfAKSpAVC5Zo6xq60iu1Y/RDMVZ2iq/SjG1cmGDvcKhMkO
         1kcaCta9873+P4+PBC9g7TmkviS8R/EeRs5Vuw8yUG53/LhDCaw8tAMaS18qWJObrBGA
         rLisdyiPZjbSxSeSGmdp5Pwl8BFl1hvxTWc3KbSQS0qRLFgi/40pRbmS64c510b3yrr8
         jIXIIU1r4CkQduwJmgDNZE/nZ8SZb3ZN2R2hrF/SqclqQ+uQFert1WAF2cGTHmi1BCoz
         2Txg==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id g19si23089957pgj.358.2018.11.16.02.50.28;
        Fri, 16 Nov 2018 02:50:42 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389582AbeKPVBw (ORCPT <rfc822;jroi.martin@gmail.com>
        + 99 others); Fri, 16 Nov 2018 16:01:52 -0500
Received: from mx2.suse.de ([195.135.220.15]:51900 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727454AbeKPVBv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 16 Nov 2018 16:01:51 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 120EAAE24;
        Fri, 16 Nov 2018 10:50:01 +0000 (UTC)
Message-ID: <7f7ab25e6e1c9ff37edd46adfe12653d5c300778.camel@suse.de>
Subject: Re: [PATCH] usb: hub: add I/O error retry & reset routine
From: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
To: Alan Stern <stern@rowland.harvard.edu>
Cc: linux-kernel@vger.kernel.org,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        linux-usb@vger.kernel.org
Date: Fri, 16 Nov 2018 11:49:59 +0100
In-Reply-To: <Pine.LNX.4.44L0.1811151420300.1308-100000@iolanthe.rowland.org>
References: <Pine.LNX.4.44L0.1811151420300.1308-100000@iolanthe.rowland.org>
Content-Type: multipart/signed; micalg="pgp-sha256";
        protocol="application/pgp-signature"; boundary="=-QV0Oq8W2xjybfRG6V8pW"
User-Agent: Evolution 3.30.2 
Mime-Version: 1.0
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAX_UgEoe5b2ftIAA--.7960S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Xw4ruryfXw1kZFyfWF48JFb_yoW7KFWrpF
	W8GanIkF4DJa429r1avF4kXFyF9w18Ga4UJFyfJwnIvr98Ar1rKF15KFyY9r1UCrWkA3Wj
	vr40qayUuF4qyFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUQlb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2vj62AExVA0xI
	801c8C04v26x02cVCv0xWle2I262IYc4CY6c8Ij28IcVAaY2xG8wASzI0EjI02j7AqF2xK
	xwAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_Jr4lYx0Ex4A2js
	IE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrwCjxxvEa2IrMxkF
	7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6r4DMxkI7I
	I2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5JwCYIxAIcVC0I7IYx2IY6xkF
	7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVWxJr0_GcWlcIIF0xvEx4A2jsIEc7CjxV
	AFwI0_Cr1j6rxdMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCj
	jxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7
	xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUAVWUtwCIc40Y0x0EwIxGrwCI42IY6xAI
	w20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2KfnxnUUI43ZEXa7IUOjjg3UUUUU==


--=-QV0Oq8W2xjybfRG6V8pW
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Hi Alan,
thanks for the review.

On Thu, 2018-11-15 at 14:24 -0500, Alan Stern wrote:
> On Thu, 15 Nov 2018, Nicolas Saenz Julienne wrote:
>=20
> > An URB submission error in the HUB's endpoint completion function
> > renders the whole HUB device unresponsive. This patch introduces a
> > routine that retries the submission for 1s to then, as a last
> resort,
> > reset the whole device.
> >=20
> > The implementation is based on usbhid/hid_core.c's, which
> implements the
> > same functionality. It was tested with the help of BCC's error
> injection
> > tool (inject.py).
> >=20
> > Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
>=20
> Why do you think this is needed?  Are you experiencing these=20
> sorts of URB submission errors?

Sorry, I should have been more explicit on where I come from. I've been
playing around injecting atomic allocation errors on the USB stack. For
example any URB submission marked with GFP_ATOMIC that ends up into
xhci will allocate some memory with that flag.

Most subsystems, after facing a burst of memory allocation failures,
seem to recover well (usbnet/hid/uas/alsa/serial). But I found out that
it's not the case for USB hubs: In the event of detecting a new device
the hub will complete an int URB which was previously sent to it. The
event data is saved by the host and the URB is resubmitted for further
event passing. In the case that URB submission failed, we lose all
further events.

It is indeed pretty hard to find this issue in the wild, since you have
to time plugging or unplugging an USB device with the system running
out of memory. But I don't think it's unrealistic to think it might
happen.

As I comment in the patch description, I'm injecting the errors using
BCC and eBPF's function override capabilities. =20

>=20
> Why do you handle only errors during submission but not during
> completion?  And if you keep on getting errors during submission, why
> would resetting the hub make any difference?

Well, as far as I know, errors during completion are handled. The error
is marked in hub->error, which later-on, in hub-event(), triggers a
device reset.=20

While implementing the solution I took into account the hub's
completion error processing behavior and HID's implementation of the
submission error handling (see hid_irq_in() in usbhid/hid-core.c). My
rationale was that since both HID and hub are USB devices with a
similar behavior there was no point in reinventing a mechanism. That
said I have no spec data to back the "1s retry window to then reset the
device".

One could argue that in the event of an error having a timer running
forever is not the best design. It has to stop sometime. If that's the
case, the HUB will be in a unknown state, i.e. a device might have
disappeared. Resetting the hub will at least unbind all the USB devices
attached to it and retry the enumeration. Regardless of the
enumeration's success we'll at least be in a "safe" state.

>=20
> The patch doesn't delete the io_retry timer when the hub is removed.

Right, that was silly of me...

Kind Regards,
Nicolas

>=20
> Alan Stern
>=20
>=20
> > ---
> >  drivers/usb/core/hub.c | 43
> +++++++++++++++++++++++++++++++++++++++++-
> >  drivers/usb/core/hub.h |  3 +++
> >  2 files changed, 45 insertions(+), 1 deletion(-)
> >=20
> > diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
> > index d9bd7576786a..1447bdba59ec 100644
> > --- a/drivers/usb/core/hub.c
> > +++ b/drivers/usb/core/hub.c
> > @@ -607,6 +607,44 @@ static int hub_port_status(struct usb_hub
> *hub, int port1,
> >                                  status, change, NULL);
> >  }
> > =20
> > +static void hub_io_error(struct usb_hub *hub)
> > +{
> > +     /*
> > +      * If it has been a while since the last error, we'll assume
> > +      * this a brand new error and reset the retry timeout.
> > +      */
> > +     if (time_after(jiffies, hub->stop_retry + HZ/2))
> > +             hub->retry_delay =3D 0;
> > +
> > +     /* When an error occurs, retry at increasing intervals */
> > +     if (hub->retry_delay =3D=3D 0) {
> > +             hub->retry_delay =3D 13;  /* Then 26, 52, 104, 104, ...
> */
> > +             hub->stop_retry =3D jiffies + msecs_to_jiffies(1000);
> > +     } else if (hub->retry_delay < 100)
> > +             hub->retry_delay *=3D 2;
> > +
> > +     if (time_after(jiffies, hub->stop_retry)) {
> > +             /* Retries failed, so do a port reset */
> > +             usb_queue_reset_device(to_usb_interface(hub-
> >intfdev));
> > +             return;
> > +     }
> > +
> > +     mod_timer(&hub->io_retry,
> > +                     jiffies + msecs_to_jiffies(hub-
> >retry_delay));
> > +}
> > +
> > +static void hub_retry_timeout(struct timer_list *t)
> > +{
> > +     struct usb_hub *hub =3D from_timer(hub, t, io_retry);
> > +
> > +     if (hub->disconnected || hub->quiescing)
> > +             return;
> > +
> > +     dev_err(hub->intfdev, "retrying int urb\n");
> > +     if (usb_submit_urb(hub->urb, GFP_ATOMIC))
> > +             hub_io_error(hub);
> > +}
> > +
> >  static void kick_hub_wq(struct usb_hub *hub)
> >  {
> >       struct usb_interface *intf;
> > @@ -713,8 +751,10 @@ static void hub_irq(struct urb *urb)
> >               return;
> > =20
> >       status =3D usb_submit_urb(hub->urb, GFP_ATOMIC);
> > -     if (status !=3D 0 && status !=3D -ENODEV && status !=3D -EPERM)
> > +     if (status !=3D 0 && status !=3D -ENODEV && status !=3D -EPERM) {
> >               dev_err(hub->intfdev, "resubmit --> %d\n", status);
> > +             hub_io_error(hub);
> > +     }
> >  }
> > =20
> >  /* USB 2.0 spec Section 11.24.2.3 */
> > @@ -1800,6 +1840,7 @@ static int hub_probe(struct usb_interface
> *intf, const struct usb_device_id *id)
> >       INIT_DELAYED_WORK(&hub->leds, led_work);
> >       INIT_DELAYED_WORK(&hub->init_work, NULL);
> >       INIT_WORK(&hub->events, hub_event);
> > +     timer_setup(&hub->io_retry, hub_retry_timeout, 0);
> >       usb_get_intf(intf);
> >       usb_get_dev(hdev);
> > =20
> > diff --git a/drivers/usb/core/hub.h b/drivers/usb/core/hub.h
> > index 4accfb63f7dc..7dbd19c2c8d9 100644
> > --- a/drivers/usb/core/hub.h
> > +++ b/drivers/usb/core/hub.h
> > @@ -69,6 +69,9 @@ struct usb_hub {
> >       struct delayed_work     leds;
> >       struct delayed_work     init_work;
> >       struct work_struct      events;
> > +     struct timer_list       io_retry;
> > +     unsigned long           stop_retry;
> > +     unsigned int            retry_delay;
> >       struct usb_port         **ports;
> >  };
> > =20
> >=20
>=20


--=-QV0Oq8W2xjybfRG6V8pW
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----

iQEzBAABCAAdFiEErOkkGDHCg2EbPcGjlfZmHno8x/4FAlvuoNcACgkQlfZmHno8
x/41VggAoO3ULeHPOJ8uA2ALySh+0cRpBfcOBOsNXiiU1xREkg8XwGqS0clhWVvy
n8fqhnTD4rYLQ0UPEtozdtVCQtWGBRFYvq/s6F43f1GHEOAb++G3pwLgjVF72q6X
VE/ju8+J9MzntoLz1JSJ5wAZ4oY4DZQpkXaXkEch/ulmHCPnmmc8uOUBcbVz9fS1
9svqaXF4ImSPJEH/YGNP3GZIR+pGcW0xouxxzd4xGU/2ABfwBqSDt4TGQ4yJ+IFh
KrtIGKxkzzctj0LtnMWPQSqOFhJtlfuWngZwQ+JdreaQgskj+eazZbpveGfQhtZ/
+HkA1K98/q5NtbwKY5BY+/vhQcP+Hg==
=bQzl
-----END PGP SIGNATURE-----

--=-QV0Oq8W2xjybfRG6V8pW--
