Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 16 Nov 2018 13:50:54 -0000
Received: from icoremail.net (unknown [209.85.214.169])
	by mail-app2 (Coremail) with SMTP id by_KCgCn33yVnu5btQiiAQ--.48609S3;
	Fri, 16 Nov 2018 18:40:22 +0800 (CST)
Received: from mail-pl1-f169.google.com (unknown [209.85.214.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAnBECUnu5bzPBIAA--.1494S3;
	Fri, 16 Nov 2018 18:40:20 +0800 (CST)
Received: by mail-pl1-f169.google.com with SMTP id u6so104765plm.8
        for <xuliker@zju.edu.cn>; Fri, 16 Nov 2018 02:40:20 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:content-transfer-encoding:in-reply-to
         :user-agent:sender:precedence:list-id;
        bh=Nd8tnUHAQ3oUwJm8xmUhX85DJAHxVcQuXmZ8PbjZDGo=;
        b=lmC635PhhK1Mg/hEOdMq+6PixaDybSGUotGrklLC+HhrftvknSOgE4SaSA/gu5BKWs
         Jf6DV4LbLxqAVhwotbtstBapTkrifd/y25ZShue6FVK/My3ZROW8nGCRVl1E0gDRrwfV
         WuHmB513L3DYng5rkDAUyWMyj5yQ/k9i58T9RB3wnf9HxQqatFpl/uOzWMOFET1L1qhh
         Cyj4lC/H5tsGUlcxmg7yMlR122WvXkU0Qc4eYIa0fJch6r+YH5RoF0K5JMPy7nwcXiAv
         yr3jRxj7AOnCDx6b0swAsAwh2igp5AU+JxNTVUzAqwgbx4Vz1GvSXoJ7Yd8102Wlr4a6
         vAXQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gKnEea6UJt/ADJsZknjK42jGjaHxu+dMIR96d0CNFC5K8LW9NtT
	4tTokVR99NTLzaqppB6SCvRD+JrrQO49fjEygBq5C83wefPBJSc=
X-Received: by 2002:a17:902:bd46:: with SMTP id b6mr10197663plx.231.1542364820201;
        Fri, 16 Nov 2018 02:40:20 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp245651pju;
        Fri, 16 Nov 2018 02:40:18 -0800 (PST)
X-Google-Smtp-Source: AJdET5c7D+tUfwbZ38k9EAya35l1TevtcPuUZxL2JZ5lcRLBZuRIrNMTKyDAKDUxGn4WwCDYj5MX
X-Received: by 2002:a17:902:be07:: with SMTP id r7-v6mr10217360pls.137.1542364818888;
        Fri, 16 Nov 2018 02:40:18 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542364818; cv=none;
        d=google.com; s=arc-20160816;
        b=IPcbJoWAmfd3gWN6inZeb3SrpdELhWNI3bAJeaotFXrgKto7eUFkCutykEbGrD7S7S
         RbmZ+0oT2pc928fD7fxkEccy0oBc9uq0QdcgZdwoSVeTXBX6HkP1ePjIIJfE6pPSdlX1
         9rw+/TtKWP0tr0nvN+LwOCTNvPxV6fJPttqXOkwHFlADAq9GW3ROuNWs8cMFSWeD9nrs
         kgYgiNT6LttOHWVhEeTgPPlVKvTuj0Q2wad8V52cSJ/FM+Z4TUqNAZOoBMGHp9y6aF1Y
         uBbWf1mPqiT+Db8FvoBnLZGHF0j4ieTXZ+u6lspDzlq5C7krf/d43x8eFoELFB6Va95g
         YRxA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-transfer-encoding:content-disposition:mime-version
         :references:message-id:subject:cc:to:from:date;
        bh=Nd8tnUHAQ3oUwJm8xmUhX85DJAHxVcQuXmZ8PbjZDGo=;
        b=bgTwfLBqJemxNhh1WO3qodMqIeRyoVgWbjQuyNmdgz6yAxE0UuXMA7aSN5/seV96td
         Z6tulySH1XTXtViSkOdZG1Kch4zJf6K3uUB7JsMN4BRSQbq80w/n8eTLIBTh5oUqKN7C
         tnZA1EffQ1xTMepdVOTF7AVH6Bzgs1c3F3QxSV0DLH9u8mGpsdZPV4kZWPAtO572/5uH
         EZFlZuzZTiTVHBeJ7GFOQpbKygsECbqH0hhDYdJ5QYhnYPmR0FuJSxuG60ibkpy4JuLj
         BNOAuy6MtkDRo7z56OlLbl1+3hK9i5crXWkVYoMwCzCGlgHlacPbqmME/Wf4dO38KHgC
         9ssA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id n18-v6si29987205plp.294.2018.11.16.02.40.03;
        Fri, 16 Nov 2018 02:40:18 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389519AbeKPUvX (ORCPT <rfc822;jroi.martin@gmail.com>
        + 99 others); Fri, 16 Nov 2018 15:51:23 -0500
Received: from metis.ext.pengutronix.de ([85.220.165.71]:37085 "EHLO
        metis.ext.pengutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727539AbeKPUvX (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 16 Nov 2018 15:51:23 -0500
Received: from ptx.hi.pengutronix.de ([2001:67c:670:100:1d::c0])
        by metis.ext.pengutronix.de with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
        (Exim 4.89)
        (envelope-from <ukl@pengutronix.de>)
        id 1gNbX9-00086u-33; Fri, 16 Nov 2018 11:39:31 +0100
Received: from ukl by ptx.hi.pengutronix.de with local (Exim 4.89)
        (envelope-from <ukl@pengutronix.de>)
        id 1gNbX7-0007LD-6w; Fri, 16 Nov 2018 11:39:29 +0100
Date: Fri, 16 Nov 2018 11:39:29 +0100
From: Uwe =?iso-8859-1?Q?Kleine-K=F6nig?= 
        <u.kleine-koenig@pengutronix.de>
To: Thierry Reding <thierry.reding@gmail.com>
Cc: =?utf-8?B?Vm9rw6HEjQ==?= Michal <Michal.Vokac@ysoft.com>,
        Mark Rutland <mark.rutland@arm.com>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-pwm@vger.kernel.org" <linux-pwm@vger.kernel.org>,
        Lukasz Majewski <l.majewski@majess.pl>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Rob Herring <robh+dt@kernel.org>,
        "kernel@pengutronix.de" <kernel@pengutronix.de>,
        Fabio Estevam <fabio.estevam@nxp.com>,
        Lothar =?iso-8859-1?Q?Wa=DFmann?= <LW@karo-electronics.de>,
        Linus Walleij <linus.walleij@linaro.org>
Subject: Re: =?iso-8859-1?B?W1JDRqBQQVRDSCx2Miwy?= =?iso-8859-1?B?LzJd?= pwm:
 imx: Configure output to GPIO in disabled state
Message-ID: <20181116103929.cxfvuc2te7cadhp2@pengutronix.de>
References: <20181107150125.7cpd4v5t7yi2254c@pengutronix.de>
 <4fbb7307-df01-d7bd-f2e2-e05e6d17807d@ysoft.com>
 <20181108191855.zuon3ecv4yjfbs7g@pengutronix.de>
 <283cfef3-16d0-8bd4-e306-6e34d44c3a86@ysoft.com>
 <20181109165555.vqbiwh4hlcnozdna@pengutronix.de>
 <20181114113449.GB2620@ulmo>
 <20181114215120.vddykljqyavm64wj@pengutronix.de>
 <20181115152545.GA8611@ulmo>
 <20181115203733.qvonika6yhn2bsnb@pengutronix.de>
 <20181116095124.GA28631@ulmo>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20181116095124.GA28631@ulmo>
User-Agent: NeoMutt/20170113 (1.7.2)
X-SA-Exim-Connect-IP: 2001:67c:670:100:1d::c0
X-SA-Exim-Mail-From: ukl@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de); SAEximRunCond expanded to false
X-PTX-Original-Recipient: linux-kernel@vger.kernel.org
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAnBECUnu5bzPBIAA--.1494S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvAXoW3KFW3GryxWr47WrW7GFW5GFg_yoW8Jw43Ko
	Wfuws3Za1Utr18Gw10kw1kGry7Wan7Cr1UX3yjqr15JFWjqay5Cry8Aw4kXFZxtrW8GryU
	Aa4rXa1YkrW7KFn8n29KB7ZKAUJUUUUU529EdanIXcx71UUUUj7v73VFW2AGmfu7jjvjm3
	AaLaJ3UjIYCTnIWjp_UUUYC7k0a2IF6w4kM7kC6x804xWl14x267AKxVWUJVW8JwAFIxvE
	14AKwVWUJVWUGwA2ocxC64kIII0Yj41l84x0c7CEw4AK67xGY2AK021l84ACjcxK6xIIjx
	v20xvE14v26ryj6F1UM28EF7xvwVC0I7IYx2IY6xkF7I0E14v26r4j6F4UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1l7I0Y6sxI4wCY1x
	0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW8twCY0x0I
	x7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_JFI_Gr1lcIIF0xvE2Ix0cI8IcVCY1x
	0267AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_Cr1j6rxdMxvI42IY6I8E87Iv6xkF7I0E
	14v26F4UJVW0owCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77
	IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480
	Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64vIr41lIxAIcVCF04
	k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bHZXwUUUUU=

Hello Thierry,

On Fri, Nov 16, 2018 at 10:51:24AM +0100, Thierry Reding wrote:
> On Thu, Nov 15, 2018 at 09:37:33PM +0100, Uwe Kleine-König wrote:
> > On Thu, Nov 15, 2018 at 04:25:45PM +0100, Thierry Reding wrote:
> > > On Wed, Nov 14, 2018 at 10:51:20PM +0100, Uwe Kleine-König wrote:
> > > > On Wed, Nov 14, 2018 at 12:34:49PM +0100, Thierry Reding wrote:
> > > > > On Fri, Nov 09, 2018 at 05:55:55PM +0100, Uwe Kleine-König wrote:
> > > > > > On Fri, Nov 09, 2018 at 02:24:42PM +0000, Vokáč Michal wrote:
> > > > > > > On 8.11.2018 20:18, Uwe Kleine-König wrote:
> > > > > > > > Taking your example with the backlight device you specify an "init" and
> > > > > > > > a "default" pinctrl and only "default" contains the muxing for the PWM
> > > > > > > > pin everything should be as smooth as necessary: The pwm is only muxed
> > > > > > > > when the backlight device is successfully bound.
> > > > > > > 
> > > > > > > Have you tried that Uwe? The bad news is I tested that before and now
> > > > > > > again and it does not work like that. We already discussed that earlier.
> > > > > > 
> > > > > > The key is that the pinmux setting for the PWM pin should be part of the
> > > > > > bl pinctrl, not the pwm pinctrl. Then "default" is only setup when the
> > > > > > bl device is successfully bound which is after the bl's .probe callback
> > > > > > called pwm_apply().
> > > > > 
> > > > > No, that's not at all correct. Pinmux settings should reside with the
> > > > > consumer of the pin. In this case, the PWM is the consumer of the pin,
> > > > > whereas the backlight is the consumer of the *PWM*.
> > > > 
> > > > This is news to me. Adding Linus W. to Cc, maybe he can comment?!
> > > > 
> > > > Grepping through the arm device trees it really seems common to put the
> > > > pinctrl for the pwm pin into the pwm device. I didn't search in depth,
> > > > but I didn't find a counter example.
> > > > 
> > > > For GPIOs it is common that the pinmuxing is included in the GPIO's
> > > > consumer pinctrl. Ditto for mdio busses whose pinctrl is included in the
> > > > ethernet pinctrl.
> > > 
> > > GPIO is different from PWM in that the GPIO is already the pin itself
> > > and is otherwise generic. So typically you put the pinmuxing options
> > > into the device tree node for the consumer of the GPIO, because it is
> > > only when the consumer uses the GPIO that you need to configure that
> > > pin as GPIO.
> > > 
> > > For PWM, however, the PWM consumer is only the consumer of the PWM, but
> > > the PWM device itself is the real consumer of the pin that outputs the
> > > PWM signal. So the PWM determines when the pinmux states need to be
> > > applied, whereas the consumer of the PWM only deals with the PWM.
> > > 
> > > For MDIO busses, I think they are usually part of, and driven by, the
> > > ethernet controller, so again it makes sense to put the pinmux into the
> > > node of the ethernet controller, because the ethernet controller is the
> > > user of the pins.
> > 
> > Maybe it was a bad idea to broaden the discussion to talk about gpios
> > and ethernet stuff here. I'd still consider it a valid construct to put
> > the pwm pin into the backlight's pinctrl unless Linux W. disagrees.
> 
> But why? The backlight doesn't care about the specific pinmuxing of the
> PWM pin. All it cares about is the PWM signal. That's the level of
> abstraction that the PWM consumer expects, anything lower level belongs
> in the PWM driver.

The backlight driver cares about the PWM pin muxing because if it's
wrongly muxed the backlight doesn't work as intended.

> > > > > The problem with making the PWM mode the "default" pinctrl state is that
> > > > > the default state will be applied before the driver is even probed. That
> > > > > makes it unsuitable for this case. I think what we really want here is
> > > > > explicitly "active" and "inactive" states for pinctrl where the PWM
> > > > > driver controls when exactly each state is applied.
> > > > 
> > > > Note that this problem goes away nicely if the pwm pin is attached to
> > > > the backlight. Because it's the backlight's driver that "knows" when the
> > > > pwm is configured correctly and so the already existing mechanisms that
> > > > setup the mux when the bl is correctly probed do the right thing at the
> > > > right time.
> > > 
> > > Actually that's not exactly true. The default pinctrl state will be
> > > applied before the driver's ->probe() implementation, so the pinctrl
> > > state will be active some time before even the backlight driver gets
> > > around to setting up the PWM. If you look at drivers/base/dd.c you'll
> > > see that really_probe() calls pinctrl_bind_pins() before calling the
> > > driver's ->probe() and will select the default state (unless there's
> > > also an "init" state defined, in which case that will get applied and
> > > only after successful probe will the default state be selected).
> > > 
> > > So if you use only a default state, then you could even get into a
> > > situation where ->probe() return -EPROBE_DEFER and it would potentially
> > > take several seconds before the driver is reprobed, during which time
> > > the pinmux will already be set up but the PWM not configured properly
> > > and potentially outputting the wrong level.
> > 
> > If you reread my suggestion to Michal completely you will notice I got
> > that right.
> > 
> > > > > This solves the problem quite nicely because by default the pinctrl
> > > > > state isn't touched. For the case where the bootloader didn't initialize
> > > > > the PWM pin at all, the driver core won't do anything and keep it at the
> > > > > 100k pull-up default.
> > > > 
> > > > Ditto if the pwm pinctrl is attached to the consumer without having to
> > > > introduce new pwm-specific stuff.
> > > 
> > > Well yes, but you'd obviously also have to avoid using the "default"
> > > state, otherwise you'd run into the issues that I described above.
> > 
> > I'd need "default" and "init", right.
> > 
> > > > > > > > No I meant the pwm. Well, it's as easy as that: Whenever with your
> > > > > > > > approach you configure the pin as GPIO with the output set to low,
> > > > > > > > instead configure the pwm with duty_cycle to zero (or disable it).
> > > > > > > > Whenever with your approach you configure the pin as GPIO with the
> > > > > > > > output set to high, configure the pwm with duty_cycle to 100%. (Keeping
> > > > > > > > out inverted PWMs for the ease of discussion, but the procedure can be
> > > > > > > > adapted accordingly.) The only difference then is that with your
> > > > > > > > approach you already "know" in pwm-imx's .probe the idle level and can
> > > > > > > > configure the GPIO accordingly. With my approach you just have to wait
> > > > > > > > until the first pwm_apply which (as described above) works just as well.
> > > > > > > 
> > > > > > > While here I am quite confident you are talking about kernel code, right?
> > > > > > > If yes, then your approach is clear to me.
> > > > > > > 
> > > > > > > The problem is I am quite sure your approach does not solve the cases
> > > > > > > the pinctrl solution does. And according to my tests so far it does not
> > > > > > > work at all because the "init" and "default" states does not work as you
> > > > > > > are saying.
> > > > > > 
> > > > > > That's as pointed out above, because you're looking at the pwm's pinctrl
> > > > > > and I at the pwm-consumer's pinctrl.
> > > > > > 
> > > > > > Note that a sysfs consumer cannot be operated smoothly here, because
> > > > > > there is no pinctrl node to add the PWM mode to that only gets active
> > > > > > after the first configuration. This however is something that should not
> > > > > > be addressed in the imx driver but in the pwm core (if at all).
> > > > > 
> > > > > With the pinctrl-based solution outlined above you can even operate a
> > > > > sysfs consumer properly. The pinctrl states are where they belong, with
> > > > > the PWM device and therefore they can be properly set when the PWM is
> > > > > used, rather than waiting for a PWM consumer to muck with the pinmux.
> > > > > 
> > > > > Note how all the pieces are suddenly falling into place. In my
> > > > > experience that's usually a good indication that you're on the right
> > > > > track.
> > > > 
> > > > OK, sysfs is the only point where the "put pinctrl stuff into the pwm
> > > > core (or driver)" is superior to the already existing and otherwise
> > > > completely working status quo. (Apart from bugs that need fixing in
> > > > your scenario, too.)
> > > 
> > > Nope, sorry. It's superior in all of the other cases as well. You've
> > > said elsewhere already that the prerequisite for the current solution to
> > > support inverse polarity with the i.MX driver is to keep the driver
> > > running, even after the PWM is no longer used. Sorry but that's just not
> > > an option for me.
> > 
> > You want that after pwm_disable() the pin still keeps the idle level. As
> > the hardware doesn't provide this feature "as is" something has to be
> > done about it. This can be reached either by operating the pin as PWM
> > with 0% duty cycle or by switching to GPIO that is configured to the
> > desired level. From the PWM driver's POV the first is the more natural,
> > as this can be accomplished with the registers this driver cares about
> > anyhow.
> 
> We've been over this before. Yes, as long as you operate the pin as PWM
> it's okay to just actively drive it. But once you no longer use the pin,
> why would you want to still actively drive it?

This is because you say the pin should keep its level as inactive even
though that's not what the hardware does without keeping care.

I say this is strange: The consumer specifies if the pwm should be
inverted or not because the pwm alone doesn't know that. Then with the
consumer gone *you* want the pwm to "remember" its last user requested
inversion and so the pin should stay at 1.

To answer your question: I don't want to actively drive the pin when the
user is gone. That's a requirement comming from you. If it was my
decision, I'd say: If the backlight driver calls

	pwm_config(pwm, 0, 100);
	pwm_disable(pwm);

I'd interpret that as: The consumer doesn't use the pin any more, so I'm
not bound to keep the pin at a certain level. If however after
pwm_disable the consumer is still considered to use the pin, then
implementing it the same way as pwm_config(pwm, 0, 100) is the right
thing to do. This applies then to all pwm implementations and so should
be solved in the pwm core, not in the imx driver. In this case the
concept of "disabling a PWM" can go away completely.

In another mail you wrote:
> Your example of keeping an LED in the current state is actually an
> example of where the consumer still needs it. As long as you want to use
> the LED you need to keep the LED driver around, and as long as the LED
> driver is around you have a consumer for the PWM.

With an analog reasoning I'd say: As long as the backlight driver cares
about the backlight being off, it should not disable (or put) the PWM.

> > Also note this is similar in the pwm-bcm-kona driver that doesn't seem
> > to have the concept of "disable" at all. kona_pwmc_disable() just sets
> > up 0% duty cycle. In my eyes this is an argument that is good enough to
> > at least nack the imx-specific implementation of that pinctrl stuff.
> 
> It's not a good enough argument for me. It's certainly possible that not
> all PWM driver can be made to behave exactly as needed. pwm-bcm-kona
> might be one of those, but that doesn't mean that everybody else should
> be restricted to the same behaviour. If we can make i.MX behave exactly
> right, then we should do that.

And if we can make the imx-specific implementation right in a generic
way in the pwm core that might help the bcm-kona driver for free.

> > If the pinctrl idea is implemented in the pwm core, I won't object.
> 
> Let me see if I get this straight: you're not objecting to the idea of
> implementing the pinctrl solution, your only objection is to put it in
> the i.MX driver?

Given that the pinctrl solution is a generic solution that might help
other drivers, too, I think it should not go into the imx specific
driver just because for now this is the only driver that might benefit
from it.

I still don't think it's the best solution for the imx problem but as I
care more for imx in general than for pwm in general I'm interested in
keeping the imx driver focused to the imx specific parts. I won't repeat
the advantages of putting generic stuff into a generic location instead
of its first user.

> > > > Also dts writes don't need to lookup the needed GPIO numbers and pinctrl.
> > > 
> > > Just to clarify: I don't think that we need to get the GPIO number
> > > involved in this case, because we don't have to reconfigure the pin as
> > > GPIO to make this work. The only reason that Michal's proposal did that
> > > is because that was believed to be necessary. But if the pin can just be
> > > configured with a 100k pull-up, that's enough to pull the pin high when
> > > we need it.
> > 
> > Unless the gpio happens to be configured as output at the wrong value.
> > Further I'm not sure if the pwm in disabled state actively pulls to 0
> > and if in this state the PU of the pin is good enough to ensure a one
> > here. That would need verification first.
> 
> The idea is to *not* configure the GPIO as output and output the wrong
> value. The idea is to not use the GPIO at all and instead use whatever
> the hardware default is that makes it such that the backlight is off by
> default at boot.

Which might be possible with Lothar's idea for some machines, but not
for all users of the pwm-imx driver.

Also note that you don't include the poor souls where there is no
hardware pullup into the right direction.

Best regards
Uwe

-- 
Pengutronix e.K.                           | Uwe Kleine-König            |
Industrial Linux Solutions                 | http://www.pengutronix.de/  |
