Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 09 Nov 2018 00:35:35 -0000
Received: from icoremail.net (unknown [209.85.210.175])
	by mail-app2 (Coremail) with SMTP id by_KCgCn3_jCVeRbzfRgAQ--.29314S3;
	Thu, 08 Nov 2018 23:26:58 +0800 (CST)
Received: from mail-pf1-f175.google.com (unknown [209.85.210.175])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCnjEjAVeRbMGIdAA--.3420S3;
	Thu, 08 Nov 2018 23:26:56 +0800 (CST)
Received: by mail-pf1-f175.google.com with SMTP id d13-v6so2279579pfo.3
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 07:26:56 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:to:cc:references:from:date:user-agent:mime-version
         :in-reply-to:content-transfer-encoding:content-language:message-id
         :sender:precedence:list-id;
        bh=kCDHu6fhw0zv7REHLVnikjGn2yqurgRwn0u9/bSl6Vs=;
        b=K5Z6z41wN792nIVtUz4ZAyO+cVKxDnQX7awqLiXCDI/pvRAXzP6ggfkSti7JFaZa7R
         sbBqstSBKsefaWlnB/ZG1eh7w0rpvx7GsqONk0YWkGUAQ+4A59roOIuhVNok7UOp1PIm
         3GQHTB6EFxABrIzF1WRDCMMjoeEy0RNfFW5ylqGRXNxdbbJINVGrYoxXE1IU16HO37pS
         77v2QRDg1tJI5864HUUUSH03ynFj3Xuc65QnqldxtRMOEEZIHm0LQN6dRW3dSxi6BhVu
         /eRuMq7razUEqFQ3/Joxz4yztlLX0xM8ZCnqB7ySMN2ucBP0xkAn56HyDXeZznB4oK8G
         h4lQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=ibm.com
X-Gm-Message-State: AGRZ1gKrDlJwxccWe0nRYY4YZD32MIq0NEaLWqt3DkOdq/fVKmcnKI3t
	SVeVXiFDflaA5V+Pp5CvVK0VxeqSMdZ54VUcOnZAbOkhZd0h3nTJeg==
X-Received: by 2002:a62:5e83:: with SMTP id s125-v6mr4907397pfb.232.1541690815987;
        Thu, 08 Nov 2018 07:26:55 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp326349pjt;
        Thu, 8 Nov 2018 07:26:54 -0800 (PST)
X-Google-Smtp-Source: AJdET5c0fVBD/uedO0rs7bJSPaOHmbLYJpyobNl0Nx5mQOCRRfQImP9NkgEfDXo1ulL8btRvvzfh
X-Received: by 2002:a17:902:b612:: with SMTP id b18-v6mr5064789pls.205.1541690814953;
        Thu, 08 Nov 2018 07:26:54 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541690814; cv=none;
        d=google.com; s=arc-20160816;
        b=yKn3PSeEw2lWCIrFYAIkcetmZfAdunzpFlCzflL31QRa9EPSTnYC/1vGpU/EaDXbQV
         dIKjEF3shhbJ04GkuAwWkMAb3Su7nUhztE699Mfg9nnO9N6TUTYPLfbOzrlRp3RCN1z3
         bvNWs4OMKjlsifJeZWA5NrHczttlSr/bgOXVBFbYaUN/2ezBl7tBh8BeiCD52QB5+cRt
         ZWBvk1t4xasZWhQlKjTJfGn2h786RJVNGOyiQIHZpVKdlBSMAa/z0hfhPcgaOm1MfKtR
         NAz95suYPY93K37FznG23rjVXAWkq/R23QSRzseebfkKE3ugUZG2dYdLZcfQsYBvWrYk
         pHXw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:content-language
         :content-transfer-encoding:in-reply-to:mime-version:user-agent:date
         :from:references:cc:to:subject;
        bh=kCDHu6fhw0zv7REHLVnikjGn2yqurgRwn0u9/bSl6Vs=;
        b=KPH49YsqQLNaCdJDGS7+AKq5DYQJgf8r+n4BEBxqBhp0GHeXw68WcoD0z8wMbx2zup
         a9FQC91OcxZFYsUBYcF/itaSgsmHW5qVXFdXs9+7yREkdRgDVmRG5gkFVB/K5g/Cmlxn
         D9poECgCPPYCSKujiHnx22CLCcnoxiBYLTmf21d+qyQZS+SskfMIKsxuPQbrxlk6RkLc
         Bt/cQwViko5o8S7Mpu1002sFQQ0/MAdpj4ZNrzrWhqTFVHeKEkKAvH/YlJKjsnU0yS8r
         cQJ4q8Q3sBO+nVPsOqNNIxDwWfLz7Y5UUa8qRZTseBCvsIYCe+XmbJ/2QGP4Q4PMOC77
         34zQ==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=ibm.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 1-v6si4471623pla.38.2018.11.08.07.26.39;
        Thu, 08 Nov 2018 07:26:54 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726975AbeKIBC0 (ORCPT <rfc822;ankurbansal210989@gmail.com>
        + 99 others); Thu, 8 Nov 2018 20:02:26 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:33772 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726860AbeKIBC0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 8 Nov 2018 20:02:26 -0500
Received: from pps.filterd (m0098396.ppops.net [127.0.0.1])
        by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wA8FFKwk113906
        for <linux-kernel@vger.kernel.org>; Thu, 8 Nov 2018 10:26:25 -0500
Received: from e15.ny.us.ibm.com (e15.ny.us.ibm.com [129.33.205.205])
        by mx0a-001b2d01.pphosted.com with ESMTP id 2nmqfxh0g1-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Thu, 08 Nov 2018 10:26:25 -0500
Received: from localhost
        by e15.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <stefanb@linux.ibm.com>;
        Thu, 8 Nov 2018 15:26:23 -0000
Received: from b01cxnp23032.gho.pok.ibm.com (9.57.198.27)
        by e15.ny.us.ibm.com (146.89.104.202) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Thu, 8 Nov 2018 15:26:19 -0000
Received: from b01ledav003.gho.pok.ibm.com (b01ledav003.gho.pok.ibm.com [9.57.199.108])
        by b01cxnp23032.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wA8FQIeA28835860
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Thu, 8 Nov 2018 15:26:19 GMT
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id DB926B2064;
        Thu,  8 Nov 2018 15:26:18 +0000 (GMT)
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id A1D9CB205F;
        Thu,  8 Nov 2018 15:26:18 +0000 (GMT)
Received: from sbct-3.pok.ibm.com (unknown [9.47.158.153])
        by b01ledav003.gho.pok.ibm.com (Postfix) with ESMTP;
        Thu,  8 Nov 2018 15:26:18 +0000 (GMT)
Subject: Re: [PATCH v5 13/17] tpm: use tpm_try_get_ops() in tpm-sysfs.c.
To: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>,
        linux-integrity@vger.kernel.org
Cc: linux-security-module@vger.kernel.org,
        James Bottomley <James.Bottomley@HansenPartnership.com>,
        Tomas Winkler <tomas.winkler@intel.com>,
        Tadeusz Struk <tadeusz.struk@intel.com>,
        Stefan Berger <stefanb@linux.vnet.ibm.com>,
        Nayna Jain <nayna@linux.ibm.com>,
        Peter Huewe <peterhuewe@gmx.de>,
        Jason Gunthorpe <jgg@ziepe.ca>, Arnd Bergmann <arnd@arndb.de>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        open list <linux-kernel@vger.kernel.org>
References: <20181108141541.12832-1-jarkko.sakkinen@linux.intel.com>
 <20181108141541.12832-14-jarkko.sakkinen@linux.intel.com>
From: Stefan Berger <stefanb@linux.ibm.com>
Date: Thu, 8 Nov 2018 10:26:18 -0500
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.0
MIME-Version: 1.0
In-Reply-To: <20181108141541.12832-14-jarkko.sakkinen@linux.intel.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-MW
X-TM-AS-GCONF: 00
x-cbid: 18110815-0068-0000-0000-0000035CD6A6
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010008; HX=3.00000242; KW=3.00000007;
 PH=3.00000004; SC=3.00000269; SDB=6.01114497; UDB=6.00577819; IPR=6.00894595;
 MB=3.00024076; MTD=3.00000008; XFM=3.00000015; UTC=2018-11-08 15:26:23
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18110815-0069-0000-0000-0000465BF5F4
Message-Id: <cece04be-14f0-bbb4-db74-5e286f7b2b48@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-11-08_08:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1807170000 definitions=main-1811080129
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCnjEjAVeRbMGIdAA--.3420S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3XF1xJryrtw1xuF15Jw1UJrb_yoW3ZF17pF
	Z8GayagFWUJw4DGFs7Zr4DZFya9r13K3y7G3yfKw1fCFnrJrs3KFy7ua4Yy34rCryrCr1f
	ArZrAF95Aa4qv3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmFb7Iv0xC_KF4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxk0xIA0c2IEe2xFo4CEbIxvr21lc7CjxVAKzI0EY4vE52x082I5MxkFs20E
	Y4vE44CYbxCE4x80FwCY02Avz4vEIxC_XrWlc2IjII80xcxEwVAKI48JMxvI42IY6xIIjx
	v20xvE14v26r4j6ryUMxvI42IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2
	jsIE14v26rxl6s0DMxvI42IY6I8E87Iv6xkF7I0E14v26rxl6s0DMxAIw28IcxkI7VAKI4
	8JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4U
	MI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67
	AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2
	KfnxnUUI43ZEXa7IU5PDGUUUUUU==

On 11/8/18 9:15 AM, Jarkko Sakkinen wrote:
> Use tpm_try_get_ops() in tpm-sysfs.c so that we can consider moving
> other decorations (locking, localities, power management for example)
> inside it. This direction can be of course taken only after other call
> sites for tpm_transmit() have been treated in the same way.
>
> Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>

Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>

> ---
>   drivers/char/tpm/tpm-sysfs.c | 123 ++++++++++++++++++++++-------------
>   1 file changed, 78 insertions(+), 45 deletions(-)
>
> diff --git a/drivers/char/tpm/tpm-sysfs.c b/drivers/char/tpm/tpm-sysfs.c
> index 03e704f99ed6..3733491671ca 100644
> --- a/drivers/char/tpm/tpm-sysfs.c
> +++ b/drivers/char/tpm/tpm-sysfs.c
> @@ -39,7 +39,6 @@ static ssize_t pubek_show(struct device *dev, struct device_attribute *attr,
>   {
>   	struct tpm_buf tpm_buf;
>   	struct tpm_readpubek_out *out;
> -	ssize_t rc;
>   	int i;
>   	char *str = buf;
>   	struct tpm_chip *chip = to_tpm_chip(dev);
> @@ -47,17 +46,17 @@ static ssize_t pubek_show(struct device *dev, struct device_attribute *attr,
>
>   	memset(&anti_replay, 0, sizeof(anti_replay));
>
> -	if (tpm_buf_init(&tpm_buf, TPM_TAG_RQU_COMMAND, TPM_ORD_READPUBEK))
> +	if (tpm_try_get_ops(chip))
>   		return 0;
>
> +	if (tpm_buf_init(&tpm_buf, TPM_TAG_RQU_COMMAND, TPM_ORD_READPUBEK))
> +		goto out_ops;
> +
>   	tpm_buf_append(&tpm_buf, anti_replay, sizeof(anti_replay));
>
> -	rc = tpm_transmit_cmd(chip, &tpm_buf, READ_PUBEK_RESULT_MIN_BODY_SIZE,
> -			      0, "attempting to read the PUBEK");
> -	if (rc) {
> -		tpm_buf_destroy(&tpm_buf);
> -		return 0;
> -	}
> +	if (tpm_transmit_cmd(chip, &tpm_buf, READ_PUBEK_RESULT_MIN_BODY_SIZE,
> +			      0, "attempting to read the PUBEK"))
> +		goto out_buf;
>
>   	out = (struct tpm_readpubek_out *)&tpm_buf.data[10];
>   	str +=
> @@ -88,9 +87,11 @@ static ssize_t pubek_show(struct device *dev, struct device_attribute *attr,
>   			str += sprintf(str, "\n");
>   	}
>
> -	rc = str - buf;
> +out_buf:
>   	tpm_buf_destroy(&tpm_buf);
> -	return rc;
> +out_ops:
> +	tpm_put_ops(chip);
> +	return str - buf;
>   }
>   static DEVICE_ATTR_RO(pubek);
>
> @@ -103,10 +104,15 @@ static ssize_t pcrs_show(struct device *dev, struct device_attribute *attr,
>   	char *str = buf;
>   	struct tpm_chip *chip = to_tpm_chip(dev);
>
> +	if (tpm_try_get_ops(chip))
> +		return 0;
> +
>   	if (tpm1_getcap(chip, TPM_CAP_PROP_PCR, &cap,
>   			"attempting to determine the number of PCRS",
> -			sizeof(cap.num_pcrs)))
> +			sizeof(cap.num_pcrs))) {
> +		tpm_put_ops(chip);
>   		return 0;
> +	}
>
>   	num_pcrs = be32_to_cpu(cap.num_pcrs);
>   	for (i = 0; i < num_pcrs; i++) {
> @@ -119,6 +125,7 @@ static ssize_t pcrs_show(struct device *dev, struct device_attribute *attr,
>   			str += sprintf(str, "%02X ", digest[j]);
>   		str += sprintf(str, "\n");
>   	}
> +	tpm_put_ops(chip);
>   	return str - buf;
>   }
>   static DEVICE_ATTR_RO(pcrs);
> @@ -126,16 +133,21 @@ static DEVICE_ATTR_RO(pcrs);
>   static ssize_t enabled_show(struct device *dev, struct device_attribute *attr,
>   		     char *buf)
>   {
> +	struct tpm_chip *chip = to_tpm_chip(dev);
> +	ssize_t rc = 0;
>   	cap_t cap;
> -	ssize_t rc;
>
> -	rc = tpm1_getcap(to_tpm_chip(dev), TPM_CAP_FLAG_PERM, &cap,
> -			 "attempting to determine the permanent enabled state",
> -			 sizeof(cap.perm_flags));
> -	if (rc)
> +	if (tpm_try_get_ops(chip))
>   		return 0;
>
> +	if (tpm1_getcap(chip, TPM_CAP_FLAG_PERM, &cap,
> +			"attempting to determine the permanent enabled state",
> +			sizeof(cap.perm_flags)))
> +		goto out_ops;
> +
>   	rc = sprintf(buf, "%d\n", !cap.perm_flags.disable);
> +out_ops:
> +	tpm_put_ops(chip);
>   	return rc;
>   }
>   static DEVICE_ATTR_RO(enabled);
> @@ -143,16 +155,21 @@ static DEVICE_ATTR_RO(enabled);
>   static ssize_t active_show(struct device *dev, struct device_attribute *attr,
>   		    char *buf)
>   {
> +	struct tpm_chip *chip = to_tpm_chip(dev);
> +	ssize_t rc = 0;
>   	cap_t cap;
> -	ssize_t rc;
>
> -	rc = tpm1_getcap(to_tpm_chip(dev), TPM_CAP_FLAG_PERM, &cap,
> -			 "attempting to determine the permanent active state",
> -			 sizeof(cap.perm_flags));
> -	if (rc)
> +	if (tpm_try_get_ops(chip))
>   		return 0;
>
> +	if (tpm1_getcap(chip, TPM_CAP_FLAG_PERM, &cap,
> +			"attempting to determine the permanent active state",
> +			sizeof(cap.perm_flags)))
> +		goto out_ops;
> +
>   	rc = sprintf(buf, "%d\n", !cap.perm_flags.deactivated);
> +out_ops:
> +	tpm_put_ops(chip);
>   	return rc;
>   }
>   static DEVICE_ATTR_RO(active);
> @@ -160,16 +177,21 @@ static DEVICE_ATTR_RO(active);
>   static ssize_t owned_show(struct device *dev, struct device_attribute *attr,
>   			  char *buf)
>   {
> +	struct tpm_chip *chip = to_tpm_chip(dev);
> +	ssize_t rc = 0;
>   	cap_t cap;
> -	ssize_t rc;
>
> -	rc = tpm1_getcap(to_tpm_chip(dev), TPM_CAP_PROP_OWNER, &cap,
> -			 "attempting to determine the owner state",
> -			 sizeof(cap.owned));
> -	if (rc)
> +	if (tpm_try_get_ops(chip))
>   		return 0;
>
> +	if (tpm1_getcap(to_tpm_chip(dev), TPM_CAP_PROP_OWNER, &cap,
> +			"attempting to determine the owner state",
> +			sizeof(cap.owned)))
> +		goto out_ops;
> +
>   	rc = sprintf(buf, "%d\n", cap.owned);
> +out_ops:
> +	tpm_put_ops(chip);
>   	return rc;
>   }
>   static DEVICE_ATTR_RO(owned);
> @@ -177,16 +199,21 @@ static DEVICE_ATTR_RO(owned);
>   static ssize_t temp_deactivated_show(struct device *dev,
>   				     struct device_attribute *attr, char *buf)
>   {
> +	struct tpm_chip *chip = to_tpm_chip(dev);
> +	ssize_t rc = 0;
>   	cap_t cap;
> -	ssize_t rc;
>
> -	rc = tpm1_getcap(to_tpm_chip(dev), TPM_CAP_FLAG_VOL, &cap,
> -			 "attempting to determine the temporary state",
> -			 sizeof(cap.stclear_flags));
> -	if (rc)
> +	if (tpm_try_get_ops(chip))
>   		return 0;
>
> +	if (tpm1_getcap(to_tpm_chip(dev), TPM_CAP_FLAG_VOL, &cap,
> +			"attempting to determine the temporary state",
> +			sizeof(cap.stclear_flags)))
> +		goto out_ops;
> +
>   	rc = sprintf(buf, "%d\n", cap.stclear_flags.deactivated);
> +out_ops:
> +	tpm_put_ops(chip);
>   	return rc;
>   }
>   static DEVICE_ATTR_RO(temp_deactivated);
> @@ -195,15 +222,18 @@ static ssize_t caps_show(struct device *dev, struct device_attribute *attr,
>   			 char *buf)
>   {
>   	struct tpm_chip *chip = to_tpm_chip(dev);
> -	cap_t cap;
> -	ssize_t rc;
> +	ssize_t rc = 0;
>   	char *str = buf;
> +	cap_t cap;
>
> -	rc = tpm1_getcap(chip, TPM_CAP_PROP_MANUFACTURER, &cap,
> -			 "attempting to determine the manufacturer",
> -			 sizeof(cap.manufacturer_id));
> -	if (rc)
> +	if (tpm_try_get_ops(chip))
>   		return 0;
> +
> +	if (tpm1_getcap(chip, TPM_CAP_PROP_MANUFACTURER, &cap,
> +			"attempting to determine the manufacturer",
> +			sizeof(cap.manufacturer_id)))
> +		goto out_ops;
> +
>   	str += sprintf(str, "Manufacturer: 0x%x\n",
>   		       be32_to_cpu(cap.manufacturer_id));
>
> @@ -220,11 +250,10 @@ static ssize_t caps_show(struct device *dev, struct device_attribute *attr,
>   			       cap.tpm_version_1_2.revMinor);
>   	} else {
>   		/* Otherwise just use TPM_STRUCT_VER */
> -		rc = tpm1_getcap(chip, TPM_CAP_VERSION_1_1, &cap,
> -				 "attempting to determine the 1.1 version",
> -				 sizeof(cap.tpm_version));
> -		if (rc)
> -			return 0;
> +		if (tpm1_getcap(chip, TPM_CAP_VERSION_1_1, &cap,
> +				"attempting to determine the 1.1 version",
> +				sizeof(cap.tpm_version)))
> +			goto out_ops;
>   		str += sprintf(str,
>   			       "TCG version: %d.%d\nFirmware version: %d.%d\n",
>   			       cap.tpm_version.Major,
> @@ -232,8 +261,10 @@ static ssize_t caps_show(struct device *dev, struct device_attribute *attr,
>   			       cap.tpm_version.revMajor,
>   			       cap.tpm_version.revMinor);
>   	}
> -
> -	return str - buf;
> +	rc = str - buf;
> +out_ops:
> +	tpm_put_ops(chip);
> +	return rc;
>   }
>   static DEVICE_ATTR_RO(caps);
>
> @@ -241,10 +272,12 @@ static ssize_t cancel_store(struct device *dev, struct device_attribute *attr,
>   			    const char *buf, size_t count)
>   {
>   	struct tpm_chip *chip = to_tpm_chip(dev);
> -	if (chip == NULL)
> +
> +	if (tpm_try_get_ops(chip))
>   		return 0;
>
>   	chip->ops->cancel(chip);
> +	tpm_put_ops(chip);
>   	return count;
>   }
>   static DEVICE_ATTR_WO(cancel);

