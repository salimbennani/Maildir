Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 09 Nov 2018 00:38:15 -0000
Received: from icoremail.net (unknown [209.85.214.175])
	by mail-app2 (Coremail) with SMTP id by_KCgCHv+RBq+RbU8BiAQ--.29688S3;
	Fri, 09 Nov 2018 05:31:45 +0800 (CST)
Received: from mail-pl1-f175.google.com (unknown [209.85.214.175])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXdUE+q+Rb6cIeAA--.2301S3;
	Fri, 09 Nov 2018 05:31:42 +0800 (CST)
Received: by mail-pl1-f175.google.com with SMTP id g59-v6so10138006plb.10
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 13:31:42 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=VzxhDsbQXpqZHcRsLCzQtSxbm1scTigRKa48o5zIlrs=;
        b=MAliLKX/itLODZt9KcwmXgmn87QexQkUqDy7sjvDIz8ikrbOiDzdBVaYX4X+DVmZ1I
         K0gctBBZzLmMb4mL/6/UsOepMmzMsiJJR1/YoRaRFVorg/1Mls+P9GdFNt+NXUSIvSWI
         t4aVJpg+SbPM+lSo7R+SzYubTXa+ZqPVfP8ujNI4HuugrGLPx9fx381eMJ3dseXbjTnz
         hJ8vylf594xB34nn3vUfQiHftMgIQ/L/wxp1xTKe+ChATIG7XWedleECV0G33v3qwzQU
         3dSpG9OTQpiFom1LpQG29qAZ/nX7OJkWOsaM+rMoG3WOdCyEC10fYqHSQMpa+ACJ15BK
         fewg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJssO2//qgtkpDZRDp6z5uAYPquRkCJRR9NSJokj9LS7yhyUNoR
	9WfkbavtdZ1kZByjcUDm5G2Wugb4yuhpH3vhRYnoF63fLrVltODVFw==
X-Received: by 2002:a17:902:166:: with SMTP id 93-v6mr6062640plb.68.1541712701678;
        Thu, 08 Nov 2018 13:31:41 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp755035pjt;
        Thu, 8 Nov 2018 13:31:40 -0800 (PST)
X-Google-Smtp-Source: AJdET5cTJCmHjJukorcfQy/0xZBZ1Mcy2LR2uw6x7atRjSP9m7yW3QTT8zPQO33DATpghgK9raEJ
X-Received: by 2002:a17:902:8689:: with SMTP id g9-v6mr6077327plo.44.1541712700567;
        Thu, 08 Nov 2018 13:31:40 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541712700; cv=none;
        d=google.com; s=arc-20160816;
        b=s6s2YsOYeZVYh3DPVKg3heOSLlYuFnRlajuBm4M0oTErRVS4yuqWJ77MWP4OofTXQ2
         jZedSwhoz17/SNbfSKYiDC0pbZzDFi4fgIR3G8qzS9Ro54RXh/dk1kOAN0vrMM2ozQfV
         Kgm4qXXWh65me82bJMQjBnaAqtt+1ETmlnUj9uInLznrsKULfCflezin7qdjLScfHnxU
         6BVE2hWVn4MCKW8YDvG9qsqGmxtMOScahWTPKBysEZkIIkYbztsIPkNaTtVyjF2ICLbq
         u2eHCathqPeOAOWbIoWJs96eyfaDcOg7ltZSeaC+buK/nURQJ8SNwxDV/jMTybf7IkXy
         vDqA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date;
        bh=VzxhDsbQXpqZHcRsLCzQtSxbm1scTigRKa48o5zIlrs=;
        b=Yrf2siVmIwaO9xccv3G2wriT/TSFPpsIrwVLeDD1eZbn6pmQs3Pl+joqqlTErSI79b
         Pn2CWM4NziAuW4/f/hyGIc+Zq+MBJE4LlVYhWRJNSK8HmkAxneoOZHi6w4Xtqd/g1vqo
         pMnpK4VFRj4i0WbcpqmpP7ebqvxfRv0BUTIWGXVonr1CjfjQf4T2AyBIU8dbsI9tTcrB
         jhlJV3WwtmnqLWTaVsha8SXoTyLa+/ORGiOiGBRDO/73MgxxCsVXG6sezzh46q9PfzMK
         JoueimvWezoL15KimQ90+criJ0nGDV9wZcyMFOtIdxphL9CAwBz+8S3jW0c6QZx5OT5d
         aCow==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id d34-v6si4363751pgm.550.2018.11.08.13.31.25;
        Thu, 08 Nov 2018 13:31:40 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727304AbeKIHHx (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Fri, 9 Nov 2018 02:07:53 -0500
Received: from fieldses.org ([173.255.197.46]:39158 "EHLO fieldses.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725882AbeKIHHx (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 02:07:53 -0500
Received: by fieldses.org (Postfix, from userid 2815)
        id D0AF32014; Thu,  8 Nov 2018 16:30:30 -0500 (EST)
Date: Thu, 8 Nov 2018 16:30:30 -0500
From: "J. Bruce Fields" <bfields@fieldses.org>
To: NeilBrown <neilb@suse.com>
Cc: Jeff Layton <jlayton@kernel.org>,
        Alexander Viro <viro@zeniv.linux.org.uk>,
        Martin Wilck <mwilck@suse.de>, linux-fsdevel@vger.kernel.org,
        Frank Filz <ffilzlnx@mindspring.com>,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH 10/12] fs/locks: create a tree of dependent requests.
Message-ID: <20181108213030.GF6090@fieldses.org>
References: <154138128401.31651.1381177427603557514.stgit@noble>
 <154138144796.31651.14201944346371750178.stgit@noble>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <154138144796.31651.14201944346371750178.stgit@noble>
User-Agent: Mutt/1.5.21 (2010-09-15)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXdUE+q+Rb6cIeAA--.2301S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxAFy3ZF48WryrXF45ZFykAFb_yoWrAF4DpF
	s0gFyYkFWFgry7W3Z7Ja4UuF1S9ws3Kr47CryrJw42yr98Xr97Wr1kKr13XF17tr4xWFsx
	WF4rJ3sruw4DZFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUBSb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_JrI_
	JrylYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwCjxxvEa2IrMxkF7I
	0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6F4lc2IjII80
	xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r4j6ryUMxvI42IY6xIIjxv20xvEc7CjxV
	AFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvEx4A2jsIEc7CjxVAF
	wI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77
	IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480
	Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64vIr41lIxAIcVCF04
	k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxUH-J5DUUUU

On Mon, Nov 05, 2018 at 12:30:48PM +1100, NeilBrown wrote:
> When we find an existing lock which conflicts with a request,
> and the request wants to wait, we currently add the request
> to a list.  When the lock is removed, the whole list is woken.
> This can cause the thundering-herd problem.
> To reduce the problem, we make use of the (new) fact that
> a pending request can itself have a list of blocked requests.
> When we find a conflict, we look through the existing blocked requests.
> If any one of them blocks the new request, the new request is attached
> below that request, otherwise it is added to the list of blocked
> requests, which are now known to be mutually non-conflicting.
> 
> This way, when the lock is released, only a set of non-conflicting
> locks will be woken, the rest can stay asleep.
> If the lock request cannot be granted and the request needs to be
> requeued, all the other requests it blocks will then be woken

So, to make sure I understand: the tree of blocking locks only ever has
three levels (the active lock, the locks blocking on it, and their
children?)

--b.

> 
> Reported-and-tested-by: Martin Wilck <mwilck@suse.de>
> Signed-off-by: NeilBrown <neilb@suse.com>
> ---
>  fs/locks.c |   29 +++++++++++++++++++++++------
>  1 file changed, 23 insertions(+), 6 deletions(-)
> 
> diff --git a/fs/locks.c b/fs/locks.c
> index 802d5853acd5..1b0eac6b2918 100644
> --- a/fs/locks.c
> +++ b/fs/locks.c
> @@ -715,11 +715,25 @@ static void locks_delete_block(struct file_lock *waiter)
>   * fl_blocked list itself is protected by the blocked_lock_lock, but by ensuring
>   * that the flc_lock is also held on insertions we can avoid taking the
>   * blocked_lock_lock in some cases when we see that the fl_blocked list is empty.
> + *
> + * Rather than just adding to the list, we check for conflicts with any existing
> + * waiters, and add beneath any waiter that blocks the new waiter.
> + * Thus wakeups don't happen until needed.
>   */
>  static void __locks_insert_block(struct file_lock *blocker,
> -					struct file_lock *waiter)
> +				 struct file_lock *waiter,
> +				 bool conflict(struct file_lock *,
> +					       struct file_lock *))
>  {
> +	struct file_lock *fl;
>  	BUG_ON(!list_empty(&waiter->fl_block));
> +
> +new_blocker:
> +	list_for_each_entry(fl, &blocker->fl_blocked, fl_block)
> +		if (conflict(fl, waiter)) {
> +			blocker =  fl;
> +			goto new_blocker;
> +		}
>  	waiter->fl_blocker = blocker;
>  	list_add_tail(&waiter->fl_block, &blocker->fl_blocked);
>  	if (IS_POSIX(blocker) && !IS_OFDLCK(blocker))
> @@ -734,10 +748,12 @@ static void __locks_insert_block(struct file_lock *blocker,
>  
>  /* Must be called with flc_lock held. */
>  static void locks_insert_block(struct file_lock *blocker,
> -					struct file_lock *waiter)
> +			       struct file_lock *waiter,
> +			       bool conflict(struct file_lock *,
> +					     struct file_lock *))
>  {
>  	spin_lock(&blocked_lock_lock);
> -	__locks_insert_block(blocker, waiter);
> +	__locks_insert_block(blocker, waiter, conflict);
>  	spin_unlock(&blocked_lock_lock);
>  }
>  
> @@ -996,7 +1012,7 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
>  		if (!(request->fl_flags & FL_SLEEP))
>  			goto out;
>  		error = FILE_LOCK_DEFERRED;
> -		locks_insert_block(fl, request);
> +		locks_insert_block(fl, request, flock_locks_conflict);
>  		goto out;
>  	}
>  	if (request->fl_flags & FL_ACCESS)
> @@ -1071,7 +1087,8 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
>  			spin_lock(&blocked_lock_lock);
>  			if (likely(!posix_locks_deadlock(request, fl))) {
>  				error = FILE_LOCK_DEFERRED;
> -				__locks_insert_block(fl, request);
> +				__locks_insert_block(fl, request,
> +						     posix_locks_conflict);
>  			}
>  			spin_unlock(&blocked_lock_lock);
>  			goto out;
> @@ -1542,7 +1559,7 @@ int __break_lease(struct inode *inode, unsigned int mode, unsigned int type)
>  		break_time -= jiffies;
>  	if (break_time == 0)
>  		break_time++;
> -	locks_insert_block(fl, new_fl);
> +	locks_insert_block(fl, new_fl, leases_conflict);
>  	trace_break_lease_block(inode, new_fl);
>  	spin_unlock(&ctx->flc_lock);
>  	percpu_up_read_preempt_enable(&file_rwsem);
> 
