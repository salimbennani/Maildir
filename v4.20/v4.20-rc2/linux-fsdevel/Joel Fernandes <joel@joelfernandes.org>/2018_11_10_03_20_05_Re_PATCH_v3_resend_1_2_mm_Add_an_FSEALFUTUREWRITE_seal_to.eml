Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 04:51:18 -0000
Received: from icoremail.net (unknown [209.85.214.176])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX9ODTuZbNTlsAQ--.33050S3;
	Sat, 10 Nov 2018 11:20:36 +0800 (CST)
Received: from mail-pl1-f176.google.com (unknown [209.85.214.176])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXd0N_TuZbNFAlAA--.5910S3;
	Sat, 10 Nov 2018 11:20:31 +0800 (CST)
Received: by mail-pl1-f176.google.com with SMTP id c13-v6so1765799plz.13
        for <xuliker@zju.edu.cn>; Fri, 09 Nov 2018 19:20:31 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=SwhalELpmKQK1pwDtkb5pSRxXxFuUqJP43YJan5OutI=;
        b=atIW/R53D6FRNCjv3K2cIVxgnGggK6/wjheM2laLitvaig+7KAtJlbIUfKPMyGa2vr
         tf4UwgAkhQhfcJyxTtrKFQ8AG/qwFcRUjeq668EM8A7iaitoWVuk1DKQTWkiAD+RpQr4
         ghkhrpzNmIt6RTnBvu14uN/m7CRwvqgENiHFwqCLHxoXFAr9sWbbuCA7XvZi1HVczbfx
         q/sjKwHukpJ3c0TXwXFJ2wSsMuUyGDz6o7emDEZEW9d8SK+b0U/LUdXmZs/cW2v+kSPh
         Cddyvda3OWH57L0YGvKC0HKaTwxQLaw/n1XjCC6ejWNbGFPKonHfa5MDwSiq9LnAdnKC
         mFpQ==
X-Gm-Message-State: AGRZ1gK3yIaEdbfyf9sOILugSwZdytdIGG1SmHWuqJFp1Rf82dn1/zWj
	qemNawBD4FYRsN1srpprCVWMAqNuv7xbmBwVrXTOuFDs+92rEN0=
X-Received: by 2002:a17:902:560f:: with SMTP id h15-v6mr8374694pli.160.1541820031378;
        Fri, 09 Nov 2018 19:20:31 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp675240pjt;
        Fri, 9 Nov 2018 19:20:30 -0800 (PST)
X-Google-Smtp-Source: AJdET5e87EXg63hJ9AEx5y9njIpGpiS3Otg0oTmMjGtDo5OUx7QXq5Z0vQdVIYtCkZ7uknzg1+dd
X-Received: by 2002:a62:32c4:: with SMTP id y187-v6mr11599582pfy.4.1541820030156;
        Fri, 09 Nov 2018 19:20:30 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541820030; cv=none;
        d=google.com; s=arc-20160816;
        b=0vgtmsrDBzY19/ZblA9J060Gxoco5l6iz7/Tz+TyWE4XnuEDPT+Pv/98EWKN7YTNdA
         dHsGuZe+9Q69/EU8vg9LL2dZueHU2e6J9qZsQJOvuyMgpZBwtXxgj6F3SjZph6Ge3fk7
         xD76iIuvprwLK7KypxOXYM9YzNM8yOUYFnsjyMrjtfm6BFT5SZVpbyGnNbLx8wuMK7wR
         +RBMtrFb/e5VwdeyDnV5YxucbYtE12lAzB9dlcxBprGX4AO8CTniXx7h15EZTsvXWiRG
         nLtA2dU2U51Rbf/3jRZredoy4LI1fjKx49sDn9CmtBsipg9ILy27zH4sSWEZSdVDXWls
         dApA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=SwhalELpmKQK1pwDtkb5pSRxXxFuUqJP43YJan5OutI=;
        b=JvmBawUibkzl6yy4r0QiNYO+G11SMZJtSCzWGUwuDoxsXX6HiOjwBZ4GzCIQVGH40N
         VheuMJBpr4GDP1jIQTLVn/z4kWI6eT22h0lBfQ4kX0WbgTsWnAQltR1SOz3X14HBnbdz
         Ti4dQifx6im3rw5hV854Rv2dCPcgCpBYPJCsgFYFDVdrnhTpNtPV2CxMw9OkULZp+sio
         Mj7bWrAjkYD/l+88o6TnTn5XLOrVA+xdG5s8Z76m0uzcB2Hr1tg9l33dHoao3Z8s8sNq
         +0I4zG3gO+eWfp9zX2WuVWtqkHtibzOR4poSMQoFlNEmBRTkDufczdjBnhOgPntPFNpD
         uXaw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@joelfernandes.org header.s=google header.b=xq7Vldvk;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id n2-v6si9610177plk.255.2018.11.09.19.20.12;
        Fri, 09 Nov 2018 19:20:30 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728566AbeKJNDg (ORCPT <rfc822;tomnomnom1@gmail.com>
        + 99 others); Sat, 10 Nov 2018 08:03:36 -0500
Received: from mail-pg1-f195.google.com ([209.85.215.195]:37775 "EHLO
        mail-pg1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728228AbeKJNDg (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 10 Nov 2018 08:03:36 -0500
Received: by mail-pg1-f195.google.com with SMTP id 80so1661982pge.4
        for <linux-kernel@vger.kernel.org>; Fri, 09 Nov 2018 19:20:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=joelfernandes.org; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=SwhalELpmKQK1pwDtkb5pSRxXxFuUqJP43YJan5OutI=;
        b=xq7VldvkCZEHJyxch+k3eLF912iD/rTIOqqL8Vfh+Lq4Ww72VftLxnx+hw2pG7ABiw
         Yy8/mSK3jYPIXFpuAmw5rz23WIQxacyH7jJ2UzPAVfFOqogdBcXAIigrNbnFqihC9I4r
         BwgRQPblyifTqihZlim7tpMEWRjiGJCUKvgwM=
X-Received: by 2002:a62:682:: with SMTP id 124-v6mr11543056pfg.161.1541820007715;
        Fri, 09 Nov 2018 19:20:07 -0800 (PST)
Received: from localhost ([2620:0:1000:1601:3aef:314f:b9ea:889f])
        by smtp.gmail.com with ESMTPSA id q1sm8566556pgs.14.2018.11.09.19.20.05
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 09 Nov 2018 19:20:06 -0800 (PST)
Date: Fri, 9 Nov 2018 19:20:05 -0800
From: Joel Fernandes <joel@joelfernandes.org>
To: Jann Horn <jannh@google.com>
Cc: kernel list <linux-kernel@vger.kernel.org>, jreck@google.com,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@google.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Christoph Hellwig <hch@infradead.org>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Andrew Morton <akpm@linux-foundation.org>,
        Daniel Colascione <dancol@google.com>,
        Bruce Fields <bfields@fieldses.org>, jlayton@kernel.org,
        Khalid Aziz <khalid.aziz@oracle.com>, Lei.Yang@windriver.com,
        linux-fsdevel@vger.kernel.org, linux-kselftest@vger.kernel.org,
        Linux-MM <linux-mm@kvack.org>, marcandre.lureau@redhat.com,
        Mike Kravetz <mike.kravetz@oracle.com>, minchan@kernel.org,
        shuah@kernel.org, valdis.kletnieks@vt.edu,
        Hugh Dickins <hughd@google.com>,
        Linux API <linux-api@vger.kernel.org>
Subject: Re: [PATCH v3 resend 1/2] mm: Add an F_SEAL_FUTURE_WRITE seal to
 memfd
Message-ID: <20181110032005.GA22238@google.com>
References: <20181108041537.39694-1-joel@joelfernandes.org>
 <CAG48ez1h=v-JYnDw81HaYJzOfrNhwYksxmc2r=cJvdQVgYM+NA@mail.gmail.com>
 <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAG48ez0kQ4d566bXTFOYANDgii-stL-Qj-oyaBzvfxdV=PU-7g@mail.gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXd0N_TuZbNFAlAA--.5910S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtry8JFyrtr15tr1xJw43KFg_yoW7uF43pF
	Z5Ga1Ykr4UJrW8u3sFy3Wvya4FqrWxGr17Kr9xWryUZ3Z0qryIgF4YgFW5uF95ArWxXw4j
	vr4Ykr93uas8A3DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUU92b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0
	cI8IcVAFwI0_Jr0_JF4lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2z2
	80aVAFwI0_Cr1j6rxdMxvI42IY6I8E87Iv6xkF7I0E14v26F4UJVW0owCF04k20xvY0x0E
	wIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJV
	W8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF
	1VAFwI0_GFv_WrylIxkGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6rWUJVWrZr1UYx
	BIdaVFxhVjvjDU0xZFpf9x07bSCJQUUUUU=

On Fri, Nov 09, 2018 at 10:19:03PM +0100, Jann Horn wrote:
> On Fri, Nov 9, 2018 at 10:06 PM Jann Horn <jannh@google.com> wrote:
> > On Fri, Nov 9, 2018 at 9:46 PM Joel Fernandes (Google)
> > <joel@joelfernandes.org> wrote:
> > > Android uses ashmem for sharing memory regions. We are looking forward
> > > to migrating all usecases of ashmem to memfd so that we can possibly
> > > remove the ashmem driver in the future from staging while also
> > > benefiting from using memfd and contributing to it. Note staging drivers
> > > are also not ABI and generally can be removed at anytime.
> > >
> > > One of the main usecases Android has is the ability to create a region
> > > and mmap it as writeable, then add protection against making any
> > > "future" writes while keeping the existing already mmap'ed
> > > writeable-region active.  This allows us to implement a usecase where
> > > receivers of the shared memory buffer can get a read-only view, while
> > > the sender continues to write to the buffer.
> > > See CursorWindow documentation in Android for more details:
> > > https://developer.android.com/reference/android/database/CursorWindow
> > >
> > > This usecase cannot be implemented with the existing F_SEAL_WRITE seal.
> > > To support the usecase, this patch adds a new F_SEAL_FUTURE_WRITE seal
> > > which prevents any future mmap and write syscalls from succeeding while
> > > keeping the existing mmap active.
> >
> > Please CC linux-api@ on patches like this. If you had done that, I
> > might have criticized your v1 patch instead of your v3 patch...
> >
> > > The following program shows the seal
> > > working in action:
> > [...]
> > > Cc: jreck@google.com
> > > Cc: john.stultz@linaro.org
> > > Cc: tkjos@google.com
> > > Cc: gregkh@linuxfoundation.org
> > > Cc: hch@infradead.org
> > > Reviewed-by: John Stultz <john.stultz@linaro.org>
> > > Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
> > > ---
> > [...]
> > > diff --git a/mm/memfd.c b/mm/memfd.c
> > > index 2bb5e257080e..5ba9804e9515 100644
> > > --- a/mm/memfd.c
> > > +++ b/mm/memfd.c
> > [...]
> > > @@ -219,6 +220,25 @@ static int memfd_add_seals(struct file *file, unsigned int seals)
> > >                 }
> > >         }
> > >
> > > +       if ((seals & F_SEAL_FUTURE_WRITE) &&
> > > +           !(*file_seals & F_SEAL_FUTURE_WRITE)) {
> > > +               /*
> > > +                * The FUTURE_WRITE seal also prevents growing and shrinking
> > > +                * so we need them to be already set, or requested now.
> > > +                */
> > > +               int test_seals = (seals | *file_seals) &
> > > +                                (F_SEAL_GROW | F_SEAL_SHRINK);
> > > +
> > > +               if (test_seals != (F_SEAL_GROW | F_SEAL_SHRINK)) {
> > > +                       error = -EINVAL;
> > > +                       goto unlock;
> > > +               }
> > > +
> > > +               spin_lock(&file->f_lock);
> > > +               file->f_mode &= ~(FMODE_WRITE | FMODE_PWRITE);
> > > +               spin_unlock(&file->f_lock);
> > > +       }
> >
> > So you're fiddling around with the file, but not the inode? How are
> > you preventing code like the following from re-opening the file as
> > writable?
> >
> > $ cat memfd.c
> > #define _GNU_SOURCE
> > #include <unistd.h>
> > #include <sys/syscall.h>
> > #include <printf.h>
> > #include <fcntl.h>
> > #include <err.h>
> > #include <stdio.h>
> >
> > int main(void) {
> >   int fd = syscall(__NR_memfd_create, "testfd", 0);
> >   if (fd == -1) err(1, "memfd");
> >   char path[100];
> >   sprintf(path, "/proc/self/fd/%d", fd);
> >   int fd2 = open(path, O_RDWR);
> >   if (fd2 == -1) err(1, "reopen");
> >   printf("reopen successful: %d\n", fd2);
> > }
> > $ gcc -o memfd memfd.c
> > $ ./memfd
> > reopen successful: 4
> > $
> >
> > That aside: I wonder whether a better API would be something that
> > allows you to create a new readonly file descriptor, instead of
> > fiddling with the writability of an existing fd.
> 
> My favorite approach would be to forbid open() on memfds, hope that
> nobody notices the tiny API break, and then add an ioctl for "reopen
> this memfd with reduced permissions" - but that's just my personal
> opinion.

I did something along these lines and it fixes the issue, but I forbid open
of memfd only when the F_SEAL_FUTURE_WRITE seal is in place. So then its not
an ABI break because this is a brand new seal. That seems the least intrusive
solution and it works. Do you mind testing it and I'll add your and Tested-by
to the new fix? The patch is based on top of this series.

---8<-----------
From: "Joel Fernandes (Google)" <joel@joelfernandes.org>
Subject: [PATCH] mm/memfd: Fix possible promotion to writeable of sealed memfd

Jann Horn found that reopening an F_SEAL_FUTURE_WRITE sealed memfd
through /proc/self/fd/N symlink as writeable succeeds. The simplest fix
without causing ABI breakages and ugly VFS hacks is to simply deny all
opens on F_SEAL_FUTURE_WRITE sealed fds.

Reported-by: Jann Horn <jannh@google.com>
Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
---
 mm/shmem.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/mm/shmem.c b/mm/shmem.c
index 446942677cd4..5b378c486b8f 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -3611,7 +3611,25 @@ static const struct address_space_operations shmem_aops = {
 	.error_remove_page = generic_error_remove_page,
 };
 
+/* Could arrive here for memfds opened through /proc/ */
+int shmem_open(struct inode *inode, struct file *file)
+{
+	struct shmem_inode_info *info = SHMEM_I(inode);
+
+	/*
+	 * memfds for which future writes have been prevented
+	 * should not be reopened, say, through /proc/pid/fd/N
+	 * symlinks otherwise it can cause a sealed memfd to be
+	 * promoted to writable.
+	 */
+	if (info->seals & F_SEAL_FUTURE_WRITE)
+		return -EACCES;
+
+	return 0;
+}
+
 static const struct file_operations shmem_file_operations = {
+	.open		= shmem_open,
 	.mmap		= shmem_mmap,
 	.get_unmapped_area = shmem_get_unmapped_area,
 #ifdef CONFIG_TMPFS
-- 
2.19.1.930.g4563a0d9d0-goog
