Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:05:33 -0000
Received: from icoremail.net (unknown [209.85.210.174])
	by mail-app2 (Coremail) with SMTP id by_KCgCn3wylLuhbbcF1AQ--.35463S3;
	Sun, 11 Nov 2018 21:29:10 +0800 (CST)
Received: from mail-pf1-f174.google.com (unknown [209.85.210.174])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHwEykLuhbU44sAA--.32523S3;
	Sun, 11 Nov 2018 21:29:08 +0800 (CST)
Received: by mail-pf1-f174.google.com with SMTP id v76-v6so184143pfa.5
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 05:29:08 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:in-reply-to:references:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=Wmx/8ci8RkwloQgmInTXi/RriTSp36ZY9vH2iqiDK48=;
        b=X96DP8otuCZbn7f6adQ3W5bzaNc2sAAWQgVKowxUdnQRxWN3dKCnpW5ZlT9mGtvu6+
         oI2zwQs+MfAGT2xg84ztQGhHrI+Hgkb8e8p2zJxnjKdyZjL1B8hYkPbnxNC5aKYacP+O
         xUym2El6tZQiUAH2rVla/M6K8v43VEJqDt0+lQD33ixkECq0Mw85aNuMBjbRqusyefuq
         D6XNmYz+GdawY+CN6PtxeDjhNuHr/F8QjioM1CwxBG+IQj3X3iX+gfxK5DtLERfxMUHM
         S9chUQy3gr/MKgxxQe/fkV96ZIDk3HOv2xqvBaL71q6f9K9PH4LGZqCJe/XFxhDbXPN2
         oO1Q==
X-Gm-Message-State: AGRZ1gLWCdC3RJ9pWVj3hLKG6IV/pS5BzYk9Z2ZIL+HCSz76v8vSoQWi
	JzEcykgeBoxUjrUnpnd+yvMljDJR8vuTDjwS3y0d/24fUdDK1dA=
X-Received: by 2002:a62:6241:: with SMTP id w62-v6mr4377886pfb.69.1541942947961;
        Sun, 11 Nov 2018 05:29:07 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2107060pjt;
        Sun, 11 Nov 2018 05:29:06 -0800 (PST)
X-Google-Smtp-Source: AJdET5cG6bVbu0VVJGb7ML+cDH7NYyy3niwQBoK4VuFJ5H2tVzEwG0L9ImUl0RHIaxiPmyTNDuAc
X-Received: by 2002:a17:902:5590:: with SMTP id g16-v6mr16140754pli.56.1541942946654;
        Sun, 11 Nov 2018 05:29:06 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541942946; cv=none;
        d=google.com; s=arc-20160816;
        b=ElehlX78BvLo7ru1otLXUAxcJaLTCioaxb21uF9qwbCnrRK5g22uZCnFZQnQOQ6Ksl
         Z+bwi9zg5IINNU+mxg2+17DTNAhQW2eEx4+em54qj1zBWtslTJmMRkuIQ3GLRF05kReJ
         PrU5uDjoXvCnZhvPc7QBlMDQ4auyfpWGMW7DD0dc/9Agw7k1ntj0Oj+L6m2DJ/nGsM2E
         shx2HdYFLlKtEms0Eri72qfAq052ZnjftCJx4d0FAr8pmMh7B/bLDtyLK1QrUbVQBcq3
         8Gr8XHCPEM+SYWUooyZ5lY4sNgmI0X4PP7gTF6+Cq4yE6de+N1Mlu6fkp2Lv4HQ4A4qr
         IjEA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:subject:cc:to:from:date
         :dkim-signature;
        bh=Wmx/8ci8RkwloQgmInTXi/RriTSp36ZY9vH2iqiDK48=;
        b=fXK/At8HTn5/vmtg+QSDibYFaXTJEDZLjb+b5/qEye2td+/Qmy4n1QUK1wb+pYqoIu
         Jaz416htJ3TFhRFpQZkHv6t4Z8+n5qiscOaSWFKQHavp56Lp0tBp5d+4DT+xaImRBv6C
         hHAd3EcuCiqgV7QIIGj6S0aA7UfHwqDyQQkwyxCSVIM9xM0GZNHLkae5EiPhqt3sfxjv
         8zBm/tmIFEh95+Mn3hcHF0oBv0W+dsR3pmW+LIyz4HCyEn3MxZbCw1gFDTBr2D6dQW9W
         Z86z+SPf/OMEzKKJrwN0+tIzn/4n6tZrT96wTdaYRlrC4CTVj7t4jP+BJ1KcWN8BefEL
         H2Jg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b=kyPjyY32;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id y23-v6si14485942plr.8.2018.11.11.05.28.51;
        Sun, 11 Nov 2018 05:29:06 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728122AbeKKXQV (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Sun, 11 Nov 2018 18:16:21 -0500
Received: from mail.kernel.org ([198.145.29.99]:43472 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727594AbeKKXQV (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 18:16:21 -0500
Received: from archlinux (cpc91196-cmbg18-2-0-cust659.5-4.cable.virginm.net [81.96.234.148])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id C67EE20866;
        Sun, 11 Nov 2018 13:27:42 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1541942865;
        bh=9WuQw/SfCGhBRxQkOfI+hufa1B90gfj9izhVjeMcRgM=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=kyPjyY32ZzR9pw88C9PvFZ4w96j6QRmfPtdfsIkYZrtSWNvwGjJeR1hGkdexUOhqK
         h+3xjBZD09dUGubSy5sCZVeMS00+LVelU4zKoiLgZyFskUYywK2fRzPK1kiV612vhv
         GfIuKkMhSj64VCbtHYiVrTSXtI8kdOlV8Gk6DO7E=
Date: Sun, 11 Nov 2018 13:27:39 +0000
From: Jonathan Cameron <jic23@kernel.org>
To: Andy Shevchenko <andy.shevchenko@gmail.com>
Cc: Parthiban Nallathambi <pn@denx.de>,
        Hartmut Knaack <knaack.h@gmx.de>,
        Lars-Peter Clausen <lars@metafoo.de>,
        Peter Meerwald <pmeerw@pmeerw.net>,
        Rob Herring <robh+dt@kernel.org>,
        linux-iio <linux-iio@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        devicetree <devicetree@vger.kernel.org>,
        Matthias Brugger <matthias.bgg@gmail.com>
Subject: Re: [PATCH v7 1/2] iio: light: Add support for vishay vcnl4035
Message-ID: <20181111132739.47c8d456@archlinux>
In-Reply-To: <CAHp75VdwzdX6kXwiRZjQ14UDjsdn6H=imtbNNuv4Z=2iicL5uA@mail.gmail.com>
References: <20181107170821.1171886-1-pn@denx.de>
        <CAHp75VdwzdX6kXwiRZjQ14UDjsdn6H=imtbNNuv4Z=2iicL5uA@mail.gmail.com>
X-Mailer: Claws Mail 3.17.1 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHwEykLuhbU44sAA--.32523S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvAXoWfZr45Cr17uFWxKr1UGrW8tFb_yoW5JrW5Go
	WfGr1xXr1fJr17Cw4Iv347tFW3WayUuFyUJF4rArZxJayDKay09a1UJanYvanxuF45tF17
	KFykJr1YvFWYqw1fn29KB7ZKAUJUUUUU529EdanIXcx71UUUUj7v73VFW2AGmfu7jjvjm3
	AaLaJ3UjIYCTnIWjp_UUUOT7k0a2IF6w4kM7kC6x804xWl14x267AKxVWUJVW8JwAFIxvE
	14AKwVWUJVWUGwA2ocxC64kIII0Yj41l84x0c7CEw4AK67xGY2AK021l84ACjcxK6xIIjx
	v20xvE14v26ryj6F1UM28EF7xvwVC0I7IYx2IY6xkF7I0E14v26r4j6F4UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2vYz4IE04k24V
	AvwVAKI4IrM2AIxVAIcxkEcVAq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xf
	McIj6xIIjxv20xvE14v26r1j6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7
	v_Jr0_Gr1lF7xvr2IYc2Ij64vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca
	8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW5GwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2I
	x0cI8IcVAFwI0_Jr0_JF4lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2
	z280aVAFwI0_Gr1j6F4UJwCYIxAIcVC2z280aVCY1x0267AKxVW8Jr0_Cr1UMxAIw28Icx
	kI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY
	6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17
	CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Wr1j6rW3
	JrUvcSsGvfC2KfnxnUUI43ZEXa7IUOCtC7UUUUU==

On Wed, 7 Nov 2018 22:24:47 +0200
Andy Shevchenko <andy.shevchenko@gmail.com> wrote:

> On Wed, Nov 7, 2018 at 7:08 PM Parthiban Nallathambi <pn@denx.de> wrote:
> >
> > Add support for VCNL4035, which is capable of Ambient light
> > sensing (ALS) and proximity function. This patch adds support
> > only for ALS function
> >  
> 
A comment inline around scale vs integration time as the
controlled variable.  For the majority of device types scale
would be the preferred choice, but for light sensors the fact
that this is unusual in that it is linear, means that integration
time is probably the more common one to be controlled.

So upshot, I think this is fine.


> FWIW,
> Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
Thanks - it is worth a lot Andy and your reviews are always
appreciated.

Applied to the togreg branch of iio.git and pushed out as
testing for the autobuilders to play with it.

Thanks,

Jonathan

> 
> > Signed-off-by: Parthiban Nallathambi <pn@denx.de>
> > ---
> >
> > Notes:
> >     Changelog in v7:
> >     - change probe and remove ordering
> >     - remove noidle pm call
> >
> >     Changelog in v6:
> >     - Usage of devm_ for trigger probing and cleanups
> >     - pm_runtime re-order and exit patch corrections
> >     - IIO_INTENSITY to IIO_LIGHT, lux/steps are fixed at IT cycle
> >     lux can be calculated based on IT sensitivity
> >     - _CLEAR to _BOTH although measurement is only WHITE spectrum
> >     for traditional reasons
> >
> >     Changelog in v5:
> >     - White spectrum is mesaured as "_CLEAR" intesity, so removed
> >     white spectrum modifier
> >     - Header re-ordering
> >     - Trigger init and de-init into separate function
> >     - Indentation correct and usage of dev_err in place of pr_err
> >
> >     Changelog in v4:
> >     - New white light index is introduced for getting data from
> >     white spectrum
> >     - PM enable/disable is called from read_raw accordingly
> >     - Probe exit handling re-ordered
> >
> >     Changelog in v3:
> >     - Usage of lock is not needed, removed mutex locking
> >     - ALS threshold and persistence configuration available
> >     as events and threshold events are notified to userspace
> >     - Usage of devm_ is re-ordered and exit handling updated
> >     - Complexity in timestamp calculation is removed and used
> >     iio_get_time_ns
> >
> >     Changelog in v2:
> >     1. Fixed 0-day warning on le16_to_cpu usage
> >     2. Persistence value is directly mapped to datasheet's value to
> >     avoid confusions of usage from sysfs
> >
> >  drivers/iio/light/Kconfig    |  13 +
> >  drivers/iio/light/Makefile   |   1 +
> >  drivers/iio/light/vcnl4035.c | 676 +++++++++++++++++++++++++++++++++++
> >  3 files changed, 690 insertions(+)
> >  create mode 100644 drivers/iio/light/vcnl4035.c
> >
> > diff --git a/drivers/iio/light/Kconfig b/drivers/iio/light/Kconfig
> > index d66ea754ffff..36f458433480 100644
> > --- a/drivers/iio/light/Kconfig
> > +++ b/drivers/iio/light/Kconfig
> > @@ -460,6 +460,19 @@ config VCNL4000
> >          To compile this driver as a module, choose M here: the
> >          module will be called vcnl4000.
> >
> > +config VCNL4035
> > +       tristate "VCNL4035 combined ALS and proximity sensor"
> > +       select IIO_TRIGGERED_BUFFER
> > +       select REGMAP_I2C
> > +       depends on I2C
> > +       help
> > +        Say Y here if you want to build a driver for the Vishay VCNL4035,
> > +        combined ambient light (ALS) and proximity sensor. Currently only ALS
> > +        function is available.
> > +
> > +        To compile this driver as a module, choose M here: the
> > +        module will be called vcnl4035.
> > +
> >  config VEML6070
> >         tristate "VEML6070 UV A light sensor"
> >         depends on I2C
> > diff --git a/drivers/iio/light/Makefile b/drivers/iio/light/Makefile
> > index 86337b114bc4..286bf3975372 100644
> > --- a/drivers/iio/light/Makefile
> > +++ b/drivers/iio/light/Makefile
> > @@ -45,6 +45,7 @@ obj-$(CONFIG_TSL2772)         += tsl2772.o
> >  obj-$(CONFIG_TSL4531)          += tsl4531.o
> >  obj-$(CONFIG_US5182D)          += us5182d.o
> >  obj-$(CONFIG_VCNL4000)         += vcnl4000.o
> > +obj-$(CONFIG_VCNL4035)         += vcnl4035.o
> >  obj-$(CONFIG_VEML6070)         += veml6070.o
> >  obj-$(CONFIG_VL6180)           += vl6180.o
> >  obj-$(CONFIG_ZOPT2201)         += zopt2201.o
> > diff --git a/drivers/iio/light/vcnl4035.c b/drivers/iio/light/vcnl4035.c
> > new file mode 100644
> > index 000000000000..cca4db312bd3
> > --- /dev/null
> > +++ b/drivers/iio/light/vcnl4035.c
> > @@ -0,0 +1,676 @@
> > +// SPDX-License-Identifier: GPL-2.0
> > +/*
> > + * VCNL4035 Ambient Light and Proximity Sensor - 7-bit I2C slave address 0x60
> > + *
> > + * Copyright (c) 2018, DENX Software Engineering GmbH
> > + * Author: Parthiban Nallathambi <pn@denx.de>
> > + *
> > + * TODO: Proximity
> > + */
> > +#include <linux/bitops.h>
> > +#include <linux/i2c.h>
> > +#include <linux/module.h>
> > +#include <linux/pm_runtime.h>
> > +#include <linux/regmap.h>
> > +
> > +#include <linux/iio/buffer.h>
> > +#include <linux/iio/events.h>
> > +#include <linux/iio/iio.h>
> > +#include <linux/iio/sysfs.h>
> > +#include <linux/iio/trigger.h>
> > +#include <linux/iio/trigger_consumer.h>
> > +#include <linux/iio/triggered_buffer.h>
> > +
> > +#define VCNL4035_DRV_NAME      "vcnl4035"
> > +#define VCNL4035_IRQ_NAME      "vcnl4035_event"
> > +#define VCNL4035_REGMAP_NAME   "vcnl4035_regmap"
> > +
> > +/* Device registers */
> > +#define VCNL4035_ALS_CONF      0x00
> > +#define VCNL4035_ALS_THDH      0x01
> > +#define VCNL4035_ALS_THDL      0x02
> > +#define VCNL4035_ALS_DATA      0x0B
> > +#define VCNL4035_WHITE_DATA    0x0C
> > +#define VCNL4035_INT_FLAG      0x0D
> > +#define VCNL4035_DEV_ID                0x0E
> > +
> > +/* Register masks */
> > +#define VCNL4035_MODE_ALS_MASK         BIT(0)
> > +#define VCNL4035_MODE_ALS_WHITE_CHAN   BIT(8)
> > +#define VCNL4035_MODE_ALS_INT_MASK     BIT(1)
> > +#define VCNL4035_ALS_IT_MASK           GENMASK(7, 5)
> > +#define VCNL4035_ALS_PERS_MASK         GENMASK(3, 2)
> > +#define VCNL4035_INT_ALS_IF_H_MASK     BIT(12)
> > +#define VCNL4035_INT_ALS_IF_L_MASK     BIT(13)
> > +
> > +/* Default values */
> > +#define VCNL4035_MODE_ALS_ENABLE       BIT(0)
> > +#define VCNL4035_MODE_ALS_DISABLE      0x00
> > +#define VCNL4035_MODE_ALS_INT_ENABLE   BIT(1)
> > +#define VCNL4035_MODE_ALS_INT_DISABLE  0
> > +#define VCNL4035_DEV_ID_VAL            0x80
> > +#define VCNL4035_ALS_IT_DEFAULT                0x01
> > +#define VCNL4035_ALS_PERS_DEFAULT      0x00
> > +#define VCNL4035_ALS_THDH_DEFAULT      5000
> > +#define VCNL4035_ALS_THDL_DEFAULT      100
> > +#define VCNL4035_SLEEP_DELAY_MS                2000
> > +
> > +struct vcnl4035_data {
> > +       struct i2c_client *client;
> > +       struct regmap *regmap;
> > +       unsigned int als_it_val;
> > +       unsigned int als_persistence;
> > +       unsigned int als_thresh_low;
> > +       unsigned int als_thresh_high;
> > +       struct iio_trigger *drdy_trigger0;
> > +};
> > +
> > +static inline bool vcnl4035_is_triggered(struct vcnl4035_data *data)
> > +{
> > +       int ret;
> > +       int reg;
> > +
> > +       ret = regmap_read(data->regmap, VCNL4035_INT_FLAG, &reg);
> > +       if (ret < 0)
> > +               return false;
> > +
> > +       return !!(reg &
> > +               (VCNL4035_INT_ALS_IF_H_MASK | VCNL4035_INT_ALS_IF_L_MASK));
> > +}
> > +
> > +static irqreturn_t vcnl4035_drdy_irq_thread(int irq, void *private)
> > +{
> > +       struct iio_dev *indio_dev = private;
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +
> > +       if (vcnl4035_is_triggered(data)) {
> > +               iio_push_event(indio_dev, IIO_UNMOD_EVENT_CODE(IIO_LIGHT,
> > +                                                       0,
> > +                                                       IIO_EV_TYPE_THRESH,
> > +                                                       IIO_EV_DIR_EITHER),
> > +                               iio_get_time_ns(indio_dev));
> > +               iio_trigger_poll_chained(data->drdy_trigger0);
> > +               return IRQ_HANDLED;
> > +       }
> > +
> > +       return IRQ_NONE;
> > +}
> > +
> > +/* Triggered buffer */
> > +static irqreturn_t vcnl4035_trigger_consumer_handler(int irq, void *p)
> > +{
> > +       struct iio_poll_func *pf = p;
> > +       struct iio_dev *indio_dev = pf->indio_dev;
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +       u8 buffer[ALIGN(sizeof(u16), sizeof(s64)) + sizeof(s64)];
> > +       int ret;
> > +
> > +       ret = regmap_read(data->regmap, VCNL4035_ALS_DATA, (int *)buffer);
> > +       if (ret < 0) {
> > +               dev_err(&data->client->dev,
> > +                       "Trigger consumer can't read from sensor.\n");
> > +               goto fail_read;
> > +       }
> > +       iio_push_to_buffers_with_timestamp(indio_dev, buffer,
> > +                                       iio_get_time_ns(indio_dev));
> > +
> > +fail_read:
> > +       iio_trigger_notify_done(indio_dev->trig);
> > +
> > +       return IRQ_HANDLED;
> > +}
> > +
> > +static int vcnl4035_als_drdy_set_state(struct iio_trigger *trigger,
> > +                                       bool enable_drdy)
> > +{
> > +       struct iio_dev *indio_dev = iio_trigger_get_drvdata(trigger);
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +       int val = enable_drdy ? VCNL4035_MODE_ALS_INT_ENABLE :
> > +                                       VCNL4035_MODE_ALS_INT_DISABLE;
> > +
> > +       return regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                VCNL4035_MODE_ALS_INT_MASK,
> > +                                val);
> > +}
> > +
> > +static const struct iio_trigger_ops vcnl4035_trigger_ops = {
> > +       .validate_device = iio_trigger_validate_own_device,
> > +       .set_trigger_state = vcnl4035_als_drdy_set_state,
> > +};
> > +
> > +static int vcnl4035_set_pm_runtime_state(struct vcnl4035_data *data, bool on)
> > +{
> > +       int ret;
> > +       struct device *dev = &data->client->dev;
> > +
> > +       if (on) {
> > +               ret = pm_runtime_get_sync(dev);
> > +               if (ret < 0)
> > +                       pm_runtime_put_noidle(dev);
> > +       } else {
> > +               pm_runtime_mark_last_busy(dev);
> > +               ret = pm_runtime_put_autosuspend(dev);
> > +       }
> > +
> > +       return ret;
> > +}
> > +
> > +/*
> > + *     Device IT       INT Time (ms)   Scale (lux/step)
> > + *     000             50              0.064
> > + *     001             100             0.032
> > + *     010             200             0.016
> > + *     100             400             0.008
> > + *     101 - 111       800             0.004
> > + * Values are proportional, so ALS INT is selected for input due to
> > + * simplicity reason. Integration time value and scaling is
> > + * calculated based on device INT value
Hmm. Normally I'd say that the default should be scale, but
because most light sensors are no where near linear, we have
quite a few where integration time is controlled (IIRC) because
there isn't a choice.

So I think we are fine with this...



> > + *
> > + * Raw value needs to be scaled using ALS steps
> > + */
> > +static int vcnl4035_read_raw(struct iio_dev *indio_dev,
> > +                           struct iio_chan_spec const *chan, int *val,
> > +                           int *val2, long mask)
> > +{
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +       int ret;
> > +       int raw_data;
> > +       unsigned int reg;
> > +
> > +       switch (mask) {
> > +       case IIO_CHAN_INFO_RAW:
> > +               ret = vcnl4035_set_pm_runtime_state(data, true);
> > +               if  (ret < 0)
> > +                       return ret;
> > +
> > +               ret = iio_device_claim_direct_mode(indio_dev);
> > +               if (!ret) {
> > +                       if (chan->channel)
> > +                               reg = VCNL4035_ALS_DATA;
> > +                       else
> > +                               reg = VCNL4035_WHITE_DATA;
> > +                       ret = regmap_read(data->regmap, reg, &raw_data);
> > +                       iio_device_release_direct_mode(indio_dev);
> > +                       if (!ret) {
> > +                               *val = raw_data;
> > +                               ret = IIO_VAL_INT;
> > +                       }
> > +               }
> > +               vcnl4035_set_pm_runtime_state(data, false);
> > +               return ret;
> > +       case IIO_CHAN_INFO_INT_TIME:
> > +               *val = 50;
> > +               if (data->als_it_val)
> > +                       *val = data->als_it_val * 100;
> > +               return IIO_VAL_INT;
> > +       case IIO_CHAN_INFO_SCALE:
> > +               *val = 64;
> > +               if (!data->als_it_val)
> > +                       *val2 = 1000;
> > +               else
> > +                       *val2 = data->als_it_val * 2 * 1000;
> > +               return IIO_VAL_FRACTIONAL;
> > +       default:
> > +               return -EINVAL;
> > +       }
> > +}
> > +
> > +static int vcnl4035_write_raw(struct iio_dev *indio_dev,
> > +                               struct iio_chan_spec const *chan,
> > +                               int val, int val2, long mask)
> > +{
> > +       int ret;
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +
> > +       switch (mask) {
> > +       case IIO_CHAN_INFO_INT_TIME:
> > +               if (val <= 0 || val > 800)
> > +                       return -EINVAL;
> > +
> > +               ret = vcnl4035_set_pm_runtime_state(data, true);
> > +               if  (ret < 0)
> > +                       return ret;
> > +
> > +               ret = regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                        VCNL4035_ALS_IT_MASK,
> > +                                        val / 100);
> > +               if (!ret)
> > +                       data->als_it_val = val / 100;
> > +
> > +               vcnl4035_set_pm_runtime_state(data, false);
> > +               return ret;
> > +       default:
> > +               return -EINVAL;
> > +       }
> > +}
> > +
> > +/* No direct ABI for persistence and threshold, so eventing */
> > +static int vcnl4035_read_thresh(struct iio_dev *indio_dev,
> > +               const struct iio_chan_spec *chan, enum iio_event_type type,
> > +               enum iio_event_direction dir, enum iio_event_info info,
> > +               int *val, int *val2)
> > +{
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +
> > +       switch (info) {
> > +       case IIO_EV_INFO_VALUE:
> > +               switch (dir) {
> > +               case IIO_EV_DIR_RISING:
> > +                       *val = data->als_thresh_high;
> > +                       return IIO_VAL_INT;
> > +               case IIO_EV_DIR_FALLING:
> > +                       *val = data->als_thresh_low;
> > +                       return IIO_VAL_INT;
> > +               default:
> > +                       return -EINVAL;
> > +               }
> > +               break;
> > +       case IIO_EV_INFO_PERIOD:
> > +               *val = data->als_persistence;
> > +               return IIO_VAL_INT;
> > +       default:
> > +               return -EINVAL;
> > +       }
> > +
> > +}
> > +
> > +static int vcnl4035_write_thresh(struct iio_dev *indio_dev,
> > +               const struct iio_chan_spec *chan, enum iio_event_type type,
> > +               enum iio_event_direction dir, enum iio_event_info info, int val,
> > +               int val2)
> > +{
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +       int ret;
> > +
> > +       switch (info) {
> > +       case IIO_EV_INFO_VALUE:
> > +               /* 16 bit threshold range 0 - 65535 */
> > +               if (val < 0 || val > 65535)
> > +                       return -EINVAL;
> > +               if (dir == IIO_EV_DIR_RISING) {
> > +                       if (val < data->als_thresh_low)
> > +                               return -EINVAL;
> > +                       ret = regmap_write(data->regmap, VCNL4035_ALS_THDH,
> > +                                          val);
> > +                       if (ret)
> > +                               return ret;
> > +                       data->als_thresh_high = val;
> > +               } else {
> > +                       if (val > data->als_thresh_high)
> > +                               return -EINVAL;
> > +                       ret = regmap_write(data->regmap, VCNL4035_ALS_THDL,
> > +                                          val);
> > +                       if (ret)
> > +                               return ret;
> > +                       data->als_thresh_low = val;
> > +               }
> > +               return ret;
> > +       case IIO_EV_INFO_PERIOD:
> > +               /* allow only 1 2 4 8 as persistence value */
> > +               if (val < 0 || val > 8 || hweight8(val) != 1)
> > +                       return -EINVAL;
> > +               ret = regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                        VCNL4035_ALS_PERS_MASK, val);
> > +               if (!ret)
> > +                       data->als_persistence = val;
> > +               return ret;
> > +       default:
> > +               return -EINVAL;
> > +       }
> > +}
> > +
> > +static IIO_CONST_ATTR_INT_TIME_AVAIL("50 100 200 400 800");
> > +
> > +static struct attribute *vcnl4035_attributes[] = {
> > +       &iio_const_attr_integration_time_available.dev_attr.attr,
> > +       NULL,
> > +};
> > +
> > +static const struct attribute_group vcnl4035_attribute_group = {
> > +       .attrs = vcnl4035_attributes,
> > +};
> > +
> > +static const struct iio_info vcnl4035_info = {
> > +       .read_raw               = vcnl4035_read_raw,
> > +       .write_raw              = vcnl4035_write_raw,
> > +       .read_event_value       = vcnl4035_read_thresh,
> > +       .write_event_value      = vcnl4035_write_thresh,
> > +       .attrs                  = &vcnl4035_attribute_group,
> > +};
> > +
> > +static const struct iio_event_spec vcnl4035_event_spec[] = {
> > +       {
> > +               .type = IIO_EV_TYPE_THRESH,
> > +               .dir = IIO_EV_DIR_RISING,
> > +               .mask_separate = BIT(IIO_EV_INFO_VALUE),
> > +       }, {
> > +               .type = IIO_EV_TYPE_THRESH,
> > +               .dir = IIO_EV_DIR_FALLING,
> > +               .mask_separate = BIT(IIO_EV_INFO_VALUE),
> > +       }, {
> > +               .type = IIO_EV_TYPE_THRESH,
> > +               .dir = IIO_EV_DIR_EITHER,
> > +               .mask_separate = BIT(IIO_EV_INFO_PERIOD),
> > +       },
> > +};
> > +
> > +enum vcnl4035_scan_index_order {
> > +       VCNL4035_CHAN_INDEX_LIGHT,
> > +       VCNL4035_CHAN_INDEX_WHITE_LED,
> > +};
> > +
> > +static const struct iio_buffer_setup_ops iio_triggered_buffer_setup_ops = {
> > +       .validate_scan_mask = &iio_validate_scan_mask_onehot,
> > +};
> > +
> > +static const struct iio_chan_spec vcnl4035_channels[] = {
> > +       {
> > +               .type = IIO_LIGHT,
> > +               .channel = 0,
> > +               .info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
> > +                               BIT(IIO_CHAN_INFO_INT_TIME) |
> > +                               BIT(IIO_CHAN_INFO_SCALE),
> > +               .event_spec = vcnl4035_event_spec,
> > +               .num_event_specs = ARRAY_SIZE(vcnl4035_event_spec),
> > +               .scan_index = VCNL4035_CHAN_INDEX_LIGHT,
> > +               .scan_type = {
> > +                       .sign = 'u',
> > +                       .realbits = 16,
> > +                       .storagebits = 16,
> > +                       .endianness = IIO_LE,
> > +               },
> > +       },
> > +       {
> > +               .type = IIO_INTENSITY,
> > +               .channel = 1,
> > +               .modified = 1,
> > +               .channel2 = IIO_MOD_LIGHT_BOTH,
> > +               .info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
> > +               .scan_index = VCNL4035_CHAN_INDEX_WHITE_LED,
> > +               .scan_type = {
> > +                       .sign = 'u',
> > +                       .realbits = 16,
> > +                       .storagebits = 16,
> > +                       .endianness = IIO_LE,
> > +               },
> > +       },
> > +};
> > +
> > +static int vcnl4035_set_als_power_state(struct vcnl4035_data *data, u8 status)
> > +{
> > +       return regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                       VCNL4035_MODE_ALS_MASK,
> > +                                       status);
> > +}
> > +
> > +static int vcnl4035_init(struct vcnl4035_data *data)
> > +{
> > +       int ret;
> > +       int id;
> > +
> > +       ret = regmap_read(data->regmap, VCNL4035_DEV_ID, &id);
> > +       if (ret < 0) {
> > +               dev_err(&data->client->dev, "Failed to read DEV_ID register\n");
> > +               return ret;
> > +       }
> > +
> > +       if (id != VCNL4035_DEV_ID_VAL) {
> > +               dev_err(&data->client->dev, "Wrong id, got %x, expected %x\n",
> > +                       id, VCNL4035_DEV_ID_VAL);
> > +               return -ENODEV;
> > +       }
> > +
> > +       ret = vcnl4035_set_als_power_state(data, VCNL4035_MODE_ALS_ENABLE);
> > +       if (ret < 0)
> > +               return ret;
> > +
> > +       /* ALS white channel enable */
> > +       ret = regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                VCNL4035_MODE_ALS_WHITE_CHAN,
> > +                                1);
> > +       if (ret) {
> > +               dev_err(&data->client->dev, "set white channel enable %d\n",
> > +                       ret);
> > +               return ret;
> > +       }
> > +
> > +       /* set default integration time - 100 ms for ALS */
> > +       ret = regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                VCNL4035_ALS_IT_MASK,
> > +                                VCNL4035_ALS_IT_DEFAULT);
> > +       if (ret) {
> > +               dev_err(&data->client->dev, "set default ALS IT returned %d\n",
> > +                       ret);
> > +               return ret;
> > +       }
> > +       data->als_it_val = VCNL4035_ALS_IT_DEFAULT;
> > +
> > +       /* set default persistence time - 1 for ALS */
> > +       ret = regmap_update_bits(data->regmap, VCNL4035_ALS_CONF,
> > +                                VCNL4035_ALS_PERS_MASK,
> > +                                VCNL4035_ALS_PERS_DEFAULT);
> > +       if (ret) {
> > +               dev_err(&data->client->dev, "set default PERS returned %d\n",
> > +                       ret);
> > +               return ret;
> > +       }
> > +       data->als_persistence = VCNL4035_ALS_PERS_DEFAULT;
> > +
> > +       /* set default HIGH threshold for ALS */
> > +       ret = regmap_write(data->regmap, VCNL4035_ALS_THDH,
> > +                               VCNL4035_ALS_THDH_DEFAULT);
> > +       if (ret) {
> > +               dev_err(&data->client->dev, "set default THDH returned %d\n",
> > +                       ret);
> > +               return ret;
> > +       }
> > +       data->als_thresh_high = VCNL4035_ALS_THDH_DEFAULT;
> > +
> > +       /* set default LOW threshold for ALS */
> > +       ret = regmap_write(data->regmap, VCNL4035_ALS_THDL,
> > +                               VCNL4035_ALS_THDL_DEFAULT);
> > +       if (ret) {
> > +               dev_err(&data->client->dev, "set default THDL returned %d\n",
> > +                       ret);
> > +               return ret;
> > +       }
> > +       data->als_thresh_low = VCNL4035_ALS_THDL_DEFAULT;
> > +
> > +       return 0;
> > +}
> > +
> > +static bool vcnl4035_is_volatile_reg(struct device *dev, unsigned int reg)
> > +{
> > +       switch (reg) {
> > +       case VCNL4035_ALS_CONF:
> > +       case VCNL4035_DEV_ID:
> > +               return false;
> > +       default:
> > +               return true;
> > +       }
> > +}
> > +
> > +static const struct regmap_config vcnl4035_regmap_config = {
> > +       .name           = VCNL4035_REGMAP_NAME,
> > +       .reg_bits       = 8,
> > +       .val_bits       = 16,
> > +       .max_register   = VCNL4035_DEV_ID,
> > +       .cache_type     = REGCACHE_RBTREE,
> > +       .volatile_reg   = vcnl4035_is_volatile_reg,
> > +       .val_format_endian = REGMAP_ENDIAN_LITTLE,
> > +};
> > +
> > +static int vcnl4035_probe_trigger(struct iio_dev *indio_dev)
> > +{
> > +       int ret;
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +
> > +       data->drdy_trigger0 = devm_iio_trigger_alloc(
> > +                       indio_dev->dev.parent,
> > +                       "%s-dev%d", indio_dev->name, indio_dev->id);
> > +       if (!data->drdy_trigger0)
> > +               return -ENOMEM;
> > +
> > +       data->drdy_trigger0->dev.parent = indio_dev->dev.parent;
> > +       data->drdy_trigger0->ops = &vcnl4035_trigger_ops;
> > +       iio_trigger_set_drvdata(data->drdy_trigger0, indio_dev);
> > +       ret = devm_iio_trigger_register(indio_dev->dev.parent,
> > +                                       data->drdy_trigger0);
> > +       if (ret) {
> > +               dev_err(&data->client->dev, "iio trigger register failed\n");
> > +               return ret;
> > +       }
> > +
> > +       /* Trigger setup */
> > +       ret = devm_iio_triggered_buffer_setup(indio_dev->dev.parent, indio_dev,
> > +                                       NULL, vcnl4035_trigger_consumer_handler,
> > +                                       &iio_triggered_buffer_setup_ops);
> > +       if (ret < 0) {
> > +               dev_err(&data->client->dev, "iio triggered buffer setup failed\n");
> > +               return ret;
> > +       }
> > +
> > +       /* IRQ to trigger mapping */
> > +       ret = devm_request_threaded_irq(&data->client->dev, data->client->irq,
> > +                       NULL, vcnl4035_drdy_irq_thread,
> > +                       IRQF_TRIGGER_LOW | IRQF_ONESHOT,
> > +                       VCNL4035_IRQ_NAME, indio_dev);
> > +       if (ret < 0)
> > +               dev_err(&data->client->dev, "request irq %d for trigger0 failed\n",
> > +                               data->client->irq);
> > +       return ret;
> > +}
> > +
> > +static int vcnl4035_probe(struct i2c_client *client,
> > +                               const struct i2c_device_id *id)
> > +{
> > +       struct vcnl4035_data *data;
> > +       struct iio_dev *indio_dev;
> > +       struct regmap *regmap;
> > +       int ret;
> > +
> > +       indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
> > +       if (!indio_dev)
> > +               return -ENOMEM;
> > +
> > +       regmap = devm_regmap_init_i2c(client, &vcnl4035_regmap_config);
> > +       if (IS_ERR(regmap)) {
> > +               dev_err(&client->dev, "regmap_init failed!\n");
> > +               return PTR_ERR(regmap);
> > +       }
> > +
> > +       data = iio_priv(indio_dev);
> > +       i2c_set_clientdata(client, indio_dev);
> > +       data->client = client;
> > +       data->regmap = regmap;
> > +
> > +       indio_dev->dev.parent = &client->dev;
> > +       indio_dev->info = &vcnl4035_info;
> > +       indio_dev->name = VCNL4035_DRV_NAME;
> > +       indio_dev->channels = vcnl4035_channels;
> > +       indio_dev->num_channels = ARRAY_SIZE(vcnl4035_channels);
> > +       indio_dev->modes = INDIO_DIRECT_MODE;
> > +
> > +       ret = vcnl4035_init(data);
> > +       if (ret < 0) {
> > +               dev_err(&client->dev, "vcnl4035 chip init failed\n");
> > +               return ret;
> > +       }
> > +
> > +       if (client->irq > 0) {
> > +               ret = vcnl4035_probe_trigger(indio_dev);
> > +               if (ret < 0) {
> > +                       dev_err(&client->dev, "vcnl4035 unable init trigger\n");
> > +                       goto fail_poweroff;
> > +               }
> > +       }
> > +
> > +       ret = pm_runtime_set_active(&client->dev);
> > +       if (ret < 0)
> > +               goto fail_poweroff;
> > +
> > +       ret = iio_device_register(indio_dev);
> > +       if (ret < 0)
> > +               goto fail_poweroff;
> > +
> > +       pm_runtime_enable(&client->dev);
> > +       pm_runtime_set_autosuspend_delay(&client->dev, VCNL4035_SLEEP_DELAY_MS);
> > +       pm_runtime_use_autosuspend(&client->dev);
> > +
> > +       return 0;
> > +
> > +fail_poweroff:
> > +       vcnl4035_set_als_power_state(data, VCNL4035_MODE_ALS_DISABLE);
> > +       return ret;
> > +}
> > +
> > +static int vcnl4035_remove(struct i2c_client *client)
> > +{
> > +       struct iio_dev *indio_dev = i2c_get_clientdata(client);
> > +
> > +       pm_runtime_dont_use_autosuspend(&client->dev);
> > +       pm_runtime_disable(&client->dev);
> > +       iio_device_unregister(indio_dev);
> > +       pm_runtime_set_suspended(&client->dev);
> > +
> > +       return vcnl4035_set_als_power_state(iio_priv(indio_dev),
> > +                                       VCNL4035_MODE_ALS_DISABLE);
> > +}
> > +
> > +static int __maybe_unused vcnl4035_runtime_suspend(struct device *dev)
> > +{
> > +       struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +       int ret;
> > +
> > +       ret = vcnl4035_set_als_power_state(data, VCNL4035_MODE_ALS_DISABLE);
> > +       regcache_mark_dirty(data->regmap);
> > +
> > +       return ret;
> > +}
> > +
> > +static int __maybe_unused vcnl4035_runtime_resume(struct device *dev)
> > +{
> > +       struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
> > +       struct vcnl4035_data *data = iio_priv(indio_dev);
> > +       int ret;
> > +
> > +       regcache_sync(data->regmap);
> > +       ret = vcnl4035_set_als_power_state(data, VCNL4035_MODE_ALS_ENABLE);
> > +       if (ret < 0)
> > +               return ret;
> > +
> > +       /* wait for 1 ALS integration cycle */
> > +       msleep(data->als_it_val * 100);
> > +
> > +       return 0;
> > +}
> > +
> > +static const struct dev_pm_ops vcnl4035_pm_ops = {
> > +       SET_SYSTEM_SLEEP_PM_OPS(pm_runtime_force_suspend,
> > +                               pm_runtime_force_resume)
> > +       SET_RUNTIME_PM_OPS(vcnl4035_runtime_suspend,
> > +                          vcnl4035_runtime_resume, NULL)
> > +};
> > +
> > +static const struct of_device_id vcnl4035_of_match[] = {
> > +       { .compatible = "vishay,vcnl4035", },
> > +       { }
> > +};
> > +MODULE_DEVICE_TABLE(of, vcnl4035_of_match);
> > +
> > +static struct i2c_driver vcnl4035_driver = {
> > +       .driver = {
> > +               .name   = VCNL4035_DRV_NAME,
> > +               .pm     = &vcnl4035_pm_ops,
> > +               .of_match_table = vcnl4035_of_match,
> > +       },
> > +       .probe  = vcnl4035_probe,
> > +       .remove = vcnl4035_remove,
> > +};
> > +
> > +module_i2c_driver(vcnl4035_driver);
> > +
> > +MODULE_AUTHOR("Parthiban Nallathambi <pn@denx.de>");
> > +MODULE_DESCRIPTION("VCNL4035 Ambient Light Sensor driver");
> > +MODULE_LICENSE("GPL v2");
> > --
> > 2.17.2
> >  
> 
> 
