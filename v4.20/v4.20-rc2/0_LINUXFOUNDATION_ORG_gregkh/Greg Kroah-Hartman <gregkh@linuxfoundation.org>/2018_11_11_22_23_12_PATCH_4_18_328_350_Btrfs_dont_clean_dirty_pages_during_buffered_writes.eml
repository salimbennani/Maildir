Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 00:44:07 -0000
Received: from icoremail.net (unknown [209.85.210.169])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH7btt+hbg514AQ--.36436S3;
	Mon, 12 Nov 2018 07:14:54 +0800 (CST)
Received: from mail-pf1-f169.google.com (unknown [209.85.210.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBXP0vrt+hbn6QuAA--.11686S3;
	Mon, 12 Nov 2018 07:14:51 +0800 (CST)
Received: by mail-pf1-f169.google.com with SMTP id u10-v6so3350926pfn.9
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 15:14:51 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=6d1JuTNeKx8Ko+ZPmvuuMHDmPfwLEPhCbmENX4HCUJk=;
        b=QZ2ZkXjxYcbFKY5QuKqnh3IWCi8oJFMg0/1MahQr/1Bh/B/VRNhIpS3z1JDzGKRzAY
         7TscXhKEp1rQtNfirxHzr0uJxnlX6VklLoH5ExoxJUa+MRAwUNpSGFPs6RyN1x659gVj
         I5IklvZcKFSw18Q4d0uoGAkBtxjIzlVH3H3yVxS6LF1kWwKXon39ASOQd951KbpmeGJd
         QOxCGq1qRWAtrsoVBG2V4t0sVSW9UTri4gEbxTYJ/KaEp+gAAAs1wug2D7gqr3aFqSPX
         N4naPoy/PKgWOMcGv9QrISZsZhL0T9vpsXLRFqRDcickZdQ6sJ7o673S3NrM84JsW5cm
         jFLQ==
X-Gm-Message-State: AGRZ1gJ0u+/CReXkA3QOR+QijyYkpQc6yAkv31NevLB4dDYoLY+va2Ei
	zqTDld8UbjQNdPHLBKzzxwg7JTez3JLrdX0O5gFQK5CV4gDEPdk=
X-Received: by 2002:a63:1e17:: with SMTP id e23mr15211171pge.130.1541978091233;
        Sun, 11 Nov 2018 15:14:51 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2552332pjt;
        Sun, 11 Nov 2018 15:14:50 -0800 (PST)
X-Google-Smtp-Source: AJdET5cee4b+tgoXtRlrkCToyH9iS+8U3/mF4o2F9V96QhjfpmsO4PCWAT0l5VEEZvTEpt/I3QR+
X-Received: by 2002:a62:b615:: with SMTP id j21-v6mr17995877pff.199.1541978090494;
        Sun, 11 Nov 2018 15:14:50 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541978090; cv=none;
        d=google.com; s=arc-20160816;
        b=jXcafp2P2/Yp3qU66qKU7UBtfJCu3jd+lOjp+MM9LH0oU5fcUPRYKeQWk9NWa6I4++
         65Jw8W1uBChEzstmXs1vZGB51PrQO5Zw0q/IEnb3yFDw/E7ODBcBOjmuG2mlEnhRJfEm
         3aViM+4fJvpYQ9IMPC2D/wbU63U06MwFf2oaWIsKvhsvxD5GNian/HQRFj4Q9NYoufay
         ooJfkTZT+3KBkRue9UBRW8Oz6n173MtJkKP3VHiTQK41IBYT/jjK9Fk8eOO4d7F9TSyU
         3WF+XjH5lJIbb/kPCm9Y+/1fcjm1JF1Y2OnZNbKeVWoTLZciBKoH5vdtbFwlyJzbzE8k
         gnZQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:date:subject:cc:to
         :from:dkim-signature;
        bh=6d1JuTNeKx8Ko+ZPmvuuMHDmPfwLEPhCbmENX4HCUJk=;
        b=fAvHzcZOlMv6Iz/1qK+ItIyL6JnVuhBtwDtuEfd4SvVyuDHgpq24cJ15pz5xECre1S
         sP0pZIGGORhbNk8ZSRsT1TbiIIb2othoUwnU7eWB9oY+T0RcoYmYnDkC+saIcA6EHwSm
         JyctGwjPjRGy0t5Pzqk3gNt+Rd9BMjPgKBPr2yBfczgJbsTI/EeElR77anIdXWe8zeIp
         FtIkiAm5W42P1UWlRw3wR9DJxWUfmB979EWzCarbM+z4kkqwAeipgAsPesIqqSN2fwk3
         v6bSSz8R0+JZsLT+vJA6CECKZ+lQJq8d15iz4m25EMO1rEDVIi5FBUDvpaDRwATKo7k9
         n3VQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@kernel.org header.s=default header.b=G7qrEUgP;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id w1-v6si17273416plk.317.2018.11.11.15.14.36;
        Sun, 11 Nov 2018 15:14:50 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389910AbeKLIVq (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Mon, 12 Nov 2018 03:21:46 -0500
Received: from mail.kernel.org ([198.145.29.99]:49742 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1733215AbeKLIVo (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 03:21:44 -0500
Received: from localhost (unknown [206.108.79.134])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D95A5223DD;
        Sun, 11 Nov 2018 22:31:46 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1541975506;
        bh=ZpiOGYZ0BNV2Ea2iaTIDVlFo/bosrhOJAbJNprqjxQ4=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=G7qrEUgPWp5WleBoiLRHEpTBneHU0/1+UdB/lEtxIPy3Ru85MwjY1a5I5gf+V0Aao
         eFsQKjhDEsaeYGyEFErdDjflaPTdpjeiPH4a+96hT7Qd/iYJcXxl/idDmKR7eJnqP+
         JtZ8eR+21wo/YQpXF/2HQ9BRv1tl+nuXOUVOyD0g=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Chris Mason <clm@fb.com>,
        David Sterba <dsterba@suse.com>
Subject: [PATCH 4.18 328/350] Btrfs: dont clean dirty pages during buffered writes
Date: Sun, 11 Nov 2018 14:23:12 -0800
Message-Id: <20181111221721.805342954@linuxfoundation.org>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181111221707.043394111@linuxfoundation.org>
References: <20181111221707.043394111@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBXP0vrt+hbn6QuAA--.11686S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxAr4UuFy8JFy3JrW5tF45Awb_yoW5uF47pF
	s3GF13Ar4kJ34xZFyfWw4kuryfKwn7Xr45Zrn8JasxZ3Z8WrZaqryI9w1IvF1rGryxZrWY
	vrs0y34kWF47uFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_tr0E3s1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr1j6F4UJwA2z4x0Y4vE
	x4A2jsIE14v26rxl6s0DM28EF7xvwVC2z280aVCY1x0267AKxVW0oVCq3wAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	AVWUtwAv7VC2z280aVAFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcxkI7V
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_uwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_tr0E3s1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVW8Jr0_Cr1UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCY
	IxAIcVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07bL
	xRgUUUUU=

4.18-stable review patch.  If anyone has any objections, please let me know.

------------------

From: Chris Mason <clm@fb.com>

commit 7703bdd8d23e6ef057af3253958a793ec6066b28 upstream.

During buffered writes, we follow this basic series of steps:

again:
	lock all the pages
	wait for writeback on all the pages
	Take the extent range lock
	wait for ordered extents on the whole range
	clean all the pages

	if (copy_from_user_in_atomic() hits a fault) {
		drop our locks
		goto again;
	}

	dirty all the pages
	release all the locks

The extra waiting, cleaning and locking are there to make sure we don't
modify pages in flight to the drive, after they've been crc'd.

If some of the pages in the range were already dirty when the write
began, and we need to goto again, we create a window where a dirty page
has been cleaned and unlocked.  It may be reclaimed before we're able to
lock it again, which means we'll read the old contents off the drive and
lose any modifications that had been pending writeback.

We don't actually need to clean the pages.  All of the other locking in
place makes sure we don't start IO on the pages, so we can just leave
them dirty for the duration of the write.

Fixes: 73d59314e6ed (the original btrfs merge)
CC: stable@vger.kernel.org # v4.4+
Signed-off-by: Chris Mason <clm@fb.com>
Reviewed-by: David Sterba <dsterba@suse.com>
Signed-off-by: David Sterba <dsterba@suse.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 fs/btrfs/file.c |   29 +++++++++++++++++++++++------
 1 file changed, 23 insertions(+), 6 deletions(-)

--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -534,6 +534,14 @@ int btrfs_dirty_pages(struct inode *inod
 
 	end_of_last_block = start_pos + num_bytes - 1;
 
+	/*
+	 * The pages may have already been dirty, clear out old accounting so
+	 * we can set things up properly
+	 */
+	clear_extent_bit(&BTRFS_I(inode)->io_tree, start_pos, end_of_last_block,
+			 EXTENT_DIRTY | EXTENT_DELALLOC |
+			 EXTENT_DO_ACCOUNTING | EXTENT_DEFRAG, 0, 0, cached);
+
 	if (!btrfs_is_free_space_inode(BTRFS_I(inode))) {
 		if (start_pos >= isize &&
 		    !(BTRFS_I(inode)->flags & BTRFS_INODE_PREALLOC)) {
@@ -1504,18 +1512,27 @@ lock_and_cleanup_extent_if_need(struct b
 		}
 		if (ordered)
 			btrfs_put_ordered_extent(ordered);
-		clear_extent_bit(&inode->io_tree, start_pos, last_pos,
-				 EXTENT_DIRTY | EXTENT_DELALLOC |
-				 EXTENT_DO_ACCOUNTING | EXTENT_DEFRAG,
-				 0, 0, cached_state);
+
 		*lockstart = start_pos;
 		*lockend = last_pos;
 		ret = 1;
 	}
 
+	/*
+	 * It's possible the pages are dirty right now, but we don't want
+	 * to clean them yet because copy_from_user may catch a page fault
+	 * and we might have to fall back to one page at a time.  If that
+	 * happens, we'll unlock these pages and we'd have a window where
+	 * reclaim could sneak in and drop the once-dirty page on the floor
+	 * without writing it.
+	 *
+	 * We have the pages locked and the extent range locked, so there's
+	 * no way someone can start IO on any dirty pages in this range.
+	 *
+	 * We'll call btrfs_dirty_pages() later on, and that will flip around
+	 * delalloc bits and dirty the pages as required.
+	 */
 	for (i = 0; i < num_pages; i++) {
-		if (clear_page_dirty_for_io(pages[i]))
-			account_page_redirty(pages[i]);
 		set_page_extent_mapped(pages[i]);
 		WARN_ON(!PageLocked(pages[i]));
 	}

