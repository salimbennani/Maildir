Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 11 Nov 2018 15:04:18 -0000
Received: from icoremail.net (unknown [209.85.210.177])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv_qfeedbVPlxAQ--.35104S3;
	Sun, 11 Nov 2018 08:36:48 +0800 (CST)
Received: from mail-pf1-f177.google.com (unknown [209.85.210.177])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBX0EyceedbmWkpAA--.2012S3;
	Sun, 11 Nov 2018 08:36:44 +0800 (CST)
Received: by mail-pf1-f177.google.com with SMTP id u10-v6so2578927pfn.9
        for <xuliker@zju.edu.cn>; Sat, 10 Nov 2018 16:36:44 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:sender:precedence:list-id;
        bh=00AErAWdshdmjgkPuka4mDKoUyjZJOLQPu7jh66w8aM=;
        b=Ua46KrBJP51iilNWXaTK/NIqhf2Ylm1OKXCIrSPhz/v+7sDSbF/8TmcNVcljzvnovz
         TCS5T6ayi/rEDbRpUf/iGRoU1CpaJIrpC+LS4l6QVZwq9Wsz6hU1wx/APGPCz22pS19k
         AVQYCoynGlVn2zfjgHlEXjz4/zEh60CMZ33tBO3EsZFUDCrEE8ysko14VgtZFLemhqvS
         JhpaYJdjdoNc+MbSSFHt+KeTHap9bHU+V321XKlqsQIo4deVdU1ufb0H5SySgq2rvatM
         AG/4hNxXQ3/wlgjuLOk7A2i3/Wct9IePNwAZVeNVxGcSePgRFKAfYcvF94HIwF+VKyZT
         21tA==
X-Gm-Message-State: AGRZ1gIAuH89JAx8Eb4zks2QCVDJDYCwlm9FOVJdZ0eexEC8rFDWR1mK
	U8V/1ZzDOKXgQY1W3aOgcJdOWa2oRJ3yStJInam2sf8l7wVmWDY=
X-Received: by 2002:a62:6241:: with SMTP id w62-v6mr2747907pfb.69.1541896603997;
        Sat, 10 Nov 2018 16:36:43 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1609365pjt;
        Sat, 10 Nov 2018 16:36:43 -0800 (PST)
X-Google-Smtp-Source: AJdET5evTvEDhLbP9awKVMRODVAghRnKMbAxZdJassCsyUIEJgYTymbMStNn/r8bV87n+KLqg5+O
X-Received: by 2002:a62:3a8c:: with SMTP id v12-v6mr14536571pfj.118.1541896603021;
        Sat, 10 Nov 2018 16:36:43 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541896602; cv=none;
        d=google.com; s=arc-20160816;
        b=FtpDMmT/zstnd3GcbEY8uL86nIm4ZzCnkD6hj7x5SzUpC/uJeiwSYmeadM6MVZt+Ao
         zH5BmXRG9Lcf/3CWb1RhmNyGLCf0vDLE9FgOwDmKWebjmq/Iqmg7L82ouBh9To8hZVi7
         V2QeiaIhScDjGUVROgmX8pK1wd45PXWsYoZaPVI5hwyn7pZWxM7MNQ7iTcFyh+nfbxBX
         LoVdVunDddo/uY9cfAfelfOLX8kxohjPM65QBaFGY1FvXIi7z0nWDWaszerv1nzoUZdk
         76YzU14/YlIBnxiBSpogJ5FjpTrJ3z7xUXswswsDf/o1/LofLSIO1lOrTYpLj25SFTq0
         4oew==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:message-id:date:subject:cc:to:from
         :dkim-signature;
        bh=00AErAWdshdmjgkPuka4mDKoUyjZJOLQPu7jh66w8aM=;
        b=Q8GevTL5rdMwYBi7ybTvUWKulDFcIh+VavKCD5n4j126N199yOIk3yK95QHFAoVF6P
         kg1FKK5O9c+BgLmodI7PZxpR+BeP4f4BFPq0WlbkVaPPCMWPSzEgFWgZt8mdJkVSiEsg
         AitrSJNtBdgLleTqWclWOFgVbeuPLTx3JbX5fNfg19ajZGb9PGbkLYf7yLjlXzA07xvG
         qA5tAD1sC6z5b1Z5EP1knJu9YiMIujajBQqVPBLM65ghlt/bA743Ojr7lv/XDxKWNRhV
         lnpjyj4+TPJem/T7Yxa/GQ4kD4BfWXSIFymdZ+Ny/OWP3X0NVTM7dlTVSeyn1rPiwgom
         ZYcA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20161025 header.b=vFUYHOvU;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id g2-v6si12684674plq.336.2018.11.10.16.36.27;
        Sat, 10 Nov 2018 16:36:42 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727187AbeKKKXN (ORCPT <rfc822;tu.k.phung@gmail.com>
        + 99 others); Sun, 11 Nov 2018 05:23:13 -0500
Received: from mail-pf1-f195.google.com ([209.85.210.195]:46858 "EHLO
        mail-pf1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727037AbeKKKXM (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 11 Nov 2018 05:23:12 -0500
Received: by mail-pf1-f195.google.com with SMTP id s9-v6so2573538pfm.13;
        Sat, 10 Nov 2018 16:36:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=00AErAWdshdmjgkPuka4mDKoUyjZJOLQPu7jh66w8aM=;
        b=vFUYHOvUSE5BtlHoWwt7B+sZDnSkH35fI3Jg+Vj9nCQiSI3zbOXzJdAaVyv70jVri7
         9SfUsoeryucTyVqz7cW2W1g5lKKWh23GbBxMkP5wK0cgXM7uyK0lb9YYk4PNRbrP8zqN
         UmN9CiHPYmzetkwyj2+I9I4vVgyGH+YnoV6rPfxD2RO0RxW0N4hoyK2/nQOGJpxAi6Qk
         omtLMcVk9Nm7lwAp5xs20CRU6Cni5ESWudV0NcEG2WrdGnOa8rIUpROi7cYF9YuVVbQ/
         8WCCyyhIQPXyCDrrZyNNla8ljV1Rv8w3UDu3DE/0X2yFD+hmxYeJv5l/G34z7WLNazsj
         X6sw==
X-Received: by 2002:a63:2e02:: with SMTP id u2mr12800987pgu.9.1541896581916;
        Sat, 10 Nov 2018 16:36:21 -0800 (PST)
Received: from localhost.localdomain ([64.64.108.230])
        by smtp.gmail.com with ESMTPSA id u76-v6sm14122483pfa.176.2018.11.10.16.36.18
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sat, 10 Nov 2018 16:36:21 -0800 (PST)
From: hmsjwzb <weizhefix@gmail.com>
To: darrick.wong@oracle.com
Cc: hmsjwzb <weizhefix@gmail.com>, linux-xfs@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH] Fix coding style issue in xfs_acl.c and xfs_aops.c
Date: Sun, 11 Nov 2018 08:36:03 +0800
Message-Id: <20181111003603.7598-1-weizhefix@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBX0EyceedbmWkpAA--.2012S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3GryxXF1xXFWxKFWUWr48Zwb_yoWxGr13pr
	Z3Kw13Ga1DJw1Iv39rZw10qw1Sy34rCr4YkFZ3Zr9Fva98Jr12krZ2ya10qa97GFWfGrWY
	vr47WFWDGrW5ZaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPab7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Gr0_Xr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6w1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42
	IY6xIIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF
	0xvEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuYvjxU
	QtC7UUUUU

Possible unwrapped commit description (prefer a maximum 75 chars per line)

Signed-off-by: hmsjwzb <weizhefix@gmail.com>
---
 fs/xfs/xfs_acl.c  |  4 +--
 fs/xfs/xfs_aops.c | 73 ++++++++++++++++++++++++-----------------------
 2 files changed, 39 insertions(+), 38 deletions(-)

diff --git a/fs/xfs/xfs_acl.c b/fs/xfs/xfs_acl.c
index 8039e35147dd..5c779c161727 100644
--- a/fs/xfs/xfs_acl.c
+++ b/fs/xfs/xfs_acl.c
@@ -19,8 +19,8 @@
 
 /*
  * Locking scheme:
- *  - all ACL updates are protected by inode->i_mutex, which is taken before
- *    calling into this file.
+ *  - all ACL updates are protected by inode->i_mutex,
+ *    which is taken before calling into this file.
  */
 
 STATIC struct posix_acl *
diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
index 338b9d9984e0..1a6cb88ffdb7 100644
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -81,8 +81,8 @@ xfs_finish_page_writeback(
 
 /*
  * We're now finished for good with this ioend structure.  Update the page
- * state, release holds on bios, and finally free up memory.  Do not use the
- * ioend after this.
+ * state, release holds on bios, and finally free up memory.
+ * Do not use the ioend after this.
  */
 STATIC void
 xfs_destroy_ioend(
@@ -464,18 +464,18 @@ xfs_map_blocks(
 }
 
 /*
- * Submit the bio for an ioend. We are passed an ioend with a bio attached to
- * it, and we submit that bio. The ioend may be used for multiple bio
- * submissions, so we only want to allocate an append transaction for the ioend
- * once. In the case of multiple bio submission, each bio will take an IO
- * reference to the ioend to ensure that the ioend completion is only done once
- * all bios have been submitted and the ioend is really done.
+ * Submit the bio for an ioend. We are passed an ioend with a bio attached
+ * to it, and we submit that bio. The ioend may be used for multiple bio
+ * submissions, so we only want to allocate an append transaction for the
+ * ioend once. In the case of multiple bio submission, each bio will take
+ * an IO reference to the ioend to ensure that the ioend completion is only
+ * done once all bios have been submitted and the ioend is really done.
  *
- * If @fail is non-zero, it means that we have a situation where some part of
- * the submission process has failed after we have marked paged for writeback
- * and unlocked them. In this situation, we need to fail the bio and ioend
- * rather than submit it to IO. This typically only happens on a filesystem
- * shutdown.
+ * If @fail is non-zero, it means that we have a situation where some part
+ * of the submission process has failed after we have marked paged for
+ * writeback and unlocked them. In this situation, we need to fail the bio
+ * and ioend rather than submit it to IO. This typically only happens
+ * on a filesystem shutdown.
  */
 STATIC int
 xfs_submit_ioend(
@@ -583,8 +583,8 @@ xfs_chain_bio(
 }
 
 /*
- * Test to see if we have an existing ioend structure that we could append to
- * first, otherwise finish off the current ioend and start another.
+ * Test to see if we have an existing ioend structure that we could append
+ * to first, otherwise finish off the current ioend and start another.
  */
 STATIC void
 xfs_add_to_ioend(
@@ -637,15 +637,16 @@ xfs_vm_invalidatepage(
 }
 
 /*
- * If the page has delalloc blocks on it, we need to punch them out before we
- * invalidate the page.  If we don't, we leave a stale delalloc mapping on the
- * inode that can trip up a later direct I/O read operation on the same region.
+ * If the page has delalloc blocks on it, we need to punch them out before
+ * we invalidate the page.  If we don't, we leave a stale delalloc mapping
+ * on the inode that can trip up a later direct I/O read operation on
+ * the same region.
  *
- * We prevent this by truncating away the delalloc regions on the page.  Because
- * they are delalloc, we can do this without needing a transaction. Indeed - if
- * we get ENOSPC errors, we have to be able to do this truncation without a
- * transaction as there is no space left for block reservation (typically why we
- * see a ENOSPC in writeback).
+ * We prevent this by truncating away the delalloc regions on the page.
+ * Because they are delalloc, we can do this without needing a transaction.
+ * Indeed - if we get ENOSPC errors, we have to be able to do this
+ * truncation without a transaction as there is no space left for block
+ * reservation (typically why we see a ENOSPC in writeback).
  */
 STATIC void
 xfs_aops_discard_page(
@@ -674,20 +675,20 @@ xfs_aops_discard_page(
 }
 
 /*
- * We implement an immediate ioend submission policy here to avoid needing to
- * chain multiple ioends and hence nest mempool allocations which can violate
- * forward progress guarantees we need to provide. The current ioend we are
- * adding blocks to is cached on the writepage context, and if the new block
- * does not append to the cached ioend it will create a new ioend and cache that
- * instead.
+ * We implement an immediate ioend submission policy here to avoid needing
+ * to chain multiple ioends and hence nest mempool allocations which can
+ * violate forward progress guarantees we need to provide. The current
+ * ioend we are adding blocks to is cached on the writepage context,
+ * and if the new block does not append to the cached ioend it will create
+ * a new ioend and cache that instead.
  *
- * If a new ioend is created and cached, the old ioend is returned and queued
- * locally for submission once the entire page is processed or an error has been
- * detected.  While ioends are submitted immediately after they are completed,
- * batching optimisations are provided by higher level block plugging.
- *
- * At the end of a writeback pass, there will be a cached ioend remaining on the
- * writepage context that the caller will need to submit.
+ * If a new ioend is created and cached, the old ioend is returned and
+ * queued locally for submission once the entire page is processed or an
+ * error has been detected.  While ioends are submitted immediately
+ * after they are completed, batching optimisations are provided by higher
+ * level block plugging.
+ * At the end of a writeback pass, there will be a cached ioend remaining
+ * on the writepage context that the caller will need to submit.
  */
 static int
 xfs_writepage_map(
-- 
2.17.1
