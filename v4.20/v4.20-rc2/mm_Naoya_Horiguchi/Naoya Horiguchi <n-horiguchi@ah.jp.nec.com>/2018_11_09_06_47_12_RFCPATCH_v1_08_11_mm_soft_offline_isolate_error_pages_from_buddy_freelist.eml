Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 10 Nov 2018 00:50:08 -0000
Received: from icoremail.net (unknown [209.85.214.180])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv+64LeVb9LxlAQ--.31158S3;
	Fri, 09 Nov 2018 14:48:25 +0800 (CST)
Received: from mail-pl1-f180.google.com (unknown [209.85.214.180])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBXMj62LeVb3hIhAA--.348S3;
	Fri, 09 Nov 2018 14:48:22 +0800 (CST)
Received: by mail-pl1-f180.google.com with SMTP id t6-v6so490619plo.9
        for <xuliker@zju.edu.cn>; Thu, 08 Nov 2018 22:48:22 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:sender:precedence:list-id;
        bh=CqlIoVW1d98lHuODa9U9NYQESN2YZOyjeuQFZV3TRgI=;
        b=dNfRSV1PQfrM+9kfb+GQSrNKRH4DGldeyB/0BYwnaXgHtvtfputUOolR/54E10E5fR
         +Kqektu1VMuF/KRE9EiWcpo42b30GnH29n2vSxTYruiRKKyPIcQRdd0PSm4Awdzpx3Ir
         t+PGmznlju6N37y+rDPRqNJ+qrAJ9V1jDt+UnyWVhGD/q0mpcyOEVVT62hIh8gUplHp8
         ONkXQNY56D+cODlmLS8Zb+NZ4lTsXsCjsVFOMFtqN/XoyxuOQDROcHgD2yFEimIclh9A
         m4oxSohhWE+xKq8Kr6eDJ/xqndNqO0KI0Y5aBWRMuv7NRXfICS5+vbfWzTezU6CJAnK8
         t/tg==
X-Gm-Message-State: AGRZ1gJvKXv3cznNVwPTXsDqWiDDpxCSxmd7pVYGdmQ9LZF+u3yvC0n+
	jccNiO5AlpnfNYT1+pjfX1YD9XblDjWYuO9t0JoE2c6eDmyyiWkbvQ==
X-Received: by 2002:a17:902:bd4a:: with SMTP id b10-v6mr7544363plx.171.1541746101782;
        Thu, 08 Nov 2018 22:48:21 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp1168448pjt;
        Thu, 8 Nov 2018 22:48:20 -0800 (PST)
X-Google-Smtp-Source: AJdET5dMBlhmY6cGaUpwUySue6LzwEbgIekS+nkRbcZshBqknH/AlM5peazSL+c0tZ8WHwp+UCB8
X-Received: by 2002:a17:902:be07:: with SMTP id r7-v6mr7644504pls.137.1541746100280;
        Thu, 08 Nov 2018 22:48:20 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541746100; cv=none;
        d=google.com; s=arc-20160816;
        b=JVbcsvipt5CiInEOvWZV8yQxwL0ZxYMVyUUyUHXML2uR6zXb4LvX4CHZt8TTJcTHqD
         MyYns8kDbQIEt4mtX1UWWM1EcAK1EkG/HjdwDIIg//wjG8yUygUjR6d+fzVerblljaC0
         nVQsDnKXlBR7EQzr1zDjg7eUvq5afky8OWr7qTEsftNUxSvwt0ai77nTxZXW1K4sGe5B
         apeIS3chmEEO21MNvpT7M6MquudWgHN8idAm9bdE2mPjXdjV/WndmJugwLZ27H+dryM3
         IHv5iJms/RZ0JIA76ltbKBwFTpEZZcV4WKb/hT6j7fs6Ay9wY/fTKD28+X3Acu3FgExm
         U+9g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:references:in-reply-to:message-id:date
         :subject:cc:to:from:dkim-signature;
        bh=CqlIoVW1d98lHuODa9U9NYQESN2YZOyjeuQFZV3TRgI=;
        b=yDnjKNhk+e9CojT4Kened3VGwR5P9TzeZOQq0TbzqBLuJhvWRnDSW7FcSsHUNhBzON
         FhOQlpuAVBt4WWtVA9RFhD++6fLdJplYda3RWHLHMb2XRDlz6ClN8UfcH8nSYMbzUzpz
         5FkMtJzLTsLzDSZT/RZdRcK898DbMhabJ8Oyrngba+kBeyOpI+TiPTcK/HrDf25jmKTe
         b4Uoea2uyDwiqMOnMupnulRvhgdyyP+X9abdrktoycbrDeww3glxUep2TQRSRw75pL+l
         4vIh2/McdWYgTjHchc4eRGJEXgo91c+WH+p28PoOT6eHWSDhIvnZyExpuLSzV7JbxlTw
         G/vw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=fail header.i=@gmail.com header.s=20161025 header.b=BZXfJP7E;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id q132-v6si8048760pfc.198.2018.11.08.22.48.05;
        Thu, 08 Nov 2018 22:48:20 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728141AbeKIQ04 (ORCPT <rfc822;changseok.bae@gmail.com>
        + 99 others); Fri, 9 Nov 2018 11:26:56 -0500
Received: from mail-pg1-f195.google.com ([209.85.215.195]:38590 "EHLO
        mail-pg1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727691AbeKIQ0z (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 9 Nov 2018 11:26:55 -0500
Received: by mail-pg1-f195.google.com with SMTP id f8-v6so449442pgq.5
        for <linux-kernel@vger.kernel.org>; Thu, 08 Nov 2018 22:47:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=CqlIoVW1d98lHuODa9U9NYQESN2YZOyjeuQFZV3TRgI=;
        b=BZXfJP7E9452UWPu00jxx7AAEkL3FE0eiuA79Uq2lq79+nmfyqRUMQwn3p0Z5tdZrP
         7fBk2ZeT3y1O/uQoN1kvFM7xM7OQzsATk98Dm87zfeV+soDfPLnzeXEkjVz4B36lMc2W
         zd2JY/UtzvA8UoaB23w+H9RPe8EysVWiguGFC6AUaKA4TeLg6ny7E/X6vj7ENVdAQZC+
         mBQCq2bmn0Xvfo/hweqUk9F0P+erBmTwNtJsI8lyVMT85g4ht4x61mczVvF3aTjT9xIj
         114z+3uGUEkR+db9bQ2l2/E/B4KOmvFelbNfdRSMi9QCyi+9UmSiG5SXYBcZCcYoWIes
         Uihw==
X-Received: by 2002:a63:88c7:: with SMTP id l190mr6336857pgd.110.1541746066992;
        Thu, 08 Nov 2018 22:47:46 -0800 (PST)
Received: from www9186uo.sakura.ne.jp (www9186uo.sakura.ne.jp. [153.121.56.200])
        by smtp.gmail.com with ESMTPSA id c70-v6sm6808355pfg.97.2018.11.08.22.47.44
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 08 Nov 2018 22:47:46 -0800 (PST)
From: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Michal Hocko <mhocko@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mike Kravetz <mike.kravetz@oracle.com>,
        xishi.qiuxishi@alibaba-inc.com,
        Laurent Dufour <ldufour@linux.vnet.ibm.com>
Subject: [RFC][PATCH v1 08/11] mm: soft-offline: isolate error pages from buddy freelist
Date: Fri,  9 Nov 2018 15:47:12 +0900
Message-Id: <1541746035-13408-9-git-send-email-n-horiguchi@ah.jp.nec.com>
X-Mailer: git-send-email 2.7.0
In-Reply-To: <1541746035-13408-1-git-send-email-n-horiguchi@ah.jp.nec.com>
References: <1541746035-13408-1-git-send-email-n-horiguchi@ah.jp.nec.com>
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBXMj62LeVb3hIhAA--.348S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtryDJry5Kr15Jw4UZrykGrg_yoW7Xry8pF
	WxKas5tw4rJw1ayry3Jw4vkan5tan5WFWDCryfWw1rA3Z3Gryak392yr17uF17Gr4kCFW7
	WFs0gF1F9Fn5Zw7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPYb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6r47MxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5JwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAI
	cVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_Jw0_GFylIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6r1j6r1xYxBIdaVFxhVjvjDU0xZFpf9x07bHDGrU
	UUUU=

Soft-offline shares PG_hwpoison with hard-offline to keep track
of memory error, but recently we found that the approach can be
undesirable for soft-offline because it never expects to stop
applications unlike hard-offline.

So this patch suggests that memory error handler (not only sets
PG_hwpoison, but) isolates error pages from buddy allocator in
its context.

In previous works [1], we allow soft-offline handler to set
PG_hwpoison only after successful page migration and page freeing.
This patch, along with that, makes the isolation always done via
set_hwpoison_free_buddy_page() with zone->lock, so the behavior
should be less racy and more predictable.

Note that only considering for isolation, we don't have to set
PG_hwpoison, but my analysis shows that to make memory hotremove
properly work, we still need some flag to clearly separate memory
error from any other type of pages. So this patch doesn't change this.

[1]:
  commit 6bc9b56433b7 ("mm: fix race on soft-offlining free huge pages")
  commit d4ae9916ea29 ("mm: soft-offline: close the race against page allocation")

Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
---
 mm/memory-failure.c |  8 +++---
 mm/page_alloc.c     | 71 ++++++++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 70 insertions(+), 9 deletions(-)

diff --git v4.19-mmotm-2018-10-30-16-08/mm/memory-failure.c v4.19-mmotm-2018-10-30-16-08_patched/mm/memory-failure.c
index 869ff8f..ecafd4a 100644
--- v4.19-mmotm-2018-10-30-16-08/mm/memory-failure.c
+++ v4.19-mmotm-2018-10-30-16-08_patched/mm/memory-failure.c
@@ -1762,9 +1762,11 @@ static int __soft_offline_page(struct page *page)
 	if (ret == 1) {
 		put_hwpoison_page(page);
 		pr_info("soft_offline: %#lx: invalidated\n", pfn);
-		SetPageHWPoison(page);
-		num_poisoned_pages_inc();
-		return 0;
+		if (set_hwpoison_free_buddy_page(page)) {
+			num_poisoned_pages_inc();
+			return 0;
+		} else
+			return -EBUSY;
 	}
 
 	/*
diff --git v4.19-mmotm-2018-10-30-16-08/mm/page_alloc.c v4.19-mmotm-2018-10-30-16-08_patched/mm/page_alloc.c
index ae31839..970d6ff 100644
--- v4.19-mmotm-2018-10-30-16-08/mm/page_alloc.c
+++ v4.19-mmotm-2018-10-30-16-08_patched/mm/page_alloc.c
@@ -8183,10 +8183,55 @@ bool is_free_buddy_page(struct page *page)
 }
 
 #ifdef CONFIG_MEMORY_FAILURE
+
+/*
+ * Pick out a free page from buddy allocator. Unlike expand(), this
+ * function can choose the target page by @target which is not limited
+ * to the first page of some free block.
+ *
+ * This function changes zone state, so callers need to hold zone->lock.
+ */
+static inline void pickout_buddy_page(struct zone *zone, struct page *page,
+			struct page *target, int torder, int low, int high,
+			struct free_area *area, int migratetype)
+{
+	unsigned long size = 1 << high;
+	struct page *current_buddy, *next_page;
+
+	while (high > low) {
+		area--;
+		high--;
+		size >>= 1;
+
+		if (target >= &page[size]) { /* target is in higher buddy */
+			next_page = page + size;
+			current_buddy = page;
+		} else { /* target is in lower buddy */
+			next_page = page;
+			current_buddy = page + size;
+		}
+		VM_BUG_ON_PAGE(bad_range(zone, current_buddy), current_buddy);
+
+		if (set_page_guard(zone, &page[size], high, migratetype))
+			continue;
+
+		list_add(&current_buddy->lru, &area->free_list[migratetype]);
+		area->nr_free++;
+		set_page_order(current_buddy, high);
+		page = next_page;
+	}
+}
+
 /*
- * Set PG_hwpoison flag if a given page is confirmed to be a free page.  This
- * test is performed under the zone lock to prevent a race against page
- * allocation.
+ * Isolate hwpoisoned free page which actully does the following
+ *   - confirm that a given page is a free page under zone->lock,
+ *   - set PG_hwpoison flag,
+ *   - remove the page from buddy allocator, subdividing buddy page
+ *     of each order.
+ *
+ * Just setting PG_hwpoison flag is not safe enough for complete isolation
+ * because rapidly-changing memory allocator code is always with the
+ * risk of mishandling the flag and potential race.
  */
 bool set_hwpoison_free_buddy_page(struct page *page)
 {
@@ -8199,10 +8244,24 @@ bool set_hwpoison_free_buddy_page(struct page *page)
 	spin_lock_irqsave(&zone->lock, flags);
 	for (order = 0; order < MAX_ORDER; order++) {
 		struct page *page_head = page - (pfn & ((1 << order) - 1));
+		unsigned int forder = page_order(page_head);
+		struct free_area *area = &(zone->free_area[forder]);
 
-		if (PageBuddy(page_head) && page_order(page_head) >= order) {
-			if (!TestSetPageHWPoison(page))
-				hwpoisoned = true;
+		if (PageBuddy(page_head) && forder >= order) {
+			int migtype = get_pfnblock_migratetype(page_head,
+							page_to_pfn(page_head));
+			/*
+			 * TestSetPageHWPoison() will be used later when
+			 * reworking hard-offline part is finished.
+			 */
+			SetPageHWPoison(page);
+
+			list_del(&page_head->lru);
+			rmv_page_order(page_head);
+			area->nr_free--;
+			pickout_buddy_page(zone, page_head, page, 0, 0, forder,
+					area, migtype);
+			hwpoisoned = true;
 			break;
 		}
 	}
-- 
2.7.0
