Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 14 Nov 2018 14:44:42 -0000
Received: from icoremail.net (unknown [209.85.214.180])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH+bN4etbIrCOAQ--.42373S3;
	Wed, 14 Nov 2018 16:50:24 +0800 (CST)
Received: from mail-pl1-f180.google.com (unknown [209.85.214.180])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHLkrI4etbo5U9AA--.2645S3;
	Wed, 14 Nov 2018 16:50:16 +0800 (CST)
Received: by mail-pl1-f180.google.com with SMTP id v1-v6so316399plo.2
        for <xuliker@zju.edu.cn>; Wed, 14 Nov 2018 00:50:16 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :references:in-reply-to:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=u/Y1sSGmSVaVgpuVH5i5voWG3JHtu3pfXWZU9RhFYkg=;
        b=BAveggJ2JkPa+xrbe0KbpQ7yEl6reak45iAYkqEVryJiwQRmJfEaogthuO0LMflB4a
         FQrJKzTEEgOOhL07vFSJzkt1jp876vfHHqjm7Fz5OJIpL/JlNyByalOTb+KHxeV6iVWa
         HelDSbUsy+wLEjlVrM/TINFNODvYW+Qd8WvBwgLLFvcHRBroKRey1bvq/kVIyUml0Ulh
         wHlpWd+Gmq6UxsseEMOKwlZvr3u76eu0VGRotPgYjMEucRos7/ZfV9JvXzZd2P5NZdTr
         P7EPYwS9FYbEk7GZtAUIef3I2zPgTGGsZ7JJ/8WzYzXxRJj4LQq+BSx7uj6c921vmrXX
         2bOw==
X-Gm-Message-State: AGRZ1gIDGW5JI0/EH+8PLAnQ/CirDlJRCFAUQ5fCfdsORSQv0dnT6Omw
	tnauUSpMNvJ/CfFuZK9716T6Q+ZJVo+JRdtczXqmNPDf5fqyOGhzcg==
X-Received: by 2002:a17:902:887:: with SMTP id 7-v6mr1026596pll.283.1542185416336;
        Wed, 14 Nov 2018 00:50:16 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp5541977pjt;
        Wed, 14 Nov 2018 00:50:15 -0800 (PST)
X-Google-Smtp-Source: AJdET5cr98yDGguQ4V8m8SHbkLfh8VGHN4d+mtQ3wGAKrtotebJiYTk6ZowgNRGyg4bZdtXUfKYe
X-Received: by 2002:a63:4d66:: with SMTP id n38mr949409pgl.270.1542185415268;
        Wed, 14 Nov 2018 00:50:15 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542185415; cv=none;
        d=google.com; s=arc-20160816;
        b=T9CeEFItVtP9YbGX6474FdDdQlmUoP6c2WtU8CsB5SvzDdGx6Kt+8J7qXnpICoIhBd
         Ldqav9n6yEIp1H+aOLz/ulFyrHvybspTqxuBt7qs4OGNORuybki/oC55xqHVQp73Xjbi
         pQg6rBnQMGxzVo/DjvRRlZQqbNmnUTgVV9oK9T5nIb8DPwewQam/tFpia85M/HGKTRhB
         kHhgTT+vRAEw2m8pJDzl1T7yuol0UXztEMX2FLipqX5FfD++jVYYtBgehnabppFE1mbo
         UyjJRtZnpGqJI8YO/d0/yuBh3Uu5IMvWXx2+tMv8ueFaFtcPqkOmSY4z0vrBFoFwaxMA
         iE2Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:dkim-signature;
        bh=u/Y1sSGmSVaVgpuVH5i5voWG3JHtu3pfXWZU9RhFYkg=;
        b=VzZAmE+bZbfHvNx1k0fEWGD98kwtr55DOmDiSAUOl27/SafRoC+UkbuOThp7/2Edw1
         iM0o/+ZjyvwyETjb69r2DlWdNa07DPW6SSLI828yCwMW1ijZW/PSQdrvnzN2rCLmAOUM
         K+z9apQ1g66EOKxwFK96z56TA73siXQK57Plr5x7WAZpqZKTLleKt7fW+8j8Z8DwJYan
         c8MvxH0qJ2qAtu4x+F0BZIYxwD9Q/swvJYefXRqweJYXE5VPU+Y0qDW06+JSHxECYWFx
         +5JaQtfnIZUf1JMnMYAZGddRIHJboTKBoRvBBh96MEdjVu71fYScLmTj2JE45afwpN2M
         SW9Q==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@chromium.org header.s=google header.b=ONplcwjj;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=chromium.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id q20si23821780pgl.268.2018.11.14.00.49.59;
        Wed, 14 Nov 2018 00:50:15 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731899AbeKNSwG (ORCPT <rfc822;zhaoweiliew@gmail.com>
        + 99 others); Wed, 14 Nov 2018 13:52:06 -0500
Received: from mail-yb1-f196.google.com ([209.85.219.196]:41439 "EHLO
        mail-yb1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727595AbeKNSwG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 14 Nov 2018 13:52:06 -0500
Received: by mail-yb1-f196.google.com with SMTP id t13-v6so6583233ybb.8
        for <linux-kernel@vger.kernel.org>; Wed, 14 Nov 2018 00:49:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=u/Y1sSGmSVaVgpuVH5i5voWG3JHtu3pfXWZU9RhFYkg=;
        b=ONplcwjjrp/yuqSysDNDG8TSdNne0iG0PO6RZLuyKVsqVTZWgwjKf9HzSIDtxWFcn4
         5tThhqX5ixJlcd2Uxjn0OsNxsAsq0hF2O1Kfoc733CrLBzjCk8sviSGKaCLpWgeU8DBR
         1rs8VSQ++LApehyitkvdVLIyVg4+A3db1gP0s=
X-Received: by 2002:a25:32c8:: with SMTP id y191-v6mr703261yby.450.1542185387766;
        Wed, 14 Nov 2018 00:49:47 -0800 (PST)
Received: from mail-yw1-f41.google.com (mail-yw1-f41.google.com. [209.85.161.41])
        by smtp.gmail.com with ESMTPSA id p195-v6sm6129044ywe.83.2018.11.14.00.49.46
        for <linux-kernel@vger.kernel.org>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 14 Nov 2018 00:49:46 -0800 (PST)
Received: by mail-yw1-f41.google.com with SMTP id l200so1376690ywe.10
        for <linux-kernel@vger.kernel.org>; Wed, 14 Nov 2018 00:49:46 -0800 (PST)
X-Received: by 2002:a81:350c:: with SMTP id c12-v6mr762035ywa.342.1542185386174;
 Wed, 14 Nov 2018 00:49:46 -0800 (PST)
MIME-Version: 1.0
References: <20180928082722.26951-1-enric.balletbo@collabora.com>
In-Reply-To: <20180928082722.26951-1-enric.balletbo@collabora.com>
From: Tomasz Figa <tfiga@chromium.org>
Date: Wed, 14 Nov 2018 17:49:34 +0900
X-Gmail-Original-Message-ID: <CAAFQd5BXOmCmwL1i=aBCy5rZn37e-9pYg_WXkgrCG9emV+zKtA@mail.gmail.com>
Message-ID: <CAAFQd5BXOmCmwL1i=aBCy5rZn37e-9pYg_WXkgrCG9emV+zKtA@mail.gmail.com>
Subject: Re: [PATCH v2] drm/rockchip: update cursors asynchronously through atomic.
To: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Cc: Sandy Huang <hjc@rock-chips.com>,
        =?UTF-8?Q?Heiko_St=C3=BCbner?= <heiko@sntech.de>,
        David Airlie <airlied@linux.ie>,
        "list@263.net:IOMMU DRIVERS <iommu@lists.linux-foundation.org>, Joerg
        Roedel <joro@8bytes.org>," <linux-arm-kernel@lists.infradead.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        dri-devel <dri-devel@lists.freedesktop.org>,
        "open list:ARM/Rockchip SoC..." <linux-rockchip@lists.infradead.org>,
        Gustavo Padovan <gustavo.padovan@collabora.com>,
        Sean Paul <seanpaul@google.com>, kernel@collabora.com,
        =?UTF-8?Q?St=C3=A9phane_Marchesin?= <marcheu@google.com>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHLkrI4etbo5U9AA--.2645S3
Authentication-Results: mail-app2; spf=permerror smtp.mail=liker.xu+ca
	f_=xuliker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWfGFWfXF4kCw4fAw4kur1kAFb_yoWDuw4rp3
	9rAFWSgr4UKr4kXwnrJrnIvFZ3GwnYkay7X34rtw1Sqa43Kr909wn3W3srCr47Jay7W3Wf
	ArnrJr98Wa129r7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP2b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1j
	6r18McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxE
	wVCI4VW8ZwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Gr0_Xr1lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Cr1j6rxdMxvI42IY
	6I8E87Iv6xkF7I0E14v26F4UJVW0owCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE0xvYzxyl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWU
	JVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7V
	AKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW3JVWrJrUvcSsGvfC2KfnxnUUI43ZEXa7IUoDO
	zDUUUUU==

Hi Enric,

On Fri, Sep 28, 2018 at 5:27 PM Enric Balletbo i Serra
<enric.balletbo@collabora.com> wrote:
>
> Add support to async updates of cursors by using the new atomic
> interface for that.
>
> Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
> ---
> Hi,
>
> This is a second version of the patch to add async-plane update support
> to the Rockchip driver.
>

I'm really sorry for the super late reply. I couldn't get cycles to
look at this earlier. :(

> The patch was tested on a Samsung Chromebook Plus in two ways.
>
>  1. Running all igt kms_cursor_legacy and kms_atomic tests and see that
> there is no regression after the patch.
>     Note that before the patch, the following igt tests failed:
>     - basic-flip-before-cursor-legacy
>     - basic-flip-before-cursor-atomic
>     - cursor-vs-flip-legacy
>     - cursor-vs-flip-toggle
>     - flip-vs-cursor-atomic
>     - flip-vs-cursor-crc-atomic
>     - flip-vs-cursor-crc-legacy
>     - flip-vs-cursor-legacy
>     - flip-vs-cursor-crc-atomic
>     - flip-vs-cursor-crc-legacy

Are the last 2 tests repeated?

>
>     With the patch applied only two tests don't fail (these two are
> expexted to not pass right now):
>     - flip-vs-cursor-crc-atomic
>     - flip-vs-cursor-crc-legac

Did you mean "don't pass"?

>
>     You can check full IGT test report here:
>     - Before the patch:
>         https://people.collabora.com/~eballetbo/tests/igt/samsung-chromebook-plus/igt-1.23/4.19-rc5/index.html
>     - With the patch applied:
>         https://people.collabora.com/~eballetbo/tests/igt/samsung-chromebook-plus/igt-1.23/4.19-rc5-async-update/index.html
>
>  2. Running weston using the atomic API.
>
> Best regards,
>   Enric
>
> Changes in v2:
> - Change the framebuffer as well to cover jumpy cursor when hovering
>   text boxes or hyperlink. (Tomasz)
> - Use the PSR inhibit mechanism when accessing VOP hardware instead of
>   PSR flushing (Tomasz)
>
> Changes in v1:
> - Rebased on top of drm-misc
> - In async_check call drm_atomic_helper_check_plane_state to check that
>   the desired plane is valid and update various bits of derived state
>   (clipped coordinates etc.)
> - In async_check allow to configure new scaling in the fast path.
> - In async_update force to flush all registered PSR encoders.
> - In async_update call atomic_update directly.
> - In async_update call vop_cfg_done needed to set the vop registers and take effect.
>
>  drivers/gpu/drm/rockchip/rockchip_drm_fb.c  | 36 ------------
>  drivers/gpu/drm/rockchip/rockchip_drm_psr.c | 37 ++++++++++++
>  drivers/gpu/drm/rockchip/rockchip_drm_psr.h |  3 +
>  drivers/gpu/drm/rockchip/rockchip_drm_vop.c | 62 +++++++++++++++++++++
>  4 files changed, 102 insertions(+), 36 deletions(-)
>
> diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_fb.c b/drivers/gpu/drm/rockchip/rockchip_drm_fb.c
> index 7b6f7227d476..aec9a997de13 100644
> --- a/drivers/gpu/drm/rockchip/rockchip_drm_fb.c
> +++ b/drivers/gpu/drm/rockchip/rockchip_drm_fb.c
> @@ -128,24 +128,6 @@ rockchip_user_fb_create(struct drm_device *dev, struct drm_file *file_priv,
>         return ERR_PTR(ret);
>  }
>
> -static void
> -rockchip_drm_psr_inhibit_get_state(struct drm_atomic_state *state)
> -{
> -       struct drm_crtc *crtc;
> -       struct drm_crtc_state *crtc_state;
> -       struct drm_encoder *encoder;
> -       u32 encoder_mask = 0;
> -       int i;
> -
> -       for_each_old_crtc_in_state(state, crtc, crtc_state, i) {
> -               encoder_mask |= crtc_state->encoder_mask;
> -               encoder_mask |= crtc->state->encoder_mask;
> -       }
> -
> -       drm_for_each_encoder_mask(encoder, state->dev, encoder_mask)
> -               rockchip_drm_psr_inhibit_get(encoder);
> -}
> -
>  uint32_t rockchip_drm_get_vblank_ns(struct drm_display_mode *mode)
>  {
>         uint64_t vblank_time = mode->vtotal - mode->vdisplay;
> @@ -156,24 +138,6 @@ uint32_t rockchip_drm_get_vblank_ns(struct drm_display_mode *mode)
>         return vblank_time;
>  }
>
> -static void
> -rockchip_drm_psr_inhibit_put_state(struct drm_atomic_state *state)
> -{
> -       struct drm_crtc *crtc;
> -       struct drm_crtc_state *crtc_state;
> -       struct drm_encoder *encoder;
> -       u32 encoder_mask = 0;
> -       int i;
> -
> -       for_each_old_crtc_in_state(state, crtc, crtc_state, i) {
> -               encoder_mask |= crtc_state->encoder_mask;
> -               encoder_mask |= crtc->state->encoder_mask;
> -       }
> -
> -       drm_for_each_encoder_mask(encoder, state->dev, encoder_mask)
> -               rockchip_drm_psr_inhibit_put(encoder);
> -}
> -
>  static void
>  rockchip_atomic_helper_commit_tail_rpm(struct drm_atomic_state *old_state)
>  {
> diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_psr.c b/drivers/gpu/drm/rockchip/rockchip_drm_psr.c
> index 79d00d861a31..1635485955d3 100644
> --- a/drivers/gpu/drm/rockchip/rockchip_drm_psr.c
> +++ b/drivers/gpu/drm/rockchip/rockchip_drm_psr.c
> @@ -13,6 +13,7 @@
>   */
>
>  #include <drm/drmP.h>
> +#include <drm/drm_atomic.h>
>  #include <drm/drm_crtc_helper.h>
>
>  #include "rockchip_drm_drv.h"
> @@ -109,6 +110,42 @@ int rockchip_drm_psr_inhibit_put(struct drm_encoder *encoder)
>  }
>  EXPORT_SYMBOL(rockchip_drm_psr_inhibit_put);
>
> +void rockchip_drm_psr_inhibit_get_state(struct drm_atomic_state *state)
> +{
> +       struct drm_crtc *crtc;
> +       struct drm_crtc_state *crtc_state;
> +       struct drm_encoder *encoder;
> +       u32 encoder_mask = 0;
> +       int i;
> +
> +       for_each_old_crtc_in_state(state, crtc, crtc_state, i) {
> +               encoder_mask |= crtc_state->encoder_mask;
> +               encoder_mask |= crtc->state->encoder_mask;
> +       }
> +
> +       drm_for_each_encoder_mask(encoder, state->dev, encoder_mask)
> +               rockchip_drm_psr_inhibit_get(encoder);
> +}
> +EXPORT_SYMBOL(rockchip_drm_psr_inhibit_get_state);
> +
> +void rockchip_drm_psr_inhibit_put_state(struct drm_atomic_state *state)
> +{
> +       struct drm_crtc *crtc;
> +       struct drm_crtc_state *crtc_state;
> +       struct drm_encoder *encoder;
> +       u32 encoder_mask = 0;
> +       int i;
> +
> +       for_each_old_crtc_in_state(state, crtc, crtc_state, i) {
> +               encoder_mask |= crtc_state->encoder_mask;
> +               encoder_mask |= crtc->state->encoder_mask;
> +       }
> +
> +       drm_for_each_encoder_mask(encoder, state->dev, encoder_mask)
> +               rockchip_drm_psr_inhibit_put(encoder);
> +}
> +EXPORT_SYMBOL(rockchip_drm_psr_inhibit_put_state);
> +
>  /**
>   * rockchip_drm_psr_inhibit_get - acquire PSR inhibit on given encoder
>   * @encoder: encoder to obtain the PSR encoder
> diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_psr.h b/drivers/gpu/drm/rockchip/rockchip_drm_psr.h
> index 860c62494496..25350ba3237b 100644
> --- a/drivers/gpu/drm/rockchip/rockchip_drm_psr.h
> +++ b/drivers/gpu/drm/rockchip/rockchip_drm_psr.h
> @@ -20,6 +20,9 @@ void rockchip_drm_psr_flush_all(struct drm_device *dev);
>  int rockchip_drm_psr_inhibit_put(struct drm_encoder *encoder);
>  int rockchip_drm_psr_inhibit_get(struct drm_encoder *encoder);
>
> +void rockchip_drm_psr_inhibit_get_state(struct drm_atomic_state *state);
> +void rockchip_drm_psr_inhibit_put_state(struct drm_atomic_state *state);
> +
>  int rockchip_drm_psr_register(struct drm_encoder *encoder,
>                         int (*psr_set)(struct drm_encoder *, bool enable));
>  void rockchip_drm_psr_unregister(struct drm_encoder *encoder);
> diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
> index 6642c2b9bb3c..682ce40166f7 100644
> --- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
> +++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
> @@ -819,10 +819,72 @@ static void vop_plane_atomic_update(struct drm_plane *plane,
>         spin_unlock(&vop->reg_lock);
>  }
>
> +static int vop_plane_atomic_async_check(struct drm_plane *plane,
> +                                       struct drm_plane_state *state)
> +{
> +       struct vop_win *vop_win = to_vop_win(plane);
> +       const struct vop_win_data *win = vop_win->data;
> +       int min_scale = win->phy->scl ? FRAC_16_16(1, 8) :
> +                                       DRM_PLANE_HELPER_NO_SCALING;
> +       int max_scale = win->phy->scl ? FRAC_16_16(8, 1) :
> +                                       DRM_PLANE_HELPER_NO_SCALING;
> +       struct drm_crtc_state *crtc_state;
> +       int ret;
> +
> +       if (plane != state->crtc->cursor)
> +               return -EINVAL;
> +
> +       if (!plane->state)
> +               return -EINVAL;
> +
> +       if (!plane->state->fb)
> +               return -EINVAL;
> +
> +       if (state->state)
> +               crtc_state = drm_atomic_get_existing_crtc_state(state->state,
> +                                                               state->crtc);
> +       else /* Special case for asynchronous cursor updates. */
> +               crtc_state = plane->crtc->state;
> +
> +       ret = drm_atomic_helper_check_plane_state(plane->state,
> +                                                 crtc_state,
> +                                                 min_scale, max_scale,
> +                                                 true, true);
> +       return ret;
> +}
> +
> +static void vop_plane_atomic_async_update(struct drm_plane *plane,
> +                                         struct drm_plane_state *new_state)
> +{
> +       struct vop *vop = to_vop(plane->state->crtc);
> +
> +       plane->state->crtc_x = new_state->crtc_x;
> +       plane->state->crtc_y = new_state->crtc_y;
> +       plane->state->crtc_h = new_state->crtc_h;
> +       plane->state->crtc_w = new_state->crtc_w;
> +       plane->state->src_x = new_state->src_x;
> +       plane->state->src_y = new_state->src_y;
> +       plane->state->src_h = new_state->src_h;
> +       plane->state->src_w = new_state->src_w;
> +
> +       drm_atomic_set_fb_for_plane(plane->state, new_state->fb);

Isn't this going to drop the old fb reference on the floor without
waiting for the hardware to actually stop scanning out from it?

I believe we need to do something similar to what's already in
vop_crtc_commit_flush(), but not called on this async path
https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/tree/drivers/gpu/drm/rockchip/rockchip_drm_vop.c?h=next-20181114#n1045

Perhaps it would be an option to call vop_crtc_commit_flush() from here?

Best regards,
Tomasz

> +
> +       if (vop->is_enabled) {
> +               rockchip_drm_psr_inhibit_get_state(new_state->state);
> +               vop_plane_atomic_update(plane, plane->state);
> +               spin_lock(&vop->reg_lock);
> +               vop_cfg_done(vop);
> +               spin_unlock(&vop->reg_lock);
> +               rockchip_drm_psr_inhibit_put_state(new_state->state);
> +       }
> +}
> +
>  static const struct drm_plane_helper_funcs plane_helper_funcs = {
>         .atomic_check = vop_plane_atomic_check,
>         .atomic_update = vop_plane_atomic_update,
>         .atomic_disable = vop_plane_atomic_disable,
> +       .atomic_async_check = vop_plane_atomic_async_check,
> +       .atomic_async_update = vop_plane_atomic_async_update,
>  };
>
>  static const struct drm_plane_funcs vop_plane_funcs = {
> --
> 2.19.0
>
