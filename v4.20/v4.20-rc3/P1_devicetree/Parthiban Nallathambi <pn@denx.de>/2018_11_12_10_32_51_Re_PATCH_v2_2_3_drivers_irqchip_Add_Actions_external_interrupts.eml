Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 15:14:44 -0000
Received: from icoremail.net (unknown [209.85.214.182])
	by mail-app2 (Coremail) with SMTP id by_KCgDnX+8IV+lb8MJ8AQ--.38020S3;
	Mon, 12 Nov 2018 18:33:46 +0800 (CST)
Received: from mail-pl1-f182.google.com (unknown [209.85.214.182])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXcz8HV+lbN0IxAA--.432S3;
	Mon, 12 Nov 2018 18:33:43 +0800 (CST)
Received: by mail-pl1-f182.google.com with SMTP id r3-v6so3413231pls.12
        for <xuliker@zju.edu.cn>; Mon, 12 Nov 2018 02:33:43 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :cc:subject:to:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding
         :sender:precedence:list-id;
        bh=YHLZIlESMQt/0M+KcH24c17aBlhYGr1LpLaVZRUzT9U=;
        b=sICe9DeBnCmos40M4HmEuaF3dITUQtozxfmj2JpURtng/o7q6rUw9X24+2giih5QL3
         VhIN4QSClWTsZEfGN8lED4Cqhg7XIMC+1A3NP84dOUGoDr+z7MF1JAZO2NqBlJWDukFa
         5ljQaAVUMXSXCCuB/8RvL6bKwTjyAzVg/D054akDTiBPR2Xz4yoHAn/S+1fKCnG7JTzw
         qjEdqRJD4w3PJzyXtHApErKH9KogsVZzKiRU9cyafMrJCj2VtLxk/Wf1S51rtUoXapvK
         7+iTA+mLD1sOg++bxsyQE5iXegX7dKLm1zK1AeaY+uSQJpS+uhOaLKO8QiZTjsOYd7/u
         OeNg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gK9lNmoEUj8syf7ORFW+47vejLYVPi6RF40nWss4HGR4KdxG65D
	r3eue3fMG4dAiGl06pqc0loeGPsZ/eWEjGW4tU1ewuY1edScOolYHA==
X-Received: by 2002:a17:902:166:: with SMTP id 93-v6mr411339plb.68.1542018823069;
        Mon, 12 Nov 2018 02:33:43 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp3021589pjt;
        Mon, 12 Nov 2018 02:33:41 -0800 (PST)
X-Google-Smtp-Source: AJdET5dOkrgsQ+5Uta36XC62NyhqNasFLE9R4sJ6RTRdvb4GotDUNnC0Ad318dbgKCPNDn1Bgqb9
X-Received: by 2002:a62:380e:: with SMTP id f14-v6mr352043pfa.203.1542018821537;
        Mon, 12 Nov 2018 02:33:41 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542018821; cv=none;
        d=google.com; s=arc-20160816;
        b=KYE//gx9bKsJTIr9ZTB8BBewHRogu7UFYTbbWpjpX3iqd+p865Hz7PkFMpnWSQiT6x
         jUknuQgavWpnfzFh8gfKKzBoIQfyyYRnqr8rFrkVqNIPZoHXnGMy0LA9LfnC/DzfYT6f
         p7u0GdxvYmRITg+gpNKA2eGxxXK+DrzTVh12tnYqTQKhm6vwje7SVTnJpRSYF7YIEp/T
         /iamVPbXQHDuu5vOEJADZyEGzoweM7FeQX4rtWTSmczJ1BwFd1FR7cdc3Wg7E9i2uUoA
         rRREWRybJcyp8AHgo7moOa7W5rUw/Vgwvwfqjo0Xe1X23e28z8j6rEbh9zJo1SD2+DGs
         Ffqg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding
         :content-language:in-reply-to:mime-version:user-agent:date
         :message-id:from:references:to:subject:cc;
        bh=YHLZIlESMQt/0M+KcH24c17aBlhYGr1LpLaVZRUzT9U=;
        b=WHk9TbfAqdcG+grRjDiWqj2kwVzghYB53iJpeEkWSsG4ykiUhAMqyQ/x1mOPRFl9AG
         hlJFT02c2F/VdDy9uT+jxvZVApjEpeLT0I/rA6OF3IZ3lrav/GOtw+1V38SOtoM6YtOc
         6wO2Y6OvHWowL9kIPv4ncmmE9MuExrpZKl3VojPxcZ9rCbfsWrqJQrPB4J585WmR9Ewq
         p1ALZspQyYB7GbtsfmKpZSFLCqgtC3GjyrMR5WVvSjoEdpJCA6beaXfJzPRjcK/HABpb
         /ITBGzAHQtuV+hU/oULtmAHETXW8MtrD3XRoKjNklNdL2SysTQ5kVYH3me4Ka6o3UUKL
         wHkw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id r5-v6si9709996pls.306.2018.11.12.02.33.25;
        Mon, 12 Nov 2018 02:33:41 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728680AbeKLUZs (ORCPT <rfc822;tomnomnom1@gmail.com>
        + 99 others); Mon, 12 Nov 2018 15:25:48 -0500
Received: from mail-out.m-online.net ([212.18.0.10]:57943 "EHLO
        mail-out.m-online.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727156AbeKLUZs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 15:25:48 -0500
Received: from frontend01.mail.m-online.net (unknown [192.168.8.182])
        by mail-out.m-online.net (Postfix) with ESMTP id 42tnCD68kxz1qxpF;
        Mon, 12 Nov 2018 11:32:56 +0100 (CET)
Received: from localhost (dynscan1.mnet-online.de [192.168.6.70])
        by mail.m-online.net (Postfix) with ESMTP id 42tnCC5xm4z1qtfC;
        Mon, 12 Nov 2018 11:32:55 +0100 (CET)
X-Virus-Scanned: amavisd-new at mnet-online.de
Received: from mail.mnet-online.de ([192.168.8.182])
        by localhost (dynscan1.mail.m-online.net [192.168.6.70]) (amavisd-new, port 10024)
        with ESMTP id YtUTbuJ3cXwe; Mon, 12 Nov 2018 11:32:51 +0100 (CET)
X-Auth-Info: kPr4nXpqKS2rumN1vgDB/aWt3vGzt4g5SWx/D3ZfkIA=
Received: from antares.denx.de (unknown [62.91.23.180])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.mnet-online.de (Postfix) with ESMTPSA;
        Mon, 12 Nov 2018 11:32:51 +0100 (CET)
Cc: pn@denx.de, linux-kernel@vger.kernel.org,
        devicetree@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
        sravanhome@gmail.com, thomas.liau@actions-semi.com,
        mp-cs@actions-semi.com, linux@cubietech.com,
        edgar.righi@lsitec.org.br, laisa.costa@lsitec.org.br,
        guilherme.simoes@lsitec.org.br, mkzuffo@lsi.usp.br
Subject: Re: [PATCH v2 2/3] drivers/irqchip: Add Actions external interrupts
 support
To: Marc Zyngier <marc.zyngier@arm.com>, tglx@linutronix.de,
        jason@lakedaemon.net, robh+dt@kernel.org, mark.rutland@arm.com,
        afaerber@suse.de, catalin.marinas@arm.com, will.deacon@arm.com,
        manivannan.sadhasivam@linaro.org
References: <20180812122215.1079590-1-pn@denx.de>
 <20180812122215.1079590-3-pn@denx.de>
 <64b9ae63-c2b9-a2e0-f648-4bf80f34a57a@arm.com>
 <e8ff35c7-813c-2597-ab51-781336d551c5@denx.de>
 <769542dc-0fc4-cb24-6640-aad6672af0fb@arm.com>
From: Parthiban Nallathambi <pn@denx.de>
Message-ID: <2f89e380-cf7b-df3d-8f95-e9baebe8fbef@denx.de>
Date: Mon, 12 Nov 2018 11:32:51 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <769542dc-0fc4-cb24-6640-aad6672af0fb@arm.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXcz8HV+lbN0IxAA--.432S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvAXoW3tF1xZr15Ww1fWrW8JryDAwb_yoW8AF4UKo
	WfJrs7Xw18Gr1UAryUG39rtFya9w1qkr18A34UursrAryYqayayw1Uuw15XF47Ga1Fkr1r
	Ja48Xw1fZFZIqF1fn29KB7ZKAUJUUUUU529EdanIXcx71UUUUj7v73VFW2AGmfu7jjvjm3
	AaLaJ3UjIYCTnIWjp_UUUOj7k0a2IF6w4kM7kC6x804xWl14x267AKxVWUJVW8JwAFIxvE
	14AKwVWUJVWUGwA2ocxC64kIII0Yj41l84x0c7CEw4AK67xGY2AK021l84ACjcxK6xIIjx
	v20xvE14v26F1j6w1UM28EF7xvwVC0I7IYx2IY6xkF7I0E14v26F4j6r4UJwA2z4x0Y4vE
	x4A2jsIE14v26rxl6s0DM28EF7xvwVC2z280aVCY1x0267AKxVW0oVCq3wAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	JVWUGwAv7VC2z280aVAFwI0_Gr0_Cr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI4
	8JMx02cVCv0xWlc7I2V7IY0VAS07AlzVAYIcxG8wCY1x0264kExVAvwVAq07x20xylc2xS
	Y4AK6IIF6r4DMxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5JwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW0oVCq3wCYIxAI
	cVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j
	6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_GFv_WrylIxkGc2Ij64
	vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x07b9J5wU
	UUUU=



On 11/8/18 6:03 PM, Marc Zyngier wrote:
> On 26/08/18 16:20, Parthiban Nallathambi wrote:
>> Hello Marc,
>>
>> Thanks for your feedback.
>>
>> On 8/13/18 1:46 PM, Marc Zyngier wrote:
>>> On 12/08/18 13:22, Parthiban Nallathambi wrote:
>>>> Actions Semi Owl family SoC's S500, S700 and S900 provides support
>>>> for 3 external interrupt controllers through SIRQ pins.
>>>>
>>>> Each line can be independently configured as interrupt and triggers
>>>> on either of the edges (raising or falling) or either of the levels
>>>> (high or low) . Each line can also be masked independently.
>>>>
>>>> Signed-off-by: Parthiban Nallathambi <pn@denx.de>
>>>> Signed-off-by: Saravanan Sekar <sravanhome@gmail.com>
>>>> ---
>>>>   drivers/irqchip/Makefile       |   1 +
>>>>   drivers/irqchip/irq-owl-sirq.c | 305 +++++++++++++++++++++++++++++++++++++++++
>>>>   2 files changed, 306 insertions(+)
>>>>   create mode 100644 drivers/irqchip/irq-owl-sirq.c
>>>>
>>>> diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
>>>> index 15f268f646bf..072c4409e7c4 100644
>>>> --- a/drivers/irqchip/Makefile
>>>> +++ b/drivers/irqchip/Makefile
>>>> @@ -7,6 +7,7 @@ obj-$(CONFIG_ATH79)			+= irq-ath79-misc.o
>>>>   obj-$(CONFIG_ARCH_BCM2835)		+= irq-bcm2835.o
>>>>   obj-$(CONFIG_ARCH_BCM2835)		+= irq-bcm2836.o
>>>>   obj-$(CONFIG_ARCH_EXYNOS)		+= exynos-combiner.o
>>>> +obj-$(CONFIG_ARCH_ACTIONS)		+= irq-owl-sirq.o
>>>>   obj-$(CONFIG_FARADAY_FTINTC010)		+= irq-ftintc010.o
>>>>   obj-$(CONFIG_ARCH_HIP04)		+= irq-hip04.o
>>>>   obj-$(CONFIG_ARCH_LPC32XX)		+= irq-lpc32xx.o
>>>> diff --git a/drivers/irqchip/irq-owl-sirq.c b/drivers/irqchip/irq-owl-sirq.c
>>>> new file mode 100644
>>>> index 000000000000..b69301388300
>>>> --- /dev/null
>>>> +++ b/drivers/irqchip/irq-owl-sirq.c
>>>> @@ -0,0 +1,305 @@
>>>> +// SPDX-License-Identifier: GPL-2.0+
>>>> +/*
>>>> + *
>>>> + * Actions Semi Owl SoCs SIRQ interrupt controller driver
>>>> + *
>>>> + * Copyright (C) 2014 Actions Semi Inc.
>>>> + * David Liu <liuwei@actions-semi.com>
>>>> + *
>>>> + * Author: Parthiban Nallathambi <pn@denx.de>
>>>> + * Author: Saravanan Sekar <sravanhome@gmail.com>
>>>> + */
>>>> +
>>>> +#include <linux/interrupt.h>
>>>> +#include <linux/irqchip.h>
>>>> +#include <linux/of_irq.h>
>>>> +#include <linux/of_address.h>
>>>> +
>>>> +#include <dt-bindings/interrupt-controller/arm-gic.h>
>>>> +
>>>> +#define INTC_GIC_INTERRUPT_PIN		13
>>>
>>> Why isn't that coming from the DT?
>>
>> DT numbering is taken irqchip local, by which hwirq is directly used to
>> calculate the offset into register when it is shared. Even if this is
>> directly from DT, I need the value to offset into the register. So maintianed
>> inside the driver.
> 
> This is normally shown as a property from DT, and is relative to the
> parent irqchip. And I don't understand what you mean by "offset into the
> register". The only use of this is to allocate the corresponding GIC

We have two SoC's (s500, s700) with shared external interrupt control
register and one (s900) with dedicated register for each external
interrupt line. So the DT property "actions,sirq-offset" was introduced
to access the register.

In case of s500, s700 when it's shared, the idea is to use the "hwirq"
variable value to offset into the control register INTC_EXTCTL. Even if
3 cell GIC value is directly used like

interrupts = <GIC_SPI 2 IRQ_TYPE_LEVEL_HIGH>;

then hwirq - 13 is needed internally everywhere in this driver.

In short, this value is defined inside driver for the ease of referring
the offset with the register.

Yes, it is possible to change the driver logic and use 3 cell interrupts
from DT.

> interrupt, and this definitely shouldn't be harcoded.
> 
>>
>> Should it make sense to move it to DT and use another macro (different name)
>> for offsetting?
>>
>>>
>>>> +#define INTC_EXTCTL_PENDING		BIT(0)
>>>> +#define INTC_EXTCTL_CLK_SEL		BIT(4)
>>>> +#define INTC_EXTCTL_EN			BIT(5)
>>>> +#define	INTC_EXTCTL_TYPE_MASK		GENMASK(6, 7)
>>>> +#define	INTC_EXTCTL_TYPE_HIGH		0
>>>> +#define	INTC_EXTCTL_TYPE_LOW		BIT(6)
>>>> +#define	INTC_EXTCTL_TYPE_RISING		BIT(7)
>>>> +#define	INTC_EXTCTL_TYPE_FALLING	(BIT(6) | BIT(7))
>>>> +
>>>> +#define get_sirq_offset(x)	chip_data->sirq[x].offset
>>>> +
>>>> +/* Per SIRQ data */
>>>> +struct owl_sirq {
>>>> +	u16 offset;
>>>> +	/* software is responsible to clear interrupt pending bit when
>>>> +	 * type is edge triggered. This value is for per SIRQ line.
>>>> +	 */
>>>
>>> Please follow the normal multi-line comment style:
>>>
>>> /*
>>>   * This is a comment, starting with a capital letter and ending with
>>>   * a full stop.
>>>   */
>>
>> Sure, thanks.
>>
>>>
>>>> +	bool type_edge;
>>>> +};
>>>> +
>>>> +struct owl_sirq_chip_data {
>>>> +	void __iomem *base;
>>>> +	raw_spinlock_t lock;
>>>> +	/* some SoC's share the register for all SIRQ lines, so maintain
>>>> +	 * register is shared or not here. This value is from DT.
>>>> +	 */
>>>> +	bool shared_reg;
>>>> +	struct owl_sirq *sirq;
>>>
>>> Given that this driver handles at most 3 interrupts, do we need the
>>> overhead of a pointer and an additional allocation, while we could store
>>> all of this data in the space taken by the pointer itself?
>>>
>>> Something like:
>>>
>>> 	u16 offset[3];
>>> 	u8  trigger; // Bit mask indicating edge-triggered interrupts
>>>
>>> and we're done.
>>
>> Sure, I will modify with one allocation.
>>
>>>
>>>> +};
>>>> +
>>>> +static struct owl_sirq_chip_data *sirq_data;
>>>> +
>>>> +static unsigned int sirq_read_extctl(struct irq_data *data)
>>>
>>> Why isn't this taking a struct owl_sirq_chip_data as a parameter instead
>>> of always passing irq_data?
>>>
>>> Also, this should return a well defined size, which "unsigned int"
>>> isn't. Make that u32.
>>
>> Sure, will adapt this.
>>
>>>
>>>> +{
>>>> +	struct owl_sirq_chip_data *chip_data = data->chip_data;
>>>> +	unsigned int val;
>>>
>>> u32;
>>
>> Sure.
>>
>>>
>>>> +
>>>> +	val = readl_relaxed(chip_data->base + get_sirq_offset(data->hwirq));
>>>> +	if (chip_data->shared_reg)
>>>> +		val = (val >> (2 - data->hwirq) * 8) & 0xff;
>>>> +
>>>> +	return val;
>>>> +}
>>>> +
>>>> +static void sirq_write_extctl(struct irq_data *data, unsigned int extctl)
>>>
>>> Same comments.
>>
>> Sure.
>>
>>>
>>>> +{
>>>> +	struct owl_sirq_chip_data *chip_data = data->chip_data;
>>>> +	unsigned int val;
>>>
>>> u32;
>>
>> Sure.
>>
>>>
>>>> +
>>>> +	if (chip_data->shared_reg) {
>>>> +		val = readl_relaxed(chip_data->base +
>>>> +				get_sirq_offset(data->hwirq));
>>>
>>> Single line, please.
>>
>> Sure.
>>
>>>
>>>> +		val &= ~(0xff << (2 - data->hwirq) * 8);
>>>> +		extctl &= 0xff;
>>>> +		extctl = (extctl << (2 - data->hwirq) * 8) | val;
>>>> +	}
>>>> +
>>>> +	writel_relaxed(extctl, chip_data->base +
>>>> +			get_sirq_offset(data->hwirq));
>>>
>>> Single line.
>>
>> Sure.
>>
>>>
>>>> +}
>>>> +
>>>> +static void owl_sirq_ack(struct irq_data *data)
>>>> +{
>>>> +	struct owl_sirq_chip_data *chip_data = data->chip_data;
>>>> +	unsigned int extctl;
>>>> +	unsigned long flags;
>>>> +
>>>> +	/* software must clear external interrupt pending, when interrupt type
>>>> +	 * is edge triggered, so we need per SIRQ based clearing.
>>>> +	 */
>>>> +	if (chip_data->sirq[data->hwirq].type_edge) {
>>>> +		raw_spin_lock_irqsave(&chip_data->lock, flags);
>>>> +
>>>> +		extctl = sirq_read_extctl(data);
>>>> +		extctl |= INTC_EXTCTL_PENDING;
>>>> +		sirq_write_extctl(data, extctl);
>>>> +
>>>> +		raw_spin_unlock_irqrestore(&chip_data->lock, flags);
>>>
>>> It would make a lot more sense if the lock was taken inside the accessor
>>> so that the rest of the driver doesn't have to deal with it. Something
>>> along of the line of:
>>>
>>> static void sirq_clear_set_extctl(struct owl_sirq_chip_data *d,
>>>                                    u32 clear, u32 set)
>>> {
>>> 	unsigned long flags;
>>> 	u32 val;
>>>
>>> 	raw_spin_lock_irqsave(&d->lock, flags);
>>> 	val = sirq_read_extctl(d);
>>> 	val &= ~clear;
>>> 	val |= set;
>>> 	sirq_write_extctl(d, val);
>>> 	raw_spin_unlock_irqrestore(&d->lock, flags)
>>> }
>>>
>>> And use that throughout the driver.
>>
>> Thanks for sharing the function with lock, will update it.
>>
>>>
>>>> +	}
>>>> +	irq_chip_ack_parent(data);
>>>
>>> That being said, I'm terribly sceptical about this whole function. At
>>> the end of the day, the flow handler used by the GIC is
>>> handle_fasteoi_irq, which doesn't call the ack callback at all. So how
>>> does this work?
>>
>> That's my mistake. I will move this function for ".irq_eoi". Will that be fine?
>> In short, all the devices/interrupt controller connected to sirq lines are level
>> triggered in my board. So, I couldn't test this part last time.
> 
> If you don't have any way to test it, is it worth it to have that code
> in? I'd prefer you add code that actually works, even if that's for a
> subset of the capability of the HW, rather than add code that cannot be
> exercised.

Ok, it wasn't case now. I have the hardware connected on these lines and
tested ok with the implementation moved to .irq.eoi.

> 
>>
>>>
>>>> +}
>>>> +
>>>> +static void owl_sirq_mask(struct irq_data *data)
>>>> +{
>>>> +	struct owl_sirq_chip_data *chip_data = data->chip_data;
>>>> +	unsigned int extctl;
>>>> +	unsigned long flags;
>>>> +
>>>> +	raw_spin_lock_irqsave(&chip_data->lock, flags);
>>>> +
>>>> +	extctl = sirq_read_extctl(data);
>>>> +	extctl &= ~(INTC_EXTCTL_EN);
>>>> +	sirq_write_extctl(data, extctl);
>>>> +
>>>> +	raw_spin_unlock_irqrestore(&chip_data->lock, flags);
>>>> +	irq_chip_mask_parent(data);
>>>> +}
>>>> +
>>>> +static void owl_sirq_unmask(struct irq_data *data)
>>>> +{
>>>> +	struct owl_sirq_chip_data *chip_data = data->chip_data;
>>>> +	unsigned int extctl;
>>>> +	unsigned long flags;
>>>> +
>>>> +	raw_spin_lock_irqsave(&chip_data->lock, flags);
>>>> +
>>>> +	extctl = sirq_read_extctl(data);
>>>> +	extctl |= INTC_EXTCTL_EN;
>>>> +	sirq_write_extctl(data, extctl);
>>>> +
>>>> +	raw_spin_unlock_irqrestore(&chip_data->lock, flags);
>>>> +	irq_chip_unmask_parent(data);
>>>> +}
>>>> +
>>>> +/* PAD_PULLCTL needs to be defined in pinctrl */
>>>> +static int owl_sirq_set_type(struct irq_data *data, unsigned int flow_type)
>>>> +{
>>>> +	struct owl_sirq_chip_data *chip_data = data->chip_data;
>>>> +	unsigned int extctl, type;
>>>> +	unsigned long flags;
>>>> +
>>>> +	switch (flow_type) {
>>>> +	case IRQF_TRIGGER_LOW:
>>>> +		type = INTC_EXTCTL_TYPE_LOW;
>>>> +		break;
>>>> +	case IRQF_TRIGGER_HIGH:
>>>> +		type = INTC_EXTCTL_TYPE_HIGH;
>>>> +		break;
>>>> +	case IRQF_TRIGGER_FALLING:
>>>> +		type = INTC_EXTCTL_TYPE_FALLING;
>>>> +		chip_data->sirq[data->hwirq].type_edge = true;
>>>> +		break;
>>>> +	case IRQF_TRIGGER_RISING:
>>>> +		type = INTC_EXTCTL_TYPE_RISING;
>>>> +		chip_data->sirq[data->hwirq].type_edge = true;
>>>> +		break;
>>>
>>> So let's say I configure an interrupt as edge, then switch it to level.
>>> The edge setting remains and bad things will happen.
>>
>> Ok, I will update the value to false for edge cases.
>>
>>>
>>>> +	default:
>>>> +		return  -EINVAL;
>>>> +	}
>>>> +
>>>> +	raw_spin_lock_irqsave(&chip_data->lock, flags);
>>>> +
>>>> +	extctl = sirq_read_extctl(data);
>>>> +	extctl &= ~INTC_EXTCTL_TYPE_MASK;
>>>> +	extctl |= type;
>>>> +	sirq_write_extctl(data, extctl);
>>>> +
>>>> +	raw_spin_unlock_irqrestore(&chip_data->lock, flags);
>>>> +	data = data->parent_data;
>>>> +	return irq_chip_set_type_parent(data, flow_type);
>>>> +}
>>>> +
>>>> +static struct irq_chip owl_sirq_chip = {
>>>> +	.name		= "owl-sirq",
>>>> +	.irq_ack	= owl_sirq_ack,
>>>> +	.irq_mask	= owl_sirq_mask,
>>>> +	.irq_unmask	= owl_sirq_unmask,
>>>> +	.irq_set_type	= owl_sirq_set_type,
>>>> +	.irq_eoi	= irq_chip_eoi_parent,
>>>> +	.irq_retrigger	= irq_chip_retrigger_hierarchy,
>>>> +};
>>>> +
>>>> +static int owl_sirq_domain_alloc(struct irq_domain *domain, unsigned int virq,
>>>> +				 unsigned int nr_irqs, void *arg)
>>>> +{
>>>> +	struct irq_fwspec *fwspec = arg;
>>>> +	struct irq_fwspec parent_fwspec = {
>>>> +		.param_count	= 3,
>>>> +		.param[0]	= GIC_SPI,
>>>> +		.param[1]	= fwspec->param[0] + INTC_GIC_INTERRUPT_PIN,
>>>> +		.param[2]	= fwspec->param[1],
>>>
>>> param[2] is supposed to be the trigger configuration. Your driver
>>> supports LEVEL_LOW and EDGE_FALLING, which the GIC cannot handle. And
>>> yet you're passing it directly.
>>
>> That's my mistake. I will translate and restrict LEVEL_HIGH and EDGE_RISING
>> for GIC here. Thanks.
>>
>>>
>>>> +		.fwnode		= domain->parent->fwnode,
>>>> +	};
>>>> +
>>>> +	if (WARN_ON(nr_irqs != 1))
>>>> +		return -EINVAL;
>>>> +
>>>> +	irq_domain_set_hwirq_and_chip(domain, virq, fwspec->param[0],
>>>> +				      &owl_sirq_chip,
>>>> +				      domain->host_data);
>>>> +
>>>> +	return irq_domain_alloc_irqs_parent(domain, virq, nr_irqs,
>>>> +					    &parent_fwspec);
>>>> +}
>>>> +
>>>> +static const struct irq_domain_ops sirq_domain_ops = {
>>>> +	.alloc	= owl_sirq_domain_alloc,
>>>> +	.free	= irq_domain_free_irqs_common,
>>>
>>> No translation method? Again, how does this work?
>>
>> Missed this part, I will update this next version.
>>
>>>
>>>> +};
>>>> +
>>>> +static void owl_sirq_clk_init(int offset, int hwirq)
>>>> +{
>>>> +	unsigned int val;
>>>> +
>>>> +	/* register default clock is 32Khz, change to 24Mhz only when defined */
>>>> +	val = readl_relaxed(sirq_data->base + offset);
>>>> +	if (sirq_data->shared_reg)
>>>> +		val |= INTC_EXTCTL_CLK_SEL << (2 - hwirq) * 8;
>>>> +	else
>>>> +		val |= INTC_EXTCTL_CLK_SEL;
>>>> +
>>>> +	writel_relaxed(val, sirq_data->base + offset);
>>>> +}
>>>
>>> I've asked questions about this in the first review, and you didn't
>>> answer. Why is it even configurable? How do you choose the sample rate?
>>> What's the drawback of always setting it one way or the other?
>>
>> The provision for selecting sampling rate here seems meant for power
>> management, which I wasn't aware of. So this configuration doesn't need
>> to come from DT.
>>
>> Possibly this needs to be implemented as "syscore_ops" suspend and resume
>> calls. Should I register this as "register_syscore_ops" or leaving 32MHz
>> is fine?
> 
> I think this should be entirely hidden from the interrupt controller,
> and set by firmware or by the platform clock setup.

Agreed!

> 
>>
>>>
>>>> +
>>>> +static int __init owl_sirq_of_init(struct device_node *node,
>>>> +					struct device_node *parent)
>>>> +{
>>>> +	struct irq_domain *domain, *domain_parent;
>>>> +	int ret = 0, i, sirq_cnt = 0;
>>>> +	struct owl_sirq_chip_data *chip_data;
>>>> +
>>>> +	sirq_cnt = of_property_count_u32_elems(node, "actions,sirq-offset");
>>>> +	if (sirq_cnt <= 0) {
>>>> +		pr_err("owl_sirq: register offset not specified\n");
>>>> +		return -EINVAL;
>>>> +	}
>>>> +
>>>> +	chip_data = kzalloc(sizeof(*chip_data), GFP_KERNEL);
>>>> +	if (!chip_data)
>>>> +		return -ENOMEM;
>>>> +	sirq_data = chip_data;
>>>> +
>>>> +	chip_data->sirq = kcalloc(sirq_cnt, sizeof(*chip_data->sirq),
>>>> +				GFP_KERNEL);
>>>> +	if (!chip_data->sirq)
>>>> +		goto out_free;
>>>> +
>>>> +	raw_spin_lock_init(&chip_data->lock);
>>>> +	chip_data->base = of_iomap(node, 0);
>>>> +	if (!chip_data->base) {
>>>> +		pr_err("owl_sirq: unable to map sirq register\n");
>>>> +		ret = -ENXIO;
>>>> +		goto out_free;
>>>> +	}
>>>> +
>>>> +	chip_data->shared_reg = of_property_read_bool(node,
>>>> +						"actions,sirq-shared-reg");
>>>> +	for (i = 0; i < sirq_cnt; i++) {
>>>> +		u32 value;
>>>> +
>>>> +		ret = of_property_read_u32_index(node, "actions,sirq-offset",
>>>> +						i, &value);
>>>> +		if (ret)
>>>> +			goto out_unmap;
>>>> +
>>>> +		get_sirq_offset(i) = (u16)value;
>>>> +
>>>> +		ret = of_property_read_u32_index(node, "actions,sirq-clk-sel",
>>>> +						i, &value);
>>>> +		if (ret || !value)
>>>> +			continue;
>>>> +
>>>> +		/* external interrupt controller can be either connect to 32Khz/
>>>> +		 * 24Mhz external/internal clock. This shall be configured for
>>>> +		 * per SIRQ line. It can be defined from DT, failing defaults to
>>>> +		 * 24Mhz clock.
>>>> +		 */
>>>> +		owl_sirq_clk_init(get_sirq_offset(i), i);
>>>> +	}
>>>> +
>>>> +	domain_parent = irq_find_host(parent);
>>>> +	if (!domain_parent) {
>>>> +		pr_err("owl_sirq: interrupt-parent not found\n");
>>>> +		goto out_unmap;
>>>> +	}
>>>> +
>>>> +	domain = irq_domain_add_hierarchy(domain_parent, 0,
>>>> +			sirq_cnt, node,
>>>> +			&sirq_domain_ops, chip_data);
>>>> +	if (!domain) {
>>>> +		ret = -ENOMEM;
>>>> +		goto out_unmap;
>>>> +	}
>>>> +
>>>> +	return 0;
>>>> +
>>>> +out_unmap:
>>>> +	iounmap(chip_data->base);
>>>> +out_free:
>>>> +	kfree(chip_data);
>>>> +	kfree(chip_data->sirq);
>>>> +	return ret;
>>>> +}
>>>> +
>>>> +IRQCHIP_DECLARE(owl_sirq, "actions,owl-sirq", owl_sirq_of_init);
>>>>
>>>
>>> As it stands, this driver is nowhere near ready. I don't even understand
>>> how edge signalling works. Also, I'd appreciate if you could answer my
>>> comments before respining another version.
>>
>> As the previous version wasn't based on hierarchy, which I was working on
>> after your feedback. Apologize!
> 
> I must say I've lost track of this driver a while ago. Can you please
> send whatever you have come up with, and we'll take it from there.

Sure, there is one thing changed, tested the eoi part with the PMIC
connected on this interrupt line and it works.

Should I send v3 using 3 interrupt cells and re-define the usage of
hwirq to offsetting?

Thanks,
Parthi

> 
> Thanks,
> 
> 	M.
> 
