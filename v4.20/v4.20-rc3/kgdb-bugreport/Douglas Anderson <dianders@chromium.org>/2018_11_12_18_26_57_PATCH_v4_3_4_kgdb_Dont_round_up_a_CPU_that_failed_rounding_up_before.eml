Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 13 Nov 2018 00:33:52 -0000
Received: from icoremail.net (unknown [209.85.210.170])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH347xulbymd_AQ--.38593S3;
	Tue, 13 Nov 2018 02:28:12 +0800 (CST)
Received: from mail-pf1-f170.google.com (unknown [209.85.210.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAX+UQ4xulbVFYzAA--.4377S3;
	Tue, 13 Nov 2018 02:28:08 +0800 (CST)
Received: by mail-pf1-f170.google.com with SMTP id d13-v6so4716774pfo.3
        for <xuliker@zju.edu.cn>; Mon, 12 Nov 2018 10:28:08 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :date:message-id:in-reply-to:references:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=gIC8YvIzJSpzRaEWbDUMtgPUQN1L7oxCLhTdrA/N/SM=;
        b=DGRyzD5gKXL7vc+I1WuN3ITb3MNjHJhTAsx83EqNFpRHy+xpd757P78g3573yBDWuM
         4T+rE5CKkkL2mv2T+DsPoTPuJ3ZoGI8TvOKIs1hRA+SqBNrEDH3L1X7FeeUaKbPhXhM7
         Uw+3i3yijsy2L56Hys7D0Mn6aLaPJL20CVD6sgO85BxO1qKuE8qkSQcwfLQhddY+iCU6
         qlPPRmln+OSXyxWMeCh9FJxRlfCA6oGtEdYqmpNGWllZewBKeto4qjJko57LsSEEGZD1
         A3bLGUR82JJFplEj7L2XYpvBVqxfSyO/XRRCMlCxdn9+ftP5WjqI/pI+6z8oT3WWU7Fd
         ZElg==
X-Gm-Message-State: AGRZ1gLNVeGzyZKLrd4jm+Rpm91rgjv+aVmubwM1+/6PDc7JDg+x7rTo
	8WVMEfGHrcniNxTWFDXV6nD52F78j3HentamW/lhZ9+z5fQjn4/eqw==
X-Received: by 2002:a63:460a:: with SMTP id t10-v6mr1760351pga.197.1542047287935;
        Mon, 12 Nov 2018 10:28:07 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp3527522pjt;
        Mon, 12 Nov 2018 10:28:07 -0800 (PST)
X-Google-Smtp-Source: AJdET5d5vVEwtf5RG+qE65vJZoUGULsSc1Yhi+oUQKIBfhNEYOfBluLaV6WKVlYJwy4qWVfjJ/m3
X-Received: by 2002:a17:902:24c:: with SMTP id 70-v6mr1875207plc.120.1542047287017;
        Mon, 12 Nov 2018 10:28:07 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542047286; cv=none;
        d=google.com; s=arc-20160816;
        b=ohNLgLjTh08PxOghI0k/rSLMM6Rdtc68N7jtyH0Muj75kkVnppQ9vNhoZYyMRBvn/d
         ABbnZpIMm/o/b/1sm+wTRdlPn8lZsliEbGHnvYVXE8jLhnQaCXlBokCUrfgP+hiH3gn9
         NJanLACFeacUxevotzgo5mljfaLB0+EHhOcNpIbE8YePExMX//nE4dw6KCEFEmPZSxqx
         7fnxQcxLyQBHyCIs0wontfrn6afWh9OE09PI7pewTiEAoNg9oXfR+/OdpgdMU2x3bKvd
         ClNRRbfsiy4Jf2ohYKkmCHbpxzSdGIA1P4jbvChKyqGyBIUKxb1A8MfKcV2jv99ZvTNz
         FfOA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:date:subject:cc:to:from
         :dkim-signature;
        bh=gIC8YvIzJSpzRaEWbDUMtgPUQN1L7oxCLhTdrA/N/SM=;
        b=vGOYkTbklusbj2tZH2eRcDyoJZ8KXb/YSnmshx5YSfG+c5VECJFRwjuXh2i2YHdmBS
         4wln9VHL+TG5DdGDCLLqMkHoXCYHuHGHRC8BYvpv54hGrbfpKvxFB8bdtwydjiawK66E
         5VMmwsnPkCHusmibWdukguuRSu0E7lSrc1GVvMgaaH2rXK/G2dLXGhzlxBQvb8Hze+oe
         t6FWPlB7jWJAVRnAWxwWIZoZ2q61zv3eHumGbUcKufvNVKZVGfuciUFRzeob90ZbP7LF
         Hpj43BYThNhEXHgjVaI1t1xyzj+QEeH87CwtRWqmcavc5dZP732Q4Gv0IfByA09uZ+87
         gCpQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@chromium.org header.s=google header.b=hRMRhXcV;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=chromium.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id l6si8805496pgg.592.2018.11.12.10.27.52;
        Mon, 12 Nov 2018 10:28:06 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730323AbeKMEVq (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Mon, 12 Nov 2018 23:21:46 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:40850 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727354AbeKMEVp (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 23:21:45 -0500
Received: by mail-pf1-f196.google.com with SMTP id x2-v6so4704674pfm.7
        for <linux-kernel@vger.kernel.org>; Mon, 12 Nov 2018 10:27:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=gIC8YvIzJSpzRaEWbDUMtgPUQN1L7oxCLhTdrA/N/SM=;
        b=hRMRhXcVkiEBv7HgJtyLDXwNwfuYFyGEWi6Bkihmd5pbCBwNrpHZFm6y+IaPIh4LNp
         tfia1Q10O1b+a8BjJiQr609Eh5kqGMLH186EovOiQhzcG2qVETnkZJywbjqSsnHgYmmZ
         Qc8Nz0rdE4GDiUpLyWfh1PnTV5IMQ0iC6Xbz4=
X-Received: by 2002:a63:2f86:: with SMTP id v128mr1675599pgv.407.1542047240719;
        Mon, 12 Nov 2018 10:27:20 -0800 (PST)
Received: from tictac2.mtv.corp.google.com ([2620:15c:202:1:c8e0:70d7:4be7:a36])
        by smtp.gmail.com with ESMTPSA id o86-v6sm18813100pfk.8.2018.11.12.10.27.19
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 12 Nov 2018 10:27:20 -0800 (PST)
From: Douglas Anderson <dianders@chromium.org>
To: Jason Wessel <jason.wessel@windriver.com>,
        Daniel Thompson <daniel.thompson@linaro.org>
Cc: kgdb-bugreport@lists.sourceforge.net,
        Peter Zijlstra <peterz@infradead.org>,
        Douglas Anderson <dianders@chromium.org>,
        linux-kernel@vger.kernel.org
Subject: [PATCH v4 3/4] kgdb: Don't round up a CPU that failed rounding up before
Date: Mon, 12 Nov 2018 10:26:57 -0800
Message-Id: <20181112182659.245726-4-dianders@chromium.org>
X-Mailer: git-send-email 2.19.1.930.g4563a0d9d0-goog
In-Reply-To: <20181112182659.245726-1-dianders@chromium.org>
References: <20181112182659.245726-1-dianders@chromium.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAX+UQ4xulbVFYzAA--.4377S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxGw15GrW7CFW3XFyUWF45Jrb_yoWrKF17pw
	s0gF1YyFWDJr4fZwn7Aw4Ig34av395Jay3JFyrZ3s3A398JF1rJr1kt34jv3WDuw4fKrya
	vF45X3s3KryjyFDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPqb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Cr1j6rxdM28EF7xvwVC2z280aVCY1x0267AKxVWxJr0_GcWle2I262IYc4
	CY6c8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_
	JrI_JrylYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x
	0EwIxGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44l
	c2xSY4AK6IIF6rylc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r4j6ryUMx
	vI42IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1l
	cIIF0xvEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4
	C26cxK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E
	14v26r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIx
	kGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r4j6FyUYxBIdaVFxhVjvjDU0xZFpf9x
	07b9a0dUUUUU=

If we're using the default implementation of kgdb_roundup_cpus() that
uses smp_call_function_single_async() we can end up hanging
kgdb_roundup_cpus() if we try to round up a CPU that failed to round
up before.

Specifically smp_call_function_single_async() will try to wait on the
csd lock for the CPU that we're trying to round up.  If the previous
round up never finished then that lock could still be held and we'll
just sit there hanging.

There's not a lot of use trying to round up a CPU that failed to round
up before.  Let's keep a flag that indicates whether the CPU started
but didn't finish to round up before.  If we see that flag set then
we'll skip the next round up.

In general we have a few goals here:
- We never want to end up calling smp_call_function_single_async()
  when the csd is still locked.  This is accomplished because
  flush_smp_call_function_queue() unlocks the csd _before_ invoking
  the callback.  That means that when kgdb_nmicallback() runs we know
  for sure the the csd is no longer locked.  Thus when we set
  "rounding_up = false" we know for sure that the csd is unlocked.
- If there are no timeouts rounding up we should never skip a round
  up.

NOTE #1: In general trying to continue running after failing to round
up CPUs doesn't appear to be supported in the debugger.  When I
simulate this I find that kdb reports "Catastrophic error detected"
when I try to continue.  I can overrule and continue anyway, but it
should be noted that we may be entering the land of dragons here.
Possibly the "Catastrophic error detected" was added _because_ of the
future failure to round up, but even so this is an area of the code
that hasn't been strongly tested.

NOTE #2: I did a bit of testing before and after this change.  I
introduced a 10 second hang in the kernel while holding a spinlock
that I could invoke on a certain CPU with 'taskset -c 3 cat /sys/...".

Before this change if I did:
- Invoke hang
- Enter debugger
- g (which warns about Catastrophic error, g again to go anyway)
- g
- Enter debugger

...I'd hang the rest of the 10 seconds without getting a debugger
prompt.  After this change I end up in the debugger the 2nd time after
only 1 second with the standard warning about 'Timed out waiting for
secondary CPUs.'

I'll also note that once the CPU finished waiting I could actually
debug it (aka "btc" worked)

I won't promise that everything works perfectly if the errant CPU
comes back at just the wrong time (like as we're entering or exiting
the debugger) but it certainly seems like an improvement.

NOTE #3: setting 'kgdb_info[cpu].rounding_up = false' is in
kgdb_nmicallback() instead of kgdb_call_nmi_hook() because some
implementations override kgdb_call_nmi_hook().  It shouldn't hurt to
have it in kgdb_nmicallback() in any case.

NOTE #4: this logic is really only needed because there is no API call
like "smp_try_call_function_single_async()" or "smp_csd_is_locked()".
If such an API existed then we'd use it instead, but it seemed a bit
much to add an API like this just for kgdb.

Signed-off-by: Douglas Anderson <dianders@chromium.org>
---

Changes in v4:
- Removed smp_mb() calls.

Changes in v3:
- Don't round up a CPU that failed rounding up before new for v3.

Changes in v2: None

 kernel/debug/debug_core.c | 15 +++++++++++++++
 kernel/debug/debug_core.h |  1 +
 2 files changed, 16 insertions(+)

diff --git a/kernel/debug/debug_core.c b/kernel/debug/debug_core.c
index 23f2b5613afa..7e2f312fb41f 100644
--- a/kernel/debug/debug_core.c
+++ b/kernel/debug/debug_core.c
@@ -246,6 +246,19 @@ void __weak kgdb_roundup_cpus(void)
 			continue;
 
 		csd = &per_cpu(kgdb_roundup_csd, cpu);
+
+		/*
+		 * If it didn't round up last time, don't try again
+		 * since smp_call_function_single_async() will block.
+		 *
+		 * If rounding_up is false then we know that the
+		 * previous call must have at least started and that
+		 * means smp_call_function_single_async() won't block.
+		 */
+		if (kgdb_info[cpu].rounding_up)
+			continue;
+		kgdb_info[cpu].rounding_up = true;
+
 		csd->func = kgdb_call_nmi_hook;
 		smp_call_function_single_async(cpu, csd);
 	}
@@ -782,6 +795,8 @@ int kgdb_nmicallback(int cpu, void *regs)
 	struct kgdb_state kgdb_var;
 	struct kgdb_state *ks = &kgdb_var;
 
+	kgdb_info[cpu].rounding_up = false;
+
 	memset(ks, 0, sizeof(struct kgdb_state));
 	ks->cpu			= cpu;
 	ks->linux_regs		= regs;
diff --git a/kernel/debug/debug_core.h b/kernel/debug/debug_core.h
index 127d9bc49fb4..b4a7c326d546 100644
--- a/kernel/debug/debug_core.h
+++ b/kernel/debug/debug_core.h
@@ -42,6 +42,7 @@ struct debuggerinfo_struct {
 	int			ret_state;
 	int			irq_depth;
 	int			enter_kgdb;
+	bool			rounding_up;
 };
 
 extern struct debuggerinfo_struct kgdb_info[];
-- 
2.19.1.930.g4563a0d9d0-goog
