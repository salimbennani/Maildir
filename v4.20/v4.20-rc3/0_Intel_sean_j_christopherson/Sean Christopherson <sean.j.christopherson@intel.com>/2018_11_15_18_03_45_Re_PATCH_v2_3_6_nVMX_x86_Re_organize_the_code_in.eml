Return-Path: <kvm-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 16 Nov 2018 00:29:27 -0000
Received: from icoremail.net (unknown [209.85.215.169])
	by mail-app2 (Coremail) with SMTP id by_KCgCn33wZtu1bMe6bAQ--.46819S3;
	Fri, 16 Nov 2018 02:08:26 +0800 (CST)
Received: from mail-pg1-f169.google.com (unknown [209.85.215.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwC3nkoTtu1buRZFAA--.5942S3;
	Fri, 16 Nov 2018 02:08:19 +0800 (CST)
Received: by mail-pg1-f169.google.com with SMTP id t13so699797pgr.11
        for <xuliker@zju.edu.cn>; Thu, 15 Nov 2018 10:08:19 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent:sender:precedence
         :list-id;
        bh=vqAsDUozijvIkig8L05U7KautOlCFIW8W0dJDcCdZCM=;
        b=HLd7tgLeXXAZoBFhVhJhq7MAD0HMyF6Ifcf7YZucAFpNObz1e+MqRxz8MJYW77d57k
         f3Mkfm5he49FrteLLMkeZGLyjZ+ER4QEUihQEu+3Jo6HvuWyES1NtTbI7cQGwBOLSR+J
         AVDziBKbpuDkQhKYxmlyHn1xgtnBEDZRCokoMyobxPSwtxnaAGgQq/aWyrmyr3E28dpl
         fdpD3KY6toTSxi8wdZoxGm5x2srO3K4GF5cuhC7Q/Dt+UnImTmZSPVUZjwc/gTP2q2l+
         m3NjxcaXpfKfck4XEtGLqE1hGi8NvfgRnvjEXH61yCl6PCuyjWXJfO7jy+703uUxJjRi
         0uMg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of kvm-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=kvm-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
X-Gm-Message-State: AGRZ1gK3IicMekefSEIsQChOfB9hDgn/tD/zAdBA9JrV62Sdx8OzQV+o
	uSnJzKDDWDSurMhsz51Swd0kzglPJX9d46MT7YYvB3sRTb/diKSfpg==
X-Received: by 2002:a62:5e83:: with SMTP id s125-v6mr7436665pfb.232.1542305299284;
        Thu, 15 Nov 2018 10:08:19 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp892158pju;
        Thu, 15 Nov 2018 10:08:18 -0800 (PST)
X-Google-Smtp-Source: AJdET5cPJ/1oH59PDrZxiafwO88vqdu6bUIbMzZs4MiBF4qJyw59bL/nmQ6xu8Bd+LqCd7js3+0H
X-Received: by 2002:a63:cc12:: with SMTP id x18mr6685301pgf.33.1542305298208;
        Thu, 15 Nov 2018 10:08:18 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542305298; cv=none;
        d=google.com; s=arc-20160816;
        b=0fLH6x5miAENQnJSg9BJiXCPWYg5Z+M9CS+TgmATvAdyDsQ5Mg3jAuWvFUBxzayryP
         wiRhGWqXdRu7xOGI402gO8UNRnFTCJhWaWB5rLDFKtBKlEjZjX9jC9sAaNqf8mNib6YU
         +NKs0bHjnW5pxuNFLUrllFiZjTatpeAIaPBtNpZjgs04XdYBhodZ6d4EhMAjgpgVjhXm
         lAlDgc9tXz8lcxRX//IV2Plj4W4Ma05fjaKXtuoR9i7/6zjBH5fEVyxe3MfKz6iGkZLt
         xcdGu1qbNXQAAc+Y4NmAXE0z8lLCqI6nkCmiB8mPuOsPKOJF9diqj8aJhTq3ESPyLntD
         Apjw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date;
        bh=vqAsDUozijvIkig8L05U7KautOlCFIW8W0dJDcCdZCM=;
        b=bzPY1GiQh59dLgFTJnhSnZ5Z+qcueqyb3PQjrDTz/bZdMi7Sg0XfMCjeP713qxSsFs
         LCtMa0YVE/0smHN55O9pZKgnxxioRiSmLfJ+/lRskGBtnPRde4bvbzZd3BbV9WodunYq
         9V4AOONYifAZSqZwa6PAay8G6/L5ysZcmY/GrQzbdzMWA6/zDpUPK3rmAnn2PYYTAW8E
         SVc1OFvq8IYqmyXtz8PsbIIBtFBhn9xOMnR7/vhzyWktAagTioWy7VHdyUb8NcZelEHh
         oAIgQ6c1dlQPENcAZPO+RGCS4do/NnLbdbxFuXW5XSi0Oz+Ny2q3giXl4yV43p3UWuNP
         aA1g==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of kvm-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=kvm-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id b14si28644820pgj.20.2018.11.15.10.07.38;
        Thu, 15 Nov 2018 10:08:18 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of kvm-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388815AbeKPENH (ORCPT <rfc822;nodee764@gmail.com> + 99 others);
        Thu, 15 Nov 2018 23:13:07 -0500
Received: from mga04.intel.com ([192.55.52.120]:51007 "EHLO mga04.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726453AbeKPENH (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 15 Nov 2018 23:13:07 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from orsmga008.jf.intel.com ([10.7.209.65])
  by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Nov 2018 10:03:45 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,237,1539673200"; 
   d="scan'208";a="92359240"
Received: from sjchrist-coffee.jf.intel.com (HELO linux.intel.com) ([10.54.74.154])
  by orsmga008.jf.intel.com with ESMTP; 15 Nov 2018 10:03:45 -0800
Date: Thu, 15 Nov 2018 10:03:45 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: Krish Sadhukhan <krish.sadhukhan@oracle.com>
Cc: kvm@vger.kernel.org, pbonzini@redhat.com, jmattson@google.com,
        rkrcmar@redhat.com
Subject: Re: [PATCH v2 3/6] nVMX x86: Re-organize the code in
 check_vmentry_prereqs(), that are related to VM-Exit Control Fields
Message-ID: <20181115180344.GD7226@linux.intel.com>
References: <20181115054554.4831-1-krish.sadhukhan@oracle.com>
 <20181115054554.4831-4-krish.sadhukhan@oracle.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181115054554.4831-4-krish.sadhukhan@oracle.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-CM-TRANSID: AQAAfwC3nkoTtu1buRZFAA--.5942S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3JFyDXry8Ww4DXw13CF48JFb_yoWxAFWrp3
	y0q3Z0qrW8J3y3uwn7K3Z8CFySvr1kuF13JryYgrsYvwnI9Fy5Jryftr13JryjyrWvgw13
	ZFW0van3u3WjyFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_Gr1j6F4UJwA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Gr1j6F4UJwAS0I0E0x
	vYzxvE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AK
	xVWUXVWUAwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcV
	AKI48JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY
	02Avz4vEIxC_XwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Gr0_Xr1lcI
	IF0xvE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Cr0_Gr1UMxvI
	42IY6I8E87Iv6xkF7I0E14v26r4j6r4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26c
	xK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v2
	6r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2
	Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r1j6r1xYxBIdaVFxhVjvjDU0xZFpf9x07bP
	eHkUUUUU=

On Thu, Nov 15, 2018 at 12:45:51AM -0500, Krish Sadhukhan wrote:
> Separate out the checks in nested_check_vmentry_prereqs(), that are related to
> the VM-Exit Control Fields, to a separate function. The re-organized code is
> easier for readability, enhancement and maintenance.
> 
> Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
> Reviewed-by: Mihai Carabas <mihai.carabas@oracle.com>
> Reviewed-by: Mark Kanda <mark.kanda@oracle.com>
> ---
>  arch/x86/kvm/vmx.c | 32 ++++++++++++++++++++++++++------
>  1 file changed, 26 insertions(+), 6 deletions(-)
> 
> diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
> index 25eb74e..72bfc58 100644
> --- a/arch/x86/kvm/vmx.c
> +++ b/arch/x86/kvm/vmx.c
> @@ -11752,18 +11752,26 @@ static int nested_vmx_check_msr_switch(struct kvm_vcpu *vcpu,
>  	return 0;
>  }
>  
> -static int nested_vmx_check_msr_switch_controls(struct kvm_vcpu *vcpu,
> +static int nested_vmx_check_exit_msr_switch_controls(struct kvm_vcpu *vcpu,
>  						struct vmcs12 *vmcs12)
>  {
>  	if (vmcs12->vm_exit_msr_load_count == 0 &&
> -	    vmcs12->vm_exit_msr_store_count == 0 &&
> -	    vmcs12->vm_entry_msr_load_count == 0)
> +	    vmcs12->vm_exit_msr_store_count == 0)
>  		return 0; /* Fast path */
>  	if (nested_vmx_check_msr_switch(vcpu, VM_EXIT_MSR_LOAD_COUNT,
>  					VM_EXIT_MSR_LOAD_ADDR) ||
>  	    nested_vmx_check_msr_switch(vcpu, VM_EXIT_MSR_STORE_COUNT,
> -					VM_EXIT_MSR_STORE_ADDR) ||
> -	    nested_vmx_check_msr_switch(vcpu, VM_ENTRY_MSR_LOAD_COUNT,
> +					VM_EXIT_MSR_STORE_ADDR))
> +		return -EINVAL;
> +	return 0;
> +}
> +
> +static int nested_vmx_check_msr_switch_controls(struct kvm_vcpu *vcpu,
> +						struct vmcs12 *vmcs12)

Having both nested_vmx_check_exit_msr_switch_controls() and
nested_vmx_check_entry_msr_switch_controls() in addition to the higher
nested_check-vm_{exit,entr}_controls() and lower
nested_vmx_check_msr_switch() seems a bit silly, especially since the
point of the original code was to handle the case where all three lists
are empty.  Splitting the checks means the "Fast path" isn't really a
fast path and is simply redundant with nested_vmx_check_msr_switch().
And at that point I don't see why we'd still pass the field enums as
opposed to the field values.  So, what about simplifying
nested_vmx_check_msr_switch() in an earlier patch:

From 863424efe9dd9adda005c7502e92173fcc1e6bb4 Mon Sep 17 00:00:00 2001
From: Sean Christopherson <sean.j.christopherson@intel.com>
Date: Thu, 15 Nov 2018 09:55:05 -0800
Subject: [PATCH] KVM: nVMX: Remove param indirection from
 nested_vmx_check_msr_switch()

Passing the enum and doing an indirect lookup is silly when we can
simply pass the field directly.  Remove the "fast path" code in
nested_vmx_check_msr_switch_controls() as it's now nothing more than a
redundant check.

Remove the debug message rather than continue passing the enum for the
address field.  Having debug messages for the MSRs themselves is useful
as MSR legality is a huge space, whereas messing up a physical address
means the VMM is fundamentally broken.

Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
---
 arch/x86/kvm/vmx.c | 32 ++++++++------------------------
 1 file changed, 8 insertions(+), 24 deletions(-)

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 4555077d69ce..cbd4d4a8b80d 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -12221,44 +12221,28 @@ static int nested_vmx_check_apicv_controls(struct kvm_vcpu *vcpu,
 }

 static int nested_vmx_check_msr_switch(struct kvm_vcpu *vcpu,
-                                      unsigned long count_field,
-                                      unsigned long addr_field)
+                                      u32 count, u64 addr)
 {
-       struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
        int maxphyaddr;
-       u64 count, addr;

-       if (vmcs12_read_any(vmcs12, count_field, &count) ||
-           vmcs12_read_any(vmcs12, addr_field, &addr)) {
-               WARN_ON(1);
-               return -EINVAL;
-       }
        if (count == 0)
                return 0;
        maxphyaddr = cpuid_maxphyaddr(vcpu);
        if (!IS_ALIGNED(addr, 16) || addr >> maxphyaddr ||
-           (addr + count * sizeof(struct vmx_msr_entry) - 1) >> maxphyaddr) {
-               pr_debug_ratelimited(
-                       "nVMX: invalid MSR switch (0x%lx, %d, %llu, 0x%08llx)",
-                       addr_field, maxphyaddr, count, addr);
+           (addr + count * sizeof(struct vmx_msr_entry) - 1) >> maxphyaddr)
                return -EINVAL;
-       }
        return 0;
 }

 static int nested_vmx_check_msr_switch_controls(struct kvm_vcpu *vcpu,
                                                struct vmcs12 *vmcs12)
 {
-       if (vmcs12->vm_exit_msr_load_count == 0 &&
-           vmcs12->vm_exit_msr_store_count == 0 &&
-           vmcs12->vm_entry_msr_load_count == 0)
-               return 0; /* Fast path */
-       if (nested_vmx_check_msr_switch(vcpu, VM_EXIT_MSR_LOAD_COUNT,
-                                       VM_EXIT_MSR_LOAD_ADDR) ||
-           nested_vmx_check_msr_switch(vcpu, VM_EXIT_MSR_STORE_COUNT,
-                                       VM_EXIT_MSR_STORE_ADDR) ||
-           nested_vmx_check_msr_switch(vcpu, VM_ENTRY_MSR_LOAD_COUNT,
-                                       VM_ENTRY_MSR_LOAD_ADDR))
+       if (nested_vmx_check_msr_switch(vcpu, vmcs12->vm_exit_msr_load_count,
+                                       vmcs12->vm_exit_msr_load_addr) ||
+           nested_vmx_check_msr_switch(vcpu, vmcs12->vm_exit_msr_store_count,
+                                       vmcs12->vm_exit_msr_store_addr) ||
+           nested_vmx_check_msr_switch(vcpu, vmcs12->vm_entry_msr_load_count,
+                                       vmcs12->vm_entry_msr_load_addr))
                return -EINVAL;
        return 0;
 }
--
2.19.1

> +{
> +	if (vmcs12->vm_entry_msr_load_count == 0)
> +		return 0; /* Fast path */
> +	if (nested_vmx_check_msr_switch(vcpu, VM_ENTRY_MSR_LOAD_COUNT,
>  					VM_ENTRY_MSR_LOAD_ADDR))
>  		return -EINVAL;
>  	return 0;
> @@ -12432,13 +12440,25 @@ static int nested_check_vm_execution_ctls(struct kvm_vcpu *vcpu, struct vmcs12 *
>  	return 0;
>  }
>  
> +/*
> + * Checks related to VM-Exit Control Fields
> + */
> +static int nested_check_vm_exit_ctls(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12)

Same comment as the previous patch, spell out "controls" and wrap.

> +{
> +	if (nested_vmx_check_exit_msr_switch_controls(vcpu, vmcs12))
> +		return -EINVAL;
> +
> +	return 0;
> +}
> +
>  static int nested_check_vmentry_prereqs(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12)
>  {
>  	if (vmcs12->guest_activity_state != GUEST_ACTIVITY_ACTIVE &&
>  	    vmcs12->guest_activity_state != GUEST_ACTIVITY_HLT)
>  		return VMXERR_ENTRY_INVALID_CONTROL_FIELD;
>  
> -	if (nested_check_vm_execution_ctls(vcpu, vmcs12))
> +	if (nested_check_vm_execution_ctls(vcpu, vmcs12) ||
> +	    nested_check_vm_exit_ctls(vcpu, vmcs12))
>  		return VMXERR_ENTRY_INVALID_CONTROL_FIELD;
>  
>  	if (nested_vmx_check_msr_switch_controls(vcpu, vmcs12))
> -- 
> 2.9.5
> 
