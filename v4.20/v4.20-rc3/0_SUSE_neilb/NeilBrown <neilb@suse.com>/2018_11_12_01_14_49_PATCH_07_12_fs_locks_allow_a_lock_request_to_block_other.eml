Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 07:36:31 -0000
Received: from icoremail.net (unknown [209.85.214.169])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv_rk1OhbO0V5AQ--.36873S3;
	Mon, 12 Nov 2018 09:18:29 +0800 (CST)
Received: from mail-pl1-f169.google.com (unknown [209.85.214.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHKUXh1OhbIv4uAA--.37335S3;
	Mon, 12 Nov 2018 09:18:25 +0800 (CST)
Received: by mail-pl1-f169.google.com with SMTP id q19-v6so3464355pll.7
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 17:18:25 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :from:to:date:subject:cc:message-id:in-reply-to:references
         :user-agent:mime-version:content-transfer-encoding:sender:precedence
         :list-id;
        bh=MJ5JgX1FDe7m4rJIAlTDIUAlkr7d2GVYGT36DLdG2N0=;
        b=dNpJ4y+GwbDno0Xum71ueYOAWdHRZ8i6YvxLD6yAGLM6MZJJiRqfkVUWBvgZWF9og6
         JMjVzxtVwC+uuHL34II4LYhB47hc/EXDGu/WAIcSmt2vO9uvq9mVq3Ty1UNfc9TaT+fO
         LBbB9hIMChtHHvnphcQBK9LowHrO7CGPtyGZe83c8/A7W8H5rKanjo+ps4pRxE5CuGhm
         /2+NiL+TIk8h/bdP0qjdbMViO2YcOk6H1+OoKaOmpErFykJxeoLW0DsQZpHv1ff71+mU
         LMn66GwCdCHqi7XYS2YTT/PzGXWI7+d3gNtqdReEncLquaW3mRbYE4zCqpRzQKVk1BpR
         +bzQ==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gIbxKYXftwRtz94mSSJ2if6P3bTAbPy3IZyNGpqqcTJPjjVxkVd
	tzYMa5o1uTLjJ2AScigQL95hYfk2S59E1hnMLLqqZrryhjSUVTMtag==
X-Received: by 2002:a17:902:9698:: with SMTP id n24-v6mr18445050plp.9.1541985504849;
        Sun, 11 Nov 2018 17:18:24 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2637239pjt;
        Sun, 11 Nov 2018 17:18:24 -0800 (PST)
X-Google-Smtp-Source: AJdET5eV1+PtT8iUl5gra2XN/exXPMcvaAfqoVKp8qdnCY5SXVlGo82srJUbWjOLR4bzXUN3KP0M
X-Received: by 2002:a17:902:5a4d:: with SMTP id f13mr945840plm.49.1541985504159;
        Sun, 11 Nov 2018 17:18:24 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541985504; cv=none;
        d=google.com; s=arc-20160816;
        b=pZLFCT49riGgXpNmn2EcIvlESEB4A/xacyUcP9L5Jz5ypIJSDpoCb5zMWQf+qhZUy5
         QNScELTOztVtGiJqmk6yayT1jTuhRFDYrH5UdGGiZFm8n+XJUMxfPBe1U3pAH0S32S5B
         oP1M7k01deDZra1DUJ59+NwxSATtQmuA/yzwHuIJrtnVGDGLz6mfwC91a8xERZ+03WGz
         tH+0VmJ8HwnImzBVZE1GRVR0YbFxF4PnMfDvPy1f1OCeynW5E1yX/aj4pZYAzDPaXlEA
         WOz40P1fLpEpD0Jj8hV26O8bUVpk4a6yc/nV3Xkwpbs8c1gaV8nDL1LY4xt1S00uP0Lz
         azCg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:references:in-reply-to:message-id:cc:subject:date:to
         :from;
        bh=MJ5JgX1FDe7m4rJIAlTDIUAlkr7d2GVYGT36DLdG2N0=;
        b=0vquPHTEyjurMnD2jrRPf3m8qrHVyiuliq7Qqx/ETb2m3Ooybc1jwwqSjVUiPzsOEp
         B27PMCN3pMx8IDxBvFlZueQmM0igu0lAxOaf/CBfVs6rZXR0u8accO5O7Wk0ka/swgxG
         b44FN/TKdhW/DnjgXtqJclk8Dc3BJpcdBN6nDPttrrhyoPzXWuP+ue7Vri5hYKsjLnph
         lt05eH1cKLXENvmASGN80WogX4L5hgQmmX7Th7WF5x1QZy/Fn07Z5iY5iqVEs36d9V7M
         XDQX/vKP9M0byzPsABGjWMNMoqjwHf1ODbcKSAaBWxylrYtHPtG2Dy0ol+G3fa9mbEo3
         gdsA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id j135si8803255pgc.517.2018.11.11.17.18.09;
        Sun, 11 Nov 2018 17:18:24 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730112AbeKLLIN (ORCPT <rfc822;berg.ding@gmail.com> + 99 others);
        Mon, 12 Nov 2018 06:08:13 -0500
Received: from mx2.suse.de ([195.135.220.15]:56866 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726674AbeKLLIM (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 06:08:12 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id AE2B4ADE3;
        Mon, 12 Nov 2018 01:17:28 +0000 (UTC)
From: NeilBrown <neilb@suse.com>
To: Jeff Layton <jlayton@kernel.org>,
        Alexander Viro <viro@zeniv.linux.org.uk>
Date: Mon, 12 Nov 2018 12:14:49 +1100
Subject: [PATCH 07/12] fs/locks: allow a lock request to block other
 requests.
Cc: "J. Bruce Fields" <bfields@fieldses.org>,
        Martin Wilck <mwilck@suse.de>, linux-fsdevel@vger.kernel.org,
        Frank Filz <ffilzlnx@mindspring.com>,
        linux-kernel@vger.kernel.org
Message-ID: <154198528913.14364.2790262012801596354.stgit@noble>
In-Reply-To: <154198490921.14364.13726904731989686092.stgit@noble>
References: <154198490921.14364.13726904731989686092.stgit@noble>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHKUXh1OhbIv4uAA--.37335S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxuF48Aw1DCr45Aw4xtFykAFb_yoWrXF4fp3
	yqgFWYkr4Fgr17X3Z7JFyUWr1fuws3KFy7CryxX34ayFWDXwn7XFn7tFy2qr1ftr4xXFs8
	WFn8Gr9rur4qvFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUBKb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK
	6IIF6w4lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r1I6r4UMxvI42IY6x
	IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2jsIE14v26rxl6s0DMxvI42IY6I8E
	87Iv6xkF7I0E14v26rxl6s0DMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52x082
	I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_Jr4l
	x2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8ZwCIc40Y0x0EwIxGrw
	CI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2KfnxnUUI43ZEXa7IUOKiiPUUUUU=
	=

Currently, a lock can block pending requests, but all pending
requests are equal.  If lots of pending requests are
mutually exclusive, this means they will all be woken up
and all but one will fail.  This can hurt performance.

So we will allow pending requests to block other requests.
Only the first request will be woken, and it will wake the others.

This patch doesn't implement this fully, but prepares the way.

- It acknowledges that a request might be blocking other requests,
  and when the request is converted to a lock, those blocked
  requests are moved across.
- When a request is requeued or discarded, all blocked requests are
  woken.
- When deadlock-detection looks for the lock which blocks a
  given request, we follow the chain of ->fl_blocker all
  the way to the top.

Signed-off-by: NeilBrown <neilb@suse.com>
---
 fs/locks.c |   36 ++++++++++++++++++++++++++++++------
 1 file changed, 30 insertions(+), 6 deletions(-)

diff --git a/fs/locks.c b/fs/locks.c
index 492d970c67d7..c1b79293007b 100644
--- a/fs/locks.c
+++ b/fs/locks.c
@@ -402,6 +402,17 @@ void locks_copy_lock(struct file_lock *new, struct file_lock *fl)
 
 EXPORT_SYMBOL(locks_copy_lock);
 
+static void locks_move_blocks(struct file_lock *new, struct file_lock *fl)
+{
+	struct file_lock *f;
+
+	spin_lock(&blocked_lock_lock);
+	list_splice_init(&fl->fl_blocked_requests, &new->fl_blocked_requests);
+	list_for_each_entry(f, &fl->fl_blocked_requests, fl_blocked_member)
+		f->fl_blocker = new;
+	spin_unlock(&blocked_lock_lock);
+}
+
 static inline int flock_translate_cmd(int cmd) {
 	if (cmd & LOCK_MAND)
 		return cmd & (LOCK_MAND | LOCK_RW);
@@ -693,6 +704,7 @@ static void __locks_wake_up_blocks(struct file_lock *blocker)
 static void locks_delete_block(struct file_lock *waiter)
 {
 	spin_lock(&blocked_lock_lock);
+	__locks_wake_up_blocks(waiter);
 	__locks_delete_block(waiter);
 	spin_unlock(&blocked_lock_lock);
 }
@@ -716,6 +728,12 @@ static void __locks_insert_block(struct file_lock *blocker,
 	list_add_tail(&waiter->fl_blocked_member, &blocker->fl_blocked_requests);
 	if (IS_POSIX(blocker) && !IS_OFDLCK(blocker))
 		locks_insert_global_blocked(waiter);
+
+	/* The requests in waiter->fl_blocked are known to conflict with
+	 * waiter, but might not conflict with blocker, or the requests
+	 * and lock which block it.  So they all need to be woken.
+	 */
+	__locks_wake_up_blocks(waiter);
 }
 
 /* Must be called with flc_lock held. */
@@ -888,8 +906,11 @@ static struct file_lock *what_owner_is_waiting_for(struct file_lock *block_fl)
 	struct file_lock *fl;
 
 	hash_for_each_possible(blocked_hash, fl, fl_link, posix_owner_key(block_fl)) {
-		if (posix_same_owner(fl, block_fl))
-			return fl->fl_blocker;
+		if (posix_same_owner(fl, block_fl)) {
+			while (fl->fl_blocker)
+				fl = fl->fl_blocker;
+			return fl;
+		}
 	}
 	return NULL;
 }
@@ -982,6 +1003,7 @@ static int flock_lock_inode(struct inode *inode, struct file_lock *request)
 	if (request->fl_flags & FL_ACCESS)
 		goto out;
 	locks_copy_lock(new_fl, request);
+	locks_move_blocks(new_fl, request);
 	locks_insert_lock_ctx(new_fl, &ctx->flc_flock);
 	new_fl = NULL;
 	error = 0;
@@ -1175,6 +1197,7 @@ static int posix_lock_inode(struct inode *inode, struct file_lock *request,
 			goto out;
 		}
 		locks_copy_lock(new_fl, request);
+		locks_move_blocks(new_fl, request);
 		locks_insert_lock_ctx(new_fl, &fl->fl_list);
 		fl = new_fl;
 		new_fl = NULL;
@@ -2586,13 +2609,14 @@ void locks_remove_file(struct file *filp)
 int
 posix_unblock_lock(struct file_lock *waiter)
 {
-	int status = 0;
+	int status = -ENOENT;
 
 	spin_lock(&blocked_lock_lock);
-	if (waiter->fl_blocker)
+	if (waiter->fl_blocker) {
+		__locks_wake_up_blocks(waiter);
 		__locks_delete_block(waiter);
-	else
-		status = -ENOENT;
+		status = 0;
+	}
 	spin_unlock(&blocked_lock_lock);
 	return status;
 }

