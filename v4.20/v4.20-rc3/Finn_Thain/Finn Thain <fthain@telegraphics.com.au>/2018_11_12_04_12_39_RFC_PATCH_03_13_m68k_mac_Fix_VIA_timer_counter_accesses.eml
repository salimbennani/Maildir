Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 12 Nov 2018 07:37:11 -0000
Received: from icoremail.net (unknown [209.85.215.178])
	by mail-app2 (Coremail) with SMTP id by_KCgDHH941Bulb9JV6AQ--.36329S3;
	Mon, 12 Nov 2018 12:48:54 +0800 (CST)
Received: from mail-pg1-f178.google.com (unknown [209.85.215.178])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwA3FUEzBulbH7ovAA--.34599S3;
	Mon, 12 Nov 2018 12:48:51 +0800 (CST)
Received: by mail-pg1-f178.google.com with SMTP id w3-v6so3460368pgs.11
        for <xuliker@zju.edu.cn>; Sun, 11 Nov 2018 20:48:51 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :to:cc:message-id:in-reply-to:references:from:subject:date:sender
         :precedence:list-id;
        bh=hNyQXgW+Eb6UKjpE2S8E/f8Z9tuJHeE9kxCADo30Hk0=;
        b=qs+8e3NQ7znoPS9cRBwKLvD+A4F7jwukez+qly0cxIicxHCiHN9sa88YiVtqOlA0ln
         /InqmgoeDGm73ZTPEJB7dcF7YngkFdZD8DKlFN0YXfqoRjz4+3cb7u4T45k+i3NBdyHS
         OlCoj2QvrFl6D5btjWQdTpEKeMiaA1Bya/6J9R5YllCzbl15VMLk0P0/Xi4bN6GtSh7c
         wNPUZ2uO6okqo7UGRpGJolekkniu+tdZN25a1FxSx2jg2sjo+TGBcQBlFY2uD06+PsS2
         5LrFgbb6yygPBMUBTZi45cHawynNmShNh5LgvX+mtjPuudd0fpBZOigaNMo9cFNblnC3
         XAgg==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gKSmZCQjXUtk0pqFJ1iBNt7vB/X+ODZfDibTZQfM+XHQxRStmcz
	7uM7BIw+nJu/h+30YFmSSNaeGLttVRmFa1PMC+ymw9UMVYAhYUbZZg==
X-Received: by 2002:a63:460a:: with SMTP id t10-v6mr16326828pga.197.1541998131513;
        Sun, 11 Nov 2018 20:48:51 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp2768567pjt;
        Sun, 11 Nov 2018 20:48:50 -0800 (PST)
X-Google-Smtp-Source: AJdET5fzHIYfVbFnXdcvSmJuar0Wp2XLFvRFeey62mMHoomaNrxk0CnwkbGEebJS9jh0G96Jj56X
X-Received: by 2002:a63:f547:: with SMTP id e7mr16524904pgk.182.1541998130595;
        Sun, 11 Nov 2018 20:48:50 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1541998130; cv=none;
        d=google.com; s=arc-20160816;
        b=Oki0vRut8HeD3vNzOlUKtivtW/sPmjfN93NCSbwBeQPMKPWhFNHPuU2gZ8K9sDn3zA
         cB02vkXc7XtnrjG5L5skIl1F1rukJAOOfr95rEy63UJYJmqIkPE+N4YiEC3cLyuZyHa5
         fjnH3872W+eM5Kd8oUFYnudAUog5g38miSm57DC7t/461FmUrVZ7e3iG6TW2CGXQSPQ0
         tHiNHW88qHqtDthIf+esuVJrKmevH+4jOjmf3nkfjgZQZ2H+jMM7X68pxifQZHhXfZJ9
         hJOLz2mi1ZAI27nIMGgikLdex4r9JrOnmIaf+Yg+9MAY+yWjvn70AZJ0G4udTYIJ9c45
         TYnQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:date:subject:from:references:in-reply-to
         :message-id:cc:to;
        bh=hNyQXgW+Eb6UKjpE2S8E/f8Z9tuJHeE9kxCADo30Hk0=;
        b=QMGg+kxcrQsC3hGzj0HnpXFCWCQ3z75XVu+Qa9eIqV2MBCQra7HVcJFWjZdOVhFC6b
         XwbrAHYFRur2JS/42lPimApfy/wlk2GcaivRj4xcedrXL8suRBLQSeFhalCYOFSvjMJz
         n+IMD7h2kJrLniDm3zReiv9ZNuPKVuYR9tYrF9wJsK+aBX9Pvy31c8XeZRe6jNs+Fqcg
         +DljHILMkKFtA/a18fZYXx09oBYfkrtZsQRBxDrO4QrFInubrux7og7UBsdblnDY7tYc
         yIRMVUIvIvboFzZzPPAVw0vd8kSxy0kJZZDKQPMZOYh7cY3U6zdRValco1aVjMEAv6Jx
         BOaw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id h36si15154230pgm.200.2018.11.11.20.48.36;
        Sun, 11 Nov 2018 20:48:50 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731490AbeKLOjV (ORCPT <rfc822;changseok.bae@gmail.com>
        + 99 others); Mon, 12 Nov 2018 09:39:21 -0500
Received: from kvm5.telegraphics.com.au ([98.124.60.144]:48600 "EHLO
        kvm5.telegraphics.com.au" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728135AbeKLOiW (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 12 Nov 2018 09:38:22 -0500
Received: by kvm5.telegraphics.com.au (Postfix, from userid 502)
        id 9D7DF297DC; Sun, 11 Nov 2018 23:46:55 -0500 (EST)
To: Geert Uytterhoeven <geert@linux-m68k.org>
Cc: Arnd Bergmann <arnd@arndb.de>,
        Stephen N Chivers <schivers@csc.com.au>,
        Thomas Gleixner <tglx@linutronix.de>,
        Daniel Lezcano <daniel.lezcano@linaro.org>,
        John Stultz <john.stultz@linaro.org>,
        linux-m68k@lists.linux-m68k.org, linux-kernel@vger.kernel.org,
        Joshua Thompson <funaho@jurai.org>
Message-Id: <44ec2361b438c63fc276ade5352da3e4bc4e6022.1541995959.git.fthain@telegraphics.com.au>
In-Reply-To: <cover.1541995959.git.fthain@telegraphics.com.au>
References: <cover.1541995959.git.fthain@telegraphics.com.au>
From: Finn Thain <fthain@telegraphics.com.au>
Subject: [RFC PATCH 03/13] m68k: mac: Fix VIA timer counter accesses
Date: Mon, 12 Nov 2018 15:12:39 +1100
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwA3FUEzBulbH7ovAA--.34599S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3JryDJrWrGr13WrWDWw1Utrb_yoW7uF4Dpa
	yFkas8Ar4vqan2ga1vy3yDZr1xG3Z7WrW5AF4UGr4xC3W29r1rX3W8Ga4aqFy8GrWkuryr
	XFy5Way3uayj93DanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUU90b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jrv_
	JF1lYx0Ex4A2jsIE14v26F4j6r4UJwAm72CE4IkC6x0Yz7v_Jr0_Gr1l7I0Y6sxI4wCY1x
	0264kExVAvwVAq07x20xylc2xSY4AK6IIF6r45MxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0
	I7IYx2IY67AKxVW8JVW5JwCYIxAIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I
	8E87Iv67AKxVW0oVCq3wCYIxAIcVC2z280aVCY1x0267AKxVW0oVCq3wCF04k20xvY0x0E
	wIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJV
	W8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF
	1VAFwI0_Jw0_GFylIxkGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6r1j6r1xYxBIda
	VFxhVjvjDU0xZFpf9x07bkoGdUUUUU=

This resolves some bugs that affect VIA timer counter accesses.
Firstly, keep track of lost interrupts caused by reading the counter.
Secondly, check for inconsistent results when reading the counter.
Finally, make allowance for the fact that the counter will be
decremented to 0xFFFF before being reloaded.

Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
Cc: Joshua Thompson <funaho@jurai.org>
Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
---
 arch/m68k/mac/config.c |   7 +--
 arch/m68k/mac/via.c    | 135 ++++++++++++++++++++++++-----------------
 2 files changed, 82 insertions(+), 60 deletions(-)

diff --git a/arch/m68k/mac/config.c b/arch/m68k/mac/config.c
index cd9317d53276..2367c3792dc7 100644
--- a/arch/m68k/mac/config.c
+++ b/arch/m68k/mac/config.c
@@ -72,11 +72,6 @@ static void mac_get_model(char *str);
 static void mac_identify(void);
 static void mac_report_hardware(void);
 
-static void __init mac_sched_init(irq_handler_t vector)
-{
-	via_init_clock(vector);
-}
-
 /*
  * Parse a Macintosh-specific record in the bootinfo
  */
@@ -152,7 +147,7 @@ void __init config_mac(void)
 	if (!MACH_IS_MAC)
 		pr_err("ERROR: no Mac, but config_mac() called!!\n");
 
-	mach_sched_init = mac_sched_init;
+	mach_sched_init = via_init_clock;
 	mach_init_IRQ = mac_init_IRQ;
 	mach_get_model = mac_get_model;
 	arch_gettimeoffset = mac_gettimeoffset;
diff --git a/arch/m68k/mac/via.c b/arch/m68k/mac/via.c
index e5dff74f59b3..7130abec0b77 100644
--- a/arch/m68k/mac/via.c
+++ b/arch/m68k/mac/via.c
@@ -54,16 +54,6 @@ static __u8 rbv_clear;
 
 static int gIER,gIFR,gBufA,gBufB;
 
-/*
- * Timer defs.
- */
-
-#define TICK_SIZE		10000
-#define MAC_CLOCK_TICK		(783300/HZ)		/* ticks per HZ */
-#define MAC_CLOCK_LOW		(MAC_CLOCK_TICK&0xFF)
-#define MAC_CLOCK_HIGH		(MAC_CLOCK_TICK>>8)
-
-
 /*
  * On Macs with a genuine VIA chip there is no way to mask an individual slot
  * interrupt. This limitation also seems to apply to VIA clone logic cores in
@@ -267,22 +257,6 @@ void __init via_init(void)
 	}
 }
 
-/*
- * Start the 100 Hz clock
- */
-
-void __init via_init_clock(irq_handler_t func)
-{
-	via1[vACR] |= 0x40;
-	via1[vT1LL] = MAC_CLOCK_LOW;
-	via1[vT1LH] = MAC_CLOCK_HIGH;
-	via1[vT1CL] = MAC_CLOCK_LOW;
-	via1[vT1CH] = MAC_CLOCK_HIGH;
-
-	if (request_irq(IRQ_MAC_TIMER_1, func, 0, "timer", func))
-		pr_err("Couldn't register %s interrupt\n", "timer");
-}
-
 /*
  * Debugging dump, used in various places to see what's going on.
  */
@@ -310,34 +284,6 @@ void via_debug_dump(void)
 	}
 }
 
-/*
- * This is always executed with interrupts disabled.
- *
- * TBI: get time offset between scheduling timer ticks
- */
-
-u32 mac_gettimeoffset(void)
-{
-	unsigned long flags;
-	unsigned long ticks, offset = 0;
-
-	local_irq_save(flags);
-
-	/* read VIA1 timer 2 current value */
-	ticks = via1[vT1CL] | (via1[vT1CH] << 8);
-	/* The probability of underflow is less than 2% */
-	if (ticks > MAC_CLOCK_TICK - MAC_CLOCK_TICK / 50)
-		/* Check for pending timer interrupt in VIA1 IFR */
-		if (via1[vIFR] & 0x40) offset = TICK_SIZE;
-
-	local_irq_restore(flags);
-
-	ticks = MAC_CLOCK_TICK - ticks;
-	ticks = ticks * 10000L / MAC_CLOCK_TICK;
-
-	return (ticks + offset) * 1000;
-}
-
 /*
  * Flush the L2 cache on Macs that have it by flipping
  * the system into 24-bit mode for an instant.
@@ -606,3 +552,84 @@ int via2_scsi_drq_pending(void)
 	return via2[gIFR] & (1 << IRQ_IDX(IRQ_MAC_SCSIDRQ));
 }
 EXPORT_SYMBOL(via2_scsi_drq_pending);
+
+/* timer and clock source */
+
+#define VIA_CLOCK_FREQ     783360                /* VIA "phase 2" clock in Hz */
+#define VIA_TIMER_INTERVAL (1000000 / HZ)        /* microseconds per jiffy */
+#define VIA_TIMER_CYCLES   (VIA_CLOCK_FREQ / HZ) /* clock cycles per jiffy */
+
+#define VIA_TC             (VIA_TIMER_CYCLES - 2) /* including 0 and -1 */
+#define VIA_TC_LOW         (VIA_TC & 0xFF)
+#define VIA_TC_HIGH        (VIA_TC >> 8)
+
+static bool lost_timer_intr;
+
+static irqreturn_t via_timer_handler(int irq, void *data)
+{
+	irq_handler_t func = data;
+	unsigned long flags;
+
+	local_irq_save(flags);
+	if (lost_timer_intr) {
+		lost_timer_intr = false;
+		local_irq_restore(flags);
+		func(irq, data);
+	} else
+		local_irq_restore(flags);
+	return func(irq, data);
+}
+
+void __init via_init_clock(irq_handler_t func)
+{
+	if (request_irq(IRQ_MAC_TIMER_1, via_timer_handler, 0, "timer", func)) {
+		pr_err("Couldn't register %s interrupt\n", "timer");
+		return;
+	}
+
+	via1[vT1LL] = VIA_TC_LOW;
+	via1[vT1LH] = VIA_TC_HIGH;
+	via1[vT1CL] = VIA_TC_LOW;
+	via1[vT1CH] = VIA_TC_HIGH;
+	via1[vACR] |= 0x40;
+}
+
+#define VIA_T1_INT_FLAG BIT(6)
+
+u32 mac_gettimeoffset(void)
+{
+	unsigned long flags;
+	u8 count_high, count_high_new, count_low;
+	u16 count, offset = 0;
+
+	/*
+	 * Timer counter wrap-around is detected with the timer interrupt flag
+	 * but the flag gets reset when the counter low byte (vT1CL) is read.
+	 * Also, accessing both counter registers is an unavoidable data race.
+	 * To avoid these problems we could ignore the LSB. Clock accuracy
+	 * would get 256 times worse (error could reach 0.327 ms) but CPU
+	 * overhead would decrease (because VIA register accesses are so slow).
+	 */
+
+	local_irq_save(flags);
+
+	count_high = via1[vT1CH];
+again:
+	if (count_high == 0xFF && (via1[vIFR] & VIA_T1_INT_FLAG))
+		lost_timer_intr = true;
+	count_low = via1[vT1CL];
+	count_high_new = via1[vT1CH];
+	if (count_high_new != count_high) {
+		count_high = count_high_new;
+		goto again;
+	}
+	if (lost_timer_intr)
+		offset = VIA_TIMER_CYCLES;
+
+	local_irq_restore(flags);
+
+	count = ((count_high << 8) | count_low) + 1;
+	count = VIA_TIMER_CYCLES - count + offset;
+
+	return ((count * VIA_TIMER_INTERVAL) / VIA_TIMER_CYCLES) * 1000;
+}
-- 
2.18.1
