Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 19 Nov 2018 00:47:35 -0000
Received: from icoremail.net (unknown [209.85.210.170])
	by mail-app2 (Coremail) with SMTP id by_KCgD3_yc2yfFbQS6zAQ--.53436S3;
	Mon, 19 Nov 2018 04:19:03 +0800 (CST)
Received: from mail-pf1-f170.google.com (unknown [209.85.210.170])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAX_UgyyfFbdSFTAA--.17842S3;
	Mon, 19 Nov 2018 04:18:58 +0800 (CST)
Received: by mail-pf1-f170.google.com with SMTP id v68-v6so13795429pfk.0
        for <xuliker@zju.edu.cn>; Sun, 18 Nov 2018 12:18:58 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=09TMh7ltv9Knkf6XQBcc1ye3e4wBO5cn7QHqPt6W2Ww=;
        b=S+3cfK2K6SccjK6u5wI8wb/LWnY26PVXXX5n+bEgJ71kvn7E6kcNePMQavROhXnGqR
         fJcvcL2/p+VLnbJg1yZDeB36EK0eX2OKAGf0VIVkfR76ySLLDSXgPyqmFCbZZnVZ/kHY
         rTeW/0VXzjQ5gL5biIMZQtNGahIjXnt2BEHgRACA1RVKnaFsctKBVEw5wwoHX7poX3Qu
         DR4yciWDZBDDzSQBDQTheK6RGduDAGhokkyQCVYZ5W9h5LtZch2cg1o21M/Xhd/7j9eG
         aXUsnXxiTObsdgfSHZIpCSB1JJHwUPyvN8c9ncdB55mLGfutZ3+UNmqH3EBfL77vLPoi
         QDCQ==
X-Gm-Message-State: AGRZ1gITBf8sBrSx0/4PWRw3YMEKBMvefx9p9Tsdb6hERYRMJWN/iUdp
	Uwe2kq32n1uuMPq/DIFa+1txVEIOwDx6gfB+pZVjXn6vJ4qJZ/c=
X-Received: by 2002:a63:4044:: with SMTP id n65mr17074879pga.90.1542572337975;
        Sun, 18 Nov 2018 12:18:57 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1866431pju;
        Sun, 18 Nov 2018 12:18:56 -0800 (PST)
X-Google-Smtp-Source: AJdET5cpP9uSyoCTY9OKQmILvdqRtlwWWuoxkOuJNVe03veZaK+AM2t4EeGC7+DGVEyDyEiplBMX
X-Received: by 2002:a63:1a0c:: with SMTP id a12mr17278756pga.157.1542572336762;
        Sun, 18 Nov 2018 12:18:56 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542572336; cv=none;
        d=google.com; s=arc-20160816;
        b=wMZlFPVVg7BCfmv/9PpkPq6nxL0KR7P8jv1nYjpO0w3SKj2jwUP13lM7riZVAlBhf/
         XNrri6mDC/8GETaaUFMOm4rGsSGt6AcXH0HrQ4o5UzsauZiBmL+vk0eMNUnqXqUFyGAR
         W+O9Dir7YdvbHG6YWIuaFZM4ONbkuNyfCs2GWjl72Nc/SAzN73E7iMb/i2KcNW632Nm2
         MgqWpcHb+zdyn6ugtCOb90pRM9sfO7vtuUaM1rtK5G6LrJ3BxFhEkCGVq8WiSPaU7naE
         hx97sS3iVW/PJG466C2EltgWFF/fvlKSe6d+i4Eeodzw/QEWwkkSuT6IJ/z74U40vqbw
         ysig==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=09TMh7ltv9Knkf6XQBcc1ye3e4wBO5cn7QHqPt6W2Ww=;
        b=Hxtr/8i/jz157L6Dd6FbE4My24JMz9wXpjWoiBcLk50TrfO0d/ZF0bbIeW6koY4mkB
         ZOjn8Y3NpuycRbjqeMFmj4XzKEm+q1SfV876rIFbHCMu3f/AeaiJ/2XWyg0IsOSX7ANb
         BxZGePXfuPO2qc+VGX3iThBxy1Pa1XqDcTQHPFIXvVmtngxue7TSVpshPD4nUNBOxfDz
         dG1BotDSnNSsEjRBgq1Sv0Ka6PJCKTzlp4nuBwQlG2hW0hvHMax54+8r5wR/n0pflySt
         579cMthl8ip9jRGK5aTQpW66HZ48r0TZSfqmkqrTSDt7mcW4UOd/byOs4xJfzku4szUN
         kWuw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@brauner.io header.s=google header.b="dZGLagY/";
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id n185-v6si38692406pfn.83.2018.11.18.12.18.36;
        Sun, 18 Nov 2018 12:18:56 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727045AbeKSGgl (ORCPT <rfc822;xtanabe@gmail.com> + 99 others);
        Mon, 19 Nov 2018 01:36:41 -0500
Received: from mail-pg1-f194.google.com ([209.85.215.194]:38987 "EHLO
        mail-pg1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725805AbeKSGgk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 01:36:40 -0500
Received: by mail-pg1-f194.google.com with SMTP id w6so584028pgl.6
        for <linux-kernel@vger.kernel.org>; Sun, 18 Nov 2018 12:15:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=brauner.io; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=09TMh7ltv9Knkf6XQBcc1ye3e4wBO5cn7QHqPt6W2Ww=;
        b=dZGLagY/1faClkZX1qWovtSTj82b60UaWO8IUfEdXk3o8fIRNjtU/mrcrl/Ah1XI1Y
         rR7zkzg3JPNmMk9UPRsnueqQUM7cj+iS0TsGx6Z71AlzG2mhpGRYo5noYA1wx+ENnL2f
         73gNqyUXSPn/IQ2MWsOTJfty8YcDaGxZ/dLAOf1dAhEzLl2iwb+KyolxguG5VTiEevQH
         B8olS+MqvTDoL2HTYkUj8snDpJLjngIIU0h+XezC+1alRTr25NidkJ3mt9ZyQiCPDQIt
         UPQppMBy7Si3KXod8veEXnVdvSt8eAy7TJ68cXnJKcXO7M2mg5CdaKczP9oD5KtqHtZT
         81wg==
X-Received: by 2002:a63:7c13:: with SMTP id x19mr17395594pgc.45.1542572125921;
        Sun, 18 Nov 2018 12:15:25 -0800 (PST)
Received: from brauner.io ([2404:4404:133a:4500:9d11:de0b:446c:8485])
        by smtp.gmail.com with ESMTPSA id q199sm26626979pfc.97.2018.11.18.12.15.19
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Sun, 18 Nov 2018 12:15:25 -0800 (PST)
Date: Sun, 18 Nov 2018 21:15:16 +0100
From: Christian Brauner <christian@brauner.io>
To: Daniel Colascione <dancol@google.com>
Cc: Aleksa Sarai <cyphar@cyphar.com>,
        Andy Lutomirski <luto@kernel.org>,
        Randy Dunlap <rdunlap@infradead.org>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        LKML <linux-kernel@vger.kernel.org>,
        "Serge E. Hallyn" <serge@hallyn.com>, Jann Horn <jannh@google.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Oleg Nesterov <oleg@redhat.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Linux FS Devel <linux-fsdevel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        Tim Murray <timmurray@google.com>,
        Kees Cook <keescook@chromium.org>,
        Jan Engelhardt <jengelh@inai.de>
Subject: Re: [PATCH] proc: allow killing processes via file descriptors
Message-ID: <20181118201514.c5ujdjav6ccodyff@brauner.io>
References: <a7f50692-667c-4efe-a2d0-fa324eebb90b@infradead.org>
 <CAKOZueutLc8d0Fe+7dNWiZKnALhTSST8+kCnOrL+OmB6coUmtA@mail.gmail.com>
 <CALCETrVg71XBv-gMOtL-m0Dd0HNz8_oXOUDSWin5LeViAL0UYA@mail.gmail.com>
 <CAKOZuesCKo4GH9fdum2EUFLrtTWam3aizcDQUn3-vCYg4T1P8w@mail.gmail.com>
 <CALCETrUeNZPfrSYa9vH5Ukrk1Y+Kb9GkZOh6LkqG6Z9NpK5P0w@mail.gmail.com>
 <CAKOZuevVk_aH_2TuiNcmxgMa+gHXMBXz6Uu5a6TDjoxjhaE36g@mail.gmail.com>
 <CALCETrVscRwQG55-j1SKc2TmSb1-=5861804ojUuviNzdyDOrA@mail.gmail.com>
 <CAKOZuevRq-igh06zS_nsGG400zXrKFCtajpEG9-xgU2+Rtb2Pw@mail.gmail.com>
 <20181118190504.ixglsqbn6mxkcdzu@yavin>
 <CAKOZuetfqvn1uVqKJ=16iEzG4g449YOjC_tLM60eKBSkv9u+bQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <CAKOZuetfqvn1uVqKJ=16iEzG4g449YOjC_tLM60eKBSkv9u+bQ@mail.gmail.com>
User-Agent: NeoMutt/20180716
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAX_UgyyfFbdSFTAA--.17842S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3ArWfXFy5trWUGr4ftFy7KFg_yoW3WF4xpF
	W8G3Waka1kGaySyr12kr48JF1rtryrJrW7Jr98KryUAwn0kF1SgrW3X3yY9Fyfurs3Ka1j
	qFWqqF9rZr9rZaDanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmSb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVWxJr0_GcWl84ACjcxK6I8E87Iv6xkF7I0E14v26F4UJVW0owAS0I0E0xvYzx
	vE52x082IY62kv0487Mc02F40EFcxC0VAKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWU
	GVWUXwAv7VC2z280aVAFwI0_Jr0_Gr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI4
	8JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY02Av
	z4vEIxC_AwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_JFI_Gr1lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVWUJVW8JwCYIxAIcVC2z280aVAFwI0_Cr0_Gr1UMxvI42IY
	6I8E87Iv6xkF7I0E14v26r4j6r4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c
	8Ij28IcwCF72vE77IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwCFI7km07C267AKxVW8ZVWr
	XwC20s026c02F40E14v26r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1V
	AFwI0_GFv_WrylIxkGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6rWUJVWrZr1UYxBI
	daVFxhVjvjDU0xZFpf9x07bQ89iUUUUU=

On Sun, Nov 18, 2018 at 11:44:19AM -0800, Daniel Colascione wrote:
> On Sun, Nov 18, 2018 at 11:05 AM, Aleksa Sarai <cyphar@cyphar.com> wrote:
> > On 2018-11-18, Daniel Colascione <dancol@google.com> wrote:
> >> > Here's my point: if we're really going to make a new API to manipulate
> >> > processes by their fd, I think we should have at least a decent idea
> >> > of how that API will get extended in the future.  Right now, we have
> >> > an extremely awkward situation where opening an fd in /proc requires
> >> > certain capabilities or uids, and using those fds often also checks
> >> > current's capabilities, and the target process may have changed its
> >> > own security context, including gaining privilege via SUID, SGID, or
> >> > LSM transition rules in the mean time.  This has been a huge source of
> >> > security bugs.  It would be nice to have a model for future APIs that
> >> > avoids these problems.
> >> >
> >> > And I didn't say in my proposal that a process's identity should
> >> > fundamentally change when it calls execve().  I'm suggesting that
> >> > certain operations that could cause a process to gain privilege or
> >> > otherwise require greater permission to introspect (mainly execve)
> >> > could be handled by invalidating the new process management fds.
> >> > Sure, if init re-execs itself, it's still PID 1, but that doesn't
> >> > necessarily mean that:
> >> >
> >> > fd = process_open_management_fd(1);
> >> > [init reexecs]
> >> > process_do_something(fd);
> >> >
> >> > needs to work.
> >>
> >> PID 1 is a bad example here, because it doesn't get recycled. Other
> >> PIDs do. The snippet you gave *does* need to work, in general, because
> >> if exec invalidates the handle, and you need to reopen by PID to
> >> re-establish your right to do something with the process, that process
> >> may in fact have died between the invalidation and your reopen, and
> >> your reopened FD may refer to some other random process.
> >
> > I imagine the error would be -EPERM rather than -ESRCH in this case,
> > which would be incredibly trivial for userspace to differentiate
> > between.
> 
> Why would userspace necessarily see EPERM? The PID might get recycled
> into a different random process that the caller has the ability to
> affect.
> 
> > If you wish to re-open the path that is also trivial by
> > re-opening through /proc/self/fd/$fd -- which will re-do any permission
> > checks and will guarantee that you are re-opening the same 'struct file'
> > and thus the same 'struct pid'.
> 
> When you reopen via /proc/self/fd, you get a new struct file
> referencing the existing inode, not the same struct file. A new
> reference to the old struct file would just be dup.
> 
> Anyway: what other API requires, for correct operation, occasional
> reopening through /proc/self/fd? It's cumbersome, and it doesn't add
> anything. If we invalidate process handles on execve, and processes
> are legally allowed to re-exec themselves for arbitrary reasons at any
> time, that's tantamount to saying that handles might become invalid at
> any time and that all callers must be prepared to go through the
> reopen-and-retry path before any operation.
> 
> Why are we making them do that? So that a process can have an open FD
> that represents a process-operation capability? Which capability does
> the open FD represent?
> 
> I think when you and Andy must be talking about is an API that looks like this:
> 
> int open_process_operation_handle(int procfs_dirfd, int capability_bitmask)
> 
> capability_bitmask would have bits like
> 
> PROCESS_CAPABILITY_KILL --- send a signal
> PROCESS_CAPABILITY_PTRACE --- attach to a process
> PROCESS_CAPABILITY_READ_EXIT_STATUS --- what it says on the tin
> PROCESS_CAPABILITY_READ_CMDLINE --- etc.
> 
> Then you'd have system calls like
> 
> int process_kill(int process_capability_fd, int signo, const union sigval data)
> int process_ptrace_attach(int process_capability_fd)
> int process_wait_for_exit(int process_capability_fd, siginfo_t* exit_info)
> 
> that worked on these capability bits. If a process execs or does
> something else to change its security capabilities, operations on
> these capability FDs would fail with ESTALE or something and callers
> would have to re-acquire their capabilities.
> 
> This approach works fine. It has some nice theoretical properties, and
> could allow for things like nicer privilege separation for debuggers.
> I wouldn't mind something like this getting into the kernel.
> 
> I just don't think this model is necessary right now. I want a small
> change from what we have today, one likely to actually make it into
> the tree. And bypassing the capability FDs and just allowing callers
> to operate directly on process *identity* FDs, using privileges in
> effect at the time of all, is at least no worse than what we have now.
> 
> That is, I'm proposing an API that looks like this:
> 
> int process_kill(int procfs_dfd, int signo, const union sigval value)

I've started a second tree with process_signal(int procpid_dfd, int sig)
instead of an ioctl(). Why do you want sigval too?

> 
> If, later, process_kill were to *also* accept process-capability FDs,
> nothing would break.
> 
> >> The only way around this problem is to have two separate FDs --- one
> >> to represent process identity, which *must* be continuous across
> >> execve, and the other to represent some specific capability, some
> >> ability to do something to that process. It's reasonable to invalidate
> >> capability after execve, but it's not reasonable to invalidate
> >> identity. In concrete terms, I don't see a big advantage to this
> >> separation, and I think a single identity FD combined with
> >> per-operation capability checks is sufficient. And much simpler.
> >
> > I think that the error separation above would trivially allow user-space
> > to know whether the identity or capability of a process being monitored
> > has changed.
> >
> > Currently, all operations on a '/proc/$pid' which you've previously
> > opened and has died will give you -ESRCH.
> 
> Not the case. Zombies have died, but profs operations work fine on zombies.
> 
> >> > Similarly, it seems like
> >> > it's probably safe to be able to open an fd that lets you watch the
> >> > exit status of a process, have the process call setresuid(), and still
> >> > see the exit status.
> >>
> >> Is it? That's an open question.
> >
> > Well, if we consider wait4(2) it seems that this is already the case.
> > If you fork+exec a setuid binary you can definitely see its exit code.
> 
> Only if you're the parent. Otherwise, you can't see the process exit
> status unless you pass a ptrace access check and consult
> /proc/pid/stat after the process dies, but before the zombie
> disappears. Random unrelated and unprivileged processes can't see exit
> statuses from distant parts of the system.
> 
> >> > My POLLERR hack, aside from being ugly,
> >> > avoids this particular issue because it merely lets you wait for
> >> > something you already could have observed using readdir().
> >>
> >> Yes. I mentioned this same issue-punting as the motivation behind
> >> exithand, initially, just reading EOF on exit.
> >
> > One question I have about EOF-on-exit is that if we wish to extend it to
> > allow providing the exit status (which is something we discussed in the
> > original thread), how will multiple-readers be handled in such a
> > scenario?
> > Would we be storing the exit status or siginfo in the
> > equivalent of a locked memfd?
> 
> Yes, that's what I have in mind. A siginfo_t is small enough that we
> could just store it as a blob allocated off the procfs inode or
> something like that without bothering with a shmfs file. You'd be able
> to read(2) the exit status as many times as you wanted.
