Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 13 Nov 2018 00:34:35 -0000
Received: from icoremail.net (unknown [209.85.215.181])
	by mail-app2 (Coremail) with SMTP id by_KCgCn35hy_Olb1pKAAQ--.38566S3;
	Tue, 13 Nov 2018 06:19:31 +0800 (CST)
Received: from mail-pg1-f181.google.com (unknown [209.85.215.181])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAH5D9v_Olb4xw0AA--.2146S3;
	Tue, 13 Nov 2018 06:19:27 +0800 (CST)
Received: by mail-pg1-f181.google.com with SMTP id z11so2046511pgu.0
        for <xuliker@zju.edu.cn>; Mon, 12 Nov 2018 14:19:27 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :content-transfer-encoding:to:from:in-reply-to:cc:references
         :message-id:user-agent:subject:date:sender:precedence:list-id;
        bh=a4u/jlBP9RZOVfS8Va4jGnFIBZxgatKBrrn5fbtqYyg=;
        b=YSJs2dMHx2hLtenbEXCsfIM09NFbyOvbKPn2pyganOKJfm4fpoQbQkeh7cmv15nHrQ
         5C9816t/8dJG+0/q3aX6f1JWg6V0Vt0PHQIgglWro2ov6lpjJz3/091NpRTc0xE5bkh+
         /AUUDJLYN7Y15WYCbTISk8ppRQgNYszbaPS2WQhTgXPFDfWp7BXKN0S4I+AmdXbrPR96
         9WBASvXRs6w5oTOnlX/Mwycw/RfSXYMMawjam01txjoTFJDz4RNl7Yxej5+7b6luTTyR
         aSC4ign7i9XkhopyqV338/MQ7XoQsKVuqE8jmwnBF7Asr9jfUwqcxlXvxsox/gBrIzPw
         S+dg==
X-Gm-Message-State: AGRZ1gIhY+6zP5XCNhv3gf/RHClb6V7tmvvTENvZ2/oWSb1Bcn73PUsy
	aHYXh9aYtkBdV4NYwxjb8QCXBorqz1mFXa9+OgthZxW7+IV3DifPJw==
X-Received: by 2002:a63:9402:: with SMTP id m2mr2319362pge.93.1542061166815;
        Mon, 12 Nov 2018 14:19:26 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:c304:0:0:0:0 with SMTP id g4-v6csp3737841pjt;
        Mon, 12 Nov 2018 14:19:25 -0800 (PST)
X-Google-Smtp-Source: AJdET5cp36VSOLsJK+SGIsZN9DE0CyNOQG2+PJuVtf+V74Y08SVyHrk9Qzw+GwTVhwPmX4c138fU
X-Received: by 2002:a62:178c:: with SMTP id 134-v6mr2655521pfx.29.1542061165640;
        Mon, 12 Nov 2018 14:19:25 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542061165; cv=none;
        d=google.com; s=arc-20160816;
        b=mnATiAxcPgDmiz/Xzeeb5kC4djrUugsEsZgexE8cPungVE91KgekKDGI1f2PckOn4r
         K/P8ZZ+YIzh5V/GL6DRJg6yuJb9NeGuZGwgNdlfgpTNgaG6yKupO/Ma08v9rDXfN8qiP
         41FSRbhgmZ0LtRBkf+++p9b0eiGrX04uTF1LEsL9dNMW9kO4E1fhtEQijb9JomwIf/Ev
         4Bx1tIpUEZW4dRRrftOpZY3aOSkLQh3Nt91V3FyV0IB5yreUCivIf3OM7UYsMjPtYEYl
         nW75Sv4MO2UtABBuKWRn7F4Z6Ck3+2Ygusm6lH27TESgkWyNCCMgWeZZU+BX0cPpAoX6
         KzUQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:date:subject:user-agent:message-id
         :references:cc:in-reply-to:from:to:content-transfer-encoding
         :mime-version:dkim-signature;
        bh=a4u/jlBP9RZOVfS8Va4jGnFIBZxgatKBrrn5fbtqYyg=;
        b=t72DyHXliHcTn1M7iyuhGBYoOOIKFTb0sBUKr0BkEgAOAWMQRUYrppKjU0yDYl8HCS
         mGWP2zyfQ+uv+0D4OIaD4BYYTJ6ypIutq2vjaK5EVyeb9FxGeSJZjj4kB7hwAfpuXg+v
         MqZVk2J+KqJG16FHt0u/VugyHGWUq8nxIdMFJzg+zT9K1LP0qs+btMRpac3kD9xRpp9z
         VnfOSyq0rKC4eA6nOhTHUTdlkj4DsUPknUZQ8SVasK7tHXDSDmEeEKBgombXUR7Cj9pn
         DX6OdWnc6ciaOYGoFazZ2Onwc1s1uoY6BKru1kycRm8xJiAHBdwyRQ8xndklkrqLynuw
         5a3g==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@baylibre-com.20150623.gappssmtp.com header.s=20150623 header.b=ZQGJA0mU;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id b4-v6si20550188pfa.25.2018.11.12.14.19.11;
        Mon, 12 Nov 2018 14:19:25 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730734AbeKMINz (ORCPT <rfc822;jbenoit100@gmail.com>
        + 99 others); Tue, 13 Nov 2018 03:13:55 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:38736 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730587AbeKMINz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 13 Nov 2018 03:13:55 -0500
Received: by mail-pl1-f193.google.com with SMTP id p4-v6so4972169plo.5
        for <linux-kernel@vger.kernel.org>; Mon, 12 Nov 2018 14:18:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=baylibre-com.20150623.gappssmtp.com; s=20150623;
        h=mime-version:content-transfer-encoding:to:from:in-reply-to:cc
         :references:message-id:user-agent:subject:date;
        bh=a4u/jlBP9RZOVfS8Va4jGnFIBZxgatKBrrn5fbtqYyg=;
        b=ZQGJA0mUDXgIjmklBpx+FpUR4trb8RcS4g0vZsO2DsEhgmVw65ibg6bczE8kBmR3ZV
         AmwkJOi9U7FeeCe1rYJUxQEaHYNd/l1oVKe4LkQrl7NWXrKVXjUBd1FmtimwgHCR9TvF
         LsFhs94ePU9gWjWFfqn3Veq88NR4W08VMtn1Rcpiv7d9Evgu8/RHgoAauGQVcSd4dZtG
         H5bE96uNJZDsqYx2xcMmXbCYkU+PqPoDK+Ud0DqqZGZtTF8CzGWx6wN2HFH2TR5tWueN
         Ks7pETP7NcHjOPatW/oZUe68sF5rIfh6ng2w1ZnFov6cJpRXvNg6UvdM3KqKXf+iO4wI
         tKiw==
X-Received: by 2002:a17:902:c7:: with SMTP id a65-v6mr2649345pla.296.1542061126816;
        Mon, 12 Nov 2018 14:18:46 -0800 (PST)
Received: from localhost ([2605:e000:151d:2254:69be:948f:308c:ece4])
        by smtp.gmail.com with ESMTPSA id m12-v6sm21436821pff.173.2018.11.12.14.18.45
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 12 Nov 2018 14:18:45 -0800 (PST)
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
To: "A.s. Dong" <aisheng.dong@nxp.com>,
        "linux-clk@vger.kernel.org" <linux-clk@vger.kernel.org>
From: Michael Turquette <mturquette@baylibre.com>
In-Reply-To: <1540127173-21346-2-git-send-email-aisheng.dong@nxp.com>
Cc: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>,
        "sboyd@kernel.org" <sboyd@kernel.org>,
        "shawnguo@kernel.org" <shawnguo@kernel.org>,
        Anson Huang <anson.huang@nxp.com>,
        Jacky Bai <ping.bai@nxp.com>, dl-linux-imx <linux-imx@nxp.com>,
        "A.s. Dong" <aisheng.dong@nxp.com>,
        Stephen Boyd <sboyd@codeaurora.org>
References: <1540127173-21346-1-git-send-email-aisheng.dong@nxp.com>
 <1540127173-21346-2-git-send-email-aisheng.dong@nxp.com>
Message-ID: <20181105005928.12299.56045@resonance>
User-Agent: alot/0.7
Subject: Re: [PATCH RESEND V4 1/9] clk: clk-divider: add CLK_DIVIDER_ZERO_GATE clk
 support
Date: Sun, 04 Nov 2018 16:59:28 -0800
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAH5D9v_Olb4xw0AA--.2146S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3ur1kWryUJFWxuF4fuFy5CFg_yoWDWw1UpF
	Wvyas5KayjqF17WwsrJrW2qF98XFyDt3W7CryxG348Gry5G3yUtw4xWryS9F43Cr17uw47
	X3yjqrWDCr4FyrJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmIb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M280x2IEY4vE77IFxVWkZVCq3wA2ocxC64kIII0Yj41l84x0c7CEw4AK67
	xGY2AK021l84ACjcxK6xIIjxv20xvE14v26F1j6w1UM28EF7xvwVC0I7IYx2IY6xkF7I0E
	14v26r4j6F4UM28EF7xvwVC2z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14
	v26rxl6s0DM2AIxVAIcxkEcVAq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xf
	McIj6xIIjxv20xvE14v26r106r15McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7
	v_Jr0_Gr1lF7xvr2IY64vIr41l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAv
	wVCFzxkY4VCF77xAMxkIecxEwVCI4VW3MxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2
	IY67AKxVW8JVW5JwCYIxAIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv
	67AKxVW8Jr0_Cr1UMxvI42IY6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64
	vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_
	Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17
	CE14v26r1q6r43MIIYrxkI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnI
	WIevJa73UjIFyTuYvjxUQppBDUUUU

Hi Dong,

Quoting A.s. Dong (2018-10-21 06:10:48)
> For dividers with zero indicating clock is disabled, instead of giving a
> warning each time like "clkx: Zero divisor and CLK_DIVIDER_ALLOW_ZERO not
> set" in exist code, we'd like to introduce enable/disable function for it.
> e.g.
> 000b - Clock disabled
> 001b - Divide by 1
> 010b - Divide by 2
> ...

I feel bad to NAK this patch after it's been on the list for so long,
but this implementation really should belong in your hardware specific
clock provider driver.

This patch expands clk-divider to also be a gate, which is a
non-starter.  Basic clock types were meant to remain basic. I'm already
imagining how this precedent would cause other submissions: "why should
I use composite clock when we can just add new clk_ops to the basic
clock types!" :-(

Also the implementation becomes cleaner when you don't have to make it
coexist with clk-divider.c. You can drop the flags and just implement a
machine specific clock type that combines gates and dividers.

Best regards,
Mike

> =

> Set rate when the clk is disabled will cache the rate request and only
> when the clk is enabled will the driver actually program the hardware to
> have the requested divider value. Similarly, when the clk is disabled we'=
ll
> write a 0 there, but when the clk is enabled we'll restore whatever rate
> (divider) was chosen last.
> =

> It does mean that recalc rate will be sort of odd, because when the clk is
> off it will return 0, and when the clk is on it will return the right rat=
e.
> So to make things work, we'll need to return the cached rate in recalc ra=
te
> when the clk is off and read the hardware when the clk is on.
> =

> NOTE for the default off divider, the recalc rate will still return 0 as
> there's still no proper preset rate. Enable such divider will give user
> a reminder error message.
> =

> Cc: Stephen Boyd <sboyd@codeaurora.org>
> Cc: Michael Turquette <mturquette@baylibre.com>
> Cc: Shawn Guo <shawnguo@kernel.org>
> Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
> =

> ---
> ChangeLog:
> v3->v4:
>  * no changes
> v2->v3:
>  * split normal and gate ops
>  * fix the possible racy
> v1->v2:
>  * add enable/disable for the type of CLK_DIVIDER_ZERO_GATE dividers
> ---
>  drivers/clk/clk-divider.c    | 152 +++++++++++++++++++++++++++++++++++++=
++++++
>  include/linux/clk-provider.h |   9 +++
>  2 files changed, 161 insertions(+)
> =

> diff --git a/drivers/clk/clk-divider.c b/drivers/clk/clk-divider.c
> index b6234a5..b3566fd 100644
> --- a/drivers/clk/clk-divider.c
> +++ b/drivers/clk/clk-divider.c
> @@ -122,6 +122,9 @@ unsigned long divider_recalc_rate(struct clk_hw *hw, =
unsigned long parent_rate,
>  =

>         div =3D _get_div(table, val, flags, width);
>         if (!div) {
> +               if (flags & CLK_DIVIDER_ZERO_GATE)
> +                       return 0;
> +
>                 WARN(!(flags & CLK_DIVIDER_ALLOW_ZERO),
>                         "%s: Zero divisor and CLK_DIVIDER_ALLOW_ZERO not =
set\n",
>                         clk_hw_get_name(hw));
> @@ -145,6 +148,34 @@ static unsigned long clk_divider_recalc_rate(struct =
clk_hw *hw,
>                                    divider->flags, divider->width);
>  }
>  =

> +static unsigned long clk_divider_gate_recalc_rate(struct clk_hw *hw,
> +                                                 unsigned long parent_ra=
te)
> +{
> +       struct clk_divider *divider =3D to_clk_divider(hw);
> +       unsigned long flags =3D 0;
> +       unsigned int val;
> +
> +       if (divider->lock)
> +               spin_lock_irqsave(divider->lock, flags);
> +       else
> +               __acquire(divider->lock);
> +
> +       if (!clk_hw_is_enabled(hw)) {
> +               val =3D divider->cached_val;
> +       } else {
> +               val =3D clk_readl(divider->reg) >> divider->shift;
> +               val &=3D clk_div_mask(divider->width);
> +       }
> +
> +       if (divider->lock)
> +               spin_unlock_irqrestore(divider->lock, flags);
> +       else
> +               __release(divider->lock);
> +
> +       return divider_recalc_rate(hw, parent_rate, val, divider->table,
> +                                  divider->flags, divider->width);
> +}
> +
>  static bool _is_valid_table_div(const struct clk_div_table *table,
>                                                          unsigned int div)
>  {
> @@ -437,6 +468,108 @@ static int clk_divider_set_rate(struct clk_hw *hw, =
unsigned long rate,
>         return 0;
>  }
>  =

> +static int clk_divider_gate_set_rate(struct clk_hw *hw, unsigned long ra=
te,
> +                               unsigned long parent_rate)
> +{
> +       struct clk_divider *divider =3D to_clk_divider(hw);
> +       unsigned long flags =3D 0;
> +       int value;
> +       u32 val;
> +
> +       value =3D divider_get_val(rate, parent_rate, divider->table,
> +                               divider->width, divider->flags);
> +       if (value < 0)
> +               return value;
> +
> +       if (divider->lock)
> +               spin_lock_irqsave(divider->lock, flags);
> +       else
> +               __acquire(divider->lock);
> +
> +       if (clk_hw_is_enabled(hw)) {
> +               if (divider->flags & CLK_DIVIDER_HIWORD_MASK) {
> +                       val =3D clk_div_mask(divider->width) << (divider-=
>shift + 16);
> +               } else {
> +                       val =3D clk_readl(divider->reg);
> +                       val &=3D ~(clk_div_mask(divider->width) << divide=
r->shift);
> +               }
> +               val |=3D (u32)value << divider->shift;
> +               clk_writel(val, divider->reg);
> +       } else {
> +               divider->cached_val =3D value;
> +       }
> +
> +       if (divider->lock)
> +               spin_unlock_irqrestore(divider->lock, flags);
> +       else
> +               __release(divider->lock);
> +
> +       return 0;
> +}
> +
> +static int clk_divider_enable(struct clk_hw *hw)
> +{
> +       struct clk_divider *divider =3D to_clk_divider(hw);
> +       unsigned long flags =3D 0;
> +       u32 val;
> +
> +       if (!divider->cached_val) {
> +               pr_err("%s: no valid preset rate\n", clk_hw_get_name(hw));
> +               return -EINVAL;
> +       }
> +
> +       if (divider->lock)
> +               spin_lock_irqsave(divider->lock, flags);
> +       else
> +               __acquire(divider->lock);
> +
> +       /* restore div val */
> +       val =3D clk_readl(divider->reg);
> +       val |=3D divider->cached_val << divider->shift;
> +       clk_writel(val, divider->reg);
> +
> +       if (divider->lock)
> +               spin_unlock_irqrestore(divider->lock, flags);
> +       else
> +               __release(divider->lock);
> +
> +       return 0;
> +}
> +
> +static void clk_divider_disable(struct clk_hw *hw)
> +{
> +       struct clk_divider *divider =3D to_clk_divider(hw);
> +       unsigned long flags =3D 0;
> +       u32 val;
> +
> +       if (divider->lock)
> +               spin_lock_irqsave(divider->lock, flags);
> +       else
> +               __acquire(divider->lock);
> +
> +       /* store the current div val */
> +       val =3D clk_readl(divider->reg) >> divider->shift;
> +       val &=3D clk_div_mask(divider->width);
> +       divider->cached_val =3D val;
> +       clk_writel(0, divider->reg);
> +
> +       if (divider->lock)
> +               spin_unlock_irqrestore(divider->lock, flags);
> +       else
> +               __release(divider->lock);
> +}
> +
> +static int clk_divider_is_enabled(struct clk_hw *hw)
> +{
> +       struct clk_divider *divider =3D to_clk_divider(hw);
> +       u32 val;
> +
> +       val =3D clk_readl(divider->reg) >> divider->shift;
> +       val &=3D clk_div_mask(divider->width);
> +
> +       return val ? 1 : 0;
> +}
> +
>  const struct clk_ops clk_divider_ops =3D {
>         .recalc_rate =3D clk_divider_recalc_rate,
>         .round_rate =3D clk_divider_round_rate,
> @@ -444,6 +577,16 @@ const struct clk_ops clk_divider_ops =3D {
>  };
>  EXPORT_SYMBOL_GPL(clk_divider_ops);
>  =

> +const struct clk_ops clk_divider_gate_ops =3D {
> +       .recalc_rate =3D clk_divider_gate_recalc_rate,
> +       .round_rate =3D clk_divider_round_rate,
> +       .set_rate =3D clk_divider_gate_set_rate,
> +       .enable =3D clk_divider_enable,
> +       .disable =3D clk_divider_disable,
> +       .is_enabled =3D clk_divider_is_enabled,
> +};
> +EXPORT_SYMBOL_GPL(clk_divider_gate_ops);
> +
>  const struct clk_ops clk_divider_ro_ops =3D {
>         .recalc_rate =3D clk_divider_recalc_rate,
>         .round_rate =3D clk_divider_round_rate,
> @@ -459,6 +602,7 @@ static struct clk_hw *_register_divider(struct device=
 *dev, const char *name,
>         struct clk_divider *div;
>         struct clk_hw *hw;
>         struct clk_init_data init;
> +       u32 val;
>         int ret;
>  =

>         if (clk_divider_flags & CLK_DIVIDER_HIWORD_MASK) {
> @@ -476,6 +620,8 @@ static struct clk_hw *_register_divider(struct device=
 *dev, const char *name,
>         init.name =3D name;
>         if (clk_divider_flags & CLK_DIVIDER_READ_ONLY)
>                 init.ops =3D &clk_divider_ro_ops;
> +       else if (clk_divider_flags & CLK_DIVIDER_ZERO_GATE)
> +               init.ops =3D &clk_divider_gate_ops;
>         else
>                 init.ops =3D &clk_divider_ops;
>         init.flags =3D flags | CLK_IS_BASIC;
> @@ -491,6 +637,12 @@ static struct clk_hw *_register_divider(struct devic=
e *dev, const char *name,
>         div->hw.init =3D &init;
>         div->table =3D table;
>  =

> +       if (div->flags & CLK_DIVIDER_ZERO_GATE) {
> +               val =3D clk_readl(reg) >> shift;
> +               val &=3D clk_div_mask(width);
> +               div->cached_val =3D val;
> +       }
> +
>         /* register the clock */
>         hw =3D &div->hw;
>         ret =3D clk_hw_register(dev, hw);
> diff --git a/include/linux/clk-provider.h b/include/linux/clk-provider.h
> index 08b1aa7..08f135a 100644
> --- a/include/linux/clk-provider.h
> +++ b/include/linux/clk-provider.h
> @@ -387,6 +387,7 @@ struct clk_div_table {
>   * @shift:     shift to the divider bit field
>   * @width:     width of the divider bit field
>   * @table:     array of value/divider pairs, last entry should have div =
=3D 0
> + * @cached_val: cached div hw value used for CLK_DIVIDER_ZERO_GATE
>   * @lock:      register lock
>   *
>   * Clock with an adjustable divider affecting its output frequency.  Imp=
lements
> @@ -415,6 +416,12 @@ struct clk_div_table {
>   * CLK_DIVIDER_MAX_AT_ZERO - For dividers which are like CLK_DIVIDER_ONE=
_BASED
>   *     except when the value read from the register is zero, the divisor=
 is
>   *     2^width of the field.
> + * CLK_DIVIDER_ZERO_GATE - For dividers which are like CLK_DIVIDER_ONE_B=
ASED
> + *     when the value read from the register is zero, it means the divis=
or
> + *     is gated. For this case, the cached_val will be used to store the
> + *     intermediate div for the normal rate operation, like set_rate/get=
_rate/
> + *     recalc_rate. When the divider is ungated, the driver will actually
> + *     program the hardware to have the requested divider value.
>   */
>  struct clk_divider {
>         struct clk_hw   hw;
> @@ -423,6 +430,7 @@ struct clk_divider {
>         u8              width;
>         u8              flags;
>         const struct clk_div_table      *table;
> +       u32             cached_val;
>         spinlock_t      *lock;
>  };
>  =

> @@ -436,6 +444,7 @@ struct clk_divider {
>  #define CLK_DIVIDER_ROUND_CLOSEST      BIT(4)
>  #define CLK_DIVIDER_READ_ONLY          BIT(5)
>  #define CLK_DIVIDER_MAX_AT_ZERO                BIT(6)
> +#define CLK_DIVIDER_ZERO_GATE          BIT(7)
>  =

>  extern const struct clk_ops clk_divider_ops;
>  extern const struct clk_ops clk_divider_ro_ops;
> -- =

> 2.7.4
>=20
