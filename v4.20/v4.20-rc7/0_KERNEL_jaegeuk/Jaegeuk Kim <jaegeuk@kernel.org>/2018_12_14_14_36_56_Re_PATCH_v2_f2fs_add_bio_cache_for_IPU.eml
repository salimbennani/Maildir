Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:05:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CC1EF5805FC;
	Fri, 14 Dec 2018 06:37:04 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 06:37:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AhSF6yREqag5lTDBwkYEu/J1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8i6bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakWS++60qbIwiveb/NVxDzz7YnIchU8qvyLX7J/a9TeyUYxGAPYjVWd?=
 =?us-ascii?q?so/lMC2P1uQLrWeb6/BsVeW1i24osgx8pCWkyMQ0ioTRmI4Z1lTJ+T9kzIs7O9?=
 =?us-ascii?q?G0UlN3bN24HJdKtiyXNZN6T8chTm1ypio3xLILtYS7cSUK0pgqwx3SZvqaeIaS?=
 =?us-ascii?q?+B3jTvyeITJgiXJlZr2/gxGy/FC+yu3zSMa0ykxGrilbndnWsHACyRjT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJpo7zrItmJcfr17PEjL1lUnqlqObd0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkuns2/AeIlMgkBRmSb+vqz1Kfl/ULnRLVGl/o2k6?=
 =?us-ascii?q?ffsJ/EP8QWvbC5AwBL3YY58Rq/DCmp0M4enXYZKFJJYhWHj5LmO13WOvD3Ee+/?=
 =?us-ascii?q?g0iwkDds3/3GOrzhApbTIXTZn7bhYK1w60pdyAo10NBe6IhYCrAHIPLvREDxsM?=
 =?us-ascii?q?bUAQM+Mwyx2+znEsly1psCWWKTBa+UKKPSvkWJ5uIzOeaMY5UZuDbgK/c/4f7u?=
 =?us-ascii?q?gmQ0mVscfamvwJsWZ2q0HvVgI0WFf3Xshs0NHnsNvgo7VObqkkGNUSZPZ3auWK?=
 =?us-ascii?q?Ix/jM7CIW4AovZRYCth7qB3CG8HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJ35z9h15+rTlRIo+TxuFcud0XqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZtSJR0yg?=
 =?us-ascii?q?Qtm8BTExT8g+w9kBY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gfOHYHJjVuWm7yqdasG2i7N73mMzWyJsEFcUw5wVKHF?=
 =?us-ascii?q?UGsbZkvXq9T5+0zDQ6WvCbQhLgtO18qCJrFWZd3uiFVMXO3jN8jGY2Kth2ewAg?=
 =?us-ascii?q?6Fya6WY4r0ZWoRxiXdB1ICkwAI43mGMxMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDshqzRxHFa6w9LWC9qBqxB9fKlGZt?=
 =?us-ascii?q?M9+lNH1WPftwxyJZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq5h+vb7DZ217A39eW4KsA8+k4pEj5swGvFUoi9Gtn3sJR03?=
 =?us-ascii?q?ud4JXKEQUTXYjwUkYx6xh1ubXabjMh6IPT0H1mKbO0vSPa29I1GOslzQ6tftdC?=
 =?us-ascii?q?MK+eCAD+CcwbB8i0J+wslFikdRYEPOFU9K4pMMKqbfqG2Ki3POl+mDKql3hI4I?=
 =?us-ascii?q?d40kiU7SpzVvbI34oZw/GfxgaHTTb8g0u7vcDthI9EYiseHmyhxij+BY5df7F9?=
 =?us-ascii?q?cpwPCWizPcK33NJ+h5j2Vn5c9V6jAU4G2cCzdRqTaVz9wRNf1UANrXO7niu4yi?=
 =?us-ascii?q?R+kys1oaqHwCzO3+PieQIHO25KXmVjjU3gIZOpj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkY1CVUKT9oxgZ0yPkBW?=
 =?us-ascii?q?de3yo0dzKpupX4mRx1lmSdIW13rHrYf8Fw2Bje6MbdRf5XwjoJWi14hSPLCVi7?=
 =?us-ascii?q?Otmj5c+UmIvbsuCiS2KhUYVecCnxwoOHrie752xqARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkT2XcAh5WZ53oHkXrp?=
 =?us-ascii?q?PtVd1qLzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1p1u4rQHLbvRnkDYS1+Au6GIEjOETowUi0D+dAr8JEElcPCzskQmI?=
 =?us-ascii?q?7t+koKVWYmavbaa/1E5kkd+9C7GCpxlWWGzldZc6AS9w8sJ/PUrQ0H3074HoYt?=
 =?us-ascii?q?jRYsgVth2JiBfAlOlVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5Tkd2M0ICoGpVhBy8HXJ/1Tf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQAWRjo6m4A2FhuwyMz9?=
 =?us-ascii?q?akt55S0R5l3lqhtK0O1oLALyUmPepAeudzc1R4KTLBtQ7gFe+UjVNdaS4f50Hy?=
 =?us-ascii?q?Fd5pehthCCKnSHZwRUCmEEQkyFB1f+Prm3+NnP6e6YCvClL/vJZ7WOpvdTV/OJ?=
 =?us-ascii?q?xZKpz4tn8CyANsSJPnl+EfI73lBPUmx+G8Tcgz8PUTAYlzrRb86Hoxex4i13od?=
 =?us-ascii?q?6+8PToWwLv5JGDC7hIMdVo9BC5n72DN/OLhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0wZXJM7Ukcn12aB4j/IvD1dFVE?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyXpVxGqMe1WkC6XJgBRuIGjfRZrEmXjSNPmahumMN54lzE2wLs0hm/UOm4YKz?=
 =?us-ascii?q?Rzb0RNrriI5yNCnvp/A3BB7mZiLeScmyeW9e/YKpMXsfttGit1luJa7248y7ta?=
 =?us-ascii?q?9yxEQP11mC3Prt9huV2mk++PyiZ5XxpKsDpEmIWLvUAxcZneo7JAUHGMzQ9FuX?=
 =?us-ascii?q?SNABQDoINNCsDmpK1RjNPIkfSgBi1F9of29MYTCtXXYOGGNTJ1MxPkFzPJDyMG?=
 =?us-ascii?q?QCStOGWZgFZSxqLBvkaJp4Q3/8C/0KEFTaVWARlsTqsX?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADevhNch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMFV+NJRSXQ4F2ERgTAYdHIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQUJAQEKGAklAwwFS?=
 =?us-ascii?q?RMFgxyBeQgFpHiBbDOCdgEBBYcpCIsigRwXgUA/gRGDEog4giaJOocSUYRsixE?=
 =?us-ascii?q?JgiiPJyOBXYUcilmKQI8hgUaCDjMaCCgIgyeCGwwXiF6FYB8ygQIDAQEhE4o2K?=
 =?us-ascii?q?oIjAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADevhNch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMFV+NJRSXQ4F2ERgTAYdHIjQJDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2JAGCYQEBAQECAQECJBMGAQE3AQUJAQEKGAklAwwFSRMFgxyBeQgFpHi?=
 =?us-ascii?q?BbDOCdgEBBYcpCIsigRwXgUA/gRGDEog4giaJOocSUYRsixEJgiiPJyOBXYUci?=
 =?us-ascii?q?lmKQI8hgUaCDjMaCCgIgyeCGwwXiF6FYB8ygQIDAQEhE4o2KoIjAQE?=
X-IronPort-AV: E=Sophos;i="5.56,353,1539673200"; 
   d="scan'208";a="55198948"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 06:37:02 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730276AbeLNOg6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 09:36:58 -0500
Received: from mail.kernel.org ([198.145.29.99]:54634 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726554AbeLNOg6 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 09:36:58 -0500
Received: from localhost (c-98-234-55-98.hsd1.ca.comcast.net [98.234.55.98])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 7F54C206BA;
        Fri, 14 Dec 2018 14:36:56 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544798216;
        bh=GIOT5kMXcwawMP7ENr51g9DnRDRdKQHdKGsVVDEsbjs=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=Pd1DOeVAcJVuu9fiBeJEExga8dP2fkivoXAOIV/xoULUvVQUbxKr13Jbzz5JZpve5
         8XivMRunf85R1vpIRjvxv7ohWAqnZUx56wqn7UiEetlvPV0aeHYot1mAsZFcGZSUvi
         5bNlnTKtVPDGMUevIvuIcYLkqYmnmBkZUZkDx0V4=
Date: Fri, 14 Dec 2018 06:36:56 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Chao Yu <yuchao0@huawei.com>
Cc: linux-f2fs-devel@lists.sourceforge.net,
        linux-kernel@vger.kernel.org, chao@kernel.org
Subject: Re: [PATCH v2] f2fs: add bio cache for IPU
Message-ID: <20181214143656.GB75922@jaegeuk-macbookpro.roam.corp.google.com>
References: <20181119032924.12587-1-yuchao0@huawei.com>
 <ba61f507-a209-76c9-a10e-c847b07caf40@huawei.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <ba61f507-a209-76c9-a10e-c847b07caf40@huawei.com>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/14, Chao Yu wrote:
> Hi Jaegeuk,
> 
> I guess ("f2fs: clear PG_writeback if IPU failed") and v2 patch can fix
> hang issue caused by v1 one, could you please have a try with v2?

Sure.

> 
> Thanks,
> 
> On 2018/11/19 11:29, Chao Yu wrote:
> > SQLite in Wal mode may trigger sequential IPU write in db-wal file, after
> > commit d1b3e72d5490 ("f2fs: submit bio of in-place-update pages"), we
> > lost the chance of merging page in inner managed bio cache, result in
> > submitting more small-sized IO.
> > 
> > So let's add temporary bio in writepages() to cache mergeable write IO as
> > much as possible.
> > 
> > Test case:
> > 1. xfs_io -f /mnt/f2fs/file -c "pwrite 0 65536" -c "fsync"
> > 2. xfs_io -f /mnt/f2fs/file -c "pwrite 0 65536" -c "fsync"
> > 
> > Before:
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65544, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65552, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65560, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65568, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65576, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65584, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65592, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65600, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65608, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65616, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65624, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65632, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65640, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65648, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65656, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65664, size = 4096
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), NODE, sector = 57352, size = 4096
> > 
> > After:
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65544, size = 65536
> > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), NODE, sector = 57368, size = 4096
> > 
> > Signed-off-by: Chao Yu <yuchao0@huawei.com>
> > ---
> > v2:
> > - submit cached bio for cp error case.
> >  fs/f2fs/data.c    | 61 +++++++++++++++++++++++++++++++++++++++++++++--
> >  fs/f2fs/f2fs.h    |  3 +++
> >  fs/f2fs/segment.c |  5 +++-
> >  3 files changed, 66 insertions(+), 3 deletions(-)
> > 
> > diff --git a/fs/f2fs/data.c b/fs/f2fs/data.c
> > index 8780f3d737c4..7dffafb8b2c5 100644
> > --- a/fs/f2fs/data.c
> > +++ b/fs/f2fs/data.c
> > @@ -474,6 +474,49 @@ int f2fs_submit_page_bio(struct f2fs_io_info *fio)
> >  	return 0;
> >  }
> >  
> > +int f2fs_merge_page_bio(struct f2fs_io_info *fio)
> > +{
> > +	struct bio *bio = *fio->bio;
> > +	struct page *page = fio->encrypted_page ?
> > +			fio->encrypted_page : fio->page;
> > +
> > +	if (!f2fs_is_valid_blkaddr(fio->sbi, fio->new_blkaddr,
> > +			__is_meta_io(fio) ? META_GENERIC : DATA_GENERIC))
> > +		return -EFAULT;
> > +
> > +	trace_f2fs_submit_page_bio(page, fio);
> > +	f2fs_trace_ios(fio, 0);
> > +
> > +	if (bio && (*fio->last_block + 1 != fio->new_blkaddr ||
> > +			!__same_bdev(fio->sbi, fio->new_blkaddr, bio))) {
> > +		__submit_bio(fio->sbi, bio, fio->type);
> > +		bio = NULL;
> > +	}
> > +alloc_new:
> > +	if (!bio) {
> > +		bio = __bio_alloc(fio->sbi, fio->new_blkaddr, fio->io_wbc,
> > +				BIO_MAX_PAGES, false, fio->type, fio->temp);
> > +		*fio->last_block = fio->new_blkaddr;
> > +		bio_set_op_attrs(bio, fio->op, fio->op_flags);
> > +	}
> > +
> > +	if (bio_add_page(bio, page, PAGE_SIZE, 0) < PAGE_SIZE) {
> > +		__submit_bio(fio->sbi, bio, fio->type);
> > +		bio = NULL;
> > +		goto alloc_new;
> > +	}
> > +
> > +	if (fio->io_wbc)
> > +		wbc_account_io(fio->io_wbc, page, PAGE_SIZE);
> > +
> > +	*fio->last_block = fio->new_blkaddr;
> > +
> > +	inc_page_count(fio->sbi, WB_DATA_TYPE(fio->page));
> > +
> > +	*fio->bio = bio;
> > +	return 0;
> > +}
> > +
> >  void f2fs_submit_page_write(struct f2fs_io_info *fio)
> >  {
> >  	struct f2fs_sb_info *sbi = fio->sbi;
> > @@ -1894,6 +1937,8 @@ int f2fs_do_write_data_page(struct f2fs_io_info *fio)
> >  }
> >  
> >  static int __write_data_page(struct page *page, bool *submitted,
> > +				struct bio **bio,
> > +				sector_t *last_block,
> >  				struct writeback_control *wbc,
> >  				enum iostat_type io_type)
> >  {
> > @@ -1919,6 +1964,8 @@ static int __write_data_page(struct page *page, bool *submitted,
> >  		.need_lock = LOCK_RETRY,
> >  		.io_type = io_type,
> >  		.io_wbc = wbc,
> > +		.bio = bio,
> > +		.last_block = last_block,
> >  	};
> >  
> >  	trace_f2fs_writepage(page, DATA);
> > @@ -2020,6 +2067,10 @@ static int __write_data_page(struct page *page, bool *submitted,
> >  		f2fs_balance_fs(sbi, need_balance_fs);
> >  
> >  	if (unlikely(f2fs_cp_error(sbi))) {
> > +		if (bio && *bio) {
> > +			__submit_bio(sbi, *bio, DATA);
> > +			*bio = NULL;
> > +		}
> >  		f2fs_submit_merged_write(sbi, DATA);
> >  		submitted = NULL;
> >  	}
> > @@ -2046,7 +2097,7 @@ static int __write_data_page(struct page *page, bool *submitted,
> >  static int f2fs_write_data_page(struct page *page,
> >  					struct writeback_control *wbc)
> >  {
> > -	return __write_data_page(page, NULL, wbc, FS_DATA_IO);
> > +	return __write_data_page(page, NULL, NULL, NULL, wbc, FS_DATA_IO);
> >  }
> >  
> >  /*
> > @@ -2062,6 +2113,8 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
> >  	int done = 0;
> >  	struct pagevec pvec;
> >  	struct f2fs_sb_info *sbi = F2FS_M_SB(mapping);
> > +	struct bio *bio = NULL;
> > +	sector_t last_block;
> >  	int nr_pages;
> >  	pgoff_t uninitialized_var(writeback_index);
> >  	pgoff_t index;
> > @@ -2149,7 +2202,8 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
> >  			if (!clear_page_dirty_for_io(page))
> >  				goto continue_unlock;
> >  
> > -			ret = __write_data_page(page, &submitted, wbc, io_type);
> > +			ret = __write_data_page(page, &submitted, &bio,
> > +						&last_block, wbc, io_type);
> >  			if (unlikely(ret)) {
> >  				/*
> >  				 * keep nr_to_write, since vfs uses this to
> > @@ -2198,6 +2252,9 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
> >  	if (nwritten)
> >  		f2fs_submit_merged_write_cond(F2FS_M_SB(mapping), mapping->host,
> >  								NULL, 0, DATA);
> > +	/* submit cached bio of IPU write */
> > +	if (bio)
> > +		__submit_bio(sbi, bio, DATA);
> >  
> >  	return ret;
> >  }
> > diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> > index 26ad1de8641c..d0bb679fd668 100644
> > --- a/fs/f2fs/f2fs.h
> > +++ b/fs/f2fs/f2fs.h
> > @@ -1051,6 +1051,8 @@ struct f2fs_io_info {
> >  	bool retry;		/* need to reallocate block address */
> >  	enum iostat_type io_type;	/* io type */
> >  	struct writeback_control *io_wbc; /* writeback control */
> > +	struct bio **bio;		/* bio for ipu */
> > +	sector_t *last_block;		/* last block number in bio */
> >  	unsigned char version;		/* version of the node */
> >  };
> >  
> > @@ -3093,6 +3095,7 @@ void f2fs_submit_merged_write_cond(struct f2fs_sb_info *sbi,
> >  				nid_t ino, enum page_type type);
> >  void f2fs_flush_merged_writes(struct f2fs_sb_info *sbi);
> >  int f2fs_submit_page_bio(struct f2fs_io_info *fio);
> > +int f2fs_merge_page_bio(struct f2fs_io_info *fio);
> >  void f2fs_submit_page_write(struct f2fs_io_info *fio);
> >  struct block_device *f2fs_target_device(struct f2fs_sb_info *sbi,
> >  			block_t blk_addr, struct bio *bio);
> > diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
> > index 204d31e58967..b0e6331a5d95 100644
> > --- a/fs/f2fs/segment.c
> > +++ b/fs/f2fs/segment.c
> > @@ -3158,7 +3158,10 @@ int f2fs_inplace_write_data(struct f2fs_io_info *fio)
> >  
> >  	stat_inc_inplace_blocks(fio->sbi);
> >  
> > -	err = f2fs_submit_page_bio(fio);
> > +	if (fio->bio)
> > +		err = f2fs_merge_page_bio(fio);
> > +	else
> > +		err = f2fs_submit_page_bio(fio);
> >  	if (!err)
> >  		update_device_state(fio);
> >  
> > 
