Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:49:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 025D358079D;
	Wed, 12 Dec 2018 05:07:16 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 05:07:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aynk/PhxGMBPKjkTXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eLvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QOMuhXtIn9v1kDoACiCQSvHu7j1iVFimPq0aA8zu8vERvG3AslH98Wqn?=
 =?us-ascii?q?rUrNT1NKMTUeCt1KnH0yjIYe5K1jf99ofIdBMhru+WXbltdsfe1FcgFx3eg1WI?=
 =?us-ascii?q?sozqIzOV2foLs2iY8eVgT/ijhHInqwxopDWk28QiipHRi44L1lzJ8T91zJs7KN?=
 =?us-ascii?q?GmUkJ3fN2pHIdKuyybNYZ6WswvTmBytConxbAKpYS3cSoUxJg9xBPTdfqKeJWS?=
 =?us-ascii?q?7B35TuaeOzJ4iWpleL2hgxay9lCtyvPzVsaqylZGtClFncfWtnALyRPT7tKLSv?=
 =?us-ascii?q?xn/keuwTqP1gbT5f9YIU0si6bXN5oszqQtmpcdr0jPBDL6lUbqgKOMd0gp+PCk?=
 =?us-ascii?q?6+H9bbXnop+cOZV0igb7Mqk2nsy/AOI4MhUBXmSC+uSzyqfj/UvnT7VOl/E2la?=
 =?us-ascii?q?fYsJbEKsQBvaO5HQBV3Zg56xqlDDepzs4YnX8ZI1JBYh6HiJLpO17WLPDiEfi/?=
 =?us-ascii?q?m0iskCtsx/3eOr3hA5bNIWbZnLbuYLZw8EpcyAs1zdBC6JNYELABIPTvWkDvsN?=
 =?us-ascii?q?zUFAM2Mwuxw+z/EtVyypseWX6TAq+eKK7SsUWH5uMzI+aWY48Zojb9K+U/6P7o?=
 =?us-ascii?q?gn80glsdfaiv3ZsKZ3G0BPVmI0OFYXXyhtcNC3sFvg07TObykl2NTSZTZ2quX6?=
 =?us-ascii?q?I7/jw7CoWmApnZSoCuh7yB2iG7HppNa2BCC1CMF2rodoqeV/cNbiKSPtFukjge?=
 =?us-ascii?q?Wbe9TI8h0AmktBXmxLp/MurU5ioYuIr529hu5+3TkhIy+SZuD8uH0WGAVGV0nm?=
 =?us-ascii?q?IORz8r06Fzu019ylGf0admh/xUD8Bc5/RMUg0iL57T0/R6C8zuWgLGZtqJS0yp?=
 =?us-ascii?q?QtO8DTE1T9I+2dkOY0lmFtWmjxDD2TeqArAPm7yKApw07rzT33zrK8lhzHbG0b?=
 =?us-ascii?q?Erj0M6TctXKW2mmql/+hDOCIHTjUWWibymdaQG0y7L72eM02yOsEZcUA5zVKXF?=
 =?us-ascii?q?WWsSZk/XrdT/+0PDQKWiCbUhMgtd18GCLrFGZcHujVVDXP3jIsjRY3qtm2esAh?=
 =?us-ascii?q?aF3q6DY5D0e2oDxindCFILkwYI/XmYMwgzHSOho2PYDDxzGlPjeULs8e9iqHyl?=
 =?us-ascii?q?Sk841R2Fb0pk17Ct4B4ameScS+8P3rIDoCohtzR0HFO639LKC9qBpxBtfLlGbd?=
 =?us-ascii?q?M6+ldH0WPZtwpyPpG7K6Bih1gecxl4vk/01hV3DJlAntYurH8w0AVyLqeY2ktb?=
 =?us-ascii?q?dzyExZDwJqHXKm7q8R+1b67ZxF7f38iW+6sV8/s4tkjssxuvFkoh9HVnzcJY03?=
 =?us-ascii?q?+d5pXMEQoTXoj9Ukcx9xhmub7aZjMx6J/T1X1pKaO0qCPN28o1BOs5zRatZ9de?=
 =?us-ascii?q?ML6eGADuCcEbBsiuJ/Ysm1imdR8EOOFS9KgpP8KpbfeG2airPPp+kzKil2hI/I?=
 =?us-ascii?q?d90keU/SpmVuHIx4oFw+2f3gafTTf8jUuuvdrtmY9ZYjEeBGy/xjb+BI5Qf6F9?=
 =?us-ascii?q?YZwECWOzLMKp3NV+gJjtVmVc9F6iAVMGxcCodQCTb1z7wQ1fy0AXrWa7liu/yj?=
 =?us-ascii?q?x+iyspobaH3CzS3+TicwIKO25KRGV4jVbgO5O0j80cXEWzawgplR2l5Vv1xqRB?=
 =?us-ascii?q?paR/KXXTTllMfyTsM25iVa6wvKKYY8FT8JMorTlXUOOkbFCYULH9uRga0yDkH2?=
 =?us-ascii?q?dE3zA0bTKqupb4nxx8lm2dKm1+rH7YecF22Bfe68bQRf9X3joaWiZ4jSPbCUS7?=
 =?us-ascii?q?P9ms5d+UjYvMsviiV2K9UZ1eaSnqwpmHtCeh521qABu/kuu3mt3mFwg6zCD628?=
 =?us-ascii?q?NrVSXOsBbzfI3r276mPuJge0liHEX85NZiGoFijoswg4kd2XsAiZWU53YHkXrz?=
 =?us-ascii?q?Ps9d2aLxd3cNQT8Lw9jI4AnqwkFjL3SJx57nWXWZ2Mdue966YmYO0CIn889KEL?=
 =?us-ascii?q?uU7KBDnSZtp1q4rAHRbuJnkjYT1/Qu82IajP8TuAU20CqdGL8SEFJcPSztkRSI?=
 =?us-ascii?q?8t+/oL9WZGapbbi/yk5+kcq9A7GFpwFWQGz5dYs6HS9s8sV/N0rB0GH06oHhYt?=
 =?us-ascii?q?XRbMgcthuJkxfblOhVKYk8lv4LhSphJGL8smcpy+89jRxyw566uJKLJHlq/KK8?=
 =?us-ascii?q?GhRYLCH6Z9sP+jHxiqZTht2Z0JqoHpVlBzUHRp/oTe+zHTIWtPTnMRuOETImpn?=
 =?us-ascii?q?eaH7rfARGQ6EN8o33TFJCrMmmdJGMFwtV6WBmdOEtfjRgWXDogm542CBuqyNb9?=
 =?us-ascii?q?cEtj5TAR+134qgZKyu1yLBnySWPfpAauajcpR5mTNhtW7gde50jLNcyS9P58Hy?=
 =?us-ascii?q?Zd/pe5tgyCNnSbZxhUDWEOQkGFB1fjPqS35dnd6eeYAPCyL+DJYbWIpuxTTPOI?=
 =?us-ascii?q?xZOp0ot78DeALMSPPn9+D/Il3kpPR2x2G8Pcmz8XUSwYizrNb9KHpBe74iB3rt?=
 =?us-ascii?q?6w8PXoWALs5IuDEbhSMc9o+xC5n6iDLfOQhD1iJDZc15MMw2LIybcF0F4TjSFu?=
 =?us-ascii?q?ayeiEbAauSHRS6LQn7ddDwQHZCNrKMtI86U80xFXNs7Gkdz1zKB3j/4vB1dBVF?=
 =?us-ascii?q?zsgcWpZc0MI2GgO1LLHkeLNLKaJTLVx8H7e7+zSbpVjO9MrR2/pS6bE1P/PjSE?=
 =?us-ascii?q?jzTpSxGvMeRWgC6HJhBRpIG9fQhrCWX4SNLmaxu7MMJ4jDEswL00gG/KOnAYMT?=
 =?us-ascii?q?Rmb0xNqbiQ5ztCgvpjA2xB8mZlLe6clieZ9ebYLJMWsfptAitsluNa4G41y71a?=
 =?us-ascii?q?7CxfQPx1mS3SrsNhol28k+mPzCZnXwRKqjpRmI2LukBiau3l8cxCWH2epzoO4H?=
 =?us-ascii?q?+WBhBMoMFqTpXqsrpbx9yJhqPoNzZG/sj84cwGDsTZOISMN39leQH1FTDdCiMM?=
 =?us-ascii?q?QjimLyfUhx9zivaXo0WVr5w7soDh0KEFSrJdV1EvXqcWB1pNBMcJIJpxXT4+17?=
 =?us-ascii?q?Wb2p1brUGipQXcEZ0J9qvMUeifVLC2cG6U?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAAD5BhFch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeMFIwSgiGIf45AgXMUGBMBhz0iNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiQBgmIDAwECJAsBRgYJAQFQAx42BxIFgxyBagMVBAGmVTOIBw2CHId9h?=
 =?us-ascii?q?D8XPoFBg3WDBYgFAok9gXOVLi4JgRaFNgKHWYMlI4l5h02JKYYEihKBRoIOTTi?=
 =?us-ascii?q?DJ5BcPwExgQUBAYx8AQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAAD5BhFch0O0hNFjHQEBBQEHBQGBUQgBCwGDayeMFIw?=
 =?us-ascii?q?SgiGIf45AgXMUGBMBhz0iNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmIDA?=
 =?us-ascii?q?wECJAsBRgYJAQFQAx42BxIFgxyBagMVBAGmVTOIBw2CHId9hD8XPoFBg3WDBYg?=
 =?us-ascii?q?FAok9gXOVLi4JgRaFNgKHWYMlI4l5h02JKYYEihKBRoIOTTiDJ5BcPwExgQUBA?=
 =?us-ascii?q?Yx8AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="54867283"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 05:07:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727539AbeLLNHK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 08:07:10 -0500
Received: from mxout012.mail.hostpoint.ch ([217.26.49.172]:63931 "EHLO
        mxout012.mail.hostpoint.ch" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726247AbeLLNHH (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 08:07:07 -0500
Received: from [10.0.2.45] (helo=asmtp012.mail.hostpoint.ch)
        by mxout012.mail.hostpoint.ch with esmtp (Exim 4.91 (FreeBSD))
        (envelope-from <dev@pschenker.ch>)
        id 1gX4E5-000Ne6-VX; Wed, 12 Dec 2018 14:06:57 +0100
Received: from [46.140.72.82] (helo=philippe-pc.toradex.int)
        by asmtp012.mail.hostpoint.ch with esmtpsa (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
        (Exim 4.91 (FreeBSD))
        (envelope-from <dev@pschenker.ch>)
        id 1gX4E5-000IXM-QU; Wed, 12 Dec 2018 14:06:57 +0100
X-Authenticated-Sender-Id: dev@pschenker.ch
From: Philippe Schenker <dev@pschenker.ch>
To: jic23@kernel.org, marcel.ziswiler@toradex.com, stefan@agner.ch
Cc: thierry.reding@gmail.com, Philippe Schenker <dev@pschenker.ch>,
        Philippe Schenker <philippe.schenker@toradex.com>,
        Alexandre Torgue <alexandre.torgue@st.com>,
        Lee Jones <lee.jones@linaro.org>, linux-kernel@vger.kernel.org,
        Dmitry Torokhov <dmitry.torokhov@gmail.com>,
        linux-input@vger.kernel.org,
        Maxime Coquelin <mcoquelin.stm32@gmail.com>,
        linux-stm32@st-md-mailman.stormreply.com,
        linux-arm-kernel@lists.infradead.org
Subject: [PATCH v4 2/8] mfd: stmpe: Move ADC related defines to header of mfd
Date: Wed, 12 Dec 2018 14:06:43 +0100
Message-Id: <20181212130649.15146-2-dev@pschenker.ch>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181212130649.15146-1-dev@pschenker.ch>
References: <20181212130649.15146-1-dev@pschenker.ch>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Move defines that are ADC related to the header of the overlying mfd,
so they can be used from multiple sub-devices.

Signed-off-by: Philippe Schenker <philippe.schenker@toradex.com>
Acked-by: Lee Jones <lee.jones@linaro.org>
Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
---

Changes in v4: None
Changes in v3: None
Changes in v2:
 - This is a new added commit. Separate commit for moving the defines
   out of drivers/input/touchscreen/stmpe-ts.c to overlying mfd-device
   drivers/mfd/stmpe.c
 - Pre-fix defines with STMPE_

 drivers/input/touchscreen/stmpe-ts.c | 34 +++++++++++-----------------
 include/linux/mfd/stmpe.h            | 11 +++++++++
 2 files changed, 24 insertions(+), 21 deletions(-)

diff --git a/drivers/input/touchscreen/stmpe-ts.c b/drivers/input/touchscreen/stmpe-ts.c
index 2a78e27b4495..c5d9006588a2 100644
--- a/drivers/input/touchscreen/stmpe-ts.c
+++ b/drivers/input/touchscreen/stmpe-ts.c
@@ -49,17 +49,6 @@
 
 #define STMPE_IRQ_TOUCH_DET		0
 
-#define SAMPLE_TIME(x)			((x & 0xf) << 4)
-#define MOD_12B(x)			((x & 0x1) << 3)
-#define REF_SEL(x)			((x & 0x1) << 1)
-#define ADC_FREQ(x)			(x & 0x3)
-#define AVE_CTRL(x)			((x & 0x3) << 6)
-#define DET_DELAY(x)			((x & 0x7) << 3)
-#define SETTLING(x)			(x & 0x7)
-#define FRACTION_Z(x)			(x & 0x7)
-#define I_DRIVE(x)			(x & 0x1)
-#define OP_MODE(x)			((x & 0x7) << 1)
-
 #define STMPE_TS_NAME			"stmpe-ts"
 #define XY_MASK				0xfff
 
@@ -213,9 +202,10 @@ static int stmpe_init_hw(struct stmpe_touch *ts)
 		return ret;
 	}
 
-	adc_ctrl1 = SAMPLE_TIME(ts->sample_time) | MOD_12B(ts->mod_12b) |
-		REF_SEL(ts->ref_sel);
-	adc_ctrl1_mask = SAMPLE_TIME(0xff) | MOD_12B(0xff) | REF_SEL(0xff);
+	adc_ctrl1 = STMPE_SAMPLE_TIME(ts->sample_time) |
+		    STMPE_MOD_12B(ts->mod_12b) | STMPE_REF_SEL(ts->ref_sel);
+	adc_ctrl1_mask = STMPE_SAMPLE_TIME(0xff) | STMPE_MOD_12B(0xff) |
+			 STMPE_REF_SEL(0xff);
 
 	ret = stmpe_set_bits(stmpe, STMPE_REG_ADC_CTRL1,
 			adc_ctrl1_mask, adc_ctrl1);
@@ -225,15 +215,17 @@ static int stmpe_init_hw(struct stmpe_touch *ts)
 	}
 
 	ret = stmpe_set_bits(stmpe, STMPE_REG_ADC_CTRL2,
-			ADC_FREQ(0xff), ADC_FREQ(ts->adc_freq));
+			STMPE_ADC_FREQ(0xff), STMPE_ADC_FREQ(ts->adc_freq));
 	if (ret) {
 		dev_err(dev, "Could not setup ADC\n");
 		return ret;
 	}
 
-	tsc_cfg = AVE_CTRL(ts->ave_ctrl) | DET_DELAY(ts->touch_det_delay) |
-			SETTLING(ts->settling);
-	tsc_cfg_mask = AVE_CTRL(0xff) | DET_DELAY(0xff) | SETTLING(0xff);
+	tsc_cfg = STMPE_AVE_CTRL(ts->ave_ctrl) |
+		  STMPE_DET_DELAY(ts->touch_det_delay) |
+		  STMPE_SETTLING(ts->settling);
+	tsc_cfg_mask = STMPE_AVE_CTRL(0xff) | STMPE_DET_DELAY(0xff) |
+		       STMPE_SETTLING(0xff);
 
 	ret = stmpe_set_bits(stmpe, STMPE_REG_TSC_CFG, tsc_cfg_mask, tsc_cfg);
 	if (ret) {
@@ -242,14 +234,14 @@ static int stmpe_init_hw(struct stmpe_touch *ts)
 	}
 
 	ret = stmpe_set_bits(stmpe, STMPE_REG_TSC_FRACTION_Z,
-			FRACTION_Z(0xff), FRACTION_Z(ts->fraction_z));
+			STMPE_FRACTION_Z(0xff), STMPE_FRACTION_Z(ts->fraction_z));
 	if (ret) {
 		dev_err(dev, "Could not config touch\n");
 		return ret;
 	}
 
 	ret = stmpe_set_bits(stmpe, STMPE_REG_TSC_I_DRIVE,
-			I_DRIVE(0xff), I_DRIVE(ts->i_drive));
+			STMPE_I_DRIVE(0xff), STMPE_I_DRIVE(ts->i_drive));
 	if (ret) {
 		dev_err(dev, "Could not config touch\n");
 		return ret;
@@ -263,7 +255,7 @@ static int stmpe_init_hw(struct stmpe_touch *ts)
 	}
 
 	ret = stmpe_set_bits(stmpe, STMPE_REG_TSC_CTRL,
-			OP_MODE(0xff), OP_MODE(OP_MOD_XYZ));
+			STMPE_OP_MODE(0xff), STMPE_OP_MODE(OP_MOD_XYZ));
 	if (ret) {
 		dev_err(dev, "Could not set mode\n");
 		return ret;
diff --git a/include/linux/mfd/stmpe.h b/include/linux/mfd/stmpe.h
index 4a827af17e59..c0353f6431f9 100644
--- a/include/linux/mfd/stmpe.h
+++ b/include/linux/mfd/stmpe.h
@@ -10,6 +10,17 @@
 
 #include <linux/mutex.h>
 
+#define STMPE_SAMPLE_TIME(x)	((x & 0xf) << 4)
+#define STMPE_MOD_12B(x)	((x & 0x1) << 3)
+#define STMPE_REF_SEL(x)	((x & 0x1) << 1)
+#define STMPE_ADC_FREQ(x)	(x & 0x3)
+#define STMPE_AVE_CTRL(x)	((x & 0x3) << 6)
+#define STMPE_DET_DELAY(x)	((x & 0x7) << 3)
+#define STMPE_SETTLING(x)	(x & 0x7)
+#define STMPE_FRACTION_Z(x)	(x & 0x7)
+#define STMPE_I_DRIVE(x)	(x & 0x1)
+#define STMPE_OP_MODE(x)	((x & 0x7) << 1)
+
 struct device;
 struct regulator;
 
-- 
2.19.2

