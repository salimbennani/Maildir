Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:58:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 19EA55803DC;
	Tue, 11 Dec 2018 16:47:15 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 16:47:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AC2+i7xRe1jsArw8o2pO8tFvqdNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBCOt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDYy8?=
 =?us-ascii?q?YYkAAeoPM+hbsofzuUcBrQCmBQSuH+7v1iNEi2Xq0aEmz+gsEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqIMXu+r16nD0CvOb/RR2Tf+9YPFdRMhru+SUrJrbcXRzk4vFwDeg1qM?=
 =?us-ascii?q?qYzlJTSV1uEMs2iG6upsT+Wvi3QoqwxopDWk28QiipHRi44L1lzJ8T91zJs7KN?=
 =?us-ascii?q?GmUkJ3fN2pHIdKuyybNYZ6Wt0uT31stSogybALuYS3cDULxZg63RLSa+KLfo6V?=
 =?us-ascii?q?6Rz5TumROy13hHd9dbK/mRmy9U+gx/XiVsm7zllKtDBJktrSuXAX0Rzc9MyHRu?=
 =?us-ascii?q?F6/ke71jaDzwHT6udaLkAojafXNYItz7oqmpYOv0nPADX6lFj1gaOKbEkp++ql?=
 =?us-ascii?q?5/ziYrr8p5+cM4F0ihv5MqQrgsG/BeU4Mg4TX2mU4Oi816Ps/Vf/QLpUiv06i6?=
 =?us-ascii?q?7ZsZ7cJcsFvK60GBFV0ok95BalFTum08oXnWMBLF1bfBKLlY/pO0vBIPzgF/ew?=
 =?us-ascii?q?n0yskCt3x/DBJrDhBpTNLnvdn7v7crd99lVRyA4yzdBZ+pJVBasNIPP1Wk/tqt?=
 =?us-ascii?q?PYCgU1PBCzw+biEN99zJ8RWXqTAq+FN6PfqV+I6fguI+mQfoAVvyzxK/g45/H0?=
 =?us-ascii?q?i385lkQQfa2o3ZsRdXC5Ee5qI0SfYXrwnNgBFX0GsRY5TOzvkFeCSyJcZ26uX6?=
 =?us-ascii?q?Ig4TE2EICmDYDdSYy3g7yB2yG7HptRZm1dDlCMEHHod5iLWvsWaSKSJNNhnSIA?=
 =?us-ascii?q?VbS7V4Ah0hSuvhfgy7V7NurU5jEYtZX72ddv/O3TlRYy9T9uA8SHyW6NTXp5nm?=
 =?us-ascii?q?cJRz8wwaB+rlZxylaF0ahknfNYEcZf6O9OUgc/LZTc1fB1C8juWgLdedeEUFWm?=
 =?us-ascii?q?Tc+gAT0rStIxwsUBY0ByG9i5ihDD3iyqA6IalrCRBZw09L7c0Gb1J8pn13nG06?=
 =?us-ascii?q?whhUE8QsRTLW2mmrJ/9w/LCoHUiUqZibileb4c3CHX8meD1nSBvEdfXA50UqXF?=
 =?us-ascii?q?WHQfa1DSrdT44EPCUrCvBa4mMgtH1c6NNK9KZsf1glVBQffpIM7ebH6pm2esGR?=
 =?us-ascii?q?aIwauBY5fwdGUDwirREkgEnBoV/XadKwc+ADyso2bfDDxoCFLubFng8eh4qHOn?=
 =?us-ascii?q?UEA0yxuGYFFm17qw4hQVn+CTS+sP3rIYvycssyl0HFe439LRF9qApwpgcL9AYd?=
 =?us-ascii?q?8n51dHz2bZtw17PpyvNK1igl8ecwJqv0LhzRl3C4NAkdQ0o3Mu1gZ9NaWY0FZZ?=
 =?us-ascii?q?fTOCwZ/wIqHXKnX1/B23caHW3k/R0dmI9aYP8vg3sEjjsxyzGUok8HVn1MdV3m?=
 =?us-ascii?q?CY5pXLCgoSTJ3wXlw29xh8u7HVfC0965nI2n1rNKm+qiXC1M4xBOs51hageM9S?=
 =?us-ascii?q?MaOZFAPoD8IWHcmvKOwwlFivYRIJJ+RS9K8yP8O7ePqKwq+rPOB8nD24iWRL+p?=
 =?us-ascii?q?xy0kWJ9yBkUO7Hw44Fw+2E3guATzr8llahvdztloBeeD4SGXCzyS76C45LZ61+?=
 =?us-ascii?q?ZJoEBn2qI8Kq2Np+nZntW3hD+V6nBlMG3tKpeBWIY1z82w1QyVoYoXi9lSSkyD?=
 =?us-ascii?q?x0likjrrCD0yzW3+TiaB0HN3ZLRWljl1vtIZK4j8sHXEiudAUpkBql5UDnx6lU?=
 =?us-ascii?q?vqh/Lm/TQVtWcCjyNW1tTqywtr+aac5V9JwoqTlXUPi7YV2CSL7yuQEa0yDgH2?=
 =?us-ascii?q?tZ3jw7bCulupb6nxx7jmKSMnBzoWHdecFxwxff+dPdSeRQ3joAWCl3lz3XCkKg?=
 =?us-ascii?q?MNmu+NWej43DvfymV2K9Sp1TdjHmzIOauyu8/2FqAxy/n/aol93jEAg61zL71t?=
 =?us-ascii?q?ZwWSXJqhb8fpfk16CgPe17eUloAUf269BmFYFmjoswmJYQ1GAZhpqP/HoLi2fz?=
 =?us-ascii?q?MchB1qL4Y3oAXjoLw9/T4Aj410xvNHOJx4TlVnqDxsttfcW1YmQT2igl9cBFFL?=
 =?us-ascii?q?+U7KBYnStyule4qAPRYftnkTsHx/oh9mUag/0Xtwo31SqSHKoSHUZDMCzolhSI?=
 =?us-ascii?q?6c2+rapNaGaud7iwyFRxndS7AL6epQFcXW7zeo0+Ei9o8sV/LFXM3WXv6oHjfd?=
 =?us-ascii?q?ncd9MSuQeSkxfdlOhVM5Mxm+EOhSpmP2L9oHIkx/Q6jRxowZG1ooyHJ39x86K+?=
 =?us-ascii?q?Bx5SLif1aN8L+jHxkaZemd6b0Ju1EZVmHjULQYHkTfa1ED8JsfTnNgCOECAzq3?=
 =?us-ascii?q?uBGLrfGxOf51lir37VD5+rMHSXLmEDzdp+XBmdOFBfgAcMUTU4hJE5Ex6lxNf7?=
 =?us-ascii?q?fEdl/DwR5UP4qhhRyuJuLRb/SXzSpAOpajcyVZieIwBa7gBE50fJL8Oe6vh/ED?=
 =?us-ascii?q?1f/p2ktAaNMHCUZxxUDWEVXUyJH1DiPr6z5dnZ7uiXHOy+I+HVYbWJr+xeWOyF?=
 =?us-ascii?q?xZau0otg4jaNOd+DPnhkD/0nxEVDWWp1FNjemzUKUyYXjT7Cb9aHpBeg/S16ts?=
 =?us-ascii?q?C//+rqWALs5ouPCqFeMdZ1+xCxjqeMKfSQhDtiKTtD0pMMxHnIyKUQ3VIIiiFu?=
 =?us-ascii?q?cSWtHqoEtSLXUK3QnapXBQYBayxvLMtI87483g5VNMHBl9P6zaR4geA1CltfUV?=
 =?us-ascii?q?zhm9qkZcgLI2G7KVPGC1yHNLWAJT3X3c73ZbmwRqFXjOVRrxewoyqUE1f/PjSf?=
 =?us-ascii?q?kDnkTwyvMeBJjC2BIBNSop2ychZzBmjlV9/mbhy7MNlqjTw527E0h3XKNXICPj?=
 =?us-ascii?q?h4aU9CsrqQ7SZAiPVlB2NB9mZlLfWDmyuB7+jXMJAWsf5qAiRyj+1b4XQ6xKFT?=
 =?us-ascii?q?7CFLX/F1nCrSrthzo1CpiOWPyzxnUAZQpTZPno6EoUJiOaCKvqVHDDz/8QgC4C?=
 =?us-ascii?q?29TVwqrt9hG9ul8/RLx8LAmYrzITNG4tSS9swZUZv6MsWCZVksPAGhMznTD0NR?=
 =?us-ascii?q?TjOmLmrYgE91m/GI8XiUs518rYLjzsldAoRHXUA4Q6tJQn9uG8YPddIuBmsp?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAD7WRBch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDe4gZX4szgg0UaJZWgXYQARgDEAGHLiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiAEGQEBNwEFCQEBCgsNAgImAgIDH?=
 =?us-ascii?q?xIBBQEcBhMFgxwBggEFmkc8ih1wfDOCdgEBBYcqCBJ5izAXgUA/gRABgl01hEq?=
 =?us-ascii?q?DO4JXiRlMgUiFEZA/CYImhGODPIcMGIFcTYc9NockmQwCBAIEBQIFDyGBJYIOM?=
 =?us-ascii?q?xoIKAhsBoI1CYISDBeIQxuFYB8yAYEEAQGIF4JNAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAD7WRBch0O0hNFlHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDe4gZX4szgg0UaJZWgXYQARgDEAGHLiI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmIBAgMBAiAEGQEBNwEFCQEBCgsNAgImAgIDHxIBBQEcBhMFgxw?=
 =?us-ascii?q?BggEFmkc8ih1wfDOCdgEBBYcqCBJ5izAXgUA/gRABgl01hEqDO4JXiRlMgUiFE?=
 =?us-ascii?q?ZA/CYImhGODPIcMGIFcTYc9NockmQwCBAIEBQIFDyGBJYIOMxoIKAhsBoI1CYI?=
 =?us-ascii?q?SDBeIQxuFYB8yAYEEAQGIF4JNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="66398895"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 11 Dec 2018 16:47:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726346AbeLLArG (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 19:47:06 -0500
Received: from mail-yb1-f195.google.com ([209.85.219.195]:38341 "EHLO
        mail-yb1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726234AbeLLArG (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 19:47:06 -0500
Received: by mail-yb1-f195.google.com with SMTP id d187so7550048ybb.5
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 16:47:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=dvqNIjhJ38H7XHYFmTTGv779swRsELVAegwnTwqcZxg=;
        b=fwb0RljDTPFfTMwEdR9aXYYd64/x0qLy5wm3qXZsF9TPjlJcUzHBlOlemmMWmqGDvu
         +DPnyFJWrwa1W2aX4eufV0ySS7q3RqeyGHomYxBouzUzibaGZ1PUjT7DWZQw/O/FR1hc
         88KFeatnhgsRZ19RKtYZf6rwZbM+zTLrUhuic=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=dvqNIjhJ38H7XHYFmTTGv779swRsELVAegwnTwqcZxg=;
        b=uehRi2ZqBzNqEnW0LefJd4lcRP11uR9ywQY7WdNtyILbpm69eIq4w2XLRYWMrM4+WC
         lsuaxrE+mIpThnSyH+F+qTJ6uhb2Xgiro0YfWpPFti4ncTsF1/sG6nNZgOVktLTlkvuy
         +EKqKChDA3bu6no0f4OcoFKaAYoq5sfA3ukGE5LyChnC5w+EU8q3L8z/d55uXdB+ueVK
         1g6TXz8WVn9zT2hAWicx2tkpqO83OgO884G4LeJwkih2cdyufU9bqLS+zp4bJvJf46ZF
         sEqf+703ZbWU9PAsxFHxALBnkpmdhWa8OlkhyvXjrjxGvrFWjO6Jj1/ynfR7o0qzg9z2
         hmeQ==
X-Gm-Message-State: AA+aEWbUtc8wVb7WM1g6ABFK+DE/YfsPkxP7pgiv3tc1RFgS9YnfpEbU
        76bLUBsk+oAKCFXPePAlgqpQcv2oIJk=
X-Google-Smtp-Source: AFSGD/XfPTSMwVMT/zFjRuyI8vEC/GighrFEFt5TrN0OWAHU97e7dmF/0AZ3hnSeaFndzcHenZ5Pvg==
X-Received: by 2002:a5b:30f:: with SMTP id j15-v6mr18629354ybp.371.1544575624930;
        Tue, 11 Dec 2018 16:47:04 -0800 (PST)
Received: from mail-yw1-f52.google.com (mail-yw1-f52.google.com. [209.85.161.52])
        by smtp.gmail.com with ESMTPSA id e3sm5371457ywe.63.2018.12.11.16.47.03
        for <linux-kernel@vger.kernel.org>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 11 Dec 2018 16:47:04 -0800 (PST)
Received: by mail-yw1-f52.google.com with SMTP id g75so6274741ywb.1
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 16:47:03 -0800 (PST)
X-Received: by 2002:a81:29cc:: with SMTP id p195mr19359360ywp.407.1544575623495;
 Tue, 11 Dec 2018 16:47:03 -0800 (PST)
MIME-Version: 1.0
References: <20181209182414.30862-1-tycho@tycho.ws> <20181209182414.30862-5-tycho@tycho.ws>
 <20181211222449.GA937@mail.hallyn.com>
In-Reply-To: <20181211222449.GA937@mail.hallyn.com>
From: Kees Cook <keescook@chromium.org>
Date: Tue, 11 Dec 2018 16:46:52 -0800
X-Gmail-Original-Message-ID: <CAGXu5jKLGXcY_koB+ZijKDVJ1=+iGMj5h8qBQOfpVk0n10e3DQ@mail.gmail.com>
Message-ID: <CAGXu5jKLGXcY_koB+ZijKDVJ1=+iGMj5h8qBQOfpVk0n10e3DQ@mail.gmail.com>
Subject: Re: [PATCH v10 4/4] samples: add an example of seccomp user trap
To: "Serge E. Hallyn" <serge@hallyn.com>
Cc: Tycho Andersen <tycho@tycho.ws>,
        Andy Lutomirski <luto@amacapital.net>,
        Oleg Nesterov <oleg@redhat.com>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        Christian Brauner <christian@brauner.io>,
        Tyler Hicks <tyhicks@canonical.com>,
        Akihiro Suda <suda.akihiro@lab.ntt.co.jp>,
        Aleksa Sarai <asarai@suse.de>, Jann Horn <jannh@google.com>,
        LKML <linux-kernel@vger.kernel.org>,
        Linux Containers <containers@lists.linux-foundation.org>,
        Linux API <linux-api@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 11, 2018 at 2:24 PM Serge E. Hallyn <serge@hallyn.com> wrote:
>
> On Sun, Dec 09, 2018 at 11:24:14AM -0700, Tycho Andersen wrote:
> > The idea here is just to give a demonstration of how one could safely use
> > the SECCOMP_RET_USER_NOTIF feature to do mount policies. This particular
> > policy is (as noted in the comment) not very interesting, but it serves to
> > illustrate how one might apply a policy dodging the various TOCTOU issues.
> >
> > Signed-off-by: Tycho Andersen <tycho@tycho.ws>
> > CC: Kees Cook <keescook@chromium.org>
> > CC: Andy Lutomirski <luto@amacapital.net>
> > CC: Oleg Nesterov <oleg@redhat.com>
> > CC: Eric W. Biederman <ebiederm@xmission.com>
> > CC: "Serge E. Hallyn" <serge@hallyn.com>
> > CC: Christian Brauner <christian@brauner.io>
> > CC: Tyler Hicks <tyhicks@canonical.com>
> > CC: Akihiro Suda <suda.akihiro@lab.ntt.co.jp>
> > ---
> > v5: new in v5
> > v7: updates for v7 API changes
> > v8: * add some more comments about what's happening in main() (Kees)
> >     * move from ptrace API to SECCOMP_FILTER_FLAG_NEW_LISTENER
> > v9: * s/mknod/mount in error message
> >     * switch to the SECCOMP_GET_NOTIF_SIZES API
> >     * add a note about getting ENOENT from SECCOMP_IOCTL_NOTIF_SEND
> > ---
> >  samples/seccomp/.gitignore  |   1 +
> >  samples/seccomp/Makefile    |   7 +-
> >  samples/seccomp/user-trap.c | 375 ++++++++++++++++++++++++++++++++++++
> >  3 files changed, 382 insertions(+), 1 deletion(-)
> >
> > diff --git a/samples/seccomp/.gitignore b/samples/seccomp/.gitignore
> > index 78fb78184291..d1e2e817d556 100644
> > --- a/samples/seccomp/.gitignore
> > +++ b/samples/seccomp/.gitignore
> > @@ -1,3 +1,4 @@
> >  bpf-direct
> >  bpf-fancy
> >  dropper
> > +user-trap
> > diff --git a/samples/seccomp/Makefile b/samples/seccomp/Makefile
> > index cf34ff6b4065..4920903c8009 100644
> > --- a/samples/seccomp/Makefile
> > +++ b/samples/seccomp/Makefile
> > @@ -1,6 +1,6 @@
> >  # SPDX-License-Identifier: GPL-2.0
> >  ifndef CROSS_COMPILE
> > -hostprogs-$(CONFIG_SAMPLE_SECCOMP) := bpf-fancy dropper bpf-direct
> > +hostprogs-$(CONFIG_SAMPLE_SECCOMP) := bpf-fancy dropper bpf-direct user-trap
> >
> >  HOSTCFLAGS_bpf-fancy.o += -I$(objtree)/usr/include
> >  HOSTCFLAGS_bpf-fancy.o += -idirafter $(objtree)/include
> > @@ -16,6 +16,10 @@ HOSTCFLAGS_bpf-direct.o += -I$(objtree)/usr/include
> >  HOSTCFLAGS_bpf-direct.o += -idirafter $(objtree)/include
> >  bpf-direct-objs := bpf-direct.o
> >
> > +HOSTCFLAGS_user-trap.o += -I$(objtree)/usr/include
> > +HOSTCFLAGS_user-trap.o += -idirafter $(objtree)/include
> > +user-trap-objs := user-trap.o
> > +
> >  # Try to match the kernel target.
> >  ifndef CONFIG_64BIT
> >
> > @@ -33,6 +37,7 @@ HOSTCFLAGS_bpf-fancy.o += $(MFLAG)
> >  HOSTLDLIBS_bpf-direct += $(MFLAG)
> >  HOSTLDLIBS_bpf-fancy += $(MFLAG)
> >  HOSTLDLIBS_dropper += $(MFLAG)
> > +HOSTLDLIBS_user-trap += $(MFLAG)
> >  endif
> >  always := $(hostprogs-m)
> >  endif
> > diff --git a/samples/seccomp/user-trap.c b/samples/seccomp/user-trap.c
> > new file mode 100644
> > index 000000000000..61267cb59c8e
> > --- /dev/null
> > +++ b/samples/seccomp/user-trap.c
> > @@ -0,0 +1,375 @@
> > +#include <signal.h>
> > +#include <stdio.h>
> > +#include <stdlib.h>
> > +#include <unistd.h>
> > +#include <errno.h>
> > +#include <fcntl.h>
> > +#include <string.h>
> > +#include <stddef.h>
> > +#include <sys/sysmacros.h>
> > +#include <sys/types.h>
> > +#include <sys/wait.h>
> > +#include <sys/socket.h>
> > +#include <sys/stat.h>
> > +#include <sys/mman.h>
> > +#include <sys/syscall.h>
> > +#include <sys/user.h>
> > +#include <sys/ioctl.h>
> > +#include <sys/ptrace.h>
> > +#include <sys/mount.h>
> > +#include <linux/limits.h>
> > +#include <linux/filter.h>
> > +#include <linux/seccomp.h>
> > +
> > +#define ARRAY_SIZE(x) (sizeof(x) / sizeof(*(x)))
> > +
> > +static int seccomp(unsigned int op, unsigned int flags, void *args)
> > +{
> > +     errno = 0;
> > +     return syscall(__NR_seccomp, op, flags, args);
> > +}
> > +
> > +static int send_fd(int sock, int fd)
> > +{
> > +     struct msghdr msg = {};
> > +     struct cmsghdr *cmsg;
> > +     char buf[CMSG_SPACE(sizeof(int))] = {0}, c = 'c';
> > +     struct iovec io = {
> > +             .iov_base = &c,
> > +             .iov_len = 1,
> > +     };
> > +
> > +     msg.msg_iov = &io;
> > +     msg.msg_iovlen = 1;
> > +     msg.msg_control = buf;
> > +     msg.msg_controllen = sizeof(buf);
> > +     cmsg = CMSG_FIRSTHDR(&msg);
> > +     cmsg->cmsg_level = SOL_SOCKET;
> > +     cmsg->cmsg_type = SCM_RIGHTS;
> > +     cmsg->cmsg_len = CMSG_LEN(sizeof(int));
> > +     *((int *)CMSG_DATA(cmsg)) = fd;
> > +     msg.msg_controllen = cmsg->cmsg_len;
> > +
> > +     if (sendmsg(sock, &msg, 0) < 0) {
> > +             perror("sendmsg");
> > +             return -1;
> > +     }
> > +
> > +     return 0;
> > +}
> > +
> > +static int recv_fd(int sock)
> > +{
> > +     struct msghdr msg = {};
> > +     struct cmsghdr *cmsg;
> > +     char buf[CMSG_SPACE(sizeof(int))] = {0}, c = 'c';
> > +     struct iovec io = {
> > +             .iov_base = &c,
> > +             .iov_len = 1,
> > +     };
> > +
> > +     msg.msg_iov = &io;
> > +     msg.msg_iovlen = 1;
> > +     msg.msg_control = buf;
> > +     msg.msg_controllen = sizeof(buf);
> > +
> > +     if (recvmsg(sock, &msg, 0) < 0) {
> > +             perror("recvmsg");
> > +             return -1;
> > +     }
> > +
> > +     cmsg = CMSG_FIRSTHDR(&msg);
> > +
> > +     return *((int *)CMSG_DATA(cmsg));
> > +}
> > +
> > +static int user_trap_syscall(int nr, unsigned int flags)
> > +{
> > +     struct sock_filter filter[] = {
> > +             BPF_STMT(BPF_LD+BPF_W+BPF_ABS,
> > +                     offsetof(struct seccomp_data, nr)),
> > +             BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, nr, 0, 1),
> > +             BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_USER_NOTIF),
> > +             BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW),
> > +     };
> > +
> > +     struct sock_fprog prog = {
> > +             .len = (unsigned short)ARRAY_SIZE(filter),
> > +             .filter = filter,
> > +     };
> > +
> > +     return seccomp(SECCOMP_SET_MODE_FILTER, flags, &prog);
> > +}
> > +
> > +static int handle_req(struct seccomp_notif *req,
> > +                   struct seccomp_notif_resp *resp, int listener)
> > +{
> > +     char path[PATH_MAX], source[PATH_MAX], target[PATH_MAX];
> > +     int ret = -1, mem;
> > +
> > +     resp->id = req->id;
> > +     resp->error = -EPERM;
> > +     resp->val = 0;
> > +
> > +     if (req->data.nr != __NR_mount) {
> > +             fprintf(stderr, "huh? trapped something besides mount? %d\n", req->data.nr);
> > +             return -1;
> > +     }
> > +
> > +     /* Only allow bind mounts. */
> > +     if (!(req->data.args[3] & MS_BIND))
> > +             return 0;
> > +
> > +     /*
> > +      * Ok, let's read the task's memory to see where they wanted their
> > +      * mount to go.
> > +      */
> > +     snprintf(path, sizeof(path), "/proc/%d/mem", req->pid);
> > +     mem = open(path, O_RDONLY);
> > +     if (mem < 0) {
> > +             perror("open mem");
> > +             return -1;
> > +     }
> > +
> > +     /*
> > +      * Now we avoid a TOCTOU: we referred to a pid by its pid, but since
> > +      * the pid that made the syscall may have died, we need to confirm that
> > +      * the pid is still valid after we open its /proc/pid/mem file. We can
> > +      * ask the listener fd this as follows.
> > +      *
> > +      * Note that this check should occur *after* any task-specific
> > +      * resources are opened, to make sure that the task has not died and
> > +      * we're not wrongly reading someone else's state in order to make
> > +      * decisions.
> > +      */
> > +     if (ioctl(listener, SECCOMP_IOCTL_NOTIF_ID_VALID, &req->id) < 0) {
> > +             fprintf(stderr, "task died before we could map its memory\n");
> > +             goto out;
> > +     }
> > +
> > +     /*
> > +      * Phew, we've got the right /proc/pid/mem. Now we can read it. Note
> > +      * that to avoid another TOCTOU, we should read all of the pointer args
> > +      * before we decide to allow the syscall.
> > +      */
> > +     if (lseek(mem, req->data.args[0], SEEK_SET) < 0) {
> > +             perror("seek");
> > +             goto out;
> > +     }
> > +
> > +     ret = read(mem, source, sizeof(source));
> > +     if (ret < 0) {
> > +             perror("read");
> > +             goto out;
> > +     }
> > +
> > +     if (lseek(mem, req->data.args[1], SEEK_SET) < 0) {
> > +             perror("seek");
> > +             goto out;
> > +     }
> > +
> > +     ret = read(mem, target, sizeof(target));
> > +     if (ret < 0) {
> > +             perror("read");
> > +             goto out;
> > +     }
> > +
> > +     /*
> > +      * Our policy is to only allow bind mounts inside /tmp. This isn't very
> > +      * interesting, because we could do unprivlieged bind mounts with user
> > +      * namespaces already, but you get the idea.
> > +      */
> > +     if (!strncmp(source, "/tmp", 4) && !strncmp(target, "/tmp", 4)) {
>
> Of course the host could have a /tmproot or somesuch, so you might want to
> check the first 5 characters :)

I manually bumped this to "/tmp/", 5 in both tests and applied it for -next

-Kees

-- 
Kees Cook
