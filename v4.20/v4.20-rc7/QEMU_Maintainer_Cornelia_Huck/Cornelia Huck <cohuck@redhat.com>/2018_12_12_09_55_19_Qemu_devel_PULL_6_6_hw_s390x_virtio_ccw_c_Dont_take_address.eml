Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:43:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9613058079D
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 02:01:58 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 02:01:58 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AiBbNIBKiudxaSE8EZ9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgfLf7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPWSJPAYGz?=
 =?us-ascii?q?b4UAAOUdMuhWspH9qlkMoxaxGAWhCv/jxSFThnLtwa06yv4sHR3a0AA8Hd8Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41LfFzTLZb/NQxzj97InIfQo8qv+OQLJ/bcnRwlQoGgzZiVWQ?=
 =?us-ascii?q?qZHlMC+W1ukWqWiU8fdvVeK1hG47sQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopJt?=
 =?us-ascii?q?C0UlN3bcOnHZdKqS2XOYt7Ttk/T2xqoCo21KEKtJqhcCQXxpkr2QTTZ+GEfoWG?=
 =?us-ascii?q?+B7vSuWcLDFlj3x/Yr2/nQy98U24x+38SMa01FFKozJBktnNrXANywfT5tKISv?=
 =?us-ascii?q?t740etwzGP1xrc6u1cIEA0k7TUK4I5z7IuipYesl7PEjLrlEj1lqOaaEsp9+iy?=
 =?us-ascii?q?5+j6YLjqvpqcOJV1igH6PKQugMu/AeEgPwgXQWeb/Pm82KT+8kLnXrVFkPk2nr?=
 =?us-ascii?q?DCv5DdOMQboLK2DBFO0ook7xa/DjSm38oCkXgIMVJIYBaHj4nvO1HTL/H0F/a/?=
 =?us-ascii?q?g1KwkDh1w/DKJKHuApLILnXYlrfherB960FayAou19xf4IhUCr4ZLPLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsx+bnCdZ92Z0EVWOAH6+UK6fSsV6O5uIyLOiAfo4VuDDhK/c74/7i?=
 =?us-ascii?q?l2M2mVgYffrh4J0MdXrtHuh6O17LJj3og8wdCiEMuQwxSvGsj0eNFjtaZnK3Vq?=
 =?us-ascii?q?R74SknCYWgFsDaS4WwxbCMwiq/TaBQfX1MX1WFEHP0cNedVvIRLS6fPMJl1yYJ?=
 =?us-ascii?q?TKWsUJMJ0xaouwnnjb19Ib3P5ycauJn/gcVz/PDZjhoo9DZ5XPiahlmAU2xu1k?=
 =?us-ascii?q?YBVjM72KQ39VRw1lqZl61xkvBVEdh74/JPWx09c5nGwLopJcr1X1fqec2PRVKn?=
 =?us-ascii?q?S52GHDoyBoY6xN8TaEVVAdiujhnfmSGtBulGxPSwGJUo//eEjDDKLMFnxiODjf?=
 =?us-ascii?q?F5gg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BEAgCG2xBcmBHrdtBjgheBMYJig3uIe?=
 =?us-ascii?q?Iszgg2XU4FzFBgUhzsiNgcNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCAxo?=
 =?us-ascii?q?BBoJcAwMBAiAEHwopAwMBAgYBAR8FAiIEAgIDAVMGEwWDHIICAQSlXnwzhUCEc?=
 =?us-ascii?q?IELizEXgUA/gRGLF4JXAokZJJdKCZFKCxiJaYdbmTmBTQGCBjMaCBsVgycTgj2?=
 =?us-ascii?q?ODEAxAYEGHIsUgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BEAgCG2xBcmBHrdtBjgheBMYJig3uIeIszgg2XU4FzFBg?=
 =?us-ascii?q?UhzsiNgcNAQMBAQEBAQECARMBAQEBAQgLCwYbDi+CNgUCAxoBBoJcAwMBAiAEH?=
 =?us-ascii?q?wopAwMBAgYBAR8FAiIEAgIDAVMGEwWDHIICAQSlXnwzhUCEcIELizEXgUA/gRG?=
 =?us-ascii?q?LF4JXAokZJJdKCZFKCxiJaYdbmTmBTQGCBjMaCBsVgycTgj2ODEAxAYEGHIsUg?=
 =?us-ascii?q?XcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="141794601"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 02:01:57 -0800
Received: from localhost ([::1]:43615 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX1L3-0003L3-3T
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 05:01:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:43688)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cohuck@redhat.com>) id 1gX1Ex-0006EH-Kr
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:55:40 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cohuck@redhat.com>) id 1gX1Ev-0006qJ-SZ
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 04:55:39 -0500
Received: from mx1.redhat.com ([209.132.183.28]:46818)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cohuck@redhat.com>)
	id 1gX1Ev-0006pg-Hf; Wed, 12 Dec 2018 04:55:37 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 727FE5F78F;
	Wed, 12 Dec 2018 09:55:36 +0000 (UTC)
Received: from localhost (dhcp-192-187.str.redhat.com [10.33.192.187])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 17C84600C9;
	Wed, 12 Dec 2018 09:55:35 +0000 (UTC)
From: Cornelia Huck <cohuck@redhat.com>
To: Peter Maydell <peter.maydell@linaro.org>
Date: Wed, 12 Dec 2018 10:55:19 +0100
Message-Id: <20181212095519.6390-7-cohuck@redhat.com>
In-Reply-To: <20181212095519.6390-1-cohuck@redhat.com>
References: <20181212095519.6390-1-cohuck@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.39]);
	Wed, 12 Dec 2018 09:55:36 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PULL 6/6] hw/s390x/virtio-ccw.c: Don't take address
 of fields in packed structs
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-s390x@nongnu.org, Cornelia Huck <cohuck@redhat.com>,
	qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Peter Maydell <peter.maydell@linaro.org>

Taking the address of a field in a packed struct is a bad idea, because
it might not be actually aligned enough for that pointer type (and
thus cause a crash on dereference on some host architectures). Newer
versions of clang warn about this. Avoid the bug by not using the
"modify in place" byte swapping functions.

Patch produced with scripts/coccinelle/inplace-byteswaps.cocci
(with a couple of long lines manually wrapped).

Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
Message-Id: <20181210120436.30522-1-peter.maydell@linaro.org>
Reviewed-by: Philippe Mathieu-Daud=C3=A9 <philmd@redhat.com>
Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
Signed-off-by: Cornelia Huck <cohuck@redhat.com>
---
 hw/s390x/virtio-ccw.c | 42 ++++++++++++++++++++++--------------------
 1 file changed, 22 insertions(+), 20 deletions(-)

diff --git a/hw/s390x/virtio-ccw.c b/hw/s390x/virtio-ccw.c
index 212b3d3dea..c2b78c8e9b 100644
--- a/hw/s390x/virtio-ccw.c
+++ b/hw/s390x/virtio-ccw.c
@@ -287,18 +287,18 @@ static int virtio_ccw_handle_set_vq(SubchDev *sch, =
CCW1 ccw, bool check_len,
     }
     if (is_legacy) {
         ccw_dstream_read(&sch->cds, linfo);
-        be64_to_cpus(&linfo.queue);
-        be32_to_cpus(&linfo.align);
-        be16_to_cpus(&linfo.index);
-        be16_to_cpus(&linfo.num);
+        linfo.queue =3D be64_to_cpu(linfo.queue);
+        linfo.align =3D be32_to_cpu(linfo.align);
+        linfo.index =3D be16_to_cpu(linfo.index);
+        linfo.num =3D be16_to_cpu(linfo.num);
         ret =3D virtio_ccw_set_vqs(sch, NULL, &linfo);
     } else {
         ccw_dstream_read(&sch->cds, info);
-        be64_to_cpus(&info.desc);
-        be16_to_cpus(&info.index);
-        be16_to_cpus(&info.num);
-        be64_to_cpus(&info.avail);
-        be64_to_cpus(&info.used);
+        info.desc =3D be64_to_cpu(info.desc);
+        info.index =3D be16_to_cpu(info.index);
+        info.num =3D be16_to_cpu(info.num);
+        info.avail =3D be64_to_cpu(info.avail);
+        info.used =3D be64_to_cpu(info.used);
         ret =3D virtio_ccw_set_vqs(sch, &info, NULL);
     }
     sch->curr_status.scsw.count =3D 0;
@@ -382,7 +382,7 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
                 features.features =3D 0;
             }
             ccw_dstream_rewind(&sch->cds);
-            cpu_to_le32s(&features.features);
+            features.features =3D cpu_to_le32(features.features);
             ccw_dstream_write(&sch->cds, features.features);
             sch->curr_status.scsw.count =3D ccw.count - sizeof(features)=
;
             ret =3D 0;
@@ -403,7 +403,7 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
             ret =3D -EFAULT;
         } else {
             ccw_dstream_read(&sch->cds, features);
-            le32_to_cpus(&features.features);
+            features.features =3D le32_to_cpu(features.features);
             if (features.index =3D=3D 0) {
                 virtio_set_features(vdev,
                                     (vdev->guest_features & 0xffffffff00=
000000ULL) |
@@ -546,7 +546,7 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
             ret =3D -EFAULT;
         } else {
             ccw_dstream_read(&sch->cds, indicators);
-            be64_to_cpus(&indicators);
+            indicators =3D be64_to_cpu(indicators);
             dev->indicators =3D get_indicator(indicators, sizeof(uint64_=
t));
             sch->curr_status.scsw.count =3D ccw.count - sizeof(indicator=
s);
             ret =3D 0;
@@ -567,7 +567,7 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
             ret =3D -EFAULT;
         } else {
             ccw_dstream_read(&sch->cds, indicators);
-            be64_to_cpus(&indicators);
+            indicators =3D be64_to_cpu(indicators);
             dev->indicators2 =3D get_indicator(indicators, sizeof(uint64=
_t));
             sch->curr_status.scsw.count =3D ccw.count - sizeof(indicator=
s);
             ret =3D 0;
@@ -588,14 +588,14 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
             ret =3D -EFAULT;
         } else {
             ccw_dstream_read(&sch->cds, vq_config.index);
-            be16_to_cpus(&vq_config.index);
+            vq_config.index =3D be16_to_cpu(vq_config.index);
             if (vq_config.index >=3D VIRTIO_QUEUE_MAX) {
                 ret =3D -EINVAL;
                 break;
             }
             vq_config.num_max =3D virtio_queue_get_num(vdev,
                                                      vq_config.index);
-            cpu_to_be16s(&vq_config.num_max);
+            vq_config.num_max =3D cpu_to_be16(vq_config.num_max);
             ccw_dstream_write(&sch->cds, vq_config.num_max);
             sch->curr_status.scsw.count =3D ccw.count - sizeof(vq_config=
);
             ret =3D 0;
@@ -621,9 +621,11 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
             if (ccw_dstream_read(&sch->cds, thinint)) {
                 ret =3D -EFAULT;
             } else {
-                be64_to_cpus(&thinint.ind_bit);
-                be64_to_cpus(&thinint.summary_indicator);
-                be64_to_cpus(&thinint.device_indicator);
+                thinint.ind_bit =3D be64_to_cpu(thinint.ind_bit);
+                thinint.summary_indicator =3D
+                    be64_to_cpu(thinint.summary_indicator);
+                thinint.device_indicator =3D
+                    be64_to_cpu(thinint.device_indicator);
=20
                 dev->summary_indicator =3D
                     get_indicator(thinint.summary_indicator, sizeof(uint=
8_t));
@@ -654,8 +656,8 @@ static int virtio_ccw_cb(SubchDev *sch, CCW1 ccw)
             break;
         }
         ccw_dstream_read_buf(&sch->cds, &revinfo, 4);
-        be16_to_cpus(&revinfo.revision);
-        be16_to_cpus(&revinfo.length);
+        revinfo.revision =3D be16_to_cpu(revinfo.revision);
+        revinfo.length =3D be16_to_cpu(revinfo.length);
         if (ccw.count < len + revinfo.length ||
             (check_len && ccw.count > len + revinfo.length)) {
             ret =3D -EINVAL;
--=20
2.17.2


