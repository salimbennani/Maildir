Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:41:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3A29F580380;
	Mon, 10 Dec 2018 10:32:32 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 10:32:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A9yPXCR3ai+sf5ZOAsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTLPTxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJcUMhPWSxPAoCy?=
 =?us-ascii?q?YYUBAOUOP+lXs4bzp0AWrRa8HgSsGOHixyVUinPq06A30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZo9rvO6cWT++1yrXIzTTFb/hLxDny9IjIchY/rvGNQL1/b9DRwlQoGgPblFqQ?=
 =?us-ascii?q?rZLqPzWJ1uQMtWiX9fFgWv6vi24htQ5xoyWgydk2ioTSnI0V0FXE+T9lz4YyIN?=
 =?us-ascii?q?21UUh2asOqHptXsiGVLYp2QsU6TmFnuSY61r0GuYOgcyQQ1JsnwBvfZvqaeIaL?=
 =?us-ascii?q?+hLuTPidLSt8iX5/Zb6yiQi+/VK9xuD/SsW4yldHoyhdntXSq3wA1Qbf5tWIR/?=
 =?us-ascii?q?dh5EutxCqD2x3J5uxGPUw5k7fQJYQ7zb4qjJUTtFzOHi/ol0Xyi6+bblsk+ue2?=
 =?us-ascii?q?5OT9eLnmpYGTN5Vyig7gNqQigMu/Af43MgQWXmib//qz1KH78EHnXLlHiuc6nr?=
 =?us-ascii?q?TXvZzEP8gXu620DxNP3osi6RuzFzKm384ZnXkDIlJFYhWHj43xNlHKIfD4C+q/?=
 =?us-ascii?q?glu1nDdo2f/GJLvhDYvJLnTal7fgc7B95FBGyAco09Bf6IxbCqsbLPLwREDxrt?=
 =?us-ascii?q?rYAQE9MwCuxObnEtp92psEWW2TGq+ZLL/SsViQ6+IrIumMZ5EatCzyKvg4/PPu?=
 =?us-ascii?q?iX45mVkAfaimx5cXaXa4Huh4LEWde3bjntABEWIStAokUOPqkEGCUSJUZ3uqX6?=
 =?us-ascii?q?Iz/DA7CJ68AofEXIytgKGB0z29Hp1ZfW1GDlGMEXH1d4SLQfsMaSSSItN/nTwA?=
 =?us-ascii?q?T7SuV4gh1RS2vg/g17VnNvbU+jEftZ/71th14PPcmQsx9TxzCcSd1WaNQnpwnm?=
 =?us-ascii?q?MJQT82wa9+rVZ8yleFzah3nfhYGcZP6PNOVwcwLYTcwPBiC9DuRgLBec+ER0y9?=
 =?us-ascii?q?QtWmBjExTcg9w8UUbEZ/ANiiihHD3yy3A74ajbCLBZo08r7C0Hj1Pcpy13HG1K?=
 =?us-ascii?q?w5hVk8XsRPLXGmhrJ49wXLBI7GiUOZm7yudaQdxiHN8miDwHGKvEFZVg5wTKrE?=
 =?us-ascii?q?UWoeZkvQsdT2+EfCQ6WyBrQgNwtL0dSCJbdSat31kVVGQ+/uN8nEbGKvhWi8Hx?=
 =?us-ascii?q?aIyamKbIrxZWod2iLRCEwHkwAW+XaLLgw+Biano2LDAz1iD1PvY0Xw8eZgrHO3?=
 =?us-ascii?q?VFM7zwaPb0d5zbq65gYVheCAS/MUxr8LpT0uqytqE1qn39LZEdyApxF/c6Vaet?=
 =?us-ascii?q?495FZH1WTEtw1yJJCgLqZihkIAfARzpU/hyxJ3CoBYm8gwsHwq1BZyKb6f0F5Z?=
 =?us-ascii?q?azOY3JXwOrrLKmny/BGjcbLW1kvZ0NaM/qcP6fI4q1r4sQGtF0oi9Whn0tZP33?=
 =?us-ascii?q?ud4JXKEBQdUZbrXkkr8Bh6oqnQYjMh6IPMyX1sLa60vyfY1NItGuQkxQivftdF?=
 =?us-ascii?q?PKyfCQ/9DtcVB86tKOwthVikdRYEPOFU9K4pMMKqbfqG2Ki3POl+mDKql3hI4I?=
 =?us-ascii?q?d40kiU7SpzVvbI34oZw/GfxgaGVyr8gE29vcztmIFEZSsdHmywySX/AI5RZ6ty?=
 =?us-ascii?q?fZsECGu0Is23wMl+iIDpW3JC6FGjAFYG0tezeRWOd1z9wRFQ1UMPrHy9mCu30y?=
 =?us-ascii?q?Z7kys0oaqYxiDOxfrtdAAGOmJSWGZtl1PsLpWqgNAAW0ioaRMklB+k5Ub82qha?=
 =?us-ascii?q?q75zL2jVQUdUYSf2K3tuXbe3trqHe8RP8o8nsT1LUOSgZlCXUr78oxoA3yLjBW?=
 =?us-ascii?q?de3y07dzext5X9nhx6jn+dLXlpoHrYf8Fw2QnQ5NjGSfFN2ToGQTFyiSPLCVik?=
 =?us-ascii?q?I9mp4dKUmo/Bsu+kTWKhVZ5TcS7xwYObriS75m5qARy5n/+tnN3qCgw60S7919?=
 =?us-ascii?q?l3WiTEthf8Yo/316ukNeJrZFVnBFj568BiAIFxjpMwhI0M2XgdnpiU/WAIkWDp?=
 =?us-ascii?q?PdVZ2KL+amEARToKw97T/Qjk11dvLnOPx4LlSHqdxtFtaMW9YmMTwig99dxFCL?=
 =?us-ascii?q?+I7LxYmit4ulm4ohjQYfRnnjcd1OEh6HgVg+wSvAotzyOdAq0dHEVCPCzskQiI?=
 =?us-ascii?q?4M66rKlNeGmvdr2w3lJknd+9FLGCvh1cWHHhd5cnHC9w7d9wPEjC0XLt8YHkZM?=
 =?us-ascii?q?ffbcgIuRKKiRfAgPNYKJYwlvoMmCpmNnjxvXwjy+4nkxNu2Yu2s5SAK2Vo5Ki5?=
 =?us-ascii?q?GAJXNiXpZ8MP/THglbpensGT34y1H5RuADMLXIbzTfKzETIfrvDnNweIED0hpX?=
 =?us-ascii?q?aXA7vfHQmD6Eh4q3LDCYykN3aSJHMB19VtWAGdJFBDgAATRDg1hYQ2FgeuxMz8?=
 =?us-ascii?q?akt54i0R60X8qhtNzOJoKhb+Xn3epAeudjc7VpyfIABK4QFF4kffKdae4f5rHy?=
 =?us-ascii?q?FE4p2hqxSAKm6BaARNE24JQVaIB0z5Mrmt+NnA8PWYBuykIPvVeriOre1eV/GV?=
 =?us-ascii?q?xZOgyIdm/jCMNtmRMXlmFfE0xk1DXXVhEcTDhzoPUzAXlz7Kb8ODpBa8/TB3rt?=
 =?us-ascii?q?mi8PvxXgLj/5CPC7xUMdVg4B22haaDN+iNhCd2MzpY15UMxWPWx7gbxlIdlyZu?=
 =?us-ascii?q?dzy1G7QaqSHNVL7QmrNQDxMDayN8KspI76E/3glMI8Lbicn11rl3jvErEVdFSE?=
 =?us-ascii?q?fhl9qtZcwLJWG9KVzGCFyKNLSAOT3E3cX3bbmgRr1XieVerwewtiqDE0//IjSD?=
 =?us-ascii?q?kCHkWAqyMe5XliGUIhxftJu5chZsEmXjSNPmahumMN54lzE2wLs0hm/UOm4YKz?=
 =?us-ascii?q?Rzb0RNrriI5yNCnvp/A3BB7mZiLeSchyaZ7uzYJowKvvdxHit0l/xV4HIhxrtR?=
 =?us-ascii?q?7SFEQuF1mSTIot5vpVGmjveAyj59XBVSrTZLgZqBvV9+NqXB6plARXHE8QoN7G?=
 =?us-ascii?q?qKDRQKotplCtv3tKFRytjAjqTzKDhZ/tLQ/MscAdXUKc2dPHogNxrpBCDbDA8f?=
 =?us-ascii?q?QTG3MmHfgh8VrPbH1XCLr55ylZHql4YHTfcPV1ErF/VcFU1jE8ALJ793Xygllb?=
 =?us-ascii?q?+Qi8hO7n27+l2ZRsxBpZHcV/SdAf/1ISyxgrxNZh9OyrT9fqoJMYiu5UVmZ19m?=
 =?us-ascii?q?nYKCIEHQW91MriB7JlsqqUFA9mR/SCso0ELjZwKh7WU7HOSx2BUxj10tMqwW6D?=
 =?us-ascii?q?7w7gJvdRLxrywqnRx0wI29jA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAA3sA5ch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDeogZjA+CDRSXPYFzLA0GAYFLgi+DcyI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiAEUgYJAQEKGAICJgICA1QGAQwGA?=
 =?us-ascii?q?gEBAYMcAYIBBAEKpi18M4VAhF0FgQuLFoFXP4E4gmuDHgICgT2DJoJXAok5hkq?=
 =?us-ascii?q?QcgcCgiEEhGOKQR6BXIgah0eJIoEFg26MYWCBLk0jgzyCJxeDSopTPwEBMYEFA?=
 =?us-ascii?q?QGJTQ0XB4IgAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAA3sA5ch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDeogZjA+CDRSXPYFzLA0GAYFLgi+DcyI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmIBAgMBAiAEUgYJAQEKGAICJgICA1QGAQwGAgEBAYMcAYIBBAE?=
 =?us-ascii?q?Kpi18M4VAhF0FgQuLFoFXP4E4gmuDHgICgT2DJoJXAok5hkqQcgcCgiEEhGOKQ?=
 =?us-ascii?q?R6BXIgah0eJIoEFg26MYWCBLk0jgzyCJxeDSopTPwEBMYEFAQGJTQ0XB4IgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="55736970"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 10:31:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728789AbeLJSbv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 13:31:51 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:60476 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726602AbeLJSbv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 13:31:51 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 8C4D715BF;
        Mon, 10 Dec 2018 10:31:50 -0800 (PST)
Received: from [10.1.194.37] (e113632-lin.cambridge.arm.com [10.1.194.37])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 77E8F3F6A8;
        Mon, 10 Dec 2018 10:31:49 -0800 (PST)
Subject: Re: [PATCH v2] mailbox: Hi3660: Fixup mailbox state machine
 malfunction issue
To: Kevin Wangtao <kevin.wangtao@hisilicon.com>,
        jassisinghbrar@gmail.com
Cc: linux-kernel@vger.kernel.org, leo.yan@linaro.org,
        gengyanping@hisilicon.com, suzhuangluan@hisilicon.com
References: <1543809309-61169-1-git-send-email-kevin.wangtao@hisilicon.com>
 <1543817588-82411-1-git-send-email-kevin.wangtao@hisilicon.com>
From: Valentin Schneider <valentin.schneider@arm.com>
Message-ID: <d3ede0ab-b635-344c-faba-a9b1531b7f05@arm.com>
Date: Mon, 10 Dec 2018 18:31:47 +0000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <1543817588-82411-1-git-send-email-kevin.wangtao@hisilicon.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-GB
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi,

On 03/12/2018 06:13, Kevin Wangtao wrote:
> Current mailbox driver of Hi3660 release the mailbox directly
> before sending a new message which may cause last message lost
> and next message sending doesn't take effect actually.
> 
> This patch fixes this issue by following the right process below,
> each time before sending a message, mailbox driver will check
> whether the mailbox is in ready state, if last message has been
> acknowledged, mailbox driver will clear the ack state to turn
> the mailbox to ready state again.
> 
> Signed-off-by: Kevin Wangtao <kevin.wangtao@hisilicon.com>

Validated using sysbench at each OPP ([1]). Test passes with patch and fails
without:

| CPU  |     OPP | Base | Patch |
|------+---------+------+-------|
| CPU0 |  533000 |  104 |   104 |
| CPU0 |  999000 |  104 |   201 |
| CPU0 |  140200 |  285 |   285 |
| CPU0 | 1709000 |  285 |   349 |
| CPU0 | 1844000 |  377 |   377 |
|------+---------+------+-------|
| CPU4 |  903000 |  249 |   248 |
| CPU4 | 1421000 |  249 |   394 |
| CPU4 | 1805000 |  500 |   500 |
| CPU4 | 2112000 |  499 |   583 |
| CPU4 | 2362000 |  653 |   654 |

We need this pretty badly, otherwise frequency setting is a coin toss.

Tested-by: Valentin Schneider <valentin.schneider@arm.com>

Thanks,
Valentin



[1]: https://github.com/ARM-software/lisa/blob/next/lisa/tests/kernel/cpufreq/sanity.py#L23

Ran the above with this script on each kernel:

----->8-----
#!/usr/bin/env python3

from lisa.env import TestEnv
from lisa.tests.kernel.cpufreq.sanity import UserspaceSanity

te = TestEnv.from_cli()

print(UserspaceSanity.from_testenv(te).test_performance_sanity())
-----8<-----


> ---
> Changes v1 -> v2:
>  - update commit message
> 
>  drivers/mailbox/hi3660-mailbox.c | 22 ++++++++++------------
>  1 file changed, 10 insertions(+), 12 deletions(-)
> 
> diff --git a/drivers/mailbox/hi3660-mailbox.c b/drivers/mailbox/hi3660-mailbox.c
> index 3eea6b6..035b71a 100644
> --- a/drivers/mailbox/hi3660-mailbox.c
> +++ b/drivers/mailbox/hi3660-mailbox.c
> @@ -38,6 +38,7 @@
>  #define MBOX_AUTOMATIC_ACK		1
>  
>  #define MBOX_STATE_IDLE			BIT(4)
> +#define MBOX_STATE_READY		BIT(5)
>  #define MBOX_STATE_ACK			BIT(7)
>  
>  #define MBOX_MSG_LEN			8
> @@ -91,8 +92,8 @@ static int hi3660_mbox_check_state(struct mbox_chan *chan)
>  	unsigned long val;
>  	unsigned int ret;
>  
> -	/* Mailbox is idle so directly bail out */
> -	if (readl(base + MBOX_MODE_REG) & MBOX_STATE_IDLE)
> +	/* Mailbox is ready to use */
> +	if (readl(base + MBOX_MODE_REG) & MBOX_STATE_READY)
>  		return 0;
>  
>  	/* Wait for acknowledge from remote */
> @@ -103,9 +104,9 @@ static int hi3660_mbox_check_state(struct mbox_chan *chan)
>  		return ret;
>  	}
>  
> -	/* Ensure channel is released */
> -	writel(0xffffffff, base + MBOX_IMASK_REG);
> -	writel(BIT(mchan->ack_irq), base + MBOX_SRC_REG);
> +	/* clear ack state, mailbox will get back to ready state */
> +	writel(BIT(mchan->ack_irq), base + MBOX_ICLR_REG);
> +
>  	return 0;
>  }
>  
> @@ -160,10 +161,6 @@ static int hi3660_mbox_startup(struct mbox_chan *chan)
>  {
>  	int ret;
>  
> -	ret = hi3660_mbox_check_state(chan);
> -	if (ret)
> -		return ret;
> -
>  	ret = hi3660_mbox_unlock(chan);
>  	if (ret)
>  		return ret;
> @@ -183,10 +180,11 @@ static int hi3660_mbox_send_data(struct mbox_chan *chan, void *msg)
>  	void __iomem *base = MBOX_BASE(mbox, ch);
>  	u32 *buf = msg;
>  	unsigned int i;
> +	int ret;
>  
> -	/* Ensure channel is released */
> -	writel_relaxed(0xffffffff, base + MBOX_IMASK_REG);
> -	writel_relaxed(BIT(mchan->ack_irq), base + MBOX_SRC_REG);
> +	ret = hi3660_mbox_check_state(chan);
> +	if (ret)
> +		return ret;
>  
>  	/* Clear mask for destination interrupt */
>  	writel_relaxed(~BIT(mchan->dst_irq), base + MBOX_IMASK_REG);
> 
