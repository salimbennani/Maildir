Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:44:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DACB55807A2;
	Mon, 10 Dec 2018 14:46:55 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 14:46:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Au/1mHh1cQNS9JBpismDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKvjxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJBHo2y?=
 =?us-ascii?q?YYgBD+UDPOZXs4bzqFQVrRumBwShH//vyiZSi3PqwaE2z/otHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOqcVVOC61q/IxijCYfNLwjf96JTHchAgofGKQLl9dsXRyVQ1FwPClViQ?=
 =?us-ascii?q?p5fqMymJ2eQKtmiW9uxtXv+shW4/swx9vCSjy8M2hoXUiI8Z1ErI+Th6zYopP9?=
 =?us-ascii?q?G1SUx2bca6HJZRqS2WK457Tt4+T251vSs11qEKtJqncCUP1pgr2wLTZvmCfoWJ?=
 =?us-ascii?q?5x/uUPidLDh3iX59drKwmRW//VSlx+D5UsS51EpGoy9ZndXSqH8Byxne5tadRf?=
 =?us-ascii?q?Z+5Eis3CiD2gDP5exEJ00/iLDVJIQ7wrEqk5oeqUTDETHymEXxlKKWaEok9fay?=
 =?us-ascii?q?6+j9YbXpuIWcN4lqhQH6KKgunda/AesgPggPWWiU5/i82aX98UHlRLhGlOA6n6?=
 =?us-ascii?q?fHvJzAOMgWpbK1DxVU34sh8xq/Ci2p0NUcnXkJNlJFfxeHgpDtO1HPJvD4EPi+?=
 =?us-ascii?q?j02vkDh13fDGOKPuApHUInjEnrbhe6hy61RHxQotwtBQ+YhUBqsCIP3tQE/xss?=
 =?us-ascii?q?LXDhsjPwyz2ebnB81x1pkCVmKXHq+ZLKTSvEeM5uIuIOmDepUZuTngK/U+4/7u?=
 =?us-ascii?q?jHk5mUISfKWz3JsXbmy4EepiI0mDfXXshdIBG38QvgUiVOzqlEGCUTlLanayRa?=
 =?us-ascii?q?085y07B5ihDYvZRoCtnaaO3CG0HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJLh09h6+ffflRI19TxyCcSd1HqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZs2GSE2m?=
 =?us-ascii?q?QtWhAjE9VMgxzMUMY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gjQHYHJlV+Vl6KrdasG2i7N+3yOzW6PvEFeTQ5xXr/J?=
 =?us-ascii?q?XXEZZkvKs9v54lnOQKOpCbQiKgFB09KNKrNWat31ilVLXOrsN87AY22vgWuwBQ?=
 =?us-ascii?q?yHxrWXbIX0fWUR2yHdCEsBkwAX5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4Lw70LojkhpCtuEFa9xd3WDcGAqBRnfKhHZd?=
 =?us-ascii?q?M94VFH1X/WtgBnP5ygKbxiiUAacwhto0zu0BB3AJ1akcc2tHMq0BZyKaWA3VNd?=
 =?us-ascii?q?djOY2JfwOqHXKmjy5hyvd7Ta2lbE0NaS+6cP7vs4pk7nvAGoEEoi7npm38NU03?=
 =?us-ascii?q?ua+pXFEg4SXYjtXUYw8hhwv6vabTUl54PIyX1sNrG5vSXG2903C+oq1Bahc81E?=
 =?us-ascii?q?P6OZCQD9CcsaB8upKOw0gFWpahMEPOZP9K87Jc+mdv2G2LK1M+Zkhj6pkWNH4I?=
 =?us-ascii?q?Vl2EKW6yV8UvLI34oCw/yA3gqHSi3wg0u7vsH2mYBLfzcSHmWkxCjgBY5RYLBy?=
 =?us-ascii?q?fIkRBWevJc232stxh5r3V3FE816jAksM2NW1dhqKc1z9wQpQ2FwNoXymhSS31S?=
 =?us-ascii?q?Z0nCwurqaF2izB3f7idBseNmFXXmZiiUrjLpauj9AdWkildAwplBqj5UbnyKlX?=
 =?us-ascii?q?vqV/L2/PQUhWeyj6NX1tUqy1trCaec5A9IsosTlLUOS7eV2bSr/9rwEa0i/5BG?=
 =?us-ascii?q?te2TY7eiquupX4mRx6lW2cIGxyrHrfZcF/2xPf6MbASv5W2zoMXDN4hiXPBlig?=
 =?us-ascii?q?I9mp+s2Zl5XZveCkVGKhVZpTfTPwzYyatyu75mxqARuhkPC1gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUChpSa530HnX3x?=
 =?us-ascii?q?MdVa36Lzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1oUC3rQPLbfh9gzcS0/0u6HEBjuENuQotyDidA78IEUlZOyzsiwqH?=
 =?us-ascii?q?79SkoKpLY2avdKC61FBiktC5ELGCvgZcVW78epcjHi9/9N9zMVzS333o9oHrZs?=
 =?us-ascii?q?PQYskNuR2OnBfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jztkaFensOM04GuBJphHCgLXIDzTfKpCz8SsfXnNwCTEDwzsH?=
 =?us-ascii?q?ubGLzfHROB50ditX7AD5erN3SPLnkD0dpiXAWdJFBYgA0MRzo1hJk5FgS3xMD7?=
 =?us-ascii?q?dEd5+ysc5lr5qhtK1+JpOAPzUmbZpAe0dDg0TIKTIwZR7gFH/03VK9CR7vpvHy?=
 =?us-ascii?q?FE+Z2stA6NJXaeZwtWFmEFQFCEC0rgPrmz5tnA7u6YCfClL/bVZbWOqOpeV+qH?=
 =?us-ascii?q?xJ6104tm+SqMOduLPnV4E/I73U9DV2hjG8vFgzUPVzAXlyXVYs+boxe85zR3rt?=
 =?us-ascii?q?2l//TtQg7v/oyPC71dMdh0/xC2gKGDN/OfhSpjKDZY0I8MymHMyLQFwFESjCRu?=
 =?us-ascii?q?fSG3EbscrS7NUL7QmqhPAh4bdSxzNchI76E93gVXOs7bkNT11rFmgf4vFldFTk?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyPmVw20PuFWki6aPAZSuIW8cht2DWjjTdTmagC0MdNtjD02x6E0iW3ONWIGLT?=
 =?us-ascii?q?d8dEZNpKWK7SxEmvV/B3BB7n19IOmYmiaZ6vPUJYoMvfR3AiR7ieRa7W8+y7tU?=
 =?us-ascii?q?6iFEWfN0lDHTrt5ov1GpjO2PxiB7XxpJrzZBnJiLsll6OaXF6plAXm7J/RIX4m?=
 =?us-ascii?q?WWDhQKpt1lBcXuuqBQ0NfPkq3zJSxG89LV+8scGsfVJNiGMHonLRrmBjrUABEZ?=
 =?us-ascii?q?Qj6sMGGMz3BaxcCV8HKVqZ414qPrnpVGHq5bT3Q7HLURDUEzT/IYJ5IiZDQhmL?=
 =?us-ascii?q?jTo9MT5XG+rR+ZEMpHpJfvWPjUCvLqfmXKxYJYbgcFlOurZb8YMZf2jgk7MgF3?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAAL7A5ch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYEwgiwECxQTh0EDhE9fjUAUiQyOMYEkA0wSAQEYEwGEQIM?=
 =?us-ascii?q?tIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgEBAQMBAg8VEwYBATcBB?=
 =?us-ascii?q?QkBAQEBCA4KCRUQAwwjJQIEDgUFHYJ/gWoDCA0BAgKbRgIuiVgBAQGBajOCdgE?=
 =?us-ascii?q?BBYUGGIIJCIwhF4F/gRGDEoRKIxSDNYImiyuVTAmRRAsYkT2ZCQICAgIEBQINA?=
 =?us-ascii?q?QEFgUaCDk0jFYMnghsMFxKDOIpTcoEFAQEhiS4BJYInAQE?=
X-IPAS-Result: =?us-ascii?q?A0AEAAAL7A5ch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYEwgiwECxQTh0EDhE9fjUAUiQyOMYEkA0wSAQEYEwGEQIMtIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCA0JCCkjDII2JAGCYgEBAQMBAg8VEwYBATcBBQkBAQEBCA4KCRU?=
 =?us-ascii?q?QAwwjJQIEDgUFHYJ/gWoDCA0BAgKbRgIuiVgBAQGBajOCdgEBBYUGGIIJCIwhF?=
 =?us-ascii?q?4F/gRGDEoRKIxSDNYImiyuVTAmRRAsYkT2ZCQICAgIEBQINAQEFgUaCDk0jFYM?=
 =?us-ascii?q?nghsMFxKDOIpTcoEFAQEhiS4BJYInAQE?=
X-IronPort-AV: E=Sophos;i="5.56,340,1539673200"; 
   d="scan'208";a="141558434"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 14:46:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729718AbeLJWqw (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 17:46:52 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:55420 "EHLO
        mx0b-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1727405AbeLJWqv (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 17:46:51 -0500
Received: from pps.filterd (m0109331.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wBAMhNuW015022;
        Mon, 10 Dec 2018 14:46:30 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : references : in-reply-to : content-type : content-id
 : content-transfer-encoding : mime-version; s=facebook;
 bh=rt9OGorEGVpJ6iaaljvu5WBMpZrGn+ygK0twMmdKPmY=;
 b=nsTK8tKPn7GBf6FxrORc0W/W7S2XxDTHRc6TfRc64oCISPYISjqSwozymx9qsfNtJ1QZ
 BD2jvf7mnKcXRqCNFWG81T9j/vyvyGhqVYGTEn1xndZ4kcmYRLGXF+UsBtz8oZWE14Bm
 Xo9qZ+PAIxxrWE3zz1+Z/kIL7J5cVGft0Rw= 
Received: from mail.thefacebook.com ([199.201.64.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2p9yxf89v5-4
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT);
        Mon, 10 Dec 2018 14:46:30 -0800
Received: from prn-mbx01.TheFacebook.com (2620:10d:c081:6::15) by
 prn-hub04.TheFacebook.com (2620:10d:c081:35::128) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 14:46:27 -0800
Received: from prn-hub06.TheFacebook.com (2620:10d:c081:35::130) by
 prn-mbx01.TheFacebook.com (2620:10d:c081:6::15) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
 15.1.1531.3; Mon, 10 Dec 2018 14:46:27 -0800
Received: from NAM04-BN3-obe.outbound.protection.outlook.com (192.168.54.28)
 by o365-in.thefacebook.com (192.168.16.30) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id 15.1.1531.3
 via Frontend Transport; Mon, 10 Dec 2018 14:46:26 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com;
 s=selector1-fb-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=rt9OGorEGVpJ6iaaljvu5WBMpZrGn+ygK0twMmdKPmY=;
 b=aRb5cZntYJvN2RzpFImgmyb+0fvQ8mHgWRyiGs3Z7uG1el/iMqRClaScWrX+Kxs9IOyInRxa+EdkXvh9rxpnjVPR22qD74DyzKPLq9bLBE/1UZjGJY9WpnD2tL7VaB7dNPHprgSX3kVK3BBcjYAVanlIkxt6/d1/WTra656nOCM=
Received: from BYAPR15MB2631.namprd15.prod.outlook.com (20.179.156.24) by
 BYAPR15MB2519.namprd15.prod.outlook.com (20.179.154.156) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1404.19; Mon, 10 Dec 2018 22:46:05 +0000
Received: from BYAPR15MB2631.namprd15.prod.outlook.com
 ([fe80::990:c2e0:2a8a:25c5]) by BYAPR15MB2631.namprd15.prod.outlook.com
 ([fe80::990:c2e0:2a8a:25c5%3]) with mapi id 15.20.1404.026; Mon, 10 Dec 2018
 22:46:05 +0000
From: Roman Gushchin <guro@fb.com>
To: Yonghong Song <yhs@fb.com>
CC: Roman Gushchin <guroan@gmail.com>,
        "netdev@vger.kernel.org" <netdev@vger.kernel.org>,
        Kernel Team <Kernel-team@fb.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "Alexei Starovoitov" <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>
Subject: Re: [PATCH bpf-next 2/3] bpf: add bpffs pretty print for cgroup local
 storage maps
Thread-Topic: [PATCH bpf-next 2/3] bpf: add bpffs pretty print for cgroup
 local storage maps
Thread-Index: AQHUjpCFRX6wnHEMq0K3+QCygntWjaV0MZaAgARliIA=
Date: Mon, 10 Dec 2018 22:46:04 +0000
Message-ID: <20181210224600.GB28954@tower.DHCP.thefacebook.com>
References: <20181208005315.3500-1-guro@fb.com>
 <20181208005315.3500-2-guro@fb.com>
 <60a77f17-6d63-2f73-e0b2-0ca8b5338169@fb.com>
In-Reply-To: <60a77f17-6d63-2f73-e0b2-0ca8b5338169@fb.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: CO1PR15CA0045.namprd15.prod.outlook.com
 (2603:10b6:101:1f::13) To BYAPR15MB2631.namprd15.prod.outlook.com
 (2603:10b6:a03:152::24)
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [2620:10d:c090:200::6:9244]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;BYAPR15MB2519;20:AV7g2xg93PYRwuI1isv7pcFbghdhppi5bhTUriWheOhviPo3oDIY2YETPQoQGbyNo2m2AiiJlGX2PKaF4P6zFsTf89ARv38Le6Vpxk9QO4s4sl3RAkITTA2akcntep4NFB5XHhRNAsKFqUc1xCi5rXrz6lbr6n+7Dw7CJjsIkuY=
x-ms-office365-filtering-correlation-id: 6a680f4b-e497-4bb8-032a-08d65ef14433
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);SRVR:BYAPR15MB2519;
x-ms-traffictypediagnostic: BYAPR15MB2519:
x-microsoft-antispam-prvs: <BYAPR15MB2519EFEEF3FB2765DAF615FFBEA50@BYAPR15MB2519.namprd15.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(823302103)(93006095)(93001095)(3002001)(3231455)(999002)(11241501185)(944501520)(52105112)(10201501046)(148016)(149066)(150057)(6041310)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(20161123558120)(20161123564045)(201708071742011)(7699051)(76991095);SRVR:BYAPR15MB2519;BCL:0;PCL:0;RULEID:;SRVR:BYAPR15MB2519;
x-forefront-prvs: 08828D20BC
x-forefront-antispam-report: SFV:NSPM;SFS:(10019020)(39860400002)(346002)(366004)(396003)(136003)(376002)(189003)(199004)(46003)(9686003)(256004)(6116002)(6436002)(11346002)(6636002)(39060400002)(446003)(478600001)(7736002)(6512007)(5024004)(14444005)(33656002)(6486002)(476003)(53546011)(386003)(186003)(102836004)(25786009)(52116002)(86362001)(71190400001)(81166006)(81156014)(71200400001)(33896004)(8676002)(305945005)(76176011)(1076002)(14454004)(2906002)(105586002)(345774005)(68736007)(99286004)(486006)(97736004)(6506007)(54906003)(6246003)(6862004)(229853002)(53936002)(106356001)(4326008)(316002)(8936002)(5660300001)(42262002);DIR:OUT;SFP:1102;SCL:1;SRVR:BYAPR15MB2519;H:BYAPR15MB2631.namprd15.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: wPiFgqs+qH6xMd2aNZ4TlbpWAIGgE+C6gVwHkZNbTH46VX56DWA6eZPS9Tc0frFZ1OwGsX+QhJe8sBXiNPCPkRU6q5FUqKgpGoRDnyTUBXLMQngdScEFR9L3VU4OkZSuOW/ebE0k2LsEJj1Ag3Wx5WWh8at5DEyifTCnCSGm7qsNGxKySfZBGGiMAYfeuzRXaIl83f1icL2WKAo0IGu8zSOBiZTjxUaQWt90pEgwMzg/Px9jjFw4y/KzoYexLh7ScM1NLjDUGFd4PujLAYZDwJJYrWPLQOl0X9vi3h7KQHo1lQLMUskWRCpfmZAYv4bz
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <3DBAF662DDA8D34AAF6C834832E54642@namprd15.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-Network-Message-Id: 6a680f4b-e497-4bb8-032a-08d65ef14433
X-MS-Exchange-CrossTenant-originalarrivaltime: 10 Dec 2018 22:46:04.6458
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BYAPR15MB2519
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-10_08:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 07, 2018 at 07:37:35PM -0800, Yonghong Song wrote:
>=20
>=20
> On 12/7/18 4:53 PM, Roman Gushchin wrote:
> > Implement bpffs pretty printing for cgroup local storage maps
> > (both shared and per-cpu).
> > Output example (captured for tools/testing/selftests/bpf/netcnt_prog.c)=
:
> >=20
> > Shared:
> >    $ cat /sys/fs/bpf/map_2
> >    # WARNING!! The output is for debug purpose only
> >    # WARNING!! The output format will change
> >    {4294968594,1}: {9999,1039896}
> >=20
> > Per-cpu:
> >    $ cat /sys/fs/bpf/map_1
> >    # WARNING!! The output is for debug purpose only
> >    # WARNING!! The output format will change
> >    {4294968594,1}: {
> >    	cpu0: {0,0,0,0,0}
> >    	cpu1: {0,0,0,0,0}
> >    	cpu2: {1,104,0,0,0}
> >    	cpu3: {0,0,0,0,0}
> >    }
> >=20
> > Signed-off-by: Roman Gushchin <guro@fb.com>
> > Cc: Alexei Starovoitov <ast@kernel.org>
> > Cc: Daniel Borkmann <daniel@iogearbox.net>
> > ---
> >   include/linux/btf.h        | 10 +++++
> >   kernel/bpf/local_storage.c | 90 +++++++++++++++++++++++++++++++++++++=
-
> >   2 files changed, 99 insertions(+), 1 deletion(-)
> >=20
> > diff --git a/include/linux/btf.h b/include/linux/btf.h
> > index 8c2199b5d250..ac67bc4cbfd9 100644
> > --- a/include/linux/btf.h
> > +++ b/include/linux/btf.h
> > @@ -5,6 +5,7 @@
> >   #define _LINUX_BTF_H 1
> >  =20
> >   #include <linux/types.h>
> > +#include <uapi/linux/btf.h>
> >  =20
> >   struct btf;
> >   struct btf_type;
> > @@ -63,4 +64,13 @@ static inline const char *btf_name_by_offset(const s=
truct btf *btf,
> >   }
> >   #endif
> >  =20
> > +static inline const struct btf_type *btf_orig_type(const struct btf *b=
tf,
> > +						   const struct btf_type *t)
> > +{
> > +	while (t && BTF_INFO_KIND(t->info) =3D=3D BTF_KIND_TYPEDEF)
> > +		t =3D btf_type_by_id(btf, t->type);
> technically, type modifier "const" and "volatile" can apply to member=20
> type as well. But these modifiers really don't make sense here.
> Could you add a comment here to mention that they will be treated
> as an error since such a programming is not really recommended?

Switched over to btf_type_id_size() based on Martin's suggestion.

>=20
> > +
> > +	return t;
> > +}
> > +
> >   #endif
> > diff --git a/kernel/bpf/local_storage.c b/kernel/bpf/local_storage.c
> > index b65017dead44..7b51fe1aba3c 100644
> > --- a/kernel/bpf/local_storage.c
> > +++ b/kernel/bpf/local_storage.c
> > @@ -1,11 +1,13 @@
> >   //SPDX-License-Identifier: GPL-2.0
> >   #include <linux/bpf-cgroup.h>
> >   #include <linux/bpf.h>
> > +#include <linux/btf.h>
> >   #include <linux/bug.h>
> >   #include <linux/filter.h>
> >   #include <linux/mm.h>
> >   #include <linux/rbtree.h>
> >   #include <linux/slab.h>
> > +#include <uapi/linux/btf.h>
> >  =20
> >   DEFINE_PER_CPU(struct bpf_cgroup_storage*, bpf_cgroup_storage[MAX_BPF=
_CGROUP_STORAGE_TYPE]);
> >  =20
> > @@ -308,6 +310,91 @@ static int cgroup_storage_delete_elem(struct bpf_m=
ap *map, void *key)
> >   	return -EINVAL;
> >   }
> >  =20
> > +static int cgroup_storage_check_btf(const struct bpf_map *map,
> > +				    const struct btf *btf,
> > +				    const struct btf_type *key_type,
> > +				    const struct btf_type *value_type)
> > +{
> > +	const struct btf_type *st, *t;
> > +	struct btf_member *m;
> > +
> > +	/* Key is expected to be of struct bpf_cgroup_storage_key type,
> > +	 * which is:
> > +	 * struct bpf_cgroup_storage_key {
> > +	 *	__u64	cgroup_inode_id;
> > +	 *	__u32	attach_type;
> > +	 * };
> > +	 */
> > +
> > +	/*
> > +	 * Key_type must be a structure (or a typedef of a structure) with
> > +	 * two members.
> > +	 */
> > +	st =3D btf_orig_type(btf, key_type);
> > +	if (BTF_INFO_KIND(st->info) !=3D BTF_KIND_STRUCT ||
> > +	    BTF_INFO_VLEN(st->info) !=3D 2)
> > +		return -EINVAL;
> > +
> > +	/*
> > +	 * The first field must be a 64 bit integer at 0 offset.
> > +	 */
> > +	m =3D (struct btf_member *)(st + 1);
> > +	t =3D btf_orig_type(btf, btf_type_by_id(btf, m->type));
> > +	if (!t || BTF_INFO_KIND(t->info) !=3D BTF_KIND_INT || m->offset ||
> > +	    t->size !=3D
> > +	    FIELD_SIZEOF(struct bpf_cgroup_storage_key, cgroup_inode_id))
> > +		return -EINVAL;
>=20
> We should not use t->size here. The "t->size" is the type size, and the
> real number of bits held by the member is BTF_INT_BITS(...) with the=20
> argument of the u32 int value after "t".
>=20
> > +
> > +	/*
> > +	 * The second field must be a 32 bit integer at 0 offset.
> > +	 */
> > +	m =3D m + 1;
> > +	t =3D btf_orig_type(btf, btf_type_by_id(btf, m->type));
> > +	if (!t || BTF_INFO_KIND(t->info) !=3D BTF_KIND_INT ||
> > +	    m->offset !=3D offsetof(struct bpf_cgroup_storage_key, attach_typ=
e) *
> > +	    BITS_PER_BYTE || t->size !=3D
> > +	    FIELD_SIZEOF(struct bpf_cgroup_storage_key, attach_type))
> > +		return -EINVAL;
>=20
> The same is here. t->size should not be used.
> BTF_INT_BITS(...) should be used.

Fixed in v2, which I'll send soon.

Thank you for the review!
