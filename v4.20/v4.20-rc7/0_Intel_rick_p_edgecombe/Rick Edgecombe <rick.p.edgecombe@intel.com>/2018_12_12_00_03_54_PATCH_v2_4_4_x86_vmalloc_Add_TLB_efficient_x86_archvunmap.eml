Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:58:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9FC7C58079D;
	Tue, 11 Dec 2018 16:12:39 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 16:12:39 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AowaJSBwOhnG3hgvXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0eIVIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJ/jqxboAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAfYAPelErIn2ulQAogaxBQayGOzvzTpIiWTo0qYn1OkhCwDG0xAjH94UqH?=
 =?us-ascii?q?TYtsv6O7odUe+r0KbIyjDDYOhI1jrm6YjIdAwhru+IXb5qbcXRzkwvGhrDg16N?=
 =?us-ascii?q?qoLlJyuY2voRv2Wf9eZsSOyih3A9pw1soTWj2t0gh4jLi44N11zJ8Tt1zJw1KN?=
 =?us-ascii?q?C4UkJ2YcCoHIFNuy2EK4d7RN4pTXtytyYg0LIGvIa2fCgUx5QjwB7Sc+KHc4eW?=
 =?us-ascii?q?7RL5TuqRIil3hGhjeL2hgxa+60+gyvfzVsWs0VZKqDRKksXUu3wTyxDe7tKLRu?=
 =?us-ascii?q?Zz80u/wzqDygPe5v1eLU01l6fXM5shzaQxlpoXv0TDBCj2mEDuga+Sd0Uk/PWo?=
 =?us-ascii?q?6uv+brXluJCcLYl0hR/6Mqg3ncy+D+I4PRYUX2WA5+S826Ps/VfjTLVJkPI2iK?=
 =?us-ascii?q?/Zv47eJcgBoa65GQBV3p456xmjFzemzMgYnX4fIVJBeRKHjJbmN0vBIfDlFvq/?=
 =?us-ascii?q?h1WskDF2x/HJJLHhA5PNLmTdn7flZ7py90lcyA8rx9BF+51UEq0BIO70WkLptN?=
 =?us-ascii?q?zXFB45MxCuzObgEtl91p4eVniJAq+WK67StV6I5uQyI+iDfoMVuTD9K+Q76P7q?=
 =?us-ascii?q?l3M2hVgdfayx15sNdH+4BuhmI1meYXf0gNcBFnkFshA9TOztjl2CVzlTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddsnSYf?=
 =?us-ascii?q?VbihTI8h1guitBXgxLplNefU/iwYtZT+1Nl6/eHTlBcy9SBqAMSZyW2CU2Z0nm?=
 =?us-ascii?q?YQTT8swK9/uVB9ykuE0aVggPxXD9pT6+lNUgc7L5HcyeN6Bsv2WgLAeNeJVVmn?=
 =?us-ascii?q?Ts+nATE3UtI+3dsOb1xhFNWlixDJxzCqDKMNl7yXGJw09brR0GXrKMZj1XnKzq?=
 =?us-ascii?q?khgEMgQstUK2KmgKlz9wzQB47Ml0WUjKKqdaUa3C7Q+2aP12uOvEdEUAFuVaXJ?=
 =?us-ascii?q?R2wQZkzTrd7h/EPNU6euCag7MgtG0cONN7FFasP3gllcRPfsItLeY3mvlGe2Hh?=
 =?us-ascii?q?uIwrKMbIz3e2QSxindCU4EkxwN8naCLwQxGiCho2fGBjx0CV3ve1/s8fV5qH6j?=
 =?us-ascii?q?Uk80zgSKb0p917q1+h8Zn+CcR+kU3rIevCchqjN0HFmm0tLSCtqAoRdhfapGbd?=
 =?us-ascii?q?M85ldHyXzWtwhnMpO8KKBig0YUcx5rsEP2yxV3FoJAnNAwo3Mu0gVzJryX0VNb?=
 =?us-ascii?q?ezyDwJD/J6fYKm/x/BCoda7bwVXe0NeQ+qcS5/U0sVTjvAe1FkU893VrycVa03?=
 =?us-ascii?q?yZ5p/SFgodTYrxUlor9xh9v7zbYjQ965nI2nF2MKi0siXN29QmBOY+zhagftFf?=
 =?us-ascii?q?ML6LFQPoEs0aAdSuJ/Ium1Szch0EO+VS/rYuP8y6b/uGxLKrPOF4kTK8jGRI/J?=
 =?us-ascii?q?py0liR+Cp7UOLI2YgKw+uZ3geeSzjzllOhvd3ploBeYjESGHGyySzlBI5Xe61z?=
 =?us-ascii?q?cpwHCWaoI82r2Np+g4ThVGJf9F6mH1kGwtOmeQKOb1zh2g1dzUQWoX29lSq41T?=
 =?us-ascii?q?B0iCwprqyE0SzKwuTicgcHO2FRSGlji1fsPZa7j9QAUEe0aAgpkQOv5VzmyKhD?=
 =?us-ascii?q?uKR/M27TTF9KfyfsNWFiUaiwtr2Yb85U8pwosiZXUOW6YV+ETL7wuB8a0yLlH2?=
 =?us-ascii?q?tDyzE3bTCqupPlnxNkjGKRNmp8rH3cecto3xfQ+MTcReJN3joBXCR5iSPYBl+m?=
 =?us-ascii?q?M9mr/NWUkYzOsuS/V2KnS51SfjPnzYKGtCun+2JqBQezkOy0mt3iCQI6yzP018?=
 =?us-ascii?q?F2VSXUqxbxeorr2L67Me59fkloGUXz68x1GoxlloswhZcQ2WUVh5mP/HoHl3vz?=
 =?us-ascii?q?Pstf2a7kcHUNQjsLycbP4Af5wE1jMm6Jx4XhW3WYw8thZMO1bnkY2y0j9MBKFL?=
 =?us-ascii?q?mb7KZfkiRruFq4ohncYfx8njcb1Psv52QWg+APuAox0CqdBqoeElVfPSzpjx6I?=
 =?us-ascii?q?9cyxrL1LZGazdri9zFZ+ndekDL2YowBTQnD5eoo5HS9r78VyK1bM0Hz16oH5d9?=
 =?us-ascii?q?jcd9MTthuIkxjei+hZMo4+lv0PhSB/I2LyoWUly/InjRxpxZy1p5KIK2Jp/KKk?=
 =?us-ascii?q?GBJYMiD1atgX+jHsi6Zeg8mX05quHpVnBjUEQp/oQei0HzIVsPTtLxyOHyEkqn?=
 =?us-ascii?q?eHBbrfGheS6EV8oHLKDZ+rLGubJGUDwdVhWRmdJ1FfgAYOUzUhhZM5EgGqxMr8?=
 =?us-ascii?q?cEZ2/DwR51j4qgdSxeJsLRXwTmDfpAKwYDcuVJefNAZW7h1F50rNMc2e6f9zHz?=
 =?us-ascii?q?hF/pK7qgyBMHebZwNODWEGQUGEA1HjPr+z5djP6eSYB+y+L+fQbrWKs+BRS/CI?=
 =?us-ascii?q?xZe32It84zmMLtmPPmVlD/Aj2kpMQ3F5G8famzUOUSAXlDjNb8mUpBii4C13s9?=
 =?us-ascii?q?u//e/vWALu44uPFrRTPc9u+xCwnaeMKeqQiDxlJjZf05MG3WXIx6QH3F4OlyFu?=
 =?us-ascii?q?cCGgHq4dtSHWVqLfhK9WAwQfayNyL8ZI66M83g9QOc/UkN/117h4juIrBFdBT1?=
 =?us-ascii?q?DuhsapZckSKWGnKFzHHFqLNKiBJTDT38H3YKa8RadMg+lOqxKwuSiUE0n4MzSH?=
 =?us-ascii?q?ljnpUQ2vMO5WgCGaOhxepJ+ychJ3BWf/S9LmbwWxMMVrgj0u3b00mnTKOHYcMD?=
 =?us-ascii?q?dmdUNNq7yQ7SVAjfR+G2xO9HxlLeafliad7unYLIsWsPRxDiR1keJa/Go1y79P?=
 =?us-ascii?q?4C5YQ/x1nXiaktk7qlK+l8GLyzx6QF9ArStNiIuXvEJkf6LD+d0IXWvY+zoO4H?=
 =?us-ascii?q?+WBhBMoMFqTpXwuqRUjNTCnan0Lh9L6deS9swZQ4DQKcSaID8kNDLqBjffD00C?=
 =?us-ascii?q?VzHvfWXegVFN1fKf7HuYqrAkpZX23pkDULlWUBoyDPxeQkdoBtoPJNJ3VykonL?=
 =?us-ascii?q?iaisEg4XulsAKXQ91XuI/OUvbUCvLqbH6fhKdJah1Ox/XiJIM7Moz9xlwkdF93?=
 =?us-ascii?q?gMLLEU+WVtdI5mVoaA4w5l4L83VlTmQt0kf4cB+t8VcSE+K5mlg9jQ46Kegk6j?=
 =?us-ascii?q?rpy1s+OFfPoCw+jA83lMmhyTWRcST4Ka6sdYJbESz5sw42KJy/CxxydhG/kVBM?=
 =?us-ascii?q?OzDDS7dQlP1nb28vwArdv5RIMeRRQa1NfFkbwvTTL/wzzXxfpz+hyEsB4vHKTd?=
 =?us-ascii?q?NunQ0rfJqErnVP1gt5ZtklY6rdOO4BzFVBm4qNszWu2+R3xxURYw4L+WaTZAYW?=
 =?us-ascii?q?vVMBLLRgLC2tuqRq5BCOliVrZmcBTbwpr+hs+0d7PP6Pi2rpybIFIEG8LOySMr?=
 =?us-ascii?q?2Uv0DElMiBWFR20VkH0wFH9L5w0e8sdE2bU01px7yURDoTMs+XEwBebIJ/+Hfe?=
 =?us-ascii?q?diGLu+iFlYh0NIb7DqblQeCDv6ERiE+MHQA1EoBK5cMESMr/mHrEJNvqeeZWgS?=
 =?us-ascii?q?4m4x7mcQ2I?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAAxUhBch0O0hNFlGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJ4wUjBIpgT85lz4UgV8UGBMBgUuFYyI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpL4I2IoJlAwMBAiRSBgkBARw0A0YOBxIFgxyCAgWnAzOEA?=
 =?us-ascii?q?QGGLId8hD96gRyBETOHJSSFcgKJSoYGbI95RgcCgiaIH4cBCxiRQCyId5AQgUa?=
 =?us-ascii?q?CDk0jgzyCJxeNZlgeAQExAYEEAQGKZAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAAxUhBch0O0hNFlGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJ4wUjBIpgT85lz4UgV8UGBMBgUuFYyI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpL4I2IoJlAwMBAiRSBgkBARw0A0YOBxIFgxyCAgWnAzOEAQGGLId8hD96gRy?=
 =?us-ascii?q?BETOHJSSFcgKJSoYGbI95RgcCgiaIH4cBCxiRQCyId5AQgUaCDk0jgzyCJxeNZ?=
 =?us-ascii?q?lgeAQExAYEEAQGKZAEB?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="54800504"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 16:12:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726347AbeLLAM0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 19:12:26 -0500
Received: from mga04.intel.com ([192.55.52.120]:56048 "EHLO mga04.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726269AbeLLAMJ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 19:12:09 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
  by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 16:12:08 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="282839408"
Received: from rpedgeco-desk5.jf.intel.com ([10.54.75.141])
  by orsmga005.jf.intel.com with ESMTP; 11 Dec 2018 16:12:07 -0800
From: Rick Edgecombe <rick.p.edgecombe@intel.com>
To: akpm@linux-foundation.org, luto@kernel.org, will.deacon@arm.com,
        linux-mm@kvack.org, linux-kernel@vger.kernel.org,
        kernel-hardening@lists.openwall.com,
        naveen.n.rao@linux.vnet.ibm.com, anil.s.keshavamurthy@intel.com,
        davem@davemloft.net, mhiramat@kernel.org, rostedt@goodmis.org,
        mingo@redhat.com, ast@kernel.org, daniel@iogearbox.net,
        jeyu@kernel.org, namit@vmware.com, netdev@vger.kernel.org,
        ard.biesheuvel@linaro.org, jannh@google.com
Cc: kristen@linux.intel.com, dave.hansen@intel.com,
        deneen.t.dock@intel.com,
        Rick Edgecombe <rick.p.edgecombe@intel.com>
Subject: [PATCH v2 4/4] x86/vmalloc: Add TLB efficient x86 arch_vunmap
Date: Tue, 11 Dec 2018 16:03:54 -0800
Message-Id: <20181212000354.31955-5-rick.p.edgecombe@intel.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181212000354.31955-1-rick.p.edgecombe@intel.com>
References: <20181212000354.31955-1-rick.p.edgecombe@intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This adds a more efficient x86 architecture specific implementation of
arch_vunmap, that can free any type of special permission memory with only 1 TLB
flush.

In order to enable this, _set_pages_p and _set_pages_np are made non-static and
renamed set_pages_p_noflush and set_pages_np_noflush to better communicate
their different (non-flushing) behavior from the rest of the set_pages_*
functions.

The method for doing this with only 1 TLB flush was suggested by Andy
Lutomirski.

Suggested-by: Andy Lutomirski <luto@kernel.org>
Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
---
 arch/x86/include/asm/set_memory.h |  2 +
 arch/x86/mm/Makefile              |  3 +-
 arch/x86/mm/pageattr.c            | 11 +++--
 arch/x86/mm/vmalloc.c             | 71 +++++++++++++++++++++++++++++++
 4 files changed, 80 insertions(+), 7 deletions(-)
 create mode 100644 arch/x86/mm/vmalloc.c

diff --git a/arch/x86/include/asm/set_memory.h b/arch/x86/include/asm/set_memory.h
index 07a25753e85c..70ee81e8914b 100644
--- a/arch/x86/include/asm/set_memory.h
+++ b/arch/x86/include/asm/set_memory.h
@@ -84,6 +84,8 @@ int set_pages_x(struct page *page, int numpages);
 int set_pages_nx(struct page *page, int numpages);
 int set_pages_ro(struct page *page, int numpages);
 int set_pages_rw(struct page *page, int numpages);
+int set_pages_np_noflush(struct page *page, int numpages);
+int set_pages_p_noflush(struct page *page, int numpages);
 
 extern int kernel_set_to_readonly;
 void set_kernel_text_rw(void);
diff --git a/arch/x86/mm/Makefile b/arch/x86/mm/Makefile
index 4b101dd6e52f..189681f863a6 100644
--- a/arch/x86/mm/Makefile
+++ b/arch/x86/mm/Makefile
@@ -13,7 +13,8 @@ CFLAGS_REMOVE_mem_encrypt_identity.o	= -pg
 endif
 
 obj-y	:=  init.o init_$(BITS).o fault.o ioremap.o extable.o pageattr.o mmap.o \
-	    pat.o pgtable.o physaddr.o setup_nx.o tlb.o cpu_entry_area.o
+	    pat.o pgtable.o physaddr.o setup_nx.o tlb.o cpu_entry_area.o \
+	    vmalloc.o
 
 # Make sure __phys_addr has no stackprotector
 nostackp := $(call cc-option, -fno-stack-protector)
diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index db7a10082238..db0a4dfb5a7f 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -2248,9 +2248,7 @@ int set_pages_rw(struct page *page, int numpages)
 	return set_memory_rw(addr, numpages);
 }
 
-#ifdef CONFIG_DEBUG_PAGEALLOC
-
-static int __set_pages_p(struct page *page, int numpages)
+int set_pages_p_noflush(struct page *page, int numpages)
 {
 	unsigned long tempaddr = (unsigned long) page_address(page);
 	struct cpa_data cpa = { .vaddr = &tempaddr,
@@ -2269,7 +2267,7 @@ static int __set_pages_p(struct page *page, int numpages)
 	return __change_page_attr_set_clr(&cpa, 0);
 }
 
-static int __set_pages_np(struct page *page, int numpages)
+int set_pages_np_noflush(struct page *page, int numpages)
 {
 	unsigned long tempaddr = (unsigned long) page_address(page);
 	struct cpa_data cpa = { .vaddr = &tempaddr,
@@ -2288,6 +2286,7 @@ static int __set_pages_np(struct page *page, int numpages)
 	return __change_page_attr_set_clr(&cpa, 0);
 }
 
+#ifdef CONFIG_DEBUG_PAGEALLOC
 void __kernel_map_pages(struct page *page, int numpages, int enable)
 {
 	if (PageHighMem(page))
@@ -2303,9 +2302,9 @@ void __kernel_map_pages(struct page *page, int numpages, int enable)
 	 * and hence no memory allocations during large page split.
 	 */
 	if (enable)
-		__set_pages_p(page, numpages);
+		set_pages_p_noflush(page, numpages);
 	else
-		__set_pages_np(page, numpages);
+		set_pages_np_noflush(page, numpages);
 
 	/*
 	 * We should perform an IPI and flush all tlbs,
diff --git a/arch/x86/mm/vmalloc.c b/arch/x86/mm/vmalloc.c
new file mode 100644
index 000000000000..be9ea42c3dfe
--- /dev/null
+++ b/arch/x86/mm/vmalloc.c
@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * vmalloc.c: x86 arch version of vmalloc.c
+ *
+ * (C) Copyright 2018 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2
+ * of the License.
+ */
+
+#include <linux/mm.h>
+#include <linux/set_memory.h>
+#include <linux/vmalloc.h>
+
+static void set_area_direct_np(struct vm_struct *area)
+{
+	int i;
+
+	for (i = 0; i < area->nr_pages; i++)
+		set_pages_np_noflush(area->pages[i], 1);
+}
+
+static void set_area_direct_prw(struct vm_struct *area)
+{
+	int i;
+
+	for (i = 0; i < area->nr_pages; i++)
+		set_pages_p_noflush(area->pages[i], 1);
+}
+
+void arch_vunmap(struct vm_struct *area, int deallocate_pages)
+{
+	int immediate = area->flags & VM_IMMEDIATE_UNMAP;
+	int special = area->flags & VM_HAS_SPECIAL_PERMS;
+
+	/* Unmap from vmalloc area */
+	remove_vm_area(area->addr);
+
+	/* If no need to reset directmap perms, just check if need to flush */
+	if (!(deallocate_pages || special)) {
+		if (immediate)
+			vm_unmap_aliases();
+		return;
+	}
+
+	/* From here we need to make sure to reset the direct map perms */
+
+	/*
+	 * If the area being freed does not have any extra capabilities, we can
+	 * just reset the directmap to RW before freeing.
+	 */
+	if (!immediate) {
+		set_area_direct_prw(area);
+		vm_unmap_aliases();
+		return;
+	}
+
+	/*
+	 * If the vm being freed has security sensitive capabilities such as
+	 * executable we need to make sure there is no W window on the directmap
+	 * before removing the X in the TLB. So we set not present first so we
+	 * can flush without any other CPU picking up the mapping. Then we reset
+	 * RW+P without a flush, since NP prevented it from being cached by
+	 * other cpus.
+	 */
+	set_area_direct_np(area);
+	vm_unmap_aliases();
+	set_area_direct_prw(area);
+}
-- 
2.17.1

