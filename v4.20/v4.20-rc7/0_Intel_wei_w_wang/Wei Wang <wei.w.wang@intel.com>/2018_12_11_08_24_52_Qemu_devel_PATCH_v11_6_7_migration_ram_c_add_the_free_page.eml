Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 19:47:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A54EC5807A2
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 01:01:38 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 01:01:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A7T4FvBLesvJg9XpwrNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKv3/rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA3/mLZhMtyg6JVvRyhvx5yzYzbbY2IOvdyYr3SfcgBSGZdQspcTTBND5mg?=
 =?us-ascii?q?Y4cTCecKIOZWr5P6p1sLtRaxBRejBOLywTBInHD226I62PkmHADIwgMgHsgCsX?=
 =?us-ascii?q?rOoNT7LqgSV++1wbLJzTXFc/NZxzP95JLUfRAmpPGBRLR9etfSx0k3Dw7JkEmc?=
 =?us-ascii?q?pI//Mz+Iy+gAsHKX4/RuWO+vkWIrtgN8riCyysoihYTFnJ8Zx17L+Clj3Yo4K9?=
 =?us-ascii?q?y1RFRmbdK4DJddsTyROZFsTcM4WW5ovT43yr0Ytp6/eygH0JAnxx/Ea/ybaIiE?=
 =?us-ascii?q?+B3jVOCMITtig3JlYr2/iw6z8Uim1OL8StG53EhWoidGiNXAq20B2h/J5sSZRP?=
 =?us-ascii?q?Zw/l2t1SuN2gzL7+FLO0E0la7VK547xb4wk4IesV3dES/zhUX6lbKZeVs6+ue2?=
 =?us-ascii?q?7+Tre67pppiBN49ylg7xLL8ulsu7AeQ5MQgBQXKX+Ouh1LD7+U35QbNKjuA5k6?=
 =?us-ascii?q?XDsZDaI9gbqbC9AwNPzokj7BO/Aiyg0NQfm3kHI1RFeA+dg4juIVHOL+j0De2j?=
 =?us-ascii?q?jFS0jDdr2/fGM6XlApXMLXjMjq3tfLlg60NHzAozzNZf549bC70bIfLzXFPxu8?=
 =?us-ascii?q?LcDhMjLwO0xOPnW51A0JgDUzePHrOBK/GV9luJ/f40Ze+LYoATpXD6Mfdi4vfv?=
 =?us-ascii?q?iXownxgaZbWo2p0ML2m1G+kjL0iHbH6/v9EaDG1fuwM/SPDt2kSPVCMWa3usUq?=
 =?us-ascii?q?Z5/DwiFY+9Ea/FQYaihqHH2z20SYZLbGJLAUzZDHHzao+fUO0NYi/BHsg0izEB?=
 =?us-ascii?q?SP2tRpEs0Tmoswn1zachKfDbvmUGtIj/1d8w6+DNvRUz7iBvScOUyGCWCmZsk2?=
 =?us-ascii?q?VOQCU5mOh6ulBV0FqP0aFkxfdfEJgb/u5IVBs3MZf01eF2C9nuHAnGe5PBRFmn?=
 =?us-ascii?q?Rt+rGy0ZVN89w9YSJU16HpHqlh3f0jC6K6UYm7yCGNo/9aeP8WL2IpNCxneO66?=
 =?us-ascii?q?AngBFyXcZOc3Lgmad5+CDSAZLElwOSkKP8JvdU5zLE6GrWlTnGh0pfSgMlCag?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BcBgB5fA9cmBHrdtBkHgEGBwaBZYExg?=
 =?us-ascii?q?mKMc4sxKYE/mWoUGBSHeCI4EgEDAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQI?=
 =?us-ascii?q?DGAmCXAMDAQIkHwokBQMDAQIGAQFICAMBUwcSBYMcggIBBKYxM4oth3uEP3qBH?=
 =?us-ascii?q?IFEhykRhgECiRaHJJA9BwKCJo8qAhaBXIUXikyIWEuQEIFdgXdNI4M8gicXEot?=
 =?us-ascii?q?lgjM0MQGBBogXASUwgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BcBgB5fA9cmBHrdtBkHgEGBwaBZYExgmKMc4sxKYE/mWo?=
 =?us-ascii?q?UGBSHeCI4EgEDAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGAmCXAMDAQIkH?=
 =?us-ascii?q?wokBQMDAQIGAQFICAMBUwcSBYMcggIBBKYxM4oth3uEP3qBHIFEhykRhgECiRa?=
 =?us-ascii?q?HJJA9BwKCJo8qAhaBXIUXikyIWEuQEIFdgXdNI4M8gicXEotlgjM0MQGBBogXA?=
 =?us-ascii?q?SUwgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; 
   d="scan'208";a="141612445"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 01:01:37 -0800
Received: from localhost ([::1]:36638 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWdv6-0004zB-V1
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 04:01:37 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51638)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <wei.w.wang@intel.com>) id 1gWdrk-0002Yk-Fd
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 03:58:09 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <wei.w.wang@intel.com>) id 1gWdrh-0006LJ-I1
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 03:58:08 -0500
Received: from mga07.intel.com ([134.134.136.100]:27021)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <wei.w.wang@intel.com>)
	id 1gWdrh-0006FH-87
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 03:58:05 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	11 Dec 2018 00:58:04 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,341,1539673200"; d="scan'208";a="117803156"
Received: from devel-ww.sh.intel.com ([10.239.48.119])
	by orsmga001.jf.intel.com with ESMTP; 11 Dec 2018 00:58:02 -0800
From: Wei Wang <wei.w.wang@intel.com>
To: qemu-devel@nongnu.org, virtio-dev@lists.oasis-open.org, mst@redhat.com,
	quintela@redhat.com, dgilbert@redhat.com, peterx@redhat.com
Date: Tue, 11 Dec 2018 16:24:52 +0800
Message-Id: <1544516693-5395-7-git-send-email-wei.w.wang@intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1544516693-5395-1-git-send-email-wei.w.wang@intel.com>
References: <1544516693-5395-1-git-send-email-wei.w.wang@intel.com>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 134.134.136.100
Subject: [Qemu-devel] [PATCH v11 6/7] migration/ram.c: add the free page
 optimization enable flag
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: pbonzini@redhat.com, liliang.opensource@gmail.com, nilal@redhat.com,
	wei.w.wang@intel.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

This patch adds the free page optimization enable flag, and a function
to set this flag. When the free page optimization is enabled, not all
the pages are needed to be sent in the bulk stage.

Why using a new flag, instead of directly disabling ram_bulk_stage when
the optimization is running?
Thanks for Peter Xu's reminder that disabling ram_bulk_stage will affect
the use of compression. Please see save_page_use_compression. When
xbzrle and compression are used, if free page optimizaion causes the
ram_bulk_stage to be disabled, save_page_use_compression will return
false, which disables the use of compression. That is, if free page
optimization avoids the sending of half of the guest pages, the other
half of pages loses the benefits of compression in the meantime. Using a
new flag to let migration_bitmap_find_dirty skip the free pages in the
bulk stage will avoid the above issue.

Signed-off-by: Wei Wang <wei.w.wang@intel.com>
CC: Dr. David Alan Gilbert <dgilbert@redhat.com>
CC: Juan Quintela <quintela@redhat.com>
CC: Michael S. Tsirkin <mst@redhat.com>
CC: Peter Xu <peterx@redhat.com>
---
 include/migration/misc.h |  1 +
 migration/ram.c          | 18 +++++++++++++++++-
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/include/migration/misc.h b/include/migration/misc.h
index 15f8d00..1227279 100644
--- a/include/migration/misc.h
+++ b/include/migration/misc.h
@@ -37,6 +37,7 @@ void precopy_infrastructure_init(void);
 void precopy_add_notifier(NotifierWithReturn *n);
 void precopy_remove_notifier(NotifierWithReturn *n);
 int precopy_notify(PrecopyNotifyReason reason, Error **errp);
+void precopy_enable_free_page_optimization(void);
 
 void ram_mig_init(void);
 void qemu_guest_free_page_hint(void *addr, size_t len);
diff --git a/migration/ram.c b/migration/ram.c
index 1e00d92..188bbad 100644
--- a/migration/ram.c
+++ b/migration/ram.c
@@ -290,6 +290,8 @@ struct RAMState {
     uint32_t last_version;
     /* We are in the first round */
     bool ram_bulk_stage;
+    /* The free page optimization is enabled */
+    bool fpo_enabled;
     /* How many times we have dirty too many pages */
     int dirty_rate_high_cnt;
     /* these variables are used for bitmap sync */
@@ -354,6 +356,15 @@ int precopy_notify(PrecopyNotifyReason reason, Error **errp)
     return notifier_with_return_list_notify(&precopy_notifier_list, &pnd);
 }
 
+void precopy_enable_free_page_optimization(void)
+{
+    if (!ram_state) {
+        return;
+    }
+
+    ram_state->fpo_enabled = true;
+}
+
 uint64_t ram_bytes_remaining(void)
 {
     return ram_state ? (ram_state->migration_dirty_pages * TARGET_PAGE_SIZE) :
@@ -1567,7 +1578,11 @@ unsigned long migration_bitmap_find_dirty(RAMState *rs, RAMBlock *rb,
         return size;
     }
 
-    if (rs->ram_bulk_stage && start > 0) {
+    /*
+     * When the free page optimization is enabled, we need to check the bitmap
+     * to send the non-free pages rather than all the pages in the bulk stage.
+     */
+    if (!rs->fpo_enabled && rs->ram_bulk_stage && start > 0) {
         next = start + 1;
     } else {
         next = find_next_bit(bitmap, size, start);
@@ -2600,6 +2615,7 @@ static void ram_state_reset(RAMState *rs)
     rs->last_page = 0;
     rs->last_version = ram_list.version;
     rs->ram_bulk_stage = true;
+    rs->fpo_enabled = false;
 }
 
 #define MAX_WAIT 50 /* ms, half buffered_file limit */
-- 
1.8.3.1


