Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:50:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 58E4558079D
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 05:35:10 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga005-1.fm.intel.com with ESMTP; 12 Dec 2018 05:35:10 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AKIqN9hVDkR8/lrHZOyO8Kn6lnUbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbB2Pt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+gqFVrxCvpxNwzIDafZmVOfh8cK7SYN8XS3ZNUdhKVyFaHo+8?=
 =?us-ascii?q?dpECA/YdMepEs4XwoUYFoxukBQmrAePi0jpGiWHo3a071eQqDAHJ3AskH9IArX?=
 =?us-ascii?q?/Zq9b1NakVUeCxwqnF1i/DYO1L1jf98ofIbgotru2LXbJ1aMfcz1QkGQDdjliI?=
 =?us-ascii?q?t4DpIzCY2v4Qv2SG7OdsT/yjhmAnpg1rvzSixN8ghpfVio8R0FzI6Ct0zJgvKd?=
 =?us-ascii?q?GlS0N2b8SoHIVTuiycKoB4WNktQ3tytyY/0rAGuYC0fCwNyJk/wx7faueHc5ST?=
 =?us-ascii?q?4h75W+aRJyp4iGhieLKliBa+6UmgyuviWcmoyFtGsDZJn9rWunwQyhDe6dKLRu?=
 =?us-ascii?q?Vz80qhwzqDygLe5vlBIU8ulKrbL5AhwqQ3lpoWqUnDBzH5mEDrjKOPa0or5Pao?=
 =?us-ascii?q?5PrjYrn/vZCcMJJ0igfiPaswgcyzBuA4MgkNX2eF4+i926Dj8FX9QLVLiP02j6?=
 =?us-ascii?q?bYvIrbJcQduq62HQtV3pw/5Ba4Cjery9IYnX4BLFJKfhKHkpLlO1bUIPD3Ffu/?=
 =?us-ascii?q?mUijkC93x/DaOb3sGpHNLnnAkLj/Z7p85FNcxRE3zdBe4ZJUF74ALOjyWk/3qN?=
 =?us-ascii?q?zXEBs5PxaozObgDdUunr4YQn+FV6+FLLvJ4xjP4uM0P/LKYogTtzDgbf8/6Lnr?=
 =?us-ascii?q?hH49nFYbOq6xwZoQbmv/B/ljPgCVbGThhoQ8F3wXtF87Re3ulFrQSDNWejO+Ur?=
 =?us-ascii?q?wx4nQhBZu7AJzfboaqhrOHwWG8BJIBfX1MCF2HDSL1cZ6ZUewHciOYL5xdlWkd?=
 =?us-ascii?q?WL28DoUl0hqtnAn9zbVhM6zT4CJLm4jk0Y1W6vPSk1kN8jh6R5CezGaJQUluk2?=
 =?us-ascii?q?8ITiNw16d69x8ugmyf2LR11qQLXedY4OlEB183?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AlAAAgDRFcmBHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJijBRfizOCDYkTjkCBcxQYFIc+IjQJDQEDAQEBAQEBAgETAQEBAQE?=
 =?us-ascii?q?ICwsGGw4vgjYFAgMYCYJcAwMBAiQfCikDAwECBgEBHykIAwEdNhkFgxyBagMVA?=
 =?us-ascii?q?QSmWjOFQIJHDYIcjDwXgUA/gRGFaYgFAok6A5chLgmOJ4MlCxiJaYddjy2KEoF?=
 =?us-ascii?q?Ggg4zGggbFYMngicXEo4MQDGBBxyKaYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AlAAAgDRFcmBHrdtBjHQEBBQEHBQGBUQgBCwGBMIJijBR?=
 =?us-ascii?q?fizOCDYkTjkCBcxQYFIc+IjQJDQEDAQEBAQEBAgETAQEBAQEICwsGGw4vgjYFA?=
 =?us-ascii?q?gMYCYJcAwMBAiQfCikDAwECBgEBHykIAwEdNhkFgxyBagMVAQSmWjOFQIJHDYI?=
 =?us-ascii?q?cjDwXgUA/gRGFaYgFAok6A5chLgmOJ4MlCxiJaYddjy2KEoFGgg4zGggbFYMng?=
 =?us-ascii?q?icXEo4MQDGBBxyKaYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="57156670"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 05:35:09 -0800
Received: from localhost ([::1]:44926 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX4fM-00084W-IF
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 08:35:08 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46007)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gX4YT-0002My-Nw
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 08:28:07 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gX4YP-0000qi-Nf
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 08:28:01 -0500
Received: from mx1.redhat.com ([209.132.183.28]:57140)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gX4YL-0000n9-Cb; Wed, 12 Dec 2018 08:27:53 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id B4AC23097023;
	Wed, 12 Dec 2018 13:27:52 +0000 (UTC)
Received: from linux.fritz.box.com (ovpn-117-245.ams2.redhat.com
	[10.36.117.245])
	by smtp.corp.redhat.com (Postfix) with ESMTP id A037F60C5C;
	Wed, 12 Dec 2018 13:27:51 +0000 (UTC)
From: Kevin Wolf <kwolf@redhat.com>
To: qemu-block@nongnu.org
Date: Wed, 12 Dec 2018 14:26:58 +0100
Message-Id: <20181212132735.16080-5-kwolf@redhat.com>
In-Reply-To: <20181212132735.16080-1-kwolf@redhat.com>
References: <20181212132735.16080-1-kwolf@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.43]);
	Wed, 12 Dec 2018 13:27:52 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PULL 04/41] dmg: exchanging hardcoded dmg UDIF block
 types to enum.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, peter.maydell@linaro.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Julio Faracco <jcfaracco@gmail.com>

This change is better to understand what kind of block type is being
handled by the code. Using a syntax similar to the DMG documentation is
easier than tracking all hex values assigned to a block type.

Signed-off-by: Julio Faracco <jcfaracco@gmail.com>
Signed-off-by: Kevin Wolf <kwolf@redhat.com>
---
 block/dmg.c | 43 ++++++++++++++++++++++++++++---------------
 1 file changed, 28 insertions(+), 15 deletions(-)

diff --git a/block/dmg.c b/block/dmg.c
index 86bb2344ea..50e91aef6d 100644
--- a/block/dmg.c
+++ b/block/dmg.c
@@ -44,6 +44,19 @@ enum {
     DMG_SECTORCOUNTS_MAX =3D DMG_LENGTHS_MAX / 512,
 };
=20
+enum {
+    /* DMG Block Type */
+    UDZE =3D 0, /* Zeroes */
+    UDRW,     /* RAW type */
+    UDIG,     /* Ignore */
+    UDCO =3D 0x80000004,
+    UDZO,
+    UDBZ,
+    ULFO,
+    UDCM =3D 0x7ffffffe, /* Comments */
+    UDLE               /* Last Entry */
+};
+
 static int dmg_probe(const uint8_t *buf, int buf_size, const char *filen=
ame)
 {
     int len;
@@ -108,16 +121,16 @@ static void update_max_chunk_size(BDRVDMGState *s, =
uint32_t chunk,
     uint32_t uncompressed_sectors =3D 0;
=20
     switch (s->types[chunk]) {
-    case 0x80000005: /* zlib compressed */
-    case 0x80000006: /* bzip2 compressed */
-    case 0x80000007: /* lzfse compressed */
+    case UDZO: /* zlib compressed */
+    case UDBZ: /* bzip2 compressed */
+    case ULFO: /* lzfse compressed */
         compressed_size =3D s->lengths[chunk];
         uncompressed_sectors =3D s->sectorcounts[chunk];
         break;
-    case 1: /* copy */
+    case UDRW: /* copy */
         uncompressed_sectors =3D DIV_ROUND_UP(s->lengths[chunk], 512);
         break;
-    case 2: /* zero */
+    case UDIG: /* zero */
         /* as the all-zeroes block may be large, it is treated specially=
: the
          * sector is not copied from a large buffer, a simple memset is =
used
          * instead. Therefore uncompressed_sectors does not need to be s=
et. */
@@ -186,13 +199,13 @@ typedef struct DmgHeaderState {
 static bool dmg_is_known_block_type(uint32_t entry_type)
 {
     switch (entry_type) {
-    case 0x00000001:    /* uncompressed */
-    case 0x00000002:    /* zeroes */
-    case 0x80000005:    /* zlib */
+    case UDRW:    /* uncompressed */
+    case UDIG:    /* zeroes */
+    case UDZO:    /* zlib */
         return true;
-    case 0x80000006:    /* bzip2 */
+    case UDBZ:    /* bzip2 */
         return !!dmg_uncompress_bz2;
-    case 0x80000007:    /* lzfse */
+    case ULFO:    /* lzfse */
         return !!dmg_uncompress_lzfse;
     default:
         return false;
@@ -586,7 +599,7 @@ static inline int dmg_read_chunk(BlockDriverState *bs=
, uint64_t sector_num)
=20
         s->current_chunk =3D s->n_chunks;
         switch (s->types[chunk]) { /* block entry type */
-        case 0x80000005: { /* zlib compressed */
+        case UDZO: { /* zlib compressed */
             /* we need to buffer, because only the chunk as whole can be
              * inflated. */
             ret =3D bdrv_pread(bs->file, s->offsets[chunk],
@@ -609,7 +622,7 @@ static inline int dmg_read_chunk(BlockDriverState *bs=
, uint64_t sector_num)
                 return -1;
             }
             break; }
-        case 0x80000006: /* bzip2 compressed */
+        case UDBZ: /* bzip2 compressed */
             if (!dmg_uncompress_bz2) {
                 break;
             }
@@ -630,7 +643,7 @@ static inline int dmg_read_chunk(BlockDriverState *bs=
, uint64_t sector_num)
                 return ret;
             }
             break;
-        case 0x80000007:
+        case ULFO:
             if (!dmg_uncompress_lzfse) {
                 break;
             }
@@ -651,14 +664,14 @@ static inline int dmg_read_chunk(BlockDriverState *=
bs, uint64_t sector_num)
                 return ret;
             }
             break;
-        case 1: /* copy */
+        case UDRW: /* copy */
             ret =3D bdrv_pread(bs->file, s->offsets[chunk],
                              s->uncompressed_chunk, s->lengths[chunk]);
             if (ret !=3D s->lengths[chunk]) {
                 return -1;
             }
             break;
-        case 2: /* zero */
+        case UDIG: /* zero */
             /* see dmg_read, it is treated specially. No buffer needs to=
 be
              * pre-filled, the zeroes can be set directly. */
             break;
--=20
2.19.2


