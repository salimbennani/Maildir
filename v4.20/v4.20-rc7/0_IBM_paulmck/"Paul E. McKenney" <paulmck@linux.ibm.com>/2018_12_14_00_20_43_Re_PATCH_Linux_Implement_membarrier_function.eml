Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:43:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 22C4858061F;
	Thu, 13 Dec 2018 16:20:59 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 16:20:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AkZpcThJZp8jr/uwpANmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/zzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6m?=
 =?us-ascii?q?b4sBAOUOIftXoIvzqFUNthu+HQuhCfjzyjNUnHL6wbE23v4/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtOqscS/q6zLTMzT7eYP1awyr25o/UfR4kv/6MW7RwftTRyEUhCgjIiU2Q?=
 =?us-ascii?q?ppb4PzOR0+QCr2ub4vFkVeKujW4ntg5wriKuxsg3j4nFnJ4aylfB9Shgxos+ON?=
 =?us-ascii?q?62SFZjbNK6DJddszuWO5Z4T888WW1kpSU3xqEctZO6fiUG0JAqywTdZvCbaYSF?=
 =?us-ascii?q?4QzvWPyfLDp7gn9uZaixiAyo8Ue6z+3xTsm030hOripCitTMqH8N2ALJ6sSdSf?=
 =?us-ascii?q?ty4F2h2TCR2ADX8O1EJlo0laXDJ54gxL4/iIYTvFzdEiPqnEj6lrKae0s69uSy?=
 =?us-ascii?q?9ujqYanqqoWdOoJ2kg3+N74hms27AeQ2KAgOWG2b9Py41L3i+035XbpLguQ1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqgDw9S3Icj7QiwDy293dQGknkIMkhFdAiEj4f3IVHOJu73DfOl?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZOrvIsVCU/uIvP/WMZIgNtTb9Mfcl5uLu?=
 =?us-ascii?q?gmU+mVMHfampwIEYaHa3Hvl9J0WZYHzsgsoOEGsQvwo+SvDqh0OGUTJJe3myWK?=
 =?us-ascii?q?c87CkhCI26FYfDWpytgLuZ0Se5GZ1ZeHpKClOLEXfucYWEXOwBaCaTIs9njzwF?=
 =?us-ascii?q?WqKtS44n1RGyqgD6z6BrIfbT+i0drZjjzsR65/XPlREu8jx5F96S03qNT2FznW?=
 =?us-ascii?q?MEXSU207p9oUFmzleD0K54g+FXFNBJ5vNJVBs6OoDYz+BgF9/yXQfBdM+TSFm6?=
 =?us-ascii?q?WtWmHS0xTtUpzt8NeUl9Hc+ujhTC3yWwBb8VmKeGBJg18qLawnjwKNxxy3fA1K?=
 =?us-ascii?q?k9kVYmRtFDOnGhhq567wLTHZLGk12Fl6a2cqQRxDPC+32dzWWQpk1YUBR/UaPe?=
 =?us-ascii?q?XX8BYEvaqtD55kDHT7+qErknNgpBycifKqpFcNHpjFNGROv9N9TaeW6+h2CwBR?=
 =?us-ascii?q?OQzLOWcIXqY3kd3DnaCEUcjg8c52iGOhYkCiehuW3eCiduGkzpY0739el+qXW7?=
 =?us-ascii?q?TlI7zg2Qbk1h0aa19QARhfCGV/wT2bcEsj87qzpoBFa9w87WC92Yqgp9faVcZN?=
 =?us-ascii?q?Q94EtH1WPZrQB9IoasL6d4hl4acgR3uUzu2g5zCoVBl8gqsXwrwBBzKaKezFNO?=
 =?us-ascii?q?aTeY0YrsNb3QL2n45AqvZLLO2lHCzNaW/b8C5+48q1r9swCmCEoj/2983NlIzn?=
 =?us-ascii?q?ST/JPKDAkVUZLvSUs38xl6p7fHYigy/Y/U1HtsMbWqvT/Gwd4mGOwlyhO4dddF?=
 =?us-ascii?q?LKyEDBPyE9EdB8W2KO0qhkKlYQ4eMOFT9K47JcWmd/Sd1a6vPeZgmi+mjGtd7I?=
 =?us-ascii?q?B81EKM6zRzSurS05kZxPGY2xONVy3gg1e5rsD3hYdEaCkIHmq+1SfrHpRRabB1?=
 =?us-ascii?q?fYoRD2ehPde3xtRni5HxQXFY8EOsCE0c2M+ufxqfdFj93QxW1UQKrn2rgyq4zz?=
 =?us-ascii?q?pokz43qqqTxjDBw+PndBAfIG5EWHFijUvwIYizl90bXEmoYxIplRe//kb62q5b?=
 =?us-ascii?q?qb97L2nSR0dIYif3I3tjUqu2qrqNfcpP5Ik0viVQVeS2eUqaRaLloxsGzyPjGH?=
 =?us-ascii?q?NTxDIheDGwuZX5nBt6hHiGLHlpr3rZesBwxRHB69zaXvNR2jsGRC9liTjYHFS8?=
 =?us-ascii?q?Pt+p/cmKmJfHqOyxS2WhVphLeynx0YyArDe75XFtARCnn/G8gNrnHRI40S/60d?=
 =?us-ascii?q?lnTiHIrBf6Yon22KW2K+Nnfk90BFDi78p2AJ1xkow1hJsIw3gVmo2V/WYbkWf0?=
 =?us-ascii?q?Kdhb2rjxbHsXST4L3t7a+g7l2EJ4I3KNxoL5UGidw8R7a9m7ZGMWxjwy78RQBK?=
 =?us-ascii?q?iI67xEmDN/okCkogLJffh9gjAdxOMr6H4bgOEGohAhzyuDDbAJAUlXIzbsmA+W?=
 =?us-ascii?q?4NCko6Vaf2Kvcbm21EpjktGtFrCCogdAWHnnfpcuBzN/7sJ6MFjUyn389pnkeM?=
 =?us-ascii?q?XMbdIUrhCUjxDAj+1PJJMwjPUKgzdnOXnmvX0k0OM7iR1u3ZenvImIMWlt/aS5?=
 =?us-ascii?q?AgJGOT3xfc8c5jbtjaNGlMaMw4+vBolhGikMXJbwVv2nCjUStfD6NwqUFD08t2?=
 =?us-ascii?q?yWGb7eHQ+Z9UdnoGjDE5GtN3GLOnYZyc9uSwWaJExamAoURik1noYlFgC2w8zs?=
 =?us-ascii?q?aEV56SoU5lHmsRtA0P5oOwP8UmfCpweodzE0R4KELBdN6gFC5kHVMdGR7+5pHi?=
 =?us-ascii?q?FY+IGhoxKJKmCBewtICmQJUFSeB1//Jrmu+cXA8++AC+u+KPvOfKyOqfFEWPeO?=
 =?us-ascii?q?356vyYxm/zCDNsiUOnliDvs72ldMXHxjGsTZnSkPRDITly7Xc8GboxK88DVtrs?=
 =?us-ascii?q?+j6PTrRB7v5YyXBrtSL9pv+hO2gaSCN+KKhyZ5MzFY1pwSyn/S1bgfx0UfiyVv?=
 =?us-ascii?q?dzmrDLQBujTBTKPWmq9LEREbbzl/O9dP76I5xgNNI9LUisvp1r5kif44E01KVU?=
 =?us-ascii?q?H6lcGze8MLI3uxNFfGBEuQMLSGJDvLw9z4YK+mSL1QivlUuAO0uTqBD0DjOTGD?=
 =?us-ascii?q?nSHzVx+zKeFMkD2bPBtGtYGhcxZtDHLvQ878ZhKnMN94kzs2zKYwhnPLM24cLD?=
 =?us-ascii?q?d9f1lMrr2W8SNXnPF/F3Zd4XpiKOmOgzyZ4PXAKpYKrftrBTx5luJA73Q8zrtV?=
 =?us-ascii?q?7SdES+R0mSvStNFupV6mn/KLyjpmVhpOtzlKiJiKvUVkJaXW6J1AVWzY8xIK6G?=
 =?us-ascii?q?XDQygN8vJhA9ungLxd0N6HwLnvJS1E28jT4s8VAcSSKMudLnM7PVzkFCOCXzEI?=
 =?us-ascii?q?VTq6CWaKn0VAlPSZ9VWRr54nut7tkp9IQbheB3IvEfZPQHxsAdhKDdE/ezgHnL?=
 =?us-ascii?q?idgd9CrS6mpQTVQc5ZlpTGUO+CR/TlLXCSirwSNEhA+q/xMYlGbt6z4EdlcFQv?=
 =?us-ascii?q?2d2SQ0c=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AMAQAX9hJch0O0hNFjDg4BAQEEAQEHB?=
 =?us-ascii?q?AEBgWWDbI0bizOCDRSZRQEBKwGHRSI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjY?=
 =?us-ascii?q?kAYJhAQEBAQIBAQIPFRM/BgkBAQoYCSUDDAUYMRgdgn+BeQgDAp07iVgBAQGBa?=
 =?us-ascii?q?jOFMYR7jDwRBoFAP4ERgxKEWgGGAQKQRY91VQcCAopKhwILGIFciEaHKJkiAgQ?=
 =?us-ascii?q?GBQITAYFdgXdwFYIIgSCCJheNYlyBVgEBIYlRASWCJwEB?=
X-IPAS-Result: =?us-ascii?q?A0AMAQAX9hJch0O0hNFjDg4BAQEEAQEHBAEBgWWDbI0bizO?=
 =?us-ascii?q?CDRSZRQEBKwGHRSI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJhAQEBAQIBA?=
 =?us-ascii?q?QIPFRM/BgkBAQoYCSUDDAUYMRgdgn+BeQgDAp07iVgBAQGBajOFMYR7jDwRBoF?=
 =?us-ascii?q?AP4ERgxKEWgGGAQKQRY91VQcCAopKhwILGIFciEaHKJkiAgQGBQITAYFdgXdwF?=
 =?us-ascii?q?YIIgSCCJheNYlyBVgEBIYlRASWCJwEB?=
X-IronPort-AV: E=Sophos;i="5.56,350,1539673200"; 
   d="scan'208";a="56841855"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 16:20:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728433AbeLNAUw (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 19:20:52 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:59074 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1726254AbeLNAUw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 19:20:52 -0500
Received: from pps.filterd (m0098414.ppops.net [127.0.0.1])
        by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBE0JG02116697
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 19:20:50 -0500
Received: from e14.ny.us.ibm.com (e14.ny.us.ibm.com [129.33.205.204])
        by mx0b-001b2d01.pphosted.com with ESMTP id 2pbwcgufmr-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Thu, 13 Dec 2018 19:20:50 -0500
Received: from localhost
        by e14.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <paulmck@linux.vnet.ibm.com>;
        Fri, 14 Dec 2018 00:20:49 -0000
Received: from b01cxnp22035.gho.pok.ibm.com (9.57.198.25)
        by e14.ny.us.ibm.com (146.89.104.201) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Fri, 14 Dec 2018 00:20:44 -0000
Received: from b01ledav003.gho.pok.ibm.com (b01ledav003.gho.pok.ibm.com [9.57.199.108])
        by b01cxnp22035.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBE0KhuD20119760
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Fri, 14 Dec 2018 00:20:43 GMT
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 3018BB2067;
        Fri, 14 Dec 2018 00:20:43 +0000 (GMT)
Received: from b01ledav003.gho.pok.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id 00AE3B205F;
        Fri, 14 Dec 2018 00:20:42 +0000 (GMT)
Received: from paulmck-ThinkPad-W541 (unknown [9.70.82.38])
        by b01ledav003.gho.pok.ibm.com (Postfix) with ESMTP;
        Fri, 14 Dec 2018 00:20:42 +0000 (GMT)
Received: by paulmck-ThinkPad-W541 (Postfix, from userid 1000)
        id 4A50416C5F6F; Thu, 13 Dec 2018 16:20:43 -0800 (PST)
Date: Thu, 13 Dec 2018 16:20:43 -0800
From: "Paul E. McKenney" <paulmck@linux.ibm.com>
To: Alan Stern <stern@rowland.harvard.edu>
Cc: David Goldblatt <davidtgoldblatt@gmail.com>,
        mathieu.desnoyers@efficios.com,
        Florian Weimer <fweimer@redhat.com>, triegel@redhat.com,
        libc-alpha@sourceware.org, andrea.parri@amarulasolutions.com,
        will.deacon@arm.com, peterz@infradead.org, boqun.feng@gmail.com,
        npiggin@gmail.com, dhowells@redhat.com, j.alglave@ucl.ac.uk,
        luc.maranget@inria.fr, akiyks@gmail.com, dlustig@nvidia.com,
        linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] Linux: Implement membarrier function
Reply-To: paulmck@linux.ibm.com
References: <20181212224931.GD4170@linux.ibm.com>
 <Pine.LNX.4.44L0.1812131026570.1586-100000@iolanthe.rowland.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.LNX.4.44L0.1812131026570.1586-100000@iolanthe.rowland.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-TM-AS-GCONF: 00
x-cbid: 18121400-0052-0000-0000-00000366EC17
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00010221; HX=3.00000242; KW=3.00000007;
 PH=3.00000004; SC=3.00000271; SDB=6.01131394; UDB=6.00587980; IPR=6.00911526;
 MB=3.00024685; MTD=3.00000008; XFM=3.00000015; UTC=2018-12-14 00:20:48
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121400-0053-0000-0000-00005F191544
Message-Id: <20181214002043.GP4170@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-13_04:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812140001
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 13, 2018 at 10:49:49AM -0500, Alan Stern wrote:
> On Wed, 12 Dec 2018, Paul E. McKenney wrote:
> 
> > > Well, what are you trying to accomplish?  Do you want to find an 
> > > argument similar to the one I posted for the 6-CPU test to show that 
> > > this test should be forbidden?
> > 
> > I am trying to check odd corner cases.  Your sys_membarrier() model
> > is quite nice and certainly fits nicely with the rest of the model,
> > but where I come from, that is actually reason for suspicion.  ;-)
> > 
> > All kidding aside, your argument for the 6-CPU test was extremely
> > valuable, as it showed me a way to think of that test from an
> > implementation viewpoint.  Then the question is whether or not that
> > viewpoint actually matches the model, which seems to be the case thus far.
> 
> It should, since I formulated the reasoning behind that viewpoint 
> directly from the model.  The basic idea is this:
> 
> 	By induction, show that whenever we have A ->rcu-fence B then
> 	anything po-before A executes before anything po-after B, and
> 	furthermore, any write which propagates to A's CPU before A
> 	executes will propagate to every CPU before B finishes (i.e.,
> 	before anything po-after B executes).
> 
> 	Using this, show that whenever X ->rb Y holds then X must
> 	execute before Y.
> 
> That's what the 6-CPU argument did.  In that litmus test we have
> mb2 ->rcu-fence mb23, Rc ->rb Re, mb1 ->rcu-fence mb14, Rb ->rb Rf,
> mb0 ->rcu-fence mb05, and lastly Ra ->rb Ra.  The last one is what 
> shows that the test is forbidden.

I really am not trying to be difficult.  Well, no more difficult than
I normally am, anyway.  Which admittedly isn't saying much.  ;-)

> > A good next step would be to automatically generate random tests along
> > with an automatically generated prediction, like I did for RCU a few
> > years back.  I should be able to generalize my time-based cheat for RCU to
> > also cover SRCU, though sys_membarrier() will require a bit more thought.
> > (The time-based cheat was to have fixed duration RCU grace periods and
> > RCU read-side critical sections, with the grace period duration being
> > slightly longer than that of the critical sections.  The number of
> > processes is of course limited by the chosen durations, but that limit
> > can easily be made insanely large.)
> 
> Imagine that each sys_membarrier call takes a fixed duration and each 
> other instruction takes slightly less (the idea being that each 
> instruction is a critical section).  Instructions can be reordered 
> (although not across a sys_membarrier call), but no matter how the 
> reordering is done, the result is disallowed.

It gets a bit trickier with interleavings of different combinations
of RCU, SRCU, and sys_membarrier().  Yes, your cat code very elegantly
sorts this out, but my goal is to be able to explain a given example
to someone.

> > I guess that I still haven't gotten over being a bit surprised that the
> > RCU counting rule also applies to sys_membarrier().  ;-)
> 
> Why not?  They are both synchronization mechanisms with heavy-weight
> write sides and light-weight read sides, and most importantly, they
> provide the same Guarantee.

True, but I do feel the need to poke at it.

The zero-size sys_membarrier() read-side critical sections do make
things act a bit differently, for example, interchanging the accesses
in an RCU read-side critical section has no effect, while doing so in
a sys_membarrier() reader can cause the result to be allowed.  One key
point is that everything before the end of a read-side critical section
of any type is ordered before any later grace period of that same type,
and vice versa.

This is why reordering accesses matters for sys_membarrier() readers but
not for RCU and SRCU readers -- in the case of RCU and SRCU readers,
the accesses are inside the read-side critical section, while for
sys_membarrier() readers, the read-side critical sections don't have
an inside.  So yes, ordering also matters in the case of SRCU and
RCU readers for accesses outside of the read-side critical sections.
The reason sys_membarrier() seems surprising to me isn't because it is
any different in theoretical structure, but rather because the practice
is to put RCU and SRCU read-side accesses inside a read-side critical
sections, which is impossible for sys_membarrier().

The other thing that took some time to get used to is the possibility
of long delays during sys_membarrier() execution, allowing significant
execution and reordering between different CPUs' IPIs.  This was key
to my understanding of the six-process example, and probably needs to
be clearly called out, including in an example or two.

The interleaving restrictions are straightforward for me, but the
fixed-time approach does have some interesting cross-talk potential
between sys_membarrier() and RCU read-side critical sections whose
accesses have been reversed.  I don't believe that it is possible to
leverage this "order the other guy's read-side critical sections" effect
in the general case, but I could be missing something.

If you are claiming that I am worrying unnecessarily, you are probably
right.  But if I didn't worry unnecessarily, RCU wouldn't work at all!  ;-)

							Thanx, Paul

