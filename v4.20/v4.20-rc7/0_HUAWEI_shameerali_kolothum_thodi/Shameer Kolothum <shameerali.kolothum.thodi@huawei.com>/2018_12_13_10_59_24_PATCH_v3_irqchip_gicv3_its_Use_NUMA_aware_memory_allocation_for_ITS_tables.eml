Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:22:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9B3535807A0;
	Thu, 13 Dec 2018 03:00:18 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 03:00:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ajm1cWh1/T+dFn/LfsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTI/zxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QLYpUjqg8qhrUgflhi?=
 =?us-ascii?q?cZOTAk/m/Zict+g61HrxKgvBx/24zZbZqJNPZiZK7RYckXSXZdUstXSidPApm8?=
 =?us-ascii?q?b4wKD+cZIOhYr5Pyp14QohSgHwmnGebhyjhMhn/xwa060/khEQTb1wEnBNIOsG?=
 =?us-ascii?q?7brNDrO6gMS+C61q3IzTTZY/NV3jf97I/IcgwhofGRWLJ8a9bRyUkoFwzYj1Wd?=
 =?us-ascii?q?sozlPy6P2eUDrWeb7vBsWv6oi24isgx8pCWkyMkrionMnI0Vy1bE+D16wIkrP9?=
 =?us-ascii?q?24TlB0Ydq+HJtXrSGaOJN6Tt4+T21ypio21qMKtYSlcCQUyJkr3QPTZv+EfoWO?=
 =?us-ascii?q?/xntV/6RLC9miH55fL+znQu+/Ea+xuHmS8W500pGojBEn9TOrnwBygDf5tKZRv?=
 =?us-ascii?q?dh4EutwyiD2x7R5+1eP0w5m6jWJ4Yuz7MwjJYfr0vOEyvslEnokaOaaF8o9+a2?=
 =?us-ascii?q?5+nhf77ovIWTN5VuhQH7KqkumtKwAeA/MgUWQWib9vqz1Kf58U36XrpKlPs2nb?=
 =?us-ascii?q?fdsJzAIsQbvKG5DxdU0oYl9Rm/Ey+r3MoEkXQDNl5JZRyKg5bzN13TI/30Ee2z?=
 =?us-ascii?q?jlWunTtzwvDJJLzhApHDLnjZl7fheK5w60pdyAo10NBe6ItYCrIfL/LpXE/+qt?=
 =?us-ascii?q?jYAgY+Mw26xeboFs9925gAWWKAHKCZKrnesVyW6eI1JemDeosVtCz6K/g/6P7i?=
 =?us-ascii?q?lWU5lkMFfam1wZsXb2i1HvBnI0Waf3XgmNgAEXoRswo6TezqjkCCUDFJa3azWa?=
 =?us-ascii?q?I8+i80CIa8AYjfQYCthaSL3D2nEZ1OemBGFleMHG/od4qeWvcMdDidIsh7njwE?=
 =?us-ascii?q?SLiuUYkh1R61uQ/+yrpnKPfU+yICuZLi0th1+/PclRUo+TNoCMSd1nmHT3tokW?=
 =?us-ascii?q?MQWz82wKd/rFR/yleEz6d0mf9YFdtV5/NPVQc3Lprcz+18C9DvVQPNZNaJSFC6?=
 =?us-ascii?q?Qtq4BTE9VM4+w9gLY0xlAdWtkgjD3za2A78Sj7GEHoc08qLb33jyPcp90WzJ1K?=
 =?us-ascii?q?s6glkiQ8tPM3Cmh6Fl+wjSAY7Jj1uWl6KweasA2y7N8X+JzXCSs0FATA5wTaLF?=
 =?us-ascii?q?UGgcZkTMq9T1/EfCT760BrQhPQtM0sqCKqpMat30glRKXvbjONLCY22vn2e8Hw?=
 =?us-ascii?q?qHxrSJbIDyYWUSwD3dCFQYkwAU5XuJKBIxBjm/rG7EDDxhD1TvY1jy/ul4r3+7?=
 =?us-ascii?q?Skw0zwSOb0B607q1+xgVheGTSv8J37IEvjshpCtwHFqnw93WDN+ArRJ7fKpAed?=
 =?us-ascii?q?M9/EtH1WXBugNgJJOgMb5tikQecwttuUPuzAt4CoNbnMgurXMqyhdyKK2C3FNA?=
 =?us-ascii?q?cTOYwY7/OrnNJmbu+xCvbrbc2kvC39aO5qcP9PM4pk3/vAGoE0oi9Gln09lV0n?=
 =?us-ascii?q?eG+pXGFg0SUYj1UkY28Rh6qKrXYi0854PSyH1tPrO4sj7E29I1GuQlzgyscMtY?=
 =?us-ascii?q?MKOBDAXyCdEVB9CyKOw2nFikdggLPORM+687Icynd+GK17W2POl9hj2mi2dH4I?=
 =?us-ascii?q?dj0k+X8yp8S+jI34sKwv2C3wuHUSv8g0mlsszthY9EYjQSFHKlySf4HI5RerFy?=
 =?us-ascii?q?fYETBGauPs273Mlxi4TsWn5Y7lGjAVwG1dSteRqTaVz9wAJR2V4WoXyhhSu30T?=
 =?us-ascii?q?h0nys1oaqY2SzE2/7iewYfOm5XWGliik/hIZK1j98GRkeodRUmlBy/6Ub82adb?=
 =?us-ascii?q?vqV/I3DPTkhSeyj5Mn9tUrG3trqEeMNP7JIosSNKUOWze1yaS7j9owcE3CPnBW?=
 =?us-ascii?q?dR2Dc7dzSysJXjgxN6kH6dLGp0rHfBecBwxA3T5dzGSf5KwzoGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQo63jXh19?=
 =?us-ascii?q?lpViXIqwzwYpLx2KS5MuJnf09oC0H668dhHoF+k40whIwf2HQAh5WV+2YHnnn3?=
 =?us-ascii?q?MdlBxa3+a38NTyYRw9HJ+AjlxFFjLnWRyoP5THqdxdFtZ9u7YmMQwS8968FKCK?=
 =?us-ascii?q?GJ7L1Lhyd1o1y4rR7Pbvh5hDsS1fwu6HsCieETpAUt1jmdAqwVHURAPizjjRWI?=
 =?us-ascii?q?48q+rKVKfmmvd7ew2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYKJcwlvoJnyVrI2z8smM+y+4nkxNux4q1s5adK2Vi56+5?=
 =?us-ascii?q?Bh9YNjvoZ8Ic4D3tjKBentqI0ICrBJluBjILXJ7wR/KyDD0SrejnNxqJEDAktn?=
 =?us-ascii?q?ebHr/fERWe6Uh8qXLPDourN2qWJHQCydViRR+dJFFQgQwOXTU6mII5GR6uxMD7?=
 =?us-ascii?q?bEh54TUR7EbiqhRQ0uJoKwX/UmDHqQizcDg0T5yfLAdM4gFG+kfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiOq/ZRV/KW?=
 =?us-ascii?q?ypK0yIdm4yyANsaSPnlhEv073FBMXWtiFsTdmjUPTTEXli3XY86aohe85jN4rs?=
 =?us-ascii?q?Sl/Pv3XwLv4JOFC6FOPtV35xC2naCDOvaQhSZ+NDZYz44MymXOyLQFx14SjCdu?=
 =?us-ascii?q?dza2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9mpZcMUImG9N1DHBEeROLSFPz3LxM73br2mSb1Nl+VZrBmwuTedE0/+MTWP?=
 =?us-ascii?q?jTjpVxazMe5SiCGXJgBRuIa4chx1E2jsUMrmagGnMN9wlTA526A0iWjQNWECMT?=
 =?us-ascii?q?lwaUdNrryL4CNcg/V/HXFB73V/IemFnSaZ8/fXKpIMvfR3BSR0kvpQ4G4mxLtN?=
 =?us-ascii?q?8CFEWPt1lTPOrt5vplGqiPWAxiB7XxpOtDlLgpmGvUFjOaXf65lBVmzI/BML7W?=
 =?us-ascii?q?WMFRsKo8FpBcHou6BV0tLPjr78KC9e89LI+ssRH8jVJ9iBMHokMBrpHibbDQoF?=
 =?us-ascii?q?TTGxM2HfiFdQkPWT9n2Ts5g7pYLgmJsISr9HSlM1EukWBVhiHNwHc99LWWZwlL?=
 =?us-ascii?q?eBh4ga9HyxrRTLbMxAu9bMUffERb27LDefkKkBZBYSx778BZocO5e92EF4bFR+?=
 =?us-ascii?q?2oPQFByDc8pKp3habgYxrUhXuFt5Smov21/gIle24HYWGPOulxo3zAh5ZeMx9C?=
 =?us-ascii?q?rppUs3IVbLjCstmVY8mJPuhjXHI225F7u5QYwDU3m8jEM2KJ6uGws=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABrOhJch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYFVgRSBAicKjAuMO4E/OYJqh26MaBSBXywLCAGHRCI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiKCbAIkJS0GCQIdAjEDIjgBCQQFBYMcA?=
 =?us-ascii?q?YF7BQUKp1szg3wxAYYGh32EP3qBHIERM4IxhRcChXECiS0SgXOVXQcCgihyg3O?=
 =?us-ascii?q?DP4cCCxiBXIhGhyiJLoR2T4wcgg5NI4M8CYIeF4hehT8/AQExAYEDAQEBDoskg?=
 =?us-ascii?q?R8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABrOhJch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYFVgRSBAicKjAuMO4E/OYJqh26MaBSBXywLCAGHRCI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiKCbAIkJS0GCQIdAjEDIjgBCQQFBYMcAYF7BQUKp1szg3w?=
 =?us-ascii?q?xAYYGh32EP3qBHIERM4IxhRcChXECiS0SgXOVXQcCgihyg3ODP4cCCxiBXIhGh?=
 =?us-ascii?q?yiJLoR2T4wcgg5NI4M8CYIeF4hehT8/AQExAYEDAQEBDoskgR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,348,1539673200"; 
   d="scan'208";a="55019623"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 03:00:17 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728561AbeLMLAN (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 06:00:13 -0500
Received: from szxga06-in.huawei.com ([45.249.212.32]:42416 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726178AbeLMLAM (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 06:00:12 -0500
Received: from DGGEMS404-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id D25EC6C8A9EA6;
        Thu, 13 Dec 2018 19:00:08 +0800 (CST)
Received: from S00345302A-PC.china.huawei.com (10.202.227.237) by
 DGGEMS404-HUB.china.huawei.com (10.3.19.204) with Microsoft SMTP Server id
 14.3.408.0; Thu, 13 Dec 2018 19:00:02 +0800
From: Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
To: <marc.zyngier@arm.com>, <linux-kernel@vger.kernel.org>
CC: <shankerd@codeaurora.org>, <ganapatrao.kulkarni@cavium.com>,
        <Robert.Richter@cavium.com>, <guohanjun@huawei.com>,
        <john.garry@huawei.com>, <linux-arm-kernel@lists.infradead.org>,
        <linuxarm@huawei.com>
Subject: [PATCH v3] irqchip: gicv3-its: Use NUMA aware memory allocation for ITS tables
Date: Thu, 13 Dec 2018 10:59:24 +0000
Message-ID: <20181213105924.30384-1-shameerali.kolothum.thodi@huawei.com>
X-Mailer: git-send-email 2.12.0.windows.1
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.202.227.237]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Shanker Donthineni <shankerd@codeaurora.org>

The NUMA node information is visible to ITS driver but not being used
other than handling hardware errata. ITS/GICR hardware accesses to the
local NUMA node is usually quicker than the remote NUMA node. How slow
the remote NUMA accesses are depends on the implementation details.

This patch allocates memory for ITS management tables and command
queue from the corresponding NUMA node using the appropriate NUMA
aware functions. This change improves the performance of the ITS
tables read latency on systems where it has more than one ITS block,
and with the slower inter node accesses.

Apache Web server benchmarking using ab tool on a HiSilicon D06
board with multiple numa mem nodes shows Time per request and
Transfer rate improvements of ~3.6% with this patch.

Signed-off-by: Shanker Donthineni <shankerd@codeaurora.org>
Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
Signed-off-by: Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
---

This is to revive the patch originally sent by Shanker[1] and 
to back it up with a benchmark test. Any further testing of
this is most welcome.

v2-->v3
 -Addressed comments to use page_address().
 -Added Benchmark results to commit log.
 -Removed T-by from Ganapatrao for now.

v1-->v2
 -Edited commit text.
 -Added Ganapatrao's tested-by.

Benchmark test details:
--------------------------------
Test Setup:
-D06 with dimm on node 0(Sock#0) and 3 (Sock#1).
-ITS belongs to numa node 0.
-Filesystem mounted on a PCIe NVMe based disk.
-Apache server installed on D06.
-Running ab benchmark test in concurrency mode from a remote m/c
 connected to D06 via  hns3(PCIe) n/w port.
 "ab -k -c 750 -n 2000000 http://10.202.225.188/"

Test results are avg. of 15 runs.

For 4.20-rc1  Kernel,
----------------------------
Time per request(mean, concurrent)  = 0.02753[ms]  
Transfer Rate = 416501[Kbytes/sec]

For 4.20-rc1 +  this patch,
----------------------------------
Time per request(mean, concurrent)  = 0.02653[ms]  
Transfer Rate = 431954[Kbytes/sec]

% improvement ~3.6%

vmstat shows around 170K-200K interrupts per second.

~# vmstat 1 -w
procs -----------------------memory-- -  -system--
 r  b         swpd         free            in             
 5  0            0     30166724          102794 
 9  0            0     30141828          171148 
 5  0            0     30150160          207185 
13  0            0     30145924          175691 
15  0            0     30140792          145250 
13  0            0     30135556          201879 
13  0            0     30134864          192391 
10  0            0     30133632          168880 
....

[1] https://patchwork.kernel.org/patch/9833339/

 drivers/irqchip/irq-gic-v3-its.c | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index db20e99..ab01061 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -1749,7 +1749,8 @@ static int its_setup_baser(struct its_node *its, struct its_baser *baser,
 		order = get_order(GITS_BASER_PAGES_MAX * psz);
 	}
 
-	base = (void *)__get_free_pages(GFP_KERNEL | __GFP_ZERO, order);
+	base = (void *)page_address(alloc_pages_node(its->numa_node,
+				    GFP_KERNEL | __GFP_ZERO, order));
 	if (!base)
 		return -ENOMEM;
 
@@ -2236,7 +2237,8 @@ static struct its_baser *its_get_baser(struct its_node *its, u32 type)
 	return NULL;
 }
 
-static bool its_alloc_table_entry(struct its_baser *baser, u32 id)
+static bool its_alloc_table_entry(struct its_node *its,
+				  struct its_baser *baser, u32 id)
 {
 	struct page *page;
 	u32 esz, idx;
@@ -2256,7 +2258,8 @@ static bool its_alloc_table_entry(struct its_baser *baser, u32 id)
 
 	/* Allocate memory for 2nd level table */
 	if (!table[idx]) {
-		page = alloc_pages(GFP_KERNEL | __GFP_ZERO, get_order(baser->psz));
+		page = alloc_pages_node(its->numa_node, GFP_KERNEL | __GFP_ZERO,
+					get_order(baser->psz));
 		if (!page)
 			return false;
 
@@ -2287,7 +2290,7 @@ static bool its_alloc_device_table(struct its_node *its, u32 dev_id)
 	if (!baser)
 		return (ilog2(dev_id) < its->device_ids);
 
-	return its_alloc_table_entry(baser, dev_id);
+	return its_alloc_table_entry(its, baser, dev_id);
 }
 
 static bool its_alloc_vpe_table(u32 vpe_id)
@@ -2311,7 +2314,7 @@ static bool its_alloc_vpe_table(u32 vpe_id)
 		if (!baser)
 			return false;
 
-		if (!its_alloc_table_entry(baser, vpe_id))
+		if (!its_alloc_table_entry(its, baser, vpe_id))
 			return false;
 	}
 
@@ -2345,7 +2348,7 @@ static struct its_device *its_create_device(struct its_node *its, u32 dev_id,
 	nr_ites = max(2, nvecs);
 	sz = nr_ites * its->ite_size;
 	sz = max(sz, ITS_ITT_ALIGN) + ITS_ITT_ALIGN - 1;
-	itt = kzalloc(sz, GFP_KERNEL);
+	itt = kzalloc_node(sz, GFP_KERNEL, its->numa_node);
 	if (alloc_lpis) {
 		lpi_map = its_lpi_alloc(nvecs, &lpi_base, &nr_lpis);
 		if (lpi_map)
@@ -3541,8 +3544,9 @@ static int __init its_probe_one(struct resource *res,
 
 	its->numa_node = numa_node;
 
-	its->cmd_base = (void *)__get_free_pages(GFP_KERNEL | __GFP_ZERO,
-						get_order(ITS_CMD_QUEUE_SZ));
+	its->cmd_base = (void *)page_address(alloc_pages_node(its->numa_node,
+					     GFP_KERNEL | __GFP_ZERO,
+					     get_order(ITS_CMD_QUEUE_SZ)));
 	if (!its->cmd_base) {
 		err = -ENOMEM;
 		goto out_free_its;
-- 
2.7.4


