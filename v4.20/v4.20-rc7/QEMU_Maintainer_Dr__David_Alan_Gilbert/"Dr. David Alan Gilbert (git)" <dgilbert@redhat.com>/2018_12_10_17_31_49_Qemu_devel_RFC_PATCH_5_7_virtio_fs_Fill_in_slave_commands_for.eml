Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:41:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A562C5807A2
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 09:45:43 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga008-1.jf.intel.com with ESMTP; 10 Dec 2018 09:45:45 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A+vGGjhBlkxBAJIggXU/bUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX9oMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/m/UhMNygqJUrx2vqQFnw4PWYo+YO+dyc63BcdwEXmpMRdpdVzVbD4+g?=
 =?us-ascii?q?c4cDE/YNMOBFpIf9vVsOqh6+CBGiCO3h0D9EnGL906Mg3OQ/EAHJwRErEs4KsH?=
 =?us-ascii?q?vOqtX+KaYcUeGxzKbT0zrDde9W0ir55IjHcxAhvfSAUbxtesfW1EYvGALFjlGL?=
 =?us-ascii?q?poP7JTOVyv8As3KF4OV9VeKgkXInpxttrTiow8chk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?6iREJmfNKpE4Fcuz+UOoZ2WM8uXmNltD4kxrEavZO3ZjUGxZo5yxLFdvCKcIaF?=
 =?us-ascii?q?7gj9WOuSJzpzmWhrd6ilhxmo9Eit0u38Wdew0FZNtidFltjMtmsR1xzI8MSHRf?=
 =?us-ascii?q?19/lq71TaIzQDT5flIIUEylaXFN54s2qA8moYQvEjZAyP6hUb7gLWIekgq+uWk?=
 =?us-ascii?q?8fnrb7f+qp+ZLYB0iwX+Mqo0msy4BOQ1KhEOUHae+eShzbHs4FP2QKtUgf0yi6?=
 =?us-ascii?q?XWq5faJdkdpqGlHQBVyYEv6xK+DzelztsUh3YGLE9ddRKDjojpPUzOIf/iAfe+?=
 =?us-ascii?q?hVSsjClkx/TcMrL9BZXNK2POkLHmfbZ75E5czhczwcpY55JOBbENOOjzVVPptN?=
 =?us-ascii?q?zEEh85NBS5w+LmCNV+yIwSQ22OArKCPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8dePrh4J0MdXrtHuh6O17LJj3og8wdCiEMuQwxSvGsj0eNFjtaZnK3Vq?=
 =?us-ascii?q?R74SknCYWgFsDaS4WwxbCMwiq/TaBQfX1MX1WFEHP0cNedVvIRLS6fPMJl1yYJ?=
 =?us-ascii?q?TKWsUJMJ0xaouwnnjb19Ib3P5ycauJn/gcVz/PDZjhoo9DZ5XPiahniASnwxkm?=
 =?us-ascii?q?4WSjse2qd5rkpgjFCZ3vtWmftdQJZ//bUBfg4kNJKU5uhzDZjdWwbLc82VABap?=
 =?us-ascii?q?Q8nnS3llQt0wx9UDeVpVAdiujhnfmSGtBulGxPSwGJUo//eEjDDKLMFnxiOe2Q?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BRAADPpQ5cmBHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMIJijHKLMIINl1GBcxQYFIdtIjYHDQEDAQEBAQEBAgETAQEBAQEICws?=
 =?us-ascii?q?GGw4vgjYFAgMYCYJXBQMDAQIkHwopAwMBAgYBAR8pCAMBUxkFMIJsUYExAQSnH?=
 =?us-ascii?q?DOFQIRgjCEXgUA/gRGNbgKJL4dcj2oHAgKRQgsYiWaHV5kwgU0BggZwFYMngic?=
 =?us-ascii?q?Xjh1BMYEHHIoFgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BRAADPpQ5cmBHrdtBkHQEBBQEHBQGBUwYBCwGBMIJijHK?=
 =?us-ascii?q?LMIINl1GBcxQYFIdtIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGGw4vgjYFAgMYC?=
 =?us-ascii?q?YJXBQMDAQIkHwopAwMBAgYBAR8pCAMBUxkFMIJsUYExAQSnHDOFQIRgjCEXgUA?=
 =?us-ascii?q?/gRGNbgKJL4dcj2oHAgKRQgsYiWaHV5kwgU0BggZwFYMngicXjh1BMYEHHIoFg?=
 =?us-ascii?q?XcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="56856519"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 09:45:43 -0800
Received: from localhost ([::1]:34045 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWPck-0001QV-0a
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 12:45:42 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46114)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgilbert@redhat.com>) id 1gWPPb-0006TQ-GJ
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:32:08 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgilbert@redhat.com>) id 1gWPPY-0003ek-9F
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:32:07 -0500
Received: from mx1.redhat.com ([209.132.183.28]:52586)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgilbert@redhat.com>) id 1gWPPX-0003eM-Ur
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 12:32:04 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 3F8C130016F4;
	Mon, 10 Dec 2018 17:32:03 +0000 (UTC)
Received: from dgilbert-t530.redhat.com (unknown [10.36.118.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id D7EFA1001914;
	Mon, 10 Dec 2018 17:32:01 +0000 (UTC)
From: "Dr. David Alan Gilbert (git)" <dgilbert@redhat.com>
To: qemu-devel@nongnu.org
Date: Mon, 10 Dec 2018 17:31:49 +0000
Message-Id: <20181210173151.16629-6-dgilbert@redhat.com>
In-Reply-To: <20181210173151.16629-1-dgilbert@redhat.com>
References: <20181210173151.16629-1-dgilbert@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.45]);
	Mon, 10 Dec 2018 17:32:03 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [RFC PATCH 5/7] virtio-fs: Fill in slave commands for
 mapping
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sweil@redhat.com, swhiteho@redhat.com, stefanha@redhat.com,
	vgoyal@redhat.com, miklos@szeredi.hu
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: "Dr. David Alan Gilbert" <dgilbert@redhat.com>

Fill in definitions for map, unmap and sync commands.

Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
---
 hw/virtio/vhost-user-fs.c | 129 ++++++++++++++++++++++++++++++++++++--
 1 file changed, 123 insertions(+), 6 deletions(-)

diff --git a/hw/virtio/vhost-user-fs.c b/hw/virtio/vhost-user-fs.c
index da70d9cd2c..bbb15477e5 100644
--- a/hw/virtio/vhost-user-fs.c
+++ b/hw/virtio/vhost-user-fs.c
@@ -24,20 +24,137 @@
 int vhost_user_fs_slave_map(struct vhost_dev *dev, VhostUserFSSlaveMsg *=
sm,
                             int fd)
 {
-    /* TODO */
-    return -1;
+    VHostUserFS *fs =3D VHOST_USER_FS(dev->vdev);
+    size_t cache_size =3D fs->conf.cache_size;
+    void *cache_host =3D memory_region_get_ram_ptr(&fs->cache);
+
+    unsigned int i;
+    int res =3D 0;
+
+    if (fd < 0) {
+        fprintf(stderr, "%s: Bad fd for map\n", __func__);
+        return -1;
+    }
+
+    for (i =3D 0; i < VHOST_USER_FS_SLAVE_ENTRIES; i++) {
+        if (sm->len[i] =3D=3D 0) {
+            continue;
+        }
+
+        if ((sm->c_offset[i] + sm->len[i]) < sm->len[i] ||
+            (sm->c_offset[i] + sm->len[i]) > cache_size) {
+            fprintf(stderr, "%s: Bad offset/len for map [%d] %"
+                            PRIx64 "+%" PRIx64 "\n", __func__,
+                            i, sm->c_offset[i], sm->len[i]);
+            res =3D -1;
+            break;
+        }
+
+        if (mmap(cache_host + sm->c_offset[i], sm->len[i],
+                 ((sm->flags[i] & VHOST_USER_FS_FLAG_MAP_R) ? PROT_READ =
: 0) |
+                 ((sm->flags[i] & VHOST_USER_FS_FLAG_MAP_W) ? PROT_WRITE=
 : 0),
+                 MAP_SHARED | MAP_FIXED,
+                 fd, sm->fd_offset[i]) !=3D (cache_host + sm->c_offset[i=
])) {
+            fprintf(stderr, "%s: map failed err %d [%d] %"
+                            PRIx64 "+%" PRIx64 " from %" PRIx64 "\n", __=
func__,
+                            errno, i, sm->c_offset[i], sm->len[i],
+                            sm->fd_offset[i]);
+            res =3D -1;
+            break;
+        }
+    }
+
+    if (res) {
+        /* Something went wrong, unmap them all */
+        vhost_user_fs_slave_unmap(dev, sm);
+    }
+    return res;
 }
=20
 int vhost_user_fs_slave_unmap(struct vhost_dev *dev, VhostUserFSSlaveMsg=
 *sm)
 {
-    /* TODO */
-    return -1;
+    VHostUserFS *fs =3D VHOST_USER_FS(dev->vdev);
+    size_t cache_size =3D fs->conf.cache_size;
+    void *cache_host =3D memory_region_get_ram_ptr(&fs->cache);
+
+    unsigned int i;
+    int res =3D 0;
+
+    /* Note even if one unmap fails we try the rest, since the effect
+     * is to clean up as much as possible.
+     */
+    for (i =3D 0; i < VHOST_USER_FS_SLAVE_ENTRIES; i++) {
+        void *ptr;
+        if (sm->len[i] =3D=3D 0) {
+            continue;
+        }
+
+        if (sm->len[i] =3D=3D ~(uint64_t)0) {
+            /* Special case meaning the whole arena */
+            sm->len[i] =3D cache_size;
+        }
+
+        if ((sm->c_offset[i] + sm->len[i]) < sm->len[i] ||
+            (sm->c_offset[i] + sm->len[i]) > cache_size) {
+            fprintf(stderr, "%s: Bad offset/len for unmap [%d] %"
+                            PRIx64 "+%" PRIx64 "\n", __func__,
+                            i, sm->c_offset[i], sm->len[i]);
+            res =3D -1;
+            continue;
+        }
+
+        ptr =3D mmap(cache_host + sm->c_offset[i], sm->len[i],
+                PROT_NONE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, =
0);
+        if (ptr !=3D (cache_host + sm->c_offset[i])) {
+            fprintf(stderr, "%s: mmap failed (%s) [%d] %"
+                            PRIx64 "+%" PRIx64 " from %" PRIx64 " res: %=
p\n",
+                            __func__,
+                            strerror(errno),
+                            i, sm->c_offset[i], sm->len[i],
+                            sm->fd_offset[i], ptr);
+            res =3D -1;
+        }
+    }
+
+    return res;
 }
=20
 int vhost_user_fs_slave_sync(struct vhost_dev *dev, VhostUserFSSlaveMsg =
*sm)
 {
-    /* TODO */
-    return -1;
+    VHostUserFS *fs =3D VHOST_USER_FS(dev->vdev);
+    size_t cache_size =3D fs->conf.cache_size;
+    void *cache_host =3D memory_region_get_ram_ptr(&fs->cache);
+
+    unsigned int i;
+    int res =3D 0;
+
+    /* Note even if one sync fails we try the rest */
+    for (i =3D 0; i < VHOST_USER_FS_SLAVE_ENTRIES; i++) {
+        if (sm->len[i] =3D=3D 0) {
+            continue;
+        }
+
+        if ((sm->c_offset[i] + sm->len[i]) < sm->len[i] ||
+            (sm->c_offset[i] + sm->len[i]) > cache_size) {
+            fprintf(stderr, "%s: Bad offset/len for sync [%d] %"
+                            PRIx64 "+%" PRIx64 "\n", __func__,
+                            i, sm->c_offset[i], sm->len[i]);
+            res =3D -1;
+            continue;
+        }
+
+        if (msync(cache_host + sm->c_offset[i], sm->len[i],
+                  MS_SYNC /* ?? */)) {
+            fprintf(stderr, "%s: msync failed (%s) [%d] %"
+                            PRIx64 "+%" PRIx64 " from %" PRIx64 "\n", __=
func__,
+                            strerror(errno),
+                            i, sm->c_offset[i], sm->len[i],
+                            sm->fd_offset[i]);
+            res =3D -1;
+        }
+    }
+
+    return res;
 }
=20
=20
--=20
2.19.2


