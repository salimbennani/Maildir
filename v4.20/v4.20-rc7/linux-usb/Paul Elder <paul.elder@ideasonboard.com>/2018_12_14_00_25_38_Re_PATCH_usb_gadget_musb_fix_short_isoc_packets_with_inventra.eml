Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:43:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5F34158079D;
	Thu, 13 Dec 2018 16:25:54 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 16:25:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AhG6f3Rb4SX5FiwS1QY+Lf23/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcq7Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+t6LplSALziC?=
 =?us-ascii?q?cfKTE27H3XhMJ3jKJeuh2hphp/yJPQbIyaMPdye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocS/q6zLTMzT7eYP1W3Sry55bSchs8pvyMRah/cdfVyUU1CQzFikif?=
 =?us-ascii?q?ppL/Pz6O1+QCrnaU4PB7VeKojW4osAZxrSK1xsgxkIXGmoUVylXd+Ch/3Y07K9?=
 =?us-ascii?q?q4SEthbt6lFptdrz+VN493QsMkXmFptzw2yrocuZ60ZCQKx5UnxwLYa/ydcoiI?=
 =?us-ascii?q?5Q/jVP2LLTd/nnJld6qzhxm18Uinxe38Ute73ExWoSpCl9nArmsC1xjU6siIUf?=
 =?us-ascii?q?t95kCh2SqV2w/P7eFEJEY5nrfYJZ452rM8iIYfvEDZEiPrlkj6krWaelgn9+S0?=
 =?us-ascii?q?8ejqY7frqoeYOoJ1kA3zPasjlta7DOgiLAQCQWyW9OKh37P550L5Wq9Fjvgun6?=
 =?us-ascii?q?nZrp/aIcMbq7anAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOPH4DfGh?=
 =?us-ascii?q?jFSwiDpn2ezKM7n7DpnQIHXPjq3tcat+5kJA0gY+zNJS64pRCr4bIfLzXkHxtM?=
 =?us-ascii?q?bfDh88KwG0x+fnCNNg1oIRQG6PAbGWMLnUsVCW4uIjOu6MZYETuDnjMfgo/ODu?=
 =?us-ascii?q?jXAnll8HZ6Wp3oUYaGq+Hvt4J0WVe33sgs0OEWsSpAoxUPTqiEGeUT5Uf3uyW6?=
 =?us-ascii?q?M85jIlB468AobDW5uggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kijYE?=
 =?us-ascii?q?T6SuS5c91RGysw/307pnIfDV+i0Er53j08J55+3OlR4o8zx0AN+Q02WMT2Fyg2?=
 =?us-ascii?q?MJSCU63KF5oUxh1FiD1bJ0jOBfFdxW//lJSBs1NYbAz+xmDND/QgDBftCXR1q8?=
 =?us-ascii?q?QdWmBjcxTtQ2w9IVZ0Z9GtOijg3M3iawAr8VkaCLC4Iw8q7Gw3fxIMN9wW7c1K?=
 =?us-ascii?q?Y9l1kmXtdPNWq+i6Fl7AjTB4nJk0aDm6awb6sc3jXA9GOCzWqIoUFZXxR8UaTD?=
 =?us-ascii?q?XXADeETWqc716V/FT7+rEb4nKBdOydaeKqtWbd3klVZGS+3lONjEZ2Kxmn2/BR?=
 =?us-ascii?q?CHxr6XaIrqemMd3DjSCUQekgAT+2qGOhY6Biu7v23eCzluH0r1Y0zw6el+tG+7?=
 =?us-ascii?q?Tkgswg6XdUJhyaS69gQVhfOGTfMTxawLuCEmpzVwH1a92tbWBsGEpwpgeqVcfN?=
 =?us-ascii?q?w87E1G1WLfqwxyIJigI7p+iV4ZdgR9p1nu2AlvCoVcjcgqq2snwxdoJqKGzlxN?=
 =?us-ascii?q?bTOY0or2Or3MNGby+guia6rX2lHYzdaX9b0D6PU+q1X/og6pElAu/Glg09lQy3?=
 =?us-ascii?q?Gc/InFDBIOUZLtVUY67wR6p7DfYik6+4PU1X1tPbOosjPY3NIpHu8lyhemf9dQ?=
 =?us-ascii?q?K66EEA7yE8sHB8mhMuAqml6pbg4aM+BW7qI7I8Smd/6e0q6xIOlghC6mjXhA4I?=
 =?us-ascii?q?1lyE2M8zRzS+HW0JcF2f2XxRaHWCrmg1enscD3np5EaCoWHmq+zyjkGYFQardz?=
 =?us-ascii?q?fYYNFWehPcm3ys9iiJ7qXn5S7ESjCE8e2M+1ZRqSaETw3A1N1UgNvXOrgyq5zz?=
 =?us-ascii?q?xunDEvoaqSxyjOw+XkdBoaNW9HXmhijVHwIYeqi9AWRlSnbw8slBG9/0b127Bb?=
 =?us-ascii?q?pLhjL2nUWUpIZSn2IH14Xauqq7WCZNRD6JU2viVNUeSweEyVRaT5oxQHzSzjBW?=
 =?us-ascii?q?xexDYgejGuu5X5mQF6iW2HIHZyqnrZZd9/xRPF6NPAQv5R2yIMRDNkhjnPGli8?=
 =?us-ascii?q?I96p8M2UlpfCqOy/V3itVoZOcSnt1o6AsCq75Wt3ARywhfyzm9vnERQk3i//zd?=
 =?us-ascii?q?VlSSLIrBPkaInxy6u6Kf5nflVvBFLk6cp1AJt+kogzhJEXw3QanY+a/XkEkWfy?=
 =?us-ascii?q?N9VUx6T+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4o1qiogLWe/R9nDYdyf015X4eguEJvhctzyqHDrATG0lYITLjlxCS?=
 =?us-ascii?q?49+iq6VXYX6lcaKs20pmgdChELaCrxlfWHnje5cuBy9w7thlP1LK333+8YXkeN?=
 =?us-ascii?q?jWbdIOuRyYiRbAj+5JKJ0vkvoGnzZoOWX4vXc90e40kQRu3Y2mvIiAM2ht+aO5?=
 =?us-ascii?q?Ah1COTHvacIc5CrtjbpAkcaMxI+gAI9hGjoQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGBJExYhQAYRjQ7kYQ/FgC338zh?=
 =?us-ascii?q?a0Z56ysV5l75rBtM1+1pOwP+UmfZuAendDM0RIKDIxpR6wFI/13VPtCG7uJvAy?=
 =?us-ascii?q?FY+YWsoxeXJWycYwRIEHsFWkiZB134Ormu5N/A8/WXB+akLvvOZ6mOpvJaV/uS?=
 =?us-ascii?q?2Z2v1Y5m9S6WNsqTJnliE+E72k1bUHB7AcvZnisASzcNmyLRdcKbpwq8+i5qrs?=
 =?us-ascii?q?C56vvrQxni5Y+OC7tULNVu9Aq6gaaFN+6Mmil5LSxU2Y8LxX/N0LIfxkIdizly?=
 =?us-ascii?q?dzmxFrQNrS7MTKXNmq9OEh4UcSVzONFT76I72AlNNtXWitf01r5+k/40BE1JVV?=
 =?us-ascii?q?3nmsG1e8MKJ3uxO0/ABEaOLL6GPyHEw9nrYaOgTr1dlOVUuAOxuTaYEE/jPy6P?=
 =?us-ascii?q?lzrzVxCoPuFDkjubPAFFuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43V/MOmLgDyZ4PfYK5oMtftrAz95l+Zb4HQ81rtU?=
 =?us-ascii?q?4ztIRP1zmCvOsNFup0uqnfWIyjpiSBBOsCpEhJqXvUV+PqXU7oVAWXfB/B4X8W?=
 =?us-ascii?q?qcEQgFp9t7Bd3poK1QztnPlKTuKDZN6d7U/M0cB9TKJ8KDKnYuLR3pGDvMBgsf?=
 =?us-ascii?q?UTGrLX3fh1BakPyK9nyatJ46qp3tmJoIUrBaVVw1GekcCkRqB9ECJJZ3XjU5kb?=
 =?us-ascii?q?+UlsII5Hy+rAXPS8VepJzISvWSAfC8YAqe2L1NegEFx6++NYUVPY3ywVBKa1V3?=
 =?us-ascii?q?lZ/NHUDXVMpB5CZma0t8o0RA6nF4CGcy3U3lYwaF4XMeHOWzmBQxgxFyJ+8q8W?=
 =?us-ascii?q?TC+VAyc2LDuS94vU09lM+t1SiYbTq3IaO8UJt+Cib5vlM2NJn8Shx5Kwa1mBo3?=
 =?us-ascii?q?Z3//W7tNgu44JihQgwjGtM4TSPM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADE9xJch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBgmmBAhQTmCeCDRSOLogtZYEkBUosCAsBh0U?=
 =?us-ascii?q?iNQgNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYMgnsBAgMBAiQTBgEBNwEFCQEBC?=
 =?us-ascii?q?hgJExIDDAVKCQkFgxwBggAEAQqnAIFsM4J2AQEFgTABhXYIiyCBHIFXP4ERgxK?=
 =?us-ascii?q?CeyMBAQEBGIR8giaJAUCGCH6QSgcCgiQEhGWKQQsYgimPIYkuhHaMbQFqgSEzG?=
 =?us-ascii?q?iODPAkJggkMFxKDOIUUhV0iMgEJewEBjD8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAADE9xJch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBgmmBAhQTmCeCDRSOLogtZYEkBUosCAsBh0UiNQgNAQMBAQEBA?=
 =?us-ascii?q?QECARMBAQEIDQkIKSMMgjYMgnsBAgMBAiQTBgEBNwEFCQEBChgJExIDDAVKCQk?=
 =?us-ascii?q?FgxwBggAEAQqnAIFsM4J2AQEFgTABhXYIiyCBHIFXP4ERgxKCeyMBAQEBGIR8g?=
 =?us-ascii?q?iaJAUCGCH6QSgcCgiQEhGWKQQsYgimPIYkuhHaMbQFqgSEzGiODPAkJggkMFxK?=
 =?us-ascii?q?DOIUUhV0iMgEJewEBjD8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,350,1539673200"; 
   d="scan'208";a="56295804"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 16:25:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728567AbeLNAZt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 19:25:49 -0500
Received: from perceval.ideasonboard.com ([213.167.242.64]:35772 "EHLO
        perceval.ideasonboard.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727042AbeLNAZs (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 19:25:48 -0500
Received: from garnet.amanokami.net (unknown [96.44.9.229])
        by perceval.ideasonboard.com (Postfix) with ESMTPSA id E8644549;
        Fri, 14 Dec 2018 01:25:44 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=ideasonboard.com;
        s=mail; t=1544747146;
        bh=RHra2dvkbgQrF23ySZU7xAniPVwkrf3oLDpGv+LMtME=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=I/59pRb0zGP7d6/XK/pNgHH0JziM8zUt99uHlyAX6sPzsV4Lw3LRpQLAZz9ux9lyP
         70Gin3pBNxQXXrecA4a6vb70ANLbZPyKnB8NxWcr6nxcKt3OoP5r0OAuno4ItOmBSS
         ojeSAbLH4fJgDeDBqPsjnoTiZwC0Q2W4+OFIgqtg=
Date: Thu, 13 Dec 2018 19:25:38 -0500
From: Paul Elder <paul.elder@ideasonboard.com>
To: laurent.pinchart@ideasonboard.com, kieran.bingham@ideasonboard.com
Cc: Nicolas Boichat <drinkcat@chromium.org>, b-liu@ti.com,
        gregkh@linuxfoundation.org, linux-usb@vger.kernel.org,
        linux-kernel@vger.kernel.org, balbi@kernel.org, balbi@ti.com
Subject: Re: [PATCH] usb: gadget: musb: fix short isoc packets with inventra
 dma for pandaboard es
Message-ID: <20181214002538.GA7477@garnet.amanokami.net>
References: <20181009063220.13745-1-paul.elder@ideasonboard.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181009063220.13745-1-paul.elder@ideasonboard.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Oct 09, 2018 at 02:32:20AM -0400, Paul Elder wrote:
> Handling short packets (length < max packet size) in the Inventra DMA
> engine in the MUSB driver causes the MUSB DMA controller to hang. An
> example of a problem that is caused by this problem is when streaming
> video out of a UVC gadget, only the first video frame is transferred.
> 
> For short packets (mode-0 or mode-1 DMA), MUSB_TXCSR_TXPKTRDY must be
> set manually by the driver. This was previously done in musb_g_tx
> (musb_gadget.c), but incorrectly (all csr flags were cleared, and only
> MUSB_TXCSR_MODE and MUSB_TXCSR_TXPKTRDY). Fixing that problem allows
> some requests to be transferred correctly, but multiple requests were
> often put together in one USB packet, and caused problems if the packet
> size was not a multiple of 4.
> 
> Instead, MUSB_TXCSR_TXPKTRDY is set in dma_controller_irq (musbhsdma.c),
> just like host mode transfers, then musb_g_tx forces the packet to be
> flushed, by setting MUSB_TXCSR_FLUSHFIFO.
> 
> This topic was originally tackled by Nicolas Boichat [0] [1] and is discussed
> further at [2] as part of his GSoC project [3].
> 
> [0] https://groups.google.com/forum/?hl=en#!topic/beagleboard-gsoc/k8Azwfp75CU
> [1] https://gitorious.org/beagleboard-usbsniffer/beagleboard-usbsniffer-kernel/commit/b0be3b6cc195ba732189b04f1d43ec843c3e54c9?p=beagleboard-usbsniffer:beagleboard-usbsniffer-kernel.git;a=patch;h=b0be3b6cc195ba732189b04f1d43ec843c3e54c9
> [2] http://beagleboard-usbsniffer.blogspot.com/2010/07/musb-isochronous-transfers-fixed.html
> [3] http://elinux.org/BeagleBoard/GSoC/USBSniffer
> 
> I have forward-ported this patch from 2.6.34 to 4.19-rc1.
> 
> Signed-off-by: Paul Elder <paul.elder@ideasonboard.com>

Hello all,

ping

I was wondering if any of you had a chance to take a look at this yet.

Thanks,

Paul

> ---
>  drivers/usb/musb/musb_gadget.c | 21 ++++++++++++++-------
>  drivers/usb/musb/musbhsdma.c   | 21 +++++++++++----------
>  2 files changed, 25 insertions(+), 17 deletions(-)
> 
> diff --git a/drivers/usb/musb/musb_gadget.c b/drivers/usb/musb/musb_gadget.c
> index eae8b1b1b45b..d3f33f449445 100644
> --- a/drivers/usb/musb/musb_gadget.c
> +++ b/drivers/usb/musb/musb_gadget.c
> @@ -479,11 +479,16 @@ void musb_g_tx(struct musb *musb, u8 epnum)
>  			&& (request->actual == request->length))
>  				short_packet = true;
>  
> -		if ((musb_dma_inventra(musb) || musb_dma_ux500(musb)) &&
> -			(is_dma && (!dma->desired_mode ||
> -				(request->actual &
> -					(musb_ep->packet_sz - 1)))))
> -				short_packet = true;
> +		if (is_dma && (musb_dma_inventra(musb) || musb_dma_ux500(musb))) {
> +			if (!dma->desired_mode ||
> +					request->actual % musb_ep->packet_sz) {
> +				musb_dbg(musb, "%s Flushing (FIFO) EP : KPB\n",
> +						musb_ep->end_point.name);
> +				musb_writew(epio, MUSB_TXCSR,
> +						csr | MUSB_TXCSR_FLUSHFIFO);
> +				return;
> +			}
> +		}
>  
>  		if (short_packet) {
>  			/*
> @@ -493,8 +498,10 @@ void musb_g_tx(struct musb *musb, u8 epnum)
>  			if (csr & MUSB_TXCSR_TXPKTRDY)
>  				return;
>  
> -			musb_writew(epio, MUSB_TXCSR, MUSB_TXCSR_MODE
> -					| MUSB_TXCSR_TXPKTRDY);
> +			musb_dbg(musb, "sending zero pkt (zero=%d, length=%d, actual=%d, dma->desired_mode=%d)\n",
> +				 request->zero, request->length, request->actual,
> +				 dma->desired_mode);
> +			musb_writew(epio, MUSB_TXCSR, csr | MUSB_TXCSR_TXPKTRDY);
>  			request->zero = 0;
>  		}
>  
> diff --git a/drivers/usb/musb/musbhsdma.c b/drivers/usb/musb/musbhsdma.c
> index a688f7f87829..e514d4700a6b 100644
> --- a/drivers/usb/musb/musbhsdma.c
> +++ b/drivers/usb/musb/musbhsdma.c
> @@ -346,12 +346,10 @@ static irqreturn_t dma_controller_irq(int irq, void *private_data)
>  				channel->status = MUSB_DMA_STATUS_FREE;
>  
>  				/* completed */
> -				if ((devctl & MUSB_DEVCTL_HM)
> -					&& (musb_channel->transmit)
> -					&& ((channel->desired_mode == 0)
> -					    || (channel->actual_len &
> -					    (musb_channel->max_packet_sz - 1)))
> -				    ) {
> +				if (musb_channel->transmit &&
> +				    (!channel->desired_mode ||
> +				     (channel->actual_len %
> +				      musb_channel->max_packet_sz))) {
>  					u8  epnum  = musb_channel->epnum;
>  					int offset = musb->io.ep_offset(epnum,
>  								    MUSB_TXCSR);
> @@ -363,11 +361,14 @@ static irqreturn_t dma_controller_irq(int irq, void *private_data)
>  					 */
>  					musb_ep_select(mbase, epnum);
>  					txcsr = musb_readw(mbase, offset);
> -					txcsr &= ~(MUSB_TXCSR_DMAENAB
> +					if (channel->desired_mode == 1) {
> +						txcsr &= ~(MUSB_TXCSR_DMAENAB
>  							| MUSB_TXCSR_AUTOSET);
> -					musb_writew(mbase, offset, txcsr);
> -					/* Send out the packet */
> -					txcsr &= ~MUSB_TXCSR_DMAMODE;
> +						musb_writew(mbase, offset, txcsr);
> +						/* Send out the packet */
> +						txcsr &= ~MUSB_TXCSR_DMAMODE;
> +						txcsr |= MUSB_TXCSR_DMAENAB;
> +					}
>  					txcsr |=  MUSB_TXCSR_TXPKTRDY;
>  					musb_writew(mbase, offset, txcsr);
>  				}
> -- 
> 2.18.0
> 
