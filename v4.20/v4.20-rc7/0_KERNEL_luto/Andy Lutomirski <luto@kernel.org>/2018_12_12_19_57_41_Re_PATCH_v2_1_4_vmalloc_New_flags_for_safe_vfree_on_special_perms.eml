Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:55:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 471AA580380;
	Wed, 12 Dec 2018 11:58:02 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 11:58:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7By+oxaaqlbCDjDpV0+PY5n/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci/Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFsVtRuzBxKhBP/zxjJSmnP6wbE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModjpMqcdTOC0x7TOwzXec/NW3jL96InSchA6ovGMXK97fM3VyUkyCwPFiU6d?=
 =?us-ascii?q?qY/7MDOP0OQCrWyb4/BnVeK1hG4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NoTs8+R2xkoiU3x70ctZKmYiQHy44ryh7DZ/GBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cx6WH3HtD8B4m?=
 =?us-ascii?q?ibDBEAqpMxENzkuOZIjNXDm6/4LzJI/vrV+9cRA47fL8fRY1Q7Nh+8MTjYHUMh?=
 =?us-ascii?q?UCKsMGDFnE9c2KWW62GShps3sJ7hnNwJULANBw99Le8TFkkwRI9KG5xwRD5x1O?=
 =?us-ascii?q?fD1MM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ASAABzZxFch0O0hNFfBRwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYFaghEng3yIGYwRUgaBNRSJDY4yFIFiERgTAYc+IjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKCwcGAgImA?=
 =?us-ascii?q?gIDHxIBBQEODgYTBQODGYF1DQWbGDyKHXB8M4J2AQEFhyIIgQuKFYEcF3iBB4E?=
 =?us-ascii?q?RghRQLoQ9LQuDEIJXiRsgEx+BRYUTkEkJikqHDRiBXIUailCZMA8hgSWCDn0IO?=
 =?us-ascii?q?zEGgjWCGwwXfwEBAYdchWAfMgGBBAEBjQABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ASAABzZxFch0O0hNFfBRwBAQEEAQEHBAEBgVEHAQELAYF?=
 =?us-ascii?q?aghEng3yIGYwRUgaBNRSJDY4yFIFiERgTAYc+IjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKCwcGAgImAgIDHxIBBQEODgY?=
 =?us-ascii?q?TBQODGYF1DQWbGDyKHXB8M4J2AQEFhyIIgQuKFYEcF3iBB4ERghRQLoQ9LQuDE?=
 =?us-ascii?q?IJXiRsgEx+BRYUTkEkJikqHDRiBXIUailCZMA8hgSWCDn0IOzEGgjWCGwwXfwE?=
 =?us-ascii?q?BAYdchWAfMgGBBAEBjQABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,346,1539673200"; 
   d="scan'208";a="56096698"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 11:57:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727003AbeLLT54 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 14:57:56 -0500
Received: from mail.kernel.org ([198.145.29.99]:37322 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726248AbeLLT54 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 14:57:56 -0500
Received: from mail-wm1-f50.google.com (mail-wm1-f50.google.com [209.85.128.50])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id A70D72147C
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 19:57:54 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544644674;
        bh=zb8u8unVnknZEyBCw2+NcgSnZnvigGuKYo9aAqWz6wo=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=ILTQABd389i3ubG3CBJDIOsyUaQ9OBGaZVUKkkrR3NvTTC4Rb9ZPSeszdYSo11vA+
         bOXmy+rcbMFPYAiCW7jaL4d1TmTgmMz0ecgjXX1c2hK9ua1ciYfG5IHrDEpntfLUDe
         czv42OOXjz0STit4OVoSgSwzM092+nGTMhgi9Upc=
Received: by mail-wm1-f50.google.com with SMTP id n190so106527wmd.0
        for <linux-kernel@vger.kernel.org>; Wed, 12 Dec 2018 11:57:54 -0800 (PST)
X-Gm-Message-State: AA+aEWZWi2/JYAAfuet3td5Z1U45lRRz0mt0tkQjyRfuqMdIVgyF7ZlI
        CwIMMFvBWTSPKRtPb2501sBQiEPAjiUu9lBgnLzE2A==
X-Google-Smtp-Source: AFSGD/UtAO2tL0qnM6J0ii/YeuPOMtxorJchPW6zYTedb7F9uxPKCtxSI3rgZNwx6N7/TA5EIsMwuPER+IJ9fQO7YBg=
X-Received: by 2002:a1c:f112:: with SMTP id p18mr7183436wmh.83.1544644672876;
 Wed, 12 Dec 2018 11:57:52 -0800 (PST)
MIME-Version: 1.0
References: <20181212000354.31955-1-rick.p.edgecombe@intel.com>
 <20181212000354.31955-2-rick.p.edgecombe@intel.com> <CALCETrVP577NvdeYj8bzpEfTXj3GZD3nFcJxnUq5n1daDBxU=g@mail.gmail.com>
 <f5cbf6aefeb19f12faafa6f213c6ff72bf693ddc.camel@intel.com>
In-Reply-To: <f5cbf6aefeb19f12faafa6f213c6ff72bf693ddc.camel@intel.com>
From: Andy Lutomirski <luto@kernel.org>
Date: Wed, 12 Dec 2018 11:57:41 -0800
X-Gmail-Original-Message-ID: <CALCETrV0BGagp8stapCPBQ9iWOeepGkcKybzmi2WwLU_zzy2sQ@mail.gmail.com>
Message-ID: <CALCETrV0BGagp8stapCPBQ9iWOeepGkcKybzmi2WwLU_zzy2sQ@mail.gmail.com>
Subject: Re: [PATCH v2 1/4] vmalloc: New flags for safe vfree on special perms
To: Rick Edgecombe <rick.p.edgecombe@intel.com>
Cc: Andrew Lutomirski <luto@kernel.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>,
        Jessica Yu <jeyu@kernel.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Alexei Starovoitov <ast@kernel.org>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        Linux-MM <linux-mm@kvack.org>, Jann Horn <jannh@google.com>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>,
        Kristen Carlson Accardi <kristen@linux.intel.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Will Deacon <will.deacon@arm.com>,
        Ingo Molnar <mingo@redhat.com>, Nadav Amit <namit@vmware.com>,
        Kernel Hardening <kernel-hardening@lists.openwall.com>,
        Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        "Naveen N . Rao" <naveen.n.rao@linux.vnet.ibm.com>,
        "David S. Miller" <davem@davemloft.net>,
        Network Development <netdev@vger.kernel.org>,
        Dave Hansen <dave.hansen@intel.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 12, 2018 at 11:50 AM Edgecombe, Rick P
<rick.p.edgecombe@intel.com> wrote:
>
> On Tue, 2018-12-11 at 18:20 -0800, Andy Lutomirski wrote:
> > On Tue, Dec 11, 2018 at 4:12 PM Rick Edgecombe
> > <rick.p.edgecombe@intel.com> wrote:
> > >
> > > This adds two new flags VM_IMMEDIATE_UNMAP and VM_HAS_SPECIAL_PERMS, for
> > > enabling vfree operations to immediately clear executable TLB entries to
> > > freed
> > > pages, and handle freeing memory with special permissions.
> > >
> > > In order to support vfree being called on memory that might be RO, the vfree
> > > deferred list node is moved to a kmalloc allocated struct, from where it is
> > > today, reusing the allocation being freed.
> > >
> > > arch_vunmap is a new __weak function that implements the actual unmapping
> > > and
> > > resetting of the direct map permissions. It can be overridden by more
> > > efficient
> > > architecture specific implementations.
> > >
> > > For the default implementation, it uses architecture agnostic methods which
> > > are
> > > equivalent to what most usages do before calling vfree. So now it is just
> > > centralized here.
> > >
> > > This implementation derives from two sketches from Dave Hansen and Andy
> > > Lutomirski.
> > >
> > > Suggested-by: Dave Hansen <dave.hansen@intel.com>
> > > Suggested-by: Andy Lutomirski <luto@kernel.org>
> > > Suggested-by: Will Deacon <will.deacon@arm.com>
> > > Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
> > > ---
> > >  include/linux/vmalloc.h |  2 ++
> > >  mm/vmalloc.c            | 73 +++++++++++++++++++++++++++++++++++++----
> > >  2 files changed, 69 insertions(+), 6 deletions(-)
> > >
> > > diff --git a/include/linux/vmalloc.h b/include/linux/vmalloc.h
> > > index 398e9c95cd61..872bcde17aca 100644
> > > --- a/include/linux/vmalloc.h
> > > +++ b/include/linux/vmalloc.h
> > > @@ -21,6 +21,8 @@ struct notifier_block;                /* in notifier.h */
> > >  #define VM_UNINITIALIZED       0x00000020      /* vm_struct is not fully
> > > initialized */
> > >  #define VM_NO_GUARD            0x00000040      /* don't add guard page */
> > >  #define VM_KASAN               0x00000080      /* has allocated kasan
> > > shadow memory */
> > > +#define VM_IMMEDIATE_UNMAP     0x00000200      /* flush before releasing
> > > pages */
> > > +#define VM_HAS_SPECIAL_PERMS   0x00000400      /* may be freed with special
> > > perms */
> > >  /* bits [20..32] reserved for arch specific ioremap internals */
> > >
> > >  /*
> > > diff --git a/mm/vmalloc.c b/mm/vmalloc.c
> > > index 97d4b25d0373..02b284d2245a 100644
> > > --- a/mm/vmalloc.c
> > > +++ b/mm/vmalloc.c
> > > @@ -18,6 +18,7 @@
> > >  #include <linux/interrupt.h>
> > >  #include <linux/proc_fs.h>
> > >  #include <linux/seq_file.h>
> > > +#include <linux/set_memory.h>
> > >  #include <linux/debugobjects.h>
> > >  #include <linux/kallsyms.h>
> > >  #include <linux/list.h>
> > > @@ -38,6 +39,11 @@
> > >
> > >  #include "internal.h"
> > >
> > > +struct vfree_work {
> > > +       struct llist_node node;
> > > +       void *addr;
> > > +};
> > > +
> > >  struct vfree_deferred {
> > >         struct llist_head list;
> > >         struct work_struct wq;
> > > @@ -50,9 +56,13 @@ static void free_work(struct work_struct *w)
> > >  {
> > >         struct vfree_deferred *p = container_of(w, struct vfree_deferred,
> > > wq);
> > >         struct llist_node *t, *llnode;
> > > +       struct vfree_work *cur;
> > >
> > > -       llist_for_each_safe(llnode, t, llist_del_all(&p->list))
> > > -               __vunmap((void *)llnode, 1);
> > > +       llist_for_each_safe(llnode, t, llist_del_all(&p->list)) {
> > > +               cur = container_of(llnode, struct vfree_work, node);
> > > +               __vunmap(cur->addr, 1);
> > > +               kfree(cur);
> > > +       }
> > >  }
> > >
> > >  /*** Page table manipulation functions ***/
> > > @@ -1494,6 +1504,48 @@ struct vm_struct *remove_vm_area(const void *addr)
> > >         return NULL;
> > >  }
> > >
> > > +/*
> > > + * This function handles unmapping and resetting the direct map as
> > > efficiently
> > > + * as it can with cross arch functions. The three categories of
> > > architectures
> > > + * are:
> > > + *   1. Architectures with no set_memory implementations and no direct map
> > > + *      permissions.
> > > + *   2. Architectures with set_memory implementations but no direct map
> > > + *      permissions
> > > + *   3. Architectures with set_memory implementations and direct map
> > > permissions
> > > + */
> > > +void __weak arch_vunmap(struct vm_struct *area, int deallocate_pages)
> >
> > My general preference is to avoid __weak functions -- they don't
> > optimize well.  Instead, I prefer either:
> >
> > #ifndef arch_vunmap
> > void arch_vunmap(...);
> > #endif
> >
> > or
> >
> > #ifdef CONFIG_HAVE_ARCH_VUNMAP
> > ...
> > #endif
> Ok.
> >
> > > +{
> > > +       unsigned long addr = (unsigned long)area->addr;
> > > +       int immediate = area->flags & VM_IMMEDIATE_UNMAP;
> > > +       int special = area->flags & VM_HAS_SPECIAL_PERMS;
> > > +
> > > +       /*
> > > +        * In case of 2 and 3, use this general way of resetting the
> > > permissions
> > > +        * on the directmap. Do NX before RW, in case of X, so there is no
> > > W^X
> > > +        * violation window.
> > > +        *
> > > +        * For case 1 these will be noops.
> > > +        */
> > > +       if (immediate)
> > > +               set_memory_nx(addr, area->nr_pages);
> > > +       if (deallocate_pages && special)
> > > +               set_memory_rw(addr, area->nr_pages);
> >
> > Can you elaborate on the intent here?  VM_IMMEDIATE_UNMAP means "I
> > want that alias gone before any deallocation happens".
> > VM_HAS_SPECIAL_PERMS means "I mucked with the direct map -- fix it for
> > me, please".  deallocate means "this was vfree -- please free the
> > pages".  I'm not convinced that all the various combinations make
> > sense.  Do we really need both flags?
> VM_HAS_SPECIAL_PERMS is supposed to mean, like you said, "reset the direct map".
> Where VM_IMMEDIATE_UNMAP means, the vmalloc allocation has extra capabilties
> where we don't want to leave an enhanced capability TLB entry to the freed page.
>
> I was trying to pick names that could apply more generally for potential future
> special memory capabilities. Today VM_HAS_SPECIAL_PERMS does just mean reset
> write to the directmap and VM_IMMEDIATE_UNMAP means vmalloc mapping is
> executable.
>
> A present day reason for keeping both flags is, it is more efficient in the
> arch-agnostic implementation when freeing memory that is just RO and not
> executable. It saves a TLB flush.
>
> > (VM_IMMEDIATE_UNMAP is a bit of a lie, since, if in_interrupt(), it's
> > not immediate.)
> True, maybe VM_MUST_FLUSH or something else?
>
> > If we do keep both flags, maybe some restructuring would make sense,
> > like this, perhaps.  Sorry about horrible whitespace damage.
> >
> > if (special) {
> >   /* VM_HAS_SPECIAL_PERMS makes little sense without deallocate_pages. */
> >   WARN_ON_ONCE(!deallocate_pages);
> >
> >   if (immediate) {
> >     /* It's possible that the vmap alias is X and we're about to make
> > the direct map RW.  To avoid a window where executable memory is
> > writable, first mark the vmap alias NX.  This is silly, since we're
> > about to *unmap* it, but this is the best we can do if all we have to
> > work with is the set_memory_abc() APIs.  Architectures should override
> > this whole function to get better behavior. */
> >     set_memory_nx(...);
> >   }
> >
> >   set_memory_rw(addr, area->nr_pages);
> > }
> Ok.
>
> >
> > > +
> > > +       /* Always actually remove the area */
> > > +       remove_vm_area(area->addr);
> > > +
> > > +       /*
> > > +        * Need to flush the TLB before freeing pages in the case of this
> > > flag.
> > > +        * As long as that's happening, unmap aliases.
> > > +        *
> > > +        * For 2 and 3, this will not be needed because of the set_memory_nx
> > > +        * above, because the stale TLBs will be NX.
> >
> > I'm not sure I agree with this comment.  If the caller asked for an
> > immediate unmap, we should give an immediate unmap.  But I'm still not
> > sure I see why VM_IMMEDIATE_UNMAP needs to exist as a separate flag.
> Yea. I was just trying to save a TLB flush, since for today's callers that have
> set_memory there isn't a security downside I know of to just leaving it NX.
> Maybe its not worth the tradeoff of confusion? Or I can clarify that in the
> comment.

Don't both of the users in your series set both flags, though?  My
real objection to having them be separate is that, in the absence of
users, it's less clear exactly what they should do and the code
doesn't get exercised.

If you document that VM_IMMEDIATE_UNMAP means "I want the TLB entries
gone", then I can re-review the code in light of that.  But then I'm
unconvinced by your generic implementation, since set_memory_nx()
seems like an odd way to go about it.

>
> > > +        */
> > > +       if (immediate && !IS_ENABLED(ARCH_HAS_SET_MEMORY))
> > > +               vm_unmap_aliases();
> > > +}
> > > +
> > >  static void __vunmap(const void *addr, int deallocate_pages)
> > >  {
> > >         struct vm_struct *area;
> > > @@ -1515,7 +1567,8 @@ static void __vunmap(const void *addr, int
> > > deallocate_pages)
> > >         debug_check_no_locks_freed(area->addr, get_vm_area_size(area));
> > >         debug_check_no_obj_freed(area->addr, get_vm_area_size(area));
> > >
> > > -       remove_vm_area(addr);
> > > +       arch_vunmap(area, deallocate_pages);
> > > +
> > >         if (deallocate_pages) {
> > >                 int i;
> > >
> > > @@ -1542,8 +1595,15 @@ static inline void __vfree_deferred(const void *addr)
> > >          * nother cpu's list.  schedule_work() should be fine with this too.
> > >          */
> > >         struct vfree_deferred *p = raw_cpu_ptr(&vfree_deferred);
> > > +       struct vfree_work *w = kmalloc(sizeof(struct vfree_work),
> > > GFP_ATOMIC);
> > > +
> > > +       /* If no memory for the deferred list node, give up */
> > > +       if (!w)
> > > +               return;
> >
> > That's nasty.  I see what you're trying to do here, but I think you're
> > solving a problem that doesn't need solving quite so urgently.  How
> > about dropping this part and replacing it with a comment like "NB:
> > this writes a word to a potentially executable address.  It would be
> > nice if we could avoid doing this."  And maybe a future patch could
> > more robustly avoid it without risking memory leaks.
> Yea, sorry I should have called this out, because I wasn't sure on how likely
> that was to happen. I did find some other places in the kernel with the same
> ignoring logic.
>
> I'll have to think though, I am not sure what the alternative is. Since the
> memory can be RO in the module_memfree case, the old method of re-using the
> allocation will no longer work. The list node could be stuffed on the vm_struct,
> but then the all of the spin_lock(&vmap_area_lock)'s need to be changed to work
> with interrupts so that the struct could be looked up. Not sure of the
> implications of that. Or maybe have some slow backup that resets the permissions
> and re-uses the allocation if kmalloc fails?
>
> I guess it could also go back to the old v1 implementation that doesn't handle
> RO and the directmap, and leave the W^X violation window during teardown. Then
> solve that problem when modules are loaded via something like Nadav's stuff.
>

Hmm.  Switching to spin_lock_irqsave() doesn't seem so bad to me.
