Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:37:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AB5CB58061F;
	Thu, 13 Dec 2018 06:22:46 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga005-1.fm.intel.com with ESMTP; 13 Dec 2018 06:22:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6CaH9BEou63f7zEpIkYhcZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os+ybnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPHI28?=
 =?us-ascii?q?YYsID+QCM+hXoYbyqFkSohWxHgmsHOHixyRUhnL1x6A2z/gtHA/E0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKVu661rPIwineZPxV2Tb97ofIchE/rvGWQLl9ds/RxlM1FwzZlFmR?=
 =?us-ascii?q?qIzkPzWa1uQMrWeb9fFtWvi1i24isQ1+vj+vxsI1h4TPm4kbyUjE+D1nzIopId?=
 =?us-ascii?q?C0UlN3bNC6HJdKqi2XNJd6TtkjTmxqoCo21KAKtJyhcCQXx5kr2wTTZ+Gbf4SV?=
 =?us-ascii?q?+B7uVvqdLDFlj3x/Yr2/nQy98U24x+38SMa01FFKozJbktnDqH8NzQbf6suZRf?=
 =?us-ascii?q?tn+EeuxzKP2xrU6uFeLkA4javbK5g/zb4sjpcfr1jPEyvslEnrgqKaaF8o9vWr?=
 =?us-ascii?q?5uj7eLnrp52RO5dxig7kM6QunsK/Af4/MggLR2Wb/eW81Lv+/Uz2WblKjeM5kr?=
 =?us-ascii?q?PfsJ/EIcQXv6m5AgFT0ok98RayFCmm0NsGknkdNl5FewyIj5LvO17QJPD0F/C/?=
 =?us-ascii?q?g06jkDtz3fDJIqXhAonRLnjEiLrhebd9601CxwYpwtFf+olZCrUAIPL1R0/wu8?=
 =?us-ascii?q?bUDh4/Mwyo3ennDM9x2Z8ZWWKKGqWZKr/dsUeU5uIzJOmBfI8Vtyz8K/g5/fHu?=
 =?us-ascii?q?imU1mV8Afaaz25sXZ2u1HvBnI0WffHrtjc0NEWYMvgoiUuPqjEeOXiJUZ3a3R6?=
 =?us-ascii?q?g8/C00CJq6DYffQYCgmL6B3CClEZFMZWBGDVaMEXHvd4ifX/cMaSSSItJukzAe?=
 =?us-ascii?q?VLihTZMh2g+qtAPg17VnKe/U8DUCtZ3/zNh1+/HTlRYq+DNuFMSd02aNT2Jukm?=
 =?us-ascii?q?MSXTA23rtyoUh8yleFzKh5jOZUFd1V5/NVTAg6MYTQwPB9C9D3QgjBZMuGSE66?=
 =?us-ascii?q?QtW6BjE8VtExzMUIY0pnH9WijwrM3yylA7IOk7yLBZo08r/T3nTrJsZ9zWrG27?=
 =?us-ascii?q?clj1U8XsRPMmimjLZl9wfPH47Jj1mZl6GyeKsBxiHN6nmMwXCOvE5CVg5wSrvK?=
 =?us-ascii?q?XXYYakvSrtT540fCQqSqCbQmNAtB1MGDJrFLat3vkVVJWvPjNM7CbGK2nme6HQ?=
 =?us-ascii?q?yIya+UbIr2Z2Ud2z3QB1UenAAN43mKLwg+CT2no2LFEjNuE0niY0ft8el4tXO6?=
 =?us-ascii?q?QVU4zwCMb019ybW1/gQZiuCbS/MWxrgEojsuqy1oHFah2NLbE8aApwtkfKVbfd?=
 =?us-ascii?q?M94FdG2XjFtwBnOZygNaRihl8YcwR4pE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO4KgP7Oo3qlr9swCpDEYt6Ghn3MRP3H?=
 =?us-ascii?q?ua5ZXKCxQSXIn1UkY28Rh6ur7bbjM854PSyX1jL620viXe1NIuAesv0gygcMtH?=
 =?us-ascii?q?MKOYCA/yFNUXBsizKOAwh1eldBMFPOBI+64yMMOrbP+G2K+tPOZ9kzOql2VH4I?=
 =?us-ascii?q?Zh0k2S8ypwUPLH35EAw/uAxAuISy/8jEu9ssDwgY1EfzASEXalxij+GYFRYbd+?=
 =?us-ascii?q?fYAVBme0Is2738lxiITpW3FF6lGjHVQG2MmydBqWblz92xBQ1EsNrXymnyu40y?=
 =?us-ascii?q?J7kzUzoqWD2yzOxvzodAAbNW5TWGlikVDsLJC0jtAbRkSpbxIllAC45Ub83KVb?=
 =?us-ascii?q?oKV/L2/OQUZHZST2LmdiUreuubqGecJA9JQosSBPWuSmfV+aUqL9owcd0y77HW?=
 =?us-ascii?q?tR3io7dzKpupX+hRB6k3iSLHVwrHrYf8F/2xHf6cfYRf5Q2DoGWSZ5hSPWBli6?=
 =?us-ascii?q?I9mm49GUm43fveC5UmKrTodTfjXzzYOcqCu74nVnAB2lkPC0gNHnEwk60Sng2t?=
 =?us-ascii?q?luVCXIqgv8Y4bx26S7N+JnYldnBFvm58VmHYF+l5M6hIsM1ngCmpWV4X0HnH/w?=
 =?us-ascii?q?MdpB2KLydnoNRSMRzN7T7wjow0ljLnOPx4LkWXSR2MphZ9+mYmwI3iIx9dxFCK?=
 =?us-ascii?q?CR7LZchyt6vkK4rR7NYfh6hjodzPou6H0AjO0Ttgsi0D6dAqwMEklCJiPjiQ6I?=
 =?us-ascii?q?79+loaVTZWavd6Ww1UVkkdCgCrGCvh9TWHLjdpg+Gi9w6911MEjQ333r9oHkZN?=
 =?us-ascii?q?7QYMoPth2TlhfMlelUJ4g3lvoXnipnImP9sGYhy+46ixxuwJ67sJKGK2Vr4KK2?=
 =?us-ascii?q?HBpYOifpaMMU/zHnlbxekdqO34CzApVhHS0GU4DyQvKvFDISqO7rNwKTEDAnrn?=
 =?us-ascii?q?ebGLzfHRKQ6Ut8rnLPFYyrOG+TJHUD0dpiQxydLlRFgA8IRDU6goI5Fgeyyczj?=
 =?us-ascii?q?akh54y4e5kXiphtQ0O5oNAT/UmTCpAeucDg0U4OSLB5X7gFE+kfUPtaS7uN1Hy?=
 =?us-ascii?q?FE4JKhqBaBJXCcZwRNFWsJQFCLB0j/Prmy4tnN6+iZBu2jL/vXfLWBs+peW+2T?=
 =?us-ascii?q?xZKo1Itm8C2BNsGOPnlkEv061VBPXXF/G8TFhToPTzYbmD7Kb86evB284DF4rt?=
 =?us-ascii?q?ij8PT3XwLi/YuPBKVTMdVs+BC2gL2PN+2KhCZ+JjZXyIkMxWLTyLUE2F4Siidu?=
 =?us-ascii?q?dySiELgatC7NSr7QlbFTDxIBdyxzM85I5bom3gZRIc7bls/11rlgg/EvFldKTk?=
 =?us-ascii?q?bhld+pZMAQJ2G9NUjKBEKKNLSAOD3KzNv7YaK6Sb1MkupUswe8tiqcE0/mJj6D?=
 =?us-ascii?q?jSXmVwizMeFQiyGWJABeuIC4chp3FWfvVs7pah2lP99xljA2xbw0hnXXNW8TKz?=
 =?us-ascii?q?R8ckVNrqGO4iNcmPlwB2tB7n99J+mehymZ9/XYKooRsfZzAiV7jeRa4HE7y7tT?=
 =?us-ascii?q?9C5FRfx1lzHUrt5huFymluiPyjx6UBtBsDpLhYSLvVl8NqXd7JVPRXHE/BdepV?=
 =?us-ascii?q?mXXi4NrdZ/FpXVuqtQ1tXV3PbpMjZJ887Z5+MXDtbVNcfBO30kZ16hJD7TCQIe?=
 =?us-ascii?q?BRGvOGDPgUFH2KWO+XmFhpw7rIXwgp0IS68dWFFjUrs4A19iGpQpJ5BvUylsxb?=
 =?us-ascii?q?ySl8kOzX63rxTdTchfuZaBUP+OV6bBMjGc2JxNfRBA86L+IoUeLMWv3kV4YR9o?=
 =?us-ascii?q?jYLFGkfKddlXp2tqaQpi8xYFy2R3UmBmgxGtUQiq+nJGUKfsxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAADDaRJch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2sng3yWCy0Ul0AUgWIpEwGHRCI2Bw0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpL4I2JAGCYgECAwECIAQLAUYGCQEBCAIOCgICJgICA1QGAQwGAgEBAYMcg?=
 =?us-ascii?q?gEEAYsom1B8M4owgQuLMYFXP4E4gj0ugSgZAYMngxyCVwKJNQYBgXaEFYFPhFi?=
 =?us-ascii?q?LIQcCgiQEiCSHBx6BXIgggU2GAYkugQWQYw2BejMaI1CCbIInDAuOHT8BATGBB?=
 =?us-ascii?q?QEBjEgBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AvAADDaRJch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?ng3yWCy0Ul0AUgWIpEwGHRCI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCY?=
 =?us-ascii?q?gECAwECIAQLAUYGCQEBCAIOCgICJgICA1QGAQwGAgEBAYMcggEEAYsom1B8M4o?=
 =?us-ascii?q?wgQuLMYFXP4E4gj0ugSgZAYMngxyCVwKJNQYBgXaEFYFPhFiLIQcCgiQEiCSHB?=
 =?us-ascii?q?x6BXIgggU2GAYkugQWQYw2BejMaI1CCbIInDAuOHT8BATGBBQEBjEgBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="57332913"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 06:22:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728342AbeLMOWl (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 09:22:41 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:34836 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727618AbeLMOWk (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 09:22:40 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 7391F80D;
        Thu, 13 Dec 2018 06:22:39 -0800 (PST)
Received: from [10.1.196.62] (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 3980A3F59C;
        Thu, 13 Dec 2018 06:22:37 -0800 (PST)
Subject: Re: [PATCH v2 01/10] irqdomain: Add interface to request an irq
 domain
To: Robert Richter <rrichter@cavium.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Jason Cooper <jason@lakedaemon.net>
Cc: "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        Stuart Yoder <stuyoder@gmail.com>,
        Laurentiu Tudor <laurentiu.tudor@nxp.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Will Deacon <will.deacon@arm.com>,
        Lorenzo Pieralisi <Lorenzo.Pieralisi@arm.com>,
        "Richter, Robert" <Robert.Richter@cavium.com>,
        Julien Thierry <julien.thierry@arm.com>
References: <20181128144240.28727-1-rrichter@cavium.com>
 <20181128144240.28727-2-rrichter@cavium.com>
From: Marc Zyngier <marc.zyngier@arm.com>
Openpgp: preference=signencrypt
Autocrypt: addr=marc.zyngier@arm.com; prefer-encrypt=mutual; keydata=
 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
Organization: ARM Ltd
Message-ID: <1a98dc26-fc3f-988a-28b1-0452a465a364@arm.com>
Date: Thu, 13 Dec 2018 14:22:35 +0000
User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181128144240.28727-2-rrichter@cavium.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Robert,

On 28/11/2018 14:43, Robert Richter wrote:
> This patch introduces a new interface to allow irq domain
> initialization regardless of order dependencies. This is done by
> requesting a domain and registering a callback function that is called
> as soon as a domain becomes available.
> 
> A typical irq domain initialization code is the following:
> 
> Parent initialization:
> 
> 	...
> 	domain = msi_create_irq_domain(fwnode, info, parent);
> 	if (domain)
> 		irq_domain_update_bus_token(domain, bus_token);
> 	...
> 
> Child initialization:
> 
> 	...
> 	parent = irq_find_matching_fwnode(fwnode, bus_token);
> 	if (!parent)
> 		...
> 	create_irq_domain(parent, ...);
> 	...
> 
> In case the parent is not yet available, the child initialization
> fails. Thus, the current implementation requires the parent domain
> being initialized before the child domain. With a complex irq domain
> hierarchy it becomes more and more difficult to grant that order as
> irq domains are enabled in separate subsystems. Care must be taken
> when initializing parent and child domains in the same initcall
> level. E.g. Arm's gic-v3-its implementation might have the following
> tree and dependencies:
> 
> 	gic-v3
> 	├── its-node-0
> 	│   ├── pci-host-0
> 	│   ├── platform-bus
> 	│   ...
> 	├── its-node-1
> 	│   ├── pci-host-1
> 	...
> 
> All domains must be initialized in top-down order of the tree.
> 
> This patch introduces an interface that allows domain initialization
> without any order requirements, e.g. to be able to initialize the irq
> domains in the same initcall level. The following functions have been
> introduced to allow the registration of a callback handler:
> 
> 	irq_domain_request_fwnode()
> 	irq_domain_request_host()
> 
> Instead of using the irq_find_matching_fwnode() function and it's
> variants the child code replaces them with the new functions and
> looks e.g. like the following:
> 
> 	...
> 	irq_domain_request_fwnode(fwnode, bus_token,
> 				create_irq_domain, name, priv);
> 	...
> 
> Here, the callback function create_irq_domain() is called as soon as
> the parent becomes available. All registered handlers are stored in a
> list. With each update of the bus token using irq_domain_update_bus_
> token(), the list is checked if that domain is requested by a handler
> and if that is the case it's callback function is called and the
> request removed from the list.
> 
> With a late_initcall all requests from the list should already have
> been handled, otherwise all remaining requests are removed with an
> error reported.
> 
> Signed-off-by: Robert Richter <rrichter@cavium.com>
> ---
>  include/linux/irqdomain.h |  15 +++++
>  kernel/irq/irqdomain.c    | 163 ++++++++++++++++++++++++++++++++++++++++++++++
>  2 files changed, 178 insertions(+)
> 
> diff --git a/include/linux/irqdomain.h b/include/linux/irqdomain.h
> index 068aa46f0d55..27e83803627d 100644
> --- a/include/linux/irqdomain.h
> +++ b/include/linux/irqdomain.h
> @@ -311,6 +311,21 @@ static inline struct irq_domain *irq_find_host(struct device_node *node)
>  	return d;
>  }
>  
> +typedef int (*irq_domain_callback_t)(struct irq_domain *, void *);
> +int irq_domain_request_fwnode(struct fwnode_handle *fwnode,
> +			enum irq_domain_bus_token bus_token,
> +			irq_domain_callback_t callback,
> +			const char *name, void *priv);
> +
> +static inline int irq_domain_request_host(struct device_node *node,
> +					enum irq_domain_bus_token bus_token,
> +					irq_domain_callback_t callback,
> +					void *priv)
> +{
> +	return irq_domain_request_fwnode(of_node_to_fwnode(node), bus_token,
> +					callback, node->full_name, priv);
> +}

I don't think you need this helper. There is no backward compat to
preserve in this case, and I believe all the potential users would be
using the fwnode variant.

I'm not keen at all on the name thing though. An OF node already has
one, and an irqchip fwnode caries one as part of the irqchip_fwid structure.

> +
>  /**
>   * irq_domain_add_linear() - Allocate and register a linear revmap irq_domain.
>   * @of_node: pointer to interrupt controller's device tree node.
> diff --git a/kernel/irq/irqdomain.c b/kernel/irq/irqdomain.c
> index 3366d11c3e02..ebe628dad568 100644
> --- a/kernel/irq/irqdomain.c
> +++ b/kernel/irq/irqdomain.c
> @@ -21,6 +21,7 @@
>  #include <linux/fs.h>
>  
>  static LIST_HEAD(irq_domain_list);
> +static LIST_HEAD(irq_domain_requests);
>  static DEFINE_MUTEX(irq_domain_mutex);
>  
>  static struct irq_domain *irq_default_domain;
> @@ -45,6 +46,111 @@ static inline void debugfs_remove_domain_dir(struct irq_domain *d) { }
>  const struct fwnode_operations irqchip_fwnode_ops;
>  EXPORT_SYMBOL_GPL(irqchip_fwnode_ops);
>  
> +struct irq_domain_request {
> +	struct list_head		list;
> +	struct fwnode_handle		*fwnode;
> +	enum irq_domain_bus_token	bus_token;
> +	irq_domain_callback_t		callback;
> +	char				*name;
> +	void				*priv;
> +};
> +
> +static void irq_domain_call_handler(struct irq_domain *domain,
> +		irq_domain_callback_t callback, const char *name, void *priv)
> +{
> +	int ret;
> +
> +	ret = callback(domain, priv);
> +	if (ret)
> +		pr_err("%s: Domain request handler failed: %d\n",
> +			name, ret);
> +
> +	of_node_put(irq_domain_get_of_node(domain));
> +}
> +
> +static void irq_domain_free_request(struct irq_domain_request *request)
> +{
> +	kfree(request->name);
> +	kfree(request);
> +}
> +
> +static void irq_domain_handle_requests(struct fwnode_handle *fwnode,
> +                        enum irq_domain_bus_token bus_token)
> +{
> +	struct irq_domain *domain;
> +	struct irq_domain_request *request;
> +
> +	if (!fwnode)
> +		return;
> +redo:
> +	domain = irq_find_matching_fwnode(fwnode, bus_token);
> +	if (!domain)
> +		return;
> +
> +	mutex_lock(&irq_domain_mutex);
> +
> +	/*
> +	 * For serialization of irq domain updates make sure to handle
> +	 * (and remove) the request only if the domain still matches
> +	 * the request.
> +	 */
> +	if ((domain->fwnode != fwnode) || (domain->bus_token != bus_token)) {
> +		mutex_unlock(&irq_domain_mutex);
> +		goto redo;
> +	}
> +
> +	list_for_each_entry(request, &irq_domain_requests, list) {
> +		if (request->fwnode != fwnode ||
> +		    request->bus_token != bus_token)
> +			continue;
> +
> +		list_del(&request->list);
> +		mutex_unlock(&irq_domain_mutex);
> +
> +		irq_domain_call_handler(domain, request->callback,
> +					request->name, request->priv);
> +		irq_domain_free_request(request);
> +
> +		goto redo;
> +	}

This feels a bit convoluted. Pulling the various calls out of the loop
would be better.

> +
> +	mutex_unlock(&irq_domain_mutex);
> +}
> +
> +static int __init irq_domain_drain_requests(void)
> +{
> +	struct irq_domain_request *request;
> +	struct irq_domain *domain;
> +	int ret = 0;
> +redo:
> +	mutex_lock(&irq_domain_mutex);
> +
> +	list_for_each_entry(request, &irq_domain_requests, list) {
> +		list_del(&request->list);
> +		mutex_unlock(&irq_domain_mutex);
> +
> +		domain = irq_find_matching_fwnode(request->fwnode,
> +						request->bus_token);
> +		if (domain) {
> +			irq_domain_call_handler(domain, request->callback,
> +						request->name, request->priv);
> +		} else {
> +			ret = -ENODEV;
> +			pr_err("%s-%d: Unhandled domain request\n",
> +				request->name, request->bus_token);
> +		}
> +
> +		irq_domain_free_request(request);
> +
> +		goto redo;
> +	}

Why isn't this written in terms of irq_domain_handle_requests instead?

> +
> +	mutex_unlock(&irq_domain_mutex);
> +
> +	return ret;
> +}
> +late_initcall(irq_domain_drain_requests);

Why do you have to do all matching in this late initcall? I'd have hoped
for requests to be satisfied as domains get added, not as a last ditch
effort.

> +
>  /**
>   * irq_domain_alloc_fwnode - Allocate a fwnode_handle suitable for
>   *                           identifying an irq domain
> @@ -293,6 +399,8 @@ void irq_domain_update_bus_token(struct irq_domain *domain,
>  	debugfs_add_domain_dir(domain);
>  
>  	mutex_unlock(&irq_domain_mutex);
> +
> +	irq_domain_handle_requests(domain->fwnode, bus_token);
>  }
>  
>  /**
> @@ -417,6 +525,61 @@ struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *fwspec,
>  EXPORT_SYMBOL_GPL(irq_find_matching_fwspec);
>  
>  /**
> + * irq_domain_request_fwnode() - Requests a domain for a given fwspec
> + * @fwspec: FW specifier for an interrupt
> + * @bus_token: domain-specific data
> + * @callback: function to be called once domain becomes available
> + * @name: name to be used for fwnode
> + * @priv: private data to be passed to callback
> + *
> + * The callback function is called as soon as the domain is available.
> + */
> +int irq_domain_request_fwnode(struct fwnode_handle *fwnode,
> +			enum irq_domain_bus_token bus_token,
> +			irq_domain_callback_t callback,
> +			const char *name, void *priv)
> +{
> +	struct irq_domain *parent;
> +	struct irq_domain_request *request;
> +
> +	if (!fwnode || bus_token == DOMAIN_BUS_ANY || !callback || !name)

Why are you refusing DOMAIN_BUS_ANY? If that's what the caller wants, we
should satisfy it.

> +		return -EINVAL;
> +
> +	parent = irq_find_matching_fwnode(fwnode, bus_token);
> +	if (parent) {
> +		irq_domain_call_handler(parent, callback, name, priv);
> +		return 0;
> +	}
> +
> +	request = kzalloc(sizeof(*request), GFP_KERNEL);
> +	if (!request)
> +		return -ENOMEM;
> +
> +	request->fwnode = fwnode;
> +	request->bus_token = bus_token;
> +	request->callback = callback;
> +	request->name = kstrdup(name, GFP_KERNEL);
> +	request->priv = priv;
> +	INIT_LIST_HEAD(&request->list);
> +
> +	if (!request->name) {
> +		kfree(request);
> +		return -ENOMEM;
> +	}
> +
> +	of_node_get(to_of_node(fwnode));
> +
> +	mutex_lock(&irq_domain_mutex);
> +	list_add_tail(&request->list, &irq_domain_requests);
> +	mutex_unlock(&irq_domain_mutex);
> +
> +	/* recheck in case list changed */
> +	irq_domain_handle_requests(fwnode, bus_token);

Why do you need this? The whole thing is racy anyway, and you already
have a catch-all as a late initcall...

> +
> +	return 0;
> +}
> +
> +/**
>   * irq_domain_check_msi_remap - Check whether all MSI irq domains implement
>   * IRQ remapping
>   *
> 

Overall, this is a bit hackish. Why don't you resolve the deferred
requests as part of a domain being added instead? It would make things
much more straightforward.

Thanks,

	M.
-- 
Jazz is not dead. It just smells funny...
