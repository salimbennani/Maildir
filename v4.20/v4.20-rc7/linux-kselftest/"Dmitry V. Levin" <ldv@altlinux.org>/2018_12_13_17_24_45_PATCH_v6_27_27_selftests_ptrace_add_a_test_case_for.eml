Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:39:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8082758061F;
	Thu, 13 Dec 2018 09:25:12 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 09:25:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQW/PrBxD4lWUCx/XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8QI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMuZDt4nwpUADrQeiCQS2GO/j1iNEimHw0KYn0+ohCwbG3Ak4Et4Avn?=
 =?us-ascii?q?rUqdT1NLsIUeG10aLHwi/PZO5Q1zjj9ojIcxYhrf+RVr93dcre1FcvGhjfgVWU?=
 =?us-ascii?q?tYzlOzKV1uIQs2mU9eZgUvivi2E+pgx3vzOhyMAsiozTiYIUzFDJ7Tt2wYk0Jd?=
 =?us-ascii?q?2kUkJ7YMWkHINOuCGcK4t2WMMjT3tuuCYgzLANpJ21fDASxZg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iG5/dL++hRu+6VWsx+nzW8WuzVpGsihInsPRun0PzRDe6sqKR/?=
 =?us-ascii?q?1g9Um7wzmPzRrc6uRcLEA0i6XbL5khz6Yulpocr0vDBDX6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/7gYrX8qZ+QL450igfgPaQygsGzH/g0PwwUU2SG9+mwyqfv8VD6TblWlPE7k6?=
 =?us-ascii?q?vUvIjfJcsBp665BwFV0pwk6xa6Fzqm1NUYnX8aLFNKYR6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mlOskTltx//YJL3sGYvNLnfdn7f7Z7p96FBTyBA1zd9B45JYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWcKsRA/TOz2klKCViRfZ3avX6?=
 =?us-ascii?q?0m4DE7B5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szROutAjkxLZ9LerU/SsYtZTk1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwggLp7cz+t6C9PoVgLbZNiJSk2r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzK?=
 =?us-ascii?q?ohgEMgQsdVMW2mh7Rw9w7cB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2S2l2e0Bh?=
 =?us-ascii?q?aIw7eMYZHue2Uc2iXdFUcFnxoS/XaAKQgxGCOhr3jCAzxpEFLle1ns/vVmqHOn?=
 =?us-ascii?q?Uk80yBmHYFB72Lqr5BEZn/ycROkV3rIfpighrS55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6EplAkckvrHMt0ApyKaKZ3Eld?=
 =?us-ascii?q?dz+C2pDwILnXKmj0/BCgcKPW3lDe0NCL+qYA8vg4qlPjvB23GUom6Xloz95V03?=
 =?us-ascii?q?6E7JXQEAUSSY7xUlow9xVivb7aZjcy5ozK2nxsK6W7qSLC1M8zC+sjyRageMlf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw00KR9yZmVuHExZcEw/GC0QuBWDfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14Gws6pdgaIYFznwAJQ0l4boXq5liuizj?=
 =?us-ascii?q?x4ii0mobCb3CPT3evibh0HOmhQSWlmjFfsJ5W0jt8AUEipaQgpiAWq5ULgy6dH?=
 =?us-ascii?q?o6R/KnHZQV1UcCjuM2FiTqywu6KCYs5O8p8psT9bUP+hYVCcUbP9pxoa0yX+H2?=
 =?us-ascii?q?pR3jw7djequonnkBx+km6SMHFzrH/Bc8Fq2Rjf/MDcReJW3jceRil3kyPXBlu/?=
 =?us-ascii?q?P9mu59mUjI3MsuO9V2KgUJ1cby/rwJiEtCu6421qHBK+k+qymt3hDQg1zyv728?=
 =?us-ascii?q?N2WiXPqRb2epPr2LiiMeJ7YkloA0fx6spgFYF5iIcwhpAQ2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sV2i0n7sBGEq?=
 =?us-ascii?q?eU7KFekitzrVq1tgbRYfl7njcAxvoi8n8ag+cVuAUzyiWRGKwdHU5dPSb0jRSH?=
 =?us-ascii?q?88i+rLlLZGaoabWw0Ut+ndO7A72YrABTRm35eos8Ei9q9cpwLkjM0HLo54Hged?=
 =?us-ascii?q?nQa88TtxKOnxfBiehVNIw+lv4QiSV7PmL9uGUvy/Qnghx2wZG6oI+HJn1x/KK+?=
 =?us-ascii?q?Bx5ULDz0aNkV+jHwlqZehceW0purHpVgHDULQZTpQeipEDIUqfToKQKOHCcgpX?=
 =?us-ascii?q?ecHLrVBRWf51t+r3LTD5CrMGmaK2IDwtVlQBmdOVZTgAQJXDghmp45FwaqxNHu?=
 =?us-ascii?q?cUtj5zAR4EL4pQVIyu5yKxb/VWLfrh+yajgoUJifMAZW7gZa6kfXK8Oe6/x8Hz?=
 =?us-ascii?q?pC8p29tgCNKXGbZwdVDWEPQEOEHEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB4G8PEmzUWViwYjSTNY9SApBe7/C13od?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?bzmtHqoBtS7OT6LQm7VbDx0BayN0O8tH8bg83hRWOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgepOqh2/oiybHFHjPziZ?=
 =?us-ascii?q?kznpVguiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtqGQ7SJdgvllB2NN9GZqLemalCaf9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrtt2qVG8juaP0iZnUAZJqjtThIOEp0NiOaDY9plGQXnF/RIN4n?=
 =?us-ascii?q?+WCxQFvNZlDtzvu6ZNytnAjq7zKTFC887K8ssYHcTbNMWHMH9yeSbuTRnQAQRN?=
 =?us-ascii?q?azOwKWzFgFIVxPaW+3K9tJU2qpHw3pEJT+kfHHUzGuJSLll5G9kDOox0X3twla?=
 =?us-ascii?q?OHi+YL6GC4oR2XQ99V6NSPbfKPCPWnCzaQi/EQfBsVyLPQLokJMID/nUt4ZQ8p?=
 =?us-ascii?q?sp7NHh+acdVMvjdwJjFy6GFA7nl4BCVn3077Qgqp/HsSE+Ok2BkshV0tMqwW6D?=
 =?us-ascii?q?7w7gJvdRLxrywqnRx0wI29jA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAAAUlRJch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgmmBAieYKIIhkkOEfRSBYikDEAGHRSI1CA0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmIDAwECJBM/BgkBARwPJQMMHR0OBgESBYMcAYIABAGoa?=
 =?us-ascii?q?zOKNIw8EQaBf4ERhF2CewSDbIImApBCkE0HAgKHC4pBI5FKLIkCkWIBggx9CIM?=
 =?us-ascii?q?nCYIeF4dphjc8ATKBBQEBiXWCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AmAAAUlRJch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgmm?=
 =?us-ascii?q?BAieYKIIhkkOEfRSBYikDEAGHRSI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmIDAwECJBM/BgkBARwPJQMMHR0OBgESBYMcAYIABAGoazOKNIw8EQaBf4E?=
 =?us-ascii?q?RhF2CewSDbIImApBCkE0HAgKHC4pBI5FKLIkCkWIBggx9CIMnCYIeF4dphjc8A?=
 =?us-ascii?q?TKBBQEBiXWCTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="55792191"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 09:25:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729824AbeLMRZC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 12:25:02 -0500
Received: from vmicros1.altlinux.org ([194.107.17.57]:41560 "EHLO
        vmicros1.altlinux.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728123AbeLMRZC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 12:25:02 -0500
Received: from mua.local.altlinux.org (mua.local.altlinux.org [192.168.1.14])
        by vmicros1.altlinux.org (Postfix) with ESMTP id E9A6372CC71;
        Thu, 13 Dec 2018 20:24:45 +0300 (MSK)
Received: by mua.local.altlinux.org (Postfix, from userid 508)
        id DC05F964E85; Thu, 13 Dec 2018 20:24:45 +0300 (MSK)
Date: Thu, 13 Dec 2018 20:24:45 +0300
From: "Dmitry V. Levin" <ldv@altlinux.org>
To: Oleg Nesterov <oleg@redhat.com>, Andy Lutomirski <luto@kernel.org>,
        Shuah Khan <shuah@kernel.org>
Cc: Elvira Khabirova <lineprinter@altlinux.org>,
        Eugene Syromyatnikov <esyr@redhat.com>,
        linux-kselftest@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH v6 27/27] selftests/ptrace: add a test case for
 PTRACE_GET_SYSCALL_INFO
Message-ID: <20181213172445.GA6024@altlinux.org>
References: <20181213171833.GA5240@altlinux.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Check whether PTRACE_GET_SYSCALL_INFO semantics implemented in the kernel
matches userspace expectations.

Cc: Oleg Nesterov <oleg@redhat.com>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Shuah Khan <shuah@kernel.org>
Cc: Elvira Khabirova <lineprinter@altlinux.org>
Cc: Eugene Syromyatnikov <esyr@redhat.com>
Cc: linux-kselftest@vger.kernel.org
Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
---

Notes:
    v6: made PTRACE_GET_SYSCALL_INFO return value checks strict

 tools/testing/selftests/ptrace/.gitignore     |   1 +
 tools/testing/selftests/ptrace/Makefile       |   2 +-
 .../selftests/ptrace/get_syscall_info.c       | 271 ++++++++++++++++++
 3 files changed, 273 insertions(+), 1 deletion(-)
 create mode 100644 tools/testing/selftests/ptrace/get_syscall_info.c

diff --git a/tools/testing/selftests/ptrace/.gitignore b/tools/testing/selftests/ptrace/.gitignore
index b3e59d41fd82..cfcc49a7def7 100644
--- a/tools/testing/selftests/ptrace/.gitignore
+++ b/tools/testing/selftests/ptrace/.gitignore
@@ -1 +1,2 @@
+get_syscall_info
 peeksiginfo
diff --git a/tools/testing/selftests/ptrace/Makefile b/tools/testing/selftests/ptrace/Makefile
index 8a2bc5562179..4bc550b6b845 100644
--- a/tools/testing/selftests/ptrace/Makefile
+++ b/tools/testing/selftests/ptrace/Makefile
@@ -1,5 +1,5 @@
 CFLAGS += -iquote../../../../include/uapi -Wall
 
-TEST_GEN_PROGS := peeksiginfo
+TEST_GEN_PROGS := get_syscall_info peeksiginfo
 
 include ../lib.mk
diff --git a/tools/testing/selftests/ptrace/get_syscall_info.c b/tools/testing/selftests/ptrace/get_syscall_info.c
new file mode 100644
index 000000000000..28e972825b74
--- /dev/null
+++ b/tools/testing/selftests/ptrace/get_syscall_info.c
@@ -0,0 +1,271 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later
+ *
+ * Copyright (c) 2018 Dmitry V. Levin <ldv@altlinux.org>
+ * All rights reserved.
+ *
+ * Check whether PTRACE_GET_SYSCALL_INFO semantics implemented in the kernel
+ * matches userspace expectations.
+ */
+
+#include "../kselftest_harness.h"
+#include <err.h>
+#include <signal.h>
+#include <asm/unistd.h>
+#include "linux/ptrace.h"
+
+static int
+kill_tracee(pid_t pid)
+{
+	if (!pid)
+		return 0;
+
+	int saved_errno = errno;
+
+	int rc = kill(pid, SIGKILL);
+
+	errno = saved_errno;
+	return rc;
+}
+
+static long
+sys_ptrace(int request, pid_t pid, unsigned long addr, unsigned long data)
+{
+	return syscall(__NR_ptrace, request, pid, addr, data);
+}
+
+#define LOG_KILL_TRACEE(fmt, ...)				\
+	do {							\
+		kill_tracee(pid);				\
+		TH_LOG("wait #%d: " fmt,			\
+		       ptrace_stop, ##__VA_ARGS__);		\
+	} while (0)
+
+TEST(get_syscall_info)
+{
+	static const unsigned long args[][7] = {
+		/* a sequence of architecture-agnostic syscalls */
+		{
+			__NR_chdir,
+			(unsigned long) "",
+			0xbad1fed1,
+			0xbad2fed2,
+			0xbad3fed3,
+			0xbad4fed4,
+			0xbad5fed5
+		},
+		{
+			__NR_gettid,
+			0xcaf0bea0,
+			0xcaf1bea1,
+			0xcaf2bea2,
+			0xcaf3bea3,
+			0xcaf4bea4,
+			0xcaf5bea5
+		},
+		{
+			__NR_exit_group,
+			0,
+			0xfac1c0d1,
+			0xfac2c0d2,
+			0xfac3c0d3,
+			0xfac4c0d4,
+			0xfac5c0d5
+		}
+	};
+	const unsigned long *exp_args;
+
+	pid_t pid = fork();
+
+	ASSERT_LE(0, pid) {
+		TH_LOG("fork: %m");
+	}
+
+	if (pid == 0) {
+		/* get the pid before PTRACE_TRACEME */
+		pid = getpid();
+		ASSERT_EQ(0, sys_ptrace(PTRACE_TRACEME, 0, 0, 0)) {
+			TH_LOG("PTRACE_TRACEME: %m");
+		}
+		ASSERT_EQ(0, kill(pid, SIGSTOP)) {
+			/* cannot happen */
+			TH_LOG("kill SIGSTOP: %m");
+		}
+		for (unsigned int i = 0; i < ARRAY_SIZE(args); ++i) {
+			syscall(args[i][0],
+				args[i][1], args[i][2], args[i][3],
+				args[i][4], args[i][5], args[i][6]);
+		}
+		/* unreachable */
+		_exit(1);
+	}
+
+	const struct {
+		unsigned int is_error;
+		int rval;
+	} *exp_param, exit_param[] = {
+		{ 1, -ENOENT },	/* chdir */
+		{ 0, pid }	/* gettid */
+	};
+
+	unsigned int ptrace_stop;
+
+	for (ptrace_stop = 0; ; ++ptrace_stop) {
+		struct ptrace_syscall_info info = {
+			.op = 0xff	/* invalid PTRACE_SYSCALL_INFO_* op */
+		};
+		const size_t size = sizeof(info);
+		const int expected_none_size =
+			(void *) &info.entry - (void *) &info;
+		const int expected_entry_size =
+			(void *) &info.entry.args[6] - (void *) &info;
+		const int expected_exit_size =
+			(void *) (&info.exit.is_error + 1) -
+			(void *) &info;
+		int status;
+		long rc;
+
+		ASSERT_EQ(pid, wait(&status)) {
+			/* cannot happen */
+			LOG_KILL_TRACEE("wait: %m");
+		}
+		if (WIFEXITED(status)) {
+			pid = 0;	/* the tracee is no more */
+			ASSERT_EQ(0, WEXITSTATUS(status));
+			break;
+		}
+		ASSERT_FALSE(WIFSIGNALED(status)) {
+			pid = 0;	/* the tracee is no more */
+			LOG_KILL_TRACEE("unexpected signal %u",
+					WTERMSIG(status));
+		}
+		ASSERT_TRUE(WIFSTOPPED(status)) {
+			/* cannot happen */
+			LOG_KILL_TRACEE("unexpected wait status %#x", status);
+		}
+
+		switch (WSTOPSIG(status)) {
+		case SIGSTOP:
+			ASSERT_EQ(0, ptrace_stop) {
+				LOG_KILL_TRACEE("unexpected signal stop");
+			}
+			ASSERT_EQ(0, sys_ptrace(PTRACE_SETOPTIONS, pid, 0,
+						PTRACE_O_TRACESYSGOOD)) {
+				LOG_KILL_TRACEE("PTRACE_SETOPTIONS: %m");
+			}
+			ASSERT_LT(0, (rc = sys_ptrace(PTRACE_GET_SYSCALL_INFO,
+						      pid, size,
+						      (unsigned long) &info))) {
+				LOG_KILL_TRACEE("PTRACE_GET_SYSCALL_INFO: %m");
+			}
+			ASSERT_EQ(expected_none_size, rc) {
+				LOG_KILL_TRACEE("signal stop mismatch");
+			}
+			ASSERT_EQ(PTRACE_SYSCALL_INFO_NONE, info.op) {
+				LOG_KILL_TRACEE("signal stop mismatch");
+			}
+			ASSERT_TRUE(info.arch) {
+				LOG_KILL_TRACEE("signal stop mismatch");
+			}
+			ASSERT_TRUE(info.instruction_pointer) {
+				LOG_KILL_TRACEE("signal stop mismatch");
+			}
+			ASSERT_TRUE(info.stack_pointer) {
+				LOG_KILL_TRACEE("signal stop mismatch");
+			}
+			break;
+
+		case SIGTRAP | 0x80:
+			ASSERT_LT(0, (rc = sys_ptrace(PTRACE_GET_SYSCALL_INFO,
+						      pid, size,
+						      (unsigned long) &info))) {
+				LOG_KILL_TRACEE("PTRACE_GET_SYSCALL_INFO: %m");
+			}
+			switch (ptrace_stop) {
+			case 1: /* entering chdir */
+			case 3: /* entering gettid */
+			case 5: /* entering exit_group */
+				exp_args = args[ptrace_stop / 2];
+				ASSERT_EQ(expected_entry_size, rc) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(PTRACE_SYSCALL_INFO_ENTRY, info.op) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_TRUE(info.arch) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_TRUE(info.instruction_pointer) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_TRUE(info.stack_pointer) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[0], info.entry.nr) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[1], info.entry.args[0]) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[2], info.entry.args[1]) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[3], info.entry.args[2]) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[4], info.entry.args[3]) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[5], info.entry.args[4]) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				ASSERT_EQ(exp_args[6], info.entry.args[5]) {
+					LOG_KILL_TRACEE("entry stop mismatch");
+				}
+				break;
+			case 2: /* exiting chdir */
+			case 4: /* exiting gettid */
+				exp_param = &exit_param[ptrace_stop / 2 - 1];
+				ASSERT_EQ(expected_exit_size, rc) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				ASSERT_EQ(PTRACE_SYSCALL_INFO_EXIT, info.op) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				ASSERT_TRUE(info.arch) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				ASSERT_TRUE(info.instruction_pointer) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				ASSERT_TRUE(info.stack_pointer) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				ASSERT_EQ(exp_param->is_error,
+					  info.exit.is_error) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				ASSERT_EQ(exp_param->rval, info.exit.rval) {
+					LOG_KILL_TRACEE("exit stop mismatch");
+				}
+				break;
+			default:
+				LOG_KILL_TRACEE("unexpected syscall stop");
+				abort();
+			}
+			break;
+
+		default:
+			LOG_KILL_TRACEE("unexpected stop signal %#x",
+					WSTOPSIG(status));
+			abort();
+		}
+
+		ASSERT_EQ(0, sys_ptrace(PTRACE_SYSCALL, pid, 0, 0)) {
+			LOG_KILL_TRACEE("PTRACE_SYSCALL: %m");
+		}
+	}
+
+	ASSERT_EQ(ARRAY_SIZE(args) * 2, ptrace_stop);
+}
+
+TEST_HARNESS_MAIN
-- 
ldv
