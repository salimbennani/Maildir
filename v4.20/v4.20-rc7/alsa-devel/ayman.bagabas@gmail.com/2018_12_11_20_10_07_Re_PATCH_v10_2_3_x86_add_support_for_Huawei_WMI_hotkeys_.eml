Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:55:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 237FE580380;
	Tue, 11 Dec 2018 12:10:20 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 12:10:19 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXPI90B9qEhJrvP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+IWIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRmRPQ8ZfWTJPDIy+?=
 =?us-ascii?q?YYsAE+QOMulXoYnmv1sDrwCzBRWuCe711jNEmmX70K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?vOrNT1Mb0dUeavwKbT1zrDYOlZ1izn54jTaR0hrvSMUqhxccrV00UgCwTFjlCW?=
 =?us-ascii?q?pIf4PD2VzvwAv3aH4+dkT+6jlmAqpx9rrjSyxcoglpPFi4MXx1zc6yl0wZo5Kc?=
 =?us-ascii?q?C9RUN/fdKoDp5duD2EO4dqXs8vRmBltSYnxrEYvJO0ZigHxIg8yBPaZfyIb4iF?=
 =?us-ascii?q?7Q/mWeufIDp0mH1odbeiiBu28EWty+vxXdSu3llQtCpKiNzMu2gN1xPN7siHTe?=
 =?us-ascii?q?Nw/lmu2TmRzQDf8OJELl4ulardNZEhxqQ8lp0JsUTMBiP2mUP2g7GKdkg85OSk?=
 =?us-ascii?q?9+Dqbq/7qpKSKYN4kBzyP6cylsClAOk1MBACX22B9uS90L3j81f5QLJPjvAulq?=
 =?us-ascii?q?nZsZbaJdkUp6KgAA9azJwj6xChADeiydgYmncGLFRbdxKdlIXpJV7OL+7iDful?=
 =?us-ascii?q?gFSjji1rx/bYMb3lGJnNKWLDkLj5cbZn90Fc0BYzzcxY559MDrEBIfHzVVHruN?=
 =?us-ascii?q?3XEx80KAi0w+fhCNVg2YISQ2OPAqmFMKzMtV+E/P4gI+6JZIUNojbyN+Al5+Ly?=
 =?us-ascii?q?jX8+gVIdfbOm3ZoLaH+iGfRqOUWZYWf2jdcHHmcHpQ4+TO3siF2fXj9ffXeyX6?=
 =?us-ascii?q?Qg5j4lDIKqF5vMRoeogLaZxie0AoVWZnxaClCLCXrodYKEVOkWZCKRJc9hlDoE?=
 =?us-ascii?q?Vb+6Ro8l1BGushL6yrV9IurV/C0YqYzs1Nxv6+LPkhEy8CR+D96B3GGVU2F0gm?=
 =?us-ascii?q?QISics06BkoUx9zVSD3bJig/NCF9xe/PdJUgY8NZ7BwO12EdHyWgTdftiXTFaq?=
 =?us-ascii?q?WMmpATY0Ttgp2d8Bf159G8m+jhDExyeqAKUal7qRCJww86LTxX7xJ8lmxnbC1a?=
 =?us-ascii?q?khiUQmQ8RVOW2ngK5/6xbcB4rTn0qFkKaqcLwW3DTR+2eb0WqOoEZYXRZtXqrf?=
 =?us-ascii?q?Q3AQeFHardTj6UPEVL+hF7InPgxFyc6BL6tKbsbkjVFHRPflJdTfbHi9m2a2BR?=
 =?us-ascii?q?aU2LyMaJDmdHka3CXYEEIEiRwc/W6aNQgiASesu3/RAyZwFV3xeU/s8fNxqHWg?=
 =?us-ascii?q?TkAqyQGHdElh17uz+h4Iiv2QUfIT3rQYuCg/rzV4Bkqy39XTC9CYvQpuYL1cYc?=
 =?us-ascii?q?8h4FdAzW/Zqw19PpmnL6B+hl4fcx57v1/02xVwEIVAlckqrHUlzAdpLaKY0VVB?=
 =?us-ascii?q?dy6X3JzqO73XLHXy8w6ra6LMxl7e19OW8L8V6Psks1XjoB2pFk06/np919lazX?=
 =?us-ascii?q?Sd6YvKDQYISp3xT1s4+AJ8p7HZZSk9+ZjZ1XltMamyrz/D1MglBOojyha8Ydhf?=
 =?us-ascii?q?NLmIGxP1E80fH8KuMvAlm0C1bhIYO+Bf7K41P968e/SawqKqPeZgkyigjWRI+4?=
 =?us-ascii?q?191kOM9yxhSu/HxZoFwveY3heZWDf4lluursf3mYVcbzEIAmW/0TTkBJJWZqBq?=
 =?us-ascii?q?Z4YLCHuhLNetxtpjgJ7hQXhY+0C5B1MHwcOmZQCdb1jg0gJOz0QXpnqnlDC8zz?=
 =?us-ascii?q?x1lTEps6We0DbPw+TkaBoIJGpLSHN+glfrJIi+l8oaU1Swbwg1iBul4l73xqha?=
 =?us-ascii?q?pKhlL2jfW1xIfzXwL2x5Vquwt7yCY9NA6Z8ysCVXVvi8bk6eSrLnvxQa1CbjFX?=
 =?us-ascii?q?NExD8nbzGqpon5nxtihWKfNnlztnnZecJ3xRvF/9zTX/1R3jkHRCl+lzbXAEOx?=
 =?us-ascii?q?P92o/dWSipfCvfqyV2OnVp1PbybryZmMuze85W1vGRe/hey8msX7EQgm1i/2z9?=
 =?us-ascii?q?lrWj/PrBrmYInr1qK6PPljfklpAl/89sV7Fpt/kos2mJEfx3waio+J8noAlGf5?=
 =?us-ascii?q?Kc9b1r7mbHoRWT4LxMbY4Av/101iNH6Jx5/5WW+bwstufNS6ZmIW2iQg78FFEq?=
 =?us-ascii?q?uU7bpEnTdrrVq8tw7eff99njIFw/s09HEam/0JuBYqziiFB7ASHEpYMjb2mxWG?=
 =?us-ascii?q?8d++t7lXa3i1cberykV+h9+hAaqGogFdXnb5Z5gjETVx7sV5LFLDznnz5pv4d9?=
 =?us-ascii?q?nXaNIZrgeUnAvYj+hJNJIxkeIHhTZgOWL4p3EkyvQ0jRpz3ZGhp4iHKn5g/Ka4?=
 =?us-ascii?q?Ah5eKz30aNkf+jDrjaZCgMmW25qjEYlmGjUORJHoV+6nECoOtfT7MAaDCCYzpW?=
 =?us-ascii?q?2cGbrbAA+T8kNmr2/UHpCvNnGXImQZzNp4SBmcIkxfnB4bXDEgkpElEQCqwdTr?=
 =?us-ascii?q?cF1l6TAJ+l74thxMx/pqNxblV2fQuhyoZi0oSJSFLxpW8wJC51rTMcOE9eJ+BC?=
 =?us-ascii?q?VY/pynrAyQJW2XfQVIDWcVWkOaA1DvJKWh5d7F8+KAHOqxM+POYamSqexZT/qJ?=
 =?us-ascii?q?xZWv0pZ//zaRLMqPOGNuD+Y82kpFUnB0AMDZmzQJSywKmCPBdc+bpBGg+iJpqs?=
 =?us-ascii?q?Cz6ujkWAXq5YGXEbtdLc1v+wyqgaeEL+OQhDh2KTdb1pMPxH/E0rsf3EQViyFh?=
 =?us-ascii?q?aTatC6kAtTXWQaLUm69XCQMbaixpOMtJ6aI8whdCOcrBhtzp0b54i+Y/C01ZWl?=
 =?us-ascii?q?z5hsGpecsKLnmnO1PaH0mLLqqJJD3Rz8HzYKOxUrlQjORStx2ttjeXCU7jPjKf?=
 =?us-ascii?q?lzb3UxCjK/1DjCaePBZGooGybg5tCXT/TNLhchC7LN53jTgszbIonH/FKW4cPi?=
 =?us-ascii?q?Z6c05Wqr2Q7CVYguhwGmBb73plK/WElDid7+XCNpkWtv5rCDxul+1G+HQ616dV?=
 =?us-ascii?q?7CZcSf11giTSqNtuo1CgkuaXyztnUABBqjBEhI+QuUViOKPZ9oRPWHre/RIN63?=
 =?us-ascii?q?mQBAoOp9d/FtLvvKVQmZDzk/faLjtTu+nU8NUXB8XSK8XPZHMnPQuvAz7ZEgAF?=
 =?us-ascii?q?QDioMknQgkVclLeZ8XjD/bYgrZ25kYsLQ7kdXlU6H/kTEWxqGdUDJNF8WTZ3wv?=
 =?us-ascii?q?agkMcU6C/m/1HqT8JAs8WCD6rKDA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAADYGBBch0O0hNFlGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTAqgQ+BAhQTg3uDe4QejBGCDRRollYUgWI?=
 =?us-ascii?q?PAQEYAxABhECCbiI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBA?=
 =?us-ascii?q?iAEGQEbHQEDAgkBAQUFCw0CAiYCAgMeAhEBBQEcBhMFFoI7SwGBaAEDFQEEmj0?=
 =?us-ascii?q?8iw18FgUBF4J3BYJFgXwKGScNXROBJAIGEnmIbIEogRyCFoERgl01gleBbzuDB?=
 =?us-ascii?q?IJXAok3gXSEFEY3kBEuBwKHCYcZgy8YgimHPYdajySJaAYCCQcPIYElgg5wgQG?=
 =?us-ascii?q?COwmCEgwXg0qEUYYgIjJ5DAEBFQyKQgEB?=
X-IPAS-Result: =?us-ascii?q?A0AGAADYGBBch0O0hNFlGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTAqgQ+BAhQTg3uDe4QejBGCDRRollYUgWIPAQEYAxABhECCb?=
 =?us-ascii?q?iI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiAEGQEbHQEDAgk?=
 =?us-ascii?q?BAQUFCw0CAiYCAgMeAhEBBQEcBhMFFoI7SwGBaAEDFQEEmj08iw18FgUBF4J3B?=
 =?us-ascii?q?YJFgXwKGScNXROBJAIGEnmIbIEogRyCFoERgl01gleBbzuDBIJXAok3gXSEFEY?=
 =?us-ascii?q?3kBEuBwKHCYcZgy8YgimHPYdajySJaAYCCQcPIYElgg5wgQGCOwmCEgwXg0qEU?=
 =?us-ascii?q?YYgIjJ5DAEBFQyKQgEB?=
X-IronPort-AV: E=Sophos;i="5.56,343,1539673200"; 
   d="scan'208";a="55486454"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 12:10:18 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726305AbeLKUKQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 15:10:16 -0500
Received: from mail-vs1-f66.google.com ([209.85.217.66]:35290 "EHLO
        mail-vs1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726134AbeLKUKN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 15:10:13 -0500
Received: by mail-vs1-f66.google.com with SMTP id e7so9678097vsc.2;
        Tue, 11 Dec 2018 12:10:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=message-id:subject:from:to:cc:date:in-reply-to:references
         :user-agent:mime-version:content-transfer-encoding;
        bh=BnF31uVlleUd/QqohHcS7FV9jClDWuHYsgpB7w12Yvs=;
        b=N7T5FsE11V49kC6h4/WGI85oODkVstVFmcPhfI6RAR9nmCA/p+Ya41g/l83jHZIIkN
         uSE64byU08YdMX1BACJJNX94rK2EOidpkPDpJ8nV1xlphDhmpxAmMHfWvdTCie/WjHIq
         JT2ZUKAy7of+H1nQRQBcGPV7079eKh019krPOZ2NdOt90pe7AIaCjAgDGRReSc2NYGgC
         S+CMJugQeewMRrbq/nIGyAC/qKwoegRkXjo4JL5cpPUVxBy3fTBkVe6mDlDGl/ygU4Vb
         UYvbWf4OK64DgbMPQn76AoglO7BjP5V1iCnZK8xmNviU8zQo28jQGNqUXzhlJ/Z9psNr
         yNmQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:user-agent:mime-version:content-transfer-encoding;
        bh=BnF31uVlleUd/QqohHcS7FV9jClDWuHYsgpB7w12Yvs=;
        b=SOnZtHL6XpmYq/4qZwFm6gkKUT8d1vilwf6RQau9pWetup/tWy2S8Y5HVF2tajmgeJ
         PsvXYmOkrf/TR3w+SXohp/79U2G/LECX9zuzEmv1MawTAR9eUZc/Bq73wMJpf9g74clh
         ZWA2+Gh796sKzxi5g7IUH6Yrqp7Rvg+iT8dj+NdPPKTOR1qWrj9RCir87/v0g6z2lr/w
         /GOW99V7fHKku5Oxl6xqFwHZkRKZqV4O4o2lUhQPL/hy3GUVJszLcamrqKvGEKOp67fj
         969Bk4fCp6kxg5Pef4/9iRDJQXsHD8slWehQvFAf3OIQK5npfIOxokrubweA0PwZ7k9n
         jWhg==
X-Gm-Message-State: AA+aEWYmw456tD/TaFecGC5sGyptry8OJ4PHrobXNFWqpUjs6HA39NC2
        R5kp1Z3Jd99F9Hh63GSOlQ==
X-Google-Smtp-Source: AFSGD/XosfMLEz0hAEl8xWHKTs17ngyFxk2iBn9P2zlw4RIEaULgUMIpRNIoxI3E1tJjjiQ5qiNtjw==
X-Received: by 2002:a67:3759:: with SMTP id e86mr7747863vsa.69.1544559011156;
        Tue, 11 Dec 2018 12:10:11 -0800 (PST)
Received: from 960 ([2601:902:c200:6512:a50b:fc5d:3604:d966])
        by smtp.gmail.com with ESMTPSA id m89sm9588536vsh.22.2018.12.11.12.10.09
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 11 Dec 2018 12:10:10 -0800 (PST)
Message-ID: <757a7ce6ae8ea5f040fb7bb1bdf9768799d82a11.camel@gmail.com>
Subject: Re: [PATCH v10 2/3] x86: add support for Huawei WMI hotkeys.
From: ayman.bagabas@gmail.com
To: Andy Shevchenko <andy.shevchenko@gmail.com>
Cc: Darren Hart <dvhart@infradead.org>,
        Andy Shevchenko <andy@infradead.org>,
        Jaroslav Kysela <perex@perex.cz>,
        Takashi Iwai <tiwai@suse.com>,
        Kailang Yang <kailang@realtek.com>,
        Hui Wang <hui.wang@canonical.com>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Platform Driver <platform-driver-x86@vger.kernel.org>,
        ALSA Development Mailing List <alsa-devel@alsa-project.org>
Date: Tue, 11 Dec 2018 15:10:07 -0500
In-Reply-To: <CAHp75VcNstKd3JW-D8QSQWez-TxrwsKrkA-a1D11kZW72fSqfw@mail.gmail.com>
References: <20181211060125.28671-1-ayman.bagabas@gmail.com>
         <20181211060125.28671-3-ayman.bagabas@gmail.com>
         <CAHp75VcNstKd3JW-D8QSQWez-TxrwsKrkA-a1D11kZW72fSqfw@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.2 (3.30.2-2.fc29) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 2018-12-11 at 12:14 +0200, Andy Shevchenko wrote:
> On Tue, Dec 11, 2018 at 8:02 AM Ayman Bagabas <
> ayman.bagabas@gmail.com> wrote:
> > This driver adds support for missing hotkeys on some Huawei
> > laptops.
> > Laptops such as the Matebook X have non functioning hotkeys.
> > Whereas
> > newer laptops such as the Matebook X Pro come with working hotkeys
> > out
> > of the box.
> > 
> > Old laptops, such as the Matebook X, report hotkey events through
> > ACPI
> > device "\WMI0". However, new laptops, such as the Matebook X Pro,
> > does not have this WMI device.
> > 
> > All the hotkeys on the Matebook X Pro work fine
> > without this patch except (micmute, wlan, and huawei key). These
> > keys
> > and the brightness keys report events to "\AMW0" ACPI device. One
> > problem is that brightness keys on the Matebook X Pro work without
> > this
> > patch. This results in reporting two brightness key press
> > events one is captured by ACPI and another by this driver.
> > 
> > A solution would be to check if such event came from the "\AMW0"
> > WMI driver
> > then skip reporting event. Another solution would be to leave this
> > to
> > user-space to handle. Which can be achieved by using "hwdb" tables
> > and
> > remap those keys to "unknown". This solution seems more natural to
> > me
> > because it leaves the decision to user-space.
> > 
> > Reviewed-by: Takashi Iwai <tiwai@suse.de>
> > Signed-off-by: Ayman Bagabas <ayman.bagabas@gmail.com>
> > ---
> >  drivers/platform/x86/Kconfig      |  17 +++
> >  drivers/platform/x86/Makefile     |   1 +
> >  drivers/platform/x86/huawei-wmi.c | 220
> > ++++++++++++++++++++++++++++++
> >  3 files changed, 238 insertions(+)
> >  create mode 100644 drivers/platform/x86/huawei-wmi.c
> > 
> > diff --git a/drivers/platform/x86/Kconfig
> > b/drivers/platform/x86/Kconfig
> > index 87f70e8f4dd0..45ef4d22f14c 100644
> > --- a/drivers/platform/x86/Kconfig
> > +++ b/drivers/platform/x86/Kconfig
> > @@ -1292,6 +1292,23 @@ config INTEL_ATOMISP2_PM
> >           To compile this driver as a module, choose M here: the
> > module
> >           will be called intel_atomisp2_pm.
> > 
> > +config HUAWEI_WMI
> > +       tristate "Huawei WMI hotkeys driver"
> > +       depends on ACPI_WMI
> > +       depends on INPUT
> > +       select INPUT_SPARSEKMAP
> > +       select LEDS_CLASS
> > +       select LEDS_TRIGGERS
> > +       select LEDS_TRIGGER_AUDIO
> > +       select NEW_LEDS
> > +       help
> > +         This driver provides support for Huawei WMI hotkeys.
> > +         It enables the missing keys and adds support to the
> > micmute
> > +         LED found on some of these laptops.
> > +
> > +         To compile this driver as a module, choose M here: the
> > module
> > +         will be called huawei-wmi.
> > +
> >  endif # X86_PLATFORM_DEVICES
> > 
> >  config PMC_ATOM
> > diff --git a/drivers/platform/x86/Makefile
> > b/drivers/platform/x86/Makefile
> > index 39ae94135406..d841c550e3cc 100644
> > --- a/drivers/platform/x86/Makefile
> > +++ b/drivers/platform/x86/Makefile
> > @@ -32,6 +32,7 @@ obj-$(CONFIG_ACERHDF)         += acerhdf.o
> >  obj-$(CONFIG_HP_ACCEL)         += hp_accel.o
> >  obj-$(CONFIG_HP_WIRELESS)      += hp-wireless.o
> >  obj-$(CONFIG_HP_WMI)           += hp-wmi.o
> > +obj-$(CONFIG_HUAWEI_WMI)               += huawei-wmi.o
> >  obj-$(CONFIG_AMILO_RFKILL)     += amilo-rfkill.o
> >  obj-$(CONFIG_GPD_POCKET_FAN)   += gpd-pocket-fan.o
> >  obj-$(CONFIG_TC1100_WMI)       += tc1100-wmi.o
> > diff --git a/drivers/platform/x86/huawei-wmi.c
> > b/drivers/platform/x86/huawei-wmi.c
> > new file mode 100644
> > index 000000000000..89ba7ea33499
> > --- /dev/null
> > +++ b/drivers/platform/x86/huawei-wmi.c
> > @@ -0,0 +1,220 @@
> > +// SPDX-License-Identifier: GPL-2.0
> > +/*
> > + *  Huawei WMI hotkeys
> > + *
> > + *  Copyright (C) 2018       Ayman Bagabas <
> > ayman.bagabas@gmail.com>
> > + */
> > +
> > +#include <linux/acpi.h>
> > +#include <linux/input.h>
> > +#include <linux/input/sparse-keymap.h>
> > +#include <linux/leds.h>
> > +#include <linux/module.h>
> > +#include <linux/wmi.h>
> > +
> > +/*
> > + * Huawei WMI GUIDs
> > + */
> > +#define WMI0_EVENT_GUID "59142400-C6A3-40fa-BADB-8A2652834100"
> > +#define AMW0_EVENT_GUID "ABBC0F5C-8EA1-11D1-A000-C90629100000"
> > +
> > +#define WMI0_EXPENSIVE_GUID "39142400-C6A3-40fa-BADB-8A2652834100"
> > +
> > +struct huawei_wmi_priv {
> > +       struct input_dev *idev;
> > +       struct led_classdev cdev;
> > +       acpi_handle handle;
> > +       char *acpi_method;
> > +};
> > +
> > +static const struct key_entry huawei_wmi_keymap[] = {
> > +       { KE_KEY,    0x281, { KEY_BRIGHTNESSDOWN } },
> > +       { KE_KEY,    0x282, { KEY_BRIGHTNESSUP } },
> > +       { KE_KEY,    0x284, { KEY_MUTE } },
> > +       { KE_KEY,    0x285, { KEY_VOLUMEDOWN } },
> > +       { KE_KEY,    0x286, { KEY_VOLUMEUP } },
> > +       { KE_KEY,    0x287, { KEY_MICMUTE } },
> > +       { KE_KEY,    0x289, { KEY_WLAN } },
> > +       // Huawei |M| key
> > +       { KE_KEY,    0x28a, { KEY_CONFIG } },
> > +       // Keyboard backlight
> > +       { KE_IGNORE, 0x293, { KEY_KBDILLUMTOGGLE } },
> > +       { KE_IGNORE, 0x294, { KEY_KBDILLUMUP } },
> > +       { KE_IGNORE, 0x295, { KEY_KBDILLUMUP } },
> > +       { KE_END,        0 }
> > +};
> > +
> > +static int huawei_wmi_micmute_led_set(struct led_classdev
> > *led_cdev,
> > +               enum led_brightness brightness)
> > +{
> > +       struct huawei_wmi_priv *priv = dev_get_drvdata(led_cdev-
> > >dev->parent);
> > +       acpi_status status;
> > +       union acpi_object args[3];
> > +       struct acpi_object_list arg_list = {
> > +               .pointer = args,
> > +               .count = ARRAY_SIZE(args),
> > +       };
> > +
> > +       args[0].type = args[1].type = args[2].type =
> > ACPI_TYPE_INTEGER;
> > +       args[1].integer.value = 0x04;
> > +
> > +       if (strcmp(priv->acpi_method, "SPIN") == 0) {
> > +               args[0].integer.value = 0;
> > +               args[2].integer.value = brightness ? 1 : 0;
> > +       } else if (strcmp(priv->acpi_method, "WPIN") == 0) {
> > +               args[0].integer.value = 1;
> > +               args[2].integer.value = brightness ? 0 : 1;
> > +       } else {
> > +               return -EINVAL;
> > +       }
> > +
> > +       status = acpi_evaluate_object(priv->handle, priv-
> > >acpi_method, &arg_list, NULL);
> > +       if (ACPI_FAILURE(status))
> > +               return -ENXIO;
> > +
> > +       return 0;
> > +}
> > +
> > +static int huawei_wmi_leds_setup(struct wmi_device *wdev)
> > +{
> > +       struct huawei_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
> > +       acpi_status status;
> > +
> > +       /* Skip registering LED subsystem if no ACPI method was
> > found.
> > +        * ec_get_handle() returns the first embedded controller
> > device
> > +        * handle which then used to locate SPIN and WPIN methods.
> > +        */
> 
> Comment style is cripple here.
> All issues we may fix when applying.
> 
> > +       priv->handle = ec_get_handle();
> > +       if (!priv->handle)
> > +               return 0;
> > +
> > +       if (acpi_has_method(priv->handle, "SPIN"))
> > +               priv->acpi_method = "SPIN";
> > +       else if (acpi_has_method(priv->handle, "WPIN"))
> > +               priv->acpi_method = "WPIN";
> > +       else
> > +               return 0;
> > +
> > +       priv->cdev.name = "platform::micmute";
> > +       priv->cdev.max_brightness = 1;
> > +       priv->cdev.brightness_set_blocking =
> > huawei_wmi_micmute_led_set;
> > +       priv->cdev.default_trigger = "audio-micmute";
> > +       priv->cdev.brightness =
> > ledtrig_audio_get(LED_AUDIO_MICMUTE);
> > +       priv->cdev.dev = &wdev->dev;
> > +       priv->cdev.flags = LED_CORE_SUSPENDRESUME;
> > +
> > +       return devm_led_classdev_register(&wdev->dev, &priv->cdev);
> > +}
> > +
> > +static void huawei_wmi_process_key(struct wmi_device *wdev, int
> > code)
> > +{
> > +       struct huawei_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
> > +       const struct key_entry *key;
> > +
> > +       /*
> > +        * WMI0 uses code 0x80 to indicate a hotkey event.
> > +        * The actual key is fetched from the method WQ00
> > +        * using WMI0_EXPENSIVE_GUID.
> > +        */
> > +       if (code == 0x80) {
> > +               struct acpi_buffer response = {
> > ACPI_ALLOCATE_BUFFER, NULL };
> > +               union acpi_object *obj;
> > +               acpi_status status;
> > +
> > +               status = wmi_query_block(WMI0_EXPENSIVE_GUID, 0,
> > &response);
> > +               if (ACPI_FAILURE(status))
> > +                       return;
> > +
> > +               obj = (union acpi_object *)response.pointer;
> > +               if (obj && obj->type == ACPI_TYPE_INTEGER)
> > +                       code = obj->integer.value;
> > +
> > +               kfree(response.pointer);
> > +       }
> > +
> > +       key = sparse_keymap_entry_from_scancode(priv->idev, code);
> > +       if (!key) {
> > +               dev_info(&wdev->dev, "Unknown key pressed, code:
> > 0x%04x\n", code);
> > +               return;
> > +       }
> > +
> > +       sparse_keymap_report_entry(priv->idev, key, 1, true);
> > +}
> > +
> > +static void huawei_wmi_notify(struct wmi_device *wdev,
> > +               union acpi_object *obj)
> > +{
> > +       if (obj->type == ACPI_TYPE_INTEGER)
> > +               huawei_wmi_process_key(wdev, obj->integer.value);
> > +       else
> > +               dev_info(&wdev->dev, "Bad response type %d\n", obj-
> > >type);
> > +}
> > +
> > +static int huawei_wmi_input_setup(struct wmi_device *wdev)
> > +{
> > +       struct huawei_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
> > +       int err;
> > +
> > +       priv->idev = devm_input_allocate_device(&wdev->dev);
> > +       if (!priv->idev)
> > +               return -ENOMEM;
> > +
> > +       priv->idev->name = "Huawei WMI hotkeys";
> > +       priv->idev->phys = "wmi/input0";
> > +       priv->idev->id.bustype = BUS_HOST;
> > +       priv->idev->dev.parent = &wdev->dev;
> > +
> > +       err = sparse_keymap_setup(priv->idev, huawei_wmi_keymap,
> > NULL);
> > +       if (err)
> > +               return err;
> > +
> > +       err = input_register_device(priv->idev);
> > +       if (err)
> > +               return err;
> > +
> > +       return 0;
> 
> return input_register_device(...);
> 
> > +}
> > +
> > +static int huawei_wmi_probe(struct wmi_device *wdev)
> > +{
> > +       struct huawei_wmi_priv *priv;
> > +       int err;
> > +
> > +       priv = devm_kzalloc(&wdev->dev, sizeof(struct
> > huawei_wmi_priv), GFP_KERNEL);
> > +       if (!priv)
> > +               return -ENOMEM;
> 
> + blank line.
> 
> > +       dev_set_drvdata(&wdev->dev, priv);
> > +
> > +       err = huawei_wmi_input_setup(wdev);
> > +       if (err)
> > +               return err;
> > +
> > +       err = huawei_wmi_leds_setup(wdev);
> > +       if (err)
> > +               return err;
> > +
> > +       return 0;
> 
> return huawei_wmi_leds_setup(...);
> 
> > +}
> > +
> > +static const struct wmi_device_id huawei_wmi_id_table[] = {
> > +       { .guid_string = WMI0_EVENT_GUID },
> > +       { .guid_string = AMW0_EVENT_GUID },
> > +       {  }
> > +};
> > +
> > +static struct wmi_driver huawei_wmi_driver = {
> > +       .driver = {
> > +               .name = "huawei-wmi",
> > +       },
> > +       .id_table = huawei_wmi_id_table,
> > +       .probe = huawei_wmi_probe,
> > +       .notify = huawei_wmi_notify,
> > +};
> > +
> > +module_wmi_driver(huawei_wmi_driver);
> > +
> > +MODULE_ALIAS("wmi:"WMI0_EVENT_GUID);
> > +MODULE_ALIAS("wmi:"AMW0_EVENT_GUID);
> > +MODULE_AUTHOR("Ayman Bagabas <ayman.bagabas@gmail.com>");
> > +MODULE_DESCRIPTION("Huawei WMI hotkeys");
> > +MODULE_LICENSE("GPL v2");
> > --
> > 2.19.2
> > 
> 
> 

Do I need to resubmit?

