Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  16 Dec 2018 10:42:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BF7835805F0
	for <like.xu@linux.intel.com>; Sat, 15 Dec 2018 07:46:42 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Dec 2018 07:46:42 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A3deIHBIoYmFYPQDgsdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKvX7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvdxeb7Tfc4BRWpZQMleSzBBDI27?=
 =?us-ascii?q?b4sKFeUBPOBYpJT5q1YBqRayAA+hD/7txDBVnH/7xaM03eQ/Hw/F0gwvEM4Bv2?=
 =?us-ascii?q?nWo9r7KakSSeK4wqvHwDneYf5axSny6JPTfxA9vf2BR658fdbLxEUxEQ7Ok1We?=
 =?us-ascii?q?qZbiPzOQzukBvXSV7+t8WuKvkWEnsRx+qSWvycs2jYfFnJ8exFTD9SV/3ok1Pt?=
 =?us-ascii?q?O0Q1N8bN6+EptQsCeaOJVtQs45WWFnpjs1yr0ctp6nZiQF1JMnxxvGZvGBboOG?=
 =?us-ascii?q?7BXjVOOLLjd5gnJoYKi/iAiv/kig0OL8StO430pNripAitXNuHcN1wbO5cifUP?=
 =?us-ascii?q?ty4Fyh2S2V2w/P7eFEJEY5nrfYJZ452rM8iIYfvEfZEiPrhUn7j7Waelsq9+Wo?=
 =?us-ascii?q?8ejrf7frqoeCO4NojgzyKLkil8KhDegiLwQDXGaW9f6i2LDg+0DyXa9Egecskq?=
 =?us-ascii?q?bDtZDXPcQbqbC9Aw9Syosj7xe/Dyy60NQDh3UHI1RFeA+dg4juIVHOL+j0Dfa5?=
 =?us-ascii?q?g1uyjDdm3+7KMqHiD5nXM3TPjbTscaxj50NSyAc/181T6pBMBrEEOv3zW0vxtN?=
 =?us-ascii?q?LCDh8+Ngy52//nB8t41oMDQG6AH7GWML3Mvl+M/+4gOO6MZJITuDnhNfcl/Pni?=
 =?us-ascii?q?jXs4mV8eY6alx5QWaG2gE/RiIkWZZ2fsg9gbHWcLuAo+UPLliFmYXTFPYHayWr?=
 =?us-ascii?q?kx5jc8CIKgAofDQJ2tjKaG3CehEZ1afnpGBUyUEXf0a4WEXO8BaCaTIs9ijDMI?=
 =?us-ascii?q?T7egS5I62BGqtQ/6zadnL+XO9i0Zs5LjyMZ65+nJmR4u8jx0CpfV7meWUmshnn?=
 =?us-ascii?q?8UXyRkm+d7oFdh0RGF1q53heEeEsZcoPZAUwM/PJibyPRmCtf0QUXYc9KUDVqr?=
 =?us-ascii?q?XNiiUgw3Vc87ltoHYkJhHIe7gxXemianHbIR0qaGHYE56b702X/3KMBgjXHc2/?=
 =?us-ascii?q?46klMkT8BTYHCgnbN17APJBoTEwHmewouwdK9U9irE92rLmWeEuEhbXSZqXKnF?=
 =?us-ascii?q?VGxZbUzT+4fX/ETHGvWUCL8nOxFNgfHED+0CSNrvgE4MDKP5OtPYbnmZgWq8BR?=
 =?us-ascii?q?+UgLiLady5KC0mwCzBBR1cwEgo9nGcOF17W36s?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAABgIRVchxHrdtBkFgMBAQEBAQEBA?=
 =?us-ascii?q?QEBAQEHAQEBAQEBgVMCAQEBAQELAQGBL4E5gRYTjHSLGYINkluEfYFzFBgLCYF?=
 =?us-ascii?q?LhXwiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4jDEIBDgGBZAUCAxoHglwBAgMBA?=
 =?us-ascii?q?iQTDAopAwMBAgYBAQoOCgkdCAMBCwUyFxMFgx0BggABBAqleDOFQIRtjD4RBoF?=
 =?us-ascii?q?AP4ERgxKCEIJbg0+CJgKJOAqGC4FPhGyLEQcCAocLikILGIFdTYdJN4coLIESg?=
 =?us-ascii?q?kiKLIJ3iDuBTQKCBXAVO4JsCYIeFxKDOIpTQTGBBxyBNYh1KymBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAABgIRVchxHrdtBkFgMBAQEBAQEBAQEBAQEHAQEBAQE?=
 =?us-ascii?q?BgVMCAQEBAQELAQGBL4E5gRYTjHSLGYINkluEfYFzFBgLCYFLhXwiNgcNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIGw4jDEIBDgGBZAUCAxoHglwBAgMBAiQTDAopAwMBAgY?=
 =?us-ascii?q?BAQoOCgkdCAMBCwUyFxMFgx0BggABBAqleDOFQIRtjD4RBoFAP4ERgxKCEIJbg?=
 =?us-ascii?q?0+CJgKJOAqGC4FPhGyLEQcCAocLikILGIFdTYdJN4coLIESgkiKLIJ3iDuBTQK?=
 =?us-ascii?q?CBXAVO4JsCYIeFxKDOIpTQTGBBxyBNYh1KymBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,357,1539673200"; 
   d="scan'208";a="57028343"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 15 Dec 2018 07:46:41 -0800
Received: from localhost ([::1]:39479 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYC9I-0006ZR-RR
	for like.xu@linux.intel.com; Sat, 15 Dec 2018 10:46:40 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:57079)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gYC7w-0005rQ-IE
	for qemu-devel@nongnu.org; Sat, 15 Dec 2018 10:45:18 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <rjones@redhat.com>) id 1gYBti-0001xy-JQ
	for qemu-devel@nongnu.org; Sat, 15 Dec 2018 10:30:35 -0500
Received: from mx1.redhat.com ([209.132.183.28]:56754)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <rjones@redhat.com>)
	id 1gYBtd-0001ps-0e; Sat, 15 Dec 2018 10:30:29 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id B1795C0495B3;
	Sat, 15 Dec 2018 15:30:25 +0000 (UTC)
Received: from localhost (ovpn-116-21.ams2.redhat.com [10.36.116.21])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 71EC25C1A1;
	Sat, 15 Dec 2018 15:30:22 +0000 (UTC)
Date: Sat, 15 Dec 2018 15:30:21 +0000
From: "Richard W.M. Jones" <rjones@redhat.com>
To: Eric Blake <eblake@redhat.com>
Message-ID: <20181215153021.GA27120@redhat.com>
References: <20181215135324.152629-1-eblake@redhat.com>
	<20181215135324.152629-15-eblake@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181215135324.152629-15-eblake@redhat.com>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Sat, 15 Dec 2018 15:30:25 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2 14/22] nbd/client: Split out
 nbd_receive_one_meta_context()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nsoffer@redhat.com, vsementsov@virtuozzo.com, jsnow@redhat.com,
	qemu-devel@nongnu.org, qemu-block@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Sat, Dec 15, 2018 at 07:53:16AM -0600, Eric Blake wrote:
> Refactor nbd_negotiate_simple_meta_context() to more closely
> resemble the pattern of nbd_receive_list(), separating the
> argument validation for one pass from the caller making a loop
> over passes. No major semantic change (although one error
> message loses the original query).  The diff may be a bit hard
> to follow due to indentation changes and handling ACK first
> rather than last.
> 
> Signed-off-by: Eric Blake <eblake@redhat.com>
> 
> ---
> v2: split patch into easier-to-review pieces [Rich, Vladimir]
> ---
>  nbd/client.c     | 144 +++++++++++++++++++++++++++--------------------
>  nbd/trace-events |   2 +-
>  2 files changed, 84 insertions(+), 62 deletions(-)
> 
> diff --git a/nbd/client.c b/nbd/client.c
> index 5b6b9964097..0e5a9d59dbd 100644
> --- a/nbd/client.c
> +++ b/nbd/client.c
> @@ -669,6 +669,83 @@ static int nbd_send_one_meta_context(QIOChannel *ioc,
>      return ret;
>  }
> 
> +/* nbd_receive_one_meta_context:
> + * Called in a loop to receive and trace one set/list meta context reply.
> + * Pass non-NULL @name or @id to collect results back to the caller, which
> + * must eventually call g_free().
> + * return 1 if more contexts are expected,
> + *        0 if operation is complete,
> + *        -1 with errp set for any error
> + */
> +static int nbd_receive_one_meta_context(QIOChannel *ioc,
> +                                        uint32_t opt,
> +                                        char **name,
> +                                        uint32_t *id,
> +                                        Error **errp)
> +{
> +    int ret;
> +    NBDOptionReply reply;
> +    char *local_name = NULL;
> +    uint32_t local_id;
> +
> +    if (nbd_receive_option_reply(ioc, opt, &reply, errp) < 0) {
> +        return -1;
> +    }
> +
> +    ret = nbd_handle_reply_err(ioc, &reply, errp);
> +    if (ret <= 0) {
> +        return ret;
> +    }
> +
> +    if (reply.type == NBD_REP_ACK) {
> +        if (reply.length != 0) {
> +            error_setg(errp, "Unexpected length to ACK response");
> +            nbd_send_opt_abort(ioc);
> +            return -1;
> +        }
> +        return 0;
> +    } else if (reply.type != NBD_REP_META_CONTEXT) {
> +        error_setg(errp, "Unexpected reply type %u (%s), expected %u (%s)",
> +                   reply.type, nbd_rep_lookup(reply.type),
> +                   NBD_REP_META_CONTEXT, nbd_rep_lookup(NBD_REP_META_CONTEXT));
> +        nbd_send_opt_abort(ioc);
> +        return -1;
> +    }
> +
> +    if (reply.length <= sizeof(local_id) ||
> +        reply.length > NBD_MAX_BUFFER_SIZE) {
> +        error_setg(errp, "Failed to negotiate meta context, server "
> +                   "answered with unexpected length %" PRIu32,
> +                   reply.length);
> +        nbd_send_opt_abort(ioc);
> +        return -1;
> +    }
> +
> +    if (nbd_read(ioc, &local_id, sizeof(local_id), errp) < 0) {
> +        return -1;
> +    }
> +    local_id = be32_to_cpu(local_id);
> +
> +    reply.length -= sizeof(local_id);
> +    local_name = g_malloc(reply.length + 1);
> +    if (nbd_read(ioc, local_name, reply.length, errp) < 0) {
> +        g_free(local_name);
> +        return -1;
> +    }
> +    local_name[reply.length] = '\0';
> +    trace_nbd_opt_meta_reply(nbd_opt_lookup(opt), local_name, local_id);
> +
> +    if (name) {
> +        *name = local_name;
> +    } else {
> +        g_free(local_name);
> +    }
> +    if (id) {
> +        *id = local_id;
> +    }
> +    return 1;
> +}
> +
>  /* nbd_negotiate_simple_meta_context:
>   * Request the server to set the meta context for export @info->name
>   * using @info->x_dirty_bitmap with a fallback to "base:allocation",
> @@ -690,7 +767,6 @@ static int nbd_negotiate_simple_meta_context(QIOChannel *ioc,
>       * function should lose the term _simple.
>       */
>      int ret;
> -    NBDOptionReply reply;
>      const char *context = info->x_dirty_bitmap ?: "base:allocation";
>      bool received = false;
> 
> @@ -699,44 +775,17 @@ static int nbd_negotiate_simple_meta_context(QIOChannel *ioc,
>          return -1;
>      }
> 
> -    if (nbd_receive_option_reply(ioc, NBD_OPT_SET_META_CONTEXT, &reply,
> -                                 errp) < 0)
> -    {
> -        return -1;
> -    }
> -
> -    ret = nbd_handle_reply_err(ioc, &reply, errp);
> -    if (ret <= 0) {
> -        return ret;
> -    }
> -
> -    while (reply.type == NBD_REP_META_CONTEXT) {
> +    while (1) {
>          char *name;
> 
> -        if (reply.length <= sizeof(info->context_id) ||
> -            reply.length > NBD_MAX_BUFFER_SIZE) {
> -            error_setg(errp, "Failed to negotiate meta context '%s', server "
> -                       "answered with unexpected length %" PRIu32, context,
> -                       reply.length);
> -            nbd_send_opt_abort(ioc);
> +        ret = nbd_receive_one_meta_context(ioc, NBD_OPT_SET_META_CONTEXT,
> +                                           &name, &info->context_id, errp);
> +        if (ret < 0) {
>              return -1;
> +        } else if (ret == 0) {
> +            return received;
>          }
> 
> -        if (nbd_read(ioc, &info->context_id, sizeof(info->context_id),
> -                     errp) < 0) {
> -            return -1;
> -        }
> -        info->context_id = be32_to_cpu(info->context_id);
> -
> -        reply.length -= sizeof(info->context_id);
> -        name = g_malloc(reply.length + 1);
> -        if (nbd_read(ioc, name, reply.length, errp) < 0) {
> -            g_free(name);
> -            return -1;
> -        }
> -        name[reply.length] = '\0';
> -        trace_nbd_opt_meta_reply(name, info->context_id);
> -
>          if (received) {
>              error_setg(errp, "Server replied with more than one context");
>              g_free(name);
> @@ -754,34 +803,7 @@ static int nbd_negotiate_simple_meta_context(QIOChannel *ioc,
>          }
>          g_free(name);
>          received = true;
> -
> -        /* receive NBD_REP_ACK */
> -        if (nbd_receive_option_reply(ioc, NBD_OPT_SET_META_CONTEXT, &reply,
> -                                     errp) < 0)
> -        {
> -            return -1;
> -        }
> -
> -        ret = nbd_handle_reply_err(ioc, &reply, errp);
> -        if (ret <= 0) {
> -            return ret;
> -        }
>      }
> -
> -    if (reply.type != NBD_REP_ACK) {
> -        error_setg(errp, "Unexpected reply type %u (%s), expected %u (%s)",
> -                   reply.type, nbd_rep_lookup(reply.type),
> -                   NBD_REP_ACK, nbd_rep_lookup(NBD_REP_ACK));
> -        nbd_send_opt_abort(ioc);
> -        return -1;
> -    }
> -    if (reply.length) {
> -        error_setg(errp, "Unexpected length to ACK response");
> -        nbd_send_opt_abort(ioc);
> -        return -1;
> -    }
> -
> -    return received;
>  }
> 
>  int nbd_receive_negotiate(QIOChannel *ioc, QCryptoTLSCreds *tlscreds,
> diff --git a/nbd/trace-events b/nbd/trace-events
> index 00872a6f9d4..02956c96042 100644
> --- a/nbd/trace-events
> +++ b/nbd/trace-events
> @@ -12,7 +12,7 @@ nbd_receive_query_exports_success(const char *wantname) "Found desired export na
>  nbd_receive_starttls_new_client(void) "Setting up TLS"
>  nbd_receive_starttls_tls_handshake(void) "Starting TLS handshake"
>  nbd_opt_meta_request(const char *optname, const char *context, const char *export) "Requesting %s %s for export %s"
> -nbd_opt_meta_reply(const char *context, uint32_t id) "Received mapping of context %s to id %" PRIu32
> +nbd_opt_meta_reply(const char *optname, const char *context, uint32_t id) "Received %s mapping of %s to id %" PRIu32
>  nbd_receive_negotiate(void *tlscreds, const char *hostname) "Receiving negotiation tlscreds=%p hostname=%s"
>  nbd_receive_negotiate_magic(uint64_t magic) "Magic is 0x%" PRIx64
>  nbd_receive_negotiate_server_flags(uint32_t globalflags) "Global flags are 0x%" PRIx32

So I looked at both the changes you've made and the overall effect on
the code.

I think the individual changes are correct, albeit quite convoluted to
follow because of (as you say in the commit) moving the test for
NBD_REP_ACK first and also a few conditionals which are inverted.

However importantly the overall effect on the code after the patch is
applied makes it much easier to understand than before.

Therefore:

Reviewed-by: Richard W.M. Jones <rjones@redhat.com>

Rich.

-- 
Richard Jones, Virtualization Group, Red Hat http://people.redhat.com/~rjones
Read my programming and virtualization blog: http://rwmj.wordpress.com
virt-df lists disk usage of guests without needing to install any
software inside the virtual machine.  Supports Linux and Windows.
http://people.redhat.com/~rjones/virt-df/

