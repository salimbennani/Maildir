Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:23:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 14D565803DC;
	Thu, 13 Dec 2018 17:29:52 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga007-1.jf.intel.com with ESMTP; 13 Dec 2018 17:29:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AED6fsRAbeISBRd3763prUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/psiwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVrxCvpxxk247ZYpqYOOZicq7HYd8XX3ZNUtpXWidcAo28?=
 =?us-ascii?q?dYwPD+8ZMOhcronyvV0Ooge+BQa2A+Pk1z9HiWXw3a01zu8sFgPG3A06ENIIrH?=
 =?us-ascii?q?vUrM/6NKAIXeG71qXJwy/Mb/VZ2Trm74jIaAouru2IXb1ua8be1U4vFwbcg1iW?=
 =?us-ascii?q?tIfrPCuV2/wTv2SH6+dsT/+jhmA5pw1rvzSixdsghpPIi48X0lzI6Cp0zJsvKd?=
 =?us-ascii?q?GlR0N2YMSoHIZNuyybLYd6X8cvTmd1sygg0LIGo4S0fC0SxZQn2RHfb/uHfpCW?=
 =?us-ascii?q?4hLsSumROy10hHF7d7KlgRa970ygxvf7Vsmu31ZGtitFkt/SuXARzxHf9NSLR/?=
 =?us-ascii?q?9n8ku81zuDyRrf5vxHLEwoj6bWKpwszqY1lpUJsETDGiH2mF/xjK+Tbkgk/umo?=
 =?us-ascii?q?6+L6YrTpv5OcNJF7ihv4MqswnsyzGOM4MwYIX2eF4+Sxz6Pj/ULnT7VQlPE2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GQhV0pws6xqnFTepzMwYnWUbLFJCYB+Hi4npO1LQL/ziAva/?=
 =?us-ascii?q?nk+hkDNqx/DAI73gDY/BLnnFkLf9Y7l971RQxxY0zdBa/5hUEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFh85PBa1w+b7Etp90ZkSWWKSAqCDNqPSvkSF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWUKvg0gQ+Dwi12CVjhTZ3C1X6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLofZ2eW/gQcCKSPtNhkjsc?=
 =?us-ascii?q?WLe7UI8h1RautAzgx7p9NOXU+DYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDd9T6OlPUgsgMZ7czvZ1C9b9Wg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKslg0XnGyr?=
 =?us-ascii?q?cug0MmQsRVM22mnbBw9w7UC47NkEWZkqKqeL8Y3C7M8meD0GWPsFtZUA52TaXK?=
 =?us-ascii?q?Q3QfalHKotT+40PIV6WuBqg/Mgtd1c6CLbNHZcDzglVYWvjvItTebHi3m2erGx?=
 =?us-ascii?q?mIwKiBbI7re2UbwSXcB1IIkwEV/XaaKwc+Aj2trH7ZDDxrDVjveV/j8fFiqHOn?=
 =?us-ascii?q?SU851x2Kb0xk17qy5h4VhfydR+kP3r4evychsTF0HFe739LZENeAowthfKNBYd?=
 =?us-ascii?q?Iy+ltH1GTZtxBjMZykNaxtmlkecwFvtUP0yxp3EplAkdQtrH4y1gVyLbyX0Vxf?=
 =?us-ascii?q?eDKYx5z/IaDXJXTo8xCpaK7W3U/e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw5oPJ1XF2Laa4qD7D29IzC+sjxRatZNNf?=
 =?us-ascii?q?MKKCFA/vHMwWHcmuKOo2m1e3ahIIJvxd9KkxP8m+bfuJxLarPPp8nDKhlWlH+o?=
 =?us-ascii?q?F93V6W+CpmV+HI2IwJw/eG0QudVjfwlUuuvdrzmY9Zez4SBG2/yS7/CY5VZ61y?=
 =?us-ascii?q?e5sLCGi0L822wNV+m4DiW3pC+FG/AFMG3dejeQCOYFzlwQ1QyUMXrGSnmCu51T?=
 =?us-ascii?q?B1kyslrrGC3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuLWFtSLGwtrmBY85I8p8oqj9YUOe/YVCbTL7yvR0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaB1im?=
 =?us-ascii?q?MNmu59mUlZbDsualWmKlV51TdzTrzIyauCu6421qHQOwn/SpltL7Fgg61Dfx18?=
 =?us-ascii?q?N2WiXQsBb8fo7r2ry5Me19f0lkHl/869dgFYF4nYs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZhYti6YmAM1S4n4cFFFr?=
 =?us-ascii?q?yU7KBakitvuVW3sxjRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMi9DLGFpwFQQnf4dY0kHS9t9cV/K1PM3Wb36oHlft?=
 =?us-ascii?q?nQcN0SugeVkxfGk+haNpYxmuAWiipgPGL3pWclxPIjjRxywZG6u5CKJH5386K+?=
 =?us-ascii?q?Bh5YKyf5Z8cO+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLNCZ+rMm+YJGIDwdV+XhWdJ1FfgAMJXDU8hJE5DRunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uJyHy?=
 =?us-ascii?q?ZF/p24sQyCMGqbax5TDWEOXEyECEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB5FNrYmzUMSCwXljjBb82BpBe79S14sN?=
 =?us-ascii?q?q/8OnwWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuCHXUaLfgbVXAAAbai9pMMtI7rkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6eb+8SbxVjOlOqxK8oyqUE0/9MTSF?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?Vkc0JCtLuQ7SZZgvV5A2NA73plIvOCmyaW9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrts9622hx+CfwD1qeBlDsDBGgMSHvhZMI6Lco7tBUHDP/BsKpV?=
 =?us-ascii?q?qZDRtC89lkA9vku6lXjMeJi6v1Jx9F6dvf+cZaDM/RfpHUeEE9OAbkTWaHRDAO?=
 =?us-ascii?q?SiSmYDnS?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAAAZBxNch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBg2snjHSLM4FoOZdAgXMSAQEYEwGHRSI1CA0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiKCZQMDAQIkGQEBNwEFCQEBUANUGQWDH?=
 =?us-ascii?q?IIBBAGmbYFsM4J2AQEFgkOEZgiHfYQ/eoEcgREzhAcZAYkaiR0aCocFUo95BwK?=
 =?us-ascii?q?CKI8xAhaBXIhGhyiZIgIEAgQFAhMBgUcBggwzGgQfUIJsghsMDAuDSogtgjNlA?=
 =?us-ascii?q?YEEAQGMPwEB?=
X-IPAS-Result: =?us-ascii?q?A0ACAAAZBxNch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBg2snjHSLM4FoOZdAgXMSAQEYEwGHRSI1CA0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiKCZQMDAQIkGQEBNwEFCQEBUANUGQWDHIIBBAGmbYFsM4J?=
 =?us-ascii?q?2AQEFgkOEZgiHfYQ/eoEcgREzhAcZAYkaiR0aCocFUo95BwKCKI8xAhaBXIhGh?=
 =?us-ascii?q?yiZIgIEAgQFAhMBgUcBggwzGgQfUIJsghsMDAuDSogtgjNlAYEEAQGMPwEB?=
X-IronPort-AV: E=Sophos;i="5.56,351,1539673200"; 
   d="scan'208";a="44011525"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 13 Dec 2018 17:29:26 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728832AbeLNB3W (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 13 Dec 2018 20:29:22 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:58652 "EHLO
        aserp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728130AbeLNB3W (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 13 Dec 2018 20:29:22 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
        by aserp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wBE1OQjQ154463;
        Fri, 14 Dec 2018 01:29:17 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=from : to : cc :
 subject : date : message-id : in-reply-to : references; s=corp-2018-07-02;
 bh=tkVxwkWCcxUfH6TXhKoU2RULmIqDYvDeLKWn6GQiyew=;
 b=yyk9jLxCUSNZicspdoQJ6qbCdVciq70ZybHupbh/MsRAKh6FBh6/67RDJ/B2icYuqy5d
 ClKuKDkvJ7y3T0CBagEE9IejfGeFURs/V1f3xWu3MA1BieFcjpSBDs5wnv5Az2kGVLeX
 I/DNEgvDKZf3PQsStCc7sdPVKLr6d7kFWPnvXfYsXCafLA2yd/F62qbhGobQa5TsQFxp
 C7n/XmixM60BoQFABqDyaGTWvF/PnUJ1wQyfXspXws1opbK/nfobQoOU9URyY+ZJOgVt
 9LDh9zTRRsCqcXO03OWPDmgNtSKty21jvietluGAGFNXi3kcl5zz2SY1n6htGOGCHj2X TQ== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by aserp2130.oracle.com with ESMTP id 2pawwpas69-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Fri, 14 Dec 2018 01:29:17 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wBE1TG5M025684
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Fri, 14 Dec 2018 01:29:16 GMT
Received: from abhmp0013.oracle.com (abhmp0013.oracle.com [141.146.116.19])
        by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wBE1TGKE023537;
        Fri, 14 Dec 2018 01:29:16 GMT
Received: from will-ThinkCentre-M93p.cn.oracle.com (/10.182.70.234)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Thu, 13 Dec 2018 17:29:16 -0800
From: Jianchao Wang <jianchao.w.wang@oracle.com>
To: axboe@kernel.dk
Cc: ming.lei@redhat.com, linux-block@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH V14 1/3] blk-mq: refactor the code of issue request directly
Date: Fri, 14 Dec 2018 09:28:18 +0800
Message-Id: <1544750900-1549-2-git-send-email-jianchao.w.wang@oracle.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1544750900-1549-1-git-send-email-jianchao.w.wang@oracle.com>
References: <1544750900-1549-1-git-send-email-jianchao.w.wang@oracle.com>
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9106 signatures=668679
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=1 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1812140011
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Merge blk_mq_try_issue_directly and __blk_mq_try_issue_directly
into one interface to unify the interfaces to issue requests
directly. The merged interface takes over the requests totally,
it could insert, end or do nothing based on the return value of
.queue_rq and 'bypass' parameter. Then caller needn't any other
handling any more and then code could be cleaned up.

And also the commit c616cbee ( blk-mq: punt failed direct issue
to dispatch list ) always inserts requests to hctx dispatch list
whenever get a BLK_STS_RESOURCE or BLK_STS_DEV_RESOURCE, this is
overkill and will harm the merging. We just need to do that for
the requests that has been through .queue_rq. This patch also
could fix this.

Signed-off-by: Jianchao Wang <jianchao.w.wang@oracle.com>
---
 block/blk-mq.c | 103 ++++++++++++++++++++++++++++++---------------------------
 1 file changed, 54 insertions(+), 49 deletions(-)

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 9690f4f..af4dc82 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1792,78 +1792,83 @@ static blk_status_t __blk_mq_issue_directly(struct blk_mq_hw_ctx *hctx,
 	return ret;
 }
 
-static blk_status_t __blk_mq_try_issue_directly(struct blk_mq_hw_ctx *hctx,
+static blk_status_t blk_mq_try_issue_directly(struct blk_mq_hw_ctx *hctx,
 						struct request *rq,
 						blk_qc_t *cookie,
-						bool bypass_insert, bool last)
+						bool bypass, bool last)
 {
 	struct request_queue *q = rq->q;
 	bool run_queue = true;
+	blk_status_t ret = BLK_STS_RESOURCE;
+	int srcu_idx;
+	bool force = false;
 
+	hctx_lock(hctx, &srcu_idx);
 	/*
-	 * RCU or SRCU read lock is needed before checking quiesced flag.
+	 * hctx_lock is needed before checking quiesced flag.
 	 *
-	 * When queue is stopped or quiesced, ignore 'bypass_insert' from
-	 * blk_mq_request_issue_directly(), and return BLK_STS_OK to caller,
-	 * and avoid driver to try to dispatch again.
+	 * When queue is stopped or quiesced, ignore 'bypass', insert
+	 * and return BLK_STS_OK to caller, and avoid driver to try to
+	 * dispatch again.
 	 */
-	if (blk_mq_hctx_stopped(hctx) || blk_queue_quiesced(q)) {
+	if (unlikely(blk_mq_hctx_stopped(hctx) || blk_queue_quiesced(q))) {
 		run_queue = false;
-		bypass_insert = false;
-		goto insert;
+		bypass = false;
+		goto out_unlock;
 	}
 
-	if (q->elevator && !bypass_insert)
-		goto insert;
+	if (unlikely(q->elevator && !bypass))
+		goto out_unlock;
 
 	if (!blk_mq_get_dispatch_budget(hctx))
-		goto insert;
+		goto out_unlock;
 
 	if (!blk_mq_get_driver_tag(rq)) {
 		blk_mq_put_dispatch_budget(hctx);
-		goto insert;
+		goto out_unlock;
 	}
 
-	return __blk_mq_issue_directly(hctx, rq, cookie, last);
-insert:
-	if (bypass_insert)
-		return BLK_STS_RESOURCE;
-
-	blk_mq_request_bypass_insert(rq, run_queue);
-	return BLK_STS_OK;
-}
-
-static void blk_mq_try_issue_directly(struct blk_mq_hw_ctx *hctx,
-		struct request *rq, blk_qc_t *cookie)
-{
-	blk_status_t ret;
-	int srcu_idx;
-
-	might_sleep_if(hctx->flags & BLK_MQ_F_BLOCKING);
-
-	hctx_lock(hctx, &srcu_idx);
-
-	ret = __blk_mq_try_issue_directly(hctx, rq, cookie, false, true);
-	if (ret == BLK_STS_RESOURCE || ret == BLK_STS_DEV_RESOURCE)
-		blk_mq_request_bypass_insert(rq, true);
-	else if (ret != BLK_STS_OK)
-		blk_mq_end_request(rq, ret);
-
+	/*
+	 * Always add a request that has been through
+	 *.queue_rq() to the hardware dispatch list.
+	 */
+	force = true;
+	ret = __blk_mq_issue_directly(hctx, rq, cookie, last);
+out_unlock:
 	hctx_unlock(hctx, srcu_idx);
+	switch (ret) {
+	case BLK_STS_OK:
+		break;
+	case BLK_STS_DEV_RESOURCE:
+	case BLK_STS_RESOURCE:
+		if (force) {
+			blk_mq_request_bypass_insert(rq, run_queue);
+			/*
+			 * We have to return BLK_STS_OK for the DM
+			 * to avoid livelock. Otherwise, we return
+			 * the real result to indicate whether the
+			 * request is direct-issued successfully.
+			 */
+			ret = bypass ? BLK_STS_OK : ret;
+		} else if (!bypass) {
+			blk_mq_sched_insert_request(rq, false,
+						    run_queue, false);
+		}
+		break;
+	default:
+		if (!bypass)
+			blk_mq_end_request(rq, ret);
+		break;
+	}
+
+	return ret;
 }
 
 blk_status_t blk_mq_request_issue_directly(struct request *rq, bool last)
 {
-	blk_status_t ret;
-	int srcu_idx;
-	blk_qc_t unused_cookie;
-	struct blk_mq_hw_ctx *hctx = rq->mq_hctx;
+	blk_qc_t unused;
 
-	hctx_lock(hctx, &srcu_idx);
-	ret = __blk_mq_try_issue_directly(hctx, rq, &unused_cookie, true, last);
-	hctx_unlock(hctx, srcu_idx);
-
-	return ret;
+	return blk_mq_try_issue_directly(rq->mq_hctx, rq, &unused, true, last);
 }
 
 void blk_mq_try_issue_list_directly(struct blk_mq_hw_ctx *hctx,
@@ -2004,13 +2009,13 @@ static blk_qc_t blk_mq_make_request(struct request_queue *q, struct bio *bio)
 		if (same_queue_rq) {
 			data.hctx = same_queue_rq->mq_hctx;
 			blk_mq_try_issue_directly(data.hctx, same_queue_rq,
-					&cookie);
+					&cookie, false, true);
 		}
 	} else if ((q->nr_hw_queues > 1 && is_sync) || (!q->elevator &&
 			!data.hctx->dispatch_busy)) {
 		blk_mq_put_ctx(data.ctx);
 		blk_mq_bio_to_request(rq, bio);
-		blk_mq_try_issue_directly(data.hctx, rq, &cookie);
+		blk_mq_try_issue_directly(data.hctx, rq, &cookie, false, true);
 	} else {
 		blk_mq_put_ctx(data.ctx);
 		blk_mq_bio_to_request(rq, bio);
-- 
2.7.4

