Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:50:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D2B1958079D;
	Wed, 12 Dec 2018 05:27:53 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 05:27:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AU1yIShyCovqehbvXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9vEMOoBmlCAmwGO/i0CNEimPs0KEk1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nZsM/1NKEIXuCx0abIyijIYu1M1jfn9ojHaBQhofGLXbltbMXe11QkGQTbgVWU?=
 =?us-ascii?q?rozuIjSY2f4RvGie8eVtTuGvhHA9qwF3vDevwt0gio7ThoIa013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cDUJxZkj3RLSZOCLf5KV?=
 =?us-ascii?q?7h7/SeqdOyp0iXNmdb+5mh2861KvyvfmWcmxyFtKrjRKkt3Ltn0VyRzT5daISu?=
 =?us-ascii?q?Fn8keixzmPzQbT5f9AIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKSbEko5+al?=
 =?us-ascii?q?5/r9brn7pZKQK5V4hwD8P6g2n8ywG+U4MgwAX2iB/uS80aXu/Un4QLVMk/03nb?=
 =?us-ascii?q?DVsJPEKsQBoK62HQtV3p8k6xexCTepzs4YkGIZLFJKZh2HlZLlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC1sx/DcMb3tGo/NIWTbkLf9YbZ97FZRyA4yzdBc+Z1YEL4AIO/oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStEeC5vgzLOmUeI8VpDH9JuAl5/H0?=
 =?us-ascii?q?jH85hUUSfa6z0ZsXdXC3BPJmI0qCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VUZmBBFF+AC3Tod4KCW/cKbyKfOcthkj0C?=
 =?us-ascii?q?Vbi8RI4tzxCutAnmy7V5KurY4DEXtZXm1NJt/e3ciQky9SBoD8Say2yCVXp0nm?=
 =?us-ascii?q?MPRz81xqx/u1ZyylWY3Kh8gvxYE8FT5vxTXgc7M57c0/J1C9ToVg3dedeJTU6s?=
 =?us-ascii?q?Qs+6DjEpUtIx39gObl5+G9q4iBDPxS6qA74PmLyNC5w56abc33n3J8ZgxHfKzq?=
 =?us-ascii?q?ghj186QsRRMW2qnLJw9w/WB4TRiUWWi76qdbgA3C7K7GqM0HCBvF9GXwJqUaXK?=
 =?us-ascii?q?R3YfZlDIotT/4U/CS7yuCbEjMgZazc6CK61KasDmjFlcRffjPsjebHy1m2uqGR?=
 =?us-ascii?q?mIwbaMZpLwe2oBxCXdFFQEkwcL8HmbLwc+GDmur3jeDDN0E1LveF3j8e9lpXO/?=
 =?us-ascii?q?T080yRyKbkJ727q0/B4VmeKTS/cJ0r0Yvychri1+HEyh0NLOF9qAuw1hcb1AYd?=
 =?us-ascii?q?M85VdH0n7Ztwx9P5C6M6BunFkecx5zv0Pv0RV3BZ5NkcwrrHMs0QpzJriU0FJH?=
 =?us-ascii?q?dzOEw5/wPqfbJXX1/BCqc6TWwE3R0M6K+qcT7/Q1s0/svAW3GUst7Xpm08NZ3G?=
 =?us-ascii?q?CB5prXFgUSV5HxUkEp9xVho7HaYy89557b1HF2MKm0tCPC1MwtBOc/1hmgeNJf?=
 =?us-ascii?q?OrueFADuC80aG9SuKOsyllmpcxIIJvxd+LQ1PsOmbfSG3qGrMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyTLlBIFNfKJy?=
 =?us-ascii?q?Z5sECWC0L82x2Np+nZ/tV2dE+1G5A1MJxdGmeQCVb1z7xgBQ0UUXoXq6mSq31T?=
 =?us-ascii?q?B0kjcprraB0yzK2ejtaB0HOmtTTml4kVjsOZS0j8wdXEWwbwkplQGp5Ebgy6hA?=
 =?us-ascii?q?uaR/KXLeQUNJfyjwMmFjXbG8truEY85T9pwotT9bX/i7YVCfUrT9uQcV0zv/H2?=
 =?us-ascii?q?tCwzA2bzOqtY/jnxx5i2KdK2x/rGHDdsFzxhff5drcSuBX3jcdQCl4iD/XBkWz?=
 =?us-ascii?q?PtWz/NWUkYvDvf66V267SpJTdizrx5uatCSn/W1qHQG/n/erl9znCwc61jX319?=
 =?us-ascii?q?trVSXOtxv8Zojr16KnMeNoZEVoBVn869ZkFYF6iIc/mJYQ2X0CjJWP4XUHiXvz?=
 =?us-ascii?q?Mclc2a/mb3oCXz8Lz8TV4Aj4wkJjKH2Jypn9VnWcxMtheta7bnkX2iI788BFFq?=
 =?us-ascii?q?OU4KZYkityp1qytRjRbuRlnjcB1fsu72YXg+QIuAou1CqRGL4TEldDPSzwiRuI?=
 =?us-ascii?q?9cuxo7tNZGagarWw0Et+nda8DLCNuA1cWXD5eos8Ei909MlwLFXM0Hjr4IH+ZN?=
 =?us-ascii?q?bQdc4TtgGTkxrYk+hVL5cxmuALhCV9P2L9oGYly/U6jRF12ZG6vY6HK3hi/a6j?=
 =?us-ascii?q?Ax5YMCH1aN0X+j33kalemcOW1Zi1Hpp9AjULQIfoTfWwHT0Jr/vnMAKOECAmpn?=
 =?us-ascii?q?efBLrSBguf6EZgr3LSHJGnLXCXJH8Fzdp8QBmRPlBQgAcRXD8ihJ42ChiqxND9?=
 =?us-ascii?q?cEd+/j0R5ET3qh5SxeJzLRX/Tn3TpAS1ajc3VZifKgBZ7hpZ6kfRMMye6P9zHi?=
 =?us-ascii?q?5C8p2gqgyNNnKUZwBSAW4VXUyEAkjpPqOy6tnY7+iYGu2+IuPOYLWJtOxeTuqI?=
 =?us-ascii?q?yoip0od85DaMMcOPPnZ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+x+ogKeDNO2QhCdjJTZbzJMMwnDIx6YF3F4PkCFj?=
 =?us-ascii?q?bD2tEbUGtS7QQ6PcgK5XDxgHayxtMMtE9b4z3g5IOcTDkNP6yqZ4juIpC1dCTV?=
 =?us-ascii?q?HugNypatcQI26jNFLLHkKLNLWdKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw5xCWjiSdLqcAG0PMVrgj0237I0gGjHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyac9+PYMIoZseN3AiRokOJX+HQ7xKFT?=
 =?us-ascii?q?7CFBRfx1njPdr99uo168lOmPxSFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQP9JNZDYjXtrxd0JD9laD3MytY+pqA5cYACtLGAMOBPmAoPRfgFHjTFgRT?=
 =?us-ascii?q?HhCxMmSKrlZbmfWe8TW+p4Iko5zsn9ICR/d+WVgyXqcTAUFoNN8POpF6WnUji7?=
 =?us-ascii?q?HN351A3ma3sBSEHJYShZvATP/HRKy3cDs=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAACSDBFch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGBWoIRJ5gmUAEBBoE1FJJDhwMrAYc+IjcGDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQQBCQEBChgJE?=
 =?us-ascii?q?xIDDAUYMQwMglFLgXUFCAIDpG2BbDOCdgEBBYcrCIsggRwXeIEHgyVJNYg2gia?=
 =?us-ascii?q?PR5ByVQmRTAsYgVyPaiyKAo8RgVyBeE0wCIMnghsMF4hehVkmMoEFAQGMfAEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAACSDBFch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGBWoIRJ5gmUAEBBoE1FJJDhwMrAYc+IjcGDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYQEBAQECAQECJBMGAQE3AQQBCQEBChgJExIDDAUYMQwMglF?=
 =?us-ascii?q?LgXUFCAIDpG2BbDOCdgEBBYcrCIsggRwXeIEHgyVJNYg2giaPR5ByVQmRTAsYg?=
 =?us-ascii?q?VyPaiyKAo8RgVyBeE0wCIMnghsMF4hehVkmMoEFAQGMfAEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="66471708"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 12 Dec 2018 05:27:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727537AbeLLN1t (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 08:27:49 -0500
Received: from mail.kernel.org ([198.145.29.99]:56304 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726232AbeLLN1t (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 08:27:49 -0500
Received: from quaco.ghostprotocols.net (unknown [189.40.101.168])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D806B2084E;
        Wed, 12 Dec 2018 13:27:47 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544621268;
        bh=2B7aXskNbZLsphD3sXN6L27hv55L23wXj1YGlo6GkB0=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=H9Lmu/yMgaj5UOIh7qu7lI0+dCn6LKv7uIdSYW8Qn5a/W4xBvxWxI1p/BHGa1Rq9k
         5y00vAZCbmvfG0kd+OyLu5s+KKIDHYrpPQCsSoUk4MHxAMfxzpLkZjlIwl6P1euQaU
         q9RjAOmG0fvUdPknMw6/sF2foPyw3jI9l8a7D1kE=
Received: by quaco.ghostprotocols.net (Postfix, from userid 1000)
        id 182854042C; Wed, 12 Dec 2018 10:27:43 -0300 (-03)
Date: Wed, 12 Dec 2018 10:27:43 -0300
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Peter Zijlstra <peterz@infradead.org>
Cc: Song Liu <songliubraving@fb.com>, linux-kernel@vger.kernel.org,
        netdev@vger.kernel.org, ast@kernel.org, daniel@iogearbox.net,
        kernel-team@fb.com, Steven Rostedt <rostedt@goodmis.org>
Subject: Re: [PATCH v3 perf, bpf-next 1/4] perf, bpf: Introduce
 PERF_RECORD_BPF_EVENT
Message-ID: <20181212132742.GB21027@kernel.org>
References: <20181211233351.4036381-1-songliubraving@fb.com>
 <20181211233351.4036381-2-songliubraving@fb.com>
 <20181212131549.GZ5289@hirez.programming.kicks-ass.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181212131549.GZ5289@hirez.programming.kicks-ass.net>
X-Url: http://acmel.wordpress.com
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Em Wed, Dec 12, 2018 at 02:15:49PM +0100, Peter Zijlstra escreveu:
> On Tue, Dec 11, 2018 at 03:33:47PM -0800, Song Liu wrote:
> > For better performance analysis of BPF programs, this patch introduces
> > PERF_RECORD_BPF_EVENT, a new perf_event_type that exposes BPF program
> > load/unload information to user space.
> > 
> > Each BPF program may contain up to BPF_MAX_SUBPROGS (256) sub programs.
> > The following example shows kernel symbols for a BPF program with 7
> > sub programs:
> > 
> >     ffffffffa0257cf9 t bpf_prog_b07ccb89267cf242_F
> >     ffffffffa02592e1 t bpf_prog_2dcecc18072623fc_F
> >     ffffffffa025b0e9 t bpf_prog_bb7a405ebaec5d5c_F
> >     ffffffffa025dd2c t bpf_prog_a7540d4a39ec1fc7_F
> >     ffffffffa025fcca t bpf_prog_05762d4ade0e3737_F
> >     ffffffffa026108f t bpf_prog_db4bd11e35df90d4_F
> >     ffffffffa0263f00 t bpf_prog_89d64e4abf0f0126_F
> >     ffffffffa0257cf9 t bpf_prog_ae31629322c4b018__dummy_tracepoi
> 
> Doesn't BPF have enough information to generate 'saner' names? Going by
> the thing below, these sub-progs are actually functions, right?

Yeah, this looks just like a symbol table, albeit just with functions,
so far.
 
> >         /*
> >          * Record different types of bpf events:
> >          *  enum perf_bpf_event_type {
> >          *     PERF_BPF_EVENT_UNKNOWN           = 0,
> >          *     PERF_BPF_EVENT_PROG_LOAD         = 1,
> >          *     PERF_BPF_EVENT_PROG_UNLOAD       = 2,
> >          *  };
> >          *
> >          * struct {
> >          *      struct perf_event_header header;
> >          *      u32                             type;
> >          *      u32                             flags;
> >          *      u32                             id; // prog_id or other id
> >          *      u32                             sub_id; // subprog id
> >          *
> >          *      // for bpf_prog types, bpf prog or subprog
> >          *      u8                              tag[BPF_TAG_SIZE];
> >          *      u64                             addr;
> >          *      u64                             len;
> >          *      char                            name[];
> >          *      struct sample_id                sample_id;
> >          * };
> >          */
> 
> Isn't this mixing two different things (poorly)? The kallsym update and
> the BPF load/unload ?
> 
> And while this tracks the bpf kallsyms, it does not do all kallsyms.
> 
> .... Oooh, I see the problem, everybody is doing their own custom
> kallsym_{add,del}() thing, instead of having that in generic code :-(
 
> This, for example, doesn't track module load/unload nor ftrace
> trampolines, even though both affect kallsyms.

So you think the best would have to be a PERF_RECORD_ that just states
that code has been loaded at range (addr, len). I.e. much like
PERF_RECORD_MMAP does, just for userspace? Then it could be used by BPF
and any other kernel facility like the ones you described?

There would be an area that would be used by each of these facilities to
figure out further info, like we use the mmap->name to go and get the
symbol table from ELF files, etc, but BPF could use for their specific
stuff?

The above is almost like PERF_RECORD_MMAP (PERF_BPF_EVENT_PROG_LOAD) +
PERF_RECORD_MUNMAP(PERF_BPF_EVENT_PROG_UNLOAD) in one event, with this
'type' thing allowing for more stuff to be put in later, I guess.

- Arnaldo
 
> > +void perf_event_bpf_event_prog(enum perf_bpf_event_type type,
> > +			       struct bpf_prog *prog)
> > +{
> > +	if (!atomic_read(&nr_bpf_events))
> > +		return;
> > +
> > +	if (type != PERF_BPF_EVENT_PROG_LOAD &&
> > +	    type != PERF_BPF_EVENT_PROG_UNLOAD)
> > +		return;
> > +
> > +	if (prog->aux->func_cnt == 0) {
> > +		perf_event_bpf_event_subprog(type, prog,
> > +					     prog->aux->id, 0);
> > +	} else {
> > +		int i;
> > +
> > +		for (i = 0; i < prog->aux->func_cnt; i++)
> > +			perf_event_bpf_event_subprog(type, prog->aux->func[i],
> > +						     prog->aux->id, i);
> > +	}
> > +}
> 

-- 

- Arnaldo
