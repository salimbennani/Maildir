Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:17:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9B6BC5807A2
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 20:05:05 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 12 Dec 2018 20:05:05 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A3Z0g/xwOgbcHRRjXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2uIRIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQMhfWS9GDIy+?=
 =?us-ascii?q?YYsAAOUPM/tAr4T/pVUDogayCAewCOzx0T9FnWP63bQg3ug9CwzKwBAsEtQTu3?=
 =?us-ascii?q?rUttX1M6ISXPi7wqbS0zXDbu5Z0ir85ojJaR8huvaMXbRtesfW1EYgDR3FjlSN?=
 =?us-ascii?q?poH+MDOV1/8Cs3Oc7+pmT+6glnQnqwZpoje02MgjkJPJipgUyl/Z7yl22ps1KM?=
 =?us-ascii?q?S+RUVmYtCkCINduz+GO4Z1WM8uXnxktSUgxrEYt5O2fDIGxIklyhLHdfCKfJSE?=
 =?us-ascii?q?7g/mWeufJTp0mG5pdbehixu37EStz+jxWtey3V1XtCRKiMPMuWoI1xHL6siIVP?=
 =?us-ascii?q?99/kC51DaL1gDT8f1EIVsumarULZ4h36Q8lp0JsUTMBiP2mUP2g7GKdkg85OSk?=
 =?us-ascii?q?9+fqbq/7qpOBNIJ4kB/yP6oul8ClHOg1MBACX22B9uS90L3j81f5QLJPjvAui6?=
 =?us-ascii?q?nWrpXaJdkCqqGkHQBVzJgs6xKmAzi919QYgH8HI05bdxKciITpP1DOIPPmAvul?=
 =?us-ascii?q?jFWsjS9mx/THPr3nH5XMIWLPkLbnfbZh9UFczBA/wsxY55JREbwBJvXzWkn+tN?=
 =?us-ascii?q?zeEx81KQu0w/zoCNllzIMRRXqPArOFMKPVqVKI4uMvI+qSa4MPtzf9NuMo5/rv?=
 =?us-ascii?q?jX8/hF8ccrOl3ZoRaHCkAPtmJ1+VbmbrgtcEQi83uBEjRrnqlEGaSmwUIHKzRL?=
 =?us-ascii?q?4noDc8Do2gEMHEXI/qhbWA2CKyGNpRfnxHDVaXVm7lcpjBV/oSZSbBH8l6jzZR?=
 =?us-ascii?q?ULGgT5MmhwijsRK/x7d5I+6R4CABqJ/4yPBz4Ovckwx08iZ7WN+A2WOARH0hg2?=
 =?us-ascii?q?UTWjUt17p+q0Eu9lDWyaVkjuYeENVC6/5NVi8+NJjV1es8DMr9CSzbedLcZF+4?=
 =?us-ascii?q?Q9nuLjA7VdU3i4sCalh8F/2tjxrY2CzsD6USj7aGDYZy866a1mWndJU18GrPyK?=
 =?us-ascii?q?R01wpuecBIL2Dzw/cnrwU=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BCAAD72BFcmBHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGBMCqCOIx0izOCDXyIF45AgXMUGBSHPiI2Bw0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOIwyCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAR8pCAMBHQsrG?=
 =?us-ascii?q?QWDHIFpAxUBBKYbgWwzgnYBAQWCQ4JNDYIUCId9gyOBHBeBf4ERgl2DDIgFiT8?=
 =?us-ascii?q?PhXmRGS4JgieMAIMlCxhgkGaPLYoSgUwBggczGggXGYMnghsMF38BAYEDjC0tM?=
 =?us-ascii?q?YEEA4pjgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BCAAD72BFcmBHrdtBjHQEBBQEHBQGBUwYBCwGBMCqCOIx?=
 =?us-ascii?q?0izOCDXyIF45AgXMUGBSHPiI2Bw0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAR8pCAMBHQsrGQWDHIFpAxUBBKY?=
 =?us-ascii?q?bgWwzgnYBAQWCQ4JNDYIUCId9gyOBHBeBf4ERgl2DDIgFiT8PhXmRGS4JgieMA?=
 =?us-ascii?q?IMlCxhgkGaPLYoSgUwBggczGggXGYMnghsMF38BAYEDjC0tMYEEA4pjgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="43861009"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 20:05:04 -0800
Received: from localhost ([::1]:50191 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXIFE-0006ao-2G
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 23:05:04 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:50480)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gXIBz-0003Yq-DG
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 23:01:44 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gXIBv-0001v5-GL
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 23:01:41 -0500
Received: from ozlabs.org ([2401:3900:2:1::2]:56009)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgibson@ozlabs.org>)
	id 1gXIBr-0001p7-LD; Wed, 12 Dec 2018 23:01:37 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 43Fg3H0fWkz9s9h; Thu, 13 Dec 2018 15:01:30 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1544673691;
	bh=5V37HpCyslEWv/TiYhDyWJP9Re4zayUL1PrL+MzG0nA=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=iukPGkUZQ8uYr7H+FxsJ6fFHmr/c4Lb+F223mxeGsmdqGoNawMYIdz7i2Bwk+PQ3e
	lQVfaL2N3nV5nlqjHPu8Z8xJnSCS6GZz2jC33TuFSTpY+gdl5xUwi1MPqlWy/eFGzp
	/wEqaBOVm5P1fOTddZa4OzRfw2sBFJIxFHKK+QFI=
From: David Gibson <david@gibson.dropbear.id.au>
To: peter.maydell@linaro.org
Date: Thu, 13 Dec 2018 15:01:01 +1100
Message-Id: <20181213040126.6768-3-david@gibson.dropbear.id.au>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181213040126.6768-1-david@gibson.dropbear.id.au>
References: <20181213040126.6768-1-david@gibson.dropbear.id.au>
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2401:3900:2:1::2
Subject: [Qemu-devel] [PULL 02/27] target/ppc: tcg: Implement addex
 instruction
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: lvivier@redhat.com, gkurz@kaod.org, qemu-devel@nongnu.org,
	spopovyc@redhat.com, qemu-ppc@nongnu.org, clg@kaod.org,
	Suraj Jitindar Singh <sjitindarsingh@gmail.com>,
	David Gibson <david@gibson.dropbear.id.au>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Suraj Jitindar Singh <sjitindarsingh@gmail.com>

Implement the addex instruction introduced in ISA V3.00 in qemu tcg.

The add extended using alternate carry bit (addex) instruction performs
the same operation as the add extended (adde) instruction, but using the
overflow (ov) field in the fixed point exception register (xer) as the
carry in and out instead of the carry (ca) field.

The instruction has a Z23-form, not an XO form, as follows:

    ------------------------------------------------------------------
    |   31   |   RT   |   RA   |   RB   |   CY   |     170     |  0  |
    ------------------------------------------------------------------
    0        6        11       16       21       23            31    32

However since the only valid form of the instruction defined so far is
CY =3D 0, we can treat this like an XO form instruction.

There is no dot form (addex.) of the instruction and the summary overflow
(so) bit in the xer is not modified by this instruction.

For simplicity we reuse the gen_op_arith_add function and add a function
argument to specify where the carry in input should come from and the
carry out output be stored (note must be the same location).

Signed-off-by: Suraj Jitindar Singh <sjitindarsingh@gmail.com>
Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
---
 disas/ppc.c            |  2 ++
 target/ppc/translate.c | 60 +++++++++++++++++++++++-------------------
 2 files changed, 35 insertions(+), 27 deletions(-)

diff --git a/disas/ppc.c b/disas/ppc.c
index 5ab9c35a84..da1140ba2b 100644
--- a/disas/ppc.c
+++ b/disas/ppc.c
@@ -3734,6 +3734,8 @@ const struct powerpc_opcode powerpc_opcodes[] =3D {
 { "addmeo.", XO(31,234,1,1), XORB_MASK, PPCCOM,		{ RT, RA } },
 { "ameo.",   XO(31,234,1,1), XORB_MASK, PWRCOM,		{ RT, RA } },
=20
+{ "addex",   XO(31,170,0,0), XO_MASK,   POWER9,         { RT, RA, RB } }=
,
+
 { "mullw",   XO(31,235,0,0), XO_MASK,	PPCCOM,		{ RT, RA, RB } },
 { "muls",    XO(31,235,0,0), XO_MASK,	PWRCOM,		{ RT, RA, RB } },
 { "mullw.",  XO(31,235,0,1), XO_MASK,	PPCCOM,		{ RT, RA, RB } },
diff --git a/target/ppc/translate.c b/target/ppc/translate.c
index 2b37910248..96894ab9a8 100644
--- a/target/ppc/translate.c
+++ b/target/ppc/translate.c
@@ -849,7 +849,7 @@ static inline void gen_op_arith_compute_ov(DisasConte=
xt *ctx, TCGv arg0,
=20
 static inline void gen_op_arith_compute_ca32(DisasContext *ctx,
                                              TCGv res, TCGv arg0, TCGv a=
rg1,
-                                             int sub)
+                                             TCGv ca32, int sub)
 {
     TCGv t0;
=20
@@ -864,13 +864,14 @@ static inline void gen_op_arith_compute_ca32(DisasC=
ontext *ctx,
         tcg_gen_xor_tl(t0, arg0, arg1);
     }
     tcg_gen_xor_tl(t0, t0, res);
-    tcg_gen_extract_tl(cpu_ca32, t0, 32, 1);
+    tcg_gen_extract_tl(ca32, t0, 32, 1);
     tcg_temp_free(t0);
 }
=20
 /* Common add function */
 static inline void gen_op_arith_add(DisasContext *ctx, TCGv ret, TCGv ar=
g1,
-                                    TCGv arg2, bool add_ca, bool compute=
_ca,
+                                    TCGv arg2, TCGv ca, TCGv ca32,
+                                    bool add_ca, bool compute_ca,
                                     bool compute_ov, bool compute_rc0)
 {
     TCGv t0 =3D ret;
@@ -888,29 +889,29 @@ static inline void gen_op_arith_add(DisasContext *c=
tx, TCGv ret, TCGv arg1,
             tcg_gen_xor_tl(t1, arg1, arg2);        /* add without carry =
*/
             tcg_gen_add_tl(t0, arg1, arg2);
             if (add_ca) {
-                tcg_gen_add_tl(t0, t0, cpu_ca);
+                tcg_gen_add_tl(t0, t0, ca);
             }
-            tcg_gen_xor_tl(cpu_ca, t0, t1);        /* bits changed w/ ca=
rry */
+            tcg_gen_xor_tl(ca, t0, t1);        /* bits changed w/ carry =
*/
             tcg_temp_free(t1);
-            tcg_gen_extract_tl(cpu_ca, cpu_ca, 32, 1);
+            tcg_gen_extract_tl(ca, ca, 32, 1);
             if (is_isa300(ctx)) {
-                tcg_gen_mov_tl(cpu_ca32, cpu_ca);
+                tcg_gen_mov_tl(ca32, ca);
             }
         } else {
             TCGv zero =3D tcg_const_tl(0);
             if (add_ca) {
-                tcg_gen_add2_tl(t0, cpu_ca, arg1, zero, cpu_ca, zero);
-                tcg_gen_add2_tl(t0, cpu_ca, t0, cpu_ca, arg2, zero);
+                tcg_gen_add2_tl(t0, ca, arg1, zero, ca, zero);
+                tcg_gen_add2_tl(t0, ca, t0, ca, arg2, zero);
             } else {
-                tcg_gen_add2_tl(t0, cpu_ca, arg1, zero, arg2, zero);
+                tcg_gen_add2_tl(t0, ca, arg1, zero, arg2, zero);
             }
-            gen_op_arith_compute_ca32(ctx, t0, arg1, arg2, 0);
+            gen_op_arith_compute_ca32(ctx, t0, arg1, arg2, ca32, 0);
             tcg_temp_free(zero);
         }
     } else {
         tcg_gen_add_tl(t0, arg1, arg2);
         if (add_ca) {
-            tcg_gen_add_tl(t0, t0, cpu_ca);
+            tcg_gen_add_tl(t0, t0, ca);
         }
     }
=20
@@ -927,40 +928,44 @@ static inline void gen_op_arith_add(DisasContext *c=
tx, TCGv ret, TCGv arg1,
     }
 }
 /* Add functions with two operands */
-#define GEN_INT_ARITH_ADD(name, opc3, add_ca, compute_ca, compute_ov)   =
      \
+#define GEN_INT_ARITH_ADD(name, opc3, ca, add_ca, compute_ca, compute_ov=
)     \
 static void glue(gen_, name)(DisasContext *ctx)                         =
      \
 {                                                                       =
      \
     gen_op_arith_add(ctx, cpu_gpr[rD(ctx->opcode)],                     =
      \
                      cpu_gpr[rA(ctx->opcode)], cpu_gpr[rB(ctx->opcode)],=
      \
+                     ca, glue(ca, 32),                                  =
      \
                      add_ca, compute_ca, compute_ov, Rc(ctx->opcode));  =
      \
 }
 /* Add functions with one operand and one immediate */
-#define GEN_INT_ARITH_ADD_CONST(name, opc3, const_val,                  =
      \
+#define GEN_INT_ARITH_ADD_CONST(name, opc3, const_val, ca,              =
      \
                                 add_ca, compute_ca, compute_ov)         =
      \
 static void glue(gen_, name)(DisasContext *ctx)                         =
      \
 {                                                                       =
      \
     TCGv t0 =3D tcg_const_tl(const_val);                                =
        \
     gen_op_arith_add(ctx, cpu_gpr[rD(ctx->opcode)],                     =
      \
                      cpu_gpr[rA(ctx->opcode)], t0,                      =
      \
+                     ca, glue(ca, 32),                                  =
      \
                      add_ca, compute_ca, compute_ov, Rc(ctx->opcode));  =
      \
     tcg_temp_free(t0);                                                  =
      \
 }
=20
 /* add  add.  addo  addo. */
-GEN_INT_ARITH_ADD(add, 0x08, 0, 0, 0)
-GEN_INT_ARITH_ADD(addo, 0x18, 0, 0, 1)
+GEN_INT_ARITH_ADD(add, 0x08, cpu_ca, 0, 0, 0)
+GEN_INT_ARITH_ADD(addo, 0x18, cpu_ca, 0, 0, 1)
 /* addc  addc.  addco  addco. */
-GEN_INT_ARITH_ADD(addc, 0x00, 0, 1, 0)
-GEN_INT_ARITH_ADD(addco, 0x10, 0, 1, 1)
+GEN_INT_ARITH_ADD(addc, 0x00, cpu_ca, 0, 1, 0)
+GEN_INT_ARITH_ADD(addco, 0x10, cpu_ca, 0, 1, 1)
 /* adde  adde.  addeo  addeo. */
-GEN_INT_ARITH_ADD(adde, 0x04, 1, 1, 0)
-GEN_INT_ARITH_ADD(addeo, 0x14, 1, 1, 1)
+GEN_INT_ARITH_ADD(adde, 0x04, cpu_ca, 1, 1, 0)
+GEN_INT_ARITH_ADD(addeo, 0x14, cpu_ca, 1, 1, 1)
 /* addme  addme.  addmeo  addmeo.  */
-GEN_INT_ARITH_ADD_CONST(addme, 0x07, -1LL, 1, 1, 0)
-GEN_INT_ARITH_ADD_CONST(addmeo, 0x17, -1LL, 1, 1, 1)
+GEN_INT_ARITH_ADD_CONST(addme, 0x07, -1LL, cpu_ca, 1, 1, 0)
+GEN_INT_ARITH_ADD_CONST(addmeo, 0x17, -1LL, cpu_ca, 1, 1, 1)
+/* addex */
+GEN_INT_ARITH_ADD(addex, 0x05, cpu_ov, 1, 1, 0);
 /* addze  addze.  addzeo  addzeo.*/
-GEN_INT_ARITH_ADD_CONST(addze, 0x06, 0, 1, 1, 0)
-GEN_INT_ARITH_ADD_CONST(addzeo, 0x16, 0, 1, 1, 1)
+GEN_INT_ARITH_ADD_CONST(addze, 0x06, 0, cpu_ca, 1, 1, 0)
+GEN_INT_ARITH_ADD_CONST(addzeo, 0x16, 0, cpu_ca, 1, 1, 1)
 /* addi */
 static void gen_addi(DisasContext *ctx)
 {
@@ -979,7 +984,7 @@ static inline void gen_op_addic(DisasContext *ctx, bo=
ol compute_rc0)
 {
     TCGv c =3D tcg_const_tl(SIMM(ctx->opcode));
     gen_op_arith_add(ctx, cpu_gpr[rD(ctx->opcode)], cpu_gpr[rA(ctx->opco=
de)],
-                     c, 0, 1, 0, compute_rc0);
+                     c, cpu_ca, cpu_ca32, 0, 1, 0, compute_rc0);
     tcg_temp_free(c);
 }
=20
@@ -1432,13 +1437,13 @@ static inline void gen_op_arith_subf(DisasContext=
 *ctx, TCGv ret, TCGv arg1,
             zero =3D tcg_const_tl(0);
             tcg_gen_add2_tl(t0, cpu_ca, arg2, zero, cpu_ca, zero);
             tcg_gen_add2_tl(t0, cpu_ca, t0, cpu_ca, inv1, zero);
-            gen_op_arith_compute_ca32(ctx, t0, inv1, arg2, 0);
+            gen_op_arith_compute_ca32(ctx, t0, inv1, arg2, cpu_ca32, 0);
             tcg_temp_free(zero);
             tcg_temp_free(inv1);
         } else {
             tcg_gen_setcond_tl(TCG_COND_GEU, cpu_ca, arg2, arg1);
             tcg_gen_sub_tl(t0, arg2, arg1);
-            gen_op_arith_compute_ca32(ctx, t0, arg1, arg2, 1);
+            gen_op_arith_compute_ca32(ctx, t0, arg1, arg2, cpu_ca32, 1);
         }
     } else if (add_ca) {
         /* Since we're ignoring carry-out, we can simplify the
@@ -7087,6 +7092,7 @@ GEN_INT_ARITH_ADD(adde, 0x04, 1, 1, 0)
 GEN_INT_ARITH_ADD(addeo, 0x14, 1, 1, 1)
 GEN_INT_ARITH_ADD_CONST(addme, 0x07, -1LL, 1, 1, 0)
 GEN_INT_ARITH_ADD_CONST(addmeo, 0x17, -1LL, 1, 1, 1)
+GEN_HANDLER_E(addex, 0x1F, 0x0A, 0x05, 0x00000000, PPC_NONE, PPC2_ISA300=
),
 GEN_INT_ARITH_ADD_CONST(addze, 0x06, 0, 1, 1, 0)
 GEN_INT_ARITH_ADD_CONST(addzeo, 0x16, 0, 1, 1, 1)
=20
--=20
2.19.2


