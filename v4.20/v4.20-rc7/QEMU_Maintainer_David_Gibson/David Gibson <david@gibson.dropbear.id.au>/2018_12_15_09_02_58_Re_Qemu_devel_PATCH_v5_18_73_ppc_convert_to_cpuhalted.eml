Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  16 Dec 2018 16:44:41 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3FD235807A0
	for <like.xu@linux.intel.com>; Sat, 15 Dec 2018 22:22:30 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 15 Dec 2018 22:22:30 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqzCAJhAE/u9dH65R4sSKUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37osywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?bIUPAOUdMulFrYbyqUYArQO8CAeuC+7j1zFFimPo0q0hyOkhHh3K0RY6Et4Sqn?=
 =?us-ascii?q?nYstP4P7oSX+Cvy6nIyC3OYf1M1jfj6YjHbw0qr/CNXb1rasrRzk8vHB7Cg1qN?=
 =?us-ascii?q?s4PlITKV2fkWvmiU7upvTvmvi2khqw1rvzev3MAsipHSiY0L0F/E7z91wIcoKt?=
 =?us-ascii?q?GiUkF7fMepHZ1NvC+UMIt2R9ktQ2BuuCsizb0HuJq7czIRx5Q83RLfbOaHc4eQ?=
 =?us-ascii?q?7h3+TuaRJi94i2l7d72lnRa+60mgxfD6W8Kp01hKtjJInsfQun0OzRDf99WLR/?=
 =?us-ascii?q?hn8ku/1zuC1xrf5vxGLEwsi6bXN5AszqQtmpYOq0jOHDL6lF/rgKKQa04q4PKn?=
 =?us-ascii?q?6/79bbXjvpKcN5F7igX5Mqk2nsy/AP84MhQVX2SB9uS80qDj8Vf+QLVQgf06iq?=
 =?us-ascii?q?jZsJbEKsQHvqO1HRNZ34U55xqiEjur084UkWcJIV9FYh6LkorkN0nLIP/iDPe/?=
 =?us-ascii?q?h1qskC1sx/DDJrDhG4vCLn3ekLv4YLly9VBcxxQ3zdxG/J1UDawBIPTvVUDvr9?=
 =?us-ascii?q?zUCRs5Mw23w+n5Etl82Z4eVHqLAq+YNqPSrFCJ6vguI+mKeI8apjL9J+I56P7p?=
 =?us-ascii?q?iH80glkdfa6v3ZsYbnC4A+5qI0KDYXrjmtsBC3sFvhIiTOz2j12PSTpTZ3exX6?=
 =?us-ascii?q?0i/D06B5+mAJzHRoCshryBwSi6EodXZmBAFlCDD3Poe5+YVPcLbSLBavJniSEO?=
 =?us-ascii?q?ALi9V5c6h1bpsA7h16EhKO3S9SsF85X5259w7uzXkBg0sjtsE8Wa1XrKVmxxgy?=
 =?us-ascii?q?YESiE72PNCp1dgwAKG2Kl8n/sKDNFW+rZFXxk3MdvGwvVnBsvucgTGeNiPVRCh?=
 =?us-ascii?q?WNrxGiw7TN8634oTZV1gEc6plBHJ0nmWBOpfurmKAJ0zuo2al1P2O883gyLN07?=
 =?us-ascii?q?Uop1M8S8JXc2q8ifgs2RLUAtvlmluYm+6FdK4H2yiFoGuK02uClE5ZWhV3V+PJ?=
 =?us-ascii?q?R3cHbEbft5L46gXLUun9WvwcLgJdxJvaeeNxYdrzgAADHa+7NQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAACI7hVchxHrdtBkFgUBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVEGAQEBCwGBMIE5gSmMFV+NI3yWXBSBYQEMBRgHDYdHIjQJDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQIkGQEBBAopAQIDAQIGA?=
 =?us-ascii?q?QEKEgYJHQgDAQsFGB0UEwUEgxkBgX8BAQSjV4FsM4J2AQEFhxAHCIJtiDWBHBe?=
 =?us-ascii?q?Bf4ERgl01hGUFhXahGwmCKIRlikILGGB9TY8oLIoVhmiIO4FGgg4zGggXGYMnC?=
 =?us-ascii?q?YISDBeCBIZahVMtMYEEA4wMgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AGAACI7hVchxHrdtBkFgUBAQEBAwEBAQcDAQEBgVEGAQE?=
 =?us-ascii?q?BCwGBMIE5gSmMFV+NI3yWXBSBYQEMBRgHDYdHIjQJDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCBsOIwyCNgUCAxoBBoJcAQIDAQIkGQEBBAopAQIDAQIGAQEKEgYJHQgDAQs?=
 =?us-ascii?q?FGB0UEwUEgxkBgX8BAQSjV4FsM4J2AQEFhxAHCIJtiDWBHBeBf4ERgl01hGUFh?=
 =?us-ascii?q?XahGwmCKIRlikILGGB9TY8oLIoVhmiIO4FGgg4zGggXGYMnCYISDBeCBIZahVM?=
 =?us-ascii?q?tMYEEA4wMgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,360,1539673200"; 
   d="asc'?scan'208";a="45157882"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 15 Dec 2018 22:22:29 -0800
Received: from localhost ([::1]:41366 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYPoq-00081j-GT
	for like.xu@linux.intel.com; Sun, 16 Dec 2018 01:22:28 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59213)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gYPlS-0005oq-6g
	for qemu-devel@nongnu.org; Sun, 16 Dec 2018 01:19:00 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gYPlP-0008Pv-1d
	for qemu-devel@nongnu.org; Sun, 16 Dec 2018 01:18:58 -0500
Received: from ozlabs.org ([203.11.71.1]:42085)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgibson@ozlabs.org>)
	id 1gYPlN-0008Lr-R8; Sun, 16 Dec 2018 01:18:54 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 43HYyG4Qbnz9s3C; Sun, 16 Dec 2018 17:18:46 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1544941126;
	bh=jpQkLCwYNWb6IfdreiN6TX8lF7Npfa1EzDo7EA4WxMU=;
	h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
	b=o6HVZh90Jx2PYy3qO/BXM3D6B1laW7Exs294Xaa73Q9QnIyvyeHibnXzvslDZikFK
	A9vjzTG1dA4qFoAaoQtHi9QEkvVTEm7rLAEpAWKhq3W+gtYzFNCVKP0zH/HODFOyXT
	+cc4+n4/6JIoS5N8J1dCJkatY/h7eIUlvQlDDqxs=
Date: Sat, 15 Dec 2018 20:02:58 +1100
From: David Gibson <david@gibson.dropbear.id.au>
To: "Emilio G. Cota" <cota@braap.org>
Message-ID: <20181215090258.GN29278@umbus.fritz.box>
References: <20181213050453.9677-1-cota@braap.org>
	<20181213050453.9677-19-cota@braap.org>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	protocol="application/pgp-signature"; boundary="ggdAeHltlv4tpqCr"
Content-Disposition: inline
In-Reply-To: <20181213050453.9677-19-cota@braap.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 203.11.71.1
Subject: Re: [Qemu-devel] [PATCH v5 18/73] ppc: convert to cpu_halted
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Richard Henderson <richard.henderson@linaro.org>, qemu-devel@nongnu.org,
	Alexander Graf <agraf@suse.de>, qemu-ppc@nongnu.org,
	Paolo Bonzini <pbonzini@redhat.com>,
	Alex =?iso-8859-1?Q?Benn=E9e?= <alex.bennee@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


--ggdAeHltlv4tpqCr
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Thu, Dec 13, 2018 at 12:03:58AM -0500, Emilio G. Cota wrote:
> In ppce500_spin.c, acquire the lock just once to update
> both cpu->halted and cpu->stopped.
>=20
> In hw/ppc/spapr_hcall.c, acquire the lock just once to
> update cpu->halted and call cpu_has_work, since later
> in the series we'll acquire the BQL (if not already held)
> from cpu_has_work.
>=20
> Cc: David Gibson <david@gibson.dropbear.id.au>
> Cc: Alexander Graf <agraf@suse.de>
> Cc: qemu-ppc@nongnu.org
> Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
> Signed-off-by: Emilio G. Cota <cota@braap.org>

Acked-by: David Gibson <david@gibson.dropbear.id.au>

> ---
>  target/ppc/helper_regs.h        |  2 +-
>  hw/ppc/e500.c                   |  4 ++--
>  hw/ppc/ppc.c                    | 10 +++++-----
>  hw/ppc/ppce500_spin.c           |  6 ++++--
>  hw/ppc/spapr_cpu_core.c         |  4 ++--
>  hw/ppc/spapr_hcall.c            |  4 +++-
>  hw/ppc/spapr_rtas.c             |  6 +++---
>  target/ppc/excp_helper.c        |  4 ++--
>  target/ppc/kvm.c                |  4 ++--
>  target/ppc/translate_init.inc.c |  6 +++---
>  10 files changed, 27 insertions(+), 23 deletions(-)
>=20
> diff --git a/target/ppc/helper_regs.h b/target/ppc/helper_regs.h
> index 5efd18049e..9298052ac5 100644
> --- a/target/ppc/helper_regs.h
> +++ b/target/ppc/helper_regs.h
> @@ -161,7 +161,7 @@ static inline int hreg_store_msr(CPUPPCState *env, ta=
rget_ulong value,
>  #if !defined(CONFIG_USER_ONLY)
>      if (unlikely(msr_pow =3D=3D 1)) {
>          if (!env->pending_interrupts && (*env->check_pow)(env)) {
> -            cs->halted =3D 1;
> +            cpu_halted_set(cs, 1);
>              excp =3D EXCP_HALTED;
>          }
>      }
> diff --git a/hw/ppc/e500.c b/hw/ppc/e500.c
> index e6747fce28..6843c545b7 100644
> --- a/hw/ppc/e500.c
> +++ b/hw/ppc/e500.c
> @@ -657,7 +657,7 @@ static void ppce500_cpu_reset_sec(void *opaque)
> =20
>      /* Secondary CPU starts in halted state for now. Needs to change when
>         implementing non-kernel boot. */
> -    cs->halted =3D 1;
> +    cpu_halted_set(cs, 1);
>      cs->exception_index =3D EXCP_HLT;
>  }
> =20
> @@ -671,7 +671,7 @@ static void ppce500_cpu_reset(void *opaque)
>      cpu_reset(cs);
> =20
>      /* Set initial guest state. */
> -    cs->halted =3D 0;
> +    cpu_halted_set(cs, 0);
>      env->gpr[1] =3D (16 * MiB) - 8;
>      env->gpr[3] =3D bi->dt_base;
>      env->gpr[4] =3D 0;
> diff --git a/hw/ppc/ppc.c b/hw/ppc/ppc.c
> index ec4be25f49..d1a5a0b877 100644
> --- a/hw/ppc/ppc.c
> +++ b/hw/ppc/ppc.c
> @@ -151,7 +151,7 @@ static void ppc6xx_set_irq(void *opaque, int pin, int=
 level)
>              /* XXX: Note that the only way to restart the CPU is to rese=
t it */
>              if (level) {
>                  LOG_IRQ("%s: stop the CPU\n", __func__);
> -                cs->halted =3D 1;
> +                cpu_halted_set(cs, 1);
>              }
>              break;
>          case PPC6xx_INPUT_HRESET:
> @@ -230,10 +230,10 @@ static void ppc970_set_irq(void *opaque, int pin, i=
nt level)
>              /* XXX: TODO: relay the signal to CKSTP_OUT pin */
>              if (level) {
>                  LOG_IRQ("%s: stop the CPU\n", __func__);
> -                cs->halted =3D 1;
> +                cpu_halted_set(cs, 1);
>              } else {
>                  LOG_IRQ("%s: restart the CPU\n", __func__);
> -                cs->halted =3D 0;
> +                cpu_halted_set(cs, 0);
>                  qemu_cpu_kick(cs);
>              }
>              break;
> @@ -361,10 +361,10 @@ static void ppc40x_set_irq(void *opaque, int pin, i=
nt level)
>              /* Level sensitive - active low */
>              if (level) {
>                  LOG_IRQ("%s: stop the CPU\n", __func__);
> -                cs->halted =3D 1;
> +                cpu_halted_set(cs, 1);
>              } else {
>                  LOG_IRQ("%s: restart the CPU\n", __func__);
> -                cs->halted =3D 0;
> +                cpu_halted_set(cs, 0);
>                  qemu_cpu_kick(cs);
>              }
>              break;
> diff --git a/hw/ppc/ppce500_spin.c b/hw/ppc/ppce500_spin.c
> index c45fc858de..4b3532730f 100644
> --- a/hw/ppc/ppce500_spin.c
> +++ b/hw/ppc/ppce500_spin.c
> @@ -107,9 +107,11 @@ static void spin_kick(CPUState *cs, run_on_cpu_data =
data)
>      map_start =3D ldq_p(&curspin->addr) & ~(map_size - 1);
>      mmubooke_create_initial_mapping(env, 0, map_start, map_size);
> =20
> -    cs->halted =3D 0;
> -    cs->exception_index =3D -1;
> +    cpu_mutex_lock(cs);
> +    cpu_halted_set(cs, 0);
>      cs->stopped =3D false;
> +    cpu_mutex_unlock(cs);
> +    cs->exception_index =3D -1;
>      qemu_cpu_kick(cs);
>  }
> =20
> diff --git a/hw/ppc/spapr_cpu_core.c b/hw/ppc/spapr_cpu_core.c
> index 2398ce62c0..4c9c60b53b 100644
> --- a/hw/ppc/spapr_cpu_core.c
> +++ b/hw/ppc/spapr_cpu_core.c
> @@ -37,7 +37,7 @@ static void spapr_cpu_reset(void *opaque)
>      /* All CPUs start halted.  CPU0 is unhalted from the machine level
>       * reset code and the rest are explicitly started up by the guest
>       * using an RTAS call */
> -    cs->halted =3D 1;
> +    cpu_halted_set(cs, 1);
> =20
>      /* Set compatibility mode to match the boot CPU, which was either set
>       * by the machine reset code or by CAS. This should never fail.
> @@ -91,7 +91,7 @@ void spapr_cpu_set_entry_state(PowerPCCPU *cpu, target_=
ulong nip, target_ulong r
>      env->nip =3D nip;
>      env->gpr[3] =3D r3;
>      kvmppc_set_reg_ppc_online(cpu, 1);
> -    CPU(cpu)->halted =3D 0;
> +    cpu_halted_set(CPU(cpu), 0);
>      /* Enable Power-saving mode Exit Cause exceptions */
>      ppc_store_lpcr(cpu, env->spr[SPR_LPCR] | pcc->lpcr_pm);
>  }
> diff --git a/hw/ppc/spapr_hcall.c b/hw/ppc/spapr_hcall.c
> index ae913d070f..9891fc7740 100644
> --- a/hw/ppc/spapr_hcall.c
> +++ b/hw/ppc/spapr_hcall.c
> @@ -1088,11 +1088,13 @@ static target_ulong h_cede(PowerPCCPU *cpu, sPAPR=
MachineState *spapr,
> =20
>      env->msr |=3D (1ULL << MSR_EE);
>      hreg_compute_hflags(env);
> +    cpu_mutex_lock(cs);
>      if (!cpu_has_work(cs)) {
> -        cs->halted =3D 1;
> +        cpu_halted_set(cs, 1);
>          cs->exception_index =3D EXCP_HLT;
>          cs->exit_request =3D 1;
>      }
> +    cpu_mutex_unlock(cs);
>      return H_SUCCESS;
>  }
> =20
> diff --git a/hw/ppc/spapr_rtas.c b/hw/ppc/spapr_rtas.c
> index d6a0952154..925f67123c 100644
> --- a/hw/ppc/spapr_rtas.c
> +++ b/hw/ppc/spapr_rtas.c
> @@ -109,7 +109,7 @@ static void rtas_query_cpu_stopped_state(PowerPCCPU *=
cpu_,
>      id =3D rtas_ld(args, 0);
>      cpu =3D spapr_find_cpu(id);
>      if (cpu !=3D NULL) {
> -        if (CPU(cpu)->halted) {
> +        if (cpu_halted(CPU(cpu))) {
>              rtas_st(rets, 1, 0);
>          } else {
>              rtas_st(rets, 1, 2);
> @@ -153,7 +153,7 @@ static void rtas_start_cpu(PowerPCCPU *callcpu, sPAPR=
MachineState *spapr,
>      env =3D &newcpu->env;
>      pcc =3D POWERPC_CPU_GET_CLASS(newcpu);
> =20
> -    if (!CPU(newcpu)->halted) {
> +    if (!cpu_halted(CPU(newcpu))) {
>          rtas_st(rets, 0, RTAS_OUT_HW_ERROR);
>          return;
>      }
> @@ -207,7 +207,7 @@ static void rtas_stop_self(PowerPCCPU *cpu, sPAPRMach=
ineState *spapr,
>       * This could deliver an interrupt on a dying CPU and crash the
>       * guest */
>      ppc_store_lpcr(cpu, env->spr[SPR_LPCR] & ~pcc->lpcr_pm);
> -    cs->halted =3D 1;
> +    cpu_halted_set(cs, 1);
>      kvmppc_set_reg_ppc_online(cpu, 0);
>      qemu_cpu_kick(cs);
>  }
> diff --git a/target/ppc/excp_helper.c b/target/ppc/excp_helper.c
> index 0ec7ae1ad4..5e1778584a 100644
> --- a/target/ppc/excp_helper.c
> +++ b/target/ppc/excp_helper.c
> @@ -206,7 +206,7 @@ static inline void powerpc_excp(PowerPCCPU *cpu, int =
excp_model, int excp)
>                  qemu_log("Machine check while not allowed. "
>                          "Entering checkstop state\n");
>              }
> -            cs->halted =3D 1;
> +            cpu_halted_set(cs, 1);
>              cpu_interrupt_exittb(cs);
>          }
>          if (env->msr_mask & MSR_HVB) {
> @@ -954,7 +954,7 @@ void helper_pminsn(CPUPPCState *env, powerpc_pm_insn_=
t insn)
>      CPUState *cs;
> =20
>      cs =3D CPU(ppc_env_get_cpu(env));
> -    cs->halted =3D 1;
> +    cpu_halted_set(cs, 1);
>      env->in_pm_state =3D true;
> =20
>      /* The architecture specifies that HDEC interrupts are
> diff --git a/target/ppc/kvm.c b/target/ppc/kvm.c
> index f81327d6cd..557faa3637 100644
> --- a/target/ppc/kvm.c
> +++ b/target/ppc/kvm.c
> @@ -1370,7 +1370,7 @@ MemTxAttrs kvm_arch_post_run(CPUState *cs, struct k=
vm_run *run)
> =20
>  int kvm_arch_process_async_events(CPUState *cs)
>  {
> -    return cs->halted;
> +    return cpu_halted(cs);
>  }
> =20
>  static int kvmppc_handle_halt(PowerPCCPU *cpu)
> @@ -1379,7 +1379,7 @@ static int kvmppc_handle_halt(PowerPCCPU *cpu)
>      CPUPPCState *env =3D &cpu->env;
> =20
>      if (!(cs->interrupt_request & CPU_INTERRUPT_HARD) && (msr_ee)) {
> -        cs->halted =3D 1;
> +        cpu_halted_set(cs, 1);
>          cs->exception_index =3D EXCP_HLT;
>      }
> =20
> diff --git a/target/ppc/translate_init.inc.c b/target/ppc/translate_init.=
inc.c
> index 168d0cec28..986bbd7eb4 100644
> --- a/target/ppc/translate_init.inc.c
> +++ b/target/ppc/translate_init.inc.c
> @@ -8462,7 +8462,7 @@ static bool cpu_has_work_POWER7(CPUState *cs)
>      PowerPCCPU *cpu =3D POWERPC_CPU(cs);
>      CPUPPCState *env =3D &cpu->env;
> =20
> -    if (cs->halted) {
> +    if (cpu_halted(cs)) {
>          if (!(cs->interrupt_request & CPU_INTERRUPT_HARD)) {
>              return false;
>          }
> @@ -8616,7 +8616,7 @@ static bool cpu_has_work_POWER8(CPUState *cs)
>      PowerPCCPU *cpu =3D POWERPC_CPU(cs);
>      CPUPPCState *env =3D &cpu->env;
> =20
> -    if (cs->halted) {
> +    if (cpu_halted(cs)) {
>          if (!(cs->interrupt_request & CPU_INTERRUPT_HARD)) {
>              return false;
>          }
> @@ -8808,7 +8808,7 @@ static bool cpu_has_work_POWER9(CPUState *cs)
>      PowerPCCPU *cpu =3D POWERPC_CPU(cs);
>      CPUPPCState *env =3D &cpu->env;
> =20
> -    if (cs->halted) {
> +    if (cpu_halted(cs)) {
>          if (!(cs->interrupt_request & CPU_INTERRUPT_HARD)) {
>              return false;
>          }

--=20
David Gibson			| I'll have my music baroque, and my code
david AT gibson.dropbear.id.au	| minimalist, thank you.  NOT _the_ _other_
				| _way_ _around_!
http://www.ozlabs.org/~dgibson

--ggdAeHltlv4tpqCr
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEdfRlhq5hpmzETofcbDjKyiDZs5IFAlwUw0IACgkQbDjKyiDZ
s5LG1RAAyed1YKsO+t/lPF5enpb4uO5UglZ+pVf5nXaXxo4ts3F4R0+OfWkB5XBx
10/xMBKnbefZCLF+66OugQJdbVvTVyBcmOBfoDYdI/RGGDQlnbZ84AU5e1KWpUvW
JyBkuztlxK+fkN0eaB2sdQC0xrekVPSEWxuc7vVqZMDwIzPwxfDgVBJwIVI1OFxp
8RYKKtlkpSftGwwYtMjwm0hlhNFKbLjZpn5iQNcdE0bPztsI+iq01gfOoVjUnAiV
Y2IcYy6hqelNLOIna/J+czdSrJzA5oKcqTxH2NEcPbXltA4M/LkMgRT91T/tjoo5
iKSa7XUE8N46CuTeS5wTBv1CNI5qnNP2OKVvDRumDLtzaNhCjhFpjGblWf2QQijl
5wz/zG679hNcBz9j11t2xBuXVfdkMt7CTHVflV11PjUDsc1xZv70fwghrjOQXxfu
3lQKTzLBe3CK/CE5DojRBj/wMuVw0VopudN9Z0Ycl9dCf/q1pEJBdu3SaYo1V86F
pbKm/LJcH97Bu3EqIcYBGnK3ewsKofExrCKskvFlbLhIYxXcHiFWjz5dANrucqIj
IhEioqchzomQFEhpv1J2jnmNwVpAJRucn7VKGHxKETuUCpnHg/k5OHlq83EuGHm5
AYcBRPNc/b0PCfME8MLx3gGbH3wwD2TxEt4DNZ+vrcR7EfcgQDE=
=zRXk
-----END PGP SIGNATURE-----

--ggdAeHltlv4tpqCr--

