Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 08:51:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2E394580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 06:30:31 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 06:30:30 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AwOd3iB2vkYlE9ibysmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMfLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCDIOz?=
 =?us-ascii?q?YJcAAPcDMulWoIfzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QhCBvL0BA8E98UrX?=
 =?us-ascii?q?jZqsj+OqcIUeCyyanF1TrNYO5L2Tjn8ojHbxchquyOU71qasXRyk4vFxjZjl6N?=
 =?us-ascii?q?roHqITOV2f4WvGiY6OpgTv6vhnU9qw5vvzevxt0jipXTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iXx/dL6hhBu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj46l+p0FngluEyuBDivpEEscbwvRSWQc3KYLVh7hlAtH0Vxjae/+TRVqm?=
 =?us-ascii?q?S8ngCjY0GIEf2dgLNmtxBty4gheL/yOgALgOi/TfCZw9+KHbxGTZPctxy3/akq?=
 =?us-ascii?q?Imig91EYN0KWS6i/snpEDoDInTnhDczv7yeA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAACwGhFcmBHrdtBjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gRYTjBRfizOCDXyWVxSBXxQYBw2BS4J1gn4?=
 =?us-ascii?q?iNAkNAQMBAQEBAQECARMBAQEBAQgLCwYbDiMMgjYFAgMaAQaCWwEBAQECAQECJ?=
 =?us-ascii?q?B8KKQMDAQIGAQEKGAkdCAMBCwVJEwWDHAGBeQgBBKZqM4QtAYYBjDwXgUA/gRG?=
 =?us-ascii?q?CFEk1hEYVJoVbAoswhBWRRwmHC4pBI4FciA02hyeZP4FGgg4zGggbFYMnCYIeF?=
 =?us-ascii?q?4kvhQYpMYEHHIoUVYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ACAACwGhFcmBHrdtBjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gRYTjBRfizOCDXyWVxSBXxQYBw2BS4J1gn4iNAkNAQMBAQEBA?=
 =?us-ascii?q?QECARMBAQEBAQgLCwYbDiMMgjYFAgMaAQaCWwEBAQECAQECJB8KKQMDAQIGAQE?=
 =?us-ascii?q?KGAkdCAMBCwVJEwWDHAGBeQgBBKZqM4QtAYYBjDwXgUA/gRGCFEk1hEYVJoVbA?=
 =?us-ascii?q?oswhBWRRwmHC4pBI4FciA02hyeZP4FGgg4zGggbFYMnCYIeF4kvhQYpMYEHHIo?=
 =?us-ascii?q?UVYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="scan'208";a="56593322"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 06:30:29 -0800
Received: from localhost ([::1]:45385 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gX5Wu-00018v-Ua
	for like.xu@linux.intel.com; Wed, 12 Dec 2018 09:30:28 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:38248)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gX5W6-0000ga-CJ
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 09:29:39 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gX5W3-00050k-45
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 09:29:38 -0500
Received: from mx1.redhat.com ([209.132.183.28]:50766)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ehabkost@redhat.com>) id 1gX5W2-00050J-RM
	for qemu-devel@nongnu.org; Wed, 12 Dec 2018 09:29:35 -0500
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
	[10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id D2227C049594;
	Wed, 12 Dec 2018 14:29:33 +0000 (UTC)
Received: from localhost (ovpn-116-63.gru2.redhat.com [10.97.116.63])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 62055600C9;
	Wed, 12 Dec 2018 14:29:27 +0000 (UTC)
Date: Wed, 12 Dec 2018 12:29:26 -0200
From: Eduardo Habkost <ehabkost@redhat.com>
To: Wainer dos Santos Moschetta <wainersm@redhat.com>
Message-ID: <20181212142926.GT7141@habkost.net>
References: <20181211192527.13254-1-ehabkost@redhat.com>
	<7525c0fa-037d-e408-cd49-244993ef5387@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
In-Reply-To: <7525c0fa-037d-e408-cd49-244993ef5387@redhat.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Wed, 12 Dec 2018 14:29:33 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH] x86: host-phys-bits-limit option
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Andrea Arcangeli <aarcange@redhat.com>, paul.c.lai@intel.com,
	qemu-devel@nongnu.org, Bandan Das <bsd@redhat.com>,
	Yu Zhang <yu.c.zhang@linux.intel.com>, Paolo Bonzini <pbonzini@redhat.com>,
	Igor Mammedov <imammedo@redhat.com>, Richard Henderson <rth@twiddle.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Dec 12, 2018 at 12:08:08PM -0200, Wainer dos Santos Moschetta wro=
te:
>=20
> On 12/11/2018 05:25 PM, Eduardo Habkost wrote:
> > Some downstream distributions of QEMU set host-phys-bits=3Don by
> > default.  This worked very well for most use cases, because
> > phys-bits really didn't have huge consequences. The only
> > difference was on the CPUID data seen by guests, and on the
> > handling of reserved bits.
> >=20
> > This changed in KVM commit 855feb673640 ("KVM: MMU: Add 5 level
> > EPT & Shadow page table support").  Now choosing a large
> > phys-bits value for a VM has bigger impact: it will make KVM use
> > 5-level EPT even when it's not really necessary.  This means
> > using the host phys-bits value may not be the best choice.
> >=20
> > Management software could address this problem by manually
> > configuring phys-bits depending on the size of the VM and the
> > amount of MMIO address space required for hotplug.  But this is
> > not trivial to implement.
> >=20
> > However, there's another workaround that would work for most
> > cases: keep using the host phys-bits value, but only if it's
> > smaller than 48.  This patch makes this possible by introducing a
> > new "-cpu" option: "host-phys-bits-limit".  Management software
> > or users can make sure they will always use 4-level EPT using:
> > "host-phys-bits=3Don,host-phys-bits-limit=3D48".
> >=20
> > This behavior is still not enabled by default because QEMU
> > doesn't enable host-phys-bits=3Don by default.  But users,
> > management software, or downstream distributions may choose to
> > change their defaults using the new option.
> >=20
> > Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
> > ---
> >   target/i386/cpu.h                 |  3 ++
> >   target/i386/cpu.c                 |  5 ++
> >   tests/acceptance/x86-phys-bits.py | 81 ++++++++++++++++++++++++++++=
+++
> >   3 files changed, 89 insertions(+)
> >   create mode 100644 tests/acceptance/x86-phys-bits.py
> >=20
> > diff --git a/target/i386/cpu.h b/target/i386/cpu.h
> > index 9c52d0cbeb..a545b77c2c 100644
> > --- a/target/i386/cpu.h
> > +++ b/target/i386/cpu.h
> > @@ -1457,6 +1457,9 @@ struct X86CPU {
> >       /* if true override the phys_bits value with a value read from =
the host */
> >       bool host_phys_bits;
> > +    /* if set, limit maximum value for phys_bits when host_phys_bits=
 is true */
> > +    uint8_t host_phys_bits_limit;
> > +
> >       /* Stop SMI delivery for migration compatibility with old machi=
nes */
> >       bool kvm_no_smi_migration;
> > diff --git a/target/i386/cpu.c b/target/i386/cpu.c
> > index f81d35e1f9..df200754a2 100644
> > --- a/target/i386/cpu.c
> > +++ b/target/i386/cpu.c
> > @@ -5152,6 +5152,10 @@ static void x86_cpu_realizefn(DeviceState *dev=
, Error **errp)
> >               if (cpu->host_phys_bits) {
> >                   /* The user asked for us to use the host physical b=
its */
> >                   cpu->phys_bits =3D host_phys_bits;
> > +                if (cpu->host_phys_bits_limit &&
> > +                    cpu->phys_bits > cpu->host_phys_bits_limit) {
> > +                    cpu->phys_bits =3D cpu->host_phys_bits_limit;
> > +                }
> >               }
> >               /* Print a warning if the user set it to a value that's=
 not the
> > @@ -5739,6 +5743,7 @@ static Property x86_cpu_properties[] =3D {
> >       DEFINE_PROP_BOOL("kvm", X86CPU, expose_kvm, true),
> >       DEFINE_PROP_UINT32("phys-bits", X86CPU, phys_bits, 0),
> >       DEFINE_PROP_BOOL("host-phys-bits", X86CPU, host_phys_bits, fals=
e),
> > +    DEFINE_PROP_UINT8("host-phys-bits-limit", X86CPU, host_phys_bits=
_limit, 0),
> >       DEFINE_PROP_BOOL("fill-mtrr-mask", X86CPU, fill_mtrr_mask, true=
),
> >       DEFINE_PROP_UINT32("level", X86CPU, env.cpuid_level, UINT32_MAX=
),
> >       DEFINE_PROP_UINT32("xlevel", X86CPU, env.cpuid_xlevel, UINT32_M=
AX),
>=20
> The changes to introduce the host-phys-bits-limit option looks good to =
me,
> although I haven't much knowledge on this area anyway...
>=20
> > diff --git a/tests/acceptance/x86-phys-bits.py b/tests/acceptance/x86=
-phys-bits.py
> > new file mode 100644
> > index 0000000000..ae85d7e4e7
> > --- /dev/null
> > +++ b/tests/acceptance/x86-phys-bits.py
>=20
> PEP8 does not have a convention for Python files naming, although it
> suggests the use of underscore on module and package names. We already =
have
> the tests/acceptance/boot_linux_console.py with underscore, so I think =
we
> should make it a convention.

Agreed: it's better to be consistent.

>=20
>=20
> > @@ -0,0 +1,81 @@
> > +# Test for host-phys-bits-limit option
> > +#
> > +# Copyright (c) 2018 Red Hat, Inc.
> > +#
> > +# Author:
> > +#  Eduardo Habkost <ehabkost@redhat.com>
> > +#
> > +# This work is licensed under the terms of the GNU GPL, version 2 or
> > +# later.  See the COPYING file in the top-level directory.
> > +import re
> > +
> > +from avocado_qemu import Test
> > +
> > +class HostPhysbits(Test):
> > +    """
> > +    Check if `host-phys-bits` and `host-phys-bits` options work.
>=20
> Did you mean "`host-phys-bits` and `host-phys-bits-limit`?

Yes, thanks for catching it!

>=20
> > +
> > +    :avocado: enable
> > +    :avocado: tags=3Dx86_64
> > +    """
> > +
> > +    def cpu_qom_get(self, prop):
> > +        qom_path =3D self.vm.command('query-cpus')[0]['qom_path']
> > +        return self.vm.command('qom-get', path=3Dqom_path, property=3D=
prop)
> > +
> > +    def cpu_phys_bits(self):
> > +        return self.cpu_qom_get('phys-bits')
> > +
> > +    def host_phys_bits(self):
> > +        cpuinfo =3D open('/proc/cpuinfo', 'rb').read()
> > +        m =3D re.search(b'([0-9]+) bits physical', cpuinfo)
>=20
> pylint says:
>=20
> "tests/acceptance/x86-phys-bits.py:31:8: C0103: Variable name "m" doesn=
't
> conform to snake_case naming style (invalid-name)"

This is one of those cases where I think a more descriptive name
would make the code less readable.

>=20
> It also warns about "Missing method docstring" for each test method. I =
don't
> know whether we should convention that every method must have a docstri=
ng
> explaining the test, or just ignore that warn.

I don't think we should require docstrings for all test methods.
I'm already bothered by the current amount of boilerplate
required by the unittest-like Avocado API.

>=20
> > +        if m is None:
> > +            self.cancel("Couldn't read phys-bits from /proc/cpuinfo"=
)
>=20
> I suggest something like 'bits physical size' instead of 'phys-bits'.

"physical address size" would be more accurate, I will change it.


>=20
> > +        return int(m.group(1))
> > +
> > +    def setUp(self):
> > +        super(HostPhysbits, self).setUp()
> > +        self.vm.add_args('-S', '-machine', 'accel=3Dkvm:tcg')
>=20
> I'm curious to know why you freeze the CPU at start (-S).

Starting the VCPUs would be pointless, as there's no guest code
to run at all.  It would just waste CPU cycles stuck in BIOS boot
code.

>=20
> > +        self.vm.launch()
> > +        if not self.vm.command('query-kvm')['enabled']:
> > +            self.cancel("Test case requires KVM")
> > +        self.vm.shutdown()
> > +
> > +
> > +    def test_no_host_phys_bits(self):
> > +        # default should be phys-bits=3D40 if host-phys-bits=3Doff
>=20
> Perhaps put that comment in a docstring block.

I considered that, but then I thought that the comment doesn't
describe the purpose of the test method at all.  It just
clarifies why we are testing for phys-bits=3D40 below.


>=20
> > +        self.vm.add_args('-cpu', 'qemu64,host-phys-bits=3Doff')
> > +        self.vm.launch()
> > +        self.assertEqual(self.cpu_phys_bits(), 40)
[...]
>=20
> Suppose an user sets both host-phys-bits and phys-bits by mistake. What=
 is
> the expected outcome? If this case is relevant...below test case fails
> (phys-bits is set to host's):
>=20
> =A0=A0=A0 def test_manual_phys_bits_mistake(self):
> =A0=A0=A0=A0=A0=A0=A0 """
> =A0=A0=A0=A0=A0=A0=A0 By mistake set host-phys-bits=3Don and phys-bits
> =A0=A0=A0=A0=A0=A0=A0 """
> =A0=A0=A0=A0=A0=A0=A0 self.vm.add_args('-cpu', 'qemu64,host-phys-bits=3D=
on,phys-bits=3D35')
> =A0=A0=A0=A0=A0=A0=A0 self.vm.launch()
> =A0=A0=A0=A0=A0=A0=A0 self.assertEqual(self.cpu_phys_bits(), 35)

host-phys-bits overrides phys-bits, but I don't think we need to
make it a supported use case.

--=20
Eduardo

