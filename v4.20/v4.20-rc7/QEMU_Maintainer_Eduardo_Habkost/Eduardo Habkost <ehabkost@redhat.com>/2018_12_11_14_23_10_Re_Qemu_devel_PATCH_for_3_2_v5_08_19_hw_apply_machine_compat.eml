Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:47:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2813258079D
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 06:23:41 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 06:23:40 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AbKPp5B0JnmqtO/xhsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMfL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCDIOz?=
 =?us-ascii?q?YJcAAPcDMulWoIfzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QhCBvL0BA8E98UrX?=
 =?us-ascii?q?jZqsj+OqcIUeCyyanF1TrNYO5L2Tjn8ojHbxchquyOU71qasXRyk4vFxjZjl6N?=
 =?us-ascii?q?roHqITOV2f4WvGiY6OpgTv6vhnU9qw5vvzevxt0jipXTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iXx/dL6hhBu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8syHSv?=
 =?us-ascii?q?pm/ke9wjaDzQ/T6udZIUwukqrbMZEhzqYxlpoVr0vDAjf7lFvqgKKVbEko5/Wk?=
 =?us-ascii?q?5uf9brn4qJKRN5V4hhz8P6g2n8ywG+U4MgwAX2iB/uS80aXu/VTnT7VPk/06i7?=
 =?us-ascii?q?TWv47EJcsFoq61GhRa0oE+6xa5Ezipzs8YkX4DLFJEexKIkZLlOl7TIP3gCfe/?=
 =?us-ascii?q?glKskCpkxvzcP73hBInNIWbHkLv7Ybl97EtcxRE1zdBY4ZJUBbcBIO/pVk/2rt?=
 =?us-ascii?q?zYAQc1MxaozOb/FNV9yoQeVHqLAq+YM6Pdr0WE5+0yI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmcA2kZ2HxiIIBDXsSpVh5C+jrk0GZFzhUYXm0Qu?=
 =?us-ascii?q?Q7/D58DYunCYLKQMeqmKCA2yGgWYRbY30DBl2SHHO7SoOfRv1ZbSuTJtNmwCUJ?=
 =?us-ascii?q?UKXkR4I/2BXrrgLj1rd8MsLS/SsXs4+l08J6sPbOnxM//iAhEsKGzmuWRHt1lG?=
 =?us-ascii?q?5bezhj+allqglUzFuZUOBcnuZVHMEbs/ZASAwzM5LGwqp+Fsr/Ux/pZNqFSF+6?=
 =?us-ascii?q?BN6hBGdiYMg2xoojb1t0AdmlxjDK1SmtGKNdw7GLDZY39bnA92L8K8Z01zDN06?=
 =?us-ascii?q?x33ApueddGKWDz3v03zAPUHYOc1hzBz6s=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AwAADaxw9cmBHrdtBlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYExgk+NBosxgg2ZRRQYFIRAgm4iOBIBAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOL4I2BQIDGgEGglwBAgIBAQIkHwopAwMBAgYBAQohGgMIAwELBUkYg?=
 =?us-ascii?q?xyBeggBBKYtM4orjDsXgUA/gRGDEoUBgzWCJgKLK5VQCZFGI4lmh1qZM4FdgXc?=
 =?us-ascii?q?zGggbFTuCbYImFxKOIymBOByIToF0AwEB?=
X-IPAS-Result: =?us-ascii?q?A0AwAADaxw9cmBHrdtBlGgEBAQEBAgEBAQEHAgEBAQGBZYE?=
 =?us-ascii?q?xgk+NBosxgg2ZRRQYFIRAgm4iOBIBAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2B?=
 =?us-ascii?q?QIDGgEGglwBAgIBAQIkHwopAwMBAgYBAQohGgMIAwELBUkYgxyBeggBBKYtM4o?=
 =?us-ascii?q?rjDsXgUA/gRGDEoUBgzWCJgKLK5VQCZFGI4lmh1qZM4FdgXczGggbFTuCbYImF?=
 =?us-ascii?q?xKOIymBOByIToF0AwEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="55423656"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 06:23:39 -0800
Received: from localhost ([::1]:38416 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWiwl-0002bz-9F
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 09:23:39 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37892)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gWiwa-0002av-9R
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 09:23:29 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ehabkost@redhat.com>) id 1gWiwZ-0004HH-1x
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 09:23:28 -0500
Received: from mx1.redhat.com ([209.132.183.28]:32802)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ehabkost@redhat.com>)
	id 1gWiwU-0004Dz-8p; Tue, 11 Dec 2018 09:23:22 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 15A8830820D8;
	Tue, 11 Dec 2018 14:23:20 +0000 (UTC)
Received: from localhost (ovpn-116-63.gru2.redhat.com [10.97.116.63])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 8ECB8105706C;
	Tue, 11 Dec 2018 14:23:11 +0000 (UTC)
Date: Tue, 11 Dec 2018 12:23:10 -0200
From: Eduardo Habkost <ehabkost@redhat.com>
To: =?iso-8859-1?Q?Marc-Andr=E9?= Lureau <marcandre.lureau@redhat.com>
Message-ID: <20181211142310.GB20015@habkost.net>
References: <20181204142023.15982-1-marcandre.lureau@redhat.com>
	<20181204142023.15982-9-marcandre.lureau@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
In-Reply-To: <20181204142023.15982-9-marcandre.lureau@redhat.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.47]);
	Tue, 11 Dec 2018 14:23:21 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v5 08/19] hw: apply machine compat
 properties without touching globals
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Peter Maydell <peter.maydell@linaro.org>,
	David Hildenbrand <david@redhat.com>,
	"open list:sPAPR" <qemu-ppc@nongnu.org>,
	Cornelia Huck <cohuck@redhat.com>, qemu-devel@nongnu.org,
	Christian Borntraeger <borntraeger@de.ibm.com>,
	"open list:S390" <qemu-s390x@nongnu.org>,
	"open list:Virt" <qemu-arm@nongnu.org>,
	"Michael S. Tsirkin" <mst@redhat.com>, imammedo@redhat.com,
	Paolo Bonzini <pbonzini@redhat.com>, Richard Henderson <rth@twiddle.net>,
	David Gibson <david@gibson.dropbear.id.au>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

I have specific questions about the approach we are using to
eliminate the macros.

My main goal when asking this to be moved to a separate patch is
to not make this discussion block the register_global_properties() &
device_post_init() changes (which look good to me).


On Tue, Dec 04, 2018 at 06:20:12PM +0400, Marc-Andr=E9 Lureau wrote:
[...]
> -#define VIRT_COMPAT_3_0 \
> +static GlobalProperty virt_compat_3_0[] =3D {
>      HW_COMPAT_3_0
> +};

What about moving the array inside virt_machine_3_0_options()?

> =20
>  static void virt_3_0_instance_init(Object *obj)
>  {
> @@ -1883,12 +1884,14 @@ static void virt_3_0_instance_init(Object *obj)
>  static void virt_machine_3_0_options(MachineClass *mc)
>  {
>      virt_machine_3_1_options(mc);
> -    SET_MACHINE_COMPAT(mc, VIRT_COMPAT_3_0);
> +    compat_props_add(mc->compat_props,
> +                     virt_compat_3_0, G_N_ELEMENTS(virt_compat_3_0));
>  }
>  DEFINE_VIRT_MACHINE(3, 0)

This is nice, because it's basically the same amount of
boilerplate code, but I would find a NULL-terminated array much
easier to use than having to use G_N_ELEMENTS().

This would be nice in cases like virt, because we wouldn't even
need to declare a separate array.  We could do something like:

    compat_props_add(mc->compat_props, hw_compat_3_0);

and that's all.  No need for HW_COMPAT_* macros, no need for
extra arrays to be declared.


[...]
> diff --git a/hw/i386/pc_piix.c b/hw/i386/pc_piix.c
> index 7092d6d13f..575566e466 100644
> --- a/hw/i386/pc_piix.c
> +++ b/hw/i386/pc_piix.c
> @@ -438,74 +438,112 @@ static void pc_i440fx_3_1_machine_options(Machin=
eClass *m)
>  DEFINE_I440FX_MACHINE(v3_1, "pc-i440fx-3.1", NULL,
>                        pc_i440fx_3_1_machine_options);
> =20
> +static GlobalProperty pc_compat_3_0[] =3D {
> +    PC_COMPAT_3_0
> +};
> +
>  static void pc_i440fx_3_0_machine_options(MachineClass *m)
>  {
>      pc_i440fx_3_1_machine_options(m);
>      m->is_default =3D 0;
>      m->alias =3D NULL;
> -    SET_MACHINE_COMPAT(m, PC_COMPAT_3_0);
> +
> +    compat_props_add(m->compat_props,
> +                     pc_compat_3_0, G_N_ELEMENTS(pc_compat_3_0));
>  }
> =20
>  DEFINE_I440FX_MACHINE(v3_0, "pc-i440fx-3.0", NULL,
>                        pc_i440fx_3_0_machine_options);

Now, this is requiring _more_ boilerplate code than before.  I'd
like us to find a way to eliminate the macro without increasing
the amount of boilerplate code.


[...]
> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> index 7afd1a175b..d801ba71eb 100644
> --- a/hw/ppc/spapr.c
> +++ b/hw/ppc/spapr.c
> @@ -3973,8 +3973,9 @@ DEFINE_SPAPR_MACHINE(3_1, "3.1", true);
>  /*
>   * pseries-3.0
>   */
> -#define SPAPR_COMPAT_3_0                                              =
\
> +static GlobalProperty spapr_compat_3_0[] =3D {
>      HW_COMPAT_3_0
> +};
> =20
>  static void spapr_machine_3_0_instance_options(MachineState *machine)
>  {
> @@ -3986,7 +3987,8 @@ static void spapr_machine_3_0_class_options(Machi=
neClass *mc)
>      sPAPRMachineClass *smc =3D SPAPR_MACHINE_CLASS(mc);
> =20
>      spapr_machine_3_1_class_options(mc);
> -    SET_MACHINE_COMPAT(mc, SPAPR_COMPAT_3_0);
> +    compat_props_add(mc->compat_props,
> +                     spapr_compat_3_0, G_N_ELEMENTS(spapr_compat_3_0))=
;
> =20
>      smc->legacy_irq_allocation =3D true;
>      smc->irq =3D &spapr_irq_xics_legacy;
> @@ -3997,18 +3999,19 @@ DEFINE_SPAPR_MACHINE(3_0, "3.0", false);
>  /*
>   * pseries-2.12
>   */
> -#define SPAPR_COMPAT_2_12                                             =
 \
> -    HW_COMPAT_2_12                                                    =
 \
> -    {                                                                 =
 \
> -        .driver =3D TYPE_POWERPC_CPU,                                 =
   \
> -        .property =3D "pre-3.0-migration",                            =
   \
> -        .value    =3D "on",                                           =
   \
> -    },                                                                =
 \
> -    {                                                                 =
 \
> -        .driver =3D TYPE_SPAPR_CPU_CORE,                              =
   \
> -        .property =3D "pre-3.0-migration",                            =
   \
> -        .value    =3D "on",                                           =
   \
> +static GlobalProperty spapr_compat_2_12[] =3D {
> +    HW_COMPAT_2_12
> +    {
> +        .driver =3D TYPE_POWERPC_CPU,
> +        .property =3D "pre-3.0-migration",
> +        .value    =3D "on",
> +    },
> +    {
> +        .driver =3D TYPE_SPAPR_CPU_CORE,
> +        .property =3D "pre-3.0-migration",
> +        .value    =3D "on",
>      },
> +};
> =20
>  static void spapr_machine_2_12_instance_options(MachineState *machine)
>  {
> @@ -4020,7 +4023,8 @@ static void spapr_machine_2_12_class_options(Mach=
ineClass *mc)
>      sPAPRMachineClass *smc =3D SPAPR_MACHINE_CLASS(mc);
> =20
>      spapr_machine_3_0_class_options(mc);
> -    SET_MACHINE_COMPAT(mc, SPAPR_COMPAT_2_12);
> +    compat_props_add(mc->compat_props,
> +                     spapr_compat_2_12, G_N_ELEMENTS(spapr_compat_2_12=
));

It would be nice to be able to write this as:

    static GlobalProperty spapr_compat_2_12[] =3D {
        {
            .driver =3D TYPE_POWERPC_CPU,
            .property =3D "pre-3.0-migration",
            .value    =3D "on",
        },
        {
            .driver =3D TYPE_SPAPR_CPU_CORE,
            .property =3D "pre-3.0-migration",
            .value    =3D "on",
        },
        { /* end of list */ },
    };

    compat_props_add(mc->compat_props, hw_compat_3_0);
    compat_props_add(mc->compat_props, spapr_compat_2_12);

This way we won't need the HW_COMPAT_* macros anymore.

Other than that, it's also basically the same amount of
boilerplate as before, so that's good.


> =20
>      /* We depend on kvm_enabled() to choose a default value for the
>       * hpt-max-page-size capability. Of course we can't do it here
[...]
> diff --git a/hw/s390x/s390-virtio-ccw.c b/hw/s390x/s390-virtio-ccw.c
> index a0615a8b35..275cbe5da4 100644
> --- a/hw/s390x/s390-virtio-ccw.c
> +++ b/hw/s390x/s390-virtio-ccw.c
> @@ -651,96 +651,106 @@ bool css_migration_enabled(void)
>      }                                                                 =
        \
>      type_init(ccw_machine_register_##suffix)
> =20
> -#define CCW_COMPAT_3_0 \
> -        HW_COMPAT_3_0
> -
> -#define CCW_COMPAT_2_12 \
> -        HW_COMPAT_2_12
> -
> -#define CCW_COMPAT_2_11 \
> -        HW_COMPAT_2_11 \
> -        {\
> -            .driver   =3D TYPE_SCLP_EVENT_FACILITY,\
> -            .property =3D "allow_all_mask_sizes",\
> -            .value    =3D "off",\
> -        },
[...]
> +static GlobalProperty ccw_compat_3_0[] =3D {
> +    HW_COMPAT_3_0
> +};
> +
> +static GlobalProperty ccw_compat_2_12[] =3D {
> +    HW_COMPAT_2_12
> +};
> +
> +static GlobalProperty ccw_compat_2_11[] =3D {
> +    HW_COMPAT_2_11
> +    {
> +        .driver   =3D TYPE_SCLP_EVENT_FACILITY,
> +        .property =3D "allow_all_mask_sizes",
> +        .value    =3D "off",
> +    },
> +};
[...]
> =20
>  static void ccw_machine_3_1_instance_options(MachineState *machine)
>  {
> @@ -762,7 +772,8 @@ static void ccw_machine_3_0_class_options(MachineCl=
ass *mc)
> =20
>      s390mc->hpage_1m_allowed =3D false;
>      ccw_machine_3_1_class_options(mc);
> -    SET_MACHINE_COMPAT(mc, CCW_COMPAT_3_0);
> +    compat_props_add(mc->compat_props,
> +                     ccw_compat_3_0, G_N_ELEMENTS(ccw_compat_3_0));

Same comments from spapr apply here: getting rid of the
HW_COMPAT_* macros would be nice, but this version is good enough
because it has the same amount of boilerplate code.


>  }
>  DEFINE_CCW_MACHINE(3_0, "3.0", false);
[...]

--=20
Eduardo

