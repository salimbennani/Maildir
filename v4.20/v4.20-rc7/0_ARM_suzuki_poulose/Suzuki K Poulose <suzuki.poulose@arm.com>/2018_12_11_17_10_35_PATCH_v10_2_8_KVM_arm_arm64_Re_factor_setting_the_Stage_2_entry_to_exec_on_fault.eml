Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:53:01 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D383458079D;
	Tue, 11 Dec 2018 09:12:18 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 09:12:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASypCEhJLDYC3JQZ4DNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULv/5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA37W/ZhM93gq1ZrhKhvAR/zozPbY2JKPZzZL/RcMkGSWZdWMtaSixPApm7?=
 =?us-ascii?q?b4sKF+cPIPtYrojgp1sNrBu1GAyiD/71xD9Pm3/22ao60/8/Hgrb2wEgBM8OsX?=
 =?us-ascii?q?XJrNX2NaceS/i1zK7VzTXHaPNWwiny5ZPSfRA7pPGAR65/cc3UyUQ2EQ7Ok1ae?=
 =?us-ascii?q?qZT9Mj+LyugAt3KX4/duWO6xkWIrtgJ8riS1ysotiITFnpwZxk3G+Clj3Yo4Ks?=
 =?us-ascii?q?G0RFRmbdK4DZdcrSOXO5dwT8g/WW9nojw6xacDuZOjfCgF1pAnxxnHZvyZfIiH?=
 =?us-ascii?q?/AjjWPySIThmnnJlfqywhxKo/Uin0O38WdG40FdMriVbjtnBrm4B2wDX58SdV/?=
 =?us-ascii?q?dw8Fmt1SyS2w3Q9u1IO0E5mKjDJ54k2LEwl54TsUrZHi/xnUX7lKuWdkQi+ui1?=
 =?us-ascii?q?5OXre7bmqYGGN49ylA7+Nr0imsuxAOQ+LAcORXOW+fqz1LL95031WrZKgeMskq?=
 =?us-ascii?q?nfrp/aId4XpqmjAw9ayooj8QqwDy+60NQEmnkKNFZFeBOEj4f3IV3PL+34AOy7?=
 =?us-ascii?q?g1Stljdr2v/HMqfgApXLMnjMjrPhcaxh5E5bzQo51cpf6I5MCrEdPPLzXVf8tN?=
 =?us-ascii?q?zCAR84Lwy72eHnBM991oMDQ22PBKCZPbjWsV+J4OIvPuaNaJUUuDb7N/gq+fru?=
 =?us-ascii?q?gWUlll8aeKmjxYEXZ2ygHvR6P0WZZmLhgtUGEWgUpAY+T+vqiFuEUT5UfHuyW6?=
 =?us-ascii?q?M85jcmCIOpF4vDR4atgKCf0ye/BJFZemdGClWUG3fya4qEQ+sMaD6VIsJ5iDME?=
 =?us-ascii?q?TrihS4gi1R20rg/10bhnI/HQ+i0Zs5Ljydd06/fSlRE06Tx7EcCd33uRQGFzm2?=
 =?us-ascii?q?MCXyU207xnoUxh1leD1rB1g/9CGtxV/f9JVgY6OoTaz+x1EN3yXgPBftGUSFep?=
 =?us-ascii?q?WNmmADcxTs4vzN8KeUpyB9KijhXb1SqwH7AVj6CLBIAz8q/Ewnf+Pdh9xGjc2K?=
 =?us-ascii?q?khlVYmRNBPOnOghqJ48wjTBIvJk0GCmqaudKQc2jPN9WiZwWqPukFYTBB/UaHf?=
 =?us-ascii?q?UX8DYUvWqMzz5lneQL+2FbQnLgxBxNafJaRQdN3mk09KRPf5N9TYeGK+hWGwCA?=
 =?us-ascii?q?2MxrONaorqZmoc0D/cCEgCjwAc43KGORIiCSempmLUFCZuGk73Y0Pw7el+r2u2?=
 =?us-ascii?q?TlM1zwGPaE1hy7q1+x4PifyAUf8T2agEuCMgqzVyE1awxNbWC9uGpwp8c6RQe9?=
 =?us-ascii?q?I94FFb1W3HswxxJICvL6dnhlQGaQR4o1vu1wlrCoVHicUltncqwxR9KK2G0FJN?=
 =?us-ascii?q?bSiX3Y3tNbLNLGny/xeva7DN11Ha0daW/LoP6fsip1XiugGpClQt83F939ZJ1H?=
 =?us-ascii?q?uc443ADBAOXpLpTkY36x96qqnaYykg/Y/byWdgMKi0sjDY3dIpC/AoyhKhf9dZ?=
 =?us-ascii?q?LaOFGxX+E8wcB8iyNuMqn0KlYQ4DPOBX7KQ0Jd+pd+Oa2K63O+ZthCimjWVb74?=
 =?us-ascii?q?9nyEKD6i18RvTO35kb2fGY3xKLWCvmg1elr8/4h5pEZTYUHmekzSjkBYhRZrB9?=
 =?us-ascii?q?fIoRCGeuJdG3yct6h5L3R3FY81ujDUsc2MC1YRqSc0D93QpI2EUXoHyrgyu5wy?=
 =?us-ascii?q?ZvkzE0qKqSxyjOw+XkdBoaNW9HXmhijVHwIYeqi9AWRlSnbw8slBG9/0b127Bb?=
 =?us-ascii?q?pLhjL2nUWUpIfTL5L3thUquzsbqOedVP54krsSVUUeS8Z06VSrjmrhse0iPjGX?=
 =?us-ascii?q?ZexT8hezGrvJX5gwJ1iGaHIHlvq3rZfNl6xQ3D69zEWf5Rwj0GSTF4iDbNAViw?=
 =?us-ascii?q?Jdup/dSSl5rYtuC+VmShVoBccCXxzIOAsje76nNuARGlg/+zndjnGxAg0SDnz9?=
 =?us-ascii?q?lqSTnIrBHkb4nozau6MPhrfkl1BFDm7cp6FZpzko8xhJEWxHgbiY+Z/XsBkWfv?=
 =?us-ascii?q?L9pb3bjyY2YKRT4O29TV+hTq2FV/LnKVwIL0TnCdwspiZ9ageG8X1Dwy79tWCK?=
 =?us-ascii?q?iK9rxLhjV6okC3rQ/KZfh9nzEdyeYh6XIAguEJvhYtwTuZArwIAUZYOinsnQyS?=
 =?us-ascii?q?79+itKVXeHqvcb+o2UpimtChCauOowBGV3b/Z5ciBjRw7sRkPVLI0X3z7Jzked?=
 =?us-ascii?q?bKYdISsB2UjwnPj+xPJJ0tkfoKgDJtOXjhsn091+47kRtu0Imhs4edLGVt+L+5?=
 =?us-ascii?q?DgRcNj3ofM4T/jDtjaBDnseZxYyvH5NhGikVU5vsV/6nDDUStfH/PQaUDDI8sm?=
 =?us-ascii?q?ubGabYHQKH6kdptXfPHI6wN32NOHkV19ZiRASeJExChgAbRi46k4U9FgCrwszh?=
 =?us-ascii?q?bUh46ioQ5l7+thtD1OZoOwPjXWfYoQeici00R4SHLBpK8gFC4F/YMMyZ7uJuBi?=
 =?us-ascii?q?FY44eurAqXJmyAYARIC24JV1eAB1DiOLmu+NbB//KZBuq4M/vBf7GOpfZCWPeP?=
 =?us-ascii?q?wJKlypFm8CqUNsWTInliCOU22kpdUnB4GMTZmDQPRzYUlyLXaM6bqwmz+jdqrs?=
 =?us-ascii?q?Ck6/nrXAPv5Y2SC7pdK9lv+ha2gbudOO6Unip2NTFY1pYUz3/S1LcfxEISiz1p?=
 =?us-ascii?q?dzS1C7sAqDXCTLjOla5XFRIbbyJzOdBM76I92AlNJMHahsn01r5+kv46FVNFWU?=
 =?us-ascii?q?b9lcGuYMwAO3u9O0/fBEaXKLSGIiXGw932YaO5U7FfkP9YuAGwuTmFFU/uJTCD?=
 =?us-ascii?q?lzjvVxCyPuBAliCbPBpCuI6jdhZhE3TsTNXjahejKt94kSU2waEohnPNLWMdMS?=
 =?us-ascii?q?Jzc0VIrr2R6yNXmvR+G2xb4XpjIumJgCKZ7+jeKpYLvvpnGCV0l+RG4Hskz7tZ?=
 =?us-ascii?q?9j1LRPtwmHiaktk7p1Cgj/nKwyBiFRlDsDBGgKqPvF5+IuPY8JdaUHrJ9R5L6n?=
 =?us-ascii?q?+fWDoQoN4wMcD9pqNRgvuHrKXuLDBZ/pqA5tYOGsvVbtqALX4mKhfBESTRSgAC?=
 =?us-ascii?q?SGj4Zinkm0VBnaTKpTWupZ8gp820lQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAC27w9ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBVYIWJ4wUjBCCDRSXPoFxLhMBhy4iNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiKCZQMDAQIkTQUGCQEBHzEDVBkFgxyCAgQBpwAzii2HfIQ/gVc/g3WFf?=
 =?us-ascii?q?IUOAokXJJdABwKRUxaRQJp5gg5NI4M8glCOCz8BATGBBQEBimMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAAC27w9ch0O0hNFkHQEBBQEHBQGBUQgBCwGBVYIWJ4w?=
 =?us-ascii?q?UjBCCDRSXPoFxLhMBhy4iNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiKCZQMDA?=
 =?us-ascii?q?QIkTQUGCQEBHzEDVBkFgxyCAgQBpwAzii2HfIQ/gVc/g3WFfIUOAokXJJdABwK?=
 =?us-ascii?q?RUxaRQJp5gg5NI4M8glCOCz8BATGBBQEBimMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="55895244"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 09:12:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727700AbeLKRMM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 12:12:12 -0500
Received: from foss.arm.com ([217.140.101.70]:53564 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727535AbeLKRMK (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 12:12:10 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 2C6FC165C;
        Tue, 11 Dec 2018 09:12:10 -0800 (PST)
Received: from en101.cambridge.arm.com (en101.cambridge.arm.com [10.1.196.93])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 609C53F6A8;
        Tue, 11 Dec 2018 09:12:08 -0800 (PST)
From: Suzuki K Poulose <suzuki.poulose@arm.com>
To: linux-arm-kernel@lists.infradead.org
Cc: suzuki.poulose@arm.com, linux-kernel@vger.kernel.org,
        kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org,
        marc.zyngier@arm.com, christoffer.dall@arm.com,
        will.deacon@arm.com, catalin.marinas@arm.com,
        anshuman.khandual@arm.com
Subject: [PATCH v10 2/8] KVM: arm/arm64: Re-factor setting the Stage 2 entry to exec on fault
Date: Tue, 11 Dec 2018 17:10:35 +0000
Message-Id: <1544548241-6417-3-git-send-email-suzuki.poulose@arm.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1544548241-6417-1-git-send-email-suzuki.poulose@arm.com>
References: <1544548241-6417-1-git-send-email-suzuki.poulose@arm.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Punit Agrawal <punit.agrawal@arm.com>

Stage 2 fault handler marks a page as executable if it is handling an
execution fault or if it was a permission fault in which case the
executable bit needs to be preserved.

The logic to decide if the page should be marked executable is
duplicated for PMD and PTE entries. To avoid creating another copy
when support for PUD hugepages is introduced refactor the code to
share the checks needed to mark a page table entry as executable.

Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
Cc: Christoffer Dall <christoffer.dall@arm.com>
Cc: Marc Zyngier <marc.zyngier@arm.com>
Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
---
 virt/kvm/arm/mmu.c | 28 +++++++++++++++-------------
 1 file changed, 15 insertions(+), 13 deletions(-)

diff --git a/virt/kvm/arm/mmu.c b/virt/kvm/arm/mmu.c
index 5959520..6912529 100644
--- a/virt/kvm/arm/mmu.c
+++ b/virt/kvm/arm/mmu.c
@@ -1475,7 +1475,8 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 			  unsigned long fault_status)
 {
 	int ret;
-	bool write_fault, exec_fault, writable, force_pte = false;
+	bool write_fault, writable, force_pte = false;
+	bool exec_fault, needs_exec;
 	unsigned long mmu_seq;
 	gfn_t gfn = fault_ipa >> PAGE_SHIFT;
 	struct kvm *kvm = vcpu->kvm;
@@ -1598,19 +1599,25 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 	if (exec_fault)
 		invalidate_icache_guest_page(pfn, vma_pagesize);
 
+	/*
+	 * If we took an execution fault we have made the
+	 * icache/dcache coherent above and should now let the s2
+	 * mapping be executable.
+	 *
+	 * Write faults (!exec_fault && FSC_PERM) are orthogonal to
+	 * execute permissions, and we preserve whatever we have.
+	 */
+	needs_exec = exec_fault ||
+		(fault_status == FSC_PERM && stage2_is_exec(kvm, fault_ipa));
+
 	if (vma_pagesize == PMD_SIZE) {
 		pmd_t new_pmd = pfn_pmd(pfn, mem_type);
 		new_pmd = pmd_mkhuge(new_pmd);
 		if (writable)
 			new_pmd = kvm_s2pmd_mkwrite(new_pmd);
 
-		if (exec_fault) {
+		if (needs_exec)
 			new_pmd = kvm_s2pmd_mkexec(new_pmd);
-		} else if (fault_status == FSC_PERM) {
-			/* Preserve execute if XN was already cleared */
-			if (stage2_is_exec(kvm, fault_ipa))
-				new_pmd = kvm_s2pmd_mkexec(new_pmd);
-		}
 
 		ret = stage2_set_pmd_huge(kvm, memcache, fault_ipa, &new_pmd);
 	} else {
@@ -1621,13 +1628,8 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 			mark_page_dirty(kvm, gfn);
 		}
 
-		if (exec_fault) {
+		if (needs_exec)
 			new_pte = kvm_s2pte_mkexec(new_pte);
-		} else if (fault_status == FSC_PERM) {
-			/* Preserve execute if XN was already cleared */
-			if (stage2_is_exec(kvm, fault_ipa))
-				new_pte = kvm_s2pte_mkexec(new_pte);
-		}
 
 		ret = stage2_set_pte(kvm, memcache, fault_ipa, &new_pte, flags);
 	}
-- 
2.7.4

