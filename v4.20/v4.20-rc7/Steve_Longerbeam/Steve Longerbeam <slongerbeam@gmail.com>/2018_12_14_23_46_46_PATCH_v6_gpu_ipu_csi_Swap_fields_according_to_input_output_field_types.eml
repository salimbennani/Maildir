Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  15 Dec 2018 13:11:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8CF135805FC;
	Fri, 14 Dec 2018 15:48:03 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 15:48:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ad5+aRBVI8pIlFrgENRb69yWOcjfV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCCuqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqJL9p0MMoBalGQWgGPnixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?narMnrO6cMT+++0a/GzTLFb/NZxzj98pPHfQ47rvGJQLl9dtHRyU0oFwPDgVWf?=
 =?us-ascii?q?t5blMCiL2esXtmiW9OVgVee1hG4mrwF9uCSgxsApioTQgI8e11PK9T1hzYorOd?=
 =?us-ascii?q?G1TFR3bcOqHZdOrS2WKoh7Tt84T2xpuis20rkLtJ2hcCQU1Zgr2wTTZ+GEfoSV?=
 =?us-ascii?q?+B7vSeecLDV+iXl4YrywnQyy/lKlyuDkVsm7zlJKri1dn9nSuXACyQbT5tKESv?=
 =?us-ascii?q?Rj5Eeh3yiA1wTJ5uFDO0A0mrLXK58nwrEuipoeqVrPEjPylUnskaObeFso9vK1?=
 =?us-ascii?q?5+nkfrnqvJ6ROo1shgH7KKsum8i/AeoiMggJWmiW4eC81Lzl/U3kT7RGl/42nb?=
 =?us-ascii?q?fDsJDcO8sbore1Awhb04Yl9Rm/FSyr0MoXnXYZNlJJYhGHgJbzO1HIPv/4Ce2z?=
 =?us-ascii?q?g1O2kDdk3/zGJKHuAo3RLnjfl7fsZbJ9609fyAUt19xe6I9UB6oFIPLyXE/xqd?=
 =?us-ascii?q?PZAgU4Mwyy3+boFtF92pkCVmKIB6+TKLnSvkOQ5uIzP+mMY5cYuDbnJPgk+/7h?=
 =?us-ascii?q?l3g5lUUdfam0x5QXbn+4E+9iI0WYZ3rsn9gAHX0Lvgo4UOzlllmCXSRPaHa1Wq?=
 =?us-ascii?q?I2/is7B56+DYffWoCth6SM3CW8HpJIfGxGCVeMEXHud4WDQPoMbCOSIsl8kj0L?=
 =?us-ascii?q?T7ShSokh1Q2wuw/+0bZoMu3U+igAv5L5yNd1//HTlQ019TFsFcudyGGNT2Z3nm?=
 =?us-ascii?q?8SXT85xqJ/rFd5yleC16h4nvNZGcZS5/NPTgc1K5rcw/ZmBND1XwLLZs2JR0q+?=
 =?us-ascii?q?QtW6HTExSco8w9wUbEZ7AdmiihHD0DCsA78ajLGLAJ008qTB33n+Pcp9ynDG1L?=
 =?us-ascii?q?U/gFkiWMdAKWqmhqtn/QjJG4HJi1mZl7qtdakEwSHC7nmDwnSUsEFYSgFwV77F?=
 =?us-ascii?q?Um4ZZkfRqdT55UbCT7u1BLQjMwtBz9OCK6RQZt3oi1VGWOnsONDEb22tnGewAA?=
 =?us-ascii?q?6CxqmQY4ryZ2UdwCLdBVAZnA8J43aJKxIyBie7rGLYFzxhC1Tvbljo8el/rnO7?=
 =?us-ascii?q?U0A1wxuLb01ny7q65BoVieaARPMU27IOoD0hpClsHFahw9LWDMKNpxZgfKVZZt?=
 =?us-ascii?q?M9/FdH1GLDuwxhJJCgKLpihlofcwRxsEPjzBF3CoRGkcg3o3Im1gtyKaSE0Fxf?=
 =?us-ascii?q?czOUx4z/OrrSKmPq5hCgd7bW2k3C0NaR4qoA8vA4pEvsvQ63Fksu6W5o08RI3H?=
 =?us-ascii?q?SG4JXKDw0SUYzqX0Yz9hh6oazaYyYn64PV031sLbe7sjvY1901A+slzw6qf81D?=
 =?us-ascii?q?P6OcCA/yD8oaCtCuKew3gVSmcggIPeFS9KEuOcOmeOCL2KqqPOZmgTKngn5L4I?=
 =?us-ascii?q?F70kKQ6SV8TvTE0IoCw/GdxgGHTSvzjE+9ssDrnoBJfSsSHmujxif+Ho5ee6py?=
 =?us-ascii?q?cZwNCWiwOc23x8xyiIL3VH5c6VGsGUkG2MiveReJa1z93AtQ1VkYoHC9mCu4yS?=
 =?us-ascii?q?B0nC8trqaFwCPOxOHifgIdOmFXXGlikUvsIY+sgtEaXUikdQgomAG+5UbnwahW?=
 =?us-ascii?q?v6B/L2jVQUdVcCn6NWBiUq2strWcZ85D8o8nsSJSUO6ke1CVVqb9owcG0yPkB2?=
 =?us-ascii?q?Zexio0dyupupX6mBx2knmdI2xwrHraeMFwwwnQ5NrHSP5V3zoGQjR4iDbNCli9?=
 =?us-ascii?q?Odmp4cubl5PZvu+iUGKhU4VZcTP3woOYqCu7+WpqDAW/nv+pnd3rCwo60S7919?=
 =?us-ascii?q?RxUSXIrRD8YpTk1qigMOJneFVoC0H468ZgBo5+lY4wjokK2XcGnpWV4WYHkWDr?=
 =?us-ascii?q?PNVYw63+bWABRT4Ww9HP5gjl11ZuLnaIx4L/S3WczdFtZ9i8YmMKxC0969pGB7?=
 =?us-ascii?q?uT7LxBhSF1uEa3rRrNYfhhmTcQ0f4u6H8Zg+4TogYswDuSAqsOHUZGJyzjjAqH?=
 =?us-ascii?q?78qxrKhMYGavcL6w1FdxnNy7DbGCpB1cV2j9eps4ASBw6cB/OkrW0HLv8oHkZM?=
 =?us-ascii?q?XQbdULux2IlBfAivJZKZMrmfoMmCpnInn9vXw+xu4/jBxu24y6vYedJ2Vs+qK5?=
 =?us-ascii?q?HgBXNjnva8wP/THtiL5UntyK0IC3ApVhBjILUYPzQv2yFzISsennOxyKED0hsX?=
 =?us-ascii?q?qbHbvfHQmC6EZptX7PEparN22JK3kd19ltWB6dJElHigAOQDo6hoI5FhytxMH5?=
 =?us-ascii?q?ckd2/DUR6UDjqhdW1uJkLRr/UnrcpAe1bDc7UoOfIQFS7gFD4UfVLMOf4vhyHy?=
 =?us-ascii?q?Fe4p2usgiNJnaHaARPCGEDQlaECEz7Prmy+dnA9PCVB+q5L/vTeLWOtPZRV/GS?=
 =?us-ascii?q?yZK01Ytm+TmMO96LPnljCf07x0VCUWp4G8TfhzUAVSgXmzjRYM6coRe24jd3od?=
 =?us-ascii?q?yn8PT3RALv4pOCC7tMPtVu+BC2gqaDO/SThCZjLjZY2Y0DxWXVyLgEx1MSjyBu?=
 =?us-ascii?q?dz+wEbUPryLNTaTQmrNJAB4fcS98KMxI76ck1AlXJcHbks/11qJ/jvMtEVhFSE?=
 =?us-ascii?q?fumtu3as0KOW29MFLHCV2PNLSHIz3L3s72bbm9Sb1WkOVbqRmwtSyHHE/kOzSJ?=
 =?us-ascii?q?jyPpWAy3MeFQkCGbOwRTuJ28chZoE2TsUMjqZQG7MNBpiz072rk0hnLMNW4BPj?=
 =?us-ascii?q?lwaUJNrruM7SxGhvVzAXBO7n1gLeOcgSaW8/HYKooKsftsGil1l/hV4HI/y7tU?=
 =?us-ascii?q?6iFLXP10mCvIod5orFGrie2PyjthUBpTpTdHnoOLvUN+OarH8plMQ2rL/BUI7T?=
 =?us-ascii?q?bYNxNfo9pjF82qvq1cy9Hniq3+MnFB/sjS8M9aANLbe+ydN390CgbkBjOcKAwD?=
 =?us-ascii?q?QjOxP2zWggQJi/WV8HKYtJI3o53El58HS7sdX1swQKBJQn95FcAPdc8kFggvlq?=
 =?us-ascii?q?SW2YtRvSKz?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAAByQBRch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4x0ixmCIZdDgXYPAQEYEwGHRyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?CNiQBgmkCJBkBGx0BAwIJAgUQKRIDHgIRAQUBNQWDHIFoAQMVBZo3PIwLFgUBF?=
 =?us-ascii?q?4J3BYQ9ChknDV2BNwIGEodrgyWBHBeBQD+BEYVpiAcCizaFFJAfLwmKTYNdgyU?=
 =?us-ascii?q?LGIlzh1+PQ4l3AgQCBAUCBQ8hgSWCDnCBAYI7ghsMF4NKinQfMoEFAQGNPgEB?=
X-IPAS-Result: =?us-ascii?q?A0AXAAByQBRch0O0hNFkHgEGBwaBUQkLAYNrJ4x0ixmCIZd?=
 =?us-ascii?q?DgXYPAQEYEwGHRyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmkCJBkBG?=
 =?us-ascii?q?x0BAwIJAgUQKRIDHgIRAQUBNQWDHIFoAQMVBZo3PIwLFgUBF4J3BYQ9ChknDV2?=
 =?us-ascii?q?BNwIGEodrgyWBHBeBQD+BEYVpiAcCizaFFJAfLwmKTYNdgyULGIlzh1+PQ4l3A?=
 =?us-ascii?q?gQCBAUCBQ8hgSWCDnCBAYI7ghsMF4NKinQfMoEFAQGNPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,354,1539673200"; 
   d="scan'208";a="56445081"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 15:47:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728866AbeLNXq4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 18:46:56 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:41221 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726423AbeLNXqz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 18:46:55 -0500
Received: by mail-pg1-f196.google.com with SMTP id m1so1739448pgq.8;
        Fri, 14 Dec 2018 15:46:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id;
        bh=gTb3R4JcjfUoa8M4OjJIMXYC7z2CxLLTuNpIjiFVfi8=;
        b=n1atIdl8wAeB5FfRz9uHqDk+ln/5rjIw8h1y0fmAzk/qWoF9sarTU0CvVuGmA/CHvS
         9wN4eav8mTyqrnIdJogdUzIN7gEIIq0AHRIg8r7IKFJRzJIyXq1hrPTeEK/5lAYCZmkR
         /etnzNVHBK+gaHtlQjrxSfec2a9ZTf53jmxSr5oi2dLNHTh7TofIugWlXfKTb1pghVuX
         SBBezGY/GsdYbMCgJKjsKX0yM3eRzaNz2ty2bjbbtE171TLaqgebTowIjreXNwRArIAB
         p9LZ4Fk93UoFMkdNQ0f25Mlq4oztoSdU/jZCHjwfb0I+vAqkED2ehOtJToXFgHKZD4H7
         sIjQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=gTb3R4JcjfUoa8M4OjJIMXYC7z2CxLLTuNpIjiFVfi8=;
        b=Di/ptMDVsCFOo/5p41mRmYQU4Q1Mq4tf5eOPcNfBdmpklxTORicjK2RJC1S1UY/nTE
         2gNALLJHTRDCZH2pyUMzP68Vy7/P+ta+Rq3WLrxG3r9ltviQeTL2bG9nh7pMHjqVcHg3
         SfaOOhQA1bls2bFXF3phzPCdU2eKj0IJXg3GBZnujk9vhFtT/io+1WtxXlzG+kF5ceCA
         5HuSM6SiOEDMfRXw/t/c+FYN1PPC3j82Y5UEHvXZBOKTyMNdS8MekudiDk/Z/W4NGLie
         UNyeyKWgb37Vqgb4NeJ/i9URp3NgZcQCc8PtiptSn3F3kjdIaAHitG9IvaMOTsSMirpC
         s9TA==
X-Gm-Message-State: AA+aEWZKSUP/K64fJzGcIBa4vB49cDeC/XKS6duXuX2jARB1y7PoMlNA
        S/9hpYj8ciuUoBcRVQwD0FVJh3xn
X-Google-Smtp-Source: AFSGD/XVcGh1MpN4RdmSM2c+0YZzGwNeSSkM5TWkDxcg1NKpPF3NHDGKIA4/CGzy6hNGfBfNzsgccw==
X-Received: by 2002:a63:66c6:: with SMTP id a189mr4451532pgc.167.1544831213903;
        Fri, 14 Dec 2018 15:46:53 -0800 (PST)
Received: from majic.sklembedded.com (c-98-210-181-167.hsd1.ca.comcast.net. [98.210.181.167])
        by smtp.googlemail.com with ESMTPSA id 125sm13501087pfd.124.2018.12.14.15.46.52
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 14 Dec 2018 15:46:53 -0800 (PST)
From: Steve Longerbeam <slongerbeam@gmail.com>
To: linux-media@vger.kernel.org
Cc: Steve Longerbeam <slongerbeam@gmail.com>,
        Philipp Zabel <p.zabel@pengutronix.de>,
        Mauro Carvalho Chehab <mchehab@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>,
        dri-devel@lists.freedesktop.org (open list:DRM DRIVERS FOR FREESCALE
        IMX), linux-kernel@vger.kernel.org (open list),
        devel@driverdev.osuosl.org (open list:STAGING SUBSYSTEM),
        linux-fbdev@vger.kernel.org (open list:FRAMEBUFFER LAYER)
Subject: [PATCH v6] gpu: ipu-csi: Swap fields according to input/output field types
Date: Fri, 14 Dec 2018 15:46:46 -0800
Message-Id: <20181214234646.21359-1-slongerbeam@gmail.com>
X-Mailer: git-send-email 2.17.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The function ipu_csi_init_interface() was inverting the F-bit for
NTSC case, in the CCIR_CODE_1/2 registers. The result being that
for NTSC bottom-top field order, the CSI would swap fields and
capture in top-bottom order.

Instead, base field swap on the field order of the input to the CSI,
and the field order of the requested output. If the input/output
fields are sequential but different, swap fields, otherwise do
not swap. This requires passing both the input and output mbus
frame formats to ipu_csi_init_interface().

Move this code to a new private function ipu_csi_set_bt_interlaced_codes()
that programs the CCIR_CODE_1/2 registers for interlaced BT.656 (and
possibly interlaced BT.1120 in the future).

When detecting input video standard from the input frame width/height,
make sure to double height if input field type is alternate, since
in that case input height only includes lines for one field.

Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
---
Changes since v5:
- Convert to const the infmt, outfmt, and mbus_cfg pointer args to
  ipu_csi_init_interface(), suggested by Philipp Zabel.
- Bring back if_fmt local var and don't copy outfmt to local stack in
  csi_setup(), suggested by Philipp.

Changes since v4:
- Cleaned up some convoluted code in ipu_csi_init_interface(), suggested
  by Philipp.
- Fixed a regression in csi_setup(), caught by Philipp.
---
 drivers/gpu/ipu-v3/ipu-csi.c              | 126 +++++++++++++++-------
 drivers/staging/media/imx/imx-media-csi.c |   7 +-
 include/video/imx-ipu-v3.h                |   5 +-
 3 files changed, 89 insertions(+), 49 deletions(-)

diff --git a/drivers/gpu/ipu-v3/ipu-csi.c b/drivers/gpu/ipu-v3/ipu-csi.c
index aa0e30a2ba18..d1e575571a8d 100644
--- a/drivers/gpu/ipu-v3/ipu-csi.c
+++ b/drivers/gpu/ipu-v3/ipu-csi.c
@@ -325,12 +325,21 @@ static int mbus_code_to_bus_cfg(struct ipu_csi_bus_config *cfg, u32 mbus_code,
 	return 0;
 }
 
+/* translate alternate field mode based on given standard */
+static inline enum v4l2_field
+ipu_csi_translate_field(enum v4l2_field field, v4l2_std_id std)
+{
+	return (field != V4L2_FIELD_ALTERNATE) ? field :
+		((std & V4L2_STD_525_60) ?
+		 V4L2_FIELD_SEQ_BT : V4L2_FIELD_SEQ_TB);
+}
+
 /*
  * Fill a CSI bus config struct from mbus_config and mbus_framefmt.
  */
 static int fill_csi_bus_cfg(struct ipu_csi_bus_config *csicfg,
-				 struct v4l2_mbus_config *mbus_cfg,
-				 struct v4l2_mbus_framefmt *mbus_fmt)
+			    const struct v4l2_mbus_config *mbus_cfg,
+			    const struct v4l2_mbus_framefmt *mbus_fmt)
 {
 	int ret;
 
@@ -374,22 +383,76 @@ static int fill_csi_bus_cfg(struct ipu_csi_bus_config *csicfg,
 	return 0;
 }
 
+static int
+ipu_csi_set_bt_interlaced_codes(struct ipu_csi *csi,
+				const struct v4l2_mbus_framefmt *infmt,
+				const struct v4l2_mbus_framefmt *outfmt,
+				v4l2_std_id std)
+{
+	enum v4l2_field infield, outfield;
+	bool swap_fields;
+
+	/* get translated field type of input and output */
+	infield = ipu_csi_translate_field(infmt->field, std);
+	outfield = ipu_csi_translate_field(outfmt->field, std);
+
+	/*
+	 * Write the H-V-F codes the CSI will match against the
+	 * incoming data for start/end of active and blanking
+	 * field intervals. If input and output field types are
+	 * sequential but not the same (one is SEQ_BT and the other
+	 * is SEQ_TB), swap the F-bit so that the CSI will capture
+	 * field 1 lines before field 0 lines.
+	 */
+	swap_fields = (V4L2_FIELD_IS_SEQUENTIAL(infield) &&
+		       V4L2_FIELD_IS_SEQUENTIAL(outfield) &&
+		       infield != outfield);
+
+	if (!swap_fields) {
+		/*
+		 * Field0BlankEnd  = 110, Field0BlankStart  = 010
+		 * Field0ActiveEnd = 100, Field0ActiveStart = 000
+		 * Field1BlankEnd  = 111, Field1BlankStart  = 011
+		 * Field1ActiveEnd = 101, Field1ActiveStart = 001
+		 */
+		ipu_csi_write(csi, 0x40596 | CSI_CCIR_ERR_DET_EN,
+			      CSI_CCIR_CODE_1);
+		ipu_csi_write(csi, 0xD07DF, CSI_CCIR_CODE_2);
+	} else {
+		dev_dbg(csi->ipu->dev, "capture field swap\n");
+
+		/* same as above but with F-bit inverted */
+		ipu_csi_write(csi, 0xD07DF | CSI_CCIR_ERR_DET_EN,
+			      CSI_CCIR_CODE_1);
+		ipu_csi_write(csi, 0x40596, CSI_CCIR_CODE_2);
+	}
+
+	ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
+
+	return 0;
+}
+
+
 int ipu_csi_init_interface(struct ipu_csi *csi,
-			   struct v4l2_mbus_config *mbus_cfg,
-			   struct v4l2_mbus_framefmt *mbus_fmt)
+			   const struct v4l2_mbus_config *mbus_cfg,
+			   const struct v4l2_mbus_framefmt *infmt,
+			   const struct v4l2_mbus_framefmt *outfmt)
 {
 	struct ipu_csi_bus_config cfg;
 	unsigned long flags;
 	u32 width, height, data = 0;
+	v4l2_std_id std;
 	int ret;
 
-	ret = fill_csi_bus_cfg(&cfg, mbus_cfg, mbus_fmt);
+	ret = fill_csi_bus_cfg(&cfg, mbus_cfg, infmt);
 	if (ret < 0)
 		return ret;
 
 	/* set default sensor frame width and height */
-	width = mbus_fmt->width;
-	height = mbus_fmt->height;
+	width = infmt->width;
+	height = infmt->height;
+	if (infmt->field == V4L2_FIELD_ALTERNATE)
+		height *= 2;
 
 	/* Set the CSI_SENS_CONF register remaining fields */
 	data |= cfg.data_width << CSI_SENS_CONF_DATA_WIDTH_SHIFT |
@@ -416,42 +479,22 @@ int ipu_csi_init_interface(struct ipu_csi *csi,
 		ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
 		break;
 	case IPU_CSI_CLK_MODE_CCIR656_INTERLACED:
-		if (mbus_fmt->width == 720 && mbus_fmt->height == 576) {
-			/*
-			 * PAL case
-			 *
-			 * Field0BlankEnd = 0x6, Field0BlankStart = 0x2,
-			 * Field0ActiveEnd = 0x4, Field0ActiveStart = 0
-			 * Field1BlankEnd = 0x7, Field1BlankStart = 0x3,
-			 * Field1ActiveEnd = 0x5, Field1ActiveStart = 0x1
-			 */
-			height = 625; /* framelines for PAL */
-
-			ipu_csi_write(csi, 0x40596 | CSI_CCIR_ERR_DET_EN,
-					  CSI_CCIR_CODE_1);
-			ipu_csi_write(csi, 0xD07DF, CSI_CCIR_CODE_2);
-			ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
-		} else if (mbus_fmt->width == 720 && mbus_fmt->height == 480) {
-			/*
-			 * NTSC case
-			 *
-			 * Field0BlankEnd = 0x7, Field0BlankStart = 0x3,
-			 * Field0ActiveEnd = 0x5, Field0ActiveStart = 0x1
-			 * Field1BlankEnd = 0x6, Field1BlankStart = 0x2,
-			 * Field1ActiveEnd = 0x4, Field1ActiveStart = 0
-			 */
-			height = 525; /* framelines for NTSC */
-
-			ipu_csi_write(csi, 0xD07DF | CSI_CCIR_ERR_DET_EN,
-					  CSI_CCIR_CODE_1);
-			ipu_csi_write(csi, 0x40596, CSI_CCIR_CODE_2);
-			ipu_csi_write(csi, 0xFF0000, CSI_CCIR_CODE_3);
+		if (width == 720 && height == 480) {
+			std = V4L2_STD_NTSC;
+			height = 525;
+		} else if (width == 720 && height == 576) {
+			std = V4L2_STD_PAL;
+			height = 625;
 		} else {
 			dev_err(csi->ipu->dev,
-				"Unsupported CCIR656 interlaced video mode\n");
-			spin_unlock_irqrestore(&csi->lock, flags);
-			return -EINVAL;
+				"Unsupported interlaced video mode\n");
+			ret = -EINVAL;
+			goto out_unlock;
 		}
+
+		ret = ipu_csi_set_bt_interlaced_codes(csi, infmt, outfmt, std);
+		if (ret)
+			goto out_unlock;
 		break;
 	case IPU_CSI_CLK_MODE_CCIR1120_PROGRESSIVE_DDR:
 	case IPU_CSI_CLK_MODE_CCIR1120_PROGRESSIVE_SDR:
@@ -476,9 +519,10 @@ int ipu_csi_init_interface(struct ipu_csi *csi,
 	dev_dbg(csi->ipu->dev, "CSI_ACT_FRM_SIZE = 0x%08X\n",
 		ipu_csi_read(csi, CSI_ACT_FRM_SIZE));
 
+out_unlock:
 	spin_unlock_irqrestore(&csi->lock, flags);
 
-	return 0;
+	return ret;
 }
 EXPORT_SYMBOL_GPL(ipu_csi_init_interface);
 
diff --git a/drivers/staging/media/imx/imx-media-csi.c b/drivers/staging/media/imx/imx-media-csi.c
index 4223f8d418ae..c2a8d9cd31b7 100644
--- a/drivers/staging/media/imx/imx-media-csi.c
+++ b/drivers/staging/media/imx/imx-media-csi.c
@@ -679,12 +679,7 @@ static int csi_setup(struct csi_priv *priv)
 		priv->upstream_ep.bus.parallel.flags :
 		priv->upstream_ep.bus.mipi_csi2.flags;
 
-	/*
-	 * we need to pass input frame to CSI interface, but
-	 * with translated field type from output format
-	 */
 	if_fmt = *infmt;
-	if_fmt.field = outfmt->field;
 	crop = priv->crop;
 
 	/*
@@ -702,7 +697,7 @@ static int csi_setup(struct csi_priv *priv)
 			     priv->crop.width == 2 * priv->compose.width,
 			     priv->crop.height == 2 * priv->compose.height);
 
-	ipu_csi_init_interface(priv->csi, &mbus_cfg, &if_fmt);
+	ipu_csi_init_interface(priv->csi, &mbus_cfg, &if_fmt, outfmt);
 
 	ipu_csi_set_dest(priv->csi, priv->dest);
 
diff --git a/include/video/imx-ipu-v3.h b/include/video/imx-ipu-v3.h
index abbad94e14a1..f5568ac87306 100644
--- a/include/video/imx-ipu-v3.h
+++ b/include/video/imx-ipu-v3.h
@@ -351,8 +351,9 @@ int ipu_prg_channel_configure(struct ipuv3_channel *ipu_chan,
  */
 struct ipu_csi;
 int ipu_csi_init_interface(struct ipu_csi *csi,
-			   struct v4l2_mbus_config *mbus_cfg,
-			   struct v4l2_mbus_framefmt *mbus_fmt);
+			   const struct v4l2_mbus_config *mbus_cfg,
+			   const struct v4l2_mbus_framefmt *infmt,
+			   const struct v4l2_mbus_framefmt *outfmt);
 bool ipu_csi_is_interlaced(struct ipu_csi *csi);
 void ipu_csi_get_window(struct ipu_csi *csi, struct v4l2_rect *w);
 void ipu_csi_set_window(struct ipu_csi *csi, struct v4l2_rect *w);
-- 
2.17.1

