Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:41:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 004E25807A2;
	Mon, 10 Dec 2018 10:05:14 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 10:05:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aec16xBWGNCKeNEo2zZVY8FEqd1nV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCBu6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohulHQmhBvjiyiNUinLswaE2z/gtHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakTTOC60q/IzSndYPNMxDzz9I/IfQ49rvGPQLl9dsXRyVMoFwzbklqQ?=
 =?us-ascii?q?qpfoPzyS1uQKvGib6/RvWfizhG4grgF8uz6izdovhInRno8Z1EzI+CFjzIooK9?=
 =?us-ascii?q?C0VlR3bcOnHZdMrS2XNol7Tts8T210vCs20L4LtJ6hcCQXyZkr2gTTZv2EfoWO?=
 =?us-ascii?q?/xntTvyeIS1ii3JgYL+/hwi98UynyuDkSMm030hFrjBfntnPqH8NzRrT5daDSv?=
 =?us-ascii?q?dn+UehwzmP2xjS6uFCP080ibLWJ4A9zrM0jJYfrErOEjHslEnrj6Kaal8o9+mq?=
 =?us-ascii?q?5uj/Z7XpvJ6cN4t6igHkNaQun9SyAeA5MggIQmia9v2w1L798k3jRrVFkPk2nr?=
 =?us-ascii?q?DesJHUI8QUuLS5DhRL0oYs9Rm/FS2q0NcGknkdKlJKZhaHg5LuO1HUL/D0Fe2/?=
 =?us-ascii?q?jEi0kDd32/DGOaXsApHMLnjAjrjtZ7l861NHxQo3zNBf4Y9UC74bLPLyXE/xqM?=
 =?us-ascii?q?LXDhsjPwOoxObnDc131pkCVmKXHq+ZLKTSvEeI5u01IumMeJUauDHnJ/gl+v7h?=
 =?us-ascii?q?l3k5mVAGcKmt3JsXbm24H/t8L0WYZ3rsnskOEWMQsgUiS+zqjUWIUSRPaHaqQ6?=
 =?us-ascii?q?I8+jY7BZqkDYfEWI+hmr+B3CC9Hp1QYWBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV6/fbTlRE19Tx3FcidyXuCT2Nvk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU6l?=
 =?us-ascii?q?Qtq8BzE9VNYxw94UbEZ7FNWvlRTD3yusA78ImL2HHp008qTA33fvI8Zx0WrJ1K?=
 =?us-ascii?q?4kj1M+WMtAKXWmhrJj9wjUH4PGjl+Wl7i0eqgG3C7C7mGDzXGQs0FeVwJwVabF?=
 =?us-ascii?q?XXUbZkbNqdT550XCT6KhCLg9MwtBz9KCJbVOatHzkVpGQ/LjMszEY22tg2ewGQ?=
 =?us-ascii?q?qIxrSUYYX3YWodwjvSBFIEkw8J+3aGLhYxBiG6rmLaDTxuE0/vYkz2/el/rnO7?=
 =?us-ascii?q?UlE7zwWQY0J90Lq1/wYfheaARPMLwrIEpCAhpi1oHFa82tLWDMaApwphfalGfd?=
 =?us-ascii?q?Mx+lBH1Xjdtwx8OJygILtvhlofcwRxokPv2A97CoRGkcg2snwqyBB+Jr6f0FNE?=
 =?us-ascii?q?bzmYx4z/OqXLKmnu+xCic7TZ2lXA39eZ5KgO6O40pE7+vA60DEUi9XZn095L03?=
 =?us-ascii?q?aH4pXKDQwSUY/+U0ot9hh6oa3abTc554/OyXJsNqy0uCfY2901HOsl1gqgf9BH?=
 =?us-ascii?q?PaKECQ/+CdEVC9KvKewqgVepaB0EMftW9K41OcOmavSH1LSqPOZmgDKpk2BH7J?=
 =?us-ascii?q?ph3UKL8ip2UvTI0Iodw/GEwguHUC/xjE2gss/rg49EfywdHm2lxSjiGoFRfKxy?=
 =?us-ascii?q?cZ8XBmi0J82428txh4TqW35e71OjA1IG2Mm0eRuddVD93AtQ1VgJrnyjgye30z?=
 =?us-ascii?q?t0kzQxpKqFwCPO2/jidAYAOmNTRGhijE3gIIiug9ABQUioaRMklB+k5Ub82qha?=
 =?us-ascii?q?q75zL2jVQUdUYSf2K3tuXbe3trqHe8RP8o8nsT1LUOSgZlCXUrz9rAEA0yPgHG?=
 =?us-ascii?q?tewyo3dyqwtZX6nBx6iWSdI2h1rHfCfcFwxBHf5MHTRPJL3zoGQjV4hifTBlSm?=
 =?us-ascii?q?I9ap+tCUnY/Zsu+iT2KhSoFTcS7zwIKAriS74ndmAR++n/C1gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUChZWa53sHnX3z?=
 =?us-ascii?q?MdVGw63+anUNSCUPw97U5gjlxUJiImiIx4L/SnWS3M9ha8OmbWMR3yI399pKB7?=
 =?us-ascii?q?uM7LxYgSt1pUK1rQfQYfh+hDgR0/Uv52ABg+EVpgUt1D6SDa4IHUlXJiHskxWI?=
 =?us-ascii?q?79ajrKRYfmqvcL6w1FZgktClFr2NvgZcWHPhcJc4ASBw9tl/ME7L0HDr9oHkf9?=
 =?us-ascii?q?zQYcgStxKOlRfAkvNVKIkwlvcRgSpnOGT9vWAqyuIhjBxu2426s5aDK2l34K25?=
 =?us-ascii?q?BRtYPCXvZ8wP4jHtkbpensGO0o+0BJphHTELXIbyQfKsDTIfrvDnNweIED0hpX?=
 =?us-ascii?q?aXA7vfHQmD6Eh4q3LDCYykN3aSJHMB19VtWAGdJFBDgAATRDg6nIQ2FgW0y8z6?=
 =?us-ascii?q?akt5+iod5l3lqhtP1+JoMQPwUnzEqQesazc0ToWfLRVM4gFD4UfVLdKR7uZpEy?=
 =?us-ascii?q?5E+Z2hqRSHKnaHaARQEWEJRkuECkjjP7mp+NnA6vWYCfC4L/fUerWOrupeV/iT?=
 =?us-ascii?q?yJKr04tm+SuMN8qVMnljCf07xlRMXXRjF8vFnDUPTjQdlzjRYM6DuBe85ip3o9?=
 =?us-ascii?q?i/8Pv1WQLv5oiPC7pIPdVs4RC2hqiDOPCKhCZkMjZVzZcMxX7OyLgC018ekSBu?=
 =?us-ascii?q?dz+xEbsesS7BVr7fmqhSDxQDcSN8KNNI774g3glKIcPUkM712aVijvErC1ZJT1?=
 =?us-ascii?q?jhmsCyaMwOImG9Mk7HBUmROLSHIz3L39/4YaemRbJMi+VUsgW6uSyHHE/7IjSD?=
 =?us-ascii?q?iz7pWgizMeFNiSGXJgBRtJuhfRZtF2fjSsnrahm6MN9xkD03zqc4hnLMNW4ALz?=
 =?us-ascii?q?d8d1lBoaGX7SNdmv9/AXBO7mJ5LemYnCaU9+nZJYwQsftuAyR0kfpV4XU6y7RP?=
 =?us-ascii?q?6iFES+d4mC/Trt5ovlGnnfODyjthUBpStDlLgJiHslllOaXcpdF8XiPp+ggM5i?=
 =?us-ascii?q?26AhAOqsdvDZXu85td0MLG3Pb+Li1D+JTe9M8YCtTeL+qMN34lOBDuAjeSBwwA?=
 =?us-ascii?q?G22FL2ba0mNAnfeO+2fdlJ83oZukzJUUTbJQV3Q6EfQVDkkjF9sHdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEYAD5sjK?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAABOqg5ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDeogZjA+CDRSXPYEkA08pEwGHbSI0CQ0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmIBAgMBAiAEGQEBNwEFCQEBCgsNAgImAgIDHxIBBQEcBhMFg?=
 =?us-ascii?q?xyCAgWaaTyKHXB8M4J2AQEFhxwIEnmLFheBQD+EI4MeAoRlgleJMQYEgXCEFH1?=
 =?us-ascii?q?Rj2oJhTqMFRiRPSyYdTCBJYIOMxoIGxVsBoI1ghsMFxKDOIp0HjOBBQEBiUsEJ?=
 =?us-ascii?q?YIkAQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAABOqg5ch0O0hNFkHQEBBQEHBQGBUQgBCwGDayeDeog?=
 =?us-ascii?q?ZjA+CDRSXPYEkA08pEwGHbSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mIBAgMBAiAEGQEBNwEFCQEBCgsNAgImAgIDHxIBBQEcBhMFgxyCAgWaaTyKHXB?=
 =?us-ascii?q?8M4J2AQEFhxwIEnmLFheBQD+EI4MeAoRlgleJMQYEgXCEFH1Rj2oJhTqMFRiRP?=
 =?us-ascii?q?SyYdTCBJYIOMxoIGxVsBoI1ghsMFxKDOIp0HjOBBQEBiUsEJYIkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="141519138"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 10:05:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729117AbeLJSFK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 13:05:10 -0500
Received: from mail-yw1-f68.google.com ([209.85.161.68]:36331 "EHLO
        mail-yw1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728918AbeLJSFJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 13:05:09 -0500
Received: by mail-yw1-f68.google.com with SMTP id y194so4316284ywg.3
        for <linux-kernel@vger.kernel.org>; Mon, 10 Dec 2018 10:05:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=iDyhZwOx0vltfvp0/a1GQNP1SnHzlm13yyjBXW9GnvY=;
        b=k4ym61HNnM4USDCCioZ9E67EcjWL6bIbrkrz2/qYw7FGq0KJoLTHKUefhsl54h0H3x
         edA7Cy38Ek+lENqkNIVo01LsaWPUMzNn2hSCcisc57XTr8op2lCWzLxOccNBtogzErO2
         +wwyTSl2UL4xl8dxaTHAzGzQboiY2K2jgI/1FRFaPSxgarSXp1SL43RZjCajF0smwnks
         js/q7xVVvEqbAYUHtnixV6irwizcMFYNRZtWa+BMVk4mrBnNUQkvciDsz8hPJXj38+6n
         v2IX45v8C16ZBkx8HLjsCvhkHf5dfq1JSxDfieR4qBmgGUEZfZUDXtUF97l9du67APxY
         dfeQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=iDyhZwOx0vltfvp0/a1GQNP1SnHzlm13yyjBXW9GnvY=;
        b=LI2nF3UDVlcW7oBdlknT9pfaghL0mD2RjbE9Prg3jpiIno+yPw5CS/VfH9vCPp6sbI
         G6QsCLT56BsPOSXgK93UqsXuN8vErngBoqMIoF3UbqOXLqSAMFDjuX6o3HqZfbfAzI6+
         cH7KSmRdF5gm0qlZLvw8iveNAizK0TWTYysO3CT/NO5oABaixXvTvR7nWyWwm9STnR0c
         ovLx72tZNWGxoZg6iGtt4V5Zg9FlebkdS8Gyq9bX0YzJU3EShF06H2CHfQOKjcSoUBql
         Ne+FmNx7GjA9mW3X5kk7INw/wEOuvapewrLJ0BFxxFrqyfW9skB9AxGA31NQ/7QBvZjX
         p/Ew==
X-Gm-Message-State: AA+aEWaaCpLFCJPzZT8GIvnPzEjwrwnqZ4sD8uaZX6mEGgaly+Stlh3/
        B8KbvvoHK1wzScPrDqDLjfltKDoCXzWXGAA8bdfFIQ==
X-Google-Smtp-Source: AFSGD/Ve7ZpKnM1PKA7OqbEel5qdRnm2RGuSu3nFGts/NmXlf8rPgT+84I3YbsHsNvjw09s+MmXiyfflbMUT5rSqE8Q=
X-Received: by 2002:a81:a395:: with SMTP id a143mr12882283ywh.444.1544465108210;
 Mon, 10 Dec 2018 10:05:08 -0800 (PST)
MIME-Version: 1.0
References: <20181127121849.23975-1-enric.balletbo@collabora.com> <20181127121849.23975-5-enric.balletbo@collabora.com>
In-Reply-To: <20181127121849.23975-5-enric.balletbo@collabora.com>
From: Guenter Roeck <groeck@google.com>
Date: Mon, 10 Dec 2018 10:04:57 -0800
Message-ID: <CABXOdTdTpKFeSCOVDA=_4u0s03sNDP-YfP8+4MfLK9hEKGkF-Q@mail.gmail.com>
Subject: Re: [PATCH v3 4/8] mfd / platform: cros_ec: move debugfs attributes
 to its own driver.
To: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Cc: Lee Jones <lee.jones@linaro.org>,
        Gwendal Grignou <gwendal@chromium.org>,
        Nicolas Boichat <drinkcat@chromium.org>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        Guenter Roeck <groeck@chromium.org>, kernel@collabora.com,
        Benson Leung <bleung@chromium.org>,
        Olof Johansson <olof@lixom.net>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 4:19 AM Enric Balletbo i Serra
<enric.balletbo@collabora.com> wrote:
>
> The entire way how cros debugfs attibutes are created is broken.
> cros_ec_debugfs should be its own driver and its attributes should be
> associated with a debugfs driver not the mfd driver.
>
> Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

Reviewed-by: Guenter Roeck <groeck@chromium.org>

> ---
>
> Changes in v3: None
> Changes in v2:
> - Add a "default MFD_CROS_EC_CHARDEV" in Kconfig for this.
> - Remove the checks for missing debug_info, are not needed now.
> - Remove a comment that no longer applies.
>
>  drivers/mfd/cros_ec_dev.c                 | 41 +--------------
>  drivers/platform/chrome/Kconfig           | 11 ++++
>  drivers/platform/chrome/Makefile          |  4 +-
>  drivers/platform/chrome/cros_ec_debugfs.c | 62 +++++++++++++++--------
>  include/linux/mfd/cros_ec.h               |  6 ---
>  5 files changed, 56 insertions(+), 68 deletions(-)
>
> diff --git a/drivers/mfd/cros_ec_dev.c b/drivers/mfd/cros_ec_dev.c
> index 51325049690c..50ba8e0fb4ec 100644
> --- a/drivers/mfd/cros_ec_dev.c
> +++ b/drivers/mfd/cros_ec_dev.c
> @@ -389,6 +389,7 @@ static const struct mfd_cell cros_usbpd_charger_cells[] = {
>  };
>
>  static const struct mfd_cell cros_ec_platform_cells[] = {
> +       { .name = "cros-ec-debugfs" },
>         { .name = "cros-ec-lightbar" },
>         { .name = "cros-ec-vbc" },
>  };
> @@ -483,9 +484,6 @@ static int ec_device_probe(struct platform_device *pdev)
>                          "failed to add cros-ec platform devices: %d\n",
>                          retval);
>
> -       if (cros_ec_debugfs_init(ec))
> -               dev_warn(dev, "failed to create debugfs directory\n");
> -
>         return 0;
>
>  failed:
> @@ -497,62 +495,25 @@ static int ec_device_remove(struct platform_device *pdev)
>  {
>         struct cros_ec_dev *ec = dev_get_drvdata(&pdev->dev);
>
> -       cros_ec_debugfs_remove(ec);
> -
>         mfd_remove_devices(ec->dev);
>         cdev_del(&ec->cdev);
>         device_unregister(&ec->class_dev);
>         return 0;
>  }
>
> -static void ec_device_shutdown(struct platform_device *pdev)
> -{
> -       struct cros_ec_dev *ec = dev_get_drvdata(&pdev->dev);
> -
> -       /* Be sure to clear up debugfs delayed works */
> -       cros_ec_debugfs_remove(ec);
> -}
> -
>  static const struct platform_device_id cros_ec_id[] = {
>         { DRV_NAME, 0 },
>         { /* sentinel */ }
>  };
>  MODULE_DEVICE_TABLE(platform, cros_ec_id);
>
> -static __maybe_unused int ec_device_suspend(struct device *dev)
> -{
> -       struct cros_ec_dev *ec = dev_get_drvdata(dev);
> -
> -       cros_ec_debugfs_suspend(ec);
> -
> -       return 0;
> -}
> -
> -static __maybe_unused int ec_device_resume(struct device *dev)
> -{
> -       struct cros_ec_dev *ec = dev_get_drvdata(dev);
> -
> -       cros_ec_debugfs_resume(ec);
> -
> -       return 0;
> -}
> -
> -static const struct dev_pm_ops cros_ec_dev_pm_ops = {
> -#ifdef CONFIG_PM_SLEEP
> -       .suspend = ec_device_suspend,
> -       .resume = ec_device_resume,
> -#endif
> -};
> -
>  static struct platform_driver cros_ec_dev_driver = {
>         .driver = {
>                 .name = DRV_NAME,
> -               .pm = &cros_ec_dev_pm_ops,
>         },
>         .id_table = cros_ec_id,
>         .probe = ec_device_probe,
>         .remove = ec_device_remove,
> -       .shutdown = ec_device_shutdown,
>  };
>
>  static int __init cros_ec_dev_init(void)
> diff --git a/drivers/platform/chrome/Kconfig b/drivers/platform/chrome/Kconfig
> index 29bd9837d520..4e4232b47764 100644
> --- a/drivers/platform/chrome/Kconfig
> +++ b/drivers/platform/chrome/Kconfig
> @@ -131,4 +131,15 @@ config CROS_EC_VBC
>           To compile this driver as a module, choose M here: the
>           module will be called cros_ec_vbc.
>
> +config CROS_EC_DEBUGFS
> +       tristate "Export ChromeOS EC internals in DebugFS"
> +       depends on MFD_CROS_EC_CHARDEV && DEBUG_FS
> +       default MFD_CROS_EC_CHARDEV
> +       help
> +         This option exposes the ChromeOS EC device internals to
> +         userspace.
> +
> +         To compile this driver as a module, choose M here: the
> +         module will be called cros_ec_debugfs.
> +
>  endif # CHROMEOS_PLATFORMS
> diff --git a/drivers/platform/chrome/Makefile b/drivers/platform/chrome/Makefile
> index 4081b7179df7..12a5c4d18c17 100644
> --- a/drivers/platform/chrome/Makefile
> +++ b/drivers/platform/chrome/Makefile
> @@ -3,8 +3,7 @@
>  obj-$(CONFIG_CHROMEOS_LAPTOP)          += chromeos_laptop.o
>  obj-$(CONFIG_CHROMEOS_PSTORE)          += chromeos_pstore.o
>  obj-$(CONFIG_CHROMEOS_TBMC)            += chromeos_tbmc.o
> -cros_ec_ctl-objs                       := cros_ec_sysfs.o \
> -                                          cros_ec_debugfs.o
> +cros_ec_ctl-objs                       := cros_ec_sysfs.o
>  obj-$(CONFIG_CROS_EC_CTL)              += cros_ec_ctl.o
>  obj-$(CONFIG_CROS_EC_I2C)              += cros_ec_i2c.o
>  obj-$(CONFIG_CROS_EC_SPI)              += cros_ec_spi.o
> @@ -15,3 +14,4 @@ obj-$(CONFIG_CROS_EC_PROTO)           += cros_ec_proto.o
>  obj-$(CONFIG_CROS_KBD_LED_BACKLIGHT)   += cros_kbd_led_backlight.o
>  obj-$(CONFIG_CROS_EC_LIGHTBAR)         += cros_ec_lightbar.o
>  obj-$(CONFIG_CROS_EC_VBC)              += cros_ec_vbc.o
> +obj-$(CONFIG_CROS_EC_DEBUGFS)          += cros_ec_debugfs.o
> diff --git a/drivers/platform/chrome/cros_ec_debugfs.c b/drivers/platform/chrome/cros_ec_debugfs.c
> index c62ee8e610a0..6cacac53dfce 100644
> --- a/drivers/platform/chrome/cros_ec_debugfs.c
> +++ b/drivers/platform/chrome/cros_ec_debugfs.c
> @@ -23,12 +23,16 @@
>  #include <linux/fs.h>
>  #include <linux/mfd/cros_ec.h>
>  #include <linux/mfd/cros_ec_commands.h>
> +#include <linux/module.h>
>  #include <linux/mutex.h>
> +#include <linux/platform_device.h>
>  #include <linux/poll.h>
>  #include <linux/sched.h>
>  #include <linux/slab.h>
>  #include <linux/wait.h>
>
> +#define DRV_NAME "cros-ec-debugfs"
> +
>  #define LOG_SHIFT              14
>  #define LOG_SIZE               (1 << LOG_SHIFT)
>  #define LOG_POLL_SEC           10
> @@ -423,8 +427,9 @@ static int cros_ec_create_pdinfo(struct cros_ec_debugfs *debug_info)
>         return 0;
>  }
>
> -int cros_ec_debugfs_init(struct cros_ec_dev *ec)
> +static int cros_ec_debugfs_probe(struct platform_device *pd)
>  {
> +       struct cros_ec_dev *ec = dev_get_drvdata(pd->dev.parent);
>         struct cros_ec_platform *ec_platform = dev_get_platdata(ec->dev);
>         const char *name = ec_platform->ec_name;
>         struct cros_ec_debugfs *debug_info;
> @@ -453,40 +458,57 @@ int cros_ec_debugfs_init(struct cros_ec_dev *ec)
>
>         ec->debug_info = debug_info;
>
> +       dev_set_drvdata(&pd->dev, ec);
> +
>         return 0;
>
>  remove_debugfs:
>         debugfs_remove_recursive(debug_info->dir);
>         return ret;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_init);
>
> -void cros_ec_debugfs_remove(struct cros_ec_dev *ec)
> +static int cros_ec_debugfs_remove(struct platform_device *pd)
>  {
> -       if (!ec->debug_info)
> -               return;
> +       struct cros_ec_dev *ec = dev_get_drvdata(pd->dev.parent);
>
>         debugfs_remove_recursive(ec->debug_info->dir);
>         cros_ec_cleanup_console_log(ec->debug_info);
> +
> +       return 0;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_remove);
>
> -void cros_ec_debugfs_suspend(struct cros_ec_dev *ec)
> +static int __maybe_unused cros_ec_debugfs_suspend(struct device *dev)
>  {
> -       /*
> -        * cros_ec_debugfs_init() failures are non-fatal; it's also possible
> -        * that we initted things but decided that console log wasn't supported.
> -        * We'll use the same set of checks that cros_ec_debugfs_remove() +
> -        * cros_ec_cleanup_console_log() end up using to handle those cases.
> -        */
> -       if (ec->debug_info && ec->debug_info->log_buffer.buf)
> -               cancel_delayed_work_sync(&ec->debug_info->log_poll_work);
> +       struct cros_ec_dev *ec = dev_get_drvdata(dev);
> +
> +       cancel_delayed_work_sync(&ec->debug_info->log_poll_work);
> +
> +       return 0;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_suspend);
>
> -void cros_ec_debugfs_resume(struct cros_ec_dev *ec)
> +static int __maybe_unused cros_ec_debugfs_resume(struct device *dev)
>  {
> -       if (ec->debug_info && ec->debug_info->log_buffer.buf)
> -               schedule_delayed_work(&ec->debug_info->log_poll_work, 0);
> +       struct cros_ec_dev *ec = dev_get_drvdata(dev);
> +
> +       schedule_delayed_work(&ec->debug_info->log_poll_work, 0);
> +
> +       return 0;
>  }
> -EXPORT_SYMBOL(cros_ec_debugfs_resume);
> +
> +static SIMPLE_DEV_PM_OPS(cros_ec_debugfs_pm_ops,
> +                        cros_ec_debugfs_suspend, cros_ec_debugfs_resume);
> +
> +static struct platform_driver cros_ec_debugfs_driver = {
> +       .driver = {
> +               .name = DRV_NAME,
> +               .pm = &cros_ec_debugfs_pm_ops,
> +       },
> +       .probe = cros_ec_debugfs_probe,
> +       .remove = cros_ec_debugfs_remove,
> +};
> +
> +module_platform_driver(cros_ec_debugfs_driver);
> +
> +MODULE_LICENSE("GPL");
> +MODULE_DESCRIPTION("Debug logs for ChromeOS EC");
> +MODULE_ALIAS("platform:" DRV_NAME);
> diff --git a/include/linux/mfd/cros_ec.h b/include/linux/mfd/cros_ec.h
> index bbbe416fd573..3e4401e2ceea 100644
> --- a/include/linux/mfd/cros_ec.h
> +++ b/include/linux/mfd/cros_ec.h
> @@ -326,10 +326,4 @@ u32 cros_ec_get_host_event(struct cros_ec_device *ec_dev);
>  /* sysfs stuff */
>  extern struct attribute_group cros_ec_attr_group;
>
> -/* debugfs stuff */
> -int cros_ec_debugfs_init(struct cros_ec_dev *ec);
> -void cros_ec_debugfs_remove(struct cros_ec_dev *ec);
> -void cros_ec_debugfs_suspend(struct cros_ec_dev *ec);
> -void cros_ec_debugfs_resume(struct cros_ec_dev *ec);
> -
>  #endif /* __LINUX_MFD_CROS_EC_H */
> --
> 2.19.1
>
