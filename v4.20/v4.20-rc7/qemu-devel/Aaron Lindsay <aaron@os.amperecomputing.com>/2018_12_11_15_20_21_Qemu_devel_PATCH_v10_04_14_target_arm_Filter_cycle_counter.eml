Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:47:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 43F4358079D
	for <like.xu@linux.intel.com>; Tue, 11 Dec 2018 07:27:20 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 07:27:20 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A19FAdhPhumBYGnAB098l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/78oMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJdAo2y?=
 =?us-ascii?q?bIUPAegOPedEoIfyqFQAsAO+CAuuCu7g1zNFiGP60rMh0+k6DQHGxRYtE84SvH?=
 =?us-ascii?q?jIsdn4MroZX+CvzKnPyDXOd+9b1i3n6IjPdBAqvPeCXbN2ccXM0kkgDQPEhUiX?=
 =?us-ascii?q?pIP/JTyVzOMNs26A4upnTuKjkXQoqwRpojex3McjlJXGhoUQylDc6CV53Ic1Jd?=
 =?us-ascii?q?u3SEJhfdGkF55QujicOoBrQc0iW3lltDgmxrAFo5K3YTUGxZc9yxLBZfGKc5KE?=
 =?us-ascii?q?7g/hWeqJIDp1hGhpdK+7ihqu60Sty/fwWtep3FpUtiZFnMfDu3MR2xHW78WKTu?=
 =?us-ascii?q?dy80W91juKyQze6P1LLEIxmKfUN5Eu2bw9m58dsUnAACP6hEP7h7KMeEo+4Oin?=
 =?us-ascii?q?8eHnb63mppCCM490jRnzMqAvmsykHeQ4KRICX2ed+eShzrHj+lf5QLpSgv03lK?=
 =?us-ascii?q?nWrozaKNwFqqKlAAJZyJsv5wu8Aju8ztgVk3kKIEhYdB+Fl4TpPkvBIPH8Dfex?=
 =?us-ascii?q?mVSslzJryujfPrL/B5XNM2HPn6r/crZj9UFczBM/wstY55JJDLEOPOz8WlT2uN?=
 =?us-ascii?q?zcDx85MBK7z/zoCdVgzo4eXWOPAqmEMKLdq1OI5+QvI/WSa48RojryN/8l5/v1?=
 =?us-ascii?q?gH8/nl8de6ap3Z0KaHyiGfRmOUqZbWL2gtgdCWcKohY+TOvyhV2GUD5TZGi9U7?=
 =?us-ascii?q?gz5zEmE4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/JfIB+UOdJrxzwY?=
 =?us-ascii?q?SaC6Gchm0RC1qBS8zb1hIezJvCoCutXm3dlx4uTV0hYq6T1zCd/aymyIUiR4k3?=
 =?us-ascii?q?0FQ2wL2rtiqxl4w1aHza8qmvFdCJlf6u1EVkIgOIfBwvdmI9b1XA3HY5GOUlnx?=
 =?us-ascii?q?WcisAzw6UocsxcQTaV12AdSog0P/2H/gGrIQivmCHpkc9KXa0H7sYcFnxDyOgL?=
 =?us-ascii?q?AsikRjS9FKHWuhgKF56k7UHYGf1w2hmrqnb+w51T/B+WOHhT6WsV1VSkh1WLTJ?=
 =?us-ascii?q?UHQbTk/Xq93j4QXFVbD4TfwONgpa1ceDMONkcNTvhlRdDKPqPNXFf2uwgSG+Hx?=
 =?us-ascii?q?+OzbKXRJrrf2QbzGPWD01S10gs8HfOFRU3ACjp933TDRR0GF7val+q+u57/jfz?=
 =?us-ascii?q?dkIowhvCRFdmzKa15RcUmfHUH/gJ2akYuDgoqil5Wk6ww9/MI9WFrgtlOq5bZI?=
 =?us-ascii?q?V5qG1G3mLQrQA1HpGmI614nVkYO1Btvkju3g97TIVNl8QntmgtyiJ2KKSRylQH?=
 =?us-ascii?q?cCmXi8PeILrSf0D75hepI4rX3F3F2cferq4G8vM+g1L4+gisDkc4/n5g1sFIz3?=
 =?us-ascii?q?qa6dPBCw9EAsG5aVo+6xUv/+KSWSI6/Y6BkCQ0aaQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DCAQD/1Q9cmBHrdtBkgheBMVCBXAQyC?=
 =?us-ascii?q?oxpimdKgwmIF4RxiU6BJANMEwEYFIcuIjQJDQEDAQEBAQEBAgETAQEBAQEICws?=
 =?us-ascii?q?GGw4jDII2BQIDGgEGglwCAQMBAg8VGQEBBAopAQIDAQIGAQEBARosCAMBHREXD?=
 =?us-ascii?q?gIEARIFHYJ/gWoDFQECApoRKgKKB4FsM4J2AQEFgQUBg38NC4IJCIw7F4F/gRG?=
 =?us-ascii?q?CXYMMiAWLLYRZkEkuCYImi3yDJCMQUJBgLIh3hgGJaAIEAgQFAg8FgUaCDjMaC?=
 =?us-ascii?q?BsVgyeCJxcSgziKHAE2coEHIYhJWAGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0DCAQD/1Q9cmBHrdtBkgheBMVCBXAQyCoxpimdKgwmIF4R?=
 =?us-ascii?q?xiU6BJANMEwEYFIcuIjQJDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDG?=
 =?us-ascii?q?gEGglwCAQMBAg8VGQEBBAopAQIDAQIGAQEBARosCAMBHREXDgIEARIFHYJ/gWo?=
 =?us-ascii?q?DFQECApoRKgKKB4FsM4J2AQEFgQUBg38NC4IJCIw7F4F/gRGCXYMMiAWLLYRZk?=
 =?us-ascii?q?EkuCYImi3yDJCMQUJBgLIh3hgGJaAIEAgQFAg8FgUaCDjMaCBsVgyeCJxcSgzi?=
 =?us-ascii?q?KHAE2coEHIYhJWAGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="55433130"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 11 Dec 2018 07:27:19 -0800
Received: from localhost ([::1]:38664 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWjwM-0001Fi-9h
	for like.xu@linux.intel.com; Tue, 11 Dec 2018 10:27:18 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:57311)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gWjpv-00040J-EW
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 10:20:42 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <aaron@os.amperecomputing.com>) id 1gWjpo-0001Th-Rv
	for qemu-devel@nongnu.org; Tue, 11 Dec 2018 10:20:39 -0500
Received: from mail-eopbgr740122.outbound.protection.outlook.com
	([40.107.74.122]:12256
	helo=NAM01-BN3-obe.outbound.protection.outlook.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <aaron@os.amperecomputing.com>)
	id 1gWjpi-0001La-Ii; Tue, 11 Dec 2018 10:20:26 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amperemail.onmicrosoft.com; s=selector1-os-amperecomputing-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
	bh=roUJBi9hvYcNY8czGNrJxD4pfxhq6rTKR688R58RdI8=;
	b=aot2IiKW1Cyl+2RfFmgPkl8CMdbRSO5ezcS77AQEHnstg3IRjCisAaNG8Ec8cKkqVP0JjY/bOgZqxajYONbI7S4+1NX+H+GxBeMTtLIqlO9XGsq2QUAfqy0p/fUwisaRBFEuCl5RJNQP2lnyB1aiR9r+zsJOF1LZmuQkdqwj2uQ=
Received: from DM6PR01MB4825.prod.exchangelabs.com (20.177.218.222) by
	DM6PR01MB4604.prod.exchangelabs.com (20.177.216.81) with Microsoft SMTP
	Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
	15.20.1404.22; Tue, 11 Dec 2018 15:20:21 +0000
Received: from DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820]) by DM6PR01MB4825.prod.exchangelabs.com
	([fe80::9c7c:27c7:4cb7:f820%2]) with mapi id 15.20.1404.026;
	Tue, 11 Dec 2018 15:20:21 +0000
From: Aaron Lindsay <aaron@os.amperecomputing.com>
To: "qemu-arm@nongnu.org" <qemu-arm@nongnu.org>, Peter Maydell
	<peter.maydell@linaro.org>,
	Alistair Francis <alistair.francis@xilinx.com>, 
	Wei Huang <wei@redhat.com>,
	Peter Crosthwaite <crosthwaite.peter@gmail.com>, 
	Richard Henderson <richard.henderson@linaro.org>
Thread-Topic: [PATCH v10 04/14] target/arm: Filter cycle counter based on
	PMCCFILTR_EL0
Thread-Index: AQHUkWUIgARRWrCVCU6Eily/oAhiFQ==
Date: Tue, 11 Dec 2018 15:20:21 +0000
Message-ID: <20181211151945.29137-5-aaron@os.amperecomputing.com>
References: <20181211151945.29137-1-aaron@os.amperecomputing.com>
In-Reply-To: <20181211151945.29137-1-aaron@os.amperecomputing.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-clientproxiedby: BYAPR11CA0041.namprd11.prod.outlook.com
	(2603:10b6:a03:80::18) To DM6PR01MB4825.prod.exchangelabs.com
	(2603:10b6:5:6b::30)
authentication-results: spf=none (sender IP is )
	smtp.mailfrom=aaron@os.amperecomputing.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-originating-ip: [65.190.6.212]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1; DM6PR01MB4604;
	6:VWt3Wm1IocwvyPz/V2wXKiVeT9zswzYye4tpQUH3ohqu6REEe0TBzEtMfqm/ZVB7fmsIMI4Xm0NnTa+q+HeSl2abElrzE1HXmZSb+y7nm9egzT/+3df8AXyDMZlOH7J8atJIYK3hVl/uno876IfY0+UqJaIksr/fucOK6caqyDQAB4SpvU8o0uskQDLW/F3Kvd39CuauZCouq2Z685EC09tR3vhlMei1Z9+OLs52+4uLJf7AggQ5IS3zPZYOVB6XlIDaSrN2tFtWsU8wYP5q4Y2/vGRs3Rzv6YqOB5VBNo+i/pGWhSPhEUgi2xmMIYfUFnVRwNBqOWXEYgM8XZA5wiGrXMehoVqYYkItOlskPbSSDr7uvmL9OD2VGW0BKyPg3S/jF3oGJc4ctgV47kdpsRNtsd1EV93OVk9wDbPrQSax5zDEisYwApGjnmiBrSP/CsYJDVQE0FdizhFDzIkFpw==;
	5:+I+N+cxarrM9+7Jzb3kFoYvqll0FpHVYTxlIUV8pZaZG2tSKhHkdp9+eiXIVl8ViVtHVkcK+s+KDUuBV8vfjN+hmSUhWJAtwbAnTqbDG/dMtSynBKx9eHJS3gNTEEGCe4/39r70uDVKmfpbuLCXJ7z3FvggrllHSuhgrsFfof+U=;
	7:lQ5hBRzrFoYP7HmVJMEhJvYvcmY1cAMpyE1wPVyZJpHsGijLNPIi8FGT/YTe5FuGnnyxkVIEAxjx0csBESGCZelSlf3PwO8Ji8JIWiVe7fReLZ82zRGq0FD/BtW9lnEWlj2kBLLv+OR1Lg8S7t9I4g==
x-ms-office365-filtering-correlation-id: 47bb8d63-27b3-4721-5cc0-08d65f7c2a8b
x-microsoft-antispam: BCL:0; PCL:0;
	RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(2017052603328)(7153060)(7193020);
	SRVR:DM6PR01MB4604; 
x-ms-traffictypediagnostic: DM6PR01MB4604:
x-microsoft-antispam-prvs: <DM6PR01MB4604ECB10377C2A2692B465B8AA60@DM6PR01MB4604.prod.exchangelabs.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0; PCL:0;
	RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(3002001)(93006095)(93001095)(10201501046)(3231455)(999002)(944501520)(52105112)(148016)(149066)(150057)(6041310)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);
	SRVR:DM6PR01MB4604; BCL:0; PCL:0; RULEID:; SRVR:DM6PR01MB4604; 
x-forefront-prvs: 08831F51DC
x-forefront-antispam-report: SFV:NSPM;
	SFS:(10019020)(396003)(136003)(376002)(366004)(346002)(39850400004)(199004)(189003)(97736004)(1076002)(14444005)(256004)(26005)(25786009)(7736002)(53936002)(2616005)(186003)(86362001)(4326008)(446003)(11346002)(305945005)(575784001)(105586002)(106356001)(476003)(486006)(7416002)(5660300001)(102836004)(478600001)(8936002)(316002)(81156014)(81166006)(8676002)(2501003)(6512007)(2906002)(39060400002)(54906003)(110136005)(71190400001)(71200400001)(14454004)(76176011)(6116002)(386003)(6486002)(3846002)(99286004)(6436002)(68736007)(66066001)(6506007)(52116002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:DM6PR01MB4604;
	H:DM6PR01MB4825.prod.exchangelabs.com; FPR:; SPF:None; LANG:en;
	PTR:InfoNoRecords; A:0; MX:1; 
x-microsoft-antispam-message-info: AQh2+Ng5W2qlr3tjubhWfh5AY/BU/oK09rOAgQaSzYlNujj25iDZXVCkQibFDzGUdVEioGvGp/igfS0dZSmIcuAS5/66Ava7RZwn/oBqcWJUz5QXrVb06CRgg6xSdvhpo1yfzgV874qdoycK9xank/tW/8cwES3M+iuaPmv3jUE3lleTUUN3uZ4Q46qGYtrEELfeSk/UCWy0QEuVnN0NINmc2kE6kvu1E0p8ImhFIKOQ6+fHFUtrrKGTcce95rdly3LCOEQxJIh+F/YOTaCutuhf6M7rjVE9nOK0Oeby9bsyUxRL5xCR0wVZWpt1q4W/
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: os.amperecomputing.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 47bb8d63-27b3-4721-5cc0-08d65f7c2a8b
X-MS-Exchange-CrossTenant-originalarrivaltime: 11 Dec 2018 15:20:21.6988 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3bc2b170-fd94-476d-b0ce-4229bdc904a7
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR01MB4604
X-detected-operating-system: by eggs.gnu.org: Windows 7 or 8 [fuzzy]
X-Received-From: 40.107.74.122
Subject: [Qemu-devel] [PATCH v10 04/14] target/arm: Filter cycle counter
 based on PMCCFILTR_EL0
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Michael Spradling <mspradli@codeaurora.org>,
	Digant Desai <digantd@codeaurora.org>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	Aaron Lindsay <aaron@os.amperecomputing.com>,
	Aaron Lindsay <aclindsa@gmail.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Rename arm_ccnt_enabled to pmu_counter_enabled, and add logic to only
return 'true' if the specified counter is enabled and neither prohibited
or filtered.

Signed-off-by: Aaron Lindsay <alindsay@codeaurora.org>
Signed-off-by: Aaron Lindsay <aclindsa@gmail.com>
Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
---
 target/arm/cpu.c    |  3 ++
 target/arm/cpu.h    | 10 ++++-
 target/arm/helper.c | 96 +++++++++++++++++++++++++++++++++++++++++----
 3 files changed, 101 insertions(+), 8 deletions(-)

diff --git a/target/arm/cpu.c b/target/arm/cpu.c
index 60411f6bfe..f7bad04f60 100644
--- a/target/arm/cpu.c
+++ b/target/arm/cpu.c
@@ -1020,6 +1020,9 @@ static void arm_cpu_realizefn(DeviceState *dev, Error=
 **errp)
     if (!cpu->has_pmu) {
         unset_feature(env, ARM_FEATURE_PMU);
         cpu->id_aa64dfr0 &=3D ~0xf00;
+    } else if (!kvm_enabled()) {
+        arm_register_pre_el_change_hook(cpu, &pmu_pre_el_change, 0);
+        arm_register_el_change_hook(cpu, &pmu_post_el_change, 0);
     }
=20
     if (!arm_feature(env, ARM_FEATURE_EL2)) {
diff --git a/target/arm/cpu.h b/target/arm/cpu.h
index 61ac458627..627e5c1995 100644
--- a/target/arm/cpu.h
+++ b/target/arm/cpu.h
@@ -987,6 +987,12 @@ void pmccntr_op_finish(CPUARMState *env);
 void pmu_op_start(CPUARMState *env);
 void pmu_op_finish(CPUARMState *env);
=20
+/**
+ * Functions to register as EL change hooks for PMU mode filtering
+ */
+void pmu_pre_el_change(ARMCPU *cpu, void *ignored);
+void pmu_post_el_change(ARMCPU *cpu, void *ignored);
+
 /* SCTLR bit meanings. Several bits have been reused in newer
  * versions of the architecture; in that case we define constants
  * for both old and new bit meanings. Code which tests against those
@@ -1048,7 +1054,8 @@ void pmu_op_finish(CPUARMState *env);
=20
 #define MDCR_EPMAD    (1U << 21)
 #define MDCR_EDAD     (1U << 20)
-#define MDCR_SPME     (1U << 17)
+#define MDCR_SPME     (1U << 17)  /* MDCR_EL3 */
+#define MDCR_HPMD     (1U << 17)  /* MDCR_EL2 */
 #define MDCR_SDD      (1U << 16)
 #define MDCR_SPD      (3U << 14)
 #define MDCR_TDRA     (1U << 11)
@@ -1058,6 +1065,7 @@ void pmu_op_finish(CPUARMState *env);
 #define MDCR_HPME     (1U << 7)
 #define MDCR_TPM      (1U << 6)
 #define MDCR_TPMCR    (1U << 5)
+#define MDCR_HPMN     (0x1fU)
=20
 /* Not all of the MDCR_EL3 bits are present in the 32-bit SDCR */
 #define SDCR_VALID_MASK (MDCR_EPMAD | MDCR_EDAD | MDCR_SPME | MDCR_SPD)
diff --git a/target/arm/helper.c b/target/arm/helper.c
index 71a5c71e0a..ddb47813d2 100644
--- a/target/arm/helper.c
+++ b/target/arm/helper.c
@@ -976,10 +976,24 @@ static const ARMCPRegInfo v6_cp_reginfo[] =3D {
 /* Definitions for the PMU registers */
 #define PMCRN_MASK  0xf800
 #define PMCRN_SHIFT 11
+#define PMCRDP  0x10
 #define PMCRD   0x8
 #define PMCRC   0x4
 #define PMCRE   0x1
=20
+#define PMXEVTYPER_P          0x80000000
+#define PMXEVTYPER_U          0x40000000
+#define PMXEVTYPER_NSK        0x20000000
+#define PMXEVTYPER_NSU        0x10000000
+#define PMXEVTYPER_NSH        0x08000000
+#define PMXEVTYPER_M          0x04000000
+#define PMXEVTYPER_MT         0x02000000
+#define PMXEVTYPER_EVTCOUNT   0x0000ffff
+#define PMXEVTYPER_MASK       (PMXEVTYPER_P | PMXEVTYPER_U | PMXEVTYPER_NS=
K | \
+                               PMXEVTYPER_NSU | PMXEVTYPER_NSH | \
+                               PMXEVTYPER_M | PMXEVTYPER_MT | \
+                               PMXEVTYPER_EVTCOUNT)
+
 static inline uint32_t pmu_num_counters(CPUARMState *env)
 {
   return (env->cp15.c9_pmcr & PMCRN_MASK) >> PMCRN_SHIFT;
@@ -1075,16 +1089,66 @@ static CPAccessResult pmreg_access_ccntr(CPUARMStat=
e *env,
     return pmreg_access(env, ri, isread);
 }
=20
-static inline bool arm_ccnt_enabled(CPUARMState *env)
+/* Returns true if the counter (pass 31 for PMCCNTR) should count events u=
sing
+ * the current EL, security state, and register configuration.
+ */
+static bool pmu_counter_enabled(CPUARMState *env, uint8_t counter)
 {
-    /* This does not support checking PMCCFILTR_EL0 register */
+    uint64_t filter;
+    bool e, p, u, nsk, nsu, nsh, m;
+    bool enabled, prohibited, filtered;
+    bool secure =3D arm_is_secure(env);
+    int el =3D arm_current_el(env);
+    uint8_t hpmn =3D env->cp15.mdcr_el2 & MDCR_HPMN;
=20
-    if (!(env->cp15.c9_pmcr & PMCRE) || !(env->cp15.c9_pmcnten & (1 << 31)=
)) {
-        return false;
+    if (!arm_feature(env, ARM_FEATURE_EL2) ||
+            (counter < hpmn || counter =3D=3D 31)) {
+        e =3D env->cp15.c9_pmcr & PMCRE;
+    } else {
+        e =3D env->cp15.mdcr_el2 & MDCR_HPME;
     }
+    enabled =3D e && (env->cp15.c9_pmcnten & (1 << counter));
=20
-    return true;
+    if (!secure) {
+        if (el =3D=3D 2 && (counter < hpmn || counter =3D=3D 31)) {
+            prohibited =3D env->cp15.mdcr_el2 & MDCR_HPMD;
+        } else {
+            prohibited =3D false;
+        }
+    } else {
+        prohibited =3D arm_feature(env, ARM_FEATURE_EL3) &&
+           (env->cp15.mdcr_el3 & MDCR_SPME);
+    }
+
+    if (prohibited && counter =3D=3D 31) {
+        prohibited =3D env->cp15.c9_pmcr & PMCRDP;
+    }
+
+    /* TODO Remove assert, set filter to correct PMEVTYPER */
+    assert(counter =3D=3D 31);
+    filter =3D env->cp15.pmccfiltr_el0;
+
+    p   =3D filter & PMXEVTYPER_P;
+    u   =3D filter & PMXEVTYPER_U;
+    nsk =3D arm_feature(env, ARM_FEATURE_EL3) && (filter & PMXEVTYPER_NSK)=
;
+    nsu =3D arm_feature(env, ARM_FEATURE_EL3) && (filter & PMXEVTYPER_NSU)=
;
+    nsh =3D arm_feature(env, ARM_FEATURE_EL2) && (filter & PMXEVTYPER_NSH)=
;
+    m   =3D arm_el_is_aa64(env, 1) &&
+              arm_feature(env, ARM_FEATURE_EL3) && (filter & PMXEVTYPER_M)=
;
+
+    if (el =3D=3D 0) {
+        filtered =3D secure ? u : u !=3D nsu;
+    } else if (el =3D=3D 1) {
+        filtered =3D secure ? p : p !=3D nsk;
+    } else if (el =3D=3D 2) {
+        filtered =3D !nsh;
+    } else { /* EL3 */
+        filtered =3D m !=3D p;
+    }
+
+    return enabled && !prohibited && !filtered;
 }
+
 /*
  * Ensure c15_ccnt is the guest-visible count so that operations such as
  * enabling/disabling the counter or filtering, modifying the count itself=
,
@@ -1097,7 +1161,7 @@ void pmccntr_op_start(CPUARMState *env)
     cycles =3D muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL),
                           ARM_CPU_FREQ, NANOSECONDS_PER_SECOND);
=20
-    if (arm_ccnt_enabled(env)) {
+    if (pmu_counter_enabled(env, 31)) {
         uint64_t eff_cycles =3D cycles;
         if (env->cp15.c9_pmcr & PMCRD) {
             /* Increment once every 64 processor clock cycles */
@@ -1116,7 +1180,7 @@ void pmccntr_op_start(CPUARMState *env)
  */
 void pmccntr_op_finish(CPUARMState *env)
 {
-    if (arm_ccnt_enabled(env)) {
+    if (pmu_counter_enabled(env, 31)) {
         uint64_t prev_cycles =3D env->cp15.c15_ccnt_delta;
=20
         if (env->cp15.c9_pmcr & PMCRD) {
@@ -1138,6 +1202,16 @@ void pmu_op_finish(CPUARMState *env)
     pmccntr_op_finish(env);
 }
=20
+void pmu_pre_el_change(ARMCPU *cpu, void *ignored)
+{
+    pmu_op_start(&cpu->env);
+}
+
+void pmu_post_el_change(ARMCPU *cpu, void *ignored)
+{
+    pmu_op_finish(&cpu->env);
+}
+
 static void pmcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value)
 {
@@ -1209,6 +1283,14 @@ void pmu_op_finish(CPUARMState *env)
 {
 }
=20
+void pmu_pre_el_change(ARMCPU *cpu, void *ignored)
+{
+}
+
+void pmu_post_el_change(ARMCPU *cpu, void *ignored)
+{
+}
+
 #endif
=20
 static void pmccfiltr_write(CPUARMState *env, const ARMCPRegInfo *ri,
--=20
2.19.2


