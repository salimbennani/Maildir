Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:42:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C935C580380
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 10:55:01 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 10 Dec 2018 10:55:01 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A463FtRSonbWKO8iFYfMVZYsbJtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBaDt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDYy8?=
 =?us-ascii?q?YYkAAeoPM+hbsYfyu1QAowamBQSuBu3ixSJEi3Hq0aIkyOQsCh3G3BU6Et4SrH?=
 =?us-ascii?q?jYsNf4OaEPWu611qnIyjDDYutR1zjn8ojHbgktrO2KXb1ta8rW01QkGQXYjlWK?=
 =?us-ascii?q?t4PqJS6V3fkKvmie9eVgT/6ghHQhqw5suDig2N0gio3UhoIP1F/L7zh5zZ06Jd?=
 =?us-ascii?q?29UkF7YNqkHIFMuCGdMot7W8UvSHxrtiYi0rAKp4K3cSsQxJg62hLSaOaLf5aG?=
 =?us-ascii?q?7x/jTuqdPDV1iGp7dL2lmxq+7U2txvDzW8S0zFpHqyVIn9rNu30C0hHf9NSLR/?=
 =?us-ascii?q?5480qu1juC2Abe4fxeL08uj6rUMZshz6YwlpUNtUTDGTf7mEH3jK+NakUk4fKk?=
 =?us-ascii?q?6+vhYrX7vJOcMJV0ig7mPqQvnMywH/g4PxAQU2SH+umwzqDv8VD6TblQkPE7nK?=
 =?us-ascii?q?nUvIrHKckZvqK5BhVa0ocn6xaxFTem19EYkGEeLF1bfRKHkpHlNEzQL/DmE/i/?=
 =?us-ascii?q?h02gnyxsx/DbOL3uHovCLmPEnLflfLZ96FBTxBA8zNBC/59UDrABIPTuWk7+rt?=
 =?us-ascii?q?DYDxk5MxCqzObjEtlyyoQeWWeUD6+fN6PSt1CI5uQyI+WWY48Vojn9J+A/5/Hy?=
 =?us-ascii?q?lX85hUMdfa6x0JsTaXC4HeppL1+WYHrxmdoBFWYKvgwjTO3lklGCUDhTZ2qsUK?=
 =?us-ascii?q?I4/D00FIWmDYKQDr2rm6GLiSenAoVNNCcBDlGXDWyucYKCVPERLiWILYhkmz0A?=
 =?us-ascii?q?ULGnDIg5yRCpshS90rdiM6/Y9zMVscHe0sNo7bjWnBA26TsmFsmYziSBQn95mi?=
 =?us-ascii?q?YSSiYr0btjiUp6zFiFzO5/mfMPDsFZ5f5CTlInM4XBxfdxEdH4V1H9eYKsQUyl?=
 =?us-ascii?q?X87uKCs0RMgs2MMDeQ4pEs+nhAre9zCnD78ci/qAA5lioYzG2H2kAs9nwDPv0q?=
 =?us-ascii?q?U7DhECX9FCPHDu0qt27QPaAYLTngOdirynfLk00yvE9WPFxm2L6hILGDVsWLnI?=
 =?us-ascii?q?CChMLnDdqs70swabF+ej?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BOAADhtQ5cmBHrdtBkHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwgTmBKYN6iHiLMIINh3eCEQmNQIFzFBgDEYRAgy0iNgcNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEBAQgLCwYbDiMMgjYFAgMaAQaCWwEBAQECAQECIB0BBQoMHQECAQIBAgYBA?=
 =?us-ascii?q?QUFCwMKAgIiBAICAwEeAREBBQEcBhMFgxwBgWgBAw0IAQSaajyLDYESBQEXgnc?=
 =?us-ascii?q?FhDUKGScNXTGBBgIGEnmLFoIWhCOFAYMEglcCjz16hFaLaAcChwiKRxiCKY8Um?=
 =?us-ascii?q?SEPIYErAVmBLjMaI4EBgjsJghI1gziFZYRzPDGBB4ohgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BOAADhtQ5cmBHrdtBkHgEGBwaBUwcLAYEwgTmBKYN6iHi?=
 =?us-ascii?q?LMIINh3eCEQmNQIFzFBgDEYRAgy0iNgcNAQMBAQEBAQECARMBAQEBAQgLCwYbD?=
 =?us-ascii?q?iMMgjYFAgMaAQaCWwEBAQECAQECIB0BBQoMHQECAQIBAgYBAQUFCwMKAgIiBAI?=
 =?us-ascii?q?CAwEeAREBBQEcBhMFgxwBgWgBAw0IAQSaajyLDYESBQEXgncFhDUKGScNXTGBB?=
 =?us-ascii?q?gIGEnmLFoIWhCOFAYMEglcCjz16hFaLaAcChwiKRxiCKY8UmSEPIYErAVmBLjM?=
 =?us-ascii?q?aI4EBgjsJghI1gziFZYRzPDGBB4ohgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="55740247"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 10:54:33 -0800
Received: from localhost ([::1]:34329 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWQhM-0007TA-GN
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 13:54:32 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37740)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcandre.lureau@gmail.com>) id 1gWQcv-00033u-I5
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 13:49:58 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcandre.lureau@gmail.com>) id 1gWQMj-0007a0-0a
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 13:33:14 -0500
Received: from mail-wr1-x444.google.com ([2a00:1450:4864:20::444]:33665)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <marcandre.lureau@gmail.com>)
	id 1gWQMi-0007Zd-OB
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 13:33:12 -0500
Received: by mail-wr1-x444.google.com with SMTP id c14so11587748wrr.0
	for <qemu-devel@nongnu.org>; Mon, 10 Dec 2018 10:33:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=qFERB5FqYt9AE9twNxbLJOca/bMMVlFDCKJ0Dnfsvv8=;
	b=ti53rTDVYD0vUoL9C+aNHT/FGm7hDykV8sAKPWq7yMZj1u65+8YqhXjYhl1BqXMZ2Y
	k2wxx7eYRj5eikVsbCmyZwR+N1wkkPQiG3pOCrE9frR+J+LcYRsH6v3Ty2z7XBcYwSXY
	AeDLp3ynQ9do5JsLDGpFjpb8+0kie0MrANU4sKunrxw0Aw+Ka4a627R6l19tjXCYESe5
	w/cq8Ul+eONXUdNh1eMWWJJmGlUQG1zKbRcqAsFA30jRSagdsGKOX+pqn6i+75b/OX61
	6FkartFXfcVvnkAJZ+orHW0VMEscni6fODet5UOINxKHYmPMv2AHLKxbDFjVQjp4cbwz
	orYg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=qFERB5FqYt9AE9twNxbLJOca/bMMVlFDCKJ0Dnfsvv8=;
	b=UNn7y4poA4GlD01m25AZRErORqMXmeF4a2nxW0mgAjQ31082gDo3E1bWMr0NdRZ5+7
	g+cer8EpAR6cnbINeoD6x3yhAkf3ZWiackqVvbkzmfNqtegK1orbv9doqIyTbkq0dYJu
	D+fQUFLlWmBrrd1qbt5VOyx1oyHMIwvf4HkN7xsazNVd8YjuTzHhxe2Mgy97yMlhAnOC
	lCnakgJgGYKH8o2psfABlws5JEy5L7MfVZHCA1iChdMSvL7eKkEbdmeyh5ZdGFAV+2Wu
	3GChUgOF1mb9tINsoxbqFpW57ESCYESckgFhzMnwrEOVmIQCDTrwWBUTrqVrf/67fUwH
	4P/w==
X-Gm-Message-State: AA+aEWaoczSqOGoD2nBy6b3bldiMUumQ90/vdC5YweBAqXFwQ5mH7RdN
	t1b4AcERLB/HsfbslDAPnjBaDyBmB4GJ8cQeZQncOH/Tz28=
X-Google-Smtp-Source: AFSGD/Xx+3AXMenlOh730m/WgdYvneT3hwGVupKZQImrndTVERhDAx0d8u3QAQQfqzpt2UNIXcFC+AC8mQ0W7MAbYyE=
X-Received: by 2002:adf:80cf:: with SMTP id 73mr10779613wrl.57.1544466791246; 
	Mon, 10 Dec 2018 10:33:11 -0800 (PST)
MIME-Version: 1.0
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-19-marcandre.lureau@redhat.com>
	<871s6ubp1g.fsf@dusky.pond.sub.org>
In-Reply-To: <871s6ubp1g.fsf@dusky.pond.sub.org>
From: =?UTF-8?B?TWFyYy1BbmRyw6kgTHVyZWF1?= <marcandre.lureau@gmail.com>
Date: Mon, 10 Dec 2018 22:32:59 +0400
Message-ID: <CAJ+F1C+CTew2Uqz3EEJHS93MZhKrqchcwBFC+8VyExk1+3Vgew@mail.gmail.com>
To: Markus Armbruster <armbru@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::444
Subject: Re: [Qemu-devel] [PATCH v6 18/27] qapi: add an error in case a
 discriminator is conditionnal
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: QEMU <qemu-devel@nongnu.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi

On Thu, Dec 6, 2018 at 8:25 PM Markus Armbruster <armbru@redhat.com> wrote:
>
> Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:
>
> > Making a discriminator conditonal doesn't make much sense.
>
> Good point (so easy to overlook!), but why first add the 'if' feature
> broken that way in PATCH 16, then fix it up in PATCH 18?

Not sure, I guess I found out after. Feel free to squash

>
> >                                                            Instead,
> > the union could be made conditional.
>
> What do you mean by that?

That the alternative is probably to make the whole union conditional

>
> > Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> > ---
> >  scripts/qapi/common.py                          | 11 +++++++++--
> >  tests/Makefile.include                          |  1 +
> >  .../flat-union-invalid-if-discriminator.err     |  1 +
> >  .../flat-union-invalid-if-discriminator.exit    |  1 +
> >  .../flat-union-invalid-if-discriminator.json    | 17 +++++++++++++++++
> >  .../flat-union-invalid-if-discriminator.out     |  0
> >  6 files changed, 29 insertions(+), 2 deletions(-)
> >  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminat=
or.err
> >  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminat=
or.exit
> >  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminat=
or.json
> >  create mode 100644 tests/qapi-schema/flat-union-invalid-if-discriminat=
or.out
> >
> > diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> > index 9b95f8cfe9..13fbb28493 100644
> > --- a/scripts/qapi/common.py
> > +++ b/scripts/qapi/common.py
> > @@ -577,7 +577,8 @@ def find_alternate_member_qtype(qapi_type):
> >
> >  # Return the discriminator enum define if discriminator is specified a=
s an
> >  # enum type, otherwise return None.
> > -def discriminator_find_enum_define(expr):
> > +def discriminator_find_enum_define(expr, info):
> > +    name =3D expr['union']
> >      base =3D expr.get('base')
> >      discriminator =3D expr.get('discriminator')
> >
> > @@ -592,6 +593,11 @@ def discriminator_find_enum_define(expr):
> >      if not discriminator_member:
> >          return None
> >
> > +    if discriminator_member.get('if'):
> > +        raise QAPISemError(info, 'The discriminator %s.%s for union %s=
 '
> > +                           'must not be conditional' %
> > +                           (base, discriminator, name))
> > +
> >      return enum_types.get(discriminator_member['type'])
> >
> >
>
> I'm afraid this isn't the proper place to check.  It's an accessor
> function for @struct_types and @enum_types.  The check should go into
> check_union(), like this:

indeed, thanks for the hint

>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index 0cf39df404..c1bc9e9c29 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -799,6 +794,11 @@ def check_union(expr, info):
>                                 "Discriminator '%s' is not a member of ba=
se "
>                                 "struct '%s'"
>                                 % (discriminator, base))
> +        if discriminator_member.get('if'):
> +            raise QAPISemError(info, 'The discriminator %s.%s for union =
%s '
> +                               'must not be conditional' %
> +                               (base, discriminator, name))
> +
>          enum_define =3D enum_types.get(discriminator_member['type'])
>          allow_metas =3D ['struct']
>          # Do not allow string discriminator
>
> > @@ -1020,7 +1026,8 @@ def check_exprs(exprs):
> >
> >          if 'include' in expr:
> >              continue
> > -        if 'union' in expr and not discriminator_find_enum_define(expr=
):
> > +        info =3D expr_elem['info']
> > +        if 'union' in expr and not discriminator_find_enum_define(expr=
, info):
> >              name =3D '%sKind' % expr['union']
> >          elif 'alternate' in expr:
> >              name =3D '%sKind' % expr['alternate']
> > diff --git a/tests/Makefile.include b/tests/Makefile.include
> > index 43e100a6cd..abc3fdf764 100644
> > --- a/tests/Makefile.include
> > +++ b/tests/Makefile.include
> > @@ -510,6 +510,7 @@ qapi-schema +=3D flat-union-inline.json
> >  qapi-schema +=3D flat-union-int-branch.json
> >  qapi-schema +=3D flat-union-invalid-branch-key.json
> >  qapi-schema +=3D flat-union-invalid-discriminator.json
> > +qapi-schema +=3D flat-union-invalid-if-discriminator.json
> >  qapi-schema +=3D flat-union-no-base.json
> >  qapi-schema +=3D flat-union-optional-discriminator.json
> >  qapi-schema +=3D flat-union-string-discriminator.json
> > diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.err =
b/tests/qapi-schema/flat-union-invalid-if-discriminator.err
> > new file mode 100644
> > index 0000000000..0c94c9860d
> > --- /dev/null
> > +++ b/tests/qapi-schema/flat-union-invalid-if-discriminator.err
> > @@ -0,0 +1 @@
> > +tests/qapi-schema/flat-union-invalid-if-discriminator.json:13: The dis=
criminator TestBase.enum1 for union TestUnion must not be conditional
> > diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.exit=
 b/tests/qapi-schema/flat-union-invalid-if-discriminator.exit
> > new file mode 100644
> > index 0000000000..d00491fd7e
> > --- /dev/null
> > +++ b/tests/qapi-schema/flat-union-invalid-if-discriminator.exit
> > @@ -0,0 +1 @@
> > +1
> > diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.json=
 b/tests/qapi-schema/flat-union-invalid-if-discriminator.json
> > new file mode 100644
> > index 0000000000..618ec36396
> > --- /dev/null
> > +++ b/tests/qapi-schema/flat-union-invalid-if-discriminator.json
> > @@ -0,0 +1,17 @@
> > +{ 'enum': 'TestEnum',
> > +  'data': [ 'value1', 'value2' ] }
> > +
> > +{ 'struct': 'TestBase',
> > +  'data': { 'enum1': { 'type': 'TestEnum', 'if': 'FOO' } } }
> > +
> > +{ 'struct': 'TestTypeA',
> > +  'data': { 'string': 'str' } }
> > +
> > +{ 'struct': 'TestTypeB',
> > +  'data': { 'integer': 'int' } }
> > +
> > +{ 'union': 'TestUnion',
> > +  'base': 'TestBase',
> > +  'discriminator': 'enum1',
> > +  'data': { 'value1': 'TestTypeA',
> > +            'value2': 'TestTypeB' } }
> > diff --git a/tests/qapi-schema/flat-union-invalid-if-discriminator.out =
b/tests/qapi-schema/flat-union-invalid-if-discriminator.out
> > new file mode 100644
> > index 0000000000..e69de29bb2
>


--
Marc-Andr=C3=A9 Lureau

