Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:19:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5ABB9580380
	for <like.xu@linux.intel.com>; Wed, 12 Dec 2018 21:06:37 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 21:06:37 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AdA5sJBxoaGWXJj3XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoWLfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QaMOpEs4XwvUcCoAGiCQWwAu7k1z9GhmXx3a0/y+ktHw7I3AkhH9IKsX?=
 =?us-ascii?q?TUq8j+OqYIXeuo0qTIyinDYOlY1Tzg74XHbhchoe2WUr9rasXR01MgGBndjlmK?=
 =?us-ascii?q?rozlJTyV2/0LvmOG7ORgTfqih3A7pwxyuDSj29ogh4rTio4LxF3J9T91zJs3KN?=
 =?us-ascii?q?GgVUJ3f92pHIFQuiyeLYd6XN8uT3t2tCony7ALv4OwcjIQx5Q93RHfbuSKc4iW?=
 =?us-ascii?q?7RLnU+acOTN4hHN+eLKjnBa+60egyuvhVsWu11ZKtCVFnsHNtnALyRPT9tCKRu?=
 =?us-ascii?q?Vh8kqiwzqDyh3f5+JeLUwqm6fWK4QtzqMym5YLtETMBC72mEH4jK+McUUk//Cl?=
 =?us-ascii?q?6/35bbXju5+QLpJ7hR/gMqswnsyzGP83Mg8TX2id5euzyqbj8Ur9QLVLjf05jL?=
 =?us-ascii?q?PVsZ/HJckDoq65AglV0pss6hqlDjem1sgYkmcDLF5fZB2HiI3pNkrIIPD/C/e/?=
 =?us-ascii?q?jFKskCpxy/DBJL3hDY3BLmLfn7f5YbZ990lcxRI3zdBe5JJbFKsNIf3uWkLqsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqI6voqI+aWZY8VvDj9K+Ii5/7r?=
 =?us-ascii?q?lXI2hVgdfbWz0pYMc3+4BO5pLF+BYXb2hdcBC2gKswwjR+H0jF2CTCVTZ2qsUK?=
 =?us-ascii?q?Im+z87CYOnApnbS4yx0/S82jymFMhWenxeEQLLVnPpbJmfHfELbi2UP4lmiDND?=
 =?us-ascii?q?ULGgT4oo01aprBP7zLx8afPZ/zBduZ/92dwm2uvIiBtn8DV1C9iagXiASnwxkm?=
 =?us-ascii?q?4WSjtzxq1mvEFm1n+F1q53heEeEsZcsOhUWAU3PoKJ0uphFtrpURjAdNradFHz?=
 =?us-ascii?q?W9ijHHQ9Q8w8x/cIZEByHcjkiQrMjASwBLpA3ZGOBZg19erzmTDaINp0gT6S36?=
 =?us-ascii?q?49hnEsWMJGLSuhnKEppFubPJLAj0jMz/XiTq8bxiOYsT7blWc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAAB96BFcmBHrdtBbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwgmKMFV+LM5lggXMUGBSHPiI0CQ0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOIwyCNgUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAUgIAwFTGQWDH?=
 =?us-ascii?q?IIBAQSmEoFsM4J2AQEFgkOEbgiHfYMjgRwRBoF/g26FEYYAiRuHKpBJBwICkUo?=
 =?us-ascii?q?LGIlnh18smROBRoIOfQiDJ4IbDBeDSoUUhV1UgQIFIROKL4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAAB96BFcmBHrdtBbCBwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wgmKMFV+LM5lggXMUGBSHPiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJcAwMBAiQZAQEECikBAgMBAgYBAUgIAwFTGQWDHIIBAQSmEoFsM4J?=
 =?us-ascii?q?2AQEFgkOEbgiHfYMjgRwRBoF/g26FEYYAiRuHKpBJBwICkUoLGIlnh18smROBR?=
 =?us-ascii?q?oIOfQiDJ4IbDBeDSoUUhV1UgQIFIROKL4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,347,1539673200"; 
   d="scan'208";a="55707853"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 12 Dec 2018 21:06:19 -0800
Received: from localhost ([::1]:50431 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXJCU-0007F6-LR
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 00:06:18 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54917)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJC5-0007ET-O2
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:05:54 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gXJC1-0000r5-DJ
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:05:52 -0500
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:43687)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cota@braap.org>) id 1gXJBv-0000gb-7Q
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 00:05:46 -0500
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
	by mailout.nyi.internal (Postfix) with ESMTP id CD96F22105;
	Thu, 13 Dec 2018 00:05:37 -0500 (EST)
Received: from mailfrontend2 ([10.202.2.163])
	by compute4.internal (MEProxy); Thu, 13 Dec 2018 00:05:37 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=braap.org; h=
	from:to:cc:subject:date:message-id:in-reply-to:references; s=
	mesmtp; bh=l8FB3OVXZEzjBlSBZojzkwxUuwAPPo0TG3aU0JqpdWc=; b=YqAF1
	O19hBGq5ZZtrsH9bYeBb2nDa8Ply5wSsaitG752SiYhBVQ7B/QG8Z2Lrg9BmAke6
	ynu2zV/yCodjk1yOQ0Wk0gMPbdr6fqVrGhGE+cRl3d4q5UlizRf9wHJuqnyvZuH3
	jbt8p/1POGuPJ7f3EEDA0eFRPt14e+6mLqvYW8=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-proxy:x-me-proxy:x-me-sender
	:x-me-sender:x-sasl-enc; s=fm1; bh=l8FB3OVXZEzjBlSBZojzkwxUuwAPP
	o0TG3aU0JqpdWc=; b=kiqWen5XrVF+ma+G47GfH0nU6TvJlUnWQiS3v1QzBD3xa
	bywVXz9Ts8SV8ww9ZjJpFcVm29CnsoDO4i0IDBzYJX8r/TIP9L7GCgKKe0YnICcq
	V8lTxNcLU2lN8BuH1rIgEBlvd7br9xyOQxMhYjWkUxgVExAAw8+yh8FUQoZs11yZ
	tR0bpOCQHxywCjfh9BLNUNRatbPkHCRLtqpO3kAa2HKkZIwlrZpIAWr8qxFuAK3m
	XOYqrSMB3we1U6PTweUzFkBkKCqzMCqgWacpigmKs4jxzeucpNskif4M6a0ZYBGN
	xrTRh+rUSjDlPQGjEM8BpNggme25yl997ssJXdoow==
X-ME-Sender: <xms:oegRXOLHtPOixZRrfBAXjt8YieJkILzjkaZjsgR7BROlltfXHp90Mg>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedtkedrudehuddgkedtucetufdoteggodetrfdotf
	fvucfrrhhofhhilhgvmecuhfgrshhtofgrihhlpdfquhhtnecuuegrihhlohhuthemucef
	tddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpefhvffufffkof
	gjfhestddtredtredttdenucfhrhhomhepfdfgmhhilhhiohcuifdrucevohhtrgdfuceo
	tghothgrsegsrhgrrghprdhorhhgqeenucfkphepuddvkedrheelrddvtddrvdduieenuc
	frrghrrghmpehmrghilhhfrhhomheptghothgrsegsrhgrrghprdhorhhgnecuvehluhhs
	thgvrhfuihiivgeptd
X-ME-Proxy: <xmx:oegRXPlcJx3cmZIpD-o8SotWb0ZKh07MK594M3OKUsoVcleNPLGoGg>
	<xmx:oegRXOSZbLn0xfcM8dcPrk8fzEIVFNRJRoC5BU2eqtQAMpQvXCollQ>
	<xmx:oegRXJJxm6MwzbPS3uOTZR3dE171uEl4Jqq3MwoWTyt-V-RZPP4kTA>
	<xmx:oegRXJJDkBzXNhamO7xQsfyy3tsFnzqA2kB3TwVxG81qDS1dzXbu1Q>
Received: from localhost (flamenco.cs.columbia.edu [128.59.20.216])
	by mail.messagingengine.com (Postfix) with ESMTPA id 732A81045C;
	Thu, 13 Dec 2018 00:05:37 -0500 (EST)
From: "Emilio G. Cota" <cota@braap.org>
To: qemu-devel@nongnu.org
Date: Thu, 13 Dec 2018 00:03:43 -0500
Message-Id: <20181213050453.9677-4-cota@braap.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181213050453.9677-1-cota@braap.org>
References: <20181213050453.9677-1-cota@braap.org>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 66.111.4.25
Subject: [Qemu-devel] [PATCH v5 03/73] cpu: introduce cpu_mutex_lock/unlock
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>,
	Paolo Bonzini <pbonzini@redhat.com>,
	Richard Henderson <richard.henderson@linaro.org>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The few direct users of &cpu->lock will be converted soon.

Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
Signed-off-by: Emilio G. Cota <cota@braap.org>
---
 include/qom/cpu.h   | 33 +++++++++++++++++++++++++++++++
 cpus.c              | 48 +++++++++++++++++++++++++++++++++++++++++++--
 stubs/cpu-lock.c    | 28 ++++++++++++++++++++++++++
 stubs/Makefile.objs |  1 +
 4 files changed, 108 insertions(+), 2 deletions(-)
 create mode 100644 stubs/cpu-lock.c

diff --git a/include/qom/cpu.h b/include/qom/cpu.h
index 86ce773388..bb5a36a324 100644
--- a/include/qom/cpu.h
+++ b/include/qom/cpu.h
@@ -446,6 +446,39 @@ extern struct CPUTailQ cpus;
 
 extern __thread CPUState *current_cpu;
 
+/**
+ * cpu_mutex_lock - lock a CPU's mutex
+ * @cpu: the CPU whose mutex is to be locked
+ *
+ * To avoid deadlock, a CPU's mutex must be acquired after the BQL.
+ */
+#define cpu_mutex_lock(cpu)                             \
+    cpu_mutex_lock_impl(cpu, __FILE__, __LINE__)
+void cpu_mutex_lock_impl(CPUState *cpu, const char *file, int line);
+
+/**
+ * cpu_mutex_unlock - unlock a CPU's mutex
+ * @cpu: the CPU whose mutex is to be unlocked
+ */
+#define cpu_mutex_unlock(cpu)                           \
+    cpu_mutex_unlock_impl(cpu, __FILE__, __LINE__)
+void cpu_mutex_unlock_impl(CPUState *cpu, const char *file, int line);
+
+/**
+ * cpu_mutex_locked - check whether a CPU's mutex is locked
+ * @cpu: the CPU of interest
+ *
+ * Returns true if the calling thread is currently holding the CPU's mutex.
+ */
+bool cpu_mutex_locked(const CPUState *cpu);
+
+/**
+ * no_cpu_mutex_locked - check whether any CPU mutex is held
+ *
+ * Returns true if the calling thread is not holding any CPU mutex.
+ */
+bool no_cpu_mutex_locked(void);
+
 static inline void cpu_tb_jmp_cache_clear(CPUState *cpu)
 {
     unsigned int i;
diff --git a/cpus.c b/cpus.c
index 895013b56a..980d62cd58 100644
--- a/cpus.c
+++ b/cpus.c
@@ -83,6 +83,47 @@ static unsigned int throttle_percentage;
 #define CPU_THROTTLE_PCT_MAX 99
 #define CPU_THROTTLE_TIMESLICE_NS 10000000
 
+/* XXX: is this really the max number of CPUs? */
+#define CPU_LOCK_BITMAP_SIZE 2048
+
+/*
+ * Note: we index the bitmap with cpu->cpu_index + 1 so that the logic
+ * also works during early CPU initialization, when cpu->cpu_index is set to
+ * UNASSIGNED_CPU_INDEX == -1.
+ */
+static __thread DECLARE_BITMAP(cpu_lock_bitmap, CPU_LOCK_BITMAP_SIZE);
+
+bool no_cpu_mutex_locked(void)
+{
+    return bitmap_empty(cpu_lock_bitmap, CPU_LOCK_BITMAP_SIZE);
+}
+
+void cpu_mutex_lock_impl(CPUState *cpu, const char *file, int line)
+{
+/* coverity gets confused by the indirect function call */
+#ifdef __COVERITY__
+    qemu_mutex_lock_impl(&cpu->lock, file, line);
+#else
+    QemuMutexLockFunc f = atomic_read(&qemu_mutex_lock_func);
+
+    g_assert(!cpu_mutex_locked(cpu));
+    set_bit(cpu->cpu_index + 1, cpu_lock_bitmap);
+    f(&cpu->lock, file, line);
+#endif
+}
+
+void cpu_mutex_unlock_impl(CPUState *cpu, const char *file, int line)
+{
+    g_assert(cpu_mutex_locked(cpu));
+    qemu_mutex_unlock_impl(&cpu->lock, file, line);
+    clear_bit(cpu->cpu_index + 1, cpu_lock_bitmap);
+}
+
+bool cpu_mutex_locked(const CPUState *cpu)
+{
+    return test_bit(cpu->cpu_index + 1, cpu_lock_bitmap);
+}
+
 bool cpu_is_stopped(CPUState *cpu)
 {
     return cpu->stopped || !runstate_is_running();
@@ -92,9 +133,9 @@ static inline bool cpu_work_list_empty(CPUState *cpu)
 {
     bool ret;
 
-    qemu_mutex_lock(&cpu->lock);
+    cpu_mutex_lock(cpu);
     ret = QSIMPLEQ_EMPTY(&cpu->work_list);
-    qemu_mutex_unlock(&cpu->lock);
+    cpu_mutex_unlock(cpu);
     return ret;
 }
 
@@ -1855,6 +1896,9 @@ void qemu_mutex_lock_iothread_impl(const char *file, int line)
 {
     QemuMutexLockFunc bql_lock = atomic_read(&qemu_bql_mutex_lock_func);
 
+    /* prevent deadlock with CPU mutex */
+    g_assert(no_cpu_mutex_locked());
+
     g_assert(!qemu_mutex_iothread_locked());
     bql_lock(&qemu_global_mutex, file, line);
     iothread_locked = true;
diff --git a/stubs/cpu-lock.c b/stubs/cpu-lock.c
new file mode 100644
index 0000000000..3f07d3a28b
--- /dev/null
+++ b/stubs/cpu-lock.c
@@ -0,0 +1,28 @@
+#include "qemu/osdep.h"
+#include "qom/cpu.h"
+
+void cpu_mutex_lock_impl(CPUState *cpu, const char *file, int line)
+{
+/* coverity gets confused by the indirect function call */
+#ifdef __COVERITY__
+    qemu_mutex_lock_impl(&cpu->lock, file, line);
+#else
+    QemuMutexLockFunc f = atomic_read(&qemu_mutex_lock_func);
+    f(&cpu->lock, file, line);
+#endif
+}
+
+void cpu_mutex_unlock_impl(CPUState *cpu, const char *file, int line)
+{
+    qemu_mutex_unlock_impl(&cpu->lock, file, line);
+}
+
+bool cpu_mutex_locked(const CPUState *cpu)
+{
+    return true;
+}
+
+bool no_cpu_mutex_locked(void)
+{
+    return true;
+}
diff --git a/stubs/Makefile.objs b/stubs/Makefile.objs
index 5dd0aeeec6..49f83cf7ff 100644
--- a/stubs/Makefile.objs
+++ b/stubs/Makefile.objs
@@ -8,6 +8,7 @@ stub-obj-y += blockdev-close-all-bdrv-states.o
 stub-obj-y += clock-warp.o
 stub-obj-y += cpu-get-clock.o
 stub-obj-y += cpu-get-icount.o
+stub-obj-y += cpu-lock.o
 stub-obj-y += dump.o
 stub-obj-y += error-printf.o
 stub-obj-y += fdset.o
-- 
2.17.1


