Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:27:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B86785807A0;
	Fri, 14 Dec 2018 03:58:52 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 03:58:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A/ohdERZE7cYptdxCpi7Z3W7/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm5ZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKofT+C1zLPJzTXYc/NW2C3y6I7VeR08u/GDR69wcczPxkk1CgjIiUmf?=
 =?us-ascii?q?qYz/PzOUzeQNr2mb4PBmVe+0kGEnsRt+oiWpxsgykInFnIMVylfd+Ch/3Y07Js?=
 =?us-ascii?q?W4RVZlbdK4FJZcrTyWOoVoTs84Xm1luzo2xqcHtJO5ZCQG1o4oywLBZ/GCcIWE?=
 =?us-ascii?q?/hDuWPqULDp7h39qZKyzihO9/ES81uHwSsy53VdOoyVbkNTBs38A2hzP5cWDT/?=
 =?us-ascii?q?Zx40es1SiL2g3W9+1JIEE5mrfdJpU82LA/jIATvl7GHiLumEX5kquWdkI89+i2?=
 =?us-ascii?q?5OTofK/mqoWfN4BqkAH+NLohmsilDeQ/KAgOUHCX+eW61LL94U30WKtGguEyn6?=
 =?us-ascii?q?XDrZzXK9oXqrSkDwJWzoov8ReyAjW+3NQdh3YHLVZFeBydj4juPlHDOPT4Dfa5?=
 =?us-ascii?q?g1SxnzZn3vPGMaP7ApXLMHfDlK7tfbFz6k5a1gUz18tS54xbCr4fOvL/QEzxu8?=
 =?us-ascii?q?LCDh8/LQO0x/zrCNJn1oMRQW6PGLOWMLvOsV+U4eIiO+2MZI4WuDnjMfQk6OPu?=
 =?us-ascii?q?gGQ9mV8ce6mpwJQWZGq5HvRgP0WWf37sjs0dHmcNuwo0VPbqh0GaUT5Pe3ayWL?=
 =?us-ascii?q?ox5jEhB4KnEYfMXIetjKaB3CemBJJWYG9GB0uIEXfpcYWERvgNZDiTIs9njjwL?=
 =?us-ascii?q?S7yhR5U92hGpsQ/w06BnIfbM+i0EqZLj08B45+/UlR4s7zB0DMOd02eLT2FzhW?=
 =?us-ascii?q?4IQz423KZioU1y0FuD0K54g+BGGtxX/f9GTgA6NZvExexgF9/yQh7BfsuOSFu+?=
 =?us-ascii?q?WNqmGjExTtUyw9MUeUZyAdeigwvH3yqrBb8VirOKCIY18qLaw3j+OcJ9x2za26?=
 =?us-ascii?q?kmilksWtFPOnG+hq5j6wjTAJbEk0aDmKasb6gc2C/N+32FzWqBp0xYVA9wUaPY?=
 =?us-ascii?q?XXEQfEfWrNL55l/cQL+qE7goLgxBycuaIKtQdtLplUlGROvkONnGfm2+gXmwCg?=
 =?us-ascii?q?iSyrOMdoXqfX4d0zvbCEQDlwAT/nOGNQwlCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT88pDpuAlaywcjaC9qaqApnZ6VTf9?=
 =?us-ascii?q?U97UxD1WLYsQx9I5OhI7pjhl4YbwR4oUfu2w9rBYVHlMggtGkqwxZqKaKEzFNB?=
 =?us-ascii?q?cCuV3YzxOr3SLWny4BCvaq7M1lHCytqW/b0P6PA5q1XlswGkDU4i83Rh09lI3H?=
 =?us-ascii?q?qQ/JTKDAwOUZ3vVkY77QR1p7bfYiMl/YPbyWVsMbWosj/Fw98mHu8lxQivfthB?=
 =?us-ascii?q?MKKIDhT9E9AHCMe0LuwqmF+pbgwfMeBW9a40Od6mdvSc1K6qOuZggCypjWBd7I?=
 =?us-ascii?q?9h1UKM8jJ2SvTU0JYd3/GYwgyHWi/8jVe8qMz4hZpIZDASHmWlzyjkC5VcZqlz?=
 =?us-ascii?q?fYYNFGevLNe7xtR4h57xRXFY8ESvCE8B2M+sYRCSdUDy3RVM1UQLpnyqgTG4zz?=
 =?us-ascii?q?1onD4ztKqQwSvOz/7kdBUZIG5LRXBugkv2Loiwkt8VQlKobw8vlBa+4Ub6xq5b?=
 =?us-ascii?q?pLlwLmXJQEdIeTT2IH9mUqeqqrWCZMtP4osysSpLSOS8fUyaSrnlrhoa0iPvBW?=
 =?us-ascii?q?tfyCogdzG3vJX0hBh6iGObLHZuo3vVY8BwxRHD5NPCQf5dxCYJRC59iTPPHFiz?=
 =?us-ascii?q?I8Gp/cmIl5fEqu2+VXiuVodQcSnoyoOMrjC76ndpAR28nvCznMPoEQ4h3C//1t?=
 =?us-ascii?q?lqUzjIrRnmbonq0aS6Lfxofk1yCFDg7Mp6H5l0kpEsi5EIxXgampKV8GIHkGjp?=
 =?us-ascii?q?NtVXw6D+bHsLRTMQx97V4Q7l2FBsL36TxoL5UGmdzdVlZ9WgfmwW3Sc95dhQCK?=
 =?us-ascii?q?iI9LxEgTd1ol2goALSe/d9ny0Ryfsz6HEAheEJtxEgziGcArAUAElZMjbglxWO?=
 =?us-ascii?q?79CisqpXYHyjfqS31Ep7hdqhFq2NohlAWHblfZcvBSpw7sR8MF3WynHy5J/reM?=
 =?us-ascii?q?LMbd0NrB2biAnPj/JaKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8aK2ICvG49tGzQRU5vuUPKoCykStfX8OgaKET08rG?=
 =?us-ascii?q?qbGLXFEQ+e7kdms2zAE5SxO36LI3kZyM1oRAOBK0xHnAAUQDI6k4YiGQ+ww8zh?=
 =?us-ascii?q?dFp56ioV5l7lsRZMzuNoNx/iUmbQvguoazE0SISBIxpS9A1N+0DVMcmG5OJpAy?=
 =?us-ascii?q?5Y5oGhrBCKKmGDZQRHF2QJVVKfB1z5Irmi/9rA8/WbBuqjKfvBe66OpPdaV/eJ?=
 =?us-ascii?q?w5Kvz4Rn8yyNNsWJInltEfk71lBfUnB+HsTTgy8PRDAPlyLRc86bow+x+y1wrs?=
 =?us-ascii?q?Ci6fTrRRjg5Y2VB7tJNtVv/R+2jLyHN+6RgiZ5NDlZ2okNxX/O1LgQwloShzty?=
 =?us-ascii?q?eDmqFLQKrTTNQ77Imq9LEx4bbDt+NMtW4KI93QlNOs/bhsn21r5iif41BElKVU?=
 =?us-ascii?q?b8msGyfsEKJ2C9NFXaBEeELriGJDvLw93pbqO4U7FfkOJUtxioszaBD0DjJiiD?=
 =?us-ascii?q?lyXuVx23K+5MkTqUPAZAt4C9aBptDWnjQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CNSmu9/FHBZ7np5MemEnD6U7/XZKpYTq/dkHj54mP5a4HskzbtY?=
 =?us-ascii?q?9yVERP1zmCvPod9iuVCmku+TyjV5VBpCsCpEhIWOvU96I6XW6oFAWWrY/BIK9W?=
 =?us-ascii?q?iRCw4Fp91gCt3uvaBf0tnOlKLpJzdE/NLZ5s8cB8nSKMKaP3stKxvpGDjIDAQb?=
 =?us-ascii?q?ST6nL33Qh0tYkKLaynrAgpE84rPlgoIDTKNWThRhGvocTE9sBsQPJot6RBsji7?=
 =?us-ascii?q?eQiMNO7n27+kr/XsJf67vHTPOJHfTmLn6zl7BZYRYSiefzLZ4SLZH60kpKYENz?=
 =?us-ascii?q?gYLHAQzRWoYe8WVacgYorRAVozBFRWop1hegM1v17Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAC1mRNch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gQIng3yIGYtDNYINFGiWWRSBWxYBARgDEAG?=
 =?us-ascii?q?HRyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiAEGQEBNwEFC?=
 =?us-ascii?q?QEBChgCAgUhAgIDDCUBBQECGgYYgxwBggABBJoFPIofcHwzgkwqAQEFhyoIEnm?=
 =?us-ascii?q?KF4EcF4F/gRGCXTWEWg+DHIJXiUCGDoY7ixEJgiiEZYpCI2CBSodFh16ZMQYCC?=
 =?us-ascii?q?QcPIYElgg4zGiyDMwmCEgkDF4YugW2GAz8ygQQBAQGKCYJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAAC1mRNch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gQIng3yIGYtDNYINFGiWWRSBWxYBARgDEAGHRyI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiAEGQEBNwEFCQEBChgCAgUhAgI?=
 =?us-ascii?q?DDCUBBQECGgYYgxwBggABBJoFPIofcHwzgkwqAQEFhyoIEnmKF4EcF4F/gRGCX?=
 =?us-ascii?q?TWEWg+DHIJXiUCGDoY7ixEJgiiEZYpCI2CBSodFh16ZMQYCCQcPIYElgg4zGiy?=
 =?us-ascii?q?DMwmCEgkDF4YugW2GAz8ygQQBAQGKCYJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="56352446"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 03:58:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729549AbeLNLzr (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 06:55:47 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:50389 "EHLO
        mail-wm1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728415AbeLNLzr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 06:55:47 -0500
Received: by mail-wm1-f65.google.com with SMTP id n190so5450643wmd.0
        for <linux-kernel@vger.kernel.org>; Fri, 14 Dec 2018 03:55:44 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=brauner.io; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=f13fPVVIdLMuxIn55XiaSWfzKq0HPuwwzvNohJhHsww=;
        b=Glz5K1eBJf9jA8aSOLpRTNEuvc8uIv8YhxsfWYiHVAWKNVb4kAx+Viygsf+iFDM7VB
         vTWh9sXrGIrfRLnEY4TxATY1H4QU31M8+XL79FsRkHgxs5e3relfQ2ib8i5bZgyInz80
         RoPG5qD5Ih6PDHCUCYJlTpanhsc6S0gfyXWMD8yY3PFCJqaykPYa+wFosFV7NZgZCpHx
         pQ0HRTHF/Z6yeNldR+wABZXdxUeLMMN/Rr/KmuL+nUGnYlL3FmhB4yERcaad91E0o0vn
         eDeZ4K4kWWKL1YkMXAuwy0oLhCjf9VoFdCrTPEnZQfasXh4L4zh+lucOtX8cG3oSveQs
         nReA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=f13fPVVIdLMuxIn55XiaSWfzKq0HPuwwzvNohJhHsww=;
        b=MHXYWBRf6T8hlCpAY3POJ8AtN9RUOBt3gxEApig0NIkUJT/XSxVitc2YKVYS7k2k8W
         x+Dqs0rEeP8BEi7zS4qFdSqsFcD7+IAhA6gXXxGQlXrBZBEI7zDrdL/wemOICpHRAbBz
         ueY1x5i4MR7rrN81OwnEXkzfl6f+38L9N7Oez6yzixFRAgdkbS0qJI2CYtPaiymmaSh4
         F7rGLLN/YnyhyM2+hrA6P4EakYeUthXswXC2utYD2e9Gh4AtiPWlVnlWI2fu8CBYobDD
         YcLChswQIVQFpdrEDJkVumx7aAU/8dW898Z34uSzG+10JdXQCHxBmOOEyt1VPoBvgUI2
         VDGg==
X-Gm-Message-State: AA+aEWYLrCP1kt9jMrnhwZ5cp6QXH0N2iaGIFpuPcM2fIJW2S6+WbPq5
        likuScCOlbV5wPK2cVmfHrlgSp5LuDxBEA==
X-Google-Smtp-Source: AFSGD/V16zLTnhTyAUjjG4sO6CU94iV8wziuym9m62isVkQ/p0oKKBR15gABbDLo7LFN873IFfOOWw==
X-Received: by 2002:a1c:414:: with SMTP id 20mr2997593wme.67.1544788543315;
        Fri, 14 Dec 2018 03:55:43 -0800 (PST)
Received: from brauner.io ([2a02:8070:88c2:4000:69e7:45c9:1529:166d])
        by smtp.gmail.com with ESMTPSA id c9sm6140103wmh.27.2018.12.14.03.55.41
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 14 Dec 2018 03:55:42 -0800 (PST)
Date: Fri, 14 Dec 2018 12:55:41 +0100
From: Christian Brauner <christian@brauner.io>
To: Dan Carpenter <dan.carpenter@oracle.com>
Cc: gregkh@linuxfoundation.org, devel@driverdev.osuosl.org,
        linux-kernel@vger.kernel.org, kilobyte@angband.pl,
        darrick.wong@oracle.com, chouryzhou@tencent.com,
        david@fromorbit.com, arve@android.com, joel@joelfernandes.org,
        Martijn Coenen <maco@android.com>, tkjos@google.com
Subject: Re: [PATCH v2] binder: implement binderfs
Message-ID: <20181214115539.evd7xay5ufpkzflb@brauner.io>
References: <20181213215911.24891-1-christian@brauner.io>
 <20181214071123.GX3116@kadam>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181214071123.GX3116@kadam>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 14, 2018 at 10:11:23AM +0300, Dan Carpenter wrote:
> On Thu, Dec 13, 2018 at 10:59:11PM +0100, Christian Brauner wrote:
> > +/**
> > + * binderfs_new_inode - allocate inode from super block of a binderfs mount
> > + * @ref_inode: inode from wich the super block will be taken
> > + * @userp:     buffer to copy information about new device for userspace to
> > + * @device:    binder device for which the new inode will be allocated
> > + * @req:       struct binderfs_device as copied from userspace
> > + *
> > + * This function will allocate a new inode from the super block of the
> > + * filesystem mount and attach a dentry to that inode.
> > + * Minor numbers are limited and tracked globally in binderfs_minors.
> > + * The function will stash a struct binder_device for the specific binder
> > + * device in i_private of the inode.
> > + *
> > + * Return: 0 on success, negative errno on failure
> > + */
> > +static int binderfs_new_inode(struct inode *ref_inode,
> > +			      struct binder_device *device,
> > +			      struct binderfs_device __user *userp,
> > +			      struct binderfs_device *req)
> > +{
> > +	int minor, ret;
> > +	struct dentry *dentry, *dup, *root;
> > +	size_t name_len = BINDERFS_MAX_NAME + 1;
> > +	char *name = NULL;
> > +	struct inode *inode = NULL;
> > +	struct super_block *sb = ref_inode->i_sb;
> > +	struct binderfs_info *info = sb->s_fs_info;
> > +
> > +	/* Reserve new minor number for the new device. */
> > +	mutex_lock(&binderfs_minors_mutex);
> > +	minor = ida_alloc_max(&binderfs_minors, BINDERFS_MAX_MINOR, GFP_KERNEL);
> > +	mutex_unlock(&binderfs_minors_mutex);
> > +	if (minor < 0)
> > +		return minor;
> > +
> > +	ret = -ENOMEM;
> > +	inode = new_inode(sb);
> > +	if (!inode)
> > +		goto err;
> > +
> > +	inode->i_ino = minor + INODE_OFFSET;
> > +	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
> > +	init_special_inode(inode, S_IFCHR | 0600,
> > +			   MKDEV(MAJOR(binderfs_dev), minor));
> > +	inode->i_fop = &binder_fops;
> > +	inode->i_uid = info->root_uid;
> > +	inode->i_gid = info->root_gid;
> > +	inode->i_private = device;
> > +
> > +	name = kmalloc(name_len, GFP_KERNEL);
> > +	if (!name)
> > +		goto err;
> > +
> > +	ret = snprintf(name, name_len, "%s", req->name);
> > +	if (ret < 0 || (size_t)ret >= name_len) {
> 
> kernel snprintf() doesn't return negatives and the cast isn't required
> either.

Good point. But I'd rather replace it with:
strscpy(name, req->name, name_len);
which is syntactically and semantically cleaner.

> 
> > +		ret = -EINVAL;
> > +		goto err;
> > +	}
> > +
> > +	device->binderfs_inode = inode;
> > +	device->context.binder_context_mgr_uid = INVALID_UID;
> > +	device->context.name = name;
> > +	device->miscdev.name = name;
> > +	device->miscdev.minor = minor;
> > +	mutex_init(&device->context.context_mgr_node_lock);
> > +
> > +	req->major = MAJOR(binderfs_dev);
> > +	req->minor = minor;
> > +
> > +	ret = copy_to_user(userp, req, sizeof(*req));
> > +	if (ret)
> > +		goto err;
> 
> copy_to_user() returns the number of bytes remaining.
> 
> 	ret = -EFAULT;
> 	if (copy_to_user(userp, req, sizeof(*req)))
> 		goto err;
> 
> Also if this copy_to_user() fails, then does the kfree(name) and the
> iput(inode) lead to a double free of name in binderfs_evict_inode()?

I'm going to defer setting inode->i_private in all codepaths right
before d_add() after which no error handling occurs any more.

> 
> > +
> > +	root = sb->s_root;
> > +	inode_lock(d_inode(root));
> > +	dentry = d_alloc_name(root, name);
> > +	if (!dentry) {
> > +		inode_unlock(d_inode(root));
> > +		ret = -ENOMEM;
> > +		goto err;
> > +	}
> > +
> > +	/* Verify that the name userspace gave us is not already in use. */
> > +	dup = d_lookup(root, &dentry->d_name);
> > +	if (dup) {
> > +		if (d_really_is_positive(dup)) {
> > +			dput(dup);
> > +			dput(dentry);
> > +			inode_unlock(d_inode(root));
> > +			/*
> > +			 * Prevent double free since iput() calls
> > +			 * binderfs_evict_inode().
> > +			 */
> > +			inode->i_private = NULL;
> > +			ret = -EEXIST;
> > +			goto err;
> > +		}
> > +		dput(dup);
> > +	}
> > +
> > +	d_add(dentry, inode);
> > +	fsnotify_create(root->d_inode, dentry);
> > +	inode_unlock(d_inode(root));
> > +
> > +	return 0;
> > +
> > +err:
> > +	kfree(name);
> > +	mutex_lock(&binderfs_minors_mutex);
> > +	ida_free(&binderfs_minors, minor);
> > +	mutex_unlock(&binderfs_minors_mutex);
> > +	iput(inode);
> > +
> > +	return ret;
> > +}
> > +
> > +static int binderfs_binder_device_create(struct inode *inode,
> > +					 struct binderfs_device __user *userp,
> > +					 struct binderfs_device *req)
> > +{
> > +	struct binder_device *device;
> > +	int ret;
> > +
> > +	device = kzalloc(sizeof(*device), GFP_KERNEL);
> > +	if (!device)
> > +		return -ENOMEM;
> 
> Just move this allocation into binderfs_new_inode() and get rid of this
> function.

Agreed.

> 
> > +
> > +	ret = binderfs_new_inode(inode, device, userp, req);
> > +	if (ret < 0) {
> > +		kfree(device);
> > +		return ret;
> > +	}
> > +
> > +	return 0;
> > +}
> > +
> > +/**
> > + * binderfs_ctl_ioctl - handle binder device node allocation requests
> > + *
> > + * The request handler for the binder-control device. All requests operate on
> > + * the binderfs mount the binder-control device resides in:
> > + * - BINDER_CTL_ADD
> > + *   Allocate a new binder device.
> > + *
> > + * Return: 0 on success, negative errno on failure
> > + */
> > +static long binder_ctl_ioctl(struct file *file, unsigned int cmd,
> > +			     unsigned long arg)
> > +{
> > +	struct binderfs_info *info;
> > +	int ret = -EINVAL;
> > +	struct inode *inode = file_inode(file);
> > +	struct binderfs_device __user *device = (struct binderfs_device __user *)arg;
> > +	struct binderfs_device device_req;
> > +
> > +	info = BINDERFS_I(inode);
> 
> info is not used.

Removed.

> 
> > +	switch (cmd) {
> > +	case BINDER_CTL_ADD:
> > +		ret = copy_from_user(&device_req, device, sizeof(device_req));
> 
> if (copy_from_user(&device_req, device, sizeof(device_req))) {
> 	ret = -EFAULT;
> 	break;
> }

Done.

> 
> > +		if (ret)
> > +			break;
> > +
> > +		ret = binderfs_binder_device_create(inode, device, &device_req);
> > +		break;
> > +	default:
> > +		break;
> > +	}
> > +
> > +	return ret;
> > +}
> > +
> > +static void binderfs_evict_inode(struct inode *inode)
> > +{
> > +	struct binder_device *device = inode->i_private;
> > +
> > +	clear_inode(inode);
> > +
> > +	if (!device)
> > +		return;
> > +
> > +	mutex_lock(&binderfs_minors_mutex);
> > +	ida_free(&binderfs_minors, device->miscdev.minor);
> > +	mutex_unlock(&binderfs_minors_mutex);
> > +
> > +	kfree(device->context.name);
> > +	kfree(device);
> > +}
> > +
> > +static const struct super_operations binderfs_super_ops = {
> > +	.statfs = simple_statfs,
> > +	.evict_inode = binderfs_evict_inode,
> > +};
> > +
> > +static int binderfs_rename(struct inode *old_dir, struct dentry *old_dentry,
> > +			   struct inode *new_dir, struct dentry *new_dentry,
> > +			   unsigned int flags)
> > +{
> > +	struct inode *inode = d_inode(old_dentry);
> > +
> > +	/* binderfs doesn't support directories. */
> > +	if (d_is_dir(old_dentry))
> > +		return -EPERM;
> > +
> > +	if (flags & ~RENAME_NOREPLACE)
> > +		return -EINVAL;
> > +
> > +	if (!simple_empty(new_dentry))
> > +		return -ENOTEMPTY;
> > +
> > +	if (d_really_is_positive(new_dentry))
> > +		simple_unlink(new_dir, new_dentry);
> > +
> > +	old_dir->i_ctime = old_dir->i_mtime = new_dir->i_ctime =
> > +		new_dir->i_mtime = inode->i_ctime = current_time(old_dir);
> > +
> > +	return 0;
> > +}
> > +
> > +static int binderfs_unlink(struct inode *dir, struct dentry *dentry)
> > +{
> > +	/*
> > +	 * The control dentry is only ever touched during mount so checking it
> > +	 * here should not require us to take lock.
> > +	 */
> > +	if (BINDERFS_I(dir)->control_dentry == dentry)
> > +		return -EPERM;
> > +
> > +	return simple_unlink(dir, dentry);
> > +}
> > +
> > +static const struct file_operations binder_ctl_fops = {
> > +	.owner		= THIS_MODULE,
> > +	.open		= nonseekable_open,
> > +	.unlocked_ioctl	= binder_ctl_ioctl,
> > +	.compat_ioctl	= binder_ctl_ioctl,
> > +	.llseek		= noop_llseek,
> > +};
> > +
> > +/**
> > + * binderfs_binder_ctl_create - create a new binder-control device
> > + * @sb: super block of the binderfs mount
> > + *
> > + * This function creates a new binder-control device node in the binderfs mount
> > + * referred to by @sb.
> > + *
> > + * Return: 0 on success, negative errno on failure
> > + */
> > +static int binderfs_binder_ctl_create(struct super_block *sb)
> > +{
> > +	int minor;
> > +	struct dentry *dentry;
> > +	struct binder_device *device;
> > +	int ret = 0;
> > +	struct inode *inode = NULL;
> > +	struct dentry *root = sb->s_root;
> > +	struct binderfs_info *info = sb->s_fs_info;
> > +
> > +	device = kzalloc(sizeof(*device), GFP_KERNEL);
> > +	if (!device)
> > +		return -ENOMEM;
> > +
> > +	inode_lock(d_inode(root));
> > +
> > +	if (info->control_dentry)
> > +		goto out;
> 
> I have a private static checker warning for gotos like this where we
> don't set the error code before the goto out.  Apparently here this
> is a success path.  I'm not an fs dev, so I don't know why this is a
> success path.  :(  Maybe you could add a comment?

Added a comment. See also fs/devpts/inode.c for ptmx_dentry that has the
same logic (checked right now).

> 
> 
> > +
> > +	ret = -ENOMEM;
> > +	inode = new_inode(sb);
> > +	if (!inode)
> > +		goto out;
> > +
> > +	/* Reserve a new minor number for the new device. */
> > +	mutex_lock(&binderfs_minors_mutex);
> > +	minor = ida_alloc_max(&binderfs_minors, BINDERFS_MAX_MINOR, GFP_KERNEL);
> > +	mutex_unlock(&binderfs_minors_mutex);
> > +	if (minor < 0) {
> > +		ret = minor;
> > +		goto out;
> > +	}
> > +
> > +	inode->i_ino = SECOND_INODE;
> > +	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
> > +	init_special_inode(inode, S_IFCHR | 0600,
> > +			   MKDEV(MAJOR(binderfs_dev), minor));
> > +	inode->i_fop = &binder_ctl_fops;
> > +	inode->i_uid = info->root_uid;
> > +	inode->i_gid = info->root_gid;
> > +	inode->i_private = device;
> > +
> > +	device->binderfs_inode = inode;
> > +	device->miscdev.minor = minor;
> > +
> > +	dentry = d_alloc_name(root, "binder-control");
> > +	if (!dentry)
> > +		goto out;
> > +
> > +	info->control_dentry = dentry;
> > +	d_add(dentry, inode);
> > +	inode_unlock(d_inode(root));
> > +
> > +	return 0;
> > +
> > +out:
> > +	inode_unlock(d_inode(root));
> > +	kfree(device);
> > +	if (inode) {
> > +		inode->i_private = NULL;
> > +		iput(inode);
> > +	}
> > +
> > +	return ret;
> > +}
> > +
> > +static const struct inode_operations binderfs_dir_inode_operations = {
> > +	.lookup = simple_lookup,
> > +	.rename = binderfs_rename,
> > +	.unlink = binderfs_unlink,
> > +};
> > +
> > +static int binderfs_fill_super(struct super_block *sb, void *data, int silent)
> > +{
> > +	struct binderfs_info *info;
> > +	int ret = -ENOMEM;
> > +	struct inode *inode = NULL;
> > +	struct ipc_namespace *ipc_ns = sb->s_fs_info;
> > +
> > +	get_ipc_ns(ipc_ns);
> > +
> > +	sb->s_blocksize = PAGE_SIZE;
> > +	sb->s_blocksize_bits = PAGE_SHIFT;
> > +
> > +	/*
> > +	 * The binderfs filesystem can be mounted by userns root in a
> > +	 * non-initial userns. By default such mounts have the SB_I_NODEV flag
> > +	 * set in s_iflags to prevent security issues where userns root can
> > +	 * just create random device nodes via mknod() since it owns the
> > +	 * filesystem mount. But binderfs does not allow to create any files
> > +	 * including devices nodes. The only way to create binder devices nodes
> > +	 * is through the binder-control device which userns root is explicitly
> > +	 * allowed to do. So removing the SB_I_NODEV flag from s_iflags is both
> > +	 * necessary and safe.
> > +	 */
> > +	sb->s_iflags &= ~SB_I_NODEV;
> > +	sb->s_iflags |= SB_I_NOEXEC;
> > +	sb->s_magic = BINDERFS_SUPER_MAGIC;
> > +	sb->s_op = &binderfs_super_ops;
> > +	sb->s_time_gran = 1;
> > +
> > +	info = kzalloc(sizeof(struct binderfs_info), GFP_KERNEL);
> > +	if (!info)
> > +		return ret;
> 
> You can't return directly here, you need to goto the put_ipc_ns()
> function in the error handling.

This can directly jump to err_without_dentry since iput() and kfree()
handle NULL pointers.

> 
> > +
> > +	info->ipc_ns = ipc_ns;
> > +	info->root_gid = make_kgid(sb->s_user_ns, 0);
> > +	if (!gid_valid(info->root_gid))
> > +		info->root_gid = GLOBAL_ROOT_GID;
> > +	info->root_uid = make_kuid(sb->s_user_ns, 0);
> > +	if (!uid_valid(info->root_uid))
> > +		info->root_uid = GLOBAL_ROOT_UID;
> > +
> > +	sb->s_fs_info = info;
> > +
> > +	inode = new_inode(sb);
> > +	if (!inode)
> > +		goto err_without_dentry;
> > +
> > +	inode->i_ino = FIRST_INODE;
> > +	inode->i_fop = &simple_dir_operations;
> > +	inode->i_mode = S_IFDIR | 0755;
> > +	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
> > +	inode->i_op = &binderfs_dir_inode_operations;
> > +	set_nlink(inode, 2);
> > +
> > +	sb->s_root = d_make_root(inode);
> > +	if (!sb->s_root)
> > +		goto err_without_dentry;
> > +
> > +	ret = binderfs_binder_ctl_create(sb);
> > +	if (ret)
> > +		goto err_with_dentry;
> > +
> > +	return 0;
> > +
> > +err_with_dentry:
> > +	dput(sb->s_root);
> > +	sb->s_root = NULL;
> > +
> > +err_without_dentry:
> > +	if (inode)
> > +		iput(inode);
> 
> iput accepts NULL pointers.

Yes, all if() checks are removed.

> 
> > +	kfree(info);
> > +	put_ipc_ns(ipc_ns);
> > +
> > +	return ret;
> > +}
> > +
> > +static int binderfs_test_super(struct super_block *sb, void *data)
> > +{
> > +	struct binderfs_info *info = sb->s_fs_info;
> > +
> > +	if (info)
> > +		return info->ipc_ns == data;
> > +
> > +	return 0;
> > +}
> > +
> > +static int binderfs_set_super(struct super_block *sb, void *data)
> > +{
> > +	sb->s_fs_info = data;
> > +	return set_anon_super(sb, NULL);
> > +}
> > +
> > +static struct dentry *binderfs_mount(struct file_system_type *fs_type,
> > +				     int flags, const char *dev_name,
> > +				     void *data)
> > +{
> > +	struct super_block *sb;
> > +	struct ipc_namespace *ipc_ns = current->nsproxy->ipc_ns;
> > +
> > +	if (!ns_capable(ipc_ns->user_ns, CAP_SYS_ADMIN))
> > +		return ERR_PTR(-EPERM);
> > +
> > +	sb = sget_userns(fs_type, binderfs_test_super, binderfs_set_super,
> > +			 flags, ipc_ns->user_ns, ipc_ns);
> > +	if (IS_ERR(sb))
> > +		return ERR_CAST(sb);
> > +
> > +	if (!sb->s_root) {
> > +		int ret = binderfs_fill_super(sb, data, flags & SB_SILENT ? 1 : 0);
> > +		if (ret) {
> > +			deactivate_locked_super(sb);
> > +			return ERR_PTR(ret);
> > +		}
> > +
> > +		sb->s_flags |= SB_ACTIVE;
> > +	}
> > +
> > +	return dget(sb->s_root);
> > +}
> > +
> > +static void binderfs_kill_super(struct super_block *sb)
> > +{
> > +	struct binderfs_info *info = sb->s_fs_info;
> > +
> > +	if (info && info->ipc_ns)
> > +		put_ipc_ns(info->ipc_ns);
> > +
> > +	kfree(info);
> > +	kill_litter_super(sb);
> > +}
> > +
> > +static struct file_system_type binder_fs_type = {
> > +	.name		= "binder",
> > +	.mount		= binderfs_mount,
> > +	.kill_sb	= binderfs_kill_super,
> > +	.fs_flags	= FS_USERNS_MOUNT,
> > +};
> > +
> > +static int __init init_binderfs(void)
> > +{
> > +	int ret;
> > +
> > +	/* Allocate new major number for binderfs. */
> > +	ret = alloc_chrdev_region(&binderfs_dev, 0, BINDERFS_MAX_MINOR,
> > +				  "binder");
> > +	if (ret < 0)
>             ^^^^^^^
> > +		return ret;
> > +
> > +	ret = register_filesystem(&binder_fs_type);
> > +	if (ret) {
>             ^^^
> These functions both return negative on error.  From my static checker
> perspective it's easiest if everyone checks "if (ret) " but either way
> let's make it consistent.

if (ret) it is.

> 
> > +		unregister_chrdev_region(binderfs_dev, BINDERFS_MAX_MINOR);
> > +		return ret;
> > +	}
> > +
> > +	binderfs_mnt = kern_mount(&binder_fs_type);
> > +	if (IS_ERR(binderfs_mnt)) {
> > +		ret = PTR_ERR(binderfs_mnt);
> > +		binderfs_mnt = NULL;
> > +		unregister_filesystem(&binder_fs_type);
> > +		unregister_chrdev_region(binderfs_dev, BINDERFS_MAX_MINOR);
> 
> Use gotos to unwind.

The function is so short that it doesn't really make sense to use labels
and gotos.

Thanks for the review! Much appreciated.

Christian

> 
> > +	}
> > +
> > +	return ret;
> > +}
> 
> regards,
> dan carpenter
> 
