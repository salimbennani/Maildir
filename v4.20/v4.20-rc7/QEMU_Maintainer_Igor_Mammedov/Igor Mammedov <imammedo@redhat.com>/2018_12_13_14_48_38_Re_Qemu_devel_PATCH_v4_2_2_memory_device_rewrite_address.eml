Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 08:37:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3F4D758061F
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 06:51:21 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 06:51:20 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AGTwwWhQRFtSq+qRw2dabhAtbi9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zYxCN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBDOgOPehXoIbhqFUAsAO+CAuuCu7g1zNFiGP60rMh0+k6DQHL3hYtE84SvH?=
 =?us-ascii?q?jIstn4MroZX+CvzKnPyDXOd/BY2Tj66IjSbxsvpuuDXbd1ccXP1EYvEB3FhUiX?=
 =?us-ascii?q?pIzkOjOazOENs22F4OV9UuKikHQnpB9srTiv3MgslpPFiZ4SylDB7Ch0xps+K9?=
 =?us-ascii?q?6gSENjf9KoDJhduzuHO4drQc4uWX9ktSg6x7EcpJK2fjAGxIo7yxPbcfCLboaF?=
 =?us-ascii?q?7gz5WOqMIjp1imhpdKy8ihu07EOu0PfzVtOu31ZPtidFksfDtnQK1xHL7siHS+?=
 =?us-ascii?q?B9/lu62TqV2ADT7PxELVozlarBJJ4t2r8wlpwNvkTfBiL6hln6gayMekk55+Sl?=
 =?us-ascii?q?6P7rbqvoq5KcLYN4lwPzPrwrmsOlAOQ4NgYOX3Kc+eS5zLDj5FP2QLBXjvEvj6?=
 =?us-ascii?q?bWro7aKtofpqKgGABV1Zsj6xCjADi4y9QUmn0HLFNGeB2ZlYToNEzOLej8Dfe+?=
 =?us-ascii?q?hVSsjThqy+rHPr3nHpXCMHzDnK39crZ67k5R0wwzzddZ55JbDLEBPej/WkjrtN?=
 =?us-ascii?q?zXFhM5KRC7w/77CNVh0YMTQWaPAq6aMKzMq1OJ6f8vLvKIZI8Uvjb9Nvck6+Tv?=
 =?us-ascii?q?jX8/hV8SY62p0YELZ3C/G/Q1a3ifemfm19cdDX8R7E15SO3xlEbEVzlVaHCvGa?=
 =?us-ascii?q?Um6XY+AYOiCI7FAYe1nL2G2jz8B5BTeyVKB06BFSTVcZ6ZUaIJYSOWPsgzizEB?=
 =?us-ascii?q?SP2tRpEs0VS0uRbnxqF7BuzT/CIeqNTkztci/PDZlxw56WlpCd+A2XqGVWB+kz?=
 =?us-ascii?q?A0QGoa1b5+rQRdy1OP3K5ymfVeGZQH6/pXUwsSL5PQz+VmTdv1X1SSUM2OTQOH?=
 =?us-ascii?q?TdK8SRQ4S9c8z9gQKxJ8Htynix3P2AKwDrMVnqDND5sxpPGPl0PtLtpwni6VnJ?=
 =?us-ascii?q?IqiEMrF44WbTWr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BvAADPcBJcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCTxOMdI1AiSGQJhQYFIdEIjcGDQEDAQEBAQEBAgETAQEBAQE?=
 =?us-ascii?q?ICwsGGw4vgjYFAgMaAQaCWwEBAQECAQECJBMMCikDAgEBAgYBAQoYCR0IAwELS?=
 =?us-ascii?q?AYTBYMcgXQFCAEEp3UzhUCEcIw8F4FAP4ERgxKCEIhMAokbIQOGT5EBCZFOCxi?=
 =?us-ascii?q?BXIUcgnSHXoMElkWBXIF4TSMVO4JsglCODEAxgQccijWBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0BvAADPcBJcmBHrdtBjHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?CTxOMdI1AiSGQJhQYFIdEIjcGDQEDAQEBAQEBAgETAQEBAQEICwsGGw4vgjYFA?=
 =?us-ascii?q?gMaAQaCWwEBAQECAQECJBMMCikDAgEBAgYBAQoYCR0IAwELSAYTBYMcgXQFCAE?=
 =?us-ascii?q?Ep3UzhUCEcIw8F4FAP4ERgxKCEIhMAokbIQOGT5EBCZFOCxiBXIUcgnSHXoMEl?=
 =?us-ascii?q?kWBXIF4TSMVO4JsglCODEAxgQccijWBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="55766088"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 06:51:20 -0800
Received: from localhost ([::1]:53039 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXSKd-0000mD-GL
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 09:51:19 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33161)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gXSIa-0007yY-0c
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:49:13 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gXSIT-0005r1-Mv
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:49:11 -0500
Received: from mx1.redhat.com ([209.132.183.28]:54964)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>) id 1gXSIT-0005Li-CT
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 09:49:05 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com
	[10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id EE7FB307D850;
	Thu, 13 Dec 2018 14:48:45 +0000 (UTC)
Received: from localhost (unknown [10.43.2.182])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 5B9A45D70A;
	Thu, 13 Dec 2018 14:48:40 +0000 (UTC)
Date: Thu, 13 Dec 2018 15:48:38 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: David Hildenbrand <david@redhat.com>
Message-ID: <20181213154838.5c7af97a@redhat.com>
In-Reply-To: <0ba15f35-4827-f6f9-7a62-94a13027c727@redhat.com>
References: <20181212092821.18260-1-david@redhat.com>
	<20181212092821.18260-3-david@redhat.com>
	<20181213132850.2b79d12f@redhat.com>
	<0ba15f35-4827-f6f9-7a62-94a13027c727@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.48]);
	Thu, 13 Dec 2018 14:48:46 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v4 2/2] memory-device: rewrite address
 assignment using ranges
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>,
	David Gibson <david@gibson.dropbear.id.au>,
	qemu-devel@nongnu.org, Eduardo Habkost <ehabkost@redhat.com>,
	"Michael S . Tsirkin" <mst@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 13 Dec 2018 13:35:28 +0100
David Hildenbrand <david@redhat.com> wrote:

> On 13.12.18 13:28, Igor Mammedov wrote:
> > On Wed, 12 Dec 2018 10:28:21 +0100
> > David Hildenbrand <david@redhat.com> wrote:
> >   
> >> Let's rewrite it properly using ranges. This fixes certain overflows that
> >> are right now possible. E.g.
> >>
> >> qemu-system-x86_64 -m 4G,slots=20,maxmem=40G -M pc \
> >>     -object memory-backend-file,id=mem1,share,mem-path=/dev/zero,size=2G
> >>     -device pc-dimm,memdev=mem1,id=dimm1,addr=-0x40000000
> >>
> >> Now properly errors out instead of succeeding. (Note that qapi
> >> parsing of huge uint64_t values is broken and fixes are on the way)
> >>
> >> "can't add memory device [0xffffffffa0000000:0x80000000], usable range for
> >> memory devices [0x140000000:0xe00000000]"
> >>
> >> Signed-off-by: David Hildenbrand <david@redhat.com>
> >> ---
> >>  hw/mem/memory-device.c | 54 ++++++++++++++++++++++++------------------
> >>  1 file changed, 31 insertions(+), 23 deletions(-)
> >>
> >> diff --git a/hw/mem/memory-device.c b/hw/mem/memory-device.c
> >> index 8be63c8032..28e871f562 100644
> >> --- a/hw/mem/memory-device.c
> >> +++ b/hw/mem/memory-device.c
> >> @@ -100,9 +100,8 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
> >>                                              uint64_t align, uint64_t size,
> >>                                              Error **errp)
> >>  {
> >> -    uint64_t address_space_start, address_space_end;
> >>      GSList *list = NULL, *item;
> >> -    uint64_t new_addr = 0;
> >> +    Range as, new = range_empty;
> >>  
> >>      if (!ms->device_memory) {
> >>          error_setg(errp, "memory devices (e.g. for memory hotplug) are not "
> >> @@ -115,13 +114,11 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
> >>                           "enabled, please specify the maxmem option");
> >>          return 0;
> >>      }
> >> -    address_space_start = ms->device_memory->base;
> >> -    address_space_end = address_space_start +
> >> -                        memory_region_size(&ms->device_memory->mr);
> >> -    g_assert(address_space_end >= address_space_start);
> >> +    range_init_nofail(&as, ms->device_memory->base,
> >> +                      memory_region_size(&ms->device_memory->mr));
> >>  
> >> -    /* address_space_start indicates the maximum alignment we expect */
> >> -    if (!QEMU_IS_ALIGNED(address_space_start, align)) {
> >> +    /* start of address space indicates the maximum alignment we expect */
> >> +    if (!QEMU_IS_ALIGNED(range_lob(&as), align)) {
> >>          error_setg(errp, "the alignment (0x%" PRIx64 ") is not supported",
> >>                     align);
> >>          return 0;
> >> @@ -145,20 +142,25 @@ static uint64_t memory_device_get_free_addr(MachineState *ms,
> >>      }
> >>  
> >>      if (hint) {
> >> -        new_addr = *hint;
> >> -        if (new_addr < address_space_start) {
> >> +        if (range_init(&new, *hint, size)) {
> >>              error_setg(errp, "can't add memory device [0x%" PRIx64 ":0x%" PRIx64
> >> -                       "] before 0x%" PRIx64, new_addr, size,
> >> -                       address_space_start);
> >> +                       "], usable range for memory devices [0x%" PRIx64 ":0x%"
> >> +                       PRIx64 "]", *hint, size, range_lob(&as),
> >> +                       range_size(&as));  
> > this changes error message to be the same as the next one and looses 'before' meaning
> > so if you'd like to have the same error message, then prbably merging both branches would be better.  
> 
> I can do that, but I'll have to refer to "*hint" and "size" then instead
> of range_lob(&new) and range_size(&new), because the range might not be
> initialized.
either that or better make errors different to avoid confusion.

[...]
> >> -            new_addr = QEMU_ALIGN_UP(md_addr + md_size, align);
> >> +
> >> +            next_addr = QEMU_ALIGN_UP(range_upb(&tmp) + 1, align);
> >> +            if (!next_addr || range_init(&new, next_addr, range_size(&new))) {
> >> +                range_make_empty(&new);
> >> +                break;
> >> +            }
> >>          }
> >>      }
> >>  
> >> -    if (new_addr + size > address_space_end) {
> >> +    if (!range_contains_range(&as, &new)) {
> >>          error_setg(errp, "could not find position in guest address space for "
> >>                     "memory device - memory fragmented due to alignments");  
> > it could happen due to fragmentation but also in case remaining free space is no enough  
> 
> That should be handled via memory_device_check_addable(), which is
> called at the beginning of the function. It checks for general size
> availability.

I've meant
 AS_LOB                 AS_UPB
   100                   1000
 MEM1_LOB  MEM1_UPB
   100     900
then hotplugging MEM2 with size 200 would fail with this message,
which could be a bit confusing.
Maybe "not enough space to plug device of size %d" would be better?
   
> 
> Thanks!
> 


