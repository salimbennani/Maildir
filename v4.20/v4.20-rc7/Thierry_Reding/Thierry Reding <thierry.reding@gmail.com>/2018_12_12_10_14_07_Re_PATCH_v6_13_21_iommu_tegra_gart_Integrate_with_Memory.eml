Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  12 Dec 2018 19:44:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0C3325803DC;
	Wed, 12 Dec 2018 02:14:20 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 12 Dec 2018 02:14:19 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ACYpIBBxzIFgA0ovXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4RL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9vEMOoBmlCAmjGO/i0CVFimPs0KEk1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nastX1NKYMXuCv1qnJzSjIYe9I1jjg6YjIdB8hquyLULJsccrRyFcgFxnfjlSQ?=
 =?us-ascii?q?s4DlJS2a2fkMs2id4OptTu2vi2s9pAFwpjij3Nsjio7Mho8MzF3P6CZ3wJ4tKN?=
 =?us-ascii?q?GmVEJ2ZcSoHIZeui2ELYd6X8AvT31ytCs7yLAKoYC3cDUIxZg92RLTdfiKf5KV?=
 =?us-ascii?q?7h/iTuqcIDh1iXR4c7ylnRmy61KvyujkW8m0zllKqi1Fn8HStnACyRPT8NKLSv?=
 =?us-ascii?q?hj8Ue73zaAyQTT5vtDIUAumqrXM58hwrgumZoPqUnPADP6lUHsgKOLeEgo5PKk?=
 =?us-ascii?q?5/nkb7n6vJORNo15hhn7Mqs0m8y/Beo4MhIJX2ie4em80Lzj/UvkQLRFl/E2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GghV04gl6xmhFTery8oYnXYZI1JfYh6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mVOskC1kx/zeJL3uHo3NLmTfkLfmZbt9709cyAktwtxF6JNUF6oMIPbyWk/3qd?=
 =?us-ascii?q?zZAQU1Mw2yw+b7Ftp90pkSVn6IAq+cKKnSq0OH5vozI+mQY48YoDb9JOIk5/7y?=
 =?us-ascii?q?l3A5nkURfam03ZQNbnC4Ee9rI0GYYXrqn9cAHn0Gvgs4TOz2llKCVSRfaGq1X6?=
 =?us-ascii?q?I5/js7Ep6pDZ/fRoCxh7yMxCW7HppIaWxcCVCMFnHod4ODW/oXbCKSI8lhkiEL?=
 =?us-ascii?q?VLS7So8h0w2uuxH+y7Z9MuXU/SgYv4r51Ndp/+3TiQ0y9TtsAsuHyGGNT2Z0nm?=
 =?us-ascii?q?ASSz8sxq9/o1dwylOC0ah+nvxZGsZf5/JPUgcmK5Hcy/Z2BMz1WgLEZt2JUkqp?=
 =?us-ascii?q?Qs26ATEtSdI829wObFx7G9m4ihDD3jClA7kal7GQAJw086Tc32X+JspnynbG0r?=
 =?us-ascii?q?UhgEciQsdVKWKmgat//RDJB4HVi0WZi7qqdaME0SHQ7miD03SBsFtYUAFqV6XF?=
 =?us-ascii?q?Rm4QZk3RodT95UPCSruuBK8jMgtAz86CN6RLZsfojVVAWPfsJtDeb3itlGe3AB?=
 =?us-ascii?q?aC3qmMY5bye2UBwCXdD1AJnB0J8naYKwcyHCehrHjYDDx1C13vZVjh8e1/qHO9?=
 =?us-ascii?q?U081wBuGb0xn17qp5BEVgeaQRO8U3rIBoC0hsSl7HE6h39LKDNqNvxZhfKRZYd?=
 =?us-ascii?q?M6/FdH1WLYuxZhPpC6KKBinFoecwVxv0PhzBh3DoRAkc43rHIl1gZyKKSY0E9f?=
 =?us-ascii?q?eDOcx5z/JrrXKmzq9hC1d6HWwk3e0MqR+qoX8vs4r0vsvQ63GUsi6XloyMRV3G?=
 =?us-ascii?q?aG6ZXMDwoSVozxX10z9xh7obHafyY865nV1X1qLam7rDvC18g1C+sizxaqZ81f?=
 =?us-ascii?q?P7+cFA/uD80aANCjKew3m1Szch0IJuFT9K4uMMOgePuLw6qrPOdmnDK7gmVL+o?=
 =?us-ascii?q?F90kSQ9yViTu7ExYoKw/ad3gGfTTfzkE+hstzrmYBDfTwSBGu/xjT+C45Le6Jy?=
 =?us-ascii?q?epwHCWGwLM2tx9VynoLiVGRc9FG+GVwGwsipeRyJYlz53A1Q01kXoHO9lSu5yT?=
 =?us-ascii?q?x0jy8mrq6F0CPSxOTicQINOnRXS2l6kVfsPY+0gsgaXUipdQQolAGp5V3nx6hd?=
 =?us-ascii?q?v6l/K2jTQUFVfyn5NW1iU62wtqacbM5L8p8nrSJXUOGka1CAVrH9uwca0z/kH2?=
 =?us-ascii?q?ZGxjA0bSuqupb6nxx9km6dN2x8rHnaecFxwxfQ+trcSOVV3joHQil4lDbWCkK9?=
 =?us-ascii?q?P9mv4dWbiZPDvvqiWGKmU51ZaTPrwp+YtCun+W1qBgWynvCpld3gCwQ60y7719?=
 =?us-ascii?q?9xWCXMrRb8ZJTr1qugPeJmeEloGEHz685gFo5ilYswgYka2WIGiZWN4XoHjWDz?=
 =?us-ascii?q?PM1Y2a3kbXoBXz4Lw8PP7wjj101uNXaJx4P/VnWAzcptfdi6YmUK2i0j68BGEr?=
 =?us-ascii?q?ub7LtBnSFtuFq3sRrRYeRhnjca0fYu7X8ag+ITtwY3wCSSHKsSHVVGMiz2jBuH?=
 =?us-ascii?q?8cq+rKpMaWarcLiw0ld+nN+7ALGDpAFcRGj2epM4ESBs6cV/NUrG0Gfv5YH8ZN?=
 =?us-ascii?q?nQcdUTuwWIkxfHiuhZMpMwmeAMhSp6ImL9pnwlxvU/jRxv25G6oYeGJ39s/KK/?=
 =?us-ascii?q?Hh5XKDn1a9kP9THqiKZUhtyW0Jy3HpV9BjULW4PlQumyHzIVsfTnKhyCEDkhqn?=
 =?us-ascii?q?qAHbrfHAmf6Fpprn7VEpCrMW2XK2cdzdl4WBadI0lfihgOXDomhp45ChyqxMv5?=
 =?us-ascii?q?fUd7/D8R40D3qgBWxuJ0LRX/UXrfpAS1ajcyUpefNwFb7gVD50fTLMyf4fh/Hy?=
 =?us-ascii?q?Be/p29sgONLnaXaBhPDWEMQkaEHUzsPqGy5dnc9OiVHuq/L/zTYbWXtOxRTfGI?=
 =?us-ascii?q?yYi00oth+TaMOd6CPn1jD/09x0pCUmp1G8XfmzUTVSMXkzjBYNKcpBe54id3tN?=
 =?us-ascii?q?yw8Oz3WALz4ouCE7tSPstu+xC1gqeDNvSchCVjKTZf2ZMD22XIyKUE3FMJjyFu?=
 =?us-ascii?q?dj+tEakPtCLXTaLQnLNXAAAfay9pKMRI6Kc81BFXOcHHktP1yqJ4jvktBlhfSF?=
 =?us-ascii?q?zugdupatIKIm2nMFPHBV2GNLCHJT3N3sH2brmwSbxWjOVIqRKwvSyXHFPkPjSG?=
 =?us-ascii?q?jzPpTQygMflQjCGHOxxToJ29chdoCWT5UN3qcAG0MN9pgj0w2rA0gnLKNWgBMT?=
 =?us-ascii?q?lzaU9Nr7uQ7T9GjfV7AWBO8n1lLeyckSaD8+bYMooWsedsAilsl+NV+nI6y75U?=
 =?us-ascii?q?7CFCXPN0mSvSocRoo1GpieSPzjtnUBxTqjdEno6LvENiObnH+ZlEQ3rL4BUN7W?=
 =?us-ascii?q?DDQygN8vdgC8H1quh30dnXmaTwL38W/9Pb8NcML8fRIcODdnEmNEy6NiTTCV45?=
 =?us-ascii?q?TT+mL3vOz3ZQnPCU+TXBspg7p4L2idwUR7NaUlMdGfYTC0AjF9sHdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEYAD5sjK?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADM3hBch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2sUE4wUX4szgg0UjXqJRYF1AQwDAQEYEwG?=
 =?us-ascii?q?HOyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiQZARsdAQMCC?=
 =?us-ascii?q?QEBBQUOCgklAwwFDQIRAQUBIhMFgxwBgWgBAxUEAZoUPIwJFgUBF4J3BYRBChk?=
 =?us-ascii?q?nDV2BMAcCBhKCW4gzgRyBVz+BEYMSgleIBQKJGRoKhgaBT49HLgcCgiIEi3+DJ?=
 =?us-ascii?q?SMKiV8Lh1CPKIZcgw4GAgkHDyGBJYIOMxojUIJsghsMF4NKilQ/MjFRAwEBIRO?=
 =?us-ascii?q?KJimCJAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAADM3hBch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2sUE4wUX4szgg0UjXqJRYF1AQwDAQEYEwGHOyI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAiQZARsdAQMCCQEBBQUOCgklAww?=
 =?us-ascii?q?FDQIRAQUBIhMFgxwBgWgBAxUEAZoUPIwJFgUBF4J3BYRBChknDV2BMAcCBhKCW?=
 =?us-ascii?q?4gzgRyBVz+BEYMSgleIBQKJGRoKhgaBT49HLgcCgiIEi3+DJSMKiV8Lh1CPKIZ?=
 =?us-ascii?q?cgw4GAgkHDyGBJYIOMxojUIJsghsMF4NKilQ/MjFRAwEBIROKJimCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,344,1539673200"; 
   d="asc'?scan'208";a="141795831"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 12 Dec 2018 02:14:17 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727088AbeLLKON (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 12 Dec 2018 05:14:13 -0500
Received: from mail-ed1-f67.google.com ([209.85.208.67]:38998 "EHLO
        mail-ed1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726727AbeLLKON (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 12 Dec 2018 05:14:13 -0500
Received: by mail-ed1-f67.google.com with SMTP id b14so15053430edt.6;
        Wed, 12 Dec 2018 02:14:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=v1eJluHvCzjsMp8bBVSmsOmgE8eXgaTc+VKwmXNINjk=;
        b=gixeMBLYDgtmHUhBMoyIh+7S5cRViPrOrXGU/ORK3oRi5FBgiqCr4BbS7SQHweaTtX
         Pd36vxs2rWJTkqKCORLt7+gkUZnVwIaqHo8WpzbQjKrIqnYVpo7CB/4vHUX78VA0VLgr
         m0L3KJ/N8FXun/CkOI0G7QNqsEUUsQsMB4YdsHfrjgEVYuYeFayMkVnE7XpjWmA62g+G
         GG8eBaAyQCgJhDPNA/eawRqv/UVK6N//2iGs+8Ll7dte/Ep1/vTW8eKQPF9lJ6QL27nm
         QBboxz9e2ZG7NwAKPhxPwEYBgQVwUhWXoktB/Kv93GoaSJRqC8aWtVh/Y62LFi3XJHqw
         aKBQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=v1eJluHvCzjsMp8bBVSmsOmgE8eXgaTc+VKwmXNINjk=;
        b=SYo2Zfvhdy/k5qapr57OJHraW7vKasCd+fzACK+eoYfQAeh9xV0+r3m5EuhIvRfj+i
         2H065WToJaaxUmZoLURCflOdVatOoxmoIKvWsRVz0xs/gfuH2YAiYWUNpx3gUpL7fvTA
         XeI6iuxZaZHzEjmH/OMUMtuH1EMifcK6v0ZwaVLr8/w7c6QrSyns8s4VmlRDj4P4wD8h
         iFZgs/4bVyH94E70SMNjWd74bdu+00KMinO56uxuULahYWD31ppIq0HAPUxdPwAa0WSj
         VfpWWKXdhHaul3+hPGQtQphUi6CcY4MXjikS4YzAMuJwTKCiYUD30T1OB560ZkJ1kN+V
         By/A==
X-Gm-Message-State: AA+aEWaNUBeNerlxP5IRvnBLUbscbH5CKsLR4Xxgq+SjIXa204D5E8/G
        mc4KOtt0MvNoFDhlNI/BPQY=
X-Google-Smtp-Source: AFSGD/XQFmrXPjyEjnwjFxzkxkKJDIQK9M5pMzs/MGSIhbKJ8rIVg3uUfMt81OTFuPjbOf3VP9r9XQ==
X-Received: by 2002:a17:906:e5a:: with SMTP id q26-v6mr14386310eji.168.1544609648705;
        Wed, 12 Dec 2018 02:14:08 -0800 (PST)
Received: from localhost (pD9E51040.dip0.t-ipconnect.de. [217.229.16.64])
        by smtp.gmail.com with ESMTPSA id t24sm4657255edb.7.2018.12.12.02.14.07
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 12 Dec 2018 02:14:07 -0800 (PST)
Date: Wed, 12 Dec 2018 11:14:07 +0100
From: Thierry Reding <thierry.reding@gmail.com>
To: Dmitry Osipenko <digetx@gmail.com>
Cc: Jonathan Hunter <jonathanh@nvidia.com>,
        Joerg Roedel <joro@8bytes.org>,
        Robin Murphy <robin.murphy@arm.com>,
        iommu@lists.linux-foundation.org, devicetree@vger.kernel.org,
        linux-tegra@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH v6 13/21] iommu/tegra: gart: Integrate with Memory
 Controller driver
Message-ID: <20181212101407.GJ15092@ulmo>
References: <20181209202950.31486-1-digetx@gmail.com>
 <20181209202950.31486-14-digetx@gmail.com>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
        protocol="application/pgp-signature"; boundary="Do4IU1xF/9sod/r6"
Content-Disposition: inline
In-Reply-To: <20181209202950.31486-14-digetx@gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


--Do4IU1xF/9sod/r6
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Sun, Dec 09, 2018 at 11:29:42PM +0300, Dmitry Osipenko wrote:
> The device-tree binding has been changed. There is no separate GART device
> anymore, it is squashed into the Memory Controller. Integrate GART module
> with the MC in a way it is done for the SMMU of Tegra30+.
>=20
> Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
> ---
>  drivers/iommu/Kconfig      |  1 +
>  drivers/iommu/tegra-gart.c | 77 ++++++++++++--------------------------
>  drivers/memory/tegra/mc.c  | 41 ++++++++++++++++++++
>  include/soc/tegra/mc.h     | 27 +++++++++++++
>  4 files changed, 93 insertions(+), 53 deletions(-)
>=20
> diff --git a/drivers/iommu/Kconfig b/drivers/iommu/Kconfig
> index d9a25715650e..83c099bb7288 100644
> --- a/drivers/iommu/Kconfig
> +++ b/drivers/iommu/Kconfig
> @@ -282,6 +282,7 @@ config ROCKCHIP_IOMMU
>  config TEGRA_IOMMU_GART
>  	bool "Tegra GART IOMMU Support"
>  	depends on ARCH_TEGRA_2x_SOC
> +	depends on TEGRA_MC
>  	select IOMMU_API
>  	help
>  	  Enables support for remapping discontiguous physical memory
> diff --git a/drivers/iommu/tegra-gart.c b/drivers/iommu/tegra-gart.c
> index 835fea461c59..0a72b6afa842 100644
> --- a/drivers/iommu/tegra-gart.c
> +++ b/drivers/iommu/tegra-gart.c
> @@ -19,16 +19,17 @@
>   * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
>   */
> =20
> -#include <linux/init.h>
>  #include <linux/io.h>
>  #include <linux/iommu.h>
>  #include <linux/list.h>
>  #include <linux/moduleparam.h>
> -#include <linux/of_device.h>
> +#include <linux/platform_device.h>
>  #include <linux/slab.h>
>  #include <linux/spinlock.h>
>  #include <linux/vmalloc.h>
> =20
> +#include <soc/tegra/mc.h>
> +
>  /* bitmap of the page sizes currently supported */
>  #define GART_IOMMU_PGSIZES	(SZ_4K)
> =20
> @@ -397,9 +398,8 @@ static const struct iommu_ops gart_iommu_ops =3D {
>  	.iotlb_sync	=3D gart_iommu_sync,
>  };
> =20
> -static int tegra_gart_suspend(struct device *dev)
> +int tegra_gart_suspend(struct gart_device *gart)
>  {
> -	struct gart_device *gart =3D dev_get_drvdata(dev);
>  	unsigned long iova;
>  	u32 *data =3D gart->savedata;
>  	unsigned long flags;
> @@ -411,9 +411,8 @@ static int tegra_gart_suspend(struct device *dev)
>  	return 0;
>  }
> =20
> -static int tegra_gart_resume(struct device *dev)
> +int tegra_gart_resume(struct gart_device *gart)
>  {
> -	struct gart_device *gart =3D dev_get_drvdata(dev);
>  	unsigned long flags;
> =20
>  	spin_lock_irqsave(&gart->pte_lock, flags);
> @@ -422,41 +421,39 @@ static int tegra_gart_resume(struct device *dev)
>  	return 0;
>  }
> =20
> -static int tegra_gart_probe(struct platform_device *pdev)
> +struct gart_device *tegra_gart_probe(struct device *dev,
> +				     const struct tegra_smmu_soc *soc,
> +				     struct tegra_mc *mc)
>  {
>  	struct gart_device *gart;
> -	struct resource *res, *res_remap;
> +	struct resource *res_remap;
>  	void __iomem *gart_regs;
> -	struct device *dev =3D &pdev->dev;
>  	int ret;
> =20
>  	BUILD_BUG_ON(PAGE_SHIFT !=3D GART_PAGE_SHIFT);
> =20
> +	/* Tegra30+ has an SMMU and no GART */
> +	if (soc)
> +		return NULL;

This looks weird. Why do we even call tegra_gart_probe() on anything but
Tegra20?

> +
>  	/* the GART memory aperture is required */
> -	res =3D platform_get_resource(pdev, IORESOURCE_MEM, 0);
> -	res_remap =3D platform_get_resource(pdev, IORESOURCE_MEM, 1);
> -	if (!res || !res_remap) {
> +	res_remap =3D platform_get_resource(to_platform_device(dev),
> +					  IORESOURCE_MEM, 1);
> +	if (!res_remap) {
>  		dev_err(dev, "GART memory aperture expected\n");
> -		return -ENXIO;
> +		return ERR_PTR(-ENXIO);
>  	}
> =20
>  	gart =3D devm_kzalloc(dev, sizeof(*gart), GFP_KERNEL);
>  	if (!gart) {
>  		dev_err(dev, "failed to allocate gart_device\n");
> -		return -ENOMEM;
> +		return ERR_PTR(-ENOMEM);
>  	}
> =20
> -	gart_regs =3D devm_ioremap(dev, res->start, resource_size(res));
> -	if (!gart_regs) {
> -		dev_err(dev, "failed to remap GART registers\n");
> -		return -ENXIO;
> -	}
> -
> -	ret =3D iommu_device_sysfs_add(&gart->iommu, &pdev->dev, NULL,
> -				     dev_name(&pdev->dev));
> +	ret =3D iommu_device_sysfs_add(&gart->iommu, dev, NULL, "gart");
>  	if (ret) {
>  		dev_err(dev, "Failed to register IOMMU in sysfs\n");
> -		return ret;
> +		return ERR_PTR(ret);
>  	}
> =20
>  	iommu_device_set_ops(&gart->iommu, &gart_iommu_ops);
> @@ -468,7 +465,8 @@ static int tegra_gart_probe(struct platform_device *p=
dev)
>  		goto remove_sysfs;
>  	}
> =20
> -	gart->dev =3D &pdev->dev;
> +	gart->dev =3D dev;
> +	gart_regs =3D mc->regs + GART_REG_BASE;
>  	spin_lock_init(&gart->pte_lock);
>  	spin_lock_init(&gart->client_lock);
>  	INIT_LIST_HEAD(&gart->client);
> @@ -483,46 +481,19 @@ static int tegra_gart_probe(struct platform_device =
*pdev)
>  		goto unregister_iommu;
>  	}
> =20
> -	platform_set_drvdata(pdev, gart);
>  	do_gart_setup(gart, NULL);
> =20
>  	gart_handle =3D gart;
> =20
> -	return 0;
> +	return gart;
> =20
>  unregister_iommu:
>  	iommu_device_unregister(&gart->iommu);
>  remove_sysfs:
>  	iommu_device_sysfs_remove(&gart->iommu);
> =20
> -	return ret;
> -}
> -
> -static const struct dev_pm_ops tegra_gart_pm_ops =3D {
> -	.suspend	=3D tegra_gart_suspend,
> -	.resume		=3D tegra_gart_resume,
> -};
> -
> -static const struct of_device_id tegra_gart_of_match[] =3D {
> -	{ .compatible =3D "nvidia,tegra20-gart", },
> -	{ },
> -};
> -
> -static struct platform_driver tegra_gart_driver =3D {
> -	.probe		=3D tegra_gart_probe,
> -	.driver =3D {
> -		.name	=3D "tegra-gart",
> -		.pm	=3D &tegra_gart_pm_ops,
> -		.of_match_table =3D tegra_gart_of_match,
> -		.suppress_bind_attrs =3D true,
> -	},
> -};
> -
> -static int __init tegra_gart_init(void)
> -{
> -	return platform_driver_register(&tegra_gart_driver);
> +	return ERR_PTR(ret);
>  }
> -subsys_initcall(tegra_gart_init);
> =20
>  module_param(gart_debug, bool, 0644);
>  MODULE_PARM_DESC(gart_debug, "Enable GART debugging");
> diff --git a/drivers/memory/tegra/mc.c b/drivers/memory/tegra/mc.c
> index 55ecfb2d8cfd..4cae1c3a853b 100644
> --- a/drivers/memory/tegra/mc.c
> +++ b/drivers/memory/tegra/mc.c
> @@ -702,13 +702,54 @@ static int tegra_mc_probe(struct platform_device *p=
dev)
>  				PTR_ERR(mc->smmu));
>  	}
> =20
> +	if (IS_ENABLED(CONFIG_TEGRA_IOMMU_GART)) {
> +		mc->gart =3D tegra_gart_probe(&pdev->dev, mc->soc->smmu, mc);
> +		if (IS_ERR(mc->gart))
> +			dev_err(&pdev->dev, "failed to probe GART: %ld\n",
> +				PTR_ERR(mc->gart));
> +	}

Perhaps if we add a check for for !mc->soc->smmu here we can avoid
passing this data structure to tegra_gart_probe() and remove the
corresponding check from tegra_gart_probe(). That seems more like a
more logical sequence than attempting to probe GART on device that may
not have one and return.

Also, since there's no error return here, do we want to set mc->gart to
NULL on error to avoid crashing later on...

> +
> +	return 0;
> +}
> +
> +static int tegra_mc_suspend(struct device *dev)
> +{
> +	struct tegra_mc *mc =3D dev_get_drvdata(dev);
> +	int err;
> +
> +	if (mc->gart) {

=2E.. like here?

> +		err =3D tegra_gart_suspend(mc->gart);
> +		if (err)
> +			return err;
> +	}
> +
>  	return 0;
>  }
> =20
> +static int tegra_mc_resume(struct device *dev)
> +{
> +	struct tegra_mc *mc =3D dev_get_drvdata(dev);
> +	int err;
> +
> +	if (mc->gart) {

And here?

> +		err =3D tegra_gart_resume(mc->gart);
> +		if (err)
> +			return err;
> +	}
> +
> +	return 0;
> +}
> +
> +static const struct dev_pm_ops tegra_mc_pm_ops =3D {
> +	.suspend =3D tegra_mc_suspend,
> +	.resume =3D tegra_mc_resume,
> +};
> +
>  static struct platform_driver tegra_mc_driver =3D {
>  	.driver =3D {
>  		.name =3D "tegra-mc",
>  		.of_match_table =3D tegra_mc_of_match,
> +		.pm =3D &tegra_mc_pm_ops,
>  		.suppress_bind_attrs =3D true,
>  	},
>  	.prevent_deferred_probe =3D true,
> diff --git a/include/soc/tegra/mc.h b/include/soc/tegra/mc.h
> index db5bfdf589b4..5da42e3fb801 100644
> --- a/include/soc/tegra/mc.h
> +++ b/include/soc/tegra/mc.h
> @@ -77,6 +77,7 @@ struct tegra_smmu_soc {
> =20
>  struct tegra_mc;
>  struct tegra_smmu;
> +struct gart_device;
> =20
>  #ifdef CONFIG_TEGRA_IOMMU_SMMU
>  struct tegra_smmu *tegra_smmu_probe(struct device *dev,
> @@ -96,6 +97,31 @@ static inline void tegra_smmu_remove(struct tegra_smmu=
 *smmu)
>  }
>  #endif
> =20
> +#ifdef CONFIG_TEGRA_IOMMU_GART
> +struct gart_device *tegra_gart_probe(struct device *dev,
> +				     const struct tegra_smmu_soc *soc,
> +				     struct tegra_mc *mc);
> +int tegra_gart_suspend(struct gart_device *gart);
> +int tegra_gart_resume(struct gart_device *gart);
> +#else
> +static inline struct gart_device *
> +tegra_gart_probe(struct device *dev, const struct tegra_smmu_soc *soc,
> +		 struct tegra_mc *mc)
> +{
> +	return NULL;
> +}
> +
> +static inline int tegra_gart_suspend(struct gart_device *gart)
> +{
> +	return -ENODEV;
> +}
> +
> +static inline int tegra_gart_resume(struct gart_device *gart)
> +{
> +	return -ENODEV;
> +}
> +#endif

That doesn't look right. If we don't enable GART, then the dummy
implementations will be used, but they return error codes, so
suspend/resume of MC will also fail, causing the whole system to
not be able to suspend if GART is disabled.

I think it'd be better to avoid the dummy functions and instead add
extra checks for IS_ENABLED(CONFIG_TEGRA_IOMMU_GART) where these are
called. That way references to these functions should be discarded
at translation time.

To be specific, tegra_mc_suspend() and tegra_mc_resume() would change
like this:

	if (IS_ENABLED(CONFIG_TEGRA_IOMMU_GART) && mc->gart)

Thierry

--Do4IU1xF/9sod/r6
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAABCAAdFiEEiOrDCAFJzPfAjcif3SOs138+s6EFAlwQ324ACgkQ3SOs138+
s6Fk7xAAsQkWgAOy3a1e8km4a/1eMiv+ODQ/SxbNo9Owwn4+IXOYQVrSP85ooA/Z
fHAuNcOKgCGw/buzgv2CXzMBmQyHDr92OS1PSHWMpC0qtTOqlXTZIWiyizvk1lQ1
glkqDjBj3uInQWunUadUhyD3gsyjSNxDXbCrJ0YlOjrGKtekWGqqtVyLK7Rb9/qg
zvQNgTJf+tvy562WbWz3+OC6rxhE0iwnpwPibT89LpG6tYy9zEB4LIxieD1uhH6R
r+iN4ghp/uFq1a2kK8x46C/OBFnuy+TwvTMC0R4Rf56tKkAG1FyG72o3Q2UGQb6P
1NH3j+xvFyax0j834pYUp5GGy/T0w0M7dA3AYFWoMIQgpmUQxqRn8Lm1k7JZ6lHP
mJFCMhwdm33vb04W/XC+nRu6l3HHvcQscCqxS7VIw4Cj+3FpTPrY1jSAgsyE0MRw
dELYf9wVxj6ZfozyZAXRbwJit4S93ckrXRpMtDv9/n3ULZ66WO7IVuylWrd86rlx
FmsFoQ/1CL/HrrnzSED/dh5kNC5H1Upn6n+R6tZua70oHAhlh3LuD5gUyAK8aWB9
KMd5ZJ94t/fIn/FPPIyxgmZUGp6xL1ljvXQ47TFbfqiYAhnqd+NPDk2CJ2wwaEjj
UQaZiHNJt8JzZMLbwLCq3MySIRtaArTn7B9yZFrW8UyH+mzS3jI=
=aFQ1
-----END PGP SIGNATURE-----

--Do4IU1xF/9sod/r6--
