Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 11 Dec 2018 08:42:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 33E5E580380;
	Mon, 10 Dec 2018 11:46:23 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 10 Dec 2018 11:46:22 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AblC24h0bBsCplLvZsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTLfzxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfV5Yq3Tfc0XSXNYUstMTSNOH4Cy?=
 =?us-ascii?q?b44XD+oGJ+ZYs5Pyp10SohSgGAKgAP3jxiNNinLwwKY00fkuERve0QIuH9wArn?=
 =?us-ascii?q?fao9f7NKkPXu+60KbGwy/AYP1Rwjf98IrFfws9ofyOR798bdDcxVUtGg7Dk16e?=
 =?us-ascii?q?qZblPzSQ1ukVrmab8/RvVey1hG4htgp+oiKgxsc2iobXgIIe11fJ9T5lwIkrK9?=
 =?us-ascii?q?23Ukh7bcSqEZRKtyGaLZV5QsU5TmFppio60aMJtYSncygNzZQq3hjSYOGEfYiQ?=
 =?us-ascii?q?+h/vSvqdLDNiiH54dr+zmQy+/VWjx+HgTMW50VRHojJbntXRqHwBzQLf5taFR/?=
 =?us-ascii?q?dn40us2yyD2x7c5+xCPEs6j7DUK4Q7zb41jpcTsVrMHivxmEjukq+WeVsr+vKy?=
 =?us-ascii?q?5+TkfLrmvJmcOJFwig3kNaQugMO/Dfw5MggIQWeb5fyx2KP/8UD9WrlGk/M7nr?=
 =?us-ascii?q?fDvJzHJskXurS1Dg5X34o77hawFTam0NAWnXkdK1JFfQqKj4zoO1HIPfD5Au6z?=
 =?us-ascii?q?g1eynzdxwfDJILnhDozKLnnNlrfuY6x95lVCyAo8099f/YhYCrIfL/LpXE/+qt?=
 =?us-ascii?q?jYAgU+MwyuzObrEM992Z8GWWKTHq+ZN7vfsVuJ5uIsPeaAfoAUuCvmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh88LEX0WsQomUOzqlFqCXCZTZ3moXq?=
 =?us-ascii?q?I8+is0CIW8AYfDW4CimrqB3CigE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTpcr1Quyuw/i17pnMu3U9zUatZLkytd5/e7TlRY09TxyCMSQyGWNT2Bynm?=
 =?us-ascii?q?MVSD46xqF/oUphylid1ah0meBXFdtW5/lRSAc1KYbcz/BmC9D1Qg/OZMyJSFah?=
 =?us-ascii?q?QtWlGz0xVMg+w90VbkZ5GtWiiA3D3iWwD78UkbyLGII78qbG03ftIMZ9zm7M1L?=
 =?us-ascii?q?M9gFk+XstPKWqmi7Z89wfJAY7FiUGZl6eweqQa0y7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsfGkd2CbdCE0Akw0I+XaGNA4+Bjquom7EDTxuE07vbF3o8eVktHy7?=
 =?us-ascii?q?SUo0xRmQb0J9z7q15gIVhfuERvwOxL0Epjkupy90HFmn2dLWEMSPpwx6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqE0FNA?=
 =?us-ascii?q?cjOY2ozwOr3XK2Xo4BCjcanW2kva0NaX/KcP5+81q1HivAGvC0oj/G9r09hT03?=
 =?us-ascii?q?uA+JrKCBAeXo72UkYy7xJ6va3VYjEh54PI0n1hKbO7sjvc1NMmGuQkygyscMxC?=
 =?us-ascii?q?MKyZDgDyFc4aB8+wKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvCYwwuLTSvzgE2gs8D3g49EYz4SE3G7ySjlAo5Re6Jz?=
 =?us-ascii?q?cZwKCWeoP8242NF+i4TxVH5f8V6pH0kG19OxeRqOc1z92hVd1V4WoXO7gyS41S?=
 =?us-ascii?q?F7kzYzoqqZwiPO2eXieAMbNWFRQGltkEnjIZKzj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkYVGaS6TxohsA3yP4Am?=
 =?us-ascii?q?tewis2dzWrupX/ghx7h3iRLHd1rHrFZ85wwQ3T68DbRf5UxjAGXjV3iSHLBlig?=
 =?us-ascii?q?ONmk5deUmI3ZsuC9VGKhUYdfcTLxwoODtyu75GtqDgO5n/2ont3nEA460TL01t?=
 =?us-ascii?q?VwVCXIqgr8bZfv16igLe1neUxoDkfm68VmAoF+jpcwhJYI1HkanJqV+mALkWXy?=
 =?us-ascii?q?MdVdwq/+aHsNRTgWw9/a+gTl2UtjLm6XyIL9THmS3sxhZ9yiaGMMxi0999xKCL?=
 =?us-ascii?q?uT7LFcnit6uFu4oRjRYfhghDgdz/Qu5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRWHP4epchByB89Mt+P0zX0H3v9I7kYs?=
 =?us-ascii?q?LfYswJth2biBrAi+lVKJQslvsFnyZnOGT9vWE7xO4/lxBhwZa6vI2fIWV34K25?=
 =?us-ascii?q?GgJYNiHyZ84L5jHtiqNektyX3o+1GJVhBy4LXIDpTf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQ8PRjo6mZo5Fh2wyMzl?=
 =?us-ascii?q?bUd0/TQR5l/+qhtRxeNkLRj/UmHDpAi2bjc4UoSQLB1T7gta/UfaLdSe7v5vHy?=
 =?us-ascii?q?Ff5pChrhaCKmmFaARTF20JRlaIB1P+Prmt+NnA9fKXBvGlIvvKYLWOr/FeVviS?=
 =?us-ascii?q?yZKu1Itm4yiDNsGVMnZ+CP0731JJXWplFMTBhzUPVysXmjrNbs6cuRe84zB3od?=
 =?us-ascii?q?q58PjxQwLv4o2PC7RJPNVr+hC2h7qDNuGKiCZ4LzZYyo0DxXvSxLcD214Sjjlk?=
 =?us-ascii?q?dyOxHrQYqS7NUKXQl7dXDxEFaiNzN8hI76Mm0glOI87bjdz12aBijv4oEFdITl?=
 =?us-ascii?q?jhmsCvZcwXLGCxLlLHBECXNLuYIT3H2d34YaS5SbdIluVbqwWwuSqHE0/kJjmM?=
 =?us-ascii?q?jSTpWAu1Me5SjCCXJhheuICmfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42J5LemFniaV9fXXJowKvvtrHCt0kflX4HA7y7tT?=
 =?us-ascii?q?8SFFS+Z5mCrUrt5yvV6mlvODxSZgUBpLsjxLnp6EvV1+OaXF8ZlNQXbF8wgL7W?=
 =?us-ascii?q?WVChQKocNqC9zvu69KzNjPm7n+KDND89LS4MsdCNLYKMOBMHo9LxXpHCTYAxcC?=
 =?us-ascii?q?TT6uZinjgBl7kfqV8nSO5qMzp57+0LgTTr5WUlo4XqccEU1oGs4APZN2UzUinJ?=
 =?us-ascii?q?aAkdUFo3az+l2ZZMhcpJHEHsiDDf/iMjnR2aNVaxEF27zQJ4UPM4Tn2wplcFYs?=
 =?us-ascii?q?z6rQHE+FZsxArCRnJjA9oF9A9jAqVXE+1UvjLByk4GUeE9a1xAU7zAB5ZLJ+p3?=
 =?us-ascii?q?/X/14rKw+S92MLm04rlICg0Wic?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAAClwQ5ch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N6lCmCDRSXPRSBYikTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjY?=
 =?us-ascii?q?kgmMBAgIBAQIgBFIFAQkBAQQGGgImAgIDVAYBEgUMgxCBeggEAaY7fDOKJ4ELi?=
 =?us-ascii?q?xaBVz+BEAGDEoRGgz+CVwKJL4F6hBRGgQiPagcCgiEEjyoYgVyFF4J+h0yJIpF?=
 =?us-ascii?q?Ugg4zGiODPIInF44ePgEygQUBAYwYAQE?=
X-IPAS-Result: =?us-ascii?q?A0AbAAClwQ5ch0O0hNFkHgEGBwaBUQkLAYNrJ4N6lCmCDRS?=
 =?us-ascii?q?XPRSBYikTAYdtIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkgmMBAgIBAQIgB?=
 =?us-ascii?q?FIFAQkBAQQGGgImAgIDVAYBEgUMgxCBeggEAaY7fDOKJ4ELixaBVz+BEAGDEoR?=
 =?us-ascii?q?Ggz+CVwKJL4F6hBRGgQiPagcCgiEEjyoYgVyFF4J+h0yJIpFUgg4zGiODPIInF?=
 =?us-ascii?q?44ePgEygQUBAYwYAQE?=
X-IronPort-AV: E=Sophos;i="5.56,339,1539673200"; 
   d="scan'208";a="43480234"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 11:46:20 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729567AbeLJTqP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 14:46:15 -0500
Received: from mout.kundenserver.de ([212.227.17.24]:43401 "EHLO
        mout.kundenserver.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728391AbeLJTqP (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 14:46:15 -0500
Received: from oxbaltgw08.schlund.de ([172.19.246.14]) by
 mrelayeu.kundenserver.de (mreue107 [213.165.67.113]) with ESMTPSA (Nemesis)
 id 1MTRhS-1gtWGA1yMm-00ThNw; Mon, 10 Dec 2018 20:45:34 +0100
Date: Mon, 10 Dec 2018 20:45:32 +0100 (CET)
From: Stefan Wahren <stefan.wahren@i2se.com>
To: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>,
        Henrik Rydberg <rydberg@bitmath.org>
Cc: linux-rpi-kernel@lists.infradead.org, eric@anholt.net,
        agraf@suse.de, Dmitry Torokhov <dmitry.torokhov@gmail.com>,
        Eugen Hristev <eugen.hristev@microchip.com>,
        Rob Herring <robh@kernel.org>,
        Mark Jonas <mark.jonas@de.bosch.com>,
        Zhu Yi <yi.zhu5@cn.bosch.com>,
        Hans de Goede <hdegoede@redhat.com>,
        Masanari Iida <standby24x7@gmail.com>,
        Corentin Labbe <clabbe.montjoie@gmail.com>,
        Hans-Christian Noren Egtvedt <egtvedt@samfundet.no>,
        linux-kernel@vger.kernel.org, linux-input@vger.kernel.org
Message-ID: <1256320280.98880.1544471132287@email.ionos.de>
In-Reply-To: <20181210163036.24813-2-nsaenzjulienne@suse.de>
References: <20181210163036.24813-1-nsaenzjulienne@suse.de>
 <20181210163036.24813-2-nsaenzjulienne@suse.de>
Subject: Re: [PATCH 1/2] input: add official Raspberry Pi's touchscreen
 driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
X-Priority: 3
Importance: Medium
X-Mailer: Open-Xchange Mailer v7.8.4-Rev47
X-Originating-Client: open-xchange-appsuite
X-Provags-ID: V03:K1:3Od14Dd+RMww3ggFjI3tx8LBwZ900BD6gdTTSNdjBRf4cXx29Ms
 Otnlz9TMBuIboon0WFTYh14k/3qUHsO+Zv40EKpC2bxpTQe7utCuU7wD/0mYnXnj2gGDflY
 2NCvCNdv2Otksp9KlHggDDoSOsQJJe6Tbf3Fxf/MZyQ9WCYsSFqNW7kbxqWRVi08/cw6JGB
 Rg9+lsYS1aIiD1CF2aLOg==
X-Spam-Flag: NO
X-UI-Out-Filterresults: notjunk:1;V03:K0:q8dZPJxaASY=:nbUPlogc6rjG0/4EV7Nl+E
 G1JV/3/hNTw0QL0Sg6tv7reAXd0pM5jNWG5Tp1oe/H1jki+XQwkgzf6pUYppCWkp0O3RnxfxM
 CNoeGD1I6SywaLBBx7uFJj2dJx/H33rJTtnr7pQ+NIah6OZ8Iu4BHoZ/7hxgD/rHUt7mmMylA
 8/e19seu8Qk75qwSC1+8L9eN3XKUIlrBBLIrY9jn7xXCGNiYt89zYrzS2No7wxa/SBHjeY6Fz
 gUvA5wOmLVQii63X7xIJ3Jw/zv6GVao026dKfqvmqacnmdaZUjRyBKA6ugOokAdtaqFm9a2id
 HlxmbiWCpPQqvcNVY4TUSnJbng3jSgayDM6cIjfZT3shEzs6ZnqUxrW+dBih0+jINcsk807Zc
 zGDtdDotQzcNNdXLbpChHdFPnN/bNAVkHBaQypP/VlMy9xqhZeThWhZgCQKXWmSQ6BJRf6zlo
 xaYzq+Mjf52UNmTvR0me7F3xAnf7O9QRYIUqqigCdGZzeI8NsZy743vZ4Rx1Ry0U0Ml9VC3ui
 sC9eBxmmBeGN5qWr4QkPqxfA5u4ojoC+sEnS2/Q9lJudNIzNBb/jQxATxmlSKhRcXR/QBQGRc
 m9OvKhF+6nGlEBHCB77mdkHHS8R3T4Od16DE4R0UHDBqujLhp/fvTOr/QX2p0plq/ATw1DWBf
 PKoQCHr7JCkLnFRuTdB0wt7SDuU1pgwErZ2kFmgjOnIJoC+0vmPCY5ZRGGg4BDTKAO/pHOLRH
 Bvqdl0ibt7wJmpO6Q8d4UM1RZHUX2LaioUvDZjUPO0h06+xBBugp6NRcQEc=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Nicolas,

> Nicolas Saenz Julienne <nsaenzjulienne@suse.de> hat am 10. Dezember 2018 um 17:30 geschrieben:
> 
> 
> Add's support to Raspberry Pi's 7" Touch device. Instead of using a
> conventional bus all information is copied into a memory mapped area by
> RPi's firmware.
> 
> Based on the driver found in RPi's kernel repository.
> 
> Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
> ---
>  drivers/input/touchscreen/Kconfig          |  12 ++
>  drivers/input/touchscreen/Makefile         |   1 +
>  drivers/input/touchscreen/raspberrypi-ts.c | 223 +++++++++++++++++++++
>  3 files changed, 236 insertions(+)
>  create mode 100644 drivers/input/touchscreen/raspberrypi-ts.c
> 
> diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
> index 2a80675cfd94..a9be434de738 100644
> --- a/drivers/input/touchscreen/Kconfig
> +++ b/drivers/input/touchscreen/Kconfig
> @@ -696,6 +696,18 @@ config TOUCHSCREEN_EDT_FT5X06
>  	  To compile this driver as a module, choose M here: the
>  	  module will be called edt-ft5x06.
>  
> +config TOUCHSCREEN_RASPBERRYPI_TS

I assume TS stands for TOUCHSCREEN, so we can use just TOUCHSCREEN_RASPBERRYPI or TOUCHSCREEN_RASPBERRYPI_FW

> +	tristate "Raspberry Pi's firmware base touch screen support"
> +	depends on RASPBERRYPI_FIRMWARE || COMPILE_TEST
> +	help
> +	  Say Y here if you have the offitial Raspberry Pi 7' scren on your

s/offitial/official/

s/7'/7 inch/

s/scren/screen/

> +	  system.
> +
> +	  If unsure, say N.
> +
> +	  To compile this driver as a module, choose M here: the
> +	  module will be called raspberrypi-ts.
> +
>  config TOUCHSCREEN_MIGOR
>  	tristate "Renesas MIGO-R touchscreen"
>  	depends on (SH_MIGOR || COMPILE_TEST) && I2C
> diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
> index 5911a4190cd2..3eccb1925e89 100644
> --- a/drivers/input/touchscreen/Makefile
> +++ b/drivers/input/touchscreen/Makefile
> @@ -109,3 +109,4 @@ obj-$(CONFIG_TOUCHSCREEN_ZET6223)	+= zet6223.o
>  obj-$(CONFIG_TOUCHSCREEN_ZFORCE)	+= zforce_ts.o
>  obj-$(CONFIG_TOUCHSCREEN_COLIBRI_VF50)	+= colibri-vf50-ts.o
>  obj-$(CONFIG_TOUCHSCREEN_ROHM_BU21023)	+= rohm_bu21023.o
> +obj-$(CONFIG_TOUCHSCREEN_RASPBERRYPI_TS)	+= raspberrypi-ts.o
> diff --git a/drivers/input/touchscreen/raspberrypi-ts.c b/drivers/input/touchscreen/raspberrypi-ts.c
> new file mode 100644
> index 000000000000..edc92018687e
> --- /dev/null
> +++ b/drivers/input/touchscreen/raspberrypi-ts.c
> @@ -0,0 +1,223 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Raspberry Pi 3 firmware based touchscreen driver

AFAIK this driver isn't specific to a Raspberry Pi version, so we can drop the 3

> + *
> + * Copyright (C) 2015, 2017 Raspberry Pi
> + * Copyright (C) 2018 Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
> + */
> +
> +#include <linux/io.h>
> +#include <linux/slab.h>
> +#include <linux/module.h>
> +#include <linux/bitops.h>
> +#include <linux/dma-mapping.h>
> +#include <linux/platform_device.h>

I'm missing linux/of.h and linux/device.h here.

> +#include <linux/input.h>
> +#include <linux/input/mt.h>
> +#include <linux/input-polldev.h>
> +#include <linux/input/touchscreen.h>
> +#include <soc/bcm2835/raspberrypi-firmware.h>
> +
> +#define RPI_TS_DEFAULT_WIDTH	800
> +#define RPI_TS_DEFAULT_HEIGHT	480
> +
> +#define RPI_TS_MAX_SUPPORTED_POINTS	10
> +
> +#define RPI_TS_FTS_TOUCH_DOWN		0
> +#define RPI_TS_FTS_TOUCH_CONTACT	2
> +
> +#define RPI_TS_POLL_INTERVAL		17	/* 60fps */
> +
> +struct rpi_ts {
> +	struct platform_device *pdev;
> +	struct input_polled_dev *poll_dev;
> +	struct touchscreen_properties prop;
> +
> +	void __iomem *fw_regs_va;
> +	dma_addr_t fw_regs_phys;
> +
> +	int known_ids;
> +};
> +
> +struct rpi_ts_regs {
> +	u8 device_mode;
> +	u8 gesture_id;
> +	u8 num_points;
> +	struct rpi_ts_touch {
> +		u8 xh;
> +		u8 xl;
> +		u8 yh;
> +		u8 yl;
> +		u8 pressure; /* Not supported */
> +		u8 area;     /* Not supported */
> +	} point[RPI_TS_MAX_SUPPORTED_POINTS];
> +};
> +
> +/*
> + * We poll the memory based register copy of the touchscreen chip using the
> + * number of points register to know whether the copy has been updated (we
> + * write 99 to the memory copy, the GPU will write between 0 - 10 points)
> + */

I suggest to move this comment below to the memcpy_fromio.

> +static void rpi_ts_poll(struct input_polled_dev *dev)
> +{
> +	struct input_dev *input = dev->input;
> +	struct rpi_ts *ts = dev->private;
> +	struct rpi_ts_regs regs;
> +	int modified_ids = 0;
> +	long released_ids;
> +	int event_type;
> +	int touchid;
> +	int x, y;
> +	int i;
> +
> +	memcpy_fromio(&regs, ts->fw_regs_va, sizeof(regs));
> +	iowrite8(99, ts->fw_regs_va + offsetof(struct rpi_ts_regs, num_points));

I don't have a good name suggestion, but i think the magic 99 should be a define.

> +
> +	if (regs.num_points == 99 ||
> +	    (regs.num_points == 0 && ts->known_ids == 0))
> +	    return;
> +
> +	for (i = 0; i < regs.num_points; i++) {
> +		x = (((int)regs.point[i].xh & 0xf) << 8) + regs.point[i].xl;
> +		y = (((int)regs.point[i].yh & 0xf) << 8) + regs.point[i].yl;
> +		touchid = (regs.point[i].yh >> 4) & 0xf;
> +		event_type = (regs.point[i].xh >> 6) & 0x03;
> +
> +		modified_ids |= BIT(touchid);
> +
> +		if (event_type == RPI_TS_FTS_TOUCH_DOWN ||
> +		    event_type == RPI_TS_FTS_TOUCH_CONTACT) {
> +			input_mt_slot(input, touchid);
> +			input_mt_report_slot_state(input, MT_TOOL_FINGER, 1);
> +			touchscreen_report_pos(input, &ts->prop, x, y, true);
> +		}
> +	}
> +
> +	released_ids = ts->known_ids & ~modified_ids;
> +	for_each_set_bit(i, &released_ids, RPI_TS_MAX_SUPPORTED_POINTS) {
> +		input_mt_slot(input, i);
> +		input_mt_report_slot_state(input, MT_TOOL_FINGER, 0);
> +		modified_ids &= ~(BIT(i));
> +	}
> +	ts->known_ids = modified_ids;
> +
> +	input_mt_sync_frame(input);
> +	input_sync(input);
> +}
> +
> +static void rpi_ts_dma_cleanup(void *data)
> +{
> +	struct rpi_ts *ts = data;
> +	struct device *dev = &ts->pdev->dev;
> +
> +	if(ts->fw_regs_va)
> +		dma_free_coherent(dev, PAGE_SIZE, ts->fw_regs_va,
> +				  ts->fw_regs_phys);
> +}
> +
> +static int rpi_ts_probe(struct platform_device *pdev)
> +{
> +	struct device *dev = &pdev->dev;
> +	struct device_node *np = dev->of_node;
> +	struct input_polled_dev *poll_dev;
> +	struct device_node *fw_node;
> +	struct rpi_firmware *fw;
> +	struct input_dev *input;
> +	struct rpi_ts *ts;
> +	u32 touchbuf;
> +	int ret;
> +
> +	fw_node = of_get_parent(np);
> +	if (!fw_node) {
> +		dev_err(dev, "Missing firmware node\n");
> +		return -ENOENT;
> +	}
> +
> +	fw = rpi_firmware_get(fw_node);
> +	of_node_put(fw_node);
> +	if (!fw)
> +		return -EPROBE_DEFER;
> +
> +	ts = devm_kzalloc(dev, sizeof(*ts), GFP_KERNEL);
> +	if (!ts) {
> +		dev_err(dev, "Failed to allocate memory\n");

AFAIK devm_kzalloc already prints an error

> +		return -ENOMEM;
> +	}
> +	ts->pdev = pdev;
> +
> +	ret = devm_add_action_or_reset(dev, rpi_ts_dma_cleanup, ts);
> +	if (ret)
> +		return ret;
> +
> +	ts->fw_regs_va = dma_zalloc_coherent(dev, PAGE_SIZE, &ts->fw_regs_phys,
> +					     GFP_KERNEL);
> +	if (!ts->fw_regs_va) {
> +		dev_err(dev, "failed to dma_alloc_coherent\n");
> +		return -ENOMEM;
> +	}
> +
> +	touchbuf = (u32)ts->fw_regs_phys;
> +	ret = rpi_firmware_property(fw, RPI_FIRMWARE_FRAMEBUFFER_SET_TOUCHBUF,
> +				    &touchbuf, sizeof(touchbuf));
> +
> +	if (ret || touchbuf != 0) {
> +		dev_warn(dev, "Failed to set touchbuf, trying to get err:%x\n",

ret is an integer so %d

> +			 ret);
> +		return ret;
> +	}
> +
> +	poll_dev = devm_input_allocate_polled_device(dev);
> +	if (!poll_dev) {
> +		dev_err(dev, "Failed to allocate input device\n");
> +		return -ENOMEM;
> +	}
> +	ts->poll_dev = poll_dev;
> +	input = poll_dev->input;
> +
> +	input->name = "raspberrypi-ts";
> +	input->id.bustype = BUS_HOST;
> +	poll_dev->poll_interval = RPI_TS_POLL_INTERVAL;
> +	poll_dev->poll = rpi_ts_poll;
> +	poll_dev->private = ts;
> +
> +	__set_bit(EV_SYN, input->evbit);
> +	__set_bit(EV_KEY, input->evbit);
> +	__set_bit(EV_ABS, input->evbit);
> +
> +	input_set_abs_params(input, ABS_MT_POSITION_X, 0,
> +			     RPI_TS_DEFAULT_WIDTH, 0, 0);
> +	input_set_abs_params(input, ABS_MT_POSITION_Y, 0,
> +			     RPI_TS_DEFAULT_HEIGHT, 0, 0);
> +	touchscreen_parse_properties(input, true, &ts->prop);
> +
> +	input_mt_init_slots(input, RPI_TS_MAX_SUPPORTED_POINTS,
> +			    INPUT_MT_DIRECT | INPUT_MT_POINTER);
> +
> +	ret = input_register_polled_device(poll_dev);
> +	if (ret) {
> +		dev_err(dev, "could not register input device, %d\n", ret);
> +		return ret;
> +	}
> +
> +	return 0;
> +}
> +
> +static const struct of_device_id rpi_ts_match[] = {
> +	{ .compatible = "raspberrypi,firmware-ts", },
> +	{},
> +};
> +MODULE_DEVICE_TABLE(of, rpi_ts_match);
> +
> +static struct platform_driver rpi_ts_driver = {
> +	.driver = {
> +		.name   = "raspberrypi-ts",
> +		.of_match_table = rpi_ts_match,
> +	},
> +	.probe          = rpi_ts_probe,
> +};
> +module_platform_driver(rpi_ts_driver);
> +
> +MODULE_AUTHOR("Gordon Hollingworth");
> +MODULE_AUTHOR("Nicolas Saenz Julienne <nsaenzjulienne@suse.de>");
> +MODULE_DESCRIPTION("Raspberry Pi 3 firmware based touchscreen driver");

Please also drop the 3 here

> +MODULE_LICENSE("GPL v2");
> -- 
> 2.19.2
>
