Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  13 Dec 2018 21:24:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A386A58061F
	for <like.xu@linux.intel.com>; Thu, 13 Dec 2018 05:12:33 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 13 Dec 2018 05:12:33 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AVPvzNxD9r9MqXFJeniNtUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX9oMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDIy+?=
 =?us-ascii?q?YYsPCO0PMulEoIfypFUAsAO+CAuuCu7g1zNFiGP60rMh0+k6DQHL3hYtE84UvX?=
 =?us-ascii?q?jIstn4MroZX+CvzKnPyDXOd/FY1i356IjJdhAqvOuCUqhrccrQ1UYkCgTIjk2K?=
 =?us-ascii?q?poz+PjOayv8As2ya7+pmSOKuhHQrqwBqrTiq3Msjlo7JhocMx13C6C53w541KM?=
 =?us-ascii?q?WmREJnYtOoCoZcuzyZOodsXM8vTWFltDwnxrAEoZK2eDIGxIknyhLBcfCKd4uF?=
 =?us-ascii?q?7gj+WOueLzp1gm9udqiliBao60egz/XxVsmq31ZOqSpIit3MtnEW1xzP8ciLUP?=
 =?us-ascii?q?R9/kG82TqV0ADT8O5ELVg1lardNZEh3qY9moQPvUnABCP6hVj6gayMekk69OWl?=
 =?us-ascii?q?6/7rbqjkq5OEMo97kAD+MqAgmsylBuQ4NxADX3GF9uS5yb3v5FD2T6tUjvIolq?=
 =?us-ascii?q?nVqYvVJcMGpq6/HwBazJ0j5xG7Dzen09QXg2MLLV1YeB+fi4jpOlfOIO33DPul?=
 =?us-ascii?q?glSslitryO7CPrH7HprNKX3DnaznfbZ67U5cxwwzzc1F65JTELEBL+r/WlXtu9?=
 =?us-ascii?q?zAEh85Lwu0zv7jCNV81YMRR3iDA6CEMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqypjtMqbmulFKFmP1mBeiirxdMACnsR+Aw5SuPslRuFSzEUYn+zW6?=
 =?us-ascii?q?c14HY8EJ6nCoHYAZmghaHE0CqlE5kFW2ZdF1rZFH7pc5mDCe4BbT/XLsJ/nzhB?=
 =?us-ascii?q?T7W4VoI6yTmoswn1zachKfDbrTYFv5Du38Qg+uvIiBsp/iZ1BcnO72bYbm5zhC?=
 =?us-ascii?q?stTjoz0ax4vwQpy1KK1K11j/twD9Ff5/pVFAw9MMiP4fZ9DoXSUwbAep+xQU2n?=
 =?us-ascii?q?SZ3yGTgqT9kZx94IflY7Gt+nyBvE2nz5UPcui7WXCclsoern1H/rKpM4ki6e2Q?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A/AAD9WRJcmBHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwEBgS+CYox0jUCXVBSBXxIBARgUh0QiNQgNAQMBAQEBAQECARMBAQEBAQg?=
 =?us-ascii?q?LCwYbDi9CARABgWIFAgMaAQaCWwEBAQECAQECDxUTDAopAwIBAQIGAQEKDgoJH?=
 =?us-ascii?q?QgDAQtIBgoJBR2Cf4F5CAECAQGcLIlYAQEBgWozijCMPBeBf4ERgmQuhEofhXM?=
 =?us-ascii?q?Cj0dHhWCLIQmRTiMKAoFQiEaBJ4YBgwSWHgIEBgUCEwGBRwGCDDMaCBsVO4Jsg?=
 =?us-ascii?q?icXEo4McYEHIYE0iCZWgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A/AAD9WRJcmBHrdtBjHQEBBQEHBQGBUgcBCwEBgS+CYox?=
 =?us-ascii?q?0jUCXVBSBXxIBARgUh0QiNQgNAQMBAQEBAQECARMBAQEBAQgLCwYbDi9CARABg?=
 =?us-ascii?q?WIFAgMaAQaCWwEBAQECAQECDxUTDAopAwIBAQIGAQEKDgoJHQgDAQtIBgoJBR2?=
 =?us-ascii?q?Cf4F5CAECAQGcLIlYAQEBgWozijCMPBeBf4ERgmQuhEofhXMCj0dHhWCLIQmRT?=
 =?us-ascii?q?iMKAoFQiEaBJ4YBgwSWHgIEBgUCEwGBRwGCDDMaCBsVO4JsgicXEo4McYEHIYE?=
 =?us-ascii?q?0iCZWgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,349,1539673200"; 
   d="scan'208";a="56748239"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 13 Dec 2018 05:12:32 -0800
Received: from localhost ([::1]:52425 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gXQn1-0004z4-PY
	for like.xu@linux.intel.com; Thu, 13 Dec 2018 08:12:31 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:56226)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pasic@linux.ibm.com>) id 1gXQes-0005N6-7k
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 08:04:10 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pasic@linux.ibm.com>) id 1gXQel-0001H6-Ma
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 08:04:06 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:34008
	helo=mx0a-001b2d01.pphosted.com)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pasic@linux.ibm.com>) id 1gXQel-0001DZ-Ei
	for qemu-devel@nongnu.org; Thu, 13 Dec 2018 08:03:59 -0500
Received: from pps.filterd (m0098414.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id
	wBDCxJJJ044660
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 08:03:50 -0500
Received: from e06smtp03.uk.ibm.com (e06smtp03.uk.ibm.com [195.75.94.99])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2pbqb29ydn-1
	(version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
	for <qemu-devel@nongnu.org>; Thu, 13 Dec 2018 08:03:49 -0500
Received: from localhost
	by e06smtp03.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for <qemu-devel@nongnu.org> from <pasic@linux.ibm.com>;
	Thu, 13 Dec 2018 13:03:48 -0000
Received: from b06cxnps4075.portsmouth.uk.ibm.com (9.149.109.197)
	by e06smtp03.uk.ibm.com (192.168.101.133) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	(version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
	Thu, 13 Dec 2018 13:03:44 -0000
Received: from d06av25.portsmouth.uk.ibm.com (d06av25.portsmouth.uk.ibm.com
	[9.149.105.61])
	by b06cxnps4075.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id wBDD3hHZ2032090
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Thu, 13 Dec 2018 13:03:43 GMT
Received: from d06av25.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 4970011C054;
	Thu, 13 Dec 2018 13:03:43 +0000 (GMT)
Received: from d06av25.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 09C8E11C04A;
	Thu, 13 Dec 2018 13:03:43 +0000 (GMT)
Received: from oc2783563651 (unknown [9.152.98.143])
	by d06av25.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Thu, 13 Dec 2018 13:03:42 +0000 (GMT)
Date: Thu, 13 Dec 2018 14:03:41 +0100
From: Halil Pasic <pasic@linux.ibm.com>
To: Igor Mammedov <imammedo@redhat.com>
In-Reply-To: <20181213130959.4c863705@redhat.com>
References: <1544469254-11629-1-git-send-email-akrowiak@linux.ibm.com>
	<20181211162303.2e581899@redhat.com>
	<ee5f36b2-e0a0-cdee-ad9a-dbeb36f1583c@linux.ibm.com>
	<20181213130959.4c863705@redhat.com>
Organization: IBM
X-Mailer: Claws Mail 3.11.1 (GTK+ 2.24.31; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-TM-AS-GCONF: 00
x-cbid: 18121313-0012-0000-0000-000002D883F7
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121313-0013-0000-0000-0000210E0AB2
Message-Id: <20181213140341.2b81386d@oc2783563651>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:, ,
	definitions=2018-12-13_03:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	priorityscore=1501
	malwarescore=0 suspectscore=2 phishscore=0 bulkscore=0 spamscore=0
	clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
	mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
	scancount=1 engine=8.0.1-1810050000 definitions=main-1812130115
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [generic] [fuzzy]
X-Received-From: 148.163.158.5
Subject: Re: [Qemu-devel] [PATCH] qdev/core: Can not replug device on bus
 that allows one device
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Tony Krowiak <akrowiak@linux.ibm.com>, thuth@redhat.com,
	qemu-devel@nongnu.org, armbru@redhat.com, borntraeger@de.ibm.com,
	pbonzini@redhat.com, f4bug@amsat.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 13 Dec 2018 13:09:59 +0100
Igor Mammedov <imammedo@redhat.com> wrote:

> On Tue, 11 Dec 2018 14:41:00 -0500
> Tony Krowiak <akrowiak@linux.ibm.com> wrote:
> 
> > On 12/11/18 10:23 AM, Igor Mammedov wrote:
> > > On Mon, 10 Dec 2018 14:14:14 -0500
> > > Tony Krowiak <akrowiak@linux.ibm.com> wrote:
> > >   
> > >> If the maximum number of devices allowed on a bus is 1 and a device
> > >> which is plugged into the bus is subsequently unplugged, attempting to replug
> > >> the device fails with error "Bus 'xxx' does not support hotplugging".
> > >> The "error" is detected in the qbus_is_full(BusState *bus) function
> > >> (qdev_monitor.c) because bus->max_index >= bus_class->max_dev. The
> > >> root of the problem is that the bus->max_index is not decremented when a device
> > >> is unplugged from the bus. This patch fixes that problem.
> > >>
> > >> Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
> > >> ---
> > >>   hw/core/qdev.c | 2 ++
> > >>   1 file changed, 2 insertions(+)
> > >>
> > >> diff --git a/hw/core/qdev.c b/hw/core/qdev.c
> > >> index 6b3cc55b27c2..b35b0bf27925 100644
> > >> --- a/hw/core/qdev.c
> > >> +++ b/hw/core/qdev.c
> > >> @@ -59,6 +59,8 @@ static void bus_remove_child(BusState *bus, DeviceState *child)
> > >>               snprintf(name, sizeof(name), "child[%d]", kid->index);
> > >>               QTAILQ_REMOVE(&bus->children, kid, sibling);
> > >>   
> > >> +            bus->max_index--;  
> > > that might cause problem when bus is allowed to has more than 1 device
> > > and unplugged device is not the last one.
> > > In that case bus_add_child() might create a child with duplicate name.  
> > 
> > I see what you are saying. The max_index is assigned to the child device
> > index in the bus_add_child() function. The child device index is used to
> > generate a unique name for the child device. The generated name is then
> > used to link the child as a property to the bus. When the child is
> > removed from the bus, the name is regenerated from the child device
> > index and the named property is . It would therefore appear that the
> > real purpose of the max_index is to generate indexes for children of
> > the bus thus ensuring each child has a unique index. In other words,
> > the max_index value is only tangentially connected to indexing the list
> > of children.
> > 
> > This results in a disconnect between the usage of the max_index value
> > when adding and removing a child from the bus, and the check in the
> > qbus_is_full() function which compares the max_index to the maximum
> > number of devices allowed on the bus. If a child has been removed from
> > the bus, the max_index value does not indicate whether the bus is
> > full, it only specifies the index to be assigned to the next child to be
> > added to the bus.
> > 
> > To resolve this problem, I propose the following:
> > 
> > Add the following field to struct BusState (include/hw/qdev_core.h):
> > 
> > struct BusState {
> >      Object obj;
> >      DeviceState *parent;
> >      char *name;
> >      HotplugHandler *hotplug_handler;
> >      int max_index;
> >      bool realized;
> > +    int num_children;
> >      QTAILQ_HEAD(ChildrenHead, BusChild) children;
> >      QLIST_ENTRY(BusState) sibling;
> > };
> > 
> > Add the following lines of code to the add/remove child functions in
> > hw/core/qdev.c:
> > 
> > static void bus_add_child(BusState *bus, DeviceState *child)
> > {
> >      char name[32];
> >      BusChild *kid = g_malloc0(sizeof(*kid));
> > 
> >      kid->index = bus->max_index++;
> >      kid->child = child;
> >      object_ref(OBJECT(kid->child));
> > 
> >      QTAILQ_INSERT_HEAD(&bus->children, kid, sibling);
> > 
> >      /* This transfers ownership of kid->child to the property.  */
> >      snprintf(name, sizeof(name), "child[%d]", kid->index);
> >      object_property_add_link(OBJECT(bus), name,
> >                               object_get_typename(OBJECT(child)),
> >                               (Object **)&kid->child,
> >                               NULL, /* read-only property */
> >                               0, /* return ownership on prop deletion */
> >                               NULL);
> > 
> > +    bus->num_children++;
> > }
> > 
> > static void bus_remove_child(BusState *bus, DeviceState *child)
> > {
> >      BusChild *kid;
> > 
> >      QTAILQ_FOREACH(kid, &bus->children, sibling) {
> >          if (kid->child == child) {
> >              char name[32];
> > 
> >              snprintf(name, sizeof(name), "child[%d]", kid->index);
> >              QTAILQ_REMOVE(&bus->children, kid, sibling);
> > 
> >              /* This gives back ownership of kid->child back to us.  */
> >              object_property_del(OBJECT(bus), name, NULL);
> >              object_unref(OBJECT(kid->child));
> >              g_free(kid);
> > 
> > +           bus->num_children--;
> > 
> >              return;
> >          }
> >      }
> > }
> > 
> > Change the line of code in the qbus_is_full() function in
> > qdev_monitor.c:
> > 
> > 
> > static inline bool qbus_is_full(BusState *bus)
> > {
> >      BusClass *bus_class = BUS_GET_CLASS(bus);
> > -    return bus_class->max_dev &&
> > -           bus->max_index >= bus_class->max_dev;
> > +    return bus_class->max_dev &&
> > +           bus->num_children >= bus_class->max_dev;
> > }
> > 
> 
> looks good to me
> [...]
> 

I agree, the second proposal looks reasonable. Can you send a proper
patch so I can r-b it?

Halil


