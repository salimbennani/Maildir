Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:46:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D3D2758079D;
	Tue, 11 Dec 2018 04:50:26 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 11 Dec 2018 04:50:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AD4hxIhwN4wRkG8fXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8XKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSxdDI2y?=
 =?us-ascii?q?bIUPAOgPMuZZs4bzqFQBrQCmBQSuH+7v1iZIi2Xq0aEmyekhCgfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OrsVUeCw1qbIyyjIYfZM1jfy8ofIdA0qrPaWXbJza8XRxlMgFwXeg1WO?=
 =?us-ascii?q?qIzlJS+V1vkKs2ma7utgUvijhHIgqwF0uzWiwNonhIrRho8N1FzI6SF0zJwoKd?=
 =?us-ascii?q?C2VkJ3e8OoHZhMuy2ANoZ7QNsuT3xrtSs60LEKp5C2cDUQxJg5yBPTd+aLfoiQ?=
 =?us-ascii?q?7hLtSumcIit0iXdgdb2iiBu+7E2txfDgWsWpzlpHqzdJn93Du30C0hHe6suKRu?=
 =?us-ascii?q?Zh8kqnxD2BzRrc6vteLkAxjafbK4Auwro3lpcLr0TDETH5mF/sgK+VaEok4O6o?=
 =?us-ascii?q?5PrjYrn8oZ+cLYB0hhn/MqQohMO/Hfw1PhYSU2Wf4+iwybPu8VPjTLlXjfA6jr?=
 =?us-ascii?q?PVvZHYKMgDo662GQ5V0oIt6xalCDem1cwVnX0GLFJDZRKGgJHlO1LQL/DiC/ew?=
 =?us-ascii?q?nVCsnC5sx/HIOL3uHI/NI2PdkLfuY7l98VRQyAktwtBF4ZJbFLUBLOj0Wk/ru9?=
 =?us-ascii?q?zUFgU5PBCsw+b7FNV90ZsTWWaOAq+aLqzeq1CJ5v80LumIZY8Vviv9Kvc/6/7v?=
 =?us-ascii?q?i385hUESfa2z0ZQLb3C4G+xsI1+Fbnr0ntcBDWAKsxI+TOPwiV2CTSRcZ3GoU6?=
 =?us-ascii?q?I8+zE0EoSmDYjYS4CpgbyB2jq7H5JMamBHDFCMDWnnd4GeV/gQbyKSJ9drkiYY?=
 =?us-ascii?q?Wri5V48hyRauuRf4y7pgMOXY4C4YtZXl1Nhz4O3ejhUy9T1yD8SA3GCBVWB0nm?=
 =?us-ascii?q?UURzAo2KBzu1ByylCG0aJgmfxXCcRT5+9VUgc9LZPT1fd6C9D1WgLCZNuJUkyp?=
 =?us-ascii?q?Qte9DDE1T9IxxcIOYklnF9WjiBDDwzSlA7sPm7OXA5w097rW32LtKMZl13bGyK?=
 =?us-ascii?q?4hgkElQsRVM22qnKp/9wnJCI7PnEWUjKKqdaUa3C7Q+2aP12uOvEdEUAFuVaXJ?=
 =?us-ascii?q?R2wQZkzTrd7h/EPNU6euCag7MgtG0cONN7FFasP3gllcRPfsItLeY3mvlGe2Ah?=
 =?us-ascii?q?qIwrCMbI/ue2gG2CXdCU4Ekx0c/HqcNAg+ADuhrHzaDDB0CV3vZEbs+/FkqHyn?=
 =?us-ascii?q?Vk800x2Kb0p52rWo4BEVm+KTR+kT3r0evichsCt7HFCm0tLSCtqAoRdhfapGbd?=
 =?us-ascii?q?M85ldHyXzWtwhnMpO8KKBig0YUcx5rsEP2yxV3FoJAnNA2rHMryQpyLr6Y0FNB?=
 =?us-ascii?q?dj+CwZD8ILrXKnP2/BCuba7W1UrT0NKX+qcJ9fQ5pE/vvACvFko+7Xpn18NZ3G?=
 =?us-ascii?q?eb5pXPFAASS47+Ul4r9xhmoLHXejMy54fK2nxjL6a1siXO1Mk0BOQ40BmgedRf?=
 =?us-ascii?q?MKSaFALpF80aBs6uKPElmlSzbxIEOvxS+7AwP8+8a/SG36urNv56nD26lWRH/J?=
 =?us-ascii?q?x90kWU+it8V+7ExYoKz+uZ3wuHTTj8ilihv9vzmYBFYzESA2W+xTLlBI5Xeq19?=
 =?us-ascii?q?Y4ILBX2yLM2ww9V0n4TtVGJA9F6/G1MG39ekeQCTb1PhxwJQz1kYoXu9lSu+0T?=
 =?us-ascii?q?N0iTAporOD0yPUx+TtaQQIOnRMRGlkllrsJYm0j9YHXEmndQQplR2l5VrkyKhf?=
 =?us-ascii?q?vqhwM27TQUJQdSjsM25iSrewtqaFY8NX6JIosD9bUeSmbVCBV779pQAX0yfiH2?=
 =?us-ascii?q?tY2TA6eCumupT/nxxmlm2dKGx/o2beecF13R3f/sDTReZN3joaQyl1kTvXCUKm?=
 =?us-ascii?q?P9mq/tWUkI3PsvukWGKiVZ1TcC/rwp2GtCag4W1qABu/n+28m9H9EAg61zP72M?=
 =?us-ascii?q?duVSnSsBn8ZYzr3bygMe17ZkloGEP8681iF4B+iIQwg4sc2XobhpWT5ncHlWbz?=
 =?us-ascii?q?MdNG2aPxdnYNRDgLw8LL7wjhwkFsMnWJx4fhXHWH3sRhf8W6Yn8R2i8l7MBFEq?=
 =?us-ascii?q?aU4KZEnStouFW4qw3RbON5njccz/su9XEbj/sIuAor0iWSHLQSEVNEMizrkhSC?=
 =?us-ascii?q?98q+o7lPZGazbbiw01JzndWgDLGBuA5QQnj4dYk5HS9s8Mp/KknD32Pp6oHrY9?=
 =?us-ascii?q?TQadMTthuJkxbPleRVKZQxluYUiipjI27yoXoly+sjhxx0wZ66pJSHK3lq/K+h?=
 =?us-ascii?q?Hh5YMTj1a9kS+z73i6Zeg92W35uuHph6HjULXZ3oTe+nET4ItPTnMRqOHyM4qn?=
 =?us-ascii?q?uBBbXfGgqf4l98r33TC5CrK22XJH4BwNp5XhadI0hfgB0OUDU+g540DQSqxM3n?=
 =?us-ascii?q?cEdk6TEd/F/4qh1Qyu12MxnzSHvQpACtaj0sUpiQMAJW7h1e50fSKcGe7Ph8Hy?=
 =?us-ascii?q?RG8Z26tgCNNnaXZwdVDWEKR0yEAUrsPqK16NnE8uiYAPe+LvTUbbWPr+xeS+mH?=
 =?us-ascii?q?xZa13oR6+DaMM92FPmN+AP0jxkpDQXd5FtzZmjUIViwXjj/NYNSdpBum4S13qc?=
 =?us-ascii?q?a/8PvwVQLr5IuPDaZSMNp19xC3h6eDK/CfhCJjJTlE0ZMMwGfCyKID014KlyFu?=
 =?us-ascii?q?az6tHKwAtSHTTaLQmaxXDx8BZyNwLstI6K080RdXOc7GkdP4zbp4jv8zC1dYWl?=
 =?us-ascii?q?3tgMCpZcoWI26jMFPLHlqENLODJTfT2cH4fbu8SaFMjOVTrxC/oyubHFT5Pjud?=
 =?us-ascii?q?lzjlTRSvMeBXgSGfPRxevpy9cxl3BWjiStLmdgO0MNttgTIqxr00g2vANXQAPj?=
 =?us-ascii?q?hkb0NNsrqQ4DtEgvV+HmxN9GZqIfOYlCaZ8ebYLI0bsf9qAiRyiuJb7242y7pT?=
 =?us-ascii?q?7CFYWvN1nDHeocJpo1GjiuOP0CZoUAJSqjZXg4KGpUVjNr/f9plFWHbE+goC7G?=
 =?us-ascii?q?SQCxsQodtlBcbiu6RRytjJiaLyJy1O89PS/csAGcfULNiLP2YmMRrsS3boC147?=
 =?us-ascii?q?TCKiMXCXpFFPlvyO7XqL5swkqYX+npcSUZdBWVA1H+9cAUNgSo8sOpByCwkjlL?=
 =?us-ascii?q?edxO0B6nO45E3LR8xVt5bvSPOIHejoOiSey7JDYk1bkvvDMY0PO9ijiARZYV5g?=
 =?us-ascii?q?kdGPQhKIUA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAABRsQ9ch0O0hNFlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwEBgS9QgVwECycKhzgDkBVKgg0UaJFahHyBdhABGBM?=
 =?us-ascii?q?BhECDOSINKAgNAQMBAQEBAQECARMBAQEIDQkIKSMMQgEOAYFkJAGCYgECAwECJ?=
 =?us-ascii?q?BkBATcBBQkBAQEBCA4KCSUDDAUeFwEPBA4FBYMcggIBAgEBmhkCigeBbDOCdgE?=
 =?us-ascii?q?BBYcoCIweHReBQD+BEYJdNYUBgzWCJok9gXCKS4sFCZFGI5FALJYVgksCBAIEB?=
 =?us-ascii?q?QINAQEFgUgBggszGggbFTuCbIIbDBeDSopTcoEFAQEhgm2GNAGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAABRsQ9ch0O0hNFlGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwEBgS9QgVwECycKhzgDkBVKgg0UaJFahHyBdhABGBMBhECDOSINKAgNA?=
 =?us-ascii?q?QMBAQEBAQECARMBAQEIDQkIKSMMQgEOAYFkJAGCYgECAwECJBkBATcBBQkBAQE?=
 =?us-ascii?q?BCA4KCSUDDAUeFwEPBA4FBYMcggIBAgEBmhkCigeBbDOCdgEBBYcoCIweHReBQ?=
 =?us-ascii?q?D+BEYJdNYUBgzWCJok9gXCKS4sFCZFGI5FALJYVgksCBAIEBQINAQEFgUgBggs?=
 =?us-ascii?q?zGggbFTuCbIIbDBeDSopTcoEFAQEhgm2GNAGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="56974307"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 04:50:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726435AbeLKMuV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 07:50:21 -0500
Received: from mail-bgr052101130104.outbound.protection.outlook.com ([52.101.130.104]:16199
        "EHLO EUR01-VE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726190AbeLKMuV (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 07:50:21 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=yQtWqA/+zsX5HW0NdM7hFWUgkLCV+FF7bYCBj0A/n+g=;
 b=Yubzlu8InQMTsIZMayqGjcHwPR+ywvtpbqB6IeYEklAcCvIrn64Z8oUMmH2IX4IDpiLlfCrjCj7fnbxO0PEM8QwKU1bSDfP8mxReBnQAcKJZq00kiyVteyfAvbRVuIDEyOprb4AsD3MnMN1Vx70ruXazk8TxG/SC+bH/5q+0VO8=
Received: from DB8PR08MB4092.eurprd08.prod.outlook.com (20.179.10.210) by
 DB8PR08MB4124.eurprd08.prod.outlook.com (20.179.11.74) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1425.18; Tue, 11 Dec 2018 12:50:01 +0000
Received: from DB8PR08MB4092.eurprd08.prod.outlook.com
 ([fe80::d41:d012:1944:5810]) by DB8PR08MB4092.eurprd08.prod.outlook.com
 ([fe80::d41:d012:1944:5810%6]) with mapi id 15.20.1404.026; Tue, 11 Dec 2018
 12:50:01 +0000
From: Roman Kagan <rkagan@virtuozzo.com>
To: Vitaly Kuznetsov <vkuznets@redhat.com>
CC: "kvm@vger.kernel.org" <kvm@vger.kernel.org>,
        Paolo Bonzini <pbonzini@redhat.com>,
        =?iso-8859-2?Q?Radim_Kr=E8m=E1=F8?= <rkrcmar@redhat.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "K. Y. Srinivasan" <kys@microsoft.com>,
        Haiyang Zhang <haiyangz@microsoft.com>,
        Stephen Hemminger <sthemmin@microsoft.com>,
        "x86@kernel.org" <x86@kernel.org>,
        "Michael Kelley (EOSG)" <Michael.H.Kelley@microsoft.com>,
        Eduardo Habkost <ehabkost@redhat.com>
Subject: Re: [PATCH v2 4/7] x86/kvm/hyper-v: Introduce
 KVM_GET_SUPPORTED_HV_CPUID
Thread-Topic: [PATCH v2 4/7] x86/kvm/hyper-v: Introduce
 KVM_GET_SUPPORTED_HV_CPUID
Thread-Index: AQHUkKznsqV3L84bk0eamd/uIlqfEKV5frCA
Date: Tue, 11 Dec 2018 12:50:01 +0000
Message-ID: <20181211124956.GA2378@rkaganb.sw.ru>
References: <20181210172159.410-1-vkuznets@redhat.com>
 <20181210172159.410-5-vkuznets@redhat.com>
In-Reply-To: <20181210172159.410-5-vkuznets@redhat.com>
Accept-Language: en-US, ru-RU
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
user-agent: Mutt/1.10.1 (2018-07-13)
mail-followup-to: =?iso-8859-2?Q?Roman_Kagan_<rkagan@virtuozzo.com>,=09Vitaly_Kuznetsov_<vk?=
 =?iso-8859-2?Q?uznets@redhat.com>,_kvm@vger.kernel.org,=09Paolo_Bonzini_<?=
 =?iso-8859-2?Q?pbonzini@redhat.com>,=09Radim_Kr=E8m=E1=F8_<rkrcmar@redhat?=
 =?iso-8859-2?Q?.com>,=09linux-kernel@vger.kernel.org,=09"K._Y._Srinivasan?=
 =?iso-8859-2?Q?"_<kys@microsoft.com>,=09Haiyang_Zhang_<haiyangz@microsoft?=
 =?iso-8859-2?Q?.com>,=09Stephen_Hemminger_<sthemmin@microsoft.com>,_x86@k?=
 =?iso-8859-2?Q?ernel.org,=09"Michael_Kelley_(EOSG)"_<Michael.H.Kelley@mic?=
 =?iso-8859-2?Q?rosoft.com>,=09Eduardo_Habkost_<ehabkost@redhat.com>?=
x-originating-ip: [185.231.240.5]
x-clientproxiedby: HE1PR05CA0188.eurprd05.prod.outlook.com
 (2603:10a6:3:f9::12) To DB8PR08MB4092.eurprd08.prod.outlook.com
 (2603:10a6:10:ab::18)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=rkagan@virtuozzo.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;DB8PR08MB4124;7:Vy+i9YfUmFVP2hHrZLX9VYEKMxaE8zZEOBcWhY2m4DRXvQdCK1jPKCet0FBWa2blRnhdkWYEqiOBKNhQhY2r0WOlAuMJqWd0lVb2NOBdlV+TMMiO7mkPJ9J9METikqB4fGK0RFIHGEqREJ7EAKOytQ==;20:t8Gt83G4iXGR2/+YkU4bUpHnMC0xaUVsZpyM2WmDjDnF1weohdLK1psySV/3PeUZotAcm+3ve9vi3/ww4FJwddWSwF3fpgn1cmHewvpqoxisMc+rjQPcPovMkUx7HddjK9M7K4snttcTOYCnq1c8OXBGAgQjK9XQ/SYbNqtkPBs=
x-ms-office365-filtering-correlation-id: aa6ee229-74b7-41e7-863a-08d65f6729f1
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:DB8PR08MB4124;
x-ms-traffictypediagnostic: DB8PR08MB4124:|DB8PR08MB4124:
x-microsoft-antispam-prvs: <DB8PR08MB41241A17CCA150AAB03BDED5C9A60@DB8PR08MB4124.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(3230017)(999002)(6040522)(2401047)(5005006)(8121501046)(3002001)(10201501046)(3231472)(944501520)(52105112)(93006095)(93001095)(148016)(149066)(150057)(6041310)(20161123564045)(20161123562045)(20161123558120)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:DB8PR08MB4124;BCL:0;PCL:0;RULEID:;SRVR:DB8PR08MB4124;
x-forefront-prvs: 08831F51DC
x-forefront-antispam-report: SFV:SPM;SFS:(10019020)(979002)(39850400004)(136003)(346002)(376002)(396003)(366004)(199004)(189003)(54094003)(256004)(14444005)(6916009)(6486002)(86362001)(14454004)(575784001)(9686003)(6512007)(66066001)(33896004)(97736004)(99286004)(6436002)(316002)(58126008)(54906003)(71200400001)(71190400001)(4744004)(229853002)(486006)(478600001)(8936002)(81166006)(81156014)(8676002)(446003)(102836004)(36756003)(11346002)(186003)(6246003)(2906002)(106356001)(33656002)(26005)(476003)(25786009)(7416002)(53936002)(6506007)(6116002)(5660300001)(105586002)(1076002)(3846002)(386003)(68736007)(4326008)(7736002)(76176011)(305945005)(52116002)(30126002)(18370500001)(969003)(989001)(999001)(1009001)(1019001);DIR:OUT;SFP:1501;SCL:5;SRVR:DB8PR08MB4124;H:DB8PR08MB4092.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: NTdb9RjCYf/Hw+/bL1NAwIopRbFZt9hSvJyhsou9LWYVhRbXA6/Ids19LeqVfsXGO23LS/MS/oj1+ukheohR0HtDadafVq8vaDXR1DX8ElN/HV7fbUQ1312yYaptmHOuFOV0GE9NVNBz31wxdXPXBm2rtbsOoLWCwYXybuDKe8LplVpXHo679T7rfIkF0enJgOo0NKWEy2TuzDEY9ChroftVSHeQKIZ2pRs9pbjMiGWrcnoaWrHMWBI1pSIlblF5EPQrLGJeI75+yf3uJ5N05QuDgRKbqIZrm4MXpaF8nbmQ6T1+ktPUHyioPJCMCF7md7eJjOlxoNUSmlRtMa2NBN4dLXoBWdy6qInyBuzHT+kDAY31l8//26NtpACJ0y1+IMbPcEGDvHC6KLZ9nXXsAO21a6DN7rnpvqVAY++GgCrkKHRNOy8yyfRNOcED24IOXArSSy6l/pD90e89xKZ1H3HuBulbEjH8EktDLYKL4Pe2KzV2eQ7mrDlLVDodwzZm
spamdiagnosticoutput: 1:22
Content-Type: text/plain; charset="iso-8859-2"
Content-ID: <D7822E6C43F3EB4F9E6B3C5E0EA2C111@eurprd08.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-Network-Message-Id: aa6ee229-74b7-41e7-863a-08d65f6729f1
X-MS-Exchange-CrossTenant-originalarrivaltime: 11 Dec 2018 12:50:01.3881
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 0bc7f26d-0264-416e-a6fc-8352af79c58f
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB8PR08MB4124
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 10, 2018 at 06:21:56PM +0100, Vitaly Kuznetsov wrote:
> With every new Hyper-V Enlightenment we implement we're forced to add a
> KVM_CAP_HYPERV_* capability. While this approach works it is fairly
> inconvenient: the majority of the enlightenments we do have corresponding
> CPUID feature bit(s) and userspace has to know this anyways to be able to
> expose the feature to the guest.
>=20
> Add KVM_GET_SUPPORTED_HV_CPUID ioctl (backed by KVM_CAP_HYPERV_CPUID, "on=
e
> cap to rule them all!") returning all Hyper-V CPUID feature leaves.
>=20
> Using the existing KVM_GET_SUPPORTED_CPUID doesn't seem to be possible:
> Hyper-V CPUID feature leaves intersect with KVM's (e.g. 0x40000000,
> 0x40000001) and we would probably confuse userspace in case we decide to
> return these twice.
>=20
> KVM_CAP_HYPERV_CPUID's number is interim: we're intended to drop
> KVM_CAP_HYPERV_STIMER_DIRECT and use its number instead.
>=20
> Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
> Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
> ---
> Changes since v1:
> - Document KVM_GET_SUPPORTED_HV_CPUID and KVM_CAP_HYPERV_CPUID.
> - Fix error handling in kvm_vcpu_ioctl_get_hv_cpuid()
> ---
>  Documentation/virtual/kvm/api.txt |  57 ++++++++++++++
>  arch/x86/kvm/hyperv.c             | 121 ++++++++++++++++++++++++++++++
>  arch/x86/kvm/hyperv.h             |   2 +
>  arch/x86/kvm/x86.c                |  20 +++++
>  include/uapi/linux/kvm.h          |   4 +
>  5 files changed, 204 insertions(+)
>=20
> diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kv=
m/api.txt
> index cd209f7730af..5b72de0af24d 100644
> --- a/Documentation/virtual/kvm/api.txt
> +++ b/Documentation/virtual/kvm/api.txt
> @@ -3753,6 +3753,63 @@ Coalesced pio is based on coalesced mmio. There is=
 little difference
>  between coalesced mmio and pio except that coalesced pio records accesse=
s
>  to I/O ports.
> =20
> +4.117 KVM_GET_SUPPORTED_HV_CPUID
> +
> +Capability: KVM_CAP_HYPERV_CPUID
> +Architectures: x86
> +Type: vcpu ioctl
> +Parameters: struct kvm_cpuid2 (in/out)
> +Returns: 0 on success, -1 on error
> +
> +struct kvm_cpuid2 {
> +	__u32 nent;
> +	__u32 padding;
> +	struct kvm_cpuid_entry2 entries[0];
> +};
> +
> +struct kvm_cpuid_entry2 {
> +	__u32 function;
> +	__u32 index;
> +	__u32 flags;
> +	__u32 eax;
> +	__u32 ebx;
> +	__u32 ecx;
> +	__u32 edx;
> +	__u32 padding[3];
> +};
> +
> +This ioctl returns x86 cpuid features leaves related to Hyper-V emulatio=
n in
> +KVM.  Userspace can use the information returned by this ioctl to constr=
uct
> +cpuid information presented to guests consuming Hyper-V enlightenments (=
e.g.
> +Windows or Hyper-V guests).
> +
> +CPUID feature leaves returned by this ioctl are defined by Hyper-V Top L=
evel
> +Functional Specification (TLFS). These leaves can't be obtained with
> +KVM_GET_SUPPORTED_CPUID ioctl because some of them intersect with KVM fe=
ature
> +leaves (0x40000000, 0x40000001).
> +
> +Currently, the following list of CPUID leaves are returned:
> + HYPERV_CPUID_VENDOR_AND_MAX_FUNCTIONS
> + HYPERV_CPUID_INTERFACE
> + HYPERV_CPUID_VERSION
> + HYPERV_CPUID_FEATURES
> + HYPERV_CPUID_ENLIGHTMENT_INFO
> + HYPERV_CPUID_IMPLEMENT_LIMITS
> + HYPERV_CPUID_NESTED_FEATURES
> +
> +HYPERV_CPUID_NESTED_FEATURES leaf is only exposed when Enlightened VMCS =
was
> +enabled on the corresponding vCPU (KVM_CAP_HYPERV_ENLIGHTENED_VMCS).

IOW the output of ioctl(KVM_GET_SUPPORTED_HV_CPUID) depends on
whether ioctl(KVM_ENABLE_CAP, KVM_CAP_HYPERV_ENLIGHTENED_VMCS) has
already been called on that vcpu?  I wonder if this fits the intended
usage?

Roman.

> +
> +Userspace invokes KVM_GET_SUPPORTED_CPUID by passing a kvm_cpuid2 struct=
ure
> +with the 'nent' field indicating the number of entries in the variable-s=
ize
> +array 'entries'.  If the number of entries is too low to describe all Hy=
per-V
> +feature leaves, an error (E2BIG) is returned. If the number is more or e=
qual
> +to the number of Hyper-V feature leaves, the 'nent' field is adjusted to=
 the
> +number of valid entries in the 'entries' array, which is then filled.
> +
> +'index' and 'flags' fields in 'struct kvm_cpuid_entry2' are currently re=
served,
> +userspace should not expect to get any particular value there.
> +
>  5. The kvm_run structure
>  ------------------------
> =20
> diff --git a/arch/x86/kvm/hyperv.c b/arch/x86/kvm/hyperv.c
> index cecf907e4c49..04c3cdf3389e 100644
> --- a/arch/x86/kvm/hyperv.c
> +++ b/arch/x86/kvm/hyperv.c
> @@ -1804,3 +1804,124 @@ int kvm_vm_ioctl_hv_eventfd(struct kvm *kvm, stru=
ct kvm_hyperv_eventfd *args)
>  		return kvm_hv_eventfd_deassign(kvm, args->conn_id);
>  	return kvm_hv_eventfd_assign(kvm, args->conn_id, args->fd);
>  }
> +
> +int kvm_vcpu_ioctl_get_hv_cpuid(struct kvm_vcpu *vcpu, struct kvm_cpuid2=
 *cpuid,
> +				struct kvm_cpuid_entry2 __user *entries)
> +{
> +	uint16_t evmcs_ver =3D kvm_x86_ops->nested_get_evmcs_version(vcpu);
> +	struct kvm_cpuid_entry2 cpuid_entries[] =3D {
> +		{ .function =3D HYPERV_CPUID_VENDOR_AND_MAX_FUNCTIONS },
> +		{ .function =3D HYPERV_CPUID_INTERFACE },
> +		{ .function =3D HYPERV_CPUID_VERSION },
> +		{ .function =3D HYPERV_CPUID_FEATURES },
> +		{ .function =3D HYPERV_CPUID_ENLIGHTMENT_INFO },
> +		{ .function =3D HYPERV_CPUID_IMPLEMENT_LIMITS },
> +		{ .function =3D HYPERV_CPUID_NESTED_FEATURES },
> +	};
> +	int i, nent =3D ARRAY_SIZE(cpuid_entries);
> +
> +	/* Skip NESTED_FEATURES if eVMCS is not supported */
> +	if (!evmcs_ver)
> +		--nent;
> +
> +	if (cpuid->nent < nent)
> +		return -E2BIG;
> +
> +	if (cpuid->nent > nent)
> +		cpuid->nent =3D nent;
> +
> +	for (i =3D 0; i < nent; i++) {
> +		struct kvm_cpuid_entry2 *ent =3D &cpuid_entries[i];
> +		u32 signature[3];
> +
> +		switch (ent->function) {
> +		case HYPERV_CPUID_VENDOR_AND_MAX_FUNCTIONS:
> +			memcpy(signature, "Linux KVM Hv", 12);
> +
> +			ent->eax =3D HYPERV_CPUID_NESTED_FEATURES;
> +			ent->ebx =3D signature[0];
> +			ent->ecx =3D signature[1];
> +			ent->edx =3D signature[2];
> +			break;
> +
> +		case HYPERV_CPUID_INTERFACE:
> +			memcpy(signature, "Hv#1\0\0\0\0\0\0\0\0", 12);
> +			ent->eax =3D signature[0];
> +			break;
> +
> +		case HYPERV_CPUID_VERSION:
> +			/*
> +			 * We implement some Hyper-V 2016 functions so let's use
> +			 * this version.
> +			 */
> +			ent->eax =3D 0x00003839;
> +			ent->ebx =3D 0x000A0000;
> +			break;
> +
> +		case HYPERV_CPUID_FEATURES:
> +			ent->eax |=3D HV_X64_MSR_VP_RUNTIME_AVAILABLE;
> +			ent->eax |=3D HV_MSR_TIME_REF_COUNT_AVAILABLE;
> +			ent->eax |=3D HV_X64_MSR_SYNIC_AVAILABLE;
> +			ent->eax |=3D HV_MSR_SYNTIMER_AVAILABLE;
> +			ent->eax |=3D HV_X64_MSR_APIC_ACCESS_AVAILABLE;
> +			ent->eax |=3D HV_X64_MSR_HYPERCALL_AVAILABLE;
> +			ent->eax |=3D HV_X64_MSR_VP_INDEX_AVAILABLE;
> +			ent->eax |=3D HV_X64_MSR_RESET_AVAILABLE;
> +			ent->eax |=3D HV_MSR_REFERENCE_TSC_AVAILABLE;
> +			ent->eax |=3D HV_X64_MSR_GUEST_IDLE_AVAILABLE;
> +			ent->eax |=3D HV_X64_ACCESS_FREQUENCY_MSRS;
> +			ent->eax |=3D HV_X64_ACCESS_REENLIGHTENMENT;
> +
> +			ent->ebx |=3D HV_X64_POST_MESSAGES;
> +			ent->ebx |=3D HV_X64_SIGNAL_EVENTS;
> +
> +			ent->edx |=3D HV_FEATURE_FREQUENCY_MSRS_AVAILABLE;
> +			ent->edx |=3D HV_FEATURE_GUEST_CRASH_MSR_AVAILABLE;
> +			ent->edx |=3D HV_STIMER_DIRECT_MODE_AVAILABLE;
> +
> +			break;
> +
> +		case HYPERV_CPUID_ENLIGHTMENT_INFO:
> +			ent->eax |=3D HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED;
> +			ent->eax |=3D HV_X64_APIC_ACCESS_RECOMMENDED;
> +			ent->eax |=3D HV_X64_SYSTEM_RESET_RECOMMENDED;
> +			ent->eax |=3D HV_X64_RELAXED_TIMING_RECOMMENDED;
> +			ent->eax |=3D HV_X64_CLUSTER_IPI_RECOMMENDED;
> +			ent->eax |=3D HV_X64_EX_PROCESSOR_MASKS_RECOMMENDED;
> +			ent->eax |=3D HV_X64_ENLIGHTENED_VMCS_RECOMMENDED;
> +
> +			/*
> +			 * Default number of spinlock retry attempts, matches
> +			 * HyperV 2016.
> +			 */
> +			ent->ebx =3D 0x00000FFF;
> +
> +			break;
> +
> +		case HYPERV_CPUID_IMPLEMENT_LIMITS:
> +			/* Maximum number of virtual processors */
> +			ent->eax =3D KVM_MAX_VCPUS;
> +			/*
> +			 * Maximum number of logical processors, matches
> +			 * HyperV 2016.
> +			 */
> +			ent->ebx =3D 64;
> +
> +			break;
> +
> +		case HYPERV_CPUID_NESTED_FEATURES:
> +			ent->eax =3D evmcs_ver;
> +
> +			break;
> +
> +		default:
> +			break;
> +		}
> +	}
> +
> +	if (copy_to_user(entries, cpuid_entries,
> +			 nent * sizeof(struct kvm_cpuid_entry2)))
> +		return -EFAULT;
> +
> +	return 0;
> +}
> diff --git a/arch/x86/kvm/hyperv.h b/arch/x86/kvm/hyperv.h
> index 0e66c12ed2c3..25428f5966e6 100644
> --- a/arch/x86/kvm/hyperv.h
> +++ b/arch/x86/kvm/hyperv.h
> @@ -95,5 +95,7 @@ void kvm_hv_setup_tsc_page(struct kvm *kvm,
>  void kvm_hv_init_vm(struct kvm *kvm);
>  void kvm_hv_destroy_vm(struct kvm *kvm);
>  int kvm_vm_ioctl_hv_eventfd(struct kvm *kvm, struct kvm_hyperv_eventfd *=
args);
> +int kvm_vcpu_ioctl_get_hv_cpuid(struct kvm_vcpu *vcpu, struct kvm_cpuid2=
 *cpuid,
> +				struct kvm_cpuid_entry2 __user *entries);
> =20
>  #endif
> diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
> index b21b5ceb8d26..142776435166 100644
> --- a/arch/x86/kvm/x86.c
> +++ b/arch/x86/kvm/x86.c
> @@ -2998,6 +2998,7 @@ int kvm_vm_ioctl_check_extension(struct kvm *kvm, l=
ong ext)
>  	case KVM_CAP_HYPERV_SEND_IPI:
>  	case KVM_CAP_HYPERV_ENLIGHTENED_VMCS:
>  	case KVM_CAP_HYPERV_STIMER_DIRECT:
> +	case KVM_CAP_HYPERV_CPUID:
>  	case KVM_CAP_PCI_SEGMENT:
>  	case KVM_CAP_DEBUGREGS:
>  	case KVM_CAP_X86_ROBUST_SINGLESTEP:
> @@ -4191,6 +4192,25 @@ long kvm_arch_vcpu_ioctl(struct file *filp,
>  		r =3D kvm_x86_ops->set_nested_state(vcpu, user_kvm_nested_state, &kvm_=
state);
>  		break;
>  	}
> +	case KVM_GET_SUPPORTED_HV_CPUID: {
> +		struct kvm_cpuid2 __user *cpuid_arg =3D argp;
> +		struct kvm_cpuid2 cpuid;
> +
> +		r =3D -EFAULT;
> +		if (copy_from_user(&cpuid, cpuid_arg, sizeof(cpuid)))
> +			goto out;
> +
> +		r =3D kvm_vcpu_ioctl_get_hv_cpuid(vcpu, &cpuid,
> +						cpuid_arg->entries);
> +		if (r)
> +			goto out;
> +
> +		r =3D -EFAULT;
> +		if (copy_to_user(cpuid_arg, &cpuid, sizeof(cpuid)))
> +			goto out;
> +		r =3D 0;
> +		break;
> +	}
>  	default:
>  		r =3D -EINVAL;
>  	}
> diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
> index b8da14cee8e5..9d0038eae002 100644
> --- a/include/uapi/linux/kvm.h
> +++ b/include/uapi/linux/kvm.h
> @@ -976,6 +976,7 @@ struct kvm_ppc_resize_hpt {
>  #define KVM_CAP_EXCEPTION_PAYLOAD 164
>  #define KVM_CAP_ARM_VM_IPA_SIZE 165
>  #define KVM_CAP_HYPERV_STIMER_DIRECT 166
> +#define KVM_CAP_HYPERV_CPUID 167
> =20
>  #ifdef KVM_CAP_IRQ_ROUTING
> =20
> @@ -1422,6 +1423,9 @@ struct kvm_enc_region {
>  #define KVM_GET_NESTED_STATE         _IOWR(KVMIO, 0xbe, struct kvm_neste=
d_state)
>  #define KVM_SET_NESTED_STATE         _IOW(KVMIO,  0xbf, struct kvm_neste=
d_state)
> =20
> +/* Available with KVM_CAP_HYPERV_CPUID */
> +#define KVM_GET_SUPPORTED_HV_CPUID _IOWR(KVMIO, 0xc0, struct kvm_cpuid2)
> +
>  /* Secure Encrypted Virtualization command */
>  enum sev_cmd_id {
>  	/* Guest initialization commands */
> --=20
> 2.19.2
>=20
