Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  14 Dec 2018 20:27:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3FEF15803DC;
	Fri, 14 Dec 2018 02:40:43 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 14 Dec 2018 02:40:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Azmd7TR90ZP/rQf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1uoSIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CSmVBUMReWSxPDI2/?=
 =?us-ascii?q?coUBEfYOPf1Ar4T/vFYOsQeyCBOwCO/z1jNFhHn71rA63eQ7FgHG2RQtE9wSvn?=
 =?us-ascii?q?vOotX6LrkdUeSox6fM1znIcvNZ2Dfm6IjPbh8hovCMUbxtesfW00kgDQ3FgU+O?=
 =?us-ascii?q?pozhJD6V1foCs3Kd7+V+UeKjkWknqxt+ojW2wMonl4fHhoUQyl/e9CV5xp44Jd?=
 =?us-ascii?q?6mR05hZ96rDp9QuzudN4tsTcMvRXxjtiUiyrAep5K3YCwHxI46yxPRdfCLaZWE?=
 =?us-ascii?q?7xH/WOqLIDp1hmppdKyjixu260Stye3xWtOp3FtLrCdJiMTAu3QN2hHV98OJUO?=
 =?us-ascii?q?Fy/l271jaKzw3T6v9LIUQzlafDNZ4hzaA/loAJvUTAACD2gkP2g7GSdkk+/eio?=
 =?us-ascii?q?8evnbq3npp+aKYB0lhnzProylsG7G+g0LwYDU3aB9eih17Dv4Vf1TbRIg/Eul6?=
 =?us-ascii?q?nWqpHaJcAVpq6jBA9V154u6xK+DzegzdQZkmALLFFbdxKdiYjmJVXOLOn/Dfax?=
 =?us-ascii?q?hVSjji1ryuvYPr3uHJrNNGLPkLT/crZn7U5T1g4zwcpY55JOBbENOOjzVVPptN?=
 =?us-ascii?q?zEEh85NBS5w+LmCNV+yIwSQ22OArKCPaPWsF+I4P8vIuaWaI8Uvjb9N+Yq5/r0?=
 =?us-ascii?q?gXAlnl8deLGj3YELZ3CgAvRmP0KZbGLsgtgbEGcKohAxTOvwhF2CTD5cfXCyX6?=
 =?us-ascii?q?0n6zE/CYKmC5rDR4+3jLyA2ie7AoNZZmRcBl+QFnfocp2OW+0QZyKKPs9hjjsE?=
 =?us-ascii?q?WKCjS48myx6irgz6y71hLurS/S0Vrpbj1Nlz5+3OmhA+7z10D8KB026TS2F4hH?=
 =?us-ascii?q?8HRzgz3Kpnu0xy1k+D0bRkg/xfDdFc/ehJUgc9NZ7f1eB6Ecr9WgDac9eNSVam?=
 =?us-ascii?q?RMimAD4rQtIwxd8Of1hyG9G4gh/f2CqqBqcfl6aXC5ws7qLcw3/xKt5+y3nc0q?=
 =?us-ascii?q?ktlV0mQspVOm2gia5y7AzTB4/Pk0WEmKemb6Uc3CjR9GidyWqCpl1XUAl1Ua/d?=
 =?us-ascii?q?R3AQelPWrcjl5kPFV7KhFK4oMhVfxsKYKqtFcNvpjU5YS/flP9jeZ2Gxm2K0BR?=
 =?us-ascii?q?uTwrOMbYzqe3gS3SnHCUgElRwT8miCNQQkGiihpGfeBiR0FV3ze0Ps7fV+qHSj?=
 =?us-ascii?q?Q0Ap1Q6KcVNu26C1+hEPg/ycUO0c3rQftSclqjV0Gku93t3MB9qBoQphYLtTYd?=
 =?us-ascii?q?cn7Fhb0mLZshR3Poa8IKB6ml4ebwN3slvy1xV2D4VAltQqrHMqzQZoNaKUylRB?=
 =?us-ascii?q?dymc3ZDxPL3XJXL//BSua67Qx1Hf38ya+qYJ6PQktVrjuBulGVYl83Viy9NVyW?=
 =?us-ascii?q?eT5o3WDAoOVpL8Slw49xxkqLDVfCY855nY2mZxMaapqDDC3dEpBOw7yhu7e9df?=
 =?us-ascii?q?MaWEFBL9EsEABsiuLvAqlEatbh4eIO9S86s0Ndu8d/SawK6rIPpgnDW+gGVH/Y?=
 =?us-ascii?q?BxyF6D+zB9S+7IxZkFxf6Y0xCDVzf9ilehr8/2lZpFZTEUAmqw1yzkCJRNaa11?=
 =?us-ascii?q?eIYBEX2uLNGvxtVim57tXGZV9ESiB1wawsCpYwedb1vn0Q1Wy0sXu32nlTKkwD?=
 =?us-ascii?q?NulzEms7SQ3DbJw+TkbxcHPm9LRG9/jVbjO4S0jtYaXFS2YAgtjheq+UH6x61D?=
 =?us-ascii?q?rqRlM2bTWVtIfzTxL2x6Uqqwt6COYs5V5JMzrCVXVv+xYVSbSr77vhsb3DnvH2?=
 =?us-ascii?q?pYxDAnaT6qvo/1kAB9iGKYNHxztmbWedlsxRfD49zRXfxR0SAcRCl7ijnXAUKw?=
 =?us-ascii?q?P8Kz8tWXlJfDs+a+WHynVpBIdSnrzIWAtDa05GFwAB2/meyzlcPjEQQgzSD70N?=
 =?us-ascii?q?xqXz3SrBngeonry7i6MeV/c0hoHlD87NB2GoN/kos2n5wQ3XkahpOI/XsIi2vz?=
 =?us-ascii?q?MNNb2b7gY3oJXzIE39nV4A390k15Mn2J3575VmmawsZ5ZNm1eGIW1jg978BXEq?=
 =?us-ascii?q?iU6rNEkDBxolq5qwLRfPd8ki0cyfso9H4VneUJtBAxwSWaB7AYBVNYMjD0lxSU?=
 =?us-ascii?q?89C+q71aZGOucbizzkVyh96gA6+ZogFARnn5YIwtEjFq7sVwK1/M1Hzz6of5eN?=
 =?us-ascii?q?jfd94TtxuUkwvegOhRMp4+iv0KhS9/M2LnoXIl0/I7jQBp3ZyioIiHLGBt8Li4?=
 =?us-ascii?q?AxFCMD31etgT+irsjatFmsaW3oavHohuGzkRXZvoS+6oHywWtfj9KwmOFzg8oG?=
 =?us-ascii?q?+BGbXDBQ+f9Ftmr3XXHp+wLX6XI30Zzch4SBmZOUxSmwQUXDQ8np4kGQGm3s3h?=
 =?us-ascii?q?cEFl5j8P4l70sAdDyuVtNxPnSGfQuB+oaisoSJiYNBdW7BtN50LLPsyF9O5zAz?=
 =?us-ascii?q?tU/p68rAyON2ybYR5HDXoSV0yABlDjOKSu5Nba/+iZAOq+M+XBYbGUpeNCUPeI?=
 =?us-ascii?q?wIql0pF68DaUKsWPIn5iAuU720pEQHB5AtnZlC8JSyANjCLNaMibpBin9y1zr8?=
 =?us-ascii?q?C/9unrWQ316YuODbtSLctg+xSsjaifMO6QgT5zKSxE2ZMU2X/I1L8f0UYSiy5w?=
 =?us-ascii?q?djmtErcAtS/XQKLTgK9XCBEbZD1pNMtV9KIxxQ1NOc/ditPo2b90lP81C1FZVV?=
 =?us-ascii?q?P/nsGlf9AFI2a4NFnfHkaEKKyGJSHXw8Hwea6zU6BQg/5OtxKuuTeXCUvjPjWY?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?Bgc0NMq72c9z9Xju9jFGxB8HVlK/KJmyKY7+neN5YXvuFnAiVyl+JG/ns6z6FZ?=
 =?us-ascii?q?4z1DRPxwgCHStMJho0m6kumTzTpqSBpPpSxNhIKOvEViP73W95hAWXne+hIN4n?=
 =?us-ascii?q?6dCxALp9tjF93utLpcytnJlKLvNjhC98jY8tcbB8jRe4q7Ny8oNRf5ETjYARFD?=
 =?us-ascii?q?TXinKHDUhGRZkfeP5juUqIQ3rt7nn59dZKVcUQl/LPoUA0lhVP5EaKhmRTQvkr?=
 =?us-ascii?q?/RxJoS7HS3oR35R8hAuJ3DEPWIDqO8e36ikbBYak5QkvvDJoMJO9i+ghQ6Zw?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A3AAAbiBNch0O0hNFjHgEGBwaBUwcLA?=
 =?us-ascii?q?YJpgQIng3yUK4FrBR0Ul0EUgWIpCwgBh0ciNgcNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKSMMgjYkAYJiAQIDAQIgBFIGCQEBCgsNAgImAgIDHxIBBQEcGQUDgxkBggAFC?=
 =?us-ascii?q?potPIsPfDOELQGFfAUSeYdHg2wRBoF/gRGDEoRpgxyCVwKJQoF0hBaRTAcCAoc?=
 =?us-ascii?q?Lik0YgV2PcIMGhzKDcYsgMIErAYIHfQhsBoI1gicXEohMhUA+MwEBgQMBAYxWA?=
 =?us-ascii?q?QE?=
X-IPAS-Result: =?us-ascii?q?A0A3AAAbiBNch0O0hNFjHgEGBwaBUwcLAYJpgQIng3yUK4F?=
 =?us-ascii?q?rBR0Ul0EUgWIpCwgBh0ciNgcNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiA?=
 =?us-ascii?q?QIDAQIgBFIGCQEBCgsNAgImAgIDHxIBBQEcGQUDgxkBggAFCpotPIsPfDOELQG?=
 =?us-ascii?q?FfAUSeYdHg2wRBoF/gRGDEoRpgxyCVwKJQoF0hBaRTAcCAocLik0YgV2PcIMGh?=
 =?us-ascii?q?zKDcYsgMIErAYIHfQhsBoI1gicXEohMhUA+MwEBgQMBAYxWAQE?=
X-IronPort-AV: E=Sophos;i="5.56,352,1539673200"; 
   d="scan'208";a="55898056"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 14 Dec 2018 02:40:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729585AbeLNKkj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 14 Dec 2018 05:40:39 -0500
Received: from mail-oi1-f195.google.com ([209.85.167.195]:40895 "EHLO
        mail-oi1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726344AbeLNKki (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 14 Dec 2018 05:40:38 -0500
Received: by mail-oi1-f195.google.com with SMTP id t204so4163683oie.7;
        Fri, 14 Dec 2018 02:40:37 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=MeCeuzp0TzWYsfPDQjPX7DFN7BWZp3zrbMmpz3lb1Eg=;
        b=WcwysGV1M5FV0Di6u0BV1ULZeqceSfVDjZ7SVJVPBlucO6GpIJiPuboFnKtIDNMYhH
         901srAOR77g03kVu8MS4R/A/ynHyHgX8XnNjlrxbDiU3+D68RvaFzN6mSbQKWt10mrLD
         5Wr6rImWZ9OQw94V/Gs7zS8XXlYJF0R/8jIr3zWu1/axa6TGe76vP+pkwkT23qrbF0GV
         zaJCPqUtJg9eEJ5AEVlp4RKfIevR2N++eygQ5RlcKDg12PTZZ4GurskrWAjsq+oLxjos
         vXyekKRiV26DN+hXdlFpDWQ5aFep+T1oZsp5mJQsZW3OalYP7rBSdVn+ErFDrk8jVBDZ
         gzxg==
X-Gm-Message-State: AA+aEWZbsxA2WmScqKgPCEIU1poCaCdRVJszTFXdkG9LK5OaExdIsjBy
        dQMcllmnJa2Zz6kVOLCFhBFbQyUn36lugkfamBY=
X-Google-Smtp-Source: AFSGD/U49OdCLZkOfkxftoKoNWeX73ewKgqAIy/pOUvqgi/anl3ehuBISidq7T79HOAxiDrx79mJewLrHzj6peYny+E=
X-Received: by 2002:aca:368a:: with SMTP id d132mr1497197oia.193.1544784036863;
 Fri, 14 Dec 2018 02:40:36 -0800 (PST)
MIME-Version: 1.0
References: <154466182249.9126.3905559325944768059.stgit@ahduyck-desk1.jf.intel.com>
 <154466190393.9126.148371211828405339.stgit@ahduyck-desk1.jf.intel.com>
In-Reply-To: <154466190393.9126.148371211828405339.stgit@ahduyck-desk1.jf.intel.com>
From: "Rafael J. Wysocki" <rafael@kernel.org>
Date: Fri, 14 Dec 2018 11:40:25 +0100
Message-ID: <CAJZ5v0it33gOgjR8KUqsGtykh7UovZ5MUbJeEavHDa2uQSXM0g@mail.gmail.com>
Subject: Re: [driver-core PATCH v9 2/9] device core: Consolidate locking and
 unlocking of parent and device
To: alexander.h.duyck@linux.intel.com
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        "Luis R. Rodriguez" <mcgrof@kernel.org>,
        "linux-nvdimm@lists.01.org" <linux-nvdimm@lists.01.org>,
        Tejun Heo <tj@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux PM <linux-pm@vger.kernel.org>,
        Lai Jiangshan <jiangshanlai@gmail.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Len Brown <len.brown@intel.com>, Pavel Machek <pavel@ucw.cz>,
        zwisler@kernel.org, Dan Williams <dan.j.williams@intel.com>,
        dave.jiang@intel.com, bvanassche@acm.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

 somOn Thu, Dec 13, 2018 at 1:45 AM Alexander Duyck
<alexander.h.duyck@linux.intel.com> wrote:
>
> Try to consolidate all of the locking and unlocking of both the parent and
> device when attaching or removing a driver from a given device.
>
> To do that I first consolidated the lock pattern into two functions
> __device_driver_lock and __device_driver_unlock. After doing that I then
> created functions specific to attaching and detaching the driver while
> acquiring these locks. By doing this I was able to reduce the number of
> spots where we touch need_parent_lock from 12 down to 4.
>
> This patch should produce no functional changes, it is meant to be a code
> clean-up/consolidation only.
>
> Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
> Reviewed-by: Bart Van Assche <bvanassche@acm.org>
> Reviewed-by: Dan Williams <dan.j.williams@intel.com>
> Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
> Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
> ---
>  drivers/base/base.h |    2 +
>  drivers/base/bus.c  |   23 ++----------
>  drivers/base/dd.c   |   95 ++++++++++++++++++++++++++++++++++++++++-----------
>  3 files changed, 81 insertions(+), 39 deletions(-)
>
> diff --git a/drivers/base/base.h b/drivers/base/base.h
> index 7a419a7a6235..3f22ebd6117a 100644
> --- a/drivers/base/base.h
> +++ b/drivers/base/base.h
> @@ -124,6 +124,8 @@ extern int driver_add_groups(struct device_driver *drv,
>                              const struct attribute_group **groups);
>  extern void driver_remove_groups(struct device_driver *drv,
>                                  const struct attribute_group **groups);
> +int device_driver_attach(struct device_driver *drv, struct device *dev);
> +void device_driver_detach(struct device *dev);
>
>  extern char *make_class_name(const char *name, struct kobject *kobj);
>
> diff --git a/drivers/base/bus.c b/drivers/base/bus.c
> index b886b15cb53b..74054481007d 100644
> --- a/drivers/base/bus.c
> +++ b/drivers/base/bus.c
> @@ -184,11 +184,7 @@ static ssize_t unbind_store(struct device_driver *drv, const char *buf,
>
>         dev = bus_find_device_by_name(bus, NULL, buf);
>         if (dev && dev->driver == drv) {
> -               if (dev->parent && dev->bus->need_parent_lock)
> -                       device_lock(dev->parent);
> -               device_release_driver(dev);
> -               if (dev->parent && dev->bus->need_parent_lock)
> -                       device_unlock(dev->parent);
> +               device_driver_detach(dev);
>                 err = count;
>         }
>         put_device(dev);
> @@ -211,13 +207,7 @@ static ssize_t bind_store(struct device_driver *drv, const char *buf,
>
>         dev = bus_find_device_by_name(bus, NULL, buf);
>         if (dev && dev->driver == NULL && driver_match_device(drv, dev)) {
> -               if (dev->parent && bus->need_parent_lock)
> -                       device_lock(dev->parent);
> -               device_lock(dev);
> -               err = driver_probe_device(drv, dev);
> -               device_unlock(dev);
> -               if (dev->parent && bus->need_parent_lock)
> -                       device_unlock(dev->parent);
> +               err = device_driver_attach(drv, dev);
>
>                 if (err > 0) {
>                         /* success */
> @@ -771,13 +761,8 @@ EXPORT_SYMBOL_GPL(bus_rescan_devices);
>   */
>  int device_reprobe(struct device *dev)
>  {
> -       if (dev->driver) {
> -               if (dev->parent && dev->bus->need_parent_lock)
> -                       device_lock(dev->parent);
> -               device_release_driver(dev);
> -               if (dev->parent && dev->bus->need_parent_lock)
> -                       device_unlock(dev->parent);
> -       }
> +       if (dev->driver)
> +               device_driver_detach(dev);
>         return bus_rescan_devices_helper(dev, NULL);
>  }
>  EXPORT_SYMBOL_GPL(device_reprobe);
> diff --git a/drivers/base/dd.c b/drivers/base/dd.c
> index 74c194ac99df..f07c16277ed9 100644
> --- a/drivers/base/dd.c
> +++ b/drivers/base/dd.c
> @@ -867,6 +867,64 @@ void device_initial_probe(struct device *dev)
>         __device_attach(dev, true);
>  }
>
> +/*
> + * __device_driver_lock - acquire locks needed to manipulate dev->drv
> + * @dev: Device we will update driver info for
> + * @parent: Parent device. Needed if the bus requires parent lock
> + *
> + * This function will take the required locks for manipulating dev->drv.
> + * Normally this will just be the @dev lock, but when called for a USB
> + * interface, @parent lock will be held as well.
> + */
> +static void __device_driver_lock(struct device *dev, struct device *parent)
> +{
> +       if (parent && dev->bus->need_parent_lock)
> +               device_lock(parent);
> +       device_lock(dev);
> +}
> +
> +/*
> + * __device_driver_unlock - release locks needed to manipulate dev->drv
> + * @dev: Device we will update driver info for
> + * @parent: Parent device. Needed if the bus requires parent lock
> + *
> + * This function will release the required locks for manipulating dev->drv.
> + * Normally this will just be the the @dev lock, but when called for a
> + * USB interface, @parent lock will be released as well.
> + */
> +static void __device_driver_unlock(struct device *dev, struct device *parent)
> +{
> +       device_unlock(dev);
> +       if (parent && dev->bus->need_parent_lock)
> +               device_unlock(parent);
> +}
> +
> +/**
> + * device_driver_attach - attach a specific driver to a specific device
> + * @drv: Driver to attach
> + * @dev: Device to attach it to
> + *
> + * Manually attach driver to a device. Will acquire both @dev lock and
> + * @dev->parent lock if needed.
> + */
> +int device_driver_attach(struct device_driver *drv, struct device *dev)
> +{
> +       int ret = 0;
> +
> +       __device_driver_lock(dev, dev->parent);
> +
> +       /*
> +        * If device has been removed or someone has already successfully
> +        * bound a driver before us just skip the driver probe call.
> +        */
> +       if (!dev->dead && !dev->driver)
> +               ret = driver_probe_device(drv, dev);
> +
> +       __device_driver_unlock(dev, dev->parent);
> +
> +       return ret;
> +}
> +
>  static int __driver_attach(struct device *dev, void *data)
>  {
>         struct device_driver *drv = data;
> @@ -894,14 +952,7 @@ static int __driver_attach(struct device *dev, void *data)
>                 return ret;
>         } /* ret > 0 means positive match */
>
> -       if (dev->parent && dev->bus->need_parent_lock)
> -               device_lock(dev->parent);
> -       device_lock(dev);
> -       if (!dev->dead && !dev->driver)
> -               driver_probe_device(drv, dev);
> -       device_unlock(dev);
> -       if (dev->parent && dev->bus->need_parent_lock)
> -               device_unlock(dev->parent);
> +       device_driver_attach(drv, dev);
>
>         return 0;
>  }
> @@ -932,15 +983,11 @@ static void __device_release_driver(struct device *dev, struct device *parent)
>         drv = dev->driver;
>         if (drv) {
>                 while (device_links_busy(dev)) {
> -                       device_unlock(dev);
> -                       if (parent)
> -                               device_unlock(parent);
> +                       __device_driver_unlock(dev, parent);
>
>                         device_links_unbind_consumers(dev);
> -                       if (parent)
> -                               device_lock(parent);
>
> -                       device_lock(dev);
> +                       __device_driver_lock(dev, parent);
>                         /*
>                          * A concurrent invocation of the same function might
>                          * have released the driver successfully while this one

This change will clash with
https://patchwork.kernel.org/patch/10729571/ somewhat which really
should go it first as a stable-candidate fix.

I would suggest rebasing on top of that one, unless Greg has different
plans here.

> @@ -993,16 +1040,12 @@ void device_release_driver_internal(struct device *dev,
>                                     struct device_driver *drv,
>                                     struct device *parent)
>  {
> -       if (parent && dev->bus->need_parent_lock)
> -               device_lock(parent);
> +       __device_driver_lock(dev, parent);
>
> -       device_lock(dev);
>         if (!drv || drv == dev->driver)
>                 __device_release_driver(dev, parent);
>
> -       device_unlock(dev);
> -       if (parent && dev->bus->need_parent_lock)
> -               device_unlock(parent);
> +       __device_driver_unlock(dev, parent);
>  }
>
>  /**
> @@ -1027,6 +1070,18 @@ void device_release_driver(struct device *dev)
>  }
>  EXPORT_SYMBOL_GPL(device_release_driver);
>
> +/**
> + * device_driver_detach - detach driver from a specific device
> + * @dev: device to detach driver from
> + *
> + * Detach driver from device. Will acquire both @dev lock and @dev->parent
> + * lock if needed.
> + */
> +void device_driver_detach(struct device *dev)
> +{
> +       device_release_driver_internal(dev, NULL, dev->parent);
> +}
> +
>  /**
>   * driver_detach - detach driver from all devices it controls.
>   * @drv: driver.
>
