Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 12 Dec 2018 08:46:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C992E580380;
	Tue, 11 Dec 2018 06:03:06 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 11 Dec 2018 06:03:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHYnpTxdLOlZP+7Cb+dCLmWCxlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6/YBON2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QAogC+BRGuCe701j9In2X70bEm3+g9EwzL2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LLofXvqvzKnUyjXDdPJX0ir85ojPdhAuu+qMXLNufsvf0kkvFALFhUiX?=
 =?us-ascii?q?pIP+JTOV2eANvnOA4OpvSO2glXAnpxtpojir38ohjJTCiIENyl3c6yl13II4Kc?=
 =?us-ascii?q?elREN1f9KoCoZcuiKGO4dsQ84vQXlktDgmxrACo5K2fygHxI46yxPeavGLaZWE?=
 =?us-ascii?q?7xbiWeuXPDx2nmhqeKiliBa36UWgyvPzVs2z0FtSsCpFncfDtmoX2xzQ9MeHUP?=
 =?us-ascii?q?198Vml2TqV0ADT8O5ELVg1lardNZEh3qY9moQPvUnHBCP6hUv7gLGMekk5+eWk?=
 =?us-ascii?q?9/7rb7Tkq5OEMo97kAD+MqAgmsylBuQ4NxADX2ya+eS6yb3i8lT1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd0cpq+3BQ9azJwj5g2hDzepztsYh2MLLFFbdxKdiYjmJVXOLOr/Dfel?=
 =?us-ascii?q?jFSgiC1ryOzePr39HpXNKWDOkLPgfbZ+9UFQ0gUyzc1E6pJQC7EBJu/zW0DruN?=
 =?us-ascii?q?zZCB85LxK7w+L9BNph0YMeXHqFArWFP6PKrV+I+uUvLvGMZIAPuTb9N+Iq5/n0?=
 =?us-ascii?q?gX85hF8SZ6+p3ZQMZXC8H/RmJViZYHX2jtcAF2cKohQxTOjwhFKeVj5TYm64X7?=
 =?us-ascii?q?gg6TEjFIKmEYDDS5ivgLyGwii3BJ5WZmdAClCKFnflbIGEW/YKaCKPLc5tiD0E?=
 =?us-ascii?q?Vb69S4A/0RGirhP1y71iLuDM4C0XqYrj1MRp5+3UjRw97yd0D8Sa02GOVW10hH?=
 =?us-ascii?q?kHRz0t0aB7oEx9zEqD0Kdij/xZE9xT++1GUgMgOZHAyOx6Dsj4WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCkyTt0rxd8CeUJ9G9S4gRDF0CqnGLsVl72NBJwp/aPQxXnxJ8Bhy3nY0K?=
 =?us-ascii?q?ktlUUpQsxKNWe+nK5w6xDTB5LVk0Wej6ulaL4T3DDT+2uZzWqBpkdYUBVuXqXD?=
 =?us-ascii?q?WnwfYkjWrdH95k7ZS7+uCLInMhZOyMKYK6tKbMHpgktCRPv5JNveZGexkX+qBR?=
 =?us-ascii?q?mU3rOMcJbqe2IF0SrAEkcEjR4c8WyGNQckACehuHzRDDp1GFLrYkPs9/R+qXyh?=
 =?us-ascii?q?Qk81yQGKc1Nu176v9hEJgvycTusZ3qgYtyc5tzV0AFG90srKC9qBogphe7lcYd?=
 =?us-ascii?q?M94VtdyWLVrQt9PoakL6BjgF4efB96v0fv1xVxF4VBntImrHIszApuN62Y1ElN?=
 =?us-ascii?q?eC+f3ZD1IrfXMHX9/Aiza67K3VHTyMyZ+qMR5/U3tVrivBulGVE/83p6ydZV1X?=
 =?us-ascii?q?ic5pLUDAcJVZLxU0A39wV1pr3AYyk94Z/U2mNoMaWurjDC3NcpDvM/yhm8Z9df?=
 =?us-ascii?q?LL+EFAjqHswaGsiiMvAll0KobxIEJu9S8qE0Mtiid/uH3q6rIelhkCinjWRB/I?=
 =?us-ascii?q?ByzEaM+zBgRe7P2pYP2+uY0RefVzfgkFehtdj6mZpFZT4OBGW/0zXrBIlLaq10?=
 =?us-ascii?q?Y4kLE2auL9Srydpkg57iRmBX9ESkB1MAw8KpfRuSb1rg3Qxfz0gXoHqnmTemwD?=
 =?us-ascii?q?xwiT0msq2f3CnWyeT4aBUHInJLRHVljVr0IYm0jsoWXUiyYwgyiRul4133x6xa?=
 =?us-ascii?q?pKR5MmnSTl1EfynwL2F+TKSwsqCObNJI6JMtqS9XSvizYUiGSr7hpBsXyyHjEH?=
 =?us-ascii?q?FExDA4dDGqvY/1nwdgh2KeL3ZzrXzZdt92xRrE4NzcRPhR3icJRSViiDnXAES8?=
 =?us-ascii?q?MMet/dmOi5jDteW+XXq7VpJPaSnr0Z+AtCyj6GxqGxK/mOq/mt/mEQg8yiL709?=
 =?us-ascii?q?hqVSPVrBfzeIXr1qK6Mf55cUlsHlPz9816GoRmmIsqmJ4QwWQahomS/Xcfkmf8?=
 =?us-ascii?q?K9Rb1bj+bHoQXzELxdHV7RPh2E1iKHKJ2o34Wm+cwstne9m1fGcW1jgh4MBNDa?=
 =?us-ascii?q?ee9KZEkjdtolqksQLRZuBwnjIcyfst8nEWme8ItxQ2ziWBHL8SB1JXMjL2lxSH?=
 =?us-ascii?q?9N2+qKRXZGCycbm/zkZ+nNahDK2crQFYQnr2ZpAiHSpo5MVlLF3MyGHz6p3jeN?=
 =?us-ascii?q?TIcdITsRiUnw3BjudPLpIxi+EKhTFmOW/muX0lyug7jQFh3J2gvYiHLXlt87y9?=
 =?us-ascii?q?AhJCKjL1YMYT8Cn3jalChsaWw5yvHpJ5FzoQRpToSvaoEC8IufTjKgaDCzk8qn?=
 =?us-ascii?q?adGbrCEg6T8kZmr3TTE5+1M3GbPmUWzdJnRBOFPkxQnBgUXCkmnp4+Dg2qxtbu?=
 =?us-ascii?q?cEJn6TAK/FL4tgFAyuF1Nxn8T2ffoh2naiwvRZibLRpW6BxC5kjPPcyf6OJzAz?=
 =?us-ascii?q?9X/pm7oAORLWybYhxCDXsVVUycG1DjIr6u6MHA8uifG+q+NubObq+IqeBETPeI?=
 =?us-ascii?q?wpSv0oR98jaIN8WPOGRiDvIh1kpCW3B5B9rWmzEVRyMLkCLNataRpA2g9S1vss?=
 =?us-ascii?q?C/7PPrVRrv5YSRCrtSMtZv+xGsjaeALe6Qgyl5JihC1pMR3n/F07wf3F8UiyFz?=
 =?us-ascii?q?eDihC7UAtSjRTK3Onq9bFQIUayR2NMFQ9aIzwhFNOdLHitPyzrN3lOM1BExfVV?=
 =?us-ascii?q?P/msClf8gKI2CmOVPDBUaLMqmGJDLRz8H2Z6O8VaNfjOFOuxKsvjabFlfpPi6f?=
 =?us-ascii?q?mDnxSxCvLeZMgTmHPBxfvYGxaApiBXL/Q9LmdBK7NsR6jTk3wb0ym3PLOnQQMT?=
 =?us-ascii?q?l6c0NRsLKQ6TlUjel4G2xE9nBlN/WLmz6F7+nELZYbqftqDT5yl+Jf4XQ6zaNa?=
 =?us-ascii?q?7SBERPNvnivSocVjo1WnkumJ1zpmXwBCqjdNhIKXo0piPb/V+YVHWXbBr1ox6j?=
 =?us-ascii?q?CsCxMPrsAtJdniurBWx8KHwL78LCdq99PS4NcGAM7VOISLPSxleSf2FQn3CAYE?=
 =?us-ascii?q?SzPuFv/ZhkMVxOzU9XmYr54375vrlZwPRZdDWVo6C+8ADUJkDJoOLcEzFhYti7?=
 =?us-ascii?q?XTvt8O6nuztlGFQcxAtdbVR/SdAPj1AD+DiP9PYB5ekp3iKoFGHIThx0t5eBFV?=
 =?us-ascii?q?m4DDAFjdQstOo2U1ZBU7pG1H/3RzUCsr3xS2OUuW/HYPGKvszVYNgQxkbLForW?=
 =?us-ascii?q?+07g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AaAACvwg9ch0O0hNFlHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N7lCmCIYkNjjGBJANMLBMBhECCbSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQg?=
 =?us-ascii?q?pIwyCNiQBgmIDAwECIAQZAQE3AQUJAQEKCwMMAiYCAgMfEgEFARwGARIFFoMGg?=
 =?us-ascii?q?XUNBZlhPIodcHwzgnYBAQWHJggSeYswFz6BQYQjhFsmgwSCV6B9CYJfjnIYkUA?=
 =?us-ascii?q?siHeQATATgRKCDn4HbAaCNYIbDBeDSopUPjMBgQQBAYgVgkwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AaAACvwg9ch0O0hNFlHgEGBwaBUQkLAYNrJ4N7lCmCIYk?=
 =?us-ascii?q?NjjGBJANMLBMBhECCbSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmIDA?=
 =?us-ascii?q?wECIAQZAQE3AQUJAQEKCwMMAiYCAgMfEgEFARwGARIFFoMGgXUNBZlhPIodcHw?=
 =?us-ascii?q?zgnYBAQWHJggSeYswFz6BQYQjhFsmgwSCV6B9CYJfjnIYkUAsiHeQATATgRKCD?=
 =?us-ascii?q?n4HbAaCNYIbDBeDSopUPjMBgQQBAYgVgkwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,342,1539673200"; 
   d="scan'208";a="56410321"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 11 Dec 2018 06:03:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726725AbeLKODB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 11 Dec 2018 09:03:01 -0500
Received: from mail-it1-f196.google.com ([209.85.166.196]:54901 "EHLO
        mail-it1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726203AbeLKODA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 11 Dec 2018 09:03:00 -0500
Received: by mail-it1-f196.google.com with SMTP id i145so3634044ita.4
        for <linux-kernel@vger.kernel.org>; Tue, 11 Dec 2018 06:03:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=bgdev-pl.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=DilIrTL0MCs06tmRGevnvVt8URXH8KtaGCIvIVsGQbo=;
        b=uN0061dAFMNYsKJ4FAFaNt6dIu/XKXfJK8aEkbq4hvK+ZWHKAZYP3s0IYT9J33MMpO
         1j9uks1O1LNqPbtdEz6Ta7AnBmN2cirMhvhr4/ne+DI1T2P7KEFSjT8SFvCLAzlbzfjp
         76QogmT2H+U34VC3M4NA0CpiRGmrSkPsbzJzd88xnGCJ0QxMHxj336yNdZd++ZwZ5Iyd
         JHd0jNy6fqxllUbAfeieTfYHcM2UI8LYKWoZunZkbLQXPaFQdwM2/njamUn3NdRry/Sq
         9mgu7Pfb8YtLf3JNpC/uW1H9Wxf4ulKaLh3opILRmcLRCNLG/+LHsmfakHHhtZzXN5L3
         GvCw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=DilIrTL0MCs06tmRGevnvVt8URXH8KtaGCIvIVsGQbo=;
        b=A2vp5/enypLr+yA2/aETfJ7jTOwZXGdDY5yWO8dk4YmZeRp+jHWIEEZX//QK4W3NoM
         /8haYEPI9EGES0gX4lChIiSQEr7Osb1dtoXaoKdIkpUsIeZ3M41yudPXqWhm+VaaJvWc
         Js3jBC86RAcSlQp6ALAzGS1ALQ0p39tnmOswAecJCCVroz/DueVoEIZogC08u3/L8Uxj
         VyyIj5imcj1QBAZpnjlicvOMF3gt1gevbqVH2aZqcuBIijPfWBURuiIyIMLqJ6sZDBzX
         IXFYEWvskKQKsXYEaFevmqb8q0QbCqIGHVG+4oKL6Siy7eAVlp+mtsluP4XWnp9OsSOy
         YyYQ==
X-Gm-Message-State: AA+aEWYZOVSuD5w5VkcNqwiPjn5hQHYkBeKbSJmc/DlpUAl4DjafaWJj
        AOT7xAJkJJ2cr16bm2CmCERyz/wsJ9m1h7M6jVmq/ISPyBw=
X-Google-Smtp-Source: AFSGD/UgOhbJaxH4dIchaZvPqOFf2pUS5aDiqeLfDmEzsLc0ELJrUn3Ht6YxZv5hGr3WalixxJmeXckknjmPMHoC/Ek=
X-Received: by 2002:a02:98bb:: with SMTP id q56mr15420761jaj.24.1544536979495;
 Tue, 11 Dec 2018 06:02:59 -0800 (PST)
MIME-Version: 1.0
References: <20181109172132.30939-1-brgl@bgdev.pl>
In-Reply-To: <20181109172132.30939-1-brgl@bgdev.pl>
From: Bartosz Golaszewski <brgl@bgdev.pl>
Date: Tue, 11 Dec 2018 15:02:48 +0100
Message-ID: <CAMRc=MeY_CbdQDF7UOai5MW3OLF1u+a04AAyq5bsux8_Fv5DVQ@mail.gmail.com>
Subject: Re: [PATCH] irq/irq_sim: store multiple interrupt offsets in a bitmap
To: Thomas Gleixner <tglx@linutronix.de>,
        =?UTF-8?Q?Uwe_Kleine=2DK=C3=B6nig?= 
        <u.kleine-koenig@pengutronix.de>,
        Marc Zyngier <marc.zyngier@arm.com>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

pt., 9 lis 2018 o 18:21 Bartosz Golaszewski <brgl@bgdev.pl> napisa=C5=82(a)=
:
>
> Two threads can try to fire the irq_sim with different offsets and will
> end up fighting for the irq_work asignment. Thomas Gleixner suggested a
> solution based on a bitfield where we set a bit for every offset
> associated with an interrupt that should be fired and then iterate over
> all set bits in the interrupt handler.
>
> This is a slightly modified solution using a bitmap so that we don't
> impose a limit on the number of interrupts one can allocate with
> irq_sim.
>
> Suggested-by: Thomas Gleixner <tglx@linutronix.de>
> Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
> ---
>  include/linux/irq_sim.h |  2 +-
>  kernel/irq/irq_sim.c    | 23 +++++++++++++++++++++--
>  2 files changed, 22 insertions(+), 3 deletions(-)
>
> diff --git a/include/linux/irq_sim.h b/include/linux/irq_sim.h
> index 630a57e55db6..4500d453a63e 100644
> --- a/include/linux/irq_sim.h
> +++ b/include/linux/irq_sim.h
> @@ -16,7 +16,7 @@
>
>  struct irq_sim_work_ctx {
>         struct irq_work         work;
> -       int                     irq;
> +       unsigned long           *pending;
>  };
>
>  struct irq_sim_irq_ctx {
> diff --git a/kernel/irq/irq_sim.c b/kernel/irq/irq_sim.c
> index dd20d0d528d4..98a20e1594ce 100644
> --- a/kernel/irq/irq_sim.c
> +++ b/kernel/irq/irq_sim.c
> @@ -34,9 +34,20 @@ static struct irq_chip irq_sim_irqchip =3D {
>  static void irq_sim_handle_irq(struct irq_work *work)
>  {
>         struct irq_sim_work_ctx *work_ctx;
> +       unsigned int offset =3D 0;
> +       struct irq_sim *sim;
> +       int irqnum;
>
>         work_ctx =3D container_of(work, struct irq_sim_work_ctx, work);
> -       handle_simple_irq(irq_to_desc(work_ctx->irq));
> +       sim =3D container_of(work_ctx, struct irq_sim, work_ctx);
> +
> +       while (!bitmap_empty(work_ctx->pending, sim->irq_count)) {
> +               offset =3D find_next_bit(work_ctx->pending,
> +                                      sim->irq_count, offset);
> +               clear_bit(offset, work_ctx->pending);
> +               irqnum =3D irq_sim_irqnum(sim, offset);
> +               handle_simple_irq(irq_to_desc(irqnum));
> +       }
>  }
>
>  /**
> @@ -63,6 +74,13 @@ int irq_sim_init(struct irq_sim *sim, unsigned int num=
_irqs)
>                 return sim->irq_base;
>         }
>
> +       sim->work_ctx.pending =3D bitmap_zalloc(num_irqs, GFP_KERNEL);
> +       if (!sim->work_ctx.pending) {
> +               kfree(sim->irqs);
> +               irq_free_descs(sim->irq_base, num_irqs);
> +               return -ENOMEM;
> +       }
> +
>         for (i =3D 0; i < num_irqs; i++) {
>                 sim->irqs[i].irqnum =3D sim->irq_base + i;
>                 sim->irqs[i].enabled =3D false;
> @@ -89,6 +107,7 @@ EXPORT_SYMBOL_GPL(irq_sim_init);
>  void irq_sim_fini(struct irq_sim *sim)
>  {
>         irq_work_sync(&sim->work_ctx.work);
> +       bitmap_free(sim->work_ctx.pending);
>         irq_free_descs(sim->irq_base, sim->irq_count);
>         kfree(sim->irqs);
>  }
> @@ -143,7 +162,7 @@ EXPORT_SYMBOL_GPL(devm_irq_sim_init);
>  void irq_sim_fire(struct irq_sim *sim, unsigned int offset)
>  {
>         if (sim->irqs[offset].enabled) {
> -               sim->work_ctx.irq =3D irq_sim_irqnum(sim, offset);
> +               set_bit(offset, sim->work_ctx.pending);
>                 irq_work_queue(&sim->work_ctx.work);
>         }
>  }
> --
> 2.19.1
>

Ping and Cc'ing Marc Zyngier. Any chance of getting this in for 4.21?

Bart
