Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:39:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 13224580261;
	Wed, 19 Dec 2018 07:31:44 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 07:31:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AEU3XFR80LCmGMf9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+MTIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIy+?=
 =?us-ascii?q?YYsBCOUOMvpXoYnmv1sDrwCzBRW1BO711jNFnGP60K883u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rTttr1LrkdUeOox6TV0zrDb+lO2THg44XPdxAuu+uMUqxzccbL0kYgCQPFjkiW?=
 =?us-ascii?q?qYH+OTOV1/gCv3KH4OthTO+ijXMspQJpojW32Msglo3EipgIxl3K6yl12ps5KN?=
 =?us-ascii?q?6kREJhYNOpEoNcuz+GO4dqX88vRnxktSk5x7AFvJO7ciYKyJo5yBPaavGKdpSH?=
 =?us-ascii?q?7Qj/W+uTJDp1inJodby7ihu380WgxPDwVsex3VtFrydInN/BvW0X2RPJ8MiIUP?=
 =?us-ascii?q?5981+h2TmR0wDT7flJIV47laXFMZ4t2L0wmYQJsUTFACD2nF/6jKiMdkUr4uSo?=
 =?us-ascii?q?6uLnbav6ppKEKYN4lgXzPr4zlsGxH+g0KBUCUmuH9eim1bDu/1X1QLBQgf03lq?=
 =?us-ascii?q?nZvoraJcMepqOhBw9V04Aj6wuwDju/09QXg2MHLFRbdxKDloTpPF/PIPbmAvel?=
 =?us-ascii?q?mFmsjjhryO7cPrH7AZXCMGLDkLH/crZ58UJczxAzzd9H65JOFr4BOO7zWlP2tN?=
 =?us-ascii?q?HACh85Mg+0zPj9BNRyy4MTQmaPAq6fMKPPvl6E/OMvI++QZIALvDbxMeQq5/nr?=
 =?us-ascii?q?jXUhg18SYbGp3YcLaHC/BvlmI1+WYXvwgtgbFmcGpAo+TPHwh12EXj5efHKyX6?=
 =?us-ascii?q?M65jEmB4OqF4bDRoaxgLOf2Ce3BIFZZmdDClqUC3fna52EW+sQaCKVOsJhkDsE?=
 =?us-ascii?q?Wqa7R48i0hGusgn6y718I+rQ+y0Ys4/j1ddv6+3SkxEy6SJ7D8CH326RSGF0m3?=
 =?us-ascii?q?sCRyUq06BnvUx91lCD3LBijPxDFdxT4PBJXh0gNZHGzex3ENTyWgPHfteUR1eq?=
 =?us-ascii?q?WNSmATctTt0vx98CeVpyG9KnjhrbxSqlH6cVl6CXBJwz6q/c3GL+J8Bnx3bC1a?=
 =?us-ascii?q?kulV8mQsRUOG2ih65/8RXTBoHTn0WYkaaqaboT3CrX+GifymqOuVlSUBRsXqXd?=
 =?us-ascii?q?QXAfekzWoMzk6UzYUb+hF64rMgtbxs6EMatFdNvpgVJCRPfgPdTeZ3m8m2OxBR?=
 =?us-ascii?q?aO27ONY5Dme2Qb3CXBFkcElxof8mqBNQg7Hi2huX7RDCRyFVLzZEPh6fRxp2ml?=
 =?us-ascii?q?TkAq1Q2Kb1du17yu+hELg/yRUPcT3rMCuCc8pDR4Ble939TKC9WeowptZrlTYd?=
 =?us-ascii?q?Q44F1fz2LWqxR9PoC8L6BlnlMebwV3v0bp1xVrCoVBkdImrG8wwAp1M6KY1FJB?=
 =?us-ascii?q?dzWX3Z3rPr3XK2/y/A2gaqLM21He1sqW9bkL6Pgit1rjuwSpHFI483p7y9lVz2?=
 =?us-ascii?q?ec5pLSAQUIVZL+TEk2+AZ6pr3AeSY9+p7b2mdqMam3tT/CxckkBO8kyhamYtde?=
 =?us-ascii?q?P7mIFA70E80GGceuLPYmlESubhIBJOpS7rI7P9u6d/ua366mJOZhnC+8gWtb+o?=
 =?us-ascii?q?x800KM+DB6Su7HxJsFx/CY3g2aVzbzlluhs8b3mZxaajEWBGaw1S/kBItJbK1o?=
 =?us-ascii?q?YYkLEXuuI9GwxthmnZ7tWmJX+0S5B1wb38+lYxySYELn3Q1RzEgYvWaomS+lwD?=
 =?us-ascii?q?NqiTEpqayf0TfKw+TjchoHJ2FKSHNjjVfqPYi7kdQaUFK0YAgukRuv/Vz6yLRD?=
 =?us-ascii?q?pKRjM2nTRl9Ffij3L214Uqq8rKGCY9NJ6J4ztSVXUeK8YU2VS7Lnohsa1T/jEH?=
 =?us-ascii?q?VaxDwhaz6qvZD5lQRgiG2BNHZzsGbZecZoyBfd/tPcX/1R3jkBRCVikjnYHFu8?=
 =?us-ascii?q?P9qo/dWSiZjDtPuzV2agVp1VbCnqwpmMtCq95W12HxK/m+q/lcHgEQg/ySX7zc?=
 =?us-ascii?q?VlVT3UrBbgZYnmz6S7PvhgfkVyBl/86sx6F5p6kosxgpEQxHcbio+U/XoBjWf8?=
 =?us-ascii?q?L9Fb1bjiY3oKQD4B28TV7xT92E1/MnKJwJr0VnaHzctgfdW6Yn4W1Tg778BFE6?=
 =?us-ascii?q?qU6L1EnS1oolu3tw7RYP59nisDxvsq8nIVn+YJuA81xCWHHr8SBVVYPTDrlxmQ?=
 =?us-ascii?q?6tC+raZXa3y1fbm+ykV+hsyhA6+Yog5HRnn5YJgiEDR07sV+NlLMzXLy5pvleN?=
 =?us-ascii?q?nWcdIcqBmUnw3cgOhSLZI7juAKijZ/OWLhoX0lzPY2jQBp3ZG/poSGKn9i/KSk?=
 =?us-ascii?q?Ah5DLT31Ztge+jXsjaZYg8aX0JqjHpRnGjUXQpToSeikHy4VtfTiLwyOCiEzqm?=
 =?us-ascii?q?+HGbrDGg+S8FxpoGjIE5CvKnGbPn0Zzch5SRmZJUxfhh0UXTogkp44EACq2NLu?=
 =?us-ascii?q?cENj6j8N4V74rwNGyvh0OBnnTmffuACoZy82SJeFKRpZ8BpC613JMcCE7eJzAi?=
 =?us-ascii?q?JY/oCnrAOXMWyWfABIDWAPWkyZCFHvJLiu5d/c8+eGAuqyNefBYbKLqeZGTfeH?=
 =?us-ascii?q?2Yqv0pd6/zaLLsiOPn5iD+Ai2kpeR395Hd7Vmy4ISywRmCLAdMqbpBa6+i1qoc?=
 =?us-ascii?q?Gz6vXrWATz5YSRD7teK8lg+xezga2bLe6fmD55KSpE1pML3XLIyKYQ3F8RiyFt?=
 =?us-ascii?q?djmhC7cAtTTKTKLfhKBXFQMbazhoOctM7qI82BRNOMHBhtP00L54kuA6C1NfWV?=
 =?us-ascii?q?P9ncGpYNQAI3uhO1PfGEaLKLOGKCXRzMHqeqy8U6NfjeVOux20uDaWCEvjPjWF?=
 =?us-ascii?q?lzn0WBGjK+BMjCeHPBNAvIGxaApiCW/mTNj+cB20LMd3jSEqwb0znn7KKW8cMT?=
 =?us-ascii?q?1mf0xRtLGf8SNYjet5G2Fa6nplLO+EmzuW7uXCK5YWt+drDTpwl+5A/Hs6zL5V?=
 =?us-ascii?q?5jleRPNpgCvSssJuo1a+n+iP0DVnVh9OqjdNhI2TvERiOb/W9p9PWXvf+BIN7G?=
 =?us-ascii?q?OQCwkFptd/C93vvbxQxcbLlK7pNDhC9NfUroMgAJ32IdmcMTILKxPzUGrWBRAe?=
 =?us-ascii?q?TCWqM27fjVZUitmd83SUqt4xrZ26y7QUTboOcVUvG/BSIElljtpKdJJ+RD4n17?=
 =?us-ascii?q?SWjNMOzXy/p1/aVpMJ7dj8SvuODKC3e36ihr5eak5NmOugIA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACIYxpch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYEvgjsng32IGYt8gg0Ul0kUgWIqEwGHLSI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpIwxCARABgWIkAYJiAQICAQECIAQZAQE3AQQBCQEBChoCBSECA?=
 =?us-ascii?q?gMMSAYTBYMdgXoIAQMBpzZwfDOCdgEBBYVWgVIIgQuLNIIWgRGCZC6ERRqDKoJ?=
 =?us-ascii?q?XiUGGGYFPkA0HApFWDBiRWZtIgg4zg3mCGwwXg3KKLD8ygQUBAYRWhkyCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0ATAACIYxpch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBAYE?=
 =?us-ascii?q?vgjsng32IGYt8gg0Ul0kUgWIqEwGHLSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpI?=
 =?us-ascii?q?wxCARABgWIkAYJiAQICAQECIAQZAQE3AQQBCQEBChoCBSECAgMMSAYTBYMdgXo?=
 =?us-ascii?q?IAQMBpzZwfDOCdgEBBYVWgVIIgQuLNIIWgRGCZC6ERRqDKoJXiUGGGYFPkA0HA?=
 =?us-ascii?q?pFWDBiRWZtIgg4zg3mCGwwXg3KKLD8ygQUBAYRWhkyCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="67537366"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 19 Dec 2018 07:31:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729165AbeLSPbj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 10:31:39 -0500
Received: from mail.nic.cz ([217.31.204.67]:40936 "EHLO mail.nic.cz"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727494AbeLSPbj (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 10:31:39 -0500
Received: from dellmb.labs.office.nic.cz (unknown [IPv6:2001:1488:fffe:6:cac7:3539:7f1f:463])
        by mail.nic.cz (Postfix) with ESMTPS id 9729162A74;
        Wed, 19 Dec 2018 16:31:36 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=nic.cz; s=default;
        t=1545233496; bh=djuxDkz/MhwahEInJjWhb8aOyvrhqfFB5tLeCVBgcgA=;
        h=Date:From:To;
        b=h6h9uKcuMr/nhCXOvA5WIW/LWOOGfJNvhQmydItlFthzt1Th5aqQpQkobKn0cHGaY
         noIX6T6cIEIiMQ/4iyXvADrFxnFd3FY8yQ7g2RIngJW9ER8zRy24rcaRMY1VX9T+XN
         WDzo5P3lBzZ91sJhs7K8MWwwMoQzj2xpLouby39o=
Date: Wed, 19 Dec 2018 16:31:28 +0100
From: Marek =?ISO-8859-1?Q?Beh=FAn?= <marek.behun@nic.cz>
To: Jassi Brar <jassisinghbrar@gmail.com>
Cc: linux-kernel@vger.kernel.org,
        Gregory CLEMENT <gregory.clement@bootlin.com>,
        linux-arm-kernel@lists.infradead.org
Subject: Re: [PATCH v1 1/3] mailbox: Add support for Armada 37xx rWTM
 mailbox
Message-ID: <20181219163128.7dceb645@dellmb.labs.office.nic.cz>
In-Reply-To: <20181217153706.25873-1-marek.behun@nic.cz>
References: <20181217153706.25873-1-marek.behun@nic.cz>
X-Mailer: Claws Mail 3.15.0-dirty (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-Virus-Scanned: clamav-milter 0.99.2 at mail
X-Virus-Status: Clean
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

I forgot to git add the header file containing definitions of
structures for messages :(. Will send in the next version.

On Mon, 17 Dec 2018 16:37:04 +0100
Marek Beh=C3=BAn <marek.behun@nic.cz> wrote:

> This adds support for the mailbox via which the kernel can communicate
> with the firmware running on the secure processor of the Armada 37xx
> SOC.
>=20
> The rWTM secure processor has access to internal eFuses and
> cryptographic circuits, such as the Entropy Bit Generator to generate
> true random numbers.
>=20
> Signed-off-by: Marek Beh=C3=BAn <marek.behun@nic.cz>
> ---
>  drivers/mailbox/Kconfig                    |  10 +
>  drivers/mailbox/Makefile                   |   2 +
>  drivers/mailbox/armada-37xx-rwtm-mailbox.c | 227
> +++++++++++++++++++++ 3 files changed, 239 insertions(+)
>  create mode 100644 drivers/mailbox/armada-37xx-rwtm-mailbox.c
>=20
> diff --git a/drivers/mailbox/Kconfig b/drivers/mailbox/Kconfig
> index 3eeb12e93e98..939927290ac6 100644
> --- a/drivers/mailbox/Kconfig
> +++ b/drivers/mailbox/Kconfig
> @@ -41,6 +41,16 @@ config PL320_MBOX
>  	  Management Engine, primarily for cpufreq. Say Y here if
> you want to use the PL320 IPCM support.
> =20
> +config ARMADA_37XX_RWTM_MBOX
> +	tristate "Armada 37xx rWTM BIU Mailbox"
> +	depends on ARCH_MVEBU || COMPILE_TEST
> +	depends on OF
> +	help
> +	  Mailbox implementation for communication with the the
> firmware
> +	  running on the Cortex-M3 rWTM secure processor of the
> Armada 37xx
> +	  SOC. Say Y here if you are building for such a device (for
> example
> +	  the Turris Mox router).
> +
>  config OMAP2PLUS_MBOX
>  	tristate "OMAP2+ Mailbox framework support"
>  	depends on ARCH_OMAP2PLUS
> diff --git a/drivers/mailbox/Makefile b/drivers/mailbox/Makefile
> index c818b5d011ae..792894db6b43 100644
> --- a/drivers/mailbox/Makefile
> +++ b/drivers/mailbox/Makefile
> @@ -9,6 +9,8 @@ obj-$(CONFIG_ARM_MHU)	+=3D arm_mhu.o
> =20
>  obj-$(CONFIG_IMX_MBOX)	+=3D imx-mailbox.o
> =20
> +obj-$(CONFIG_ARMADA_37XX_RWTM_MBOX)	+=3D
> armada-37xx-rwtm-mailbox.o +
>  obj-$(CONFIG_PLATFORM_MHU)	+=3D platform_mhu.o
> =20
>  obj-$(CONFIG_PL320_MBOX)	+=3D pl320-ipc.o
> diff --git a/drivers/mailbox/armada-37xx-rwtm-mailbox.c
> b/drivers/mailbox/armada-37xx-rwtm-mailbox.c new file mode 100644
> index 000000000000..b8b3e8cd49f0
> --- /dev/null
> +++ b/drivers/mailbox/armada-37xx-rwtm-mailbox.c
> @@ -0,0 +1,227 @@
> +// SPDX-License-Identifier: GPL-2.0+
> +/*
> + * rWTM BIU Mailbox driver for Armada 37xx
> + *
> + * Author: Marek Behun <marek.behun@nic.cz>
> + */
> +
> +#include <linux/device.h>
> +#include <linux/interrupt.h>
> +#include <linux/io.h>
> +#include <linux/kernel.h>
> +#include <linux/mailbox_controller.h>
> +#include <linux/module.h>
> +#include <linux/of.h>
> +#include <linux/platform_device.h>
> +#include <linux/armada-37xx-rwtm-mailbox.h>
> +
> +#define DRIVER_NAME	"armada-37xx-rwtm-mailbox"
> +
> +/* relative to rWTM BIU Mailbox Registers */
> +#define RWTM_MBOX_PARAM(i)		(0x0 + ((i) << 2))
> +#define RWTM_MBOX_COMMAND		0x40
> +#define RWTM_MBOX_RETURN_STATUS		0x80
> +#define RWTM_MBOX_STATUS(i)		(0x84 + ((i) << 2))
> +#define RWTM_MBOX_FIFO_STATUS		0xc4
> +#define FIFO_STS_RDY			0x100
> +#define FIFO_STS_CNTR_MASK		0x7
> +#define FIFO_STS_CNTR_MAX		4
> +
> +#define RWTM_HOST_INT_RESET		0xc8
> +#define RWTM_HOST_INT_MASK		0xcc
> +#define SP_CMD_COMPLETE			BIT(0)
> +#define SP_CMD_QUEUE_FULL_ACCESS	BIT(17)
> +#define SP_CMD_QUEUE_FULL		BIT(18)
> +
> +struct a37xx_mbox {
> +	struct device *dev;
> +	struct mbox_controller controller;
> +	void __iomem *base;
> +	int irq;
> +};
> +
> +static void a37xx_mbox_receive(struct mbox_chan *chan)
> +{
> +	struct a37xx_mbox *mbox =3D chan->con_priv;
> +	struct armada_37xx_rwtm_rx_msg rx_msg;
> +	int i;
> +
> +	rx_msg.retval =3D readl(mbox->base + RWTM_MBOX_RETURN_STATUS);
> +	for (i =3D 0; i < 16; ++i)
> +		rx_msg.status[i] =3D readl(mbox->base +
> RWTM_MBOX_STATUS(i)); +
> +	mbox_chan_received_data(chan, &rx_msg);
> +}
> +
> +static irqreturn_t a37xx_mbox_irq_handler(int irq, void *data)
> +{
> +	struct mbox_chan *chan =3D data;
> +	struct a37xx_mbox *mbox =3D chan->con_priv;
> +	u32 reg;
> +
> +	reg =3D readl(mbox->base + RWTM_HOST_INT_RESET);
> +
> +	if (reg & SP_CMD_COMPLETE)
> +		a37xx_mbox_receive(chan);
> +
> +	if (reg & (SP_CMD_QUEUE_FULL_ACCESS | SP_CMD_QUEUE_FULL))
> +		dev_err(mbox->dev, "Secure processor command queue
> full\n"); +
> +	writel(reg, mbox->base + RWTM_HOST_INT_RESET);
> +	if (reg)
> +		mbox_chan_txdone(chan, 0);
> +
> +	return reg ? IRQ_HANDLED : IRQ_NONE;
> +}
> +
> +static int a37xx_mbox_send_data(struct mbox_chan *chan, void *data)
> +{
> +	struct a37xx_mbox *mbox =3D chan->con_priv;
> +	struct armada_37xx_rwtm_tx_msg *msg =3D data;
> +	int i;
> +	u32 reg;
> +
> +	if (!data)
> +		return -EINVAL;
> +
> +	reg =3D readl(mbox->base + RWTM_MBOX_FIFO_STATUS);
> +	if (!(reg & FIFO_STS_RDY)) {
> +		dev_err(mbox->dev, "Secure processor not ready\n");
> +		return -EAGAIN;
> +	}
> +
> +	if ((reg & FIFO_STS_CNTR_MASK) >=3D FIFO_STS_CNTR_MAX) {
> +		dev_err(mbox->dev, "Secure processor command queue
> full\n");
> +		return -EBUSY;
> +	}
> +
> +	for (i =3D 0; i < 16; ++i)
> +		writel(msg->args[i], mbox->base +
> RWTM_MBOX_PARAM(i));
> +	writel(msg->command, mbox->base + RWTM_MBOX_COMMAND);
> +
> +	return 0;
> +}
> +
> +static int a37xx_mbox_startup(struct mbox_chan *chan)
> +{
> +	struct a37xx_mbox *mbox =3D chan->con_priv;
> +	u32 reg;
> +	int ret;
> +
> +	ret =3D devm_request_irq(mbox->dev, mbox->irq,
> a37xx_mbox_irq_handler, 0,
> +			       DRIVER_NAME, chan);
> +	if (ret < 0) {
> +		dev_err(mbox->dev, "Cannot request irq\n");
> +		return ret;
> +	}
> +
> +	/* enable IRQ generation */
> +	reg =3D readl(mbox->base + RWTM_HOST_INT_MASK);
> +	reg &=3D ~(SP_CMD_COMPLETE | SP_CMD_QUEUE_FULL_ACCESS |
> SP_CMD_QUEUE_FULL);
> +	writel(reg, mbox->base + RWTM_HOST_INT_MASK);
> +
> +	return 0;
> +}
> +
> +static void a37xx_mbox_shutdown(struct mbox_chan *chan)
> +{
> +	u32 reg;
> +	struct a37xx_mbox *mbox =3D chan->con_priv;
> +
> +	/* disable interrupt generation */
> +	reg =3D readl(mbox->base + RWTM_HOST_INT_MASK);
> +	reg |=3D SP_CMD_COMPLETE | SP_CMD_QUEUE_FULL_ACCESS |
> SP_CMD_QUEUE_FULL;
> +	writel(reg, mbox->base + RWTM_HOST_INT_MASK);
> +
> +	devm_free_irq(mbox->dev, mbox->irq, chan);
> +}
> +
> +static const struct mbox_chan_ops a37xx_mbox_ops =3D {
> +	.send_data	=3D a37xx_mbox_send_data,
> +	.startup	=3D a37xx_mbox_startup,
> +	.shutdown	=3D a37xx_mbox_shutdown,
> +};
> +
> +static int armada_37xx_mbox_probe(struct platform_device *pdev)
> +{
> +	struct a37xx_mbox *mbox;
> +	struct resource *regs;
> +	struct mbox_chan *chans;
> +	int ret;
> +
> +	mbox =3D devm_kzalloc(&pdev->dev, sizeof(*mbox), GFP_KERNEL);
> +	if (!mbox)
> +		return -ENOMEM;
> +
> +	/* Allocated one channel */
> +	chans =3D devm_kzalloc(&pdev->dev, sizeof(*chans), GFP_KERNEL);
> +	if (!chans)
> +		return -ENOMEM;
> +
> +	regs =3D platform_get_resource(pdev, IORESOURCE_MEM, 0);
> +
> +	mbox->base =3D devm_ioremap_resource(&pdev->dev, regs);
> +	if (IS_ERR(mbox->base)) {
> +		dev_err(&pdev->dev, "ioremap failed\n");
> +		return PTR_ERR(mbox->base);
> +	}
> +
> +	mbox->irq =3D platform_get_irq(pdev, 0);
> +	if (mbox->irq < 0) {
> +		dev_err(&pdev->dev, "Cannot get irq\n");
> +		return mbox->irq;
> +	}
> +
> +	mbox->dev =3D &pdev->dev;
> +
> +	/* Hardware supports only one channel. */
> +	chans[0].con_priv =3D mbox;
> +	mbox->controller.dev =3D mbox->dev;
> +	mbox->controller.num_chans =3D 1;
> +	mbox->controller.chans =3D chans;
> +	mbox->controller.ops =3D &a37xx_mbox_ops;
> +	mbox->controller.txdone_irq =3D true;
> +
> +	ret =3D mbox_controller_register(&mbox->controller);
> +	if (ret) {
> +		dev_err(&pdev->dev, "Could not register mailbox
> controller\n");
> +		return ret;
> +	}
> +
> +	platform_set_drvdata(pdev, mbox);
> +	return ret;
> +}
> +
> +static int armada_37xx_mbox_remove(struct platform_device *pdev)
> +{
> +	struct a37xx_mbox *mbox =3D platform_get_drvdata(pdev);
> +
> +	if (!mbox)
> +		return -EINVAL;
> +
> +	mbox_controller_unregister(&mbox->controller);
> +
> +	return 0;
> +}
> +
> +static const struct of_device_id armada_37xx_mbox_match[] =3D {
> +	{ .compatible =3D "marvell,armada-37xx-rwtm-mailbox" },
> +	{ },
> +};
> +
> +MODULE_DEVICE_TABLE(of, armada_37xx_mbox_match);
> +
> +static struct platform_driver armada_37xx_mbox_driver =3D {
> +	.probe	=3D armada_37xx_mbox_probe,
> +	.remove	=3D armada_37xx_mbox_remove,
> +	.driver	=3D {
> +		.name		=3D DRIVER_NAME,
> +		.of_match_table	=3D armada_37xx_mbox_match,
> +	},
> +};
> +
> +module_platform_driver(armada_37xx_mbox_driver);
> +
> +MODULE_LICENSE("GPL v2");
> +MODULE_DESCRIPTION("rWTM BIU Mailbox driver for Armada 37xx");
> +MODULE_AUTHOR("Marek Behun <marek.behun@nic.cz>");

