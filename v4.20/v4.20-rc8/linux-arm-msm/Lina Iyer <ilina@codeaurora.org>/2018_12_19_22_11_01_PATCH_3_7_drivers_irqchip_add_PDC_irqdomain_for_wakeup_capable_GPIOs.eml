Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:43:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0A209580522;
	Wed, 19 Dec 2018 14:11:43 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 14:11:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFtYYURNaDI3bTOnDm8kl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KP/9rsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/nzZhMJzi6xUohyhqBNwzY7PeIGYNuFzcr/ecN4AWWZMRNpdWzBHD4ih?=
 =?us-ascii?q?b4UPFe0BPeNAoof7plsOqwGxDhSvCuLv1DBInGL90Ko70+QlEAHG2hYvEskSv3?=
 =?us-ascii?q?TTsdr6Kr0dUf2vzKnP1zXMdela2TDn6IjHax0sp+yHU7FoccfJ10UjCwfIgk+N?=
 =?us-ascii?q?pYHrIT+ZzPkBvmuH4+Z6VO+iiXYrpxx1rzWr3Msgl5XFi4MPxlzZ6Sl0zpw5Kc?=
 =?us-ascii?q?O4RUN0Z9OvDYFeuDuAN4RsR8MvW2Fotzg+yr0BoZO7YicKx4o9xxLFaPyIbZKI?=
 =?us-ascii?q?4hT9W+aVOzt4g2hleL2nixaz90iv1PH8W9Gq3FpWqidJiMTAu34T2xDJ98SKSe?=
 =?us-ascii?q?dx8l2g1DuNzwzT7/tLIUEwlarVMZ4hxbswm4IXsUTCGC/2hUr3gLaVdko64Oio?=
 =?us-ascii?q?7froYrH/qp+bOY50jB/xMr41l8yhDuQ3LBIOU3KY+euizr3j+1P2QLFQgv0xiK?=
 =?us-ascii?q?nZv4jWJd4Hqa6hHw9VzoEj5g67Dzen09QXg2MLLV1YeB+ci4jpOlfOIO33DPul?=
 =?us-ascii?q?glSslitryO7CPrH7HprNKX3Dmq/7fblh805c1BYzzddH6pJUEL4BIe7zVVX2tN?=
 =?us-ascii?q?DCDh85Lha7w+DoCNhm0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0l7eb0?=
 =?us-ascii?q?jXAlgV8dYbWp3ZwPZX+iBfRmI0KZYXn2jtcbC2gKvBEzTOjriF2ETD5SaGy+X6?=
 =?us-ascii?q?M65jEnFo2mCZ3PSZyqgLyExC27BIFZZnhaClCQFnflb4aEVO0KaC6IJs9hkyYL?=
 =?us-ascii?q?Vb6uS4I60RGutQn6y6doL+bO+y0Ys47j28Zx5+HJiR4y8jl0BdyH026RV2F0gn?=
 =?us-ascii?q?8IRzgu0a9iu0N91EmM3bJ4g/NCE9xT/O1GUgE9OZ7YzOx6DtTyVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8KNtnxHbYyq?=
 =?us-ascii?q?YtlVkmTdFJNW29mKF/8RPeB4rIk0Wfiqarer4Q3C/L9Gef02WOuFtUXxJ3UaXA?=
 =?us-ascii?q?RXoffFfZrczl5kPeSL+jEagnMgpEyc6FNqtKat3ogU9aRPv5P9TeeWaxm2a2BR?=
 =?us-ascii?q?aH3b6MaIvqe2MA3CTSEkQEkgYT/WqYOgg6HCuuv2XeDDl2H1L1f0zs6fV+qG+8?=
 =?us-ascii?q?TkIs1Q6Ka1Nu1rWr9R8Vn/CTUO4T0a8etycnqDV0G0i90snSC9qBoQphYapdbc?=
 =?us-ascii?q?k84FdByWLWqQh9Moa8IKBlg14Uax53sF/21xVrFoVAltAnrXM3zAZoNa2UylJA?=
 =?us-ascii?q?dzOC0pD2Nb3aMW3y/BGpa67L1VDSyteW+qET6Psmr1Xvph2mFk0n839/ydlaz2?=
 =?us-ascii?q?Oc5onWDAoVSZ/xSEc3+ARgqLHAfyY94JnY1XtyPqmusz/Ows4mC/Ehyhm9Ydhf?=
 =?us-ascii?q?KqSEFAnpHs0eBsiuLvEqmlezYhIFOuBS6LA7P8e8e/Sa366rOf5qnCi6gmRf/I?=
 =?us-ascii?q?B9zkWM+jJ8S+7JxZoEw+uU3hCaVzf6l1qhtsH3mYZZZTAdBGa/yC7kBJJPaa12?=
 =?us-ascii?q?Z4oEFWCuI8ivzNVkm5HtQ2JY9EKkB14e2s+mYwCSb1/+3Q1Xz0gXumaomSi7zz?=
 =?us-ascii?q?x1lTEmsKyf0TfKw+TjchoHJ2FKSHNjjVfqPYi7kdQaUFK0YAgukRuv/Vz6yLRD?=
 =?us-ascii?q?pKRjM2nTRl9FfijsIGFlSKewtLuCY8hU5ZMssCVXVvm8YF+ARr78pRsazz3sH2?=
 =?us-ascii?q?9EyD8ncDGqv43znwZmh2KFMHZzsH3ZdNlzxRjF5dzQX/5R3iccSyl+hjnaHVy8?=
 =?us-ascii?q?P9iv/dWJmJbPqOG+V2S9VpJNdSnn15+PtCy+5WdyGx2wg+izmsH7EQg9ySL70t?=
 =?us-ascii?q?hqVSbSoxrmbIjkyb+6Mf55cUlyH1Dz9dB6Go5ln4s0hZEQ32Uah5qP8XoGl2fz?=
 =?us-ascii?q?LctU2abkYHURQj4Lxsbf4BL51017MnKJ24X5W22BwstmYtm2eGIX1Tg778BXE6?=
 =?us-ascii?q?eU971EkDBxolq5qwLRfPd8ki0cyfso9H4VneUJtBAxwSWaB7AYBVNYMjD0lxSU?=
 =?us-ascii?q?89C+q71aa321fri30Ep+gMqtDLWfogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NGL/p3IlzvA0jQd00ZGmpoSHKHht/KGk?=
 =?us-ascii?q?Ah5eLDL1fNge+jXsjaZYg8aX0JqjHpRnGjUXQpToSeikHy4VtfTiLwyOCiEzqm?=
 =?us-ascii?q?+HGbrDGg+S8Ednr3XSE5CyKnGYPn8Zwc95RBmaIkxfjxsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9gFC6FnUMcyd7eJzHj?=
 =?us-ascii?q?tU/p67rAyKJWyUeR5IDXwSWkGfA1DjP7+u5cTP8uSCB+q+KefObquKqeBES/iI?=
 =?us-ascii?q?wpev2JN8/zmQLsWPImViD/oj10VZQHB2AN7ZlCsPSiANkyLNbtWWpBO9+i1xs8?=
 =?us-ascii?q?C+/+7nWAPp5YuTFbRSNc9j9AyxgaeGL+SQnjp2KS5E1pMQwn/F0KQf3F8Xiy10?=
 =?us-ascii?q?azahC6gPtS7TQ6LWgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fBEeELrKGJTjKw8Hxeay9SL1Qg/9Stx2/ojubF07jPjKe?=
 =?us-ascii?q?lzjmTRyvMOdMjD2FMxxaoo2ybhFtCW2wBO7hPwaxN857pT4727s5gjXNL2FYeT?=
 =?us-ascii?q?VifFlAo7u45iNChfB+BmkH6WBqaaGBkjySqfvJLJkXvOFDCz5x0eld5ScU0bxQ?=
 =?us-ascii?q?uQVFQvU9uTrftJY6olWnlOCnwT1rXRNTsDFRjcSMp0o0avaRzYVJRXuRpEFF1m?=
 =?us-ascii?q?6XERlf/9Y=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAAC3wRpch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYIAgWsnjBZfjEdjFIENljwUgWISGBMBhy0iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYigmUDAwECJAsBDQEBNwEFCQEBHzEDKREaBxIFg?=
 =?us-ascii?q?x2CAgWnOoFsM4J2AQEFhykIh36DJYEcF4F/gRGHWIYaiUGHF1GPQksJkVYkiXe?=
 =?us-ascii?q?HYolIkDqBRoIOMxoIKAiDJ4IbDBeIXoVfIDKBBAEBAY1gAQE?=
X-IPAS-Result: =?us-ascii?q?A0AFAAC3wRpch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYIAgWsnjBZfjEdjFIENljwUgWISGBMBhy0iNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYigmUDAwECJAsBDQEBNwEFCQEBHzEDKREaBxIFgx2CAgWnOoFsM4J?=
 =?us-ascii?q?2AQEFhykIh36DJYEcF4F/gRGHWIYaiUGHF1GPQksJkVYkiXeHYolIkDqBRoIOM?=
 =?us-ascii?q?xoIKAiDJ4IbDBeIXoVfIDKBBAEBAY1gAQE?=
X-IronPort-AV: E=Sophos;i="5.56,374,1539673200"; 
   d="scan'208";a="45720171"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 14:11:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729796AbeLSWLi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 17:11:38 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:44672 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1729680AbeLSWLe (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 17:11:34 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 058DD60886; Wed, 19 Dec 2018 22:11:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545257493;
        bh=mRkZSi5i/SMFfp0127rUNIzf0utqIZ/0JlGgxYeT7cA=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=n0Nwm/lAdrEXEBK62Pvdya5TBTBuCKU3LtFJgadPB7fKWxpQo7I3l0beAyJEumOvA
         WuWKvkQPXXGpt8wotfGmHBldDhxGE0WqvXY5H/T4rwuo/4CGPJzVXXDMTbbE9COydd
         a+uZz78MaiiiYB9icbMtzdd4y/AJ32nRurVgELcA=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from codeaurora.org (i-global254.qualcomm.com [199.106.103.254])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: ilina@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id C4C3B60878;
        Wed, 19 Dec 2018 22:11:30 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1545257491;
        bh=mRkZSi5i/SMFfp0127rUNIzf0utqIZ/0JlGgxYeT7cA=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=f11zoYX2foePkouBGGpeIFfRtK/iNDUo20d5DtErABYxC7KbVuNGv53K2ScKjiMYf
         MyTRFJ03PmHdr1Ae1SPiap4zCgLxe5aRPrWv55Ypsx431I0rgPHm3LMYQOzKX7eqFR
         p0C5F3i+8Q07N+AUQMHYFMZC/E2QZHoz7p1RP1oQ=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org C4C3B60878
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=ilina@codeaurora.org
From: Lina Iyer <ilina@codeaurora.org>
To: sboyd@kernel.org, evgreen@chromium.org, marc.zyngier@arm.com
Cc: linux-kernel@vger.kernel.org, rplsssn@codeaurora.org,
        linux-arm-msm@vger.kernel.org, thierry.reding@gmail.com,
        bjorn.andersson@linaro.org, Lina Iyer <ilina@codeaurora.org>
Subject: [PATCH 3/7] drivers: irqchip: add PDC irqdomain for wakeup capable GPIOs
Date: Wed, 19 Dec 2018 15:11:01 -0700
Message-Id: <20181219221105.3004-4-ilina@codeaurora.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20181219221105.3004-1-ilina@codeaurora.org>
References: <20181219221105.3004-1-ilina@codeaurora.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Stephen Boyd <sboyd@kernel.org>

Introduce a new domain for wakeup capable GPIOs. The domain can be
requested using the bus token DOMAIN_BUS_WAKEUP. In the following
patches, we will specify PDC as the wakeup-parent for the TLMM GPIO
irqchip. Requesting a wakeup GPIO will setup the GPIO and the
corresponding PDC interrupt as its parent.

Also, provide the map of the PDC pins for the GPIOs for SDM845.

Signed-off-by: Stephen Boyd <sboyd@kernel.org>
Signed-off-by: Lina Iyer <ilina@codeaurora.org>
[ilina: create separate file for PDC data]
---
 drivers/irqchip/Makefile        |   2 +-
 drivers/irqchip/qcom-pdc-data.c |  94 +++++++++++++++++++++++++++
 drivers/irqchip/qcom-pdc.c      | 111 +++++++++++++++++++++++++++++---
 drivers/irqchip/qcom-pdc.h      |  24 +++++++
 include/linux/soc/qcom/irq.h    |  23 +++++++
 5 files changed, 244 insertions(+), 10 deletions(-)
 create mode 100644 drivers/irqchip/qcom-pdc-data.c
 create mode 100644 drivers/irqchip/qcom-pdc.h
 create mode 100644 include/linux/soc/qcom/irq.h

diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
index 794c13d3ac3d..9c172f1328de 100644
--- a/drivers/irqchip/Makefile
+++ b/drivers/irqchip/Makefile
@@ -87,7 +87,7 @@ obj-$(CONFIG_ARCH_SYNQUACER)		+= irq-sni-exiu.o
 obj-$(CONFIG_MESON_IRQ_GPIO)		+= irq-meson-gpio.o
 obj-$(CONFIG_GOLDFISH_PIC) 		+= irq-goldfish-pic.o
 obj-$(CONFIG_NDS32)			+= irq-ativic32.o
-obj-$(CONFIG_QCOM_PDC)			+= qcom-pdc.o
+obj-$(CONFIG_QCOM_PDC)			+= qcom-pdc.o qcom-pdc-data.o
 obj-$(CONFIG_CSKY_MPINTC)		+= irq-csky-mpintc.o
 obj-$(CONFIG_CSKY_APB_INTC)		+= irq-csky-apb-intc.o
 obj-$(CONFIG_SIFIVE_PLIC)		+= irq-sifive-plic.o
diff --git a/drivers/irqchip/qcom-pdc-data.c b/drivers/irqchip/qcom-pdc-data.c
new file mode 100644
index 000000000000..99b4be0af5db
--- /dev/null
+++ b/drivers/irqchip/qcom-pdc-data.c
@@ -0,0 +1,94 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2018, The Linux Foundation. All rights reserved.
+ */
+
+#include "qcom-pdc.h"
+
+static const struct pdc_gpio_pin_map sdm845_gpio_pdc_map[] = {
+	{ 1, 30 },
+	{ 3, 31 },
+	{ 5, 32 },
+	{ 10, 33 },
+	{ 11, 34 },
+	{ 20, 35 },
+	{ 22, 36 },
+	{ 24, 37 },
+	{ 26, 38 },
+	{ 30, 39 },
+	{ 31, 117 },
+	{ 32, 41 },
+	{ 34, 42 },
+	{ 36, 43 },
+	{ 37, 44 },
+	{ 38, 45 },
+	{ 39, 46 },
+	{ 40, 47 },
+	{ 41, 115 },
+	{ 43, 49 },
+	{ 44, 50 },
+	{ 46, 51 },
+	{ 48, 52 },
+	{ 49, 118 },
+	{ 52, 54 },
+	{ 53, 55 },
+	{ 54, 56 },
+	{ 56, 57 },
+	{ 57, 58 },
+	{ 58, 59 },
+	{ 59, 60 },
+	{ 60, 61 },
+	{ 61, 62 },
+	{ 62, 63 },
+	{ 63, 64 },
+	{ 64, 65 },
+	{ 66, 66 },
+	{ 68, 67 },
+	{ 71, 68 },
+	{ 73, 69 },
+	{ 77, 70 },
+	{ 78, 71 },
+	{ 79, 72 },
+	{ 80, 73 },
+	{ 84, 74 },
+	{ 85, 75 },
+	{ 86, 76 },
+	{ 88, 77 },
+	{ 89, 116 },
+	{ 91, 79 },
+	{ 92, 80 },
+	{ 95, 81 },
+	{ 96, 82 },
+	{ 97, 83 },
+	{ 101, 84 },
+	{ 103, 85 },
+	{ 104, 86 },
+	{ 115, 90 },
+	{ 116, 91 },
+	{ 117, 92 },
+	{ 118, 93 },
+	{ 119, 94 },
+	{ 120, 95 },
+	{ 121, 96 },
+	{ 122, 97 },
+	{ 123, 98 },
+	{ 124, 99 },
+	{ 125, 100 },
+	{ 127, 102 },
+	{ 128, 103 },
+	{ 129, 104 },
+	{ 130, 105 },
+	{ 132, 106 },
+	{ 133, 107 },
+	{ 145, 108 },
+};
+
+static const struct pdc_gpio_pin_data sdm845_gpio_data = {
+	.size = ARRAY_SIZE(sdm845_gpio_pdc_map),
+	.map = sdm845_gpio_pdc_map,
+};
+
+const struct of_device_id pdc_gpio_match_table[] = {
+	{ .compatible = "qcom,845-pdc", .data = &sdm845_gpio_data },
+	{ },
+};
diff --git a/drivers/irqchip/qcom-pdc.c b/drivers/irqchip/qcom-pdc.c
index faa7d61b9d6c..1b9ec35958b1 100644
--- a/drivers/irqchip/qcom-pdc.c
+++ b/drivers/irqchip/qcom-pdc.c
@@ -13,12 +13,15 @@
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_device.h>
+#include <linux/soc/qcom/irq.h>
 #include <linux/spinlock.h>
-#include <linux/platform_device.h>
 #include <linux/slab.h>
 #include <linux/types.h>
 
+#include "qcom-pdc.h"
+
 #define PDC_MAX_IRQS		126
+#define PDC_MAX_GPIO_IRQS	256
 
 #define CLEAR_INTR(reg, intr)	(reg & ~(1 << intr))
 #define ENABLE_INTR(reg, intr)	(reg | (1 << intr))
@@ -47,9 +50,8 @@ static u32 pdc_reg_read(int reg, u32 i)
 	return readl_relaxed(pdc_base + reg + i * sizeof(u32));
 }
 
-static void pdc_enable_intr(struct irq_data *d, bool on)
+static void pdc_enable_intr(irq_hw_number_t pin_out, bool on)
 {
-	int pin_out = d->hwirq;
 	u32 index, mask;
 	u32 enable;
 
@@ -65,13 +67,23 @@ static void pdc_enable_intr(struct irq_data *d, bool on)
 
 static void qcom_pdc_gic_mask(struct irq_data *d)
 {
-	pdc_enable_intr(d, false);
+	irq_hw_number_t hwirq = d->hwirq;
+
+	if (hwirq == ULONG_MAX)
+		return;
+
+	pdc_enable_intr(hwirq, false);
 	irq_chip_mask_parent(d);
 }
 
 static void qcom_pdc_gic_unmask(struct irq_data *d)
 {
-	pdc_enable_intr(d, true);
+	irq_hw_number_t hwirq = d->hwirq;
+
+	if (hwirq == ULONG_MAX)
+		return;
+
+	pdc_enable_intr(hwirq, true);
 	irq_chip_unmask_parent(d);
 }
 
@@ -111,9 +123,12 @@ enum pdc_irq_config_bits {
  */
 static int qcom_pdc_gic_set_type(struct irq_data *d, unsigned int type)
 {
-	int pin_out = d->hwirq;
+	irq_hw_number_t pin_out = d->hwirq;
 	enum pdc_irq_config_bits pdc_type;
 
+	if (pin_out == ULONG_MAX)
+		return 0;
+
 	switch (type) {
 	case IRQ_TYPE_EDGE_RISING:
 		pdc_type = PDC_EDGE_RISING;
@@ -157,7 +172,7 @@ static struct irq_chip qcom_pdc_gic_chip = {
 	.irq_set_affinity	= irq_chip_set_affinity_parent,
 };
 
-static irq_hw_number_t get_parent_hwirq(int pin)
+static irq_hw_number_t get_parent_hwirq(irq_hw_number_t pin)
 {
 	int i;
 	struct pdc_pin_region *region;
@@ -169,7 +184,6 @@ static irq_hw_number_t get_parent_hwirq(int pin)
 			return (region->parent_base + pin - region->pin_base);
 	}
 
-	WARN_ON(1);
 	return ~0UL;
 }
 
@@ -232,6 +246,73 @@ static const struct irq_domain_ops qcom_pdc_ops = {
 	.free		= irq_domain_free_irqs_common,
 };
 
+static irq_hw_number_t qcom_gpio_to_pdc_pin(struct irq_domain *domain,
+					    unsigned int gpio)
+{
+	struct device_node *dn = irq_domain_get_of_node(domain);
+	const struct of_device_id *match_id;
+	const struct pdc_gpio_pin_data *data;
+	unsigned int i;
+
+	match_id = of_match_node(pdc_gpio_match_table, dn);
+	if (!match_id)
+		return ULONG_MAX;
+
+	data = match_id->data;
+	if (!data)
+		return ULONG_MAX;
+
+	for (i = 0; i < data->size; i++)
+		if (gpio == data->map[i].gpio)
+			return data->map[i].pdc_pin;
+
+	return ULONG_MAX;
+}
+
+static int qcom_pdc_gpio_alloc(struct irq_domain *domain, unsigned int virq,
+			       unsigned int nr_irqs, void *data)
+{
+	struct qcom_irq_fwspec *qcom_fwspec = data;
+	struct irq_fwspec *fwspec = &qcom_fwspec->fwspec;
+	struct irq_fwspec parent_fwspec;
+	irq_hw_number_t hwirq, parent_hwirq;
+	unsigned int type;
+	int ret;
+
+	hwirq = qcom_gpio_to_pdc_pin(domain, fwspec->param[0]);
+	parent_hwirq = get_parent_hwirq(hwirq);
+
+	ret = irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
+					    &qcom_pdc_gic_chip, NULL);
+	if (ret)
+		return ret;
+
+	if (hwirq == ULONG_MAX)
+		return 0;
+
+	qcom_fwspec->mask = true;
+
+	if (type & IRQ_TYPE_EDGE_BOTH)
+		type = IRQ_TYPE_EDGE_RISING;
+
+	if (type & IRQ_TYPE_LEVEL_MASK)
+		type = IRQ_TYPE_LEVEL_HIGH;
+
+	parent_fwspec.fwnode      = domain->parent->fwnode;
+	parent_fwspec.param_count = 3;
+	parent_fwspec.param[0]    = 0;
+	parent_fwspec.param[1]    = parent_hwirq;
+	parent_fwspec.param[2]    = type;
+
+	return irq_domain_alloc_irqs_parent(domain, virq, nr_irqs,
+					    &parent_fwspec);
+}
+
+static const struct irq_domain_ops qcom_pdc_gpio_ops = {
+	.alloc		= qcom_pdc_gpio_alloc,
+	.free		= irq_domain_free_irqs_common,
+};
+
 static int pdc_setup_pin_mapping(struct device_node *np)
 {
 	int ret, n;
@@ -270,7 +351,7 @@ static int pdc_setup_pin_mapping(struct device_node *np)
 
 static int qcom_pdc_init(struct device_node *node, struct device_node *parent)
 {
-	struct irq_domain *parent_domain, *pdc_domain;
+	struct irq_domain *parent_domain, *pdc_domain, *pdc_gpio_domain;
 	int ret;
 
 	pdc_base = of_iomap(node, 0);
@@ -301,6 +382,18 @@ static int qcom_pdc_init(struct device_node *node, struct device_node *parent)
 		goto fail;
 	}
 
+	pdc_gpio_domain = irq_domain_create_hierarchy(parent_domain, 0,
+						      PDC_MAX_GPIO_IRQS,
+						      of_fwnode_handle(node),
+						      &qcom_pdc_gpio_ops, NULL);
+	if (!pdc_gpio_domain) {
+		pr_err("%pOF: GIC domain add failed for GPIO domain\n", node);
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	irq_domain_update_bus_token(pdc_gpio_domain, DOMAIN_BUS_WAKEUP);
+
 	return 0;
 
 fail:
diff --git a/drivers/irqchip/qcom-pdc.h b/drivers/irqchip/qcom-pdc.h
new file mode 100644
index 000000000000..3091db646004
--- /dev/null
+++ b/drivers/irqchip/qcom-pdc.h
@@ -0,0 +1,24 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2017-2018, The Linux Foundation. All rights reserved.
+ */
+
+#ifndef __QCOM_PDC_H
+#define __QCOM_PDC_H
+
+#include <linux/kernel.h>
+#include <linux/mod_devicetable.h>
+
+struct pdc_gpio_pin_map {
+	unsigned int gpio;
+	u32 pdc_pin;
+};
+
+struct pdc_gpio_pin_data {
+	size_t size;
+	const struct pdc_gpio_pin_map *map;
+};
+
+extern const struct of_device_id pdc_gpio_match_table[];
+
+#endif /* __QCOM_PDC_H */
diff --git a/include/linux/soc/qcom/irq.h b/include/linux/soc/qcom/irq.h
new file mode 100644
index 000000000000..bacc9edbce0d
--- /dev/null
+++ b/include/linux/soc/qcom/irq.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __QCOM_IRQ_H
+#define __QCOM_IRQ_H
+
+#include <linux/irqdomain.h>
+
+/**
+ * struct qcom_irq_fwspec - qcom specific irq fwspec wrapper
+ * @fwspec: irq fwspec
+ * @mask: if true, keep the irq masked in the gpio controller
+ *
+ * Use this structure to communicate between the parent irq chip, MPM or PDC,
+ * to the gpio chip, TLMM, about the gpio being allocated in the parent
+ * and if the gpio chip should keep the line masked because the parent irq
+ * chip is handling everything about the irq line.
+ */
+struct qcom_irq_fwspec {
+	struct irq_fwspec fwspec;
+	bool mask;
+};
+
+#endif
-- 
The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum,
a Linux Foundation Collaborative Project

