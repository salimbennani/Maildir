Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:43:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BD55C5805F0;
	Thu, 20 Dec 2018 16:30:34 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 16:30:34 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AsgUgwBXhAVJ22Ta1zqNmSlPpBL7V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCDuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGo2y?=
 =?us-ascii?q?YIkMAeUOM+ZWqJTzqVsQoxSiHgmsHOHixyRUhnPqx6A2z/4sHR3E0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKVu260qbIzS/ZYPNQwzj99JLHfwsuofGLWrJwfs7Rxlc1GwzZiVWQ?=
 =?us-ascii?q?rJXoMjWI3eoOq2iW9/RsWf6rhmI9tg18rCajyt0xhoTKmo4Z0FHJ+CdhzIorOd?=
 =?us-ascii?q?G1TFR3bN2kHZdKqi2XNpZ6TtkgTmxnvisx16cItoShfCcQzZQq3x7fZOKDc4iP?=
 =?us-ascii?q?+h/jSumRLilihH5/e7KwmQyy8U6+xe34TMW010xKriVdntnNsHACyQDT59CZRv?=
 =?us-ascii?q?dh+kqtwyuD2g7N5u1ePEw5lrbXJ4Qgz7MyjpYTtF7MHi7ymEX4lq+WcUAk9/Cs?=
 =?us-ascii?q?6+TmZLXmu5CdO5Z3ig7gKKQunNKwAeAhPggJUWmb//qz1Kf48E3nT7VFkOc2nr?=
 =?us-ascii?q?PasJ/EP8QboLC2AwtP3oYk8Ra/AC+q0M4EknkfMFJFZBWHgpDtO1HPI/D3E+2z?=
 =?us-ascii?q?gluxkDpww/DGP7vhAojCL3TZkbfhe6p95FBYyAYp0d9f4JdUAKkbIP3vQk/xqM?=
 =?us-ascii?q?DYDhghPgy02ennCcl92ZkZWW6VAq+ZLbndsVmH5u80J+mMZYkVuCvyKvQ/5v7u?=
 =?us-ascii?q?i2M5lkEZfaWzwZQXb3W4FOx8I0qFeXrsnssBEWASswUkV+zqiFqCUT1Ja3aoRa?=
 =?us-ascii?q?085Co2CIanDYfFW4Csj6aN3Ca9Hp1KeG9GDkqAHmvvd4WBQ/0Mcj6dItd9kjwY?=
 =?us-ascii?q?UrisU4wh2guotAPgz7pnL/Db+isXtZ/40Nh15uvTlQw99DBuDsSd1X2NQH9wnm?=
 =?us-ascii?q?8SWzA226V/q1Rnylifyah4n+BYFdtL6vxUSAg6K4DTw/Z6C9/oXALBZcmGSFCh?=
 =?us-ascii?q?TtWiAjExS9YxzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWribNl+AjNGYHFiUWZmLysdaQHwiHN8nyOzW6PvEFeTQ5xXr/J?=
 =?us-ascii?q?XXEZZkvKs9v54lnOQKOpCbQiKgFB09KNKrNWat31ilVLXOvjONXbY2K2h2ewBR?=
 =?us-ascii?q?aJyqmQbIbwfGUdxiHdCEkCkwAc5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4LxL0EvDkuqjpqE1e9xd7ZEMeAqBd7c6VaYt?=
 =?us-ascii?q?M950lH2Hndtwx8OJygMq9jikQfcwRxo0PhyRF3Bp9cnsgtqXMg1BByJr6A0FNd?=
 =?us-ascii?q?azOY2oj9O73KKmXo4B+jca/X2lHE39aQ9acC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBsK6i0vSPY1NIzGeQlzQysf9FB?=
 =?us-ascii?q?P6OeFQ/+CtEVCNKqKOM3hVepdBUEPOZJ+a4wPsOmceaG2aGxMOZhmjKmkXpI4I?=
 =?us-ascii?q?Rn3k2Q8Cp8T/bC34wZzPGAwguHSzD8gU+hs8D2g4xFZSseHnGiySjiH4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/myu31S?=
 =?us-ascii?q?Z0kzIqrqqYxiDO2P7tdBkEOm5KQmltk1HsLJOwj9AbWkiocgcomAGk5Ub826hU?=
 =?us-ascii?q?uqB/I3PPTkdPeij8N3tiXbeotrqef85P74slsCVNX+S7e1yaSL/9ox0B3iPnHm?=
 =?us-ascii?q?tewi07dj6wtpX4mRx6lHySLHJpoHXFfsFwwA/V5MbASv5JwjoGWC54hCHUBlem?=
 =?us-ascii?q?Ptml59WUl4rZveC4WGKsTZlTcSjtzYOduyq3/2xqARujn/+tnt3rCxQ10Sj+19?=
 =?us-ascii?q?NyTyXHsA78YpX316S9Ke9ne0hoBFzm5MZgFIBxjJAwhI0O1ngAnZqa42AHkWjo?=
 =?us-ascii?q?PNVf2KL+amcNRDERz97U5gjlxFNsLnaTy43lUXWdx9NrZ8OmbWMOxiI988dKBb?=
 =?us-ascii?q?+I7LxDmCt5uFu5ohjXYfhghTcd0vou5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRV23jdZclGS9w899zMFbR0HDo7oHked?=
 =?us-ascii?q?/Qbc8ctxGOkhfAifRVJ4w1lvYQmSVnPmf9t2U/y+EnlRxuwY26vI+fJmVv5q25?=
 =?us-ascii?q?BwBXNibva8MP4D3tjrtensWL34CpBJphAS4GXJ/pTfKuDTITuu7rNweIED0gtH?=
 =?us-ascii?q?ibHaDTEhOY6Edjt3jPCYykN2mLJHkFytVvXBmcJEtCgAANQTU1hJg5GhqxxMzm?=
 =?us-ascii?q?dkd56Ssc5lr5qhtK1+JpOAPzUmbZpAe0dDg0TIKTIwZR7gFH/03VK9CR7vpvHy?=
 =?us-ascii?q?FE+Z2stAyNJXKaZwRLDmEJW1aIB1P5Prmp6tnP7fKYBvelL/bVZbWOqOpeV+qH?=
 =?us-ascii?q?xJ6104tm+SqMOduLPnV4E/I73U9DV2hjG8vFgzUPVzAXlyXVYsGBuRez4Td3od?=
 =?us-ascii?q?6/8fjxXALv5JCCC79TMdVp5hC3jr2PN++WhCZlNzlY0okAymPPyLgaxFQSkT1h?=
 =?us-ascii?q?dyGxEbQcsi7AVL7Qmq5SDxIBdyx/LtdH76Ii0QlLIsPbjtL11rhljv86EVtFVF?=
 =?us-ascii?q?rhmt23aswOOW2yKFTHBEOTPrScOTLL2933Yb+7SbBIjORbrRuwuTOaE0/lJjuC?=
 =?us-ascii?q?ljnpWAqpMeFDlyybOB1euIegchdiE2TjTdTmagGlP99zlzE53bo0hnaZfVIbZB?=
 =?us-ascii?q?xxfgtvqbud9msMhvhyXW5G6Hd+Be2FnS+D6K/fMJlA9bNBDyJvkOQSxHknzbQd?=
 =?us-ascii?q?uCtASeFzlwPZrsRpplC7l6+I0DUxFFJprjFFzKCMvUxkIr7e8NEUXnLD8joJ7H?=
 =?us-ascii?q?WXDlIMqsczTpXruqZN2p3Mmbj1JTNq7d3Z540fCtLSJcbBN2AuYjTzHzuBWAYK?=
 =?us-ascii?q?VzetPH3Wr0Nal/6W+zueqZ1s+cuko4YHVrIODA99LfgdEEkwWYVaeJo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAABgMxxch0O0hNFdBxoBAQEBAQIBA?=
 =?us-ascii?q?QEBBwIBAQEBgVIEAQEBAQsBgVqCESeDfZQUgg0Ul0mBJANMLRMBhDwCAoJuIjU?=
 =?us-ascii?q?IDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDAQIgBBkBATcBBQkBAR8FA?=
 =?us-ascii?q?iYCAgMxAQUBCxEGAQkJBYJSS4ICBZtcPIopcHwzgnYBAQWHKQgSeYZzhEEXgX+?=
 =?us-ascii?q?BEYJkg0wCgU4wgmuCV4lNhxCQYgmFQYwYJJFcASyJIZAxMIEmAYIMcBWDJ4IbC?=
 =?us-ascii?q?QMXg0qKdB4zgQUBAYsTKYIkAQE?=
X-IPAS-Result: =?us-ascii?q?A0ACAABgMxxch0O0hNFdBxoBAQEBAQIBAQEBBwIBAQEBgVI?=
 =?us-ascii?q?EAQEBAQsBgVqCESeDfZQUgg0Ul0mBJANMLRMBhDwCAoJuIjUIDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCA0JCCkjDII2JAGCYgMDAQIgBBkBATcBBQkBAR8FAiYCAgMxAQUBCxE?=
 =?us-ascii?q?GAQkJBYJSS4ICBZtcPIopcHwzgnYBAQWHKQgSeYZzhEEXgX+BEYJkg0wCgU4wg?=
 =?us-ascii?q?muCV4lNhxCQYgmFQYwYJJFcASyJIZAxMIEmAYIMcBWDJ4IbCQMXg0qKdB4zgQU?=
 =?us-ascii?q?BAYsTKYIkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="67800359"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 20 Dec 2018 16:30:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390601AbeLUA3v (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 19:29:51 -0500
Received: from mail-yw1-f74.google.com ([209.85.161.74]:44556 "EHLO
        mail-yw1-f74.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390590AbeLUA3s (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 19:29:48 -0500
Received: by mail-yw1-f74.google.com with SMTP id l9so437263ywl.11
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 16:29:48 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:in-reply-to:message-id:mime-version:references:subject:from:to
         :cc;
        bh=9UnWsy2bgevJOMmkF762qGSG70SgXsmxQJOnBb3Ir8g=;
        b=LXXIfJEVyzLgja835ytB/ZOFv7x6aDvdE/k9RuKSg7eJJz4mt4qJWmJsQ/2/PfmJNd
         r94IgFZc1kzCnXNNMjcaVMXlMI40JGCvOs83n19B86yLzu8KmPocZPrrUqmhIr0bRanA
         34gWCm9g2pbxrWUm/rh7uM0LYDaSja0m5uo78WaG0TYfiSwICcZKYyDR8fvYkTJrY4GB
         xxqgvJhVLfWZmsiXtrNSL0H9YJFWS5WuwmoqZ95D8r2feDxrWcLs8IjFexrYm9BJpqOb
         Zx4WdL2gQWBZYUsZae/DdWPpksZ28FTUpRsTQ4Z9YgtBuDv3Mu1jxgwmhWTM8VmCrm1y
         Lyuw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:in-reply-to:message-id:mime-version
         :references:subject:from:to:cc;
        bh=9UnWsy2bgevJOMmkF762qGSG70SgXsmxQJOnBb3Ir8g=;
        b=q7REnAdCQiD4EHLAm13nFALt/AkdSgRQEXa9+DvoCUIxb9Sv/ffLiOjEpNMZUW2VV+
         EuzdaqjZuYPPCVIUeuWBpd5GeGO3OuWRpf5zj5zKUn1UL0aRwAbbG9pYEyLcC9JkSDpX
         Yv3GNC+4VK+15o8yDnR4En8MTGNHLgdAOOE0eC3lOc6t5jJSptMpCXnuGuZsMvBwNepT
         3180xwi83+88xFM7eGNxDDGIKMMlcgr5kUXeegmg/KwYxyF29fHP+WCGsqKvpF4ZhgjN
         z5/9jgJCYhomgeds3QVPKlXCJGx/LtmhKVY2Z/6DteQJIX5J2PcpVHjzVp/r11JAOUjh
         BGew==
X-Gm-Message-State: AJcUukfkhiBaHVCeMaDUCHYM6cUWADfzbohdrC9WzGUKTELu+HsDJWTm
        tH57Q/DQWktmM0hB6ep3N9pZ+/ltrgMOvw==
X-Google-Smtp-Source: AFSGD/Uz0E3nQXXYabKcr5OqeZB69NuZGKIQbxKc0+iokT3wVvo+LHK+MmBB43NmkundkoHr87gJDp2czPihBQ==
X-Received: by 2002:a25:a068:: with SMTP id x95-v6mr216828ybh.101.1545352187642;
 Thu, 20 Dec 2018 16:29:47 -0800 (PST)
Date: Thu, 20 Dec 2018 16:29:33 -0800
In-Reply-To: <20181207222223.GA240898@google.com>
Message-Id: <20181221002933.747-1-egranata@chromium.org>
Mime-Version: 1.0
References: <20181207222223.GA240898@google.com>
X-Mailer: git-send-email 2.20.1.415.g653613c723-goog
Subject: [PATCH] mfd: cros_ec: Add support for MKBP more event flags
From: <egranata@google.com>
To: Lee Jones <lee.jones@linaro.org>,
        Benson Leung <bleung@chromium.org>,
        Olof Johansson <olof@lixom.net>, linux-kernel@vger.kernel.org
Cc: Gwendal Grignou <gwendal@google.com>,
        Brian Norris <briannorris@google.com>,
        Enrico Granata <egranata@google.com>,
        Enrico Granata <egranata@chromium.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Enrico Granata <egranata@chromium.org>

The ChromeOS EC has support for signaling to the host that
a single IRQ can serve multiple MKBP events.

Doing this serves an optimization purpose, as it minimizes the
number of round-trips into the interrupt handling machinery, and
it proves beneficial to sensor timestamping as it keeps the desired
synchronization of event times between the two processors.

This patch adds kernel support for this EC feature, allowing the
ec_irq to loop until all events have been served.

Signed-off-by: Enrico Granata <egranata@chromium.org>
---
 drivers/mfd/cros_ec.c                   | 20 +++++++++++++--
 drivers/platform/chrome/cros_ec_proto.c | 33 +++++++++++--------------
 include/linux/mfd/cros_ec.h             |  7 ++++--
 include/linux/mfd/cros_ec_commands.h    | 15 +++++++++++
 4 files changed, 53 insertions(+), 22 deletions(-)

diff --git a/drivers/mfd/cros_ec.c b/drivers/mfd/cros_ec.c
index fe6f83766144f..17903a378aa1a 100644
--- a/drivers/mfd/cros_ec.c
+++ b/drivers/mfd/cros_ec.c
@@ -51,13 +51,16 @@ static const struct mfd_cell ec_pd_cell = {
 	.pdata_size = sizeof(pd_p),
 };
 
-static irqreturn_t ec_irq_thread(int irq, void *data)
+static bool ec_handle_event(struct cros_ec_device *ec_dev)
 {
-	struct cros_ec_device *ec_dev = data;
 	bool wake_event = true;
 	int ret;
+	bool ec_has_more_events = false;
 
 	ret = cros_ec_get_next_event(ec_dev, &wake_event);
+	if (ret > 0)
+		ec_has_more_events =
+			ec_dev->event_data.event_type & EC_MKBP_HAS_MORE_EVENTS;
 
 	/*
 	 * Signal only if wake host events or any interrupt if
@@ -70,6 +73,19 @@ static irqreturn_t ec_irq_thread(int irq, void *data)
 	if (ret > 0)
 		blocking_notifier_call_chain(&ec_dev->event_notifier,
 					     0, ec_dev);
+
+	return ec_has_more_events;
+}
+
+static irqreturn_t ec_irq_thread(int irq, void *data)
+{
+	struct cros_ec_device *ec_dev = data;
+	bool ec_has_more_events;
+
+	do {
+		ec_has_more_events = ec_handle_event(ec_dev);
+	} while (ec_has_more_events);
+
 	return IRQ_HANDLED;
 }
 
diff --git a/drivers/platform/chrome/cros_ec_proto.c b/drivers/platform/chrome/cros_ec_proto.c
index b6fd4838f60f3..bb126d95b2fd4 100644
--- a/drivers/platform/chrome/cros_ec_proto.c
+++ b/drivers/platform/chrome/cros_ec_proto.c
@@ -420,10 +420,14 @@ int cros_ec_query_all(struct cros_ec_device *ec_dev)
 	ret = cros_ec_get_host_command_version_mask(ec_dev,
 						    EC_CMD_GET_NEXT_EVENT,
 						    &ver_mask);
-	if (ret < 0 || ver_mask == 0)
+	if (ret < 0 || ver_mask == 0) {
 		ec_dev->mkbp_event_supported = 0;
-	else
-		ec_dev->mkbp_event_supported = 1;
+		dev_info(ec_dev->dev, "MKBP not supported\n");
+	} else {
+		ec_dev->mkbp_event_supported = fls(ver_mask);
+		dev_info(ec_dev->dev, "MKBP support version %u\n",
+			ec_dev->mkbp_event_supported - 1);
+	}
 
 	/*
 	 * Get host event wake mask, assume all events are wake events
@@ -530,28 +534,19 @@ static int get_next_event(struct cros_ec_device *ec_dev)
 {
 	u8 buffer[sizeof(struct cros_ec_command) + sizeof(ec_dev->event_data)];
 	struct cros_ec_command *msg = (struct cros_ec_command *)&buffer;
-	static int cmd_version = 1;
-	int ret;
+	const int cmd_version = ec_dev->mkbp_event_supported - 1;
 
 	if (ec_dev->suspended) {
 		dev_dbg(ec_dev->dev, "Device suspended.\n");
 		return -EHOSTDOWN;
 	}
 
-	if (cmd_version == 1) {
-		ret = get_next_event_xfer(ec_dev, msg, cmd_version,
-				sizeof(struct ec_response_get_next_event_v1));
-		if (ret < 0 || msg->result != EC_RES_INVALID_VERSION)
-			return ret;
-
-		/* Fallback to version 0 for future send attempts */
-		cmd_version = 0;
-	}
-
-	ret = get_next_event_xfer(ec_dev, msg, cmd_version,
+	if (cmd_version == 0)
+		return get_next_event_xfer(ec_dev, msg, 0,
 				  sizeof(struct ec_response_get_next_event));
 
-	return ret;
+	return get_next_event_xfer(ec_dev, msg, cmd_version,
+				sizeof(struct ec_response_get_next_event_v1));
 }
 
 static int get_keyboard_state_event(struct cros_ec_device *ec_dev)
@@ -607,11 +602,13 @@ EXPORT_SYMBOL(cros_ec_get_next_event);
 
 u32 cros_ec_get_host_event(struct cros_ec_device *ec_dev)
 {
+	u32 event_type =
+		ec_dev->event_data.event_type & EC_MKBP_EVENT_TYPE_MASK;
 	u32 host_event;
 
 	BUG_ON(!ec_dev->mkbp_event_supported);
 
-	if (ec_dev->event_data.event_type != EC_MKBP_EVENT_HOST_EVENT)
+	if (event_type != EC_MKBP_EVENT_HOST_EVENT)
 		return 0;
 
 	if (ec_dev->event_size != sizeof(host_event)) {
diff --git a/include/linux/mfd/cros_ec.h b/include/linux/mfd/cros_ec.h
index e44e3ec8a9c7d..cb07ee95a6eb8 100644
--- a/include/linux/mfd/cros_ec.h
+++ b/include/linux/mfd/cros_ec.h
@@ -119,7 +119,9 @@ struct cros_ec_command {
  *            code.
  * @pkt_xfer: Send packet to EC and get response.
  * @lock: One transaction at a time.
- * @mkbp_event_supported: True if this EC supports the MKBP event protocol.
+ * @mkbp_event_supported: 0 if MKBP not supported. Otherwise its value is
+ *                        the maximum supported version of the MKBP host event
+ *                        command + 1.
  * @event_notifier: Interrupt event notifier for transport devices.
  * @event_data: Raw payload transferred with the MKBP event.
  * @event_size: Size in bytes of the event data.
@@ -152,7 +154,8 @@ struct cros_ec_device {
 	int (*pkt_xfer)(struct cros_ec_device *ec,
 			struct cros_ec_command *msg);
 	struct mutex lock;
-	bool mkbp_event_supported;
+	/* 0 == not supported, otherwise it supports version x - 1 */
+	u8 mkbp_event_supported;
 	struct blocking_notifier_head event_notifier;
 
 	struct ec_response_get_next_event_v1 event_data;
diff --git a/include/linux/mfd/cros_ec_commands.h b/include/linux/mfd/cros_ec_commands.h
index 9a9631f0559e2..3f013593d0107 100644
--- a/include/linux/mfd/cros_ec_commands.h
+++ b/include/linux/mfd/cros_ec_commands.h
@@ -2146,6 +2146,14 @@ struct ec_result_keyscan_seq_ctrl {
  */
 #define EC_CMD_GET_NEXT_EVENT 0x67
 
+#define EC_MKBP_HAS_MORE_EVENTS_SHIFT 7
+
+/* EC can provide more MKBP events to host */
+#define EC_MKBP_HAS_MORE_EVENTS (1 << EC_MKBP_HAS_MORE_EVENTS_SHIFT)
+
+/* The mask to apply to get the raw event type */
+#define EC_MKBP_EVENT_TYPE_MASK ((1 << EC_MKBP_HAS_MORE_EVENTS_SHIFT) - 1)
+
 enum ec_mkbp_event {
 	/* Keyboard matrix changed. The event data is the new matrix state. */
 	EC_MKBP_EVENT_KEY_MATRIX = 0,
@@ -2173,6 +2181,13 @@ enum ec_mkbp_event {
 
 	/* Number of MKBP events */
 	EC_MKBP_EVENT_COUNT,
+
+	/*
+	 * Maximum possible event type
+	 * The most significant bit of event type is used to indicate that
+	 * the EC has multiple events for the AP to serve
+	 */
+	EC_MKBP_EVENT_MAX_TYPE = EC_MKBP_EVENT_TYPE_MASK,
 };
 
 union ec_response_get_next_data {
-- 
2.20.1.415.g653613c723-goog

