Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 18:15:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1443F5805FC;
	Mon, 17 Dec 2018 00:30:48 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 00:30:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOUi9DRzBA/VmamHXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4QKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmhi?=
 =?us-ascii?q?cJOSAk/m/UhMx/g75Urw+jqBNx2I7UeIOYOeFifq/BZ94WWXZNU9xPWyFHH4iy?=
 =?us-ascii?q?b5EPD+0EPetAqIfyvUcOrQe/BQKxC+zg0D5IhmPq3a071eQuDwfG1xEnEtILqn?=
 =?us-ascii?q?vUsMn1NKYIXeCr1qbIzCnDb+9X2Tf79ofIdAssof+NXb5qa8rRzkkvFwbbgVWN?=
 =?us-ascii?q?s4zlOCuV2foXv2eH6OpgUPuihmg6oA9yujii3tkghpXNi44P11zJ+zt1zJwoKd?=
 =?us-ascii?q?C7VEJ3e9+pHZlIuy2EKod7TNkuT39otSs60LEKpJ22cSkQxJkoxhPSbeGMfZKS?=
 =?us-ascii?q?7RL5TumRJC91hHJ7d7K7gBa/6VagyuLiWcmuylpKrTRKksPKtn8T0xzf8M+HSu?=
 =?us-ascii?q?Fy/ku52DaP0R7c6v1cLEwqiabWL4QtzqM+m5YNq0jPAyz7lFnsgKKXdEgo4u2o?=
 =?us-ascii?q?5P7mYrXiqJ+cLYh0igTmP6Qqm8y/B/k4MwcXU2iY5+u8zrvj8lP9QLlTif03nK?=
 =?us-ascii?q?/Zv47AJckAuK65DBFa0pw55xa8ETimytIYkmcDLF5ffxKHlYfpN0nUIP/kFfe/?=
 =?us-ascii?q?n0iskDBzyvDCP73hAYvCImLMkbf8Zrt9709cyAwuzdFQ/Z5UC7cBIO7tVU/1rt?=
 =?us-ascii?q?DXEhg5Mwmsyeb9FNp9zp8eWX6IAqKBMKPdq16I5v41LOmLfoMVuCv9JOIj5/7h?=
 =?us-ascii?q?lnI5nV4dfa+03ZoYcny4H/JmI1mHbnromNsODWAKvg8mRuzwlFKCSSJTZ2q1X6?=
 =?us-ascii?q?8k5DE7D5ypAZ3ARoCqhryB2iC7E4ZSZmBHDFCMDHjpe5+FW/cKdCKdPMthniYY?=
 =?us-ascii?q?WrimTo8rzQuuuxPiy7p7MurU/TUVuoj41Nh14O3Tlgs+9SZuAMSfyGyNS2B0nm?=
 =?us-ascii?q?UVRz45xqx/oEp9ykud3qh8mfBXCdtT5/ZRWAcgKZHc1/B6C8z1Wg/ZfdeGUlCm?=
 =?us-ascii?q?Ts+iATEwVN0xxdAObl15G9WjiBDDwiWrD6UUl7yNGJw77Kbc02LtKMZ6znbMzL?=
 =?us-ascii?q?MhgEU+QstTKW2mgbZy+BXJCI7XjUqVjaaqer4a3C7W6miDy22CvEVbUA51VaXI?=
 =?us-ascii?q?RnQfZkrQrdTk6ULOVb6uCbI7MgRfzc6OMLdFatrsjV9eXvfsJMzeY36tm2e3HR?=
 =?us-ascii?q?uH26mDbJT0dGkH3CXSEk4EkxsN8naALgU+Aiaho2TDDD1hD17vYkXs8fVgp3O/?=
 =?us-ascii?q?VEM70waKb0h53bqv5hEVneCcS+8U3r8cpCchqjB0HFGh39LWC9uMvRZhcL9bYd?=
 =?us-ascii?q?Mn5FdH1GTZtwNmM5ykLqBigEMecgtts0Pv0RV3FptPkcwwoHw2ywpyLLqS0Eld?=
 =?us-ascii?q?eDOAwZDwJrrXJ3Ho8xCrdaHX1U/R0daM9qgU9fQ3tk/svAeqFkol7XVqyN1V03?=
 =?us-ascii?q?qa5pXXAwseS5PxUkAr9xdko7HWeDUy54TR1Xd0K6m7rifC2841BOsi0huhf8pf?=
 =?us-ascii?q?PLmYGwPoEswaB9KhKOolm1WyahIEPeZS9LM7Ps+8dvuG3rKrM/hknD68kWtH54?=
 =?us-ascii?q?V92FqW9yVgUu7Iw4oFw/aA0wudVjfzkE2ustrqloBDfz0SGHSwyTLlBIJIeqJ9?=
 =?us-ascii?q?Z4ILBnqwLM2twdV+gYXgW3pZ9F6lGlMH19WleRuUb1zhwwJQ0V4brmCgmSu91z?=
 =?us-ascii?q?Z0iS0mrrKD3CzSxOTvbBoGOm9RSGhil1vsOpW0j9YBUUisbggpkgal5Engy6ha?=
 =?us-ascii?q?oqR/M3fcQUNScyfqKGFiV7O6tqCebM5X9JMorSJXXfy+YV+AUL79oBga0yT5E2?=
 =?us-ascii?q?tF3j87dDKqupT/nxNkjmKQN3JzrHvfecFtyhbT/t3cRfhN3jUYQCl0kyXYBl+5?=
 =?us-ascii?q?P9Ox59Wbi4/DsvyiV2KmTpBScTPkzYSauCu55G1qBwayn/Symt3hDAg73jX319?=
 =?us-ascii?q?hsVSXUshn8ZpPn2Li9MeJiZkNoHkPz69JmGoFilYs9nJIQ1mIbhpmP/XoHjH38?=
 =?us-ascii?q?MdNU2a/laHoNRDgLw8Pa4QT/2U1jKG6JyJz9VnmH3sRhYNy6aHsM2i0h98BKFL?=
 =?us-ascii?q?uU7LtckCtwo1q4rhjebeJznzgD0vsu9GAVg/sStwUz1CWdDasfHU1ZPSzqihSJ?=
 =?us-ascii?q?4MqyrKRRZGazb7ew0FByksymDLGHugtcQmr2eo8+HS9s6cVyKE7M0Hr26o3+ed?=
 =?us-ascii?q?jfd9QTtgCPkxfbjuhYM5YxlvsMhSp6NmPxp3wly+gnjRNw2ZG2ppSIK2Jo/Kih?=
 =?us-ascii?q?GB5XKiX1Z98P+jHqlatRhdyZ34erHpV8ADkLWIboQOmsEDITs/TnKgmPHCc9qn?=
 =?us-ascii?q?edBbrQAwuf5F16oHLIFpChL2uXK2UBzdV+WBmdI1RSgAIOUzU/gJE5DRqmxND7?=
 =?us-ascii?q?fEd6+zAR5UP4qh1WxeJzLBT/VmbfpAG1ajY7UpSfLRxW7h1c6EfRK8CR8uVzHy?=
 =?us-ascii?q?RA9J27sAONMnCbZxhPDWwRWk2EAE3jPqCz5dba9eiUHPG+L/zIYbWBsuFeU/aI?=
 =?us-ascii?q?xZSy0opp5TqMN8OPPmV8AP0/wEZMQXd5G8HBkTUVVyMXjz7Nb9KcpBqk+i14sM?=
 =?us-ascii?q?G/8PfoWALu/4ePCKFSMdJg+x+om6eDKvWQiT19KTZZ0JMM2HDJxKIe3F4UlyFh?=
 =?us-ascii?q?aT2tHa4cui7KSaLagrVXAAIDayNvKMtI6Lox0RNQOcHAkNP6yL55guQxC1dETl?=
 =?us-ascii?q?HhnsCpZcoXI2CyLl/HBUCLNKiYKj3P2c34faS8SbhIhuVOqxKwoSqbE1PkPjmb?=
 =?us-ascii?q?iznpVhWvPftQgy2BIBNeuJ+ychB2BGjnTdLmbAC7MdBtgT03x700mm3FNWoGPT?=
 =?us-ascii?q?dgdENNq6Wa7TlEjfVnB2xB8n1lIPGEmimD6enYL5cWsf1zDSV1l+JV+nI6y7RO?=
 =?us-ascii?q?4SFARfx1njbSr9F0r1GnlOmP1iRoUB5UpjlXg4KLuBYqBaKM05BaWj7u5hUS6y?=
 =?us-ascii?q?3EAQ4NoN1kB/XstrpWx9yJk7j8fmRs6dXRqO4VG9TVYPyOMWY9MBzkHnaACQIZ?=
 =?us-ascii?q?UT/tK2jem1BclvyU3nOU6II9qp3hhYAJUrIdX1swQKBJQn95FcAPdc8kFggvlq?=
 =?us-ascii?q?SW2ZYF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABdXRdch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2uMPIt2gg0Ul0SCBQEBKwGHVCI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgpL4I2IoJlAQIDAQI3PwYJAQEKDgoJJQMMBSABBQEiG?=
 =?us-ascii?q?IMdggEEAZwFPIw/g32GIhKMLIFXP4ERgxKEZYNVgiYCj02RTAcCgiQEhCWLAiO?=
 =?us-ascii?q?Jc4dfmT0GAgkHDyGBJYIOTSODPZBcPoE2AQEBO400AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAABdXRdch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2uMPIt2gg0Ul0SCBQEBKwGHVCI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgpL4I2IoJlAQIDAQI3PwYJAQEKDgoJJQMMBSABBQEiGIMdggEEAZwFPIw?=
 =?us-ascii?q?/g32GIhKMLIFXP4ERgxKEZYNVgiYCj02RTAcCgiQEhCWLAiOJc4dfmT0GAgkHD?=
 =?us-ascii?q?yGBJYIOTSODPZBcPoE2AQEBO400AQE?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="56168169"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 00:30:45 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731812AbeLQIam (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 03:30:42 -0500
Received: from mail-lj1-f176.google.com ([209.85.208.176]:41167 "EHLO
        mail-lj1-f176.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726692AbeLQIal (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 03:30:41 -0500
Received: by mail-lj1-f176.google.com with SMTP id k15-v6so10173307ljc.8
        for <linux-kernel@vger.kernel.org>; Mon, 17 Dec 2018 00:30:39 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=zwN7Hm/TQGWYQaLLO6BeSEPiD9Q1K5pfX3PgW4vkaZE=;
        b=TwmQtZ1ZjafSpyoZqEmhJuWhrMaXIbFmMx8CAnRvezcHo/DQZReL+XuKHr+EiWoew/
         jzrz5Vbo9vTdw3w4qZnWcCs0Crwz943IBae78ZAoQamISEqf9Zep63kMJShPMw17ryDu
         hY4nx7WWMV/K/Pe2OFniDJyvvYJq/h81h+p3lBN3++I08fU0eI5E3oyvbh4WoMLXW5VQ
         A4y62vO6wDkdMTBfMdoN7hNC6sxwIlAOnr39X2P1rLmOlKrR7oXDNOAmYBrZOgQkTcg5
         vaaME9nxHCvtTgwDE43XxU7CWpWYbjQVR4y6qTY6wJA/GdtCcuaT8ojKGWprFSdchalo
         4N5Q==
X-Gm-Message-State: AA+aEWa4QcCvOXsOJ+4bNGpVztTf/ImRqAhE6YMEXtf1J5jKZjkW0l9f
        i5Qnx2AYs46sLMm/vGMHVOpwAuN1
X-Google-Smtp-Source: AFSGD/X3vgHcZZd9Wv/Gi8DzNDmLo+kApqj6fs4EjIDtFYdUHSfzHZAcMnTEYiVq4cWnTPmXkrVVBQ==
X-Received: by 2002:a2e:93d7:: with SMTP id p23-v6mr6245824ljh.22.1545035438735;
        Mon, 17 Dec 2018 00:30:38 -0800 (PST)
Received: from localhost.localdomain ([213.255.186.46])
        by smtp.gmail.com with ESMTPSA id b81-v6sm2448286ljb.7.2018.12.17.00.30.37
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 17 Dec 2018 00:30:38 -0800 (PST)
Date: Mon, 17 Dec 2018 10:30:35 +0200
From: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
To: Mark Brown <broonie@kernel.org>
Cc: gregkh@linuxfoundation.org, rafael@kernel.org,
        linux-kernel@vger.kernel.org, heikki.haikola@fi.rohmeurope.com,
        mikko.mutanen@fi.rohmeurope.com, mazziesaccount@gmail.com,
        matti.vaittinen@fi.rohmeurope.com
Subject: Re: [RFC] regmap-irq: add "main register" and level-irq support
Message-ID: <20181217083035.GB2477@localhost.localdomain>
References: <20181130085908.GA24983@localhost.localdomain>
 <20181204172137.GE6809@sirena.org.uk>
 <20181205082251.GE31204@localhost.localdomain>
 <20181205172701.GH6205@sirena.org.uk>
 <20181207075829.GA24940@localhost.localdomain>
 <20181207131418.GB6510@sirena.org.uk>
 <20181214135819.GA2735@localhost.localdomain>
 <20181214172619.GC6467@sirena.org.uk>
 <20181217081912.GA2477@localhost.localdomain>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181217081912.GA2477@localhost.localdomain>
User-Agent: Mutt/1.9.2 (2017-12-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 17, 2018 at 10:19:12AM +0200, Matti Vaittinen wrote:
> Hello Mark & All,
> 
> On Fri, Dec 14, 2018 at 05:26:19PM +0000, Mark Brown wrote:
> > On Fri, Dec 14, 2018 at 03:58:19PM +0200, Matti Vaittinen wrote:
> > > On Fri, Dec 07, 2018 at 01:14:18PM +0000, Mark Brown wrote:
> > 
> > > I could send an example on how the driver utilizing the original RFC
> > > interface would look like. I am starting to think it was not *that* bad
> > > after all...
> > 
> > That might help, yes.
> > 
> This is what I came up with. I think having the simple mapping arrays
> (bitX_offsets) and REGMAP_IRQ_MAIN_REG_OFFSET macro makes this
> not-so-bad :) I will also send an example on how this would look like
> with the RFC v2 interface.

I decided to go with diff between RFC v1 and RFC v2 driver interfaces:

diff --git a/drivers/mfd/rohm-bd70528.c b/drivers/mfd/rohm-bd70528.c
index b270cdad1db6..abb0cff8d1c2 100644
--- a/drivers/mfd/rohm-bd70528.c
+++ b/drivers/mfd/rohm-bd70528.c
@@ -41,92 +41,114 @@ static struct regmap_config bd70528_regmap = {
 	.max_register = BD70528_MAX_REGISTER,
 	.cache_type = REGCACHE_RBTREE,
 };
-/* bit [0] - Shutdown register */
-unsigned int bit0_offsets[] = {0};
-/* bit [1] - Power failure register */
-unsigned int bit1_offsets[] = {1};
-/* bit [2] - VR FAULT register */
-unsigned int bit2_offsets[] = {2};
-/* bit [3] - PMU register interrupts */
-unsigned int bit3_offsets[] = {3};
-/* bit [4] - Charger 1 and Charger 2 registers */
-unsigned int bit4_offsets[] = {4,5};
-/* bit [5] - RTC register */
-unsigned int bit5_offsets[] = {6};
-/* bit [6] - GPIO register */
-unsigned int bit6_offsets[] = {7};
-/* bit [7] - Invalid operation register */
-unsigned int bit7_offsets[] = {8};
-
-static struct regmap_irq_sub_irq_map bd70528_sub_irq_offsets[] = {
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit0_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit1_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit2_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit3_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit4_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit5_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit6_offsets),
-	REGMAP_IRQ_MAIN_REG_OFFSET(bit7_offsets),
-};
 
 static struct regmap_irq bd70528_irqs[] = {
-	REGMAP_IRQ_REG(BD70528_INT_LONGPUSH, 0, BD70528_INT_LONGPUSH_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_WDT, 0, BD70528_INT_WDT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_HWRESET, 0, BD70528_INT_HWRESET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_RSTB_FAULT, 0, BD70528_INT_RSTB_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_VBAT_UVLO, 0, BD70528_INT_VBAT_UVLO_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_TSD, 0, BD70528_INT_TSD_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_RSTIN, 0, BD70528_INT_RSTIN_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK1_FAULT, 1, BD70528_INT_BUCK1_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK2_FAULT, 1, BD70528_INT_BUCK2_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK3_FAULT, 1, BD70528_INT_BUCK3_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LDO1_FAULT, 1, BD70528_INT_LDO1_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LDO2_FAULT, 1, BD70528_INT_LDO2_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LDO3_FAULT, 1, BD70528_INT_LDO3_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LED1_FAULT, 1, BD70528_INT_LED1_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LED2_FAULT, 1, BD70528_INT_LED2_FAULT_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK1_OCP, 2, BD70528_INT_BUCK1_OCP_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK2_OCP, 2, BD70528_INT_BUCK2_OCP_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK3_OCP, 2, BD70528_INT_BUCK3_OCP_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LED1_OCP, 2, BD70528_INT_LED1_OCP_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LED2_OCP, 2, BD70528_INT_LED2_OCP_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK1_FULLON, 2, BD70528_INT_BUCK1_FULLON_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK2_FULLON, 2, BD70528_INT_BUCK2_FULLON_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_SHORTPUSH, 3, BD70528_INT_SHORTPUSH_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_AUTO_WAKEUP, 3, BD70528_INT_AUTO_WAKEUP_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_STATE_CHANGE, 3, BD70528_INT_STATE_CHANGE_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BAT_OV_RES, 4, BD70528_INT_BAT_OV_RES_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BAT_OV_DET, 4, BD70528_INT_BAT_OV_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DBAT_DET, 4, BD70528_INT_DBAT_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BATTSD_COLD_RES, 4, BD70528_INT_BATTSD_COLD_RES_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BATTSD_COLD_DET, 4, BD70528_INT_BATTSD_COLD_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BATTSD_HOT_RES, 4, BD70528_INT_BATTSD_HOT_RES_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BATTSD_HOT_DET, 4, BD70528_INT_BATTSD_HOT_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_CHG_TSD, 4, BD70528_INT_CHG_TSD_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BAT_RMV, 5, BD70528_INT_BAT_RMV_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BAT_DET, 5, BD70528_INT_BAT_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DCIN2_OV_RES, 5, BD70528_INT_DCIN2_OV_RES_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DCIN2_OV_DET, 5, BD70528_INT_DCIN2_OV_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DCIN2_RMV, 5, BD70528_INT_DCIN2_RMV_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DCIN2_DET, 5, BD70528_INT_DCIN2_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DCIN1_RMV, 5, BD70528_INT_DCIN1_RMV_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_DCIN1_DET, 5, BD70528_INT_DCIN1_DET_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_RTC_ALARM, 6, BD70528_INT_RTC_ALARM_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_ELPS_TIM, 6, BD70528_INT_ELPS_TIM_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_GPIO0, 7, BD70528_INT_GPIO0_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_GPIO1, 7, BD70528_INT_GPIO1_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_GPIO2, 7, BD70528_INT_GPIO2_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_GPIO3, 7, BD70528_INT_GPIO3_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK1_DVS_OPFAIL, 8, BD70528_INT_BUCK1_DVS_OPFAIL_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK2_DVS_OPFAIL, 8, BD70528_INT_BUCK2_DVS_OPFAIL_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_BUCK3_DVS_OPFAIL, 8, BD70528_INT_BUCK3_DVS_OPFAIL_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LED1_VOLT_OPFAIL, 8, BD70528_INT_LED1_VOLT_OPFAIL_MASK),
-	REGMAP_IRQ_REG(BD70528_INT_LED2_VOLT_OPFAIL, 8, BD70528_INT_LED2_VOLT_OPFAIL_MASK),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LONGPUSH, 0, BD70528_INT_LONGPUSH_MASK,
+			    0, 1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_WDT, 0, BD70528_INT_WDT_MASK, 0, 1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_HWRESET, 0, BD70528_INT_HWRESET_MASK, 0,
+			    1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_RSTB_FAULT, 0,
+			    BD70528_INT_RSTB_FAULT_MASK, 0, 1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_VBAT_UVLO, 0,
+			    BD70528_INT_VBAT_UVLO_MASK, 0, 1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_TSD, 0, BD70528_INT_TSD_MASK, 0, 1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_RSTIN, 0, BD70528_INT_RSTIN_MASK, 0, 1),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK1_FAULT, 1,
+			    BD70528_INT_BUCK1_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK2_FAULT, 1,
+			    BD70528_INT_BUCK2_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK3_FAULT, 1,
+			    BD70528_INT_BUCK3_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LDO1_FAULT, 1,
+			    BD70528_INT_LDO1_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LDO2_FAULT, 1,
+			    BD70528_INT_LDO2_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LDO3_FAULT, 1,
+			    BD70528_INT_LDO3_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LED1_FAULT, 1,
+			    BD70528_INT_LED1_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LED2_FAULT, 1,
+			    BD70528_INT_LED2_FAULT_MASK, 0, 2),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK1_OCP, 2,
+			    BD70528_INT_BUCK1_OCP_MASK, 0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK2_OCP, 2,
+			    BD70528_INT_BUCK2_OCP_MASK, 0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK3_OCP, 2,
+			    BD70528_INT_BUCK3_OCP_MASK, 0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LED1_OCP, 2, BD70528_INT_LED1_OCP_MASK,
+			    0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LED2_OCP, 2, BD70528_INT_LED2_OCP_MASK,
+			    0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK1_FULLON, 2,
+			    BD70528_INT_BUCK1_FULLON_MASK, 0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK2_FULLON, 2,
+			    BD70528_INT_BUCK2_FULLON_MASK, 0, 3),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_SHORTPUSH, 3,
+			    BD70528_INT_SHORTPUSH_MASK, 0, 4),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_AUTO_WAKEUP, 3,
+			    BD70528_INT_AUTO_WAKEUP_MASK, 0, 4),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_STATE_CHANGE, 3,
+			    BD70528_INT_STATE_CHANGE_MASK, 0, 4),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BAT_OV_RES, 4,
+			    BD70528_INT_BAT_OV_RES_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BAT_OV_DET, 4,
+			    BD70528_INT_BAT_OV_DET_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DBAT_DET, 4, BD70528_INT_DBAT_DET_MASK,
+			    0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BATTSD_COLD_RES, 4,
+			    BD70528_INT_BATTSD_COLD_RES_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BATTSD_COLD_DET, 4,
+			    BD70528_INT_BATTSD_COLD_DET_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BATTSD_HOT_RES, 4,
+			    BD70528_INT_BATTSD_HOT_RES_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BATTSD_HOT_DET, 4,
+			    BD70528_INT_BATTSD_HOT_DET_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_CHG_TSD, 4,
+			    BD70528_INT_CHG_TSD_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BAT_RMV, 5, BD70528_INT_BAT_RMV_MASK,
+			    0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BAT_DET, 5, BD70528_INT_BAT_DET_MASK, 0,
+			    5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DCIN2_OV_RES, 5,
+			    BD70528_INT_DCIN2_OV_RES_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DCIN2_OV_DET, 5,
+			    BD70528_INT_DCIN2_OV_DET_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DCIN2_RMV, 5,
+			    BD70528_INT_DCIN2_RMV_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DCIN2_DET, 5,
+			    BD70528_INT_DCIN2_DET_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DCIN1_RMV, 5,
+			    BD70528_INT_DCIN1_RMV_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_DCIN1_DET, 5,
+			    BD70528_INT_DCIN1_DET_MASK, 0, 5),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_RTC_ALARM, 6,
+			    BD70528_INT_RTC_ALARM_MASK, 0, 6),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_ELPS_TIM, 6, BD70528_INT_ELPS_TIM_MASK,
+			    0, 6),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_GPIO0, 7, BD70528_INT_GPIO0_MASK, 0, 7),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_GPIO1, 7, BD70528_INT_GPIO1_MASK, 0, 7),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_GPIO2, 7, BD70528_INT_GPIO2_MASK, 0, 7),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_GPIO3, 7, BD70528_INT_GPIO3_MASK, 0, 7),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK1_DVS_OPFAIL, 8,
+			    BD70528_INT_BUCK1_DVS_OPFAIL_MASK, 0, 8),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK2_DVS_OPFAIL, 8,
+			    BD70528_INT_BUCK2_DVS_OPFAIL_MASK, 0, 8),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_BUCK3_DVS_OPFAIL, 8,
+			    BD70528_INT_BUCK3_DVS_OPFAIL_MASK, 0, 8),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LED1_VOLT_OPFAIL, 8,
+			    BD70528_INT_LED1_VOLT_OPFAIL_MASK, 0, 8),
+	REGMAP_IRQ_REG_MAIN(BD70528_INT_LED2_VOLT_OPFAIL, 8,
+			    BD70528_INT_LED2_VOLT_OPFAIL_MASK, 0, 8),
+};
+
+static struct regmap_main_status main_irq_reg = {
+	.main_status = BD70528_REG_INT_MAIN,
+	.num_main_regs = 1,
 };
 
 static struct regmap_irq_chip bd70528_irq_chip = {
 	.name = "bd70528_irq",
-	.main_status = BD70528_REG_INT_MAIN,
 	.irqs = &bd70528_irqs[0],
 	.num_irqs = ARRAY_SIZE(bd70528_irqs),
 	.status_base = BD70528_REG_INT_SHDN,
@@ -135,11 +157,9 @@ static struct regmap_irq_chip bd70528_irq_chip = {
 	.type_base = BD70528_GPIO1_IN_REG,
 	.init_ack_masked = true,
 	.num_regs = 9,
-	.num_main_regs = 1,
 	.num_type_reg = 4,
-	.sub_reg_offsets = &bd70528_sub_irq_offsets[0],
-	.num_main_status_bits = 8,
 	.irq_reg_stride = 1,
+	.main_reg = &main_irq_reg,
 };
 
Br,
	Matti Vaittinen
