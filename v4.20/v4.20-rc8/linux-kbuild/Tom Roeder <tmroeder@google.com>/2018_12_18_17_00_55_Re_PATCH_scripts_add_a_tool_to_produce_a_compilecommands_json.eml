Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:40:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5838F5805CF;
	Tue, 18 Dec 2018 09:01:08 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 09:01:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOc9KkxBIDIS3crv0CEowUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+pMmwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cogBD+QOMulEsobypVUBrQCmBQSuH+7v1iNEi2Xq0aEmyektDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OrkVUeCw0aLG0TLDYO1L1jjj8ojDbxcsoe2JXbJqdsre11QgGB3fjliL?=
 =?us-ascii?q?pozlODSV1usJs2eF9eZvSeWvi2s+pgx3vzOhyMAsiozTiYIUzFDJ7SF5wIIrJd?=
 =?us-ascii?q?29UkJ7ZsSkEJRWuiqHNIV2WtsvT390tCs+0LEKpJC2cDYQxJg6xBPTd+aLfomK?=
 =?us-ascii?q?7x77SuqcICl0iG5gdb6ihxu97U2txvD+W8Sx31tHqyRFnsXXuXwQ0hHe6caHSv?=
 =?us-ascii?q?V980qkxDqC1hrc5v1BLE00m6rXNp4sz7gtnZQJq0vDBDX5mEDuga+WaEok/u+o?=
 =?us-ascii?q?5vz5YrXpuJCcLZV4igLgPaQ0nMywH+A4PhIJX2iB9uSwzLzj/UvnT7VWlvA6jL?=
 =?us-ascii?q?XVvZTAKcgGqKO1HRVZ3psg5hqjFTur0dYVkWECLF1feRKHi4bpO0vJIPD9Ffq/?=
 =?us-ascii?q?h1WskDF2x/HJJ7HhAYvCLmLFkLj/ebZx8klcyQQ1zd9B/ZJZEa8BIP3tVU/rrt?=
 =?us-ascii?q?DYDQE2Mxayw+n5DNVxzIQeWXiAAqOBKqPdrUeI5v4zI+mLfIIVvDf9K/s76PL0?=
 =?us-ascii?q?gn45hEQQfa2o3ZsRdXC5Ee5qI0SfYXrwnNgBFX0GsRY5TOzvkFeCSyJcZ26uX6?=
 =?us-ascii?q?Ig4TE2EIKmAp3CRoCxmrOB2z23Hp1LZm9cDFCMHmzld4GFW/cKdSKTLdVtkj0C?=
 =?us-ascii?q?Vbi9VYAh0QuiuxP9y7piNuDU4DEXtYr/1Nhp4O3ejRMy9TtqAMiH0GGNSGd0nm?=
 =?us-ascii?q?UPRzIt2KB/oEp9ykqM0KRigvxYE8BT6O1NUgsgKZHcyOl6AcjoWg3dZteJVEqm?=
 =?us-ascii?q?QtK+DD4rVdIxw9gOY0VnF9W4lB/D3TGnA7sUl7yNGZw1/bjQ33n3J8Zh1XnG0L?=
 =?us-ascii?q?MtgEUhQstKLWemnLJw9xDPB47VlEWUj6Wqer4a3CLX8GeDzHCBvEdXUANrVaXF?=
 =?us-ascii?q?XHYfZlbZrNjj50PCSaOuBqojMgdb1cGCLa5KYMXzjVpaXPfjJMjeY2WplmitHx?=
 =?us-ascii?q?mI2K2DYJDqe2oH2iXdE1YLkwYU8XaCNgg+AyOhrnnaDDxvE1Lvfkzt/fN/qHO9?=
 =?us-ascii?q?Uk870QWKY1d92Lqy/x4fneacRO8L3rIYpCchrC15E0un0NLIFdWMvQphc79aYd?=
 =?us-ascii?q?Mm/lhH03nUtwh8PpymMqBjiUQScwVxv0PyyRp3Dp9MntQtrHMv1AByM76X0Etd?=
 =?us-ascii?q?dzOE2pD9IqHXKmj3/BCod67W2lHf3MyK+qsV7/Q4sVHjvACvFkot6Hhn19hV03?=
 =?us-ascii?q?2B5pTFFgYSUJTxUlop+Bh+vb3Vfi4954bM3312Laa0qiPC284uBOY90Bmge8lQ?=
 =?us-ascii?q?MayaGw7yCcEVHNWuJ/EwlFivbRIEO/5S+bUwP8OncfuGxaGqMPxhnDKgkWRI/o?=
 =?us-ascii?q?R93liQ+Cp7T+7Cx4wFzO2A3gubSzf8i0+ss8DqmYxeeT4eBGu+ySj+C45Xaa1/?=
 =?us-ascii?q?ZoILCWaoI82qydRynZ/tW3hE9FG9A1MKwtOmeR2Xb1blxw1fyVwXoWC7mSu/1z?=
 =?us-ascii?q?F0iTApobaF0yzU3uvicwALOmhVS2l4jFfgOJS7gMoeXEe1cQcpjhyl5UDhyqhf?=
 =?us-ascii?q?paR/KXTTQEhScyj3KWFiTrW/tr6Yb8FT75MotD1dUP6gblCCVr79vxwa3jvjHm?=
 =?us-ascii?q?tf3jw6dyumuo7knxx8k2+dKHdzrHzEecB/3xvf5drcReJP0ToCXiV3lT7XBl2k?=
 =?us-ascii?q?Ndmz4dqUj4vDsvy5V2+5VJ1cazPrzYCDtCu8/2FqGgewn/Owmt3mFwg1zyn72s?=
 =?us-ascii?q?JuVSXJqhb8f4bq2767MeJhYklnGlv859BmFYF5l4s6nIsQ1mQChpWJ4XoHln/+?=
 =?us-ascii?q?MNVB1qL5dnYNRz8Lw9jO7Qjh2U1jKG+Jxo3jWnWcxMthe8e1YmcM1i0h6MBKDb?=
 =?us-ascii?q?+e7KZYkittvlq4sQXRbOB+njgHyPsi8n4ag/wTtworwSWQGbQSHUhePSzxmBWE?=
 =?us-ascii?q?9dG+rKNLZGmxdbi8zlZxndekDLuauAFTRG75eos+HS939sh/NVPM0H7p5Y3+dt?=
 =?us-ascii?q?jfc8kTtgGKnBfalOdaNogxlvURiCpjOGL9u2AlyuEhgRxv25G6oJaIK2F38K2l?=
 =?us-ascii?q?BR5YMyX/Z9kP9TH1kaZegsGW0pizHpVmHzUHRprpQuiuEDIPrvTnLAeOHSY4qn?=
 =?us-ascii?q?eaH7rfAACe5F1nr3LJD5CkKXWXKGMFwtVlQRmXPFZfjxwMXDUmgp45ERiny9f7?=
 =?us-ascii?q?f0d+4jAR+0T0qh9Ryu9zMxn/U2HfpBqnazsuSZifKgZW4R9G50vPLcOe6edzFT?=
 =?us-ascii?q?lC/pK9tAyNNnCbZwNQAGELQEOEAk7sPqK06dnc6eSYBfe+L/jTYbWIs+NeTOyF?=
 =?us-ascii?q?xZau0otg4jaNOd+DPnhkD/0nxEVDWWp1FNjemzUKUyYXjT7Cb9aHpBeg/S16ts?=
 =?us-ascii?q?C+8PP2WAL2+IuAEb1SPc90+xCxh6eDOPWdhCJ4KTZey5MNymXEyLkZ3F4OlS5u?=
 =?us-ascii?q?cyOhHqgHtS7IVKjQgLNYDwYHayNvM8tF96I80RdMOc7YidP116R0jv0vC1dCWl?=
 =?us-ascii?q?zuhNupZdERI2ymMFPHBUCLNKmJJDHRwsH3Z7+8RqNUjOlOqxKwvjObGVf5Pjuf?=
 =?us-ascii?q?jznpSwyvMeZUgS6BIRxRo5u9fQhtCGT5SNLmawa2MNt2jT0w3L01iWnGNW8aMT?=
 =?us-ascii?q?hgbUxNqqec4j9fgvV6A2ZB9GZqLfGYmyaF6OnVMooWsfpuAihui+1W+mg1y7tL?=
 =?us-ascii?q?4yFCX/F1nCrSrthzo1CpiOWPyzxnUAZQpTZPno6EoUJiOaDB/JlaRXnE5A4N7X?=
 =?us-ascii?q?mXCxkSp9pqENvvu6VRytjJjK3yKTdC/MjS/csTHMXULMOHMHw8MRvmAjLUDQ0F?=
 =?us-ascii?q?TSK1OmHbnUBSjPaS9njG5qQ9/73lg5MOS6VcHG08E/oWAwwxDdUHKZt+GDYtir?=
 =?us-ascii?q?ebjdQPzWG5pxjWQshKotbMUffEUtv1LzPMsb5BLyEPzL/1N8xHKojh3EFuZ0NS?=
 =?us-ascii?q?k4PNFE7dG9tKp3syPUcPvExR/S0mHSUI0EX/Z1bouSdLGA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AiAADpJhlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gQInjBWLe4INFGiRYYR9gSQDTBMBARgLCAG?=
 =?us-ascii?q?HGAUiNAkNAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQI3BgEBN?=
 =?us-ascii?q?wEEAQkBAQoYCSUDDAUgAQUBAiATBYMdAYF4CAEECpwDPIopgh+CdgEBBYFEQIU?=
 =?us-ascii?q?lCBKLEYEcF4F/gRGCXTWDHgIBgUuDToIEIok+BgGHDVGPLFcJhT+BUIEdhUaDY?=
 =?us-ascii?q?gwYgV0jhHyCeodhLI4PixEGAgkHDyGBJW0NgRRNIxU7gmwJghKDbYUUhWAfMgG?=
 =?us-ascii?q?BAwEBAQ6LB4JLAQE?=
X-IPAS-Result: =?us-ascii?q?A0AiAADpJhlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gQInjBWLe4INFGiRYYR9gSQDTBMBARgLCAGHGAUiNAkNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIKSMMgjYkAYJhAQEBAQIBAQI3BgEBNwEEAQkBAQoYCSU?=
 =?us-ascii?q?DDAUgAQUBAiATBYMdAYF4CAEECpwDPIopgh+CdgEBBYFEQIUlCBKLEYEcF4F/g?=
 =?us-ascii?q?RGCXTWDHgIBgUuDToIEIok+BgGHDVGPLFcJhT+BUIEdhUaDYgwYgV0jhHyCeod?=
 =?us-ascii?q?hLI4PixEGAgkHDyGBJW0NgRRNIxU7gmwJghKDbYUUhWAfMgGBAwEBAQ6LB4JLA?=
 =?us-ascii?q?QE?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="142611965"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 09:01:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727139AbeLRRBD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 12:01:03 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:44515 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726422AbeLRRBC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 12:01:02 -0500
Received: by mail-pl1-f194.google.com with SMTP id e11so7434734plt.11
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 09:01:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=wKfBD+1TWHumVfsMrPC4aOQgIX8YOMlpHV8EfXJQskI=;
        b=NZRO0WBOmXYaCt2QaGafqiwF560MwTfn8c9bS3YlTlZ9ETPzDCXoiucWxPUTIC8Dqv
         e+71xa9Ms4uoxIEVBNjUHuQ/e68465/EKuWyRUhRTId9vOInTl7W2ql2HWQz6ZhaY+he
         qV/Ki/qcDHvcjfiPnPyOHetRCmwR5PXsBoAfXWAYSydqLCLiPIIakO3RFud65WQf3yau
         +vPcUOOO1jQ04NBo49CRRWPH9ARxYP0uMdnZ2XMS3I0f/uc0tZYRvAwe/zNNztM7HTjo
         UZKN1JNG5/9VGQu1cTTMrM/RkGqXQ7iJtNurEetzIPXjbdHQWemq+NiJibYhvcKbW7VH
         OYsQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=wKfBD+1TWHumVfsMrPC4aOQgIX8YOMlpHV8EfXJQskI=;
        b=GTCvthriy+g+0CXq268Fa3PnubWdiLBDNwq+08TQorUP7LTl5BMR8U060AALr+Skvi
         c0T4BxxJruOF1doJVB9qUhFKzwRwG7IClzw4WZbvhEnymPuolr4+AjCHPJync10OOrfh
         pq3OX645zK6BD2SfFwlcQ43C8ojfR+ZoFKpGRpOM1QXYSs4pFyL8lpOGbNzJHCC7oVzH
         24ytdcVZsBH+QN8brLesLBOI3vg5uAmpH2fyvRp4EXPL9OSbKmvt5A11SldSNAaZnjmU
         KYxwxJDCSDdlDGOJD+HepDS1B2L79Gfek6QORxPq5EmORTXIIXkpoEixn/AeHZYJYIz+
         OK/w==
X-Gm-Message-State: AA+aEWYUODuNT2gYOaYtuLQGW9W3njfY9YWzeZn2+5nuM0uy9riBXEyG
        8X2T+R5GGJojKCZ0hIn9ItwPbw==
X-Google-Smtp-Source: AFSGD/XqMC2UHP1KF6Zf/WkHRSbloplmM1Cp2DZmNERG9zF6MIJ7GQERboy0iAnUrJW0TzPoq//Q5Q==
X-Received: by 2002:a17:902:3064:: with SMTP id u91mr16785746plb.325.1545152461384;
        Tue, 18 Dec 2018 09:01:01 -0800 (PST)
Received: from google.com ([2620:15c:17:4:f0b1:8ff5:16a0:5f15])
        by smtp.gmail.com with ESMTPSA id e16sm20838794pfn.46.2018.12.18.09.00.59
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 18 Dec 2018 09:01:00 -0800 (PST)
Date: Tue, 18 Dec 2018 09:00:55 -0800
From: Tom Roeder <tmroeder@google.com>
To: Masahiro Yamada <yamada.masahiro@socionext.com>
Cc: Michal Marek <michal.lkml@markovi.net>,
        Linux Kbuild mailing list <linux-kbuild@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] scripts: add a tool to produce a compile_commands.json
 file
Message-ID: <20181218170055.GA7794@google.com>
References: <20181206222318.218157-1-tmroeder@google.com>
 <CAK7LNATZm6T9bjcAxB_WQw-um-Hjkhiew6qg8CRLayr8qYzLeQ@mail.gmail.com>
 <20181217214022.GA38778@google.com>
 <CAK7LNATG9y04UdJ-Z5AwLHXUcnbWo5Butee0pkL+MFzds04wCA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAK7LNATG9y04UdJ-Z5AwLHXUcnbWo5Butee0pkL+MFzds04wCA@mail.gmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 18, 2018 at 11:17:35AM +0900, Masahiro Yamada wrote:
> On Tue, Dec 18, 2018 at 8:21 AM Tom Roeder <tmroeder@google.com> wrote:
> >
> > On Sat, Dec 15, 2018 at 06:37:49PM +0900, Masahiro Yamada wrote:
> > > On Fri, Dec 7, 2018 at 7:24 AM Tom Roeder <tmroeder@google.com> wrote:
> > > >
> > > > The LLVM/Clang project provides many tools for analyzing C source code.
> > > > Many of these tools are based on LibTooling
> > > > (https://clang.llvm.org/docs/LibTooling.html), which depends on a
> > > > database of compiler flags. The standard container for this database is
> > > > compile_commands.json, which consists of a list of JSON objects, each
> > > > with "directory", "file", and "command" fields.
> > > >
> > > > Some build systems, like cmake or bazel, produce this compilation
> > > > information directly. Naturally, Makefiles don't. However, the kernel
> > > > makefiles already create .<target>.o.cmd files that contain all the
> > > > information needed to build a compile_commands.json file.
> > > >
> > > > So, this commit adds scripts/gen_compile_commands.py, which recursively
> > > > searches through a directory for .<target>.o.cmd files and extracts
> > > > appropriate compile commands from them. It writes a
> > > > compile_commands.json file that LibTooling-based tools can use.
> > > >
> > > > By default, gen_compile_commands.py starts its search in its working
> > > > directory and (over)writes compile_commands.json in the working
> > > > directory. However, it also supports --output and --directory flags for
> > > > out-of-tree use.
> > > >
> > > > Note that while gen_compile_commands.py enables the use of clang-based
> > > > tools, it does not require the kernel to be compiled with clang. E.g.,
> > > > the following sequence of commands produces a compile_commands.json file
> > > > that works correctly with LibTooling.
> > > >
> > > > make defconfig
> > > > make
> > > > scripts/gen_compile_commands.py
> > > >
> > > > Also note that this script is written to work correctly in both Python 2
> > > > and Python 3, so it does not specify the Python version in its first
> > > > line.
> > > >
> > > > For an example of the utility of this script: after running
> > > > gen_compile_commands.json on the latest kernel version, I was able to
> > > > use Vim + the YouCompleteMe pluging + clangd to automatically jump to
> > > > definitions and declarations. Obviously, cscope and ctags provide some
> > > > of this functionality; the advantage of supporting LibTooling is that it
> > > > opens the door to many other clang-based tools that understand the code
> > > > directly and do not rely on regular expressions and heuristics.
> > > >
> > > > Tested: Built several recent kernel versions and ran the script against
> > > > them, testing tools like clangd (for editor/LSP support) and clang-check
> > > > (for static analysis). Also extracted some test .cmd files from a kernel
> > > > build and wrote a test script to check that the script behaved correctly
> > > > with all permutations of the --output and --directory flags.
> > > >
> > > > Signed-off-by: Tom Roeder <tmroeder@google.com>
> > >
> > >
> > > I am fine with this,
> > > but I have one question.
> > >
> > > The generated compile_commands.json
> > > contains $(pound)
> >
> > To make sure we're talking about the same thing: the instances that I've
> > seen of "#" occur in macro definitions in the "command" field in some of
> > the JSON objects. For example, I see things like
> > -D\"KBUILD_STR(s)=\\#s\".
> 
> 
> 
> When I ran this tool against the latest kernel
> (specifically, since commit 9564a8cf)
> I saw the following in "command" field.
> 
> -D\"BUILD_STR(s)=$(pound)s\"
> 
> 
> I am not sure whether it is a problem or not.

Thanks! I can reproduce this; I see this happening in, e.g., objtool's
.cmd files. I guess I failed to test recent enough versions of the
kernel or didn't notice this case. It looks like that commit changes the
handling of the pound sign in .cmd files, so it's highly relevant.

> 
> I do not care about this tool much.
> I will queue up this patch shortly if it is OK with you.

I'd like this tool to work properly on those files, so please don't
queue up the patch yet. I'll get it to handle the "$(pound)" case and
send a revised patch.

> 
> 
> Thanks.
> 
> 
> > >
> > > How is it handled?
> >
> > The Python json module takes care of escaping the output to make a valid
> > JSON string for the "command" field. The gen_compile_commands.py script
> > doesn't take any special action for that or any other character in its
> > output.
> >
> > > Should it be replaced with '\#' ?
> >
> > I don't think it needs to be changed, given my experience with this
> > script and its testing so far: the output seems to work for me. However,
> > are you running into problems due to the presence of this character or
> > inadequate escaping? Please let me know, and I'd be happy to look into
> > it.
> >
> > Tom
> 
> 
> 
> --
> Best Regards
> Masahiro Yamada
