Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:43:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4D4C358055F;
	Wed, 19 Dec 2018 13:55:06 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 13:55:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAUOBehe6SHuVO+SnHEj77VqulGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YRCN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRCDI2h?=
 =?us-ascii?q?b4UBEeQPMuRWr4bhqVQBohSwBRK0BO7t0TJImn370Lcm3+g9CwzKwQotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX+SyzKbW0D7Nde1Z2S3h54jIbB8huuyHULVyccrW10YiDBvFgUuK?=
 =?us-ascii?q?qYP5PzOayP8Nv3KH4OpnUOKikmgqoBx/rDiow8cjkIjJhoQNx1DH6yp52oA1Ks?=
 =?us-ascii?q?O8SEJhZt6kCpRQuieHPIV1WsMvW39ktDo+x7EcpJK2cjYGxI46yxPcd/CLaYmF?=
 =?us-ascii?q?7xD7WOueIzp0nm9pdbKiixqo7EStyuPxWtO03VtEqCdOj8PCuWoX1xPJ78iKUv?=
 =?us-ascii?q?t98Vml2TaIzw3T9O5ELl4ulabBKJ4u3KQwlpwNvkTHBCP2n1/2jKCOekUl/Oin?=
 =?us-ascii?q?9fjnb634qpOAM4J4kBzyP6owlsClHOg1MRQCU3Ka9Om+zLHj+Ff2QLROjv04iK?=
 =?us-ascii?q?nZt5XaKNwfpq64BQ9Vz4ki5w+8Dzi4ytQYm2cILFZcdBKAgYnpPU/BIOrjAPeh?=
 =?us-ascii?q?jFSjji1ry+rFPrL/GJXNKGbMkLP7cbZ68U5cxxI/zcpD6JJMFrEBPPXzV1f1tN?=
 =?us-ascii?q?zZDR82LRa4wun6CNhm0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0l7eb0?=
 =?us-ascii?q?jXAlgV8dYbWp3ZwPZXC4BPtmIlmZbmDrgtsbEWcKoxAxTOrliFCZVT5TZnCyX7?=
 =?us-ascii?q?8z5z0hCYKmC5vDSZ6pgLCbwCi7GZhWbHhcCl+QCXfoa5mEW/AUZS2IOc9hkjsE?=
 =?us-ascii?q?Vbu7R487zx6uthT3y75mLurS5y0Zuojv1Nlz5+3Pix4y8SZ4ANia02GIV2t0hH?=
 =?us-ascii?q?8HRycq3KBjpkxw0lSD3rJ+g/BCEdxT5ulGUgE1NZPHy+x6CtbyWh/Of9uTSVam?=
 =?us-ascii?q?RMmmDi81Tt4r39AOZEN9Ec24jh/fxyqqH6MVl7uTCZMp6K3cwWb+K9x9y3nc0q?=
 =?us-ascii?q?khlEcpQs1IOW2iha5/8gzTCpXNk0WYkaaqaKsd0DTM9GeF0WqBokVYXBRsXqXC?=
 =?us-ascii?q?WHAVflHWosjh5kPeU7+uDqwqPRZbxs6cNKRGcN3pgk9ARPf4JtveZXm8m2OxBR?=
 =?us-ascii?q?aO27ONY5Dme2Qb3CXBFkcElxof8mqBNQg7Hi2huX7RDCRyFVLzZEPh6fV+qHK+?=
 =?us-ascii?q?Tk8z0wGKb01g26Cp+hIPgvycUfcT3rMCuCcusDh0GFe939TLC9uPvQZhfaNcYc?=
 =?us-ascii?q?8j71dDz27Wqwt9Ppm4JaB4mlEeaxh3v1/p1xhvEIpAldYlrXw0wwtyM66Xy05B?=
 =?us-ascii?q?eC6C0pD2Ob3XLXfy8Qura67X3FHezdmX9r0O6PQ+t1XsogWpGlA+/HVg1tlfy2?=
 =?us-ascii?q?Gc6YnSDAoOTZLxVV469hhnp73AfiYx/YLV1X12PqmyvT/PwNYpBOojyha9cNZT?=
 =?us-ascii?q?KqKEFAnuE8IEA8iiMvAlm1+sbhgcJuBd6LY0P9+6d/uBwKOrJudgky68gmRd/Y?=
 =?us-ascii?q?991ViA9yxiRe7S3pYJ2u2X0RGDVzjhklihqMf3mYZfaDEWH2q/zzXkBYFLaq1z?=
 =?us-ascii?q?e4YLFXmhI8mtytpigJ7tXmZS9ES/CFMexM+pZR2SYkT93A1Rz0gWoWarmTClzz?=
 =?us-ascii?q?xyiDwpqquf3CrTw+XtbhYHO2hLRHV8glfoO4S7k9caXE2wZQgziBSl/Vr6x7Rc?=
 =?us-ascii?q?pKlnLWncW11Ifyv1L2FlSKewraCNY81M6JMptyVYTuK8bEueSr78pRsaziziE3?=
 =?us-ascii?q?FfxDA9azGlpJH5kwZmh2KaKXZ5tGDZdt1oxRfD+NzcQuZc3zocSyl/kzXXBFm8?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3LrBnmY4nnzaS6Mf99cUluC1/x8M56GoB4kosti5Acw3kahpOJ/XUZlWf/?=
 =?us-ascii?q?K8lU2aX7bHAVXz4E38bV4BT52E1kNn+JwoP5VnaHzcd7adi1fHgW2j4j4MBQE6?=
 =?us-ascii?q?ib8qZEnSRur1q8rALRZ+V9nzgHxfsv7n4an/8GuA43wiqBBbASGFFSPTbwmBSQ?=
 =?us-ascii?q?89C+sKJXaX6zcbi30Upyh9GgA6uEogFBQ3b5YZYiEDR07sV+NlLMzXLy5pvleN?=
 =?us-ascii?q?nWcdIcqBmUnw3cgOhSLZI7juAKijZ/OWLhoX0lzPY2ggd00pG9uIiHNn9h/Kak?=
 =?us-ascii?q?AhNDMj31ZsUT+izijKpEn8aW2ZyvEYtlGjkRQJToSveoGioItfv7LwaODCE8qn?=
 =?us-ascii?q?CDFLrdBwCf7Vlpr2nVH5C3LX2XJ2QZzdZ/RBmbPkNfmxsZXDE7np4/CwCry9bt?=
 =?us-ascii?q?cEZ/5jAN+FH4rgFAxf5vNxn6Sm3fvhunai8oSJiDKxpb9gFD50DIMcyH8+J8BS?=
 =?us-ascii?q?dY8oe6rAyKLGybaB9FDWUIWkyCGlDiMaOi5djG8+iEGOW+K+HCbqmJqexbT/2I?=
 =?us-ascii?q?346g0pN6/zaQMcWCJnliAOM62kpAXnB5Gt7VmzYVSywQmCLCcdSbpAqn+iBsqs?=
 =?us-ascii?q?C/8fLrWB/g5IeVCrtSN8lv9A6ygauZK+GQgyN5Iy5C1pwQ3X/I1KQf3FkKhi50?=
 =?us-ascii?q?ajmiCq4AujDNTa7Knq9XDgUWaydyNMtO8qI90RNBOc/ditPpyLF4iuQ5BEtCVV?=
 =?us-ascii?q?zkgsupf9AFI3mhNFPbA0aGLKiGJTzOw83tfaywU6FfjOVKuB22ojubF07jPjKe?=
 =?us-ascii?q?lzjmTRyvMOdMjD2FMxxaoo2ybhFtCW37RtL8dhK7KMN3jSExwbAshnLFL2gcMT?=
 =?us-ascii?q?19c0NLtrKR7CNYje95G2xO9XdlKeiEmyCE7+jXMJoWsP1rAjhqmOJe+ng117xV?=
 =?us-ascii?q?7CQXDMByzQHIv9doqhmclfKTxzZ7GE5EsCdCgoujvUJnNOPW8Z5MXHffuhUX4j?=
 =?us-ascii?q?PUQzApgv8tXtnuvb1Aj9vCjqT+LB9c/N/Ou8gRHc7ZLISAKnV3YjTzHzuBLgwI?=
 =?us-ascii?q?BQamL2rfilcVxPOV+1WNo4IxqpX33pEJT+kIBxQOCvoGBxE9T5Q5K5BtU2ZhyO?=
 =?us-ascii?q?bDgQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAQBlvRpch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYJqgQInjHWNKhSBDZgvLQ8EAYctIjgSAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAQIDAQJ2BgkBAQoYLgNUBgESBYMdAYIBAwIKqUqELQGBE4RujD8Xg?=
 =?us-ascii?q?X+EI4pgAos/hF8BN5BeCYIphGeKaoIrjy4siRyBc4MGi0KBXIF3TSMVgycJCoI?=
 =?us-ascii?q?UF4hehWAgMQEBAQGBAAEBASCNQAEB?=
X-IPAS-Result: =?us-ascii?q?A0AEAQBlvRpch0O0hNFkHAEBAQQBAQcEAQGBZYJqgQInjHW?=
 =?us-ascii?q?NKhSBDZgvLQ8EAYctIjgSAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDA?=
 =?us-ascii?q?QJ2BgkBAQoYLgNUBgESBYMdAYIBAwIKqUqELQGBE4RujD8XgX+EI4pgAos/hF8?=
 =?us-ascii?q?BN5BeCYIphGeKaoIrjy4siRyBc4MGi0KBXIF3TSMVgycJCoIUF4hehWAgMQEBA?=
 =?us-ascii?q?QGBAAEBASCNQAEB?=
X-IronPort-AV: E=Sophos;i="5.56,374,1539673200"; 
   d="scan'208";a="56611709"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 13:55:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729255AbeLSVzC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 16:55:02 -0500
Received: from smtprelay0015.hostedemail.com ([216.40.44.15]:60440 "EHLO
        smtprelay.hostedemail.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1728285AbeLSVzB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 16:55:01 -0500
Received: from filter.hostedemail.com (clb03-v110.bra.tucows.net [216.40.38.60])
        by smtprelay06.hostedemail.com (Postfix) with ESMTP id B25DF18223269;
        Wed, 19 Dec 2018 21:55:00 +0000 (UTC)
X-Session-Marker: 6A6F6540706572636865732E636F6D
X-Spam-Summary: 2,0,0,,d41d8cd98f00b204,joe@perches.com,:::::::::::::::,RULES_HIT:41:355:379:599:800:960:967:973:988:989:1260:1263:1277:1311:1313:1314:1345:1359:1437:1515:1516:1518:1534:1543:1593:1594:1605:1711:1730:1747:1777:1792:2194:2199:2393:2525:2559:2563:2682:2685:2693:2828:2859:2902:2933:2937:2939:2942:2945:2947:2951:2954:3022:3138:3139:3140:3141:3142:3622:3865:3866:3867:3868:3870:3871:3872:3874:3934:3936:3938:3941:3944:3947:3950:3953:3956:3959:4321:4384:5007:6119:7903:7904:8603:9025:9040:9108:10004:10400:10848:11026:11232:11257:11658:11914:12043:12438:12555:12740:12760:12783:12895:12986:13439:14181:14659:14721:14849:21080:21347:21433:21451:21627:30051:30054:30070:30079:30091,0,RBL:47.151.153.53:@perches.com:.lbl8.mailshell.net-62.8.0.100 64.201.201.201,CacheIP:none,Bayesian:0.5,0.5,0.5,Netcheck:none,DomainCache:0,MSF:not bulk,SPF:fn,MSBL:0,DNSBL:neutral,Custom_rules:0:0:0,LFtime:30,LUA_SUMMARY:none
X-HE-Tag: beds66_48a583d208a38
X-Filterd-Recvd-Size: 4543
Received: from XPS-9350.home (unknown [47.151.153.53])
        (Authenticated sender: joe@perches.com)
        by omf06.hostedemail.com (Postfix) with ESMTPA;
        Wed, 19 Dec 2018 21:54:59 +0000 (UTC)
Message-ID: <b6cc5327509148fb26bfba2ca34f9c2927437707.camel@perches.com>
Subject: Re: [RFC][PATCH] string.h: Add strncmp_prefix() helper macro
From: Joe Perches <joe@perches.com>
To: Bryana Rostedt <bryana@home.goodmis.org>,
        LKML <linux-kernel@vger.kernel.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Ingo Molnar <mingo@kernel.org>,
        Tom Zanussi <zanussi@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date: Wed, 19 Dec 2018 13:54:57 -0800
In-Reply-To: <20181219163207.792e0f97@gandalf.local.home>
References: <20181219163207.792e0f97@gandalf.local.home>
Content-Type: text/plain; charset="ISO-8859-1"
User-Agent: Evolution 3.30.1-1build1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, 2018-12-19 at 16:32 -0500, Bryana Rostedt wrote:
> A discussion came up in the trace triggers thread about converting a
> bunch of:
> 
>  strncmp(str, "const", sizeof("const") - 1)
> 
> use cases into a helper macro. It started with:
> 
> #define strncmp_const(str, const) \
> 	strncmp(str, const, sizeof(const) - 1)
> 
> But then Joe Perches mentioned that if a const is not used, the
> sizeof() will be the size of a pointer, which can be bad. And that
> gcc will optimize strlen("const") into "sizeof("const") - 1".
> 
> Thinking about this more, a quick grep in the kernel tree found several
> (thousands!) of cases that use this construct. A quick grep also
> revealed that there's probably several bugs in that use case. Some are
> that people forgot the "- 1" (which I found) and others could be that
> the constant for the sizeof is different than the constant (although, I
> haven't found any of those, but I also didn't look hard).
> 
> I figured the best thing to do is to create a helper macro and place it
> into include/linux/string.h. And go around and fix all the open coded
> versions of it later.
> 
> I plan on only applying this patch and updating the tracing hooks for
> this merge window. And perhaps use it to fix some of the bugs that were
> found.
> 
> I was going to just use:
> 
> #define strncmp_prefix(str, prefix) \
> 	strncmp(str, prefix, strlen(prefix))
> 
> but then realized that "prefix" is used twice, and will break if
> someone does something like:
> 
> 	strncmp_prefix(str, ptr++);
> 
> So instead I check with __builtin_constant_p() to see if the second
> parameter is truly a constant, which I use sizeof() anyway (why bother
> gcc to optimize it, if we already know it's a constant), and copy the
> parameter into a local variable and use that local variable for the non
> constant part (with strlen).
> 
> Link: http://lkml.kernel.org/r/e3e754f2bd18e56eaa8baf79bee619316ebf4cfc.1545161087.git.tom.zanussi@linux.intel.com
> 
> Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
> ---
> diff --git a/include/linux/string.h b/include/linux/string.h
> index 27d0482e5e05..3dc743e3a0ba 100644
> --- a/include/linux/string.h
> +++ b/include/linux/string.h
> @@ -14,6 +14,27 @@ extern void *memdup_user(const void __user *, size_t);
>  extern void *vmemdup_user(const void __user *, size_t);
>  extern void *memdup_user_nul(const void __user *, size_t);
>  
> +/*
> + * A common way to test a prefix of a string is to do:
> + *  strncmp(str, prefix, sizeof(prefix) - 1)
> + *
> + * But this can lead to bugs due to typos, or if prefix is a pointer
> + * and not a constant. Instead use strncmp_prefix().
> + */
> +#define strncmp_prefix(str, prefix)					\e
> +	({								\
> +		int ____strcmp_prefix_ret____;				\
> +		char *____strcmp_prefix____ = prefix;			\

This creates a warning and discards any const from prefix when used like

	static const char foo[] = "bar";

	strncmp_prefix(str, foo);

> +		if (__builtin_constant_p(&prefix))			\
> +			____strcmp_prefix_ret____ =			\
> +				strncmp(str, prefix, sizeof(prefix) - 1); \
> +		else							\
> +			____strcmp_prefix_ret____ =			\
> +				strncmp(str, ____strcmp_prefix____,	\
> +					strlen(____strcmp_prefix____));	\
> +		____strcmp_prefix_ret____;				\
> +	})
> +

Perhaps

#define strncmp_prefix(str, prefix)					\
({									\
	typeof(prefix) p = (prefix);					\
	strncmp(str, p, strlen(p));					\
})


