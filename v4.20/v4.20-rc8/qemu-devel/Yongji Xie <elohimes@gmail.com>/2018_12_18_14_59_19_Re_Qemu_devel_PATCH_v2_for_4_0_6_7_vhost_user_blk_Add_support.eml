Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:39:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B0F9158055F
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 07:30:00 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 07:30:00 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Ad3ISexye5rxG97DXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?2u0eIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CSmVBUMReWSxPDI2/?=
 =?us-ascii?q?cYUAE/cPPf5aoof/qFYCsBWzCRWyC+P00TJImmP60Lcm3+g9DQ3L3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fXuKyzKnOwjXDbfJW0ir854jJbB8qvPaBUqx0ccrWyUkvFgbFgUuL?=
 =?us-ascii?q?qYH+MDOV0/4Cs2mf7+Z6Se2vjGsnphh3rzOyxckskpHEipwJxl3H7yl13Zs5KN?=
 =?us-ascii?q?6iREJlb9OpEIFcuzyYOoduXM8vQn1ktSQ/x70IupO0ZzQGxZEoyhPcavGKfI2F?=
 =?us-ascii?q?7gz/WOuUJDp3mH1odKy5ih2v60av0Pf8WdOx0FtSripKjN3MtncV2hzX68iHUe?=
 =?us-ascii?q?d9/ly71TaA0QDT9/tIIUcularUM5Ihw7gwmYQPsUnbACP6hEb7gLWLekk5+eWk?=
 =?us-ascii?q?8frrb7vmq5OGKoN5iBnyMqE0lcy+BeQ4PBIOX2+e+emkzb3s40j5QKhTgvIrjK?=
 =?us-ascii?q?bZro7VJcACqqGiBA9Vz4Aj5AqhADe919gYmXgHLFFbdx6dgInpJknDIPT5Dfe5?=
 =?us-ascii?q?nlStny1nx/HAPr39HJrNKmLPn6vmfbZ48ENczg0zzdZQ55JSF7ENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9TbxbJV6Eay/snssZCjVN+Q4/V/DxzluFVzFVejC1Ra?=
 =?us-ascii?q?174zg6DIevC8DEXpysh7qamz62G4ATam1YB1TfLHHzao/RXv4NbD6VcNZslyFB?=
 =?us-ascii?q?WbW/Rotkzxy3qQLh15JhKezb/DBesojsg8No7e/eng1n6DpvEs6G2HuMRWwnom?=
 =?us-ascii?q?RddiIszehcplB61B/XwLVikrlbEsBU+dtYWwE2OI6Z0+FzDpboR1SSUM2OTQOX?=
 =?us-ascii?q?RdOpAzB5ftM8i4sDZ0F9GtCvlTjM2iOrB/kekLndV898yb7Vw3Wkf5U18H3Bzq?=
 =?us-ascii?q?R0ygB+GsY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A3AAAOEhlchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwKoEDgTWDfIh4ixpSBoE1iSOON4F2EhgUhx0iNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIGw4jDII2BQIDGgEGglsBAQEBAwECIAQZAQUKDB0BAgECAQIGAQEFBQsKA?=
 =?us-ascii?q?wICIgQCAgMBHQEBEQEFARwGEwWCUkuBaAEDCA0BBJt6PIsZfBYFAReCdwWERAo?=
 =?us-ascii?q?ZJw1egTcCBhJ5izQXeIEHgRGDEoJXhTKCVwKJPDYGgUOFFFKEBYtOMAmOL4MxG?=
 =?us-ascii?q?JFXj02KFw8hgSWCDjMaCBsVbII7ghsMFxKDOIpgNDGBB4t8gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A3AAAOEhlchxHrdtBkHgEGBwaBUQkLAYEwKoEDgTWDfIh?=
 =?us-ascii?q?4ixpSBoE1iSOON4F2EhgUhx0iNAkNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2B?=
 =?us-ascii?q?QIDGgEGglsBAQEBAwECIAQZAQUKDB0BAgECAQIGAQEFBQsKAwICIgQCAgMBHQE?=
 =?us-ascii?q?BEQEFARwGEwWCUkuBaAEDCA0BBJt6PIsZfBYFAReCdwWERAoZJw1egTcCBhJ5i?=
 =?us-ascii?q?zQXeIEHgRGDEoJXhTKCVwKJPDYGgUOFFFKEBYtOMAmOL4MxGJFXj02KFw8hgSW?=
 =?us-ascii?q?CDjMaCBsVbII7ghsMFxKDOIpgNDGBB4t8gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="56369788"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 07:29:55 -0800
Received: from localhost ([::1]:54461 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZHJi-0002C7-TO
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 10:29:54 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:54969)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gZGqM-0002TK-KT
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:59:36 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gZGqK-0004Se-UO
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:59:34 -0500
Received: from mail-yw1-xc42.google.com ([2607:f8b0:4864:20::c42]:34157)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <elohimes@gmail.com>) id 1gZGqK-0004RB-N4
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:59:32 -0500
Received: by mail-yw1-xc42.google.com with SMTP id g75so6791797ywb.1
	for <qemu-devel@nongnu.org>; Tue, 18 Dec 2018 06:59:32 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc; bh=xMB/XbK+am/1N3tNTBYFpcc/rAz8MX450uX5x4M9+UA=;
	b=rbrqbcleJD/1v8IOPmqDItL4ApKxW19k8E/K9v4dhDw0MWni8Nuxj0ftgrhCBwhd0q
	uMenqUbe9z6dTzEc0LaVOuplo0cvPXxoZsl5zQ5smFeldhlsQfkuM0ijHqQJgOfWsFRU
	dPnmmi31gqWdsNx4GAzJgYx1GUH+kmqgj+jlNIFRWArjKUPMSlsfhx1W41DMaClLGhQQ
	Em355sDZnbxeGFnEsc82D4gkJkRhhngfWBLgMx8UdERt7hGhiURZRCqH3PiZ3PwiXnaN
	iiHz7eK09VJTEseXigg0SXk8F5h5bAvtqTiHWl3W0it0hGI1X0j5ztzBq9hZbhXXleQv
	w0KA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc;
	bh=xMB/XbK+am/1N3tNTBYFpcc/rAz8MX450uX5x4M9+UA=;
	b=LaYwR6oZSDQNuT4JLzE6gmQm7P4x1wEwqdzGtH7TTbGVHDrKNooKNasqHpjsM/aGis
	2MzB29fDZg0TiGgZIKQEXqzkEn5ugeSnz+6WCeNdutWEWoH4i1oX/Cp3MPpZh7wY5whY
	4gq8+s/5ZluvjL7glphg4unmr09n7fL5mT9/wG1L+R6VFFzMRwQGNvifKEgWQJhyKyV7
	Y7vHYZNRGyevkIV0E7okmAyuJ6ByQidOIbDucHRKYgu9pddy760WYBPvYCFclk/JYzZ2
	ZTt+F6Z3HYFxlTU2enBYzlw9BDO6aHiHLNEhfsBwmlUehHVjJUWfoA/FbZ6H0yEKxovN
	H8LQ==
X-Gm-Message-State: AA+aEWYJ33SbEbf8TrRrstj/T1RYwO/BzbHbcO6zYl3B2UrIrutok02m
	BjIRGTAtzGCWu6bkfSX7NOdSATVsKsTGg80rRw4=
X-Google-Smtp-Source: AFSGD/VqA3OzyGVLjbYi2tySsnmYXpNBzFcmO6FbQv0HeeH5E60xQ0Vbkc/UzQ0Z4Nop02HPMMtZ+FO22lsSUmoaLB0=
X-Received: by 2002:a81:a70a:: with SMTP id e10mr18025026ywh.233.1545145171521;
	Tue, 18 Dec 2018 06:59:31 -0800 (PST)
MIME-Version: 1.0
References: <20181218100002.11219-1-xieyongji@baidu.com>
	<20181218100002.11219-7-xieyongji@baidu.com>
	<649661545136221@sas1-bf4ab558af9f.qloud-c.yandex.net>
	<CAONzpcaUjNMd=EWZG51-91mwpRyKy0siQW6LKi82NQrDZ-FUXg@mail.gmail.com>
	<698131545143714@sas1-bf4ab558af9f.qloud-c.yandex.net>
In-Reply-To: <698131545143714@sas1-bf4ab558af9f.qloud-c.yandex.net>
From: Yongji Xie <elohimes@gmail.com>
Date: Tue, 18 Dec 2018 22:59:19 +0800
Message-ID: <CAONzpcbM+mhpGPqv8nHjx5-cdJ0bP8SCc7nsRZpfhAagFhkmnw@mail.gmail.com>
To: Yury Kotov <yury-kotov@yandex-team.ru>
Content-Type: text/plain; charset="UTF-8"
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::c42
Subject: Re: [Qemu-devel] [PATCH v2 for-4.0 6/7] vhost-user-blk: Add support
 to reconnect backend
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "zhangyu31@baidu.com" <zhangyu31@baidu.com>,
	"mst@redhat.com" <mst@redhat.com>, Xie Yongji <xieyongji@baidu.com>,
	"jasowang@redhat.com" <jasowang@redhat.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"lilin24@baidu.com" <lilin24@baidu.com>,
	"maxime.coquelin@redhat.com" <maxime.coquelin@redhat.com>,
	"chaiwen@baidu.com" <chaiwen@baidu.com>,
	"marcandre.lureau@redhat.com" <marcandre.lureau@redhat.com>,
	"nixun@baidu.com" <nixun@baidu.com>,
	=?UTF-8?B?0JXQstCz0LXQvdC40Lkg0K/QutC+0LLQu9C10LI=?= <wrfsh@yandex-team.ru>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, 18 Dec 2018 at 22:35, Yury Kotov <yury-kotov@yandex-team.ru> wrote:
>
> 18.12.2018, 17:16, "Yongji Xie" <elohimes@gmail.com>:
> > On Tue, 18 Dec 2018 at 20:30, Yury Kotov <yury-kotov@yandex-team.ru> wrote:
> >>  + wrfsh@
> >>
> >>  Hi,
> >>
> >>  18.12.2018, 13:01, "elohimes@gmail.com" <elohimes@gmail.com>:
> >>  > From: Xie Yongji <xieyongji@baidu.com>
> >>  >
> >>  > Since we now support the message VHOST_USER_GET_SHM_SIZE
> >>  > and VHOST_USER_SET_SHM_FD. The backend is able to restart
> >>  > safely because it can record inflight I/O in shared memory.
> >>  > This patch allows qemu to reconnect the backend after
> >>  > connection closed.
> >>  >
> >>  > Signed-off-by: Xie Yongji <xieyongji@baidu.com>
> >>  > Signed-off-by: Ni Xun <nixun@baidu.com>
> >>  > Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
> >>  > ---
> >>  > hw/block/vhost-user-blk.c | 183 ++++++++++++++++++++++++-----
> >>  > include/hw/virtio/vhost-user-blk.h | 4 +
> >>  > 2 files changed, 160 insertions(+), 27 deletions(-)
> >>  >
> >>  > diff --git a/hw/block/vhost-user-blk.c b/hw/block/vhost-user-blk.c
> >>  > index 27028cf996..80f2e2d765 100644
> >>  > --- a/hw/block/vhost-user-blk.c
> >>  > +++ b/hw/block/vhost-user-blk.c
> >>  > @@ -101,7 +101,7 @@ const VhostDevConfigOps blk_ops = {
> >>  > .vhost_dev_config_notifier = vhost_user_blk_handle_config_change,
> >>  > };
> >>  >
> >>  > -static void vhost_user_blk_start(VirtIODevice *vdev)
> >>  > +static int vhost_user_blk_start(VirtIODevice *vdev)
> >>  > {
> >>  > VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(vdev)));
> >>  > @@ -110,13 +110,13 @@ static void vhost_user_blk_start(VirtIODevice *vdev)
> >>  >
> >>  > if (!k->set_guest_notifiers) {
> >>  > error_report("binding does not support guest notifiers");
> >>  > - return;
> >>  > + return -ENOSYS;
> >>  > }
> >>  >
> >>  > ret = vhost_dev_enable_notifiers(&s->dev, vdev);
> >>  > if (ret < 0) {
> >>  > error_report("Error enabling host notifiers: %d", -ret);
> >>  > - return;
> >>  > + return ret;
> >>  > }
> >>  >
> >>  > ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, true);
> >>  > @@ -147,12 +147,13 @@ static void vhost_user_blk_start(VirtIODevice *vdev)
> >>  > vhost_virtqueue_mask(&s->dev, vdev, i, false);
> >>  > }
> >>  >
> >>  > - return;
> >>  > + return ret;
> >>  >
> >>  > err_guest_notifiers:
> >>  > k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
> >>  > err_host_notifiers:
> >>  > vhost_dev_disable_notifiers(&s->dev, vdev);
> >>  > + return ret;
> >>  > }
> >>  >
> >>  > static void vhost_user_blk_stop(VirtIODevice *vdev)
> >>  > @@ -171,7 +172,6 @@ static void vhost_user_blk_stop(VirtIODevice *vdev)
> >>  > ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
> >>  > if (ret < 0) {
> >>  > error_report("vhost guest notifier cleanup failed: %d", ret);
> >>  > - return;
> >>  > }
> >>  >
> >>  > vhost_dev_disable_notifiers(&s->dev, vdev);
> >>  > @@ -181,21 +181,43 @@ static void vhost_user_blk_set_status(VirtIODevice *vdev, uint8_t status)
> >>  > {
> >>  > VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > bool should_start = status & VIRTIO_CONFIG_S_DRIVER_OK;
> >>  > + int ret;
> >>  >
> >>  > if (!vdev->vm_running) {
> >>  > should_start = false;
> >>  > }
> >>  >
> >>  > - if (s->dev.started == should_start) {
> >>  > + if (s->should_start == should_start) {
> >>  > + return;
> >>  > + }
> >>  > +
> >>  > + if (!s->connected || s->dev.started == should_start) {
> >>  > + s->should_start = should_start;
> >>  > return;
> >>  > }
> >>  >
> >>  > if (should_start) {
> >>  > - vhost_user_blk_start(vdev);
> >>  > + s->should_start = true;
> >>  > + /*
> >>  > + * make sure vhost_user_blk_handle_output() ignores fake
> >>  > + * guest kick by vhost_dev_enable_notifiers()
> >>  > + */
> >>  > + barrier();
> >>  > + ret = vhost_user_blk_start(vdev);
> >>  > + if (ret < 0) {
> >>  > + error_report("vhost-user-blk: vhost start failed: %s",
> >>  > + strerror(-ret));
> >>  > + qemu_chr_fe_disconnect(&s->chardev);
> >>  > + }
> >>  > } else {
> >>  > vhost_user_blk_stop(vdev);
> >>  > + /*
> >>  > + * make sure vhost_user_blk_handle_output() ignore fake
> >>  > + * guest kick by vhost_dev_disable_notifiers()
> >>  > + */
> >>  > + barrier();
> >>  > + s->should_start = false;
> >>  > }
> >>  > -
> >>  > }
> >>  >
> >>  > static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
> >>  > @@ -225,13 +247,22 @@ static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
> >>  > static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
> >>  > {
> >>  > VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > - int i;
> >>  > + int i, ret;
> >>  >
> >>  > if (!(virtio_host_has_feature(vdev, VIRTIO_F_VERSION_1) &&
> >>  > !virtio_vdev_has_feature(vdev, VIRTIO_F_VERSION_1))) {
> >>  > return;
> >>  > }
> >>  >
> >>  > + if (s->should_start) {
> >>  > + return;
> >>  > + }
> >>  > + s->should_start = true;
> >>  > +
> >>  > + if (!s->connected) {
> >>  > + return;
> >>  > + }
> >>  > +
> >>  > if (s->dev.started) {
> >>  > return;
> >>  > }
> >>  > @@ -239,7 +270,13 @@ static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
> >>  > /* Some guests kick before setting VIRTIO_CONFIG_S_DRIVER_OK so start
> >>  > * vhost here instead of waiting for .set_status().
> >>  > */
> >>  > - vhost_user_blk_start(vdev);
> >>  > + ret = vhost_user_blk_start(vdev);
> >>  > + if (ret < 0) {
> >>  > + error_report("vhost-user-blk: vhost start failed: %s",
> >>  > + strerror(-ret));
> >>  > + qemu_chr_fe_disconnect(&s->chardev);
> >>  > + return;
> >>  > + }
> >>  >
> >>  > /* Kick right away to begin processing requests already in vring */
> >>  > for (i = 0; i < s->dev.nvqs; i++) {
> >>  > @@ -259,12 +296,105 @@ static void vhost_user_blk_reset(VirtIODevice *vdev)
> >>  > vhost_dev_reset_shm(s->shm);
> >>  > }
> >>  >
> >>  > +static int vhost_user_blk_connect(DeviceState *dev)
> >>  > +{
> >>  > + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> >>  > + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > + int ret = 0;
> >>  > +
> >>  > + if (s->connected) {
> >>  > + return 0;
> >>  > + }
> >>  > + s->connected = true;
> >>  > +
> >>  > + s->dev.nvqs = s->num_queues;
> >>  > + s->dev.vqs = s->vqs;
> >>  > + s->dev.vq_index = 0;
> >>  > + s->dev.backend_features = 0;
> >>  > +
> >>  > + vhost_dev_set_config_notifier(&s->dev, &blk_ops);
> >>  > +
> >>  > + ret = vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USER, 0);
> >>  > + if (ret < 0) {
> >>  > + error_report("vhost-user-blk: vhost initialization failed: %s",
> >>  > + strerror(-ret));
> >>  > + return ret;
> >>  > + }
> >>  > +
> >>  > + /* restore vhost state */
> >>  > + if (s->should_start) {
> >>  > + ret = vhost_user_blk_start(vdev);
> >>  > + if (ret < 0) {
> >>  > + error_report("vhost-user-blk: vhost start failed: %s",
> >>  > + strerror(-ret));
> >>  > + return ret;
> >>  > + }
> >>  > + }
> >>  > +
> >>  > + return 0;
> >>  > +}
> >>  > +
> >>  > +static void vhost_user_blk_disconnect(DeviceState *dev)
> >>  > +{
> >>  > + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> >>  > + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > +
> >>  > + if (!s->connected) {
> >>  > + return;
> >>  > + }
> >>  > + s->connected = false;
> >>  > +
> >>  > + if (s->dev.started) {
> >>  > + vhost_user_blk_stop(vdev);
> >>  > + }
> >>  > +
> >>  > + vhost_dev_cleanup(&s->dev);
> >>  > +}
> >>  > +
> >>  > +static gboolean vhost_user_blk_watch(GIOChannel *chan, GIOCondition cond,
> >>  > + void *opaque)
> >>  > +{
> >>  > + DeviceState *dev = opaque;
> >>  > + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> >>  > + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > +
> >>  > + qemu_chr_fe_disconnect(&s->chardev);
> >>  > +
> >>  > + return true;
> >>  > +}
> >>  > +
> >>  > +static void vhost_user_blk_event(void *opaque, int event)
> >>  > +{
> >>  > + DeviceState *dev = opaque;
> >>  > + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> >>  > + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > +
> >>  > + switch (event) {
> >>  > + case CHR_EVENT_OPENED:
> >>  > + if (vhost_user_blk_connect(dev) < 0) {
> >>  > + qemu_chr_fe_disconnect(&s->chardev);
> >>  > + return;
> >>  > + }
> >>  > + s->watch = qemu_chr_fe_add_watch(&s->chardev, G_IO_HUP,
> >>  > + vhost_user_blk_watch, dev);
> >>  > + break;
> >>  > + case CHR_EVENT_CLOSED:
> >>  > + vhost_user_blk_disconnect(dev);
> >>  > + if (s->watch) {
> >>  > + g_source_remove(s->watch);
> >>  > + s->watch = 0;
> >>  > + }
> >>  > + break;
> >>  > + }
> >>  > +}
> >>  > +
> >>  > static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
> >>  > {
> >>  > VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> >>  > VHostUserBlk *s = VHOST_USER_BLK(vdev);
> >>  > VhostUserState *user;
> >>  > int i, ret;
> >>  > + Error *err = NULL;
> >>  >
> >>  > if (!s->chardev.chr) {
> >>  > error_setg(errp, "vhost-user-blk: chardev is mandatory");
> >>  > @@ -299,23 +429,21 @@ static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
> >>  > }
> >>  >
> >>  > s->shm = g_new0(struct vhost_shm, 1);
> >>  > -
> >>  > - s->dev.nvqs = s->num_queues;
> >>  > - s->dev.vqs = g_new(struct vhost_virtqueue, s->dev.nvqs);
> >>  > - s->dev.vq_index = 0;
> >>  > - s->dev.backend_features = 0;
> >>  > -
> >>  > - vhost_dev_set_config_notifier(&s->dev, &blk_ops);
> >>  > -
> >>  > - ret = vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USER, 0);
> >>  > - if (ret < 0) {
> >>  > - error_setg(errp, "vhost-user-blk: vhost initialization failed: %s",
> >>  > - strerror(-ret));
> >>  > - goto virtio_err;
> >>  > + s->vqs = g_new(struct vhost_virtqueue, s->num_queues);
> >>  > + s->watch = 0;
> >>  > + s->should_start = false;
> >>  > + s->connected = false;
> >>  > +
> >>  > + while (qemu_chr_fe_wait_connected(&s->chardev, &err) < 0) {
> >>  > + error_report_err(err);
> >>  > + err = NULL;
> >>  > + sleep(1);
> >>  > }
> >>
> >>  After the reconnect loop we have some function calls to vhost backend:
> >>  * qemu_chr_fe_set_handlers implicit calls vhost_dev_init
> >>  * vhost_dev_get_config
> >>  * vhost_dev_init_shm
> >>
> >>  If vhost backend will restart during their execution the initialzation will be
> >>  failed. What do you think? May be we can call these functions inside of
> >>  the reconnect loop to fix it?
> >
> > qemu_chr_fe_wait_connected() should be called only when we are in
> > disconnected state. Otherwise, it will be conflicted with reconnect
> > thread.
> >
>
> Reconnect thread is started by reconnet timer callback from the main loop but
> vhost_user_blk_device_realize is also runs in the main loop, so we don't a race
> in this case I think.
>

The reconnet timer callback have an assert: assert(s->connected == 0).
And it's odd to call qemu_chr_fe_wait_connected() when reconnect
thread is running.

Thanks,
Yongji

