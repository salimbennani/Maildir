Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:38:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CF9335805F0
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 06:20:05 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 06:20:05 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A+0FuQhzpseKjIeHXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ugWKPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhTWCxPDYyy?=
 =?us-ascii?q?aIUBAekdMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0myuQtDR3K0RY8E98Mtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTHzyjDb+lW2Dzg7YbIdQwhofaSXbltdsfQyVQvFxnFj1mJ?=
 =?us-ascii?q?qozlOC+V1uMTs2WA7+tvT+SvhHM5pAB+uzSv2tkjhZPMho4P0FDE6Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdTui2AKod6X8AvT3t2tCs0yrAKo4O3cSoSxJg53RHTd+KLfo2J?=
 =?us-ascii?q?7x34V+ucJCt0iXd4dL++mhq/9U2tx+jhWsS1zlpHqDdOnMPWuXAXzRPT79CKSv?=
 =?us-ascii?q?tj8Uel3jaCzwTT6uBfIUAojqrXMZEhwrgtlpYJtkTDBCD2lF33jK+QaEok5vCl?=
 =?us-ascii?q?5/r7brjlvJOQKpJ4hwLkPqgwlMGyAf40PhUMUmSD/OSzzrzj/Un3QLVQif02l7?=
 =?us-ascii?q?HUsInEKsQeu661GhJa3Zg96xmhCzeqyc8XnX4aLFJDZB2IkZPpN1bKIPD5Dvew?=
 =?us-ascii?q?nU6gkTh2x/3eOr3hA5PNLmXMkbv7fLZ97VJcxxQ3zdxF+51UDbQBLen1Wk/2st?=
 =?us-ascii?q?zYARk5MxGuz+bgEtV92ZsSWXiTDa+BLKPSrViI6/orI+mNZ48apizxKvc45/P1?=
 =?us-ascii?q?iX85mFkdfbSm3JcNaXC4GOhmLFudYXb2ntgBFmIK7UIDSvf3ggiCTSJLfCT1GK?=
 =?us-ascii?q?Y9/S0gToShC4jFW8aqmrPG2S66GphfYCdBEkyNFnHzMJyJXupJZC+ML8syrzof?=
 =?us-ascii?q?SLL0ToYg0Q2p5hb3zqciIufK9yldr5/6ydVu+8XVkhc98yEyCN6ShHqQRWN5lX?=
 =?us-ascii?q?9dWjktwapkqlZ8wFrQ7a8tyfFcEtxS4v5Segg/PJ/Yied9Dpq6Dg/FedeITVu9?=
 =?us-ascii?q?atqjCDA1CNk2xolKKwx4AMmKlB3P3yO2RbQSkvbDUJkv7orG0nTxLto7wHHDgu?=
 =?us-ascii?q?1pxVwvWMBGM2G8i+h76hLeDpPhiUiVl6+2M68b2WSFoGKK12GHuk1CXUh0TL/I?=
 =?us-ascii?q?VG03fEbard3loEjFSunqQf4lOxBG1seEJYNQZ9HphEkAT/DmcpyKYWuqnHi5Ax?=
 =?us-ascii?q?mg3L6AbIP2PW4a2XOZQAIBmhAS+HvAPg8nGyqlomT2FjFiFVvzJUjr9KM2/Hay?=
 =?us-ascii?q?Xk4xwkeBaFR82r60/DYPiPCcQu9V1bUB7nQPsTJxSWegxcOeKN2coBQpKLRBe8?=
 =?us-ascii?q?J441Bb0nzxpgV7MpGwarxvj1tYaRkh7BCm7Al+FogVyZtil3gt1gcnbPvAiF4?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAABGARlchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwKiaCEoN8ggBOhiqLGoINiRWORYF2EhgUhECCXSI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjYFAgMaAQaCXAMDAQIgBBkBAQQKKQECAwECBgEBCAIVBQIiB?=
 =?us-ascii?q?AICAwEdNgYBEgWCUkuBaQMVAQMBi3iabXB8M4J2AQEFgQQBAYQHDYIVCIELhnO?=
 =?us-ascii?q?DJYEcgVc/gRFGgkyCV4IqgwiCV4k+gX+FElSPUzAJgiUEgSuKW4NJimOGdIlEh?=
 =?us-ascii?q?gmKJoFGYIEuMxoygy2CGwwXEolPhAUBOW+BAgUhE4tIgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AkAABGARlchxHrdtBkHgEGBwaBUQkLAYEwKiaCEoN8ggB?=
 =?us-ascii?q?OhiqLGoINiRWORYF2EhgUhECCXSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?jYFAgMaAQaCXAMDAQIgBBkBAQQKKQECAwECBgEBCAIVBQIiBAICAwEdNgYBEgW?=
 =?us-ascii?q?CUkuBaQMVAQMBi3iabXB8M4J2AQEFgQQBAYQHDYIVCIELhnODJYEcgVc/gRFGg?=
 =?us-ascii?q?kyCV4IqgwiCV4k+gX+FElSPUzAJgiUEgSuKW4NJimOGdIlEhgmKJoFGYIEuMxo?=
 =?us-ascii?q?ygy2CGwwXEolPhAUBOW+BAgUhE4tIgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="142576941"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 06:20:04 -0800
Received: from localhost ([::1]:53871 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZGE6-0001ZF-VK
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 09:20:03 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:60225)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yury-kotov@yandex-team.ru>) id 1gZGDO-0001WY-Av
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:19:20 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yury-kotov@yandex-team.ru>) id 1gZGDL-0005Rt-5s
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:19:18 -0500
Received: from forwardcorp1o.cmail.yandex.net ([37.9.109.47]:49094)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yury-kotov@yandex-team.ru>)
	id 1gZGDK-0005RD-L9
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:19:15 -0500
Received: from mxbackcorp1j.mail.yandex.net (mxbackcorp1j.mail.yandex.net
	[IPv6:2a02:6b8:0:1619::162])
	by forwardcorp1o.cmail.yandex.net (Yandex) with ESMTP id 87E6B21735;
	Tue, 18 Dec 2018 15:30:21 +0300 (MSK)
Received: from localhost (localhost [::1])
	by mxbackcorp1j.mail.yandex.net (nwsmtp/Yandex) with ESMTP id
	HR6XZ7h5yF-ULQWP68f; Tue, 18 Dec 2018 15:30:21 +0300
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yandex-team.ru;
	s=default; 
	t=1545136221; bh=HWcKpUnOysfx7F4RSEO2IiN01QAxWOkad1TwiX8f4+o=;
	h=From:To:Cc:In-Reply-To:References:Subject:Date:Message-Id;
	b=GkXXH7wHEG2MTob4PxKxsVLMogHXoh5nyIkd0pEz4U10xkfFhKTiF0ikikeQg0H+H
	23ZCnFvIBizpOSPNFBcG4RSfjB7lRgM0B7C2FfUx+kSXP8tNuGWGQYj7UluHCJ6UY6
	wwdnxHIEVSnUoZ38/JnqR0De+K42Soz00ES2xDdk=
Authentication-Results: mxbackcorp1j.mail.yandex.net;
	dkim=pass header.i=@yandex-team.ru
X-Yandex-Sender-Uid: 1120000000071945
Received: by sas1-bf4ab558af9f.qloud-c.yandex.net with HTTP;
	Tue, 18 Dec 2018 15:30:21 +0300
From: Yury Kotov <yury-kotov@yandex-team.ru>
To: "elohimes@gmail.com" <elohimes@gmail.com>,
	"mst@redhat.com" <mst@redhat.com>,
	"marcandre.lureau@redhat.com" <marcandre.lureau@redhat.com>,
	"jasowang@redhat.com" <jasowang@redhat.com>,
	"maxime.coquelin@redhat.com" <maxime.coquelin@redhat.com>
In-Reply-To: <20181218100002.11219-7-xieyongji@baidu.com>
References: <20181218100002.11219-1-xieyongji@baidu.com>
	<20181218100002.11219-7-xieyongji@baidu.com>
MIME-Version: 1.0
X-Mailer: Yamail [ http://yandex.ru ] 5.0
Date: Tue, 18 Dec 2018 15:30:21 +0300
Message-Id: <649661545136221@sas1-bf4ab558af9f.qloud-c.yandex.net>
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 37.9.109.47
Subject: Re: [Qemu-devel] [PATCH v2 for-4.0 6/7] vhost-user-blk: Add support
 to reconnect backend
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "nixun@baidu.com" <nixun@baidu.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"lilin24@baidu.com" <lilin24@baidu.com>,
	"zhangyu31@baidu.com" <zhangyu31@baidu.com>,
	"chaiwen@baidu.com" <chaiwen@baidu.com>, Xie Yongji <xieyongji@baidu.com>,
	=?utf-8?B?0JXQstCz0LXQvdC40Lkg0K/QutC+0LLQu9C10LI=?= <wrfsh@yandex-team.ru>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

+ wrfsh@

Hi,

18.12.2018, 13:01, "elohimes@gmail.com" <elohimes@gmail.com>:
> From: Xie Yongji <xieyongji@baidu.com>
>
> Since we now support the message VHOST_USER_GET_SHM_SIZE
> and VHOST_USER_SET_SHM_FD. The backend is able to restart
> safely because it can record inflight I/O in shared memory.
> This patch allows qemu to reconnect the backend after
> connection closed.
>
> Signed-off-by: Xie Yongji <xieyongji@baidu.com>
> Signed-off-by: Ni Xun <nixun@baidu.com>
> Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
> ---
> =C2=A0hw/block/vhost-user-blk.c | 183 ++++++++++++++++++++++++-----
> =C2=A0include/hw/virtio/vhost-user-blk.h | 4 +
> =C2=A02 files changed, 160 insertions(+), 27 deletions(-)
>
> diff --git a/hw/block/vhost-user-blk.c b/hw/block/vhost-user-blk.c
> index 27028cf996..80f2e2d765 100644
> --- a/hw/block/vhost-user-blk.c
> +++ b/hw/block/vhost-user-blk.c
> @@ -101,7 +101,7 @@ const VhostDevConfigOps blk_ops =3D {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0.vhost_dev_config_notifier =3D vhost_user=
_blk_handle_config_change,
> =C2=A0};
>
> -static void vhost_user_blk_start(VirtIODevice *vdev)
> +static int vhost_user_blk_start(VirtIODevice *vdev)
> =C2=A0{
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0BusState *qbus =3D BUS(qdev_get_parent_bu=
s(DEVICE(vdev)));
> @@ -110,13 +110,13 @@ static void vhost_user_blk_start(VirtIODevice *vd=
ev)
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (!k->set_guest_notifiers) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0error_report("bin=
ding does not support guest notifiers");
> - return;
> + return -ENOSYS;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0ret =3D vhost_dev_enable_notifiers(&s->de=
v, vdev);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (ret < 0) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0error_report("Err=
or enabling host notifiers: %d", -ret);
> - return;
> + return ret;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0ret =3D k->set_guest_notifiers(qbus->pare=
nt, s->dev.nvqs, true);
> @@ -147,12 +147,13 @@ static void vhost_user_blk_start(VirtIODevice *vd=
ev)
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_virtqueue_m=
ask(&s->dev, vdev, i, false);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> - return;
> + return ret;
>
> =C2=A0err_guest_notifiers:
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0k->set_guest_notifiers(qbus->parent, s->d=
ev.nvqs, false);
> =C2=A0err_host_notifiers:
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_dev_disable_notifiers(&s->dev, vdev=
);
> + return ret;
> =C2=A0}
>
> =C2=A0static void vhost_user_blk_stop(VirtIODevice *vdev)
> @@ -171,7 +172,6 @@ static void vhost_user_blk_stop(VirtIODevice *vdev)
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0ret =3D k->set_guest_notifiers(qbus->pare=
nt, s->dev.nvqs, false);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (ret < 0) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0error_report("vho=
st guest notifier cleanup failed: %d", ret);
> - return;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_dev_disable_notifiers(&s->dev, vdev=
);
> @@ -181,21 +181,43 @@ static void vhost_user_blk_set_status(VirtIODevic=
e *vdev, uint8_t status)
> =C2=A0{
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0bool should_start =3D status & VIRTIO_CON=
FIG_S_DRIVER_OK;
> + int ret;
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (!vdev->vm_running) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0should_start =3D =
false;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> - if (s->dev.started =3D=3D should_start) {
> + if (s->should_start =3D=3D should_start) {
> + return;
> + }
> +
> + if (!s->connected || s->dev.started =3D=3D should_start) {
> + s->should_start =3D should_start;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0return;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (should_start) {
> - vhost_user_blk_start(vdev);
> + s->should_start =3D true;
> + /*
> + * make sure vhost_user_blk_handle_output() ignores fake
> + * guest kick by vhost_dev_enable_notifiers()
> + */
> + barrier();
> + ret =3D vhost_user_blk_start(vdev);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost start failed: %s",
> + strerror(-ret));
> + qemu_chr_fe_disconnect(&s->chardev);
> + }
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0} else {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_user_blk_st=
op(vdev);
> + /*
> + * make sure vhost_user_blk_handle_output() ignore fake
> + * guest kick by vhost_dev_disable_notifiers()
> + */
> + barrier();
> + s->should_start =3D false;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
> -
> =C2=A0}
>
> =C2=A0static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
> @@ -225,13 +247,22 @@ static uint64_t vhost_user_blk_get_features(VirtI=
ODevice *vdev,
> =C2=A0static void vhost_user_blk_handle_output(VirtIODevice *vdev, Virt=
Queue *vq)
> =C2=A0{
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> - int i;
> + int i, ret;
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (!(virtio_host_has_feature(vdev, VIRTI=
O_F_VERSION_1) &&
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0!virtio_vdev_has_=
feature(vdev, VIRTIO_F_VERSION_1))) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0return;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> + if (s->should_start) {
> + return;
> + }
> + s->should_start =3D true;
> +
> + if (!s->connected) {
> + return;
> + }
> +
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (s->dev.started) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0return;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
> @@ -239,7 +270,13 @@ static void vhost_user_blk_handle_output(VirtIODev=
ice *vdev, VirtQueue *vq)
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0/* Some guests kick before setting VIRTIO=
_CONFIG_S_DRIVER_OK so start
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0* vhost here instead of waiting for=
 .set_status().
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0*/
> - vhost_user_blk_start(vdev);
> + ret =3D vhost_user_blk_start(vdev);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost start failed: %s",
> + strerror(-ret));
> + qemu_chr_fe_disconnect(&s->chardev);
> + return;
> + }
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0/* Kick right away to begin processing re=
quests already in vring */
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0for (i =3D 0; i < s->dev.nvqs; i++) {
> @@ -259,12 +296,105 @@ static void vhost_user_blk_reset(VirtIODevice *v=
dev)
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_dev_reset_shm(s->shm);
> =C2=A0}
>
> +static int vhost_user_blk_connect(DeviceState *dev)
> +{
> + VirtIODevice *vdev =3D VIRTIO_DEVICE(dev);
> + VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> + int ret =3D 0;
> +
> + if (s->connected) {
> + return 0;
> + }
> + s->connected =3D true;
> +
> + s->dev.nvqs =3D s->num_queues;
> + s->dev.vqs =3D s->vqs;
> + s->dev.vq_index =3D 0;
> + s->dev.backend_features =3D 0;
> +
> + vhost_dev_set_config_notifier(&s->dev, &blk_ops);
> +
> + ret =3D vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USE=
R, 0);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost initialization failed: %s",
> + strerror(-ret));
> + return ret;
> + }
> +
> + /* restore vhost state */
> + if (s->should_start) {
> + ret =3D vhost_user_blk_start(vdev);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost start failed: %s",
> + strerror(-ret));
> + return ret;
> + }
> + }
> +
> + return 0;
> +}
> +
> +static void vhost_user_blk_disconnect(DeviceState *dev)
> +{
> + VirtIODevice *vdev =3D VIRTIO_DEVICE(dev);
> + VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> +
> + if (!s->connected) {
> + return;
> + }
> + s->connected =3D false;
> +
> + if (s->dev.started) {
> + vhost_user_blk_stop(vdev);
> + }
> +
> + vhost_dev_cleanup(&s->dev);
> +}
> +
> +static gboolean vhost_user_blk_watch(GIOChannel *chan, GIOCondition co=
nd,
> + void *opaque)
> +{
> + DeviceState *dev =3D opaque;
> + VirtIODevice *vdev =3D VIRTIO_DEVICE(dev);
> + VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> +
> + qemu_chr_fe_disconnect(&s->chardev);
> +
> + return true;
> +}
> +
> +static void vhost_user_blk_event(void *opaque, int event)
> +{
> + DeviceState *dev =3D opaque;
> + VirtIODevice *vdev =3D VIRTIO_DEVICE(dev);
> + VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> +
> + switch (event) {
> + case CHR_EVENT_OPENED:
> + if (vhost_user_blk_connect(dev) < 0) {
> + qemu_chr_fe_disconnect(&s->chardev);
> + return;
> + }
> + s->watch =3D qemu_chr_fe_add_watch(&s->chardev, G_IO_HUP,
> + vhost_user_blk_watch, dev);
> + break;
> + case CHR_EVENT_CLOSED:
> + vhost_user_blk_disconnect(dev);
> + if (s->watch) {
> + g_source_remove(s->watch);
> + s->watch =3D 0;
> + }
> + break;
> + }
> +}
> +
> =C2=A0static void vhost_user_blk_device_realize(DeviceState *dev, Error=
 **errp)
> =C2=A0{
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VirtIODevice *vdev =3D VIRTIO_DEVICE(dev)=
;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VHostUserBlk *s =3D VHOST_USER_BLK(vdev);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VhostUserState *user;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0int i, ret;
> + Error *err =3D NULL;
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (!s->chardev.chr) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0error_setg(errp, =
"vhost-user-blk: chardev is mandatory");
> @@ -299,23 +429,21 @@ static void vhost_user_blk_device_realize(DeviceS=
tate *dev, Error **errp)
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0s->shm =3D g_new0(struct vhost_shm, 1);
> -
> - s->dev.nvqs =3D s->num_queues;
> - s->dev.vqs =3D g_new(struct vhost_virtqueue, s->dev.nvqs);
> - s->dev.vq_index =3D 0;
> - s->dev.backend_features =3D 0;
> -
> - vhost_dev_set_config_notifier(&s->dev, &blk_ops);
> -
> - ret =3D vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USE=
R, 0);
> - if (ret < 0) {
> - error_setg(errp, "vhost-user-blk: vhost initialization failed: %s",
> - strerror(-ret));
> - goto virtio_err;
> + s->vqs =3D g_new(struct vhost_virtqueue, s->num_queues);
> + s->watch =3D 0;
> + s->should_start =3D false;
> + s->connected =3D false;
> +
> + while (qemu_chr_fe_wait_connected(&s->chardev, &err) < 0) {
> + error_report_err(err);
> + err =3D NULL;
> + sleep(1);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0}

After the reconnect loop we have some function calls to vhost backend:
* qemu_chr_fe_set_handlers implicit calls vhost_dev_init
* vhost_dev_get_config
* vhost_dev_init_shm

If vhost backend will restart during their execution the initialzation wi=
ll be
failed. What do you think? May be we can call these functions inside of
the reconnect loop to fix it?

> + qemu_chr_fe_set_handlers(&s->chardev, NULL, NULL, vhost_user_blk_even=
t,
> + NULL, (void *)dev, NULL, true);
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0ret =3D vhost_dev_get_config(&s->dev, (ui=
nt8_t *)&s->blkcfg,
> - sizeof(struct virtio_blk_config));
> + sizeof(struct virtio_blk_config));
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0if (ret < 0) {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0error_setg(errp, =
"vhost-user-blk: get block config failed");
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0goto vhost_err;
> @@ -335,8 +463,7 @@ static void vhost_user_blk_device_realize(DeviceSta=
te *dev, Error **errp)
>
> =C2=A0vhost_err:
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_dev_cleanup(&s->dev);
> -virtio_err:
> - g_free(s->dev.vqs);
> + g_free(s->vqs);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0g_free(s->shm);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0virtio_cleanup(vdev);
>
> @@ -351,9 +478,11 @@ static void vhost_user_blk_device_unrealize(Device=
State *dev, Error **errp)
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VHostUserBlk *s =3D VHOST_USER_BLK(dev);
>
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_user_blk_set_status(vdev, 0);
> + qemu_chr_fe_set_handlers(&s->chardev, NULL, NULL, NULL,
> + NULL, NULL, NULL, false);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_dev_cleanup(&s->dev);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0vhost_dev_free_shm(s->shm);
> - g_free(s->dev.vqs);
> + g_free(s->vqs);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0g_free(s->shm);
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0virtio_cleanup(vdev);
>
> diff --git a/include/hw/virtio/vhost-user-blk.h b/include/hw/virtio/vho=
st-user-blk.h
> index bb706d70b3..c17d47402b 100644
> --- a/include/hw/virtio/vhost-user-blk.h
> +++ b/include/hw/virtio/vhost-user-blk.h
> @@ -38,6 +38,10 @@ typedef struct VHostUserBlk {
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0struct vhost_dev dev;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0struct vhost_shm *shm;
> =C2=A0=C2=A0=C2=A0=C2=A0=C2=A0VhostUserState *vhost_user;
> + struct vhost_virtqueue *vqs;
> + guint watch;
> + bool should_start;
> + bool connected;
> =C2=A0} VHostUserBlk;
>
> =C2=A0#endif
> --
> 2.17.1

Regards,
Yury

