Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:47:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C53F65805CF
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 08:52:03 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga001-1.fm.intel.com with ESMTP; 17 Dec 2018 08:52:03 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AYzDJFh9ij8gxav9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?0ekcTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsaS2RfUMhfVCtPDYyz?=
 =?us-ascii?q?YYUSF+oMP+RWoobgq1YAsRexGxKsCfjzxjJLnHL6wbc33/g9HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtLqcdT+W1zanSwTXFaPNZxzP95ZPTfRAlu/6DQKx/fdPeyUk1EAPFk02Q?=
 =?us-ascii?q?pZb5MDOS0+QAtXWQ4el4Ve+3lWIrtwJ8riKyyssxiYTFnJwZx17E+Clj3Yo4J8?=
 =?us-ascii?q?W0RFN5bNOnCpdcqT2WOohsTs8/Qmxkoig3xqMAtJWmZiYF0o4nyATaa/Gfc4iH?=
 =?us-ascii?q?/BbjVOGJLDd8hXJlY66/hw2o/UivzO38S9O40FFQripKitXMt3YN2ALP6sWfVP?=
 =?us-ascii?q?dx4kSs1SyS2wzO6exIO144mKTbJpI737I9lIIfsUHZES/3nEX2grWWdkIh+uWw?=
 =?us-ascii?q?8uTofLDmpoKFO4BplA7+LLohmsimDesjNQgOQm6b9vii2734+kH5RLRKjv4ona?=
 =?us-ascii?q?XDv5HaONwWpqq4Aw9Tz4Yi5AyzDzag0NQEg3YHKEhJdw6Aj4jsIFzOJvf4DfGw?=
 =?us-ascii?q?g1SqjTdn3ffGPqfuApnVNHjMjK/hfaph605b0AczydFf55FKBb0bL/PzR1T8tN?=
 =?us-ascii?q?jZDh8/Lgy1zPzrCNR71oMCR22PBrWVP7/VsV+NtaoSJfKRbtoVpCrlMKpioPrv?=
 =?us-ascii?q?lmMi31kae6avwN0Qcn//G/1nJ0CQZz3rmssAFmER+RMzSfGvhFCcXDoAWnCpQq?=
 =?us-ascii?q?hp4zg6DJ6hX57OQ53ojLGf0SP+BJBPe21dFniKFnHncZjCXO0DPzmPKM1smSBR?=
 =?us-ascii?q?SL66VoU63guvvgKp970yN+fR52gUuIzu0PBz4Ovckwx08iZ7XOqH1GTYVWxxjy?=
 =?us-ascii?q?UOQDIy9Kp7qEBwj1iZ1rVgxfdfEI8Ar8hVWxs3YMaPh9dxDMr/D0eYJo+E?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAABX0xdchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwKoEPgSmMdIsYmWWBcxIBARgDEYdWIjQJDQEDAQEBAQEBAgETAQEBCgsJCBs?=
 =?us-ascii?q?OIwyCNgUCAxoBBoJfBAIkCwENAQEECikBAgMBAgYCHykIAwEwAQUBNQWCUksBg?=
 =?us-ascii?q?gABAwGcRDyKIIFsM4J2AQEFhXiBJAgSh2uBfYEogRyCFoERhheHW4lABIF0lWM?=
 =?us-ascii?q?HAocNg0CHAiOBXYgWN4coLIoVjnwCBAIEBQIFDyGBJYIOcFCCbAmCEgwXEoM4g?=
 =?us-ascii?q?QSJUHGBBAOLeIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AkAABX0xdchxHrdtBkHgEGBwaBUQkLAYEwKoEPgSmMdIs?=
 =?us-ascii?q?YmWWBcxIBARgDEYdWIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBB?=
 =?us-ascii?q?oJfBAIkCwENAQEECikBAgMBAgYCHykIAwEwAQUBNQWCUksBggABAwGcRDyKIIF?=
 =?us-ascii?q?sM4J2AQEFhXiBJAgSh2uBfYEogRyCFoERhheHW4lABIF0lWMHAocNg0CHAiOBX?=
 =?us-ascii?q?YgWN4coLIoVjnwCBAIEBQIFDyGBJYIOcFCCbAmCEgwXEoM4gQSJUHGBBAOLeIF?=
 =?us-ascii?q?3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="44374736"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 08:52:02 -0800
Received: from localhost ([::1]:47859 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gYw7d-0004XV-UN
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 11:52:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:60397)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <remy.noel@blade-group.com>) id 1gYw79-0004Ux-Pp
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 11:51:33 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <remy.noel@blade-group.com>) id 1gYw74-0000ct-ME
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 11:51:31 -0500
Received: from mail-wm1-x341.google.com ([2a00:1450:4864:20::341]:51306)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <remy.noel@blade-group.com>)
	id 1gYw74-0000bm-Cy
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 11:51:26 -0500
Received: by mail-wm1-x341.google.com with SMTP id s14so13072669wmh.1
	for <qemu-devel@nongnu.org>; Mon, 17 Dec 2018 08:51:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=blade-group.com; s=google;
	h=from:to:cc:subject:date:message-id:mime-version
	:content-transfer-encoding;
	bh=3lFGwn1xsbrUW134gouRfEsqiILsDvD2n6iuR2XAQQM=;
	b=YHBp76BlNXn+WVAwrT5Dx0VsSuYKUbgATQeevWtj2WDOhVZKb1ePtj/hvpnLjDFucv
	KPd+Dw0RO88N1gDMVAqb+1d5EBarglx28Jgse+bLGfAdgsSq3rOx5i81fIw4T06q2e2J
	GKRmtWke2UVCaulTT7ceSCfeortEsGDYKiLk0xkmC4J6qYjvqx8xXUlNSpHQZTKofXou
	UnI24rR+bFsbCZq+u0QlKdMxzJVDUE3Fp91tAvmb6NYR6gfhu4N+hqMByBcv6zuT3WyS
	hEMsdXgpQOBErNhaMPQybq19U+GpjJ1YFS0sQ+d38xJtoNwj2KrxNLrqX6Sr9G5Tn/WB
	9TUA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
	:content-transfer-encoding;
	bh=3lFGwn1xsbrUW134gouRfEsqiILsDvD2n6iuR2XAQQM=;
	b=ngBGcBJj3I8qkav2jbUA/dZXVpHeQd4SSfqvCNmMJ8tTcrT6QvR9oB49zR3czMnBX4
	zsoFI2+p5WCYLQTK6W5sM4Pnu5kBmZEMgMoSx5IdP54IpR5iu9u6hzhyDlrb7Ie4A24k
	M5xwZruQXDnuTc9dno9TdQ02RRQO6OWRzG10HsVw4dKZjX4Vjt08WZds/C2xPCTQlW1V
	TmdkBWupSbF1kD84rlpvUd7nkr1tljMzOSj/It8AIygDGGyCtkKfbHRQHZvOFBCG4/vc
	GOm9r33jQmMTDvP+/L5I3BCx+kQhr3Nre+qdcGNuq3oit00rOMnU4vELeKclLQSOfOVq
	DQ3g==
X-Gm-Message-State: AA+aEWbQCViq7iDnSFfeDZ4quju07Ip3CJVV8CSd5374kLkCgMAldTxf
	K9y9QcfW0FL0r0naL4dX/pA3h9PIFENrrQ==
X-Google-Smtp-Source: AFSGD/WG8WNqmvV00IK62j8Y02BhfHiqR1rWeiJYkg80g0CAYwsCoizY0SPebv/pybMVth0ijteccg==
X-Received: by 2002:a1c:8851:: with SMTP id k78mr12509009wmd.51.1545065484791; 
	Mon, 17 Dec 2018 08:51:24 -0800 (PST)
Received: from mocramis-ultrabook.localdomain ([178.208.16.32])
	by smtp.gmail.com with ESMTPSA id
	l20sm1024815wrb.93.2018.12.17.08.51.23
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 17 Dec 2018 08:51:23 -0800 (PST)
From: remy.noel@blade-group.com
To: qemu-devel@nongnu.org
Date: Mon, 17 Dec 2018 17:48:47 +0100
Message-Id: <20181217164847.24411-1-remy.noel@blade-group.com>
X-Mailer: git-send-email 2.19.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::341
Subject: [Qemu-devel] [QEMU-devel][PATCH v3] aio-posix: Fix concurrent
 aio_poll/set_fd_handler.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Fam Zheng <famz@redhat.com>,
	"open list:Block I/O path" <qemu-block@nongnu.org>,
	Stefan Weil <sw@weilnetz.de>, Remy Noel <remy.noel@blade-group.com>,
	Stefan Hajnoczi <stefanha@redhat.com>, Paolo Bonzini <pbonzini@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Remy Noel <remy.noel@blade-group.com>

It is possible for an io_poll callback to be concurrently executed along
with an aio_set_fd_handlers. This can cause all sorts of problems, like
a NULL callback or a bad opaque pointer.

This changes set_fd_handlers so that it no longer modify existing handlers
entries and instead, always insert those after having proper initialisation.

Also, we do not call aio_epoll_update for deleted handlers as this has
no impact whatsoever.

Signed-off-by: Remy Noel <remy.noel@blade-group.com>
---
 util/aio-posix.c | 86 ++++++++++++++++++++++++++++--------------------
 util/aio-win32.c | 67 ++++++++++++++++---------------------
 2 files changed, 79 insertions(+), 74 deletions(-)

diff --git a/util/aio-posix.c b/util/aio-posix.c
index 51c41ed3c9..d658cf3007 100644
--- a/util/aio-posix.c
+++ b/util/aio-posix.c
@@ -200,6 +200,31 @@ static AioHandler *find_aio_handler(AioContext *ctx, int fd)
     return NULL;
 }
 
+static bool aio_remove_fd_handler(AioContext *ctx, AioHandler *node)
+{
+    /* If the GSource is in the process of being destroyed then
+     * g_source_remove_poll() causes an assertion failure.  Skip
+     * removal in that case, because glib cleans up its state during
+     * destruction anyway.
+     */
+    if (!g_source_is_destroyed(&ctx->source)) {
+        g_source_remove_poll(&ctx->source, &node->pfd);
+    }
+
+    /* If a read is in progress, just mark the node as deleted */
+    if (qemu_lockcnt_count(&ctx->list_lock)) {
+        node->deleted = 1;
+        node->pfd.revents = 0;
+        return false;
+    }
+    /* Otherwise, delete it for real.  We can't just mark it as
+     * deleted because deleted nodes are only cleaned up while
+     * no one is walking the handlers list.
+     */
+    QLIST_REMOVE(node, node);
+    return true;
+}
+
 void aio_set_fd_handler(AioContext *ctx,
                         int fd,
                         bool is_external,
@@ -209,6 +234,7 @@ void aio_set_fd_handler(AioContext *ctx,
                         void *opaque)
 {
     AioHandler *node;
+    AioHandler *new_node = NULL;
     bool is_new = false;
     bool deleted = false;
     int poll_disable_change;
@@ -223,50 +249,36 @@ void aio_set_fd_handler(AioContext *ctx,
             qemu_lockcnt_unlock(&ctx->list_lock);
             return;
         }
-
-        /* If the GSource is in the process of being destroyed then
-         * g_source_remove_poll() causes an assertion failure.  Skip
-         * removal in that case, because glib cleans up its state during
-         * destruction anyway.
-         */
-        if (!g_source_is_destroyed(&ctx->source)) {
-            g_source_remove_poll(&ctx->source, &node->pfd);
-        }
-
-        /* If a read is in progress, just mark the node as deleted */
-        if (qemu_lockcnt_count(&ctx->list_lock)) {
-            node->deleted = 1;
-            node->pfd.revents = 0;
-        } else {
-            /* Otherwise, delete it for real.  We can't just mark it as
-             * deleted because deleted nodes are only cleaned up while
-             * no one is walking the handlers list.
-             */
-            QLIST_REMOVE(node, node);
-            deleted = true;
-        }
         poll_disable_change = -!node->io_poll;
     } else {
         poll_disable_change = !io_poll - (node && !node->io_poll);
         if (node == NULL) {
-            /* Alloc and insert if it's not already there */
-            node = g_new0(AioHandler, 1);
-            node->pfd.fd = fd;
-            QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, node, node);
-
-            g_source_add_poll(&ctx->source, &node->pfd);
             is_new = true;
         }
+        /* Alloc and insert if it's not already there */
+        new_node = g_new0(AioHandler, 1);
 
         /* Update handler with latest information */
-        node->io_read = io_read;
-        node->io_write = io_write;
-        node->io_poll = io_poll;
-        node->opaque = opaque;
-        node->is_external = is_external;
+        new_node->io_read = io_read;
+        new_node->io_write = io_write;
+        new_node->io_poll = io_poll;
+        new_node->opaque = opaque;
+        new_node->is_external = is_external;
+
+        if (is_new) {
+            new_node->pfd.fd = fd;
+        } else {
+            new_node->pfd = node->pfd;
+        }
+        g_source_add_poll(&ctx->source, &new_node->pfd);
+
+        new_node->pfd.events = (io_read ? G_IO_IN | G_IO_HUP | G_IO_ERR : 0);
+        new_node->pfd.events |= (io_write ? G_IO_OUT | G_IO_ERR : 0);
 
-        node->pfd.events = (io_read ? G_IO_IN | G_IO_HUP | G_IO_ERR : 0);
-        node->pfd.events |= (io_write ? G_IO_OUT | G_IO_ERR : 0);
+        QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, new_node, node);
+    }
+    if (node) {
+        deleted = aio_remove_fd_handler(ctx, node);
     }
 
     /* No need to order poll_disable_cnt writes against other updates;
@@ -278,7 +290,9 @@ void aio_set_fd_handler(AioContext *ctx,
     atomic_set(&ctx->poll_disable_cnt,
                atomic_read(&ctx->poll_disable_cnt) + poll_disable_change);
 
-    aio_epoll_update(ctx, node, is_new);
+    if (new_node) {
+        aio_epoll_update(ctx, new_node, is_new);
+    }
     qemu_lockcnt_unlock(&ctx->list_lock);
     aio_notify(ctx);
 
diff --git a/util/aio-win32.c b/util/aio-win32.c
index c58957cc4b..a23b9c364d 100644
--- a/util/aio-win32.c
+++ b/util/aio-win32.c
@@ -35,6 +35,22 @@ struct AioHandler {
     QLIST_ENTRY(AioHandler) node;
 };
 
+static void aio_remove_fd_handler(AioContext *ctx, AioHandler *node)
+{
+    /* If aio_poll is in progress, just mark the node as deleted */
+    if (qemu_lockcnt_count(&ctx->list_lock)) {
+        node->deleted = 1;
+        node->pfd.revents = 0;
+    } else {
+        /* Otherwise, delete it for real.  We can't just mark it as
+         * deleted because deleted nodes are only cleaned up after
+         * releasing the list_lock.
+         */
+        QLIST_REMOVE(node, node);
+        g_free(node);
+    }
+}
+
 void aio_set_fd_handler(AioContext *ctx,
                         int fd,
                         bool is_external,
@@ -44,41 +60,23 @@ void aio_set_fd_handler(AioContext *ctx,
                         void *opaque)
 {
     /* fd is a SOCKET in our case */
-    AioHandler *node;
+    AioHandler *old_node;
+    AioHandler *node = NULL;
 
     qemu_lockcnt_lock(&ctx->list_lock);
-    QLIST_FOREACH(node, &ctx->aio_handlers, node) {
-        if (node->pfd.fd == fd && !node->deleted) {
+    QLIST_FOREACH(old_node, &ctx->aio_handlers, node) {
+        if (old_node->pfd.fd == fd && !old_node->deleted) {
             break;
         }
     }
 
-    /* Are we deleting the fd handler? */
-    if (!io_read && !io_write) {
-        if (node) {
-            /* If aio_poll is in progress, just mark the node as deleted */
-            if (qemu_lockcnt_count(&ctx->list_lock)) {
-                node->deleted = 1;
-                node->pfd.revents = 0;
-            } else {
-                /* Otherwise, delete it for real.  We can't just mark it as
-                 * deleted because deleted nodes are only cleaned up after
-                 * releasing the list_lock.
-                 */
-                QLIST_REMOVE(node, node);
-                g_free(node);
-            }
-        }
-    } else {
+    if (io_read || io_write) {
         HANDLE event;
         long bitmask = 0;
 
-        if (node == NULL) {
-            /* Alloc and insert if it's not already there */
-            node = g_new0(AioHandler, 1);
-            node->pfd.fd = fd;
-            QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, node, node);
-        }
+        /* Alloc and insert if it's not already there */
+        node = g_new0(AioHandler, 1);
+        node->pfd.fd = fd;
 
         node->pfd.events = 0;
         if (node->io_read) {
@@ -104,9 +102,13 @@ void aio_set_fd_handler(AioContext *ctx,
             bitmask |= FD_WRITE | FD_CONNECT;
         }
 
+        QLIST_INSERT_HEAD_RCU(&ctx->aio_handlers, node, node);
         event = event_notifier_get_handle(&ctx->notifier);
         WSAEventSelect(node->pfd.fd, event, bitmask);
     }
+    if (old_node) {
+        aio_remove_fd_handler(ctx, old_node);
+    }
 
     qemu_lockcnt_unlock(&ctx->list_lock);
     aio_notify(ctx);
@@ -139,18 +141,7 @@ void aio_set_event_notifier(AioContext *ctx,
         if (node) {
             g_source_remove_poll(&ctx->source, &node->pfd);
 
-            /* aio_poll is in progress, just mark the node as deleted */
-            if (qemu_lockcnt_count(&ctx->list_lock)) {
-                node->deleted = 1;
-                node->pfd.revents = 0;
-            } else {
-                /* Otherwise, delete it for real.  We can't just mark it as
-                 * deleted because deleted nodes are only cleaned up after
-                 * releasing the list_lock.
-                 */
-                QLIST_REMOVE(node, node);
-                g_free(node);
-            }
+            aio_remove_fd_handler(ctx, node);
         }
     } else {
         if (node == NULL) {
-- 
2.19.2


