Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:53:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 24A1F58050C
	for <like.xu@linux.intel.com>; Fri, 21 Dec 2018 09:10:03 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 09:10:02 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AUJRSJxPCg9+TRNrEvZAl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/z5rsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/m/UhMJ3jq1brg+vpwR9zoDWb4yZKfRzcr/DctMBXmdNQtpdWjZdDo6m?=
 =?us-ascii?q?c4cDE+wMNvtYoYnnoFsOqAOzCgaoBOz11zBIh3r23awg0+88DA/JwgkgEMwIsH?=
 =?us-ascii?q?TIt9X1M7kSXfmswqnHzDXMce1W2Sz+6IjJchEqvPaBXaxrccXPzEkgCQXFjkmL?=
 =?us-ascii?q?qYziITOYzfoNs2mB7+p8SOKvjG8mqgB2ojS12sgsjYzJi5sTx1vZ+yt5x4M1Ks?=
 =?us-ascii?q?e5SE59edOkH51QtzyAO4txWMMiTGdlszs5xL0eoZO3YjQGxZc9yxLCdvCKcJKE?=
 =?us-ascii?q?7gztWeuROzt0mXBodKqiixux8UWs0PPwW8ep3FpQsCZIncXAumoP2hHT7MWMV+?=
 =?us-ascii?q?Fz8V272TmV0gDe8uFELl4wlarcM5Mhxr8wloEPsUTYBCP2l0P2jLKMekUj4Oio?=
 =?us-ascii?q?5PzrYrTgppCCK495kh/yPrgtl8ClHOg0LwsDU3KF9emy1LDv51D1TbdSgv0ziK?=
 =?us-ascii?q?bZsZTaJcoBpq6+Bg9Yyp8j5Ai6Dze7ydgXgGcILExbdxKDloTmIFbOIO3+Dfij?=
 =?us-ascii?q?nVusizBnx/THPr3iHJrBNHfCkKr5cLZ56k5czhczzN9F65JVDLEBPOz8WkvruN?=
 =?us-ascii?q?PECR85Nhe5w+DgCNV72YMeX3+PDrWeMKPIvl+E/vgvLPWUZI8JpDb9LOAo5/rv?=
 =?us-ascii?q?jX86h1ARZ6ao3YYMZXC8H/RmJViZYHX2jtcAF2cKohQxTOjwhFKeVj5TYiX6Yq?=
 =?us-ascii?q?Qn+ztuCJ66FZyRAcepgaedx2G9GZtZYH0ADUqDVnLhdoGBUvFLbzqOI8hniXsd?=
 =?us-ascii?q?WL28DoMsyxyq5zL80Kdte+/d+ykEssD62d1oouHeixw2sCZ5FtmQyH2lSWZykW?=
 =?us-ascii?q?UVATgs0/dkvEZ/x1yfhLV+mOFSDtdJ5vlEATs9YIfRyvE/B93sVwbpeNCPR1C7?=
 =?us-ascii?q?BNK8DnV5V9803poEZ0F2GP2kiRbM2TfsBKUaxJKRA5lhzKbV03n0Jtw18HvD2a?=
 =?us-ascii?q?89lF44B+xANGC4na1+5kCHGZXElkifi72ta4wC3TTR6WCR323It0ZdBl0jGZ7Z?=
 =?us-ascii?q?VGwSMxOF5e/y4VnPGuej?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B3AAD5HR1chxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCBOYEpjHWgDIUSgV8VGAcNgUuFZSI3Bg0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjoFAgMYDoJhAwMBAkMKKQMDAQIGAQFICAMBUwcSBQSDGQGCA?=
 =?us-ascii?q?QEDAadMhUCEcId+VYNsF4FAP4c2gTOGGgKJOYYnfZAdSwmHEopLJIFgTYdeJje?=
 =?us-ascii?q?GdyyJJ4d6iE+BXIF4TSODPAmCR4gJQ1GEcT4xgQeMN4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0B3AAD5HR1chxHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?BOYEpjHWgDIUSgV8VGAcNgUuFZSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?joFAgMYDoJhAwMBAkMKKQMDAQIGAQFICAMBUwcSBQSDGQGCAQEDAadMhUCEcId?=
 =?us-ascii?q?+VYNsF4FAP4c2gTOGGgKJOYYnfZAdSwmHEopLJIFgTYdeJjeGdyyJJ4d6iE+BX?=
 =?us-ascii?q?IF4TSODPAmCR4gJQ1GEcT4xgQeMN4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="67896569"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 21 Dec 2018 09:10:01 -0800
Received: from localhost ([::1]:46864 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gaOJF-0003yn-9F
	for like.xu@linux.intel.com; Fri, 21 Dec 2018 12:10:01 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45097)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gaOIW-0003yL-Q1
	for qemu-devel@nongnu.org; Fri, 21 Dec 2018 12:09:17 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <vsementsov@virtuozzo.com>) id 1gaOIT-000403-E0
	for qemu-devel@nongnu.org; Fri, 21 Dec 2018 12:09:16 -0500
Received: from relay.sw.ru ([185.231.240.75]:53404)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <vsementsov@virtuozzo.com>)
	id 1gaOIT-0003y9-4Q; Fri, 21 Dec 2018 12:09:13 -0500
Received: from [10.28.8.145] (helo=kvm.sw.ru)
	by relay.sw.ru with esmtp (Exim 4.91)
	(envelope-from <vsementsov@virtuozzo.com>)
	id 1gaOIQ-0004mF-Om; Fri, 21 Dec 2018 20:09:10 +0300
From: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
To: qemu-devel@nongnu.org,
	qemu-block@nongnu.org
Date: Fri, 21 Dec 2018 20:09:08 +0300
Message-Id: <20181221170909.25584-3-vsementsov@virtuozzo.com>
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20181221170909.25584-1-vsementsov@virtuozzo.com>
References: <20181221170909.25584-1-vsementsov@virtuozzo.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 185.231.240.75
Subject: [Qemu-devel] [PATCH v6 2/3] scripts: add render_block_graph
 function for QEMUMachine
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kwolf@redhat.com, vsementsov@virtuozzo.com, ehabkost@redhat.com,
	armbru@redhat.com, mreitz@redhat.com, crosa@redhat.com, den@virtuozzo.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Render block nodes graph with help of graphviz. This new function is
for debugging, so there is no sense to put it into qemu.py as a method
of QEMUMachine. Let's instead put it separately.

Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Acked-by: Eduardo Habkost <ehabkost@redhat.com>
Reviewed-by: Max Reitz <mreitz@redhat.com>
---
 scripts/render_block_graph.py | 120 ++++++++++++++++++++++++++++++++++
 1 file changed, 120 insertions(+)
 create mode 100755 scripts/render_block_graph.py

diff --git a/scripts/render_block_graph.py b/scripts/render_block_graph.py
new file mode 100755
index 0000000000..ed7e581b4f
--- /dev/null
+++ b/scripts/render_block_graph.py
@@ -0,0 +1,120 @@
+#!/usr/bin/env python
+#
+# Render Qemu Block Graph
+#
+# Copyright (c) 2018 Virtuozzo International GmbH. All rights reserved.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+import os
+import sys
+import subprocess
+import json
+from graphviz import Digraph
+from qemu import MonitorResponseError
+
+
+def perm(arr):
+    s = 'w' if 'write' in arr else '_'
+    s += 'r' if 'consistent-read' in arr else '_'
+    s += 'u' if 'write-unchanged' in arr else '_'
+    s += 'g' if 'graph-mod' in arr else '_'
+    s += 's' if 'resize' in arr else '_'
+    return s
+
+
+def render_block_graph(qmp, filename, format='png'):
+    '''
+    Render graph in text (dot) representation into "@filename" and
+    representation in @format into "@filename.@format"
+    '''
+
+    bds_nodes = qmp.command('query-named-block-nodes')
+    bds_nodes = {n['node-name']: n for n in bds_nodes}
+
+    job_nodes = qmp.command('query-block-jobs')
+    job_nodes = {n['device']: n for n in job_nodes}
+
+    block_graph = qmp.command('x-debug-query-block-graph')
+
+    graph = Digraph(comment='Block Nodes Graph')
+    graph.format = format
+    graph.node('permission symbols:\l'
+               '  w - Write\l'
+               '  r - consistent-Read\l'
+               '  u - write - Unchanged\l'
+               '  g - Graph-mod\l'
+               '  s - reSize\l'
+               'edge label scheme:\l'
+               '  <child type>\l'
+               '  <perm>\l'
+               '  <shared_perm>\l', shape='none')
+
+    for n in block_graph['nodes']:
+        if n['type'] == 'block-driver':
+            info = bds_nodes[n['name']]
+            label = n['name'] + ' [' + info['drv'] + ']'
+            if info['drv'] == 'file':
+                label += '\n' + os.path.basename(info['file'])
+            shape = 'ellipse'
+        elif n['type'] == 'block-job':
+            info = job_nodes[n['name']]
+            label = info['type'] + ' job (' + n['name'] + ')'
+            shape = 'box'
+        else:
+            assert n['type'] == 'block-backend'
+            label = n['name'] if n['name'] else 'unnamed blk'
+            shape = 'box'
+
+        graph.node(str(n['id']), label, shape=shape)
+
+    for e in block_graph['edges']:
+        label = '%s\l%s\l%s\l' % (e['name'], perm(e['perm']),
+                                  perm(e['shared-perm']))
+        graph.edge(str(e['parent']), str(e['child']), label=label)
+
+    graph.render(filename)
+
+
+class LibvirtGuest():
+    def __init__(self, name):
+        self.name = name
+
+    def command(self, cmd):
+        # only supports qmp commands without parameters
+        m = {'execute': cmd}
+        ar = ['virsh', 'qemu-monitor-command', self.name, json.dumps(m)]
+
+        reply = json.loads(subprocess.check_output(ar))
+
+        if 'error' in reply:
+            raise MonitorResponseError(reply)
+
+        return reply['return']
+
+
+if __name__ == '__main__':
+    obj = sys.argv[1]
+    out = sys.argv[2]
+
+    if os.path.exists(obj):
+        # assume unix socket
+        qmp = QEMUMonitorProtocol(obj)
+        qmp.connect()
+    else:
+        # assume libvirt guest name
+        qmp = LibvirtGuest(obj)
+
+    render_block_graph(qmp, out)
-- 
2.18.0


