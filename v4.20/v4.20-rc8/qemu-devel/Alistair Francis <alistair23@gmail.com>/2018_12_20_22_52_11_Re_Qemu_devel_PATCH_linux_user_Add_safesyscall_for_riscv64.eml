Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:43:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E20455805F0
	for <like.xu@linux.intel.com>; Thu, 20 Dec 2018 14:53:01 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 14:53:01 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AAlCidRH8lpssH8a+irDKG51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8i4bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCI+hXs5Tzp0MMoBW8CgSgGe3ixiNWiX/txqA6z/gtHBva0AA8A94Dsn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwCnHb/NXwjf99JLHchE7ofqRXbxwa9DeyU8zGAPElVWb?=
 =?us-ascii?q?tIvoMCmR1uQMqGib8/BvVeO1i2I5pQx8uTevxsI2hYnIgoIZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVUB1YdmhEJRKtiGaMZN7QsIkQ250oio60aYJtJimdyYJ0JQq3wDTZ+CEfoSS?=
 =?us-ascii?q?/x7vSeWcLS1miH9reL+znQu+/Eq4xuHiTMa4zEpGoy9YntTDtn0Byxne58eER/?=
 =?us-ascii?q?Z88Uqs3CiD2xzW5+xBP0w5mrfXJpg8ybAqjJUTq17MHirulUX2kqCWckIk9/Cs?=
 =?us-ascii?q?6+TmebXmuoScO5V7igH4L6QigMu/Af43MgQWXmib//qz1KH78EHnXLlHjec6nr?=
 =?us-ascii?q?TEvJ3ZP8gXuKC0Dg9P3oo+6RuzFzKm384ZnXkDIlJFYhWHj43xNlHXPv/4COq/?=
 =?us-ascii?q?j02xnzh12fDJILnhDozWIXjEjbfhe6py5FBHyAY0ydBf5pFUBa8bLPP8R0/8rN?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5u80JemMY4kVuDn7K/g4/fLu?=
 =?us-ascii?q?imU5mVAFcamzwZQXcGy4HuhhI0iBZXrsg9QBHnkQsgsxUeznk1mCUT9VZ3avUK?=
 =?us-ascii?q?Mw/DA7CIS6DYjdQoChmqCO3CC+Hs4eW2ZdF1rZEWv0b57WHLAIaTmOOYlnlToL?=
 =?us-ascii?q?U6XnTJUukhSntQv/wrwgKfLI+yoertX62d1oouHeixw2pgFyFNmXhmSETmVomT?=
 =?us-ascii?q?ERSjormaxyv0F5j02OyLV1mOBwE9tV6PVUFAAgOsnH0uZ4BtvuDx/HZcqDU128?=
 =?us-ascii?q?Q9+rUg02G+gwyN8HeUo1O9ikgh3ZxC2sS+sPlreLDYY4tKLR2XT8Pd16zV7C1a?=
 =?us-ascii?q?8olV5gRdFAYz6InKl6oiHXBpXVmkSD34iwfKIX3TWFoG6HzHGStUBCClVYXqDM?=
 =?us-ascii?q?XHRZbUzT+4eqrnjeRqOjXOx0ejBKztSPf+4TMoXk?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BmAADRGxxchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCYoN9iHiLHYINiQIkb41cgV8VGBSHLiI3Bg0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgbDiMMgjYFAgMaAQaCXAECAwECIAQZAQUKDB0BAgECAQIGAQEFB?=
 =?us-ascii?q?QsNAgIiBAICAwEeAREBBQEcBhMFgx2BaQEDFQEEm208ixl8FgUBF4J3BYQ9Chk?=
 =?us-ascii?q?nDV6BNwIGEnmHSINsghaDbjWERoNDglcCgSoBAYgbhxSEW4wGAQYCAYFWBU6PP?=
 =?us-ascii?q?BiRXSyZUg8hgTuBeB8UGiOBAW2BToIbDBeDSop0IDGBB4tpgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BmAADRGxxchxHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?CYoN9iHiLHYINiQIkb41cgV8VGBSHLiI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgbD?=
 =?us-ascii?q?iMMgjYFAgMaAQaCXAECAwECIAQZAQUKDB0BAgECAQIGAQEFBQsNAgIiBAICAwE?=
 =?us-ascii?q?eAREBBQEcBhMFgx2BaQEDFQEEm208ixl8FgUBF4J3BYQ9ChknDV6BNwIGEnmHS?=
 =?us-ascii?q?INsghaDbjWERoNDglcCgSoBAYgbhxSEW4wGAQYCAYFWBU6PPBiRXSyZUg8hgTu?=
 =?us-ascii?q?BeB8UGiOBAW2BToIbDBeDSop0IDGBB4tpgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="56047304"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 20 Dec 2018 14:53:00 -0800
Received: from localhost ([::1]:41392 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1ga7Bb-0005RZ-Hy
	for like.xu@linux.intel.com; Thu, 20 Dec 2018 17:52:59 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:36447)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <alistair23@gmail.com>) id 1ga7BI-0005RI-Ue
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 17:52:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <alistair23@gmail.com>) id 1ga7BH-0003tp-Vc
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 17:52:40 -0500
Received: from mail-lj1-x241.google.com ([2a00:1450:4864:20::241]:39395)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <alistair23@gmail.com>)
	id 1ga7BH-0003sR-Nr
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 17:52:39 -0500
Received: by mail-lj1-x241.google.com with SMTP id t9-v6so3036513ljh.6
	for <qemu-devel@nongnu.org>; Thu, 20 Dec 2018 14:52:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=mime-version:references:in-reply-to:from:date:message-id:subject:to
	:cc; bh=v9Xqp94ywpZPBTRZUlSJmpQrUsiJwHAPfKa+TspjgHA=;
	b=TQ2v4KoFhqh9sp/YRgQuYno1+b/7jBnkDE4kZTLcO07YonMFE9TE0fKNjOXL1he+5c
	NJJpzZbXzazI71Xzh82ZfZF55i+imMMxbBBZgUTztVlcUxuvf0ai+ukFmUYux4uDh5+n
	/TPpnDpIQ/19ohzotwbnFwunavW34rXE6eqDZ8g7LEt/2hrbupV6+n71mGkiVWyjtYnA
	jBjaHaFbs1yHzK7D/ixmN+12Ly9aZ3OU+fZqXa5DjsVIQaxa0E6zbAAxufgQVHhUj4yC
	S2fZRrttY95zz2BR9FxjKbqvRlBsNuZeB2d9J3dv2/CPpv7ZNlBigTJ//pCIK0XSeS+a
	jFVw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:references:in-reply-to:from:date
	:message-id:subject:to:cc;
	bh=v9Xqp94ywpZPBTRZUlSJmpQrUsiJwHAPfKa+TspjgHA=;
	b=GZBsKqLl23xwZl3UiyO/FgcQkb3xP5y333vfZDVMuo2a8tnEhb556DZ6Eg+1hYhjD/
	LkDE7GjO+SNxYhDHjs/CBPpHURD0cojp6o1vicFGiJbKlZTIG7Kn04j9AHD+LQWPtEro
	1PK7itanHizOKL4NMKvgiExkhFLpjIYpbdB2+MkHmE+NKdYLLD9fVL3tQSl3yxiI5smQ
	OFkwBiTXPYake9M5kJda+8PJstMor/O95LgOqg2s4GlToypap+pffQCUytHgtq5zP0S1
	Nib4vJ9gJA+GHSwK1rUDW94HFU1eBCfZiyflG0K+OfN5wrad7nTZUIAnKFLVUo3IS6lo
	iMng==
X-Gm-Message-State: AJcUukfnVFXPVp1MzCY1xCi4A1VneoEEHCeqO7BzOzbg9yCxPd18cgd2
	Wo0gO4j07YLzcd5FgBnE27CUsY5XrobnWWwr1XQ=
X-Google-Smtp-Source: ALg8bN6WrmDltSUAas2QmKO7IWBO4FMWOOcGJDUSzBwg04wQ/Y80ZRSzg0Bt0kwIK4fSR/i3+lQVtcCgb6ev7ZSFFXc=
X-Received: by 2002:a2e:449b:: with SMTP id b27-v6mr39956ljf.47.1545346358400; 
	Thu, 20 Dec 2018 14:52:38 -0800 (PST)
MIME-Version: 1.0
References: <20181220201502.12285-1-richard.henderson@linaro.org>
In-Reply-To: <20181220201502.12285-1-richard.henderson@linaro.org>
From: Alistair Francis <alistair23@gmail.com>
Date: Thu, 20 Dec 2018 14:52:11 -0800
Message-ID: <CAKmqyKMgkCy-1-LvE2V2TdJPofWHsH-vbEMjbjrS_eOppXQJJg@mail.gmail.com>
To: Richard Henderson <richard.henderson@linaro.org>
Content-Type: text/plain; charset="UTF-8"
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a00:1450:4864:20::241
Subject: Re: [Qemu-devel] [PATCH] linux-user: Add safe_syscall for riscv64
 host
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Palmer Dabbelt <palmer@sifive.com>,
	Alistair Francis <Alistair.Francis@wdc.com>,
	"qemu-devel@nongnu.org Developers" <qemu-devel@nongnu.org>,
	Laurent Vivier <laurent@vivier.eu>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, Dec 20, 2018 at 12:15 PM Richard Henderson
<richard.henderson@linaro.org> wrote:
>
> Signed-off-by: Richard Henderson <richard.henderson@linaro.org>

Reviewed-by: Alistair Francis <alistair.francis@wdc.com>

Alistair

> ---
>
> At some point we should make this routine be non-optional for
> porting to a new host.
>
>
> r~
>
> ---
>  linux-user/host/riscv64/hostdep.h          | 23 +++++++
>  linux-user/host/riscv64/safe-syscall.inc.S | 77 ++++++++++++++++++++++
>  2 files changed, 100 insertions(+)
>  create mode 100644 linux-user/host/riscv64/safe-syscall.inc.S
>
> diff --git a/linux-user/host/riscv64/hostdep.h b/linux-user/host/riscv64/hostdep.h
> index 28467ba00b..865f0fb9ff 100644
> --- a/linux-user/host/riscv64/hostdep.h
> +++ b/linux-user/host/riscv64/hostdep.h
> @@ -8,4 +8,27 @@
>  #ifndef RISCV64_HOSTDEP_H
>  #define RISCV64_HOSTDEP_H
>
> +/* We have a safe-syscall.inc.S */
> +#define HAVE_SAFE_SYSCALL
> +
> +#ifndef __ASSEMBLER__
> +
> +/* These are defined by the safe-syscall.inc.S file */
> +extern char safe_syscall_start[];
> +extern char safe_syscall_end[];
> +
> +/* Adjust the signal context to rewind out of safe-syscall if we're in it */
> +static inline void rewind_if_in_safe_syscall(void *puc)
> +{
> +    ucontext_t *uc = puc;
> +    unsigned long *pcreg = &uc->uc_mcontext.__gregs[REG_PC];
> +
> +    if (*pcreg > (uintptr_t)safe_syscall_start
> +        && *pcreg < (uintptr_t)safe_syscall_end) {
> +        *pcreg = (uintptr_t)safe_syscall_start;
> +    }
> +}
> +
> +#endif /* __ASSEMBLER__ */
> +
>  #endif
> diff --git a/linux-user/host/riscv64/safe-syscall.inc.S b/linux-user/host/riscv64/safe-syscall.inc.S
> new file mode 100644
> index 0000000000..9ca3fbfd1e
> --- /dev/null
> +++ b/linux-user/host/riscv64/safe-syscall.inc.S
> @@ -0,0 +1,77 @@
> +/*
> + * safe-syscall.inc.S : host-specific assembly fragment
> + * to handle signals occurring at the same time as system calls.
> + * This is intended to be included by linux-user/safe-syscall.S
> + *
> + * Written by Richard Henderson <rth@twiddle.net>
> + * Copyright (C) 2018 Linaro, Inc.
> + *
> + * This work is licensed under the terms of the GNU GPL, version 2 or later.
> + * See the COPYING file in the top-level directory.
> + */
> +
> +       .global safe_syscall_base
> +       .global safe_syscall_start
> +       .global safe_syscall_end
> +       .type   safe_syscall_base, @function
> +       .type   safe_syscall_start, @function
> +       .type   safe_syscall_end, @function
> +
> +       /*
> +        * This is the entry point for making a system call. The calling
> +        * convention here is that of a C varargs function with the
> +        * first argument an 'int *' to the signal_pending flag, the
> +        * second one the system call number (as a 'long'), and all further
> +        * arguments being syscall arguments (also 'long').
> +        * We return a long which is the syscall's return value, which
> +        * may be negative-errno on failure. Conversion to the
> +        * -1-and-errno-set convention is done by the calling wrapper.
> +        */
> +safe_syscall_base:
> +       .cfi_startproc
> +       /*
> +        * The syscall calling convention is nearly the same as C:
> +        * we enter with a0 == *signal_pending
> +        *               a1 == syscall number
> +        *               a2 ... a7 == syscall arguments
> +        *               and return the result in a0
> +        * and the syscall instruction needs
> +        *               a7 == syscall number
> +        *               a0 ... a5 == syscall arguments
> +        *               and returns the result in a0
> +        * Shuffle everything around appropriately.
> +        */
> +       mv      t0, a0          /* signal_pending pointer */
> +       mv      t1, a1          /* syscall number */
> +       mv      a0, a2          /* syscall arguments */
> +       mv      a1, a3
> +       mv      a2, a4
> +       mv      a3, a5
> +       mv      a4, a6
> +       mv      a5, a7
> +       mv      a7, t1
> +
> +       /*
> +        * This next sequence of code works in conjunction with the
> +        * rewind_if_safe_syscall_function(). If a signal is taken
> +        * and the interrupted PC is anywhere between 'safe_syscall_start'
> +        * and 'safe_syscall_end' then we rewind it to 'safe_syscall_start'.
> +        * The code sequence must therefore be able to cope with this, and
> +        * the syscall instruction must be the final one in the sequence.
> +        */
> +safe_syscall_start:
> +       /* If signal_pending is non-zero, don't do the call */
> +       lw      t1, 0(t0)
> +       bnez    t1, 0f
> +       scall
> +safe_syscall_end:
> +       /* code path for having successfully executed the syscall */
> +       ret
> +
> +0:
> +       /* code path when we didn't execute the syscall */
> +       li      a0, -TARGET_ERESTARTSYS
> +       ret
> +       .cfi_endproc
> +
> +       .size   safe_syscall_base, .-safe_syscall_base
> --
> 2.17.2
>
>

