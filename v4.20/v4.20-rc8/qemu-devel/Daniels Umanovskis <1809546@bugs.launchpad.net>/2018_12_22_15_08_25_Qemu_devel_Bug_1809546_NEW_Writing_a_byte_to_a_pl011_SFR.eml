Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:57:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DC4D35805CF
	for <like.xu@linux.intel.com>; Sat, 22 Dec 2018 07:15:59 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Dec 2018 07:15:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A9YQDvBTKxVug5VjRPKMR04ptpdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBCGt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W7YlsN+g6xVrhK/qRJ8247afYOYOvhxc6/Ac94WWXBBUdhKVyFaHoO8?=
 =?us-ascii?q?dpECA/YdMepErYTwoUYFoxukBQmrAePi0jFGiWXw3a07zeshFRrG1xEuENILqn?=
 =?us-ascii?q?vUqtL1NLkJUeC2zanI1ijIYvRL1Tr+9ITFdhAsrP6NUL9rasXR1EYvFxjfglWU?=
 =?us-ascii?q?s4PlIjWV2fgNs2iD9eVvSPiji2g5pAFtuzWiwNonhIfOhoIQ0F/E9CN5zZ4xJd?=
 =?us-ascii?q?KiVU57Z8KrEJtIty6AKoR6WMUiTH90uCs817YIuoa7cTAUxJg7xBPTceGLf5WL?=
 =?us-ascii?q?7x75SuqcLzd1iGh4dL+9nxq/9VWsxvfhWsS31FtGtC5InsXWun0D1RHe7NWMRO?=
 =?us-ascii?q?Fn8Ue7wzmP0hje6uFaLkAwkqrWM5ohwr8rlpoPqkTPBCD2mEPrjKOMcUUk4Oeo?=
 =?us-ascii?q?5/zmYrXguJCcK5d5hh/iPqktgMCzHPk0PwsUU2SF9+mx1Kfv8VD7TblSi/05iK?=
 =?us-ascii?q?jZsJTUJcQBoa65BhdY0p895Ba6EjeqyckXkmcZLF1bfBKLlpPmO1bTIPD+Efiw?=
 =?us-ascii?q?nU+snDBvx/DHPb3uHI/BL3fekLr5ebZ96khcyBc8zNxF5pJUDK0BL+z3WkPrqN?=
 =?us-ascii?q?PYCRo5Pheyw+bgDtV92YUeWX+VDq+eKqPSvkeE5vgzLOmUeI8VpDH9JuAh5/7v?=
 =?us-ascii?q?jn82h0URfKa03ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTND6PWb?=
 =?us-ascii?q?kh7GQ7FJ6+FtWEAYSsm6CamiG8GJJQeyZBEF/LFH7pc4CNXbALcD6TJcl61SUJ?=
 =?us-ascii?q?UKXkR4I/2BX9iQnh1rAyK+PV/jEf54vu0cUw6+DNmBV37zFtEsmGz0mLSGd7mH?=
 =?us-ascii?q?5OQCU5i7tiq05wwUvWzK5jnvZDHsZS7f4abgBvLJPZ0ql2Bs7/XirHedGGTkvg?=
 =?us-ascii?q?Rc+pUgs8VtYg/9hbSVtyU4zy1kGeg3TiV+ZFz+3WWMIc+L/TxD71Ltt7wHbe3a?=
 =?us-ascii?q?VniVQ6FJhhL2qj04J28QneA5WBrkCQkaG0bqcdx2aZrTfbnDfS4mlSTQFrF6HM?=
 =?us-ascii?q?QHYUZlPfoZL/61+UHOzmMqguLgYUkZ3KEaBNcNC81Vg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AhCwA3VB5chxHrdtBkHAEBAR8EAQEFA?=
 =?us-ascii?q?QGBTAI9coE5gSmDfoh4ixxZgRCJTIRkiViBcxUYDQeEOwOCciI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgbDiMMgjoFAgMYDoJkBAIgIwoKIgMBAgYCJAIiBAICAwFDJ?=
 =?us-ascii?q?QmDHQGBdA0BAwEKGaVfgS+ELQGBA4RxBYELizSBD4EHgREzgjGBb4Mqgx6CVwK?=
 =?us-ascii?q?BKgEBAaAdAQYCAYcSim8Qi2iFbo5ai0+BRoIOeySBPzqBFRGCIR2IEYV6cgEOe?=
 =?us-ascii?q?IwxgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AhCwA3VB5chxHrdtBkHAEBAR8EAQEFAQGBTAI9coE5gSm?=
 =?us-ascii?q?Dfoh4ixxZgRCJTIRkiViBcxUYDQeEOwOCciI0CQ0BAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgbDiMMgjoFAgMYDoJkBAIgIwoKIgMBAgYCJAIiBAICAwFDJQmDHQGBdA0BAwE?=
 =?us-ascii?q?KGaVfgS+ELQGBA4RxBYELizSBD4EHgREzgjGBb4Mqgx6CVwKBKgEBAaAdAQYCA?=
 =?us-ascii?q?YcSim8Qi2iFbo5ai0+BRoIOeySBPzqBFRGCIR2IEYV6cgEOeIwxgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,384,1539673200"; 
   d="scan'208";a="57453539"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 22 Dec 2018 07:15:59 -0800
Received: from localhost ([::1]:44779 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gaj0Q-0001Lt-C2
	for like.xu@linux.intel.com; Sat, 22 Dec 2018 10:15:58 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37431)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gaj09-0001LW-8Z
	for qemu-devel@nongnu.org; Sat, 22 Dec 2018 10:15:42 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <bounces@canonical.com>) id 1gaj05-0003Rm-7C
	for qemu-devel@nongnu.org; Sat, 22 Dec 2018 10:15:41 -0500
Received: from indium.canonical.com ([91.189.90.7]:33588)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <bounces@canonical.com>)
	id 1gaj05-0003Nh-0g
	for qemu-devel@nongnu.org; Sat, 22 Dec 2018 10:15:37 -0500
Received: from loganberry.canonical.com ([91.189.90.37])
	by indium.canonical.com with esmtp (Exim 4.86_2 #2 (Debian))
	id 1gaj03-0006rq-DI
	for <qemu-devel@nongnu.org>; Sat, 22 Dec 2018 15:15:35 +0000
Received: from loganberry.canonical.com (localhost [127.0.0.1])
	by loganberry.canonical.com (Postfix) with ESMTP id 613792E805B
	for <qemu-devel@nongnu.org>; Sat, 22 Dec 2018 15:15:35 +0000 (UTC)
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Date: Sat, 22 Dec 2018 15:08:25 -0000
From: Daniels Umanovskis <1809546@bugs.launchpad.net>
To: qemu-devel@nongnu.org
X-Launchpad-Notification-Type: bug
X-Launchpad-Bug: product=qemu; status=New; importance=Undecided; assignee=None;
X-Launchpad-Bug-Information-Type: Public
X-Launchpad-Bug-Private: no
X-Launchpad-Bug-Security-Vulnerability: no
X-Launchpad-Bug-Commenters: dumanovskis
X-Launchpad-Bug-Reporter: Daniels Umanovskis (dumanovskis)
X-Launchpad-Bug-Modifier: Daniels Umanovskis (dumanovskis)
Message-Id: <154549130563.19742.15114184471142076379.malonedeb@soybean.canonical.com>
X-Launchpad-Message-Rationale: Subscriber (QEMU) @qemu-devel-ml
X-Launchpad-Message-For: qemu-devel-ml
Precedence: bulk
X-Generated-By: Launchpad (canonical.com); Revision="18847";
	Instance="launchpad-lazr.conf"
X-Launchpad-Hash: fb784903fd1e5eff45fc6c5c15f93d4f57233432
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 91.189.90.7
Subject: [Qemu-devel] [Bug 1809546] [NEW] Writing a byte to a pl011 SFR
 overwrites the whole SFR
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: Bug 1809546 <1809546@bugs.launchpad.net>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Public bug reported:

The bug is present in QEMU 2.8.1 and, if my analysis is correct, also on
master.

I first noticed that a PL011 UART driver, which is fine on real
hardware, fails to enable the RX interrupt in the IMSC register when
running in QEMU. However, the problem only comes up if the code is
compiled without optimizations. I think I've narrowed it down to a
minimal example that will exhibit the problem if run as a bare-metal
application.

Given:

pl011_addr: .word 0x10009000

The following snippet will be problematic:

     ldr r3, pl011_addr
     ldrb r2, [r3, #0x38]        // IMSC
     mov r2, #0
     orr r2, r2, #0x10           // R2 =3D=3D 0x10
     strb r2, [r3, #0x38]        // Whole word reads correctly after this
     ldrb r2, [r3, #0x39]
     mov r2, #0
     strb r2, [r3, #0x39]        // Problem here! Overwrites offset 0x38 as=
 well

After the first strb instruction, which writes to 0x10009038, everything
is fine. It can be seen in the QEMU monitor:

(qemu) xp 0x10009038
0000000010009038: 0x00000010

After the second strb instruction, the write to 0x10009039 clears the
entire word:

(qemu) xp 0x10009038
0000000010009038: 0x00000000

QEMU command-line, using the vexpress-a9 which has the PL011 at
0x10009000:

qemu-system-arm -S -M vexpress-a9 -m 32M -no-reboot -nographic -monitor
telnet:127.0.0.1:1234,server,nowait -kernel pl011-sfr.bin -gdb tcp::2159
-serial mon:stdio

Compiling the original C code with optimizations makes the driver work.
It compiles down to assembly that only does a single write:

    ldr r3, pl011_addr
    mov r2, #0x10
    str r2, [r3, #0x38]

Attached is the an assembly file, and linkscript, that shows the
problem, and also includes the working code.

I haven't debugged inside of QEMU itself but it seems to me that the
problem is in pl011_write in pl011.c - the functions looks at which
offset is being written, and then writes the entire SFR that offset
falls under, which means that changing a single byte will change the
whole SFR.

** Affects: qemu
     Importance: Undecided
         Status: New

** Attachment added: "startup.s"
   https://bugs.launchpad.net/bugs/1809546/+attachment/5224336/+files/start=
up.s

-- =

You received this bug notification because you are a member of qemu-
devel-ml, which is subscribed to QEMU.
https://bugs.launchpad.net/bugs/1809546

Title:
  Writing a byte to a pl011 SFR overwrites the whole SFR

Status in QEMU:
  New

Bug description:
  The bug is present in QEMU 2.8.1 and, if my analysis is correct, also
  on master.

  I first noticed that a PL011 UART driver, which is fine on real
  hardware, fails to enable the RX interrupt in the IMSC register when
  running in QEMU. However, the problem only comes up if the code is
  compiled without optimizations. I think I've narrowed it down to a
  minimal example that will exhibit the problem if run as a bare-metal
  application.

  Given:

  pl011_addr: .word 0x10009000

  The following snippet will be problematic:

       ldr r3, pl011_addr
       ldrb r2, [r3, #0x38]        // IMSC
       mov r2, #0
       orr r2, r2, #0x10           // R2 =3D=3D 0x10
       strb r2, [r3, #0x38]        // Whole word reads correctly after this
       ldrb r2, [r3, #0x39]
       mov r2, #0
       strb r2, [r3, #0x39]        // Problem here! Overwrites offset 0x38 =
as well

  After the first strb instruction, which writes to 0x10009038,
  everything is fine. It can be seen in the QEMU monitor:

  (qemu) xp 0x10009038
  0000000010009038: 0x00000010

  After the second strb instruction, the write to 0x10009039 clears the
  entire word:

  (qemu) xp 0x10009038
  0000000010009038: 0x00000000

  QEMU command-line, using the vexpress-a9 which has the PL011 at
  0x10009000:

  qemu-system-arm -S -M vexpress-a9 -m 32M -no-reboot -nographic
  -monitor telnet:127.0.0.1:1234,server,nowait -kernel pl011-sfr.bin
  -gdb tcp::2159 -serial mon:stdio

  Compiling the original C code with optimizations makes the driver
  work. It compiles down to assembly that only does a single write:

      ldr r3, pl011_addr
      mov r2, #0x10
      str r2, [r3, #0x38]

  Attached is the an assembly file, and linkscript, that shows the
  problem, and also includes the working code.

  I haven't debugged inside of QEMU itself but it seems to me that the
  problem is in pl011_write in pl011.c - the functions looks at which
  offset is being written, and then writes the entire SFR that offset
  falls under, which means that changing a single byte will change the
  whole SFR.

To manage notifications about this bug go to:
https://bugs.launchpad.net/qemu/+bug/1809546/+subscriptions

