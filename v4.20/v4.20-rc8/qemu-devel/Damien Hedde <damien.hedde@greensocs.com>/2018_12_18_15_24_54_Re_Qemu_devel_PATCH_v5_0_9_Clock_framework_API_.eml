Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:39:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8F23D58055F
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 07:42:34 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 07:42:34 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AESv6URJSPGLWGZFPA9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKvz7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQMhRWSxPDICy?=
 =?us-ascii?q?YYQBAOUOP/pXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/gjHAzcwAAsA9wDvX?=
 =?us-ascii?q?bSod7oNKkSS+e1zKzQwDvNdfxW3Db955bOchs8o/+DQ69/ftfPxkIyEA7Kk0+f?=
 =?us-ascii?q?qYnkPzyL0OQBqWib4PR9Wu2ylWEqsA5xoiKxycgyjInJnYUVxUzf9Slj3Ik1It?=
 =?us-ascii?q?i4RVd9bNW5E5VQrzmXO5VqTs4hWW1kpTs2x74ctZKlciUHyI4rywPdZvCfboSF?=
 =?us-ascii?q?7RDuWPyMLTp6mX5pYq+ziwi2/ES61OHxVse53VBXpSRfiNbMrGoC1xnL58iHVP?=
 =?us-ascii?q?R9+kCh1C6L1wDS8eFEPVs0mbDUK54n3748jJ0TsV7MHiPumUX2irGZdlk89+S2?=
 =?us-ascii?q?9+jqYa/qqoKBO4J3kA3yLKojl8ylDeglMAUCR22b9v691L3n8035WrJKjvgun6?=
 =?us-ascii?q?nArp/aINkbqrekDABLzIYs9RK/Ay6939QfgHkHKk5Kdwycj4TuP1HOIfP4Auml?=
 =?us-ascii?q?j1WjjTdm3/TGPrznApXQIXnPirbhfbBh60FCzAo/18xQ55VRCrwaJvLzXUnxtN?=
 =?us-ascii?q?PeDh8kKQC0xPznCNpl2oMERW2PGrOZML/VsVKQ4uIvIuqMa5EPtDfyNvgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEETRCgwwlUea/iEGeSSUBIDG2Xr?=
 =?us-ascii?q?kg/Xc9D4SpC5qFQZqix7mI3SO+F5sRYXhaC1eKCjDxeoCZHvsBdi+WcfJniSEO?=
 =?us-ascii?q?AL2oSos90kO3uQrnjrZqMOfQvzcVrI/uz8Rd4erVmhcvsztuAJOGzmuPQmpoy3?=
 =?us-ascii?q?4OXCI8x6tloEZwmWuEhJB1n/FCXfla9v9EVgNyYYbR0+FgTdX7Sw7MetOhTFeg?=
 =?us-ascii?q?S8+hRzYrQYRi7cUJZhNREtCjgxaL/yemD7Jdw7CCAZ059OTc0nT9Ku5y0XvL0r?=
 =?us-ascii?q?ImhEJgScxKYz71zpVj/hTeUtaa236SkLynIOFFhHbA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BIAADmFBlchxHrdtBaCh0BAQUBBwUBg?=
 =?us-ascii?q?VIHAQsBgTBQbIEmg3yIeIsagWAtl1oUgV8VGBSHHSI1CA0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQZAQEECikBAgMBAgYBAQoYA?=
 =?us-ascii?q?gIiBAICAwEoKwYNBgIBAQGDHYF5CAEDAaZfcHwzgnYBAQWCQ4RsCIELihiBHIF?=
 =?us-ascii?q?XP4E4gW1+hE4BBwsBAwWDH4JXiSQggXmEXoV1ixYHAoIlBIgphwgegV2IKiaHK?=
 =?us-ascii?q?opJjyqBJiEBgRtxMxojUIJsghsMF4NKilRxgQQDiyJHgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BIAADmFBlchxHrdtBaCh0BAQUBBwUBgVIHAQsBgTBQbIE?=
 =?us-ascii?q?mg3yIeIsagWAtl1oUgV8VGBSHHSI1CA0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?jYFAgMaAQaCWwEBAQECAQECIAQZAQEECikBAgMBAgYBAQoYAgIiBAICAwEoKwY?=
 =?us-ascii?q?NBgIBAQGDHYF5CAEDAaZfcHwzgnYBAQWCQ4RsCIELihiBHIFXP4E4gW1+hE4BB?=
 =?us-ascii?q?wsBAwWDH4JXiSQggXmEXoV1ixYHAoIlBIgphwgegV2IKiaHKopJjyqBJiEBgRt?=
 =?us-ascii?q?xMxojUIJsghsMF4NKilRxgQQDiyJHgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="45455589"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 07:42:33 -0800
Received: from localhost ([::1]:54578 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZHVx-0003LS-42
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 10:42:33 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37018)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <damien.hedde@greensocs.com>) id 1gZHFF-0006tG-SH
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 10:25:19 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <damien.hedde@greensocs.com>) id 1gZHFE-0004lX-Fs
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 10:25:17 -0500
Received: from greensocs.com ([193.104.36.180]:36089)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <damien.hedde@greensocs.com>)
	id 1gZHF6-0004ig-4l; Tue, 18 Dec 2018 10:25:09 -0500
Received: from localhost (localhost [127.0.0.1])
	by greensocs.com (Postfix) with ESMTP id 0566B5DB9F2;
	Tue, 18 Dec 2018 16:24:57 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=greensocs.com;
	s=mail; t=1545146697;
	bh=I/GeEisdZ5yeUfFK3V5+LeNmaolyKhAyt5HGXuHEZ2w=;
	h=Subject:To:Cc:References:From:Date:In-Reply-To;
	b=GFNzdP+vtT5X36DYcTH5JMeg8KBMbFlJ+w2Gs2uiJS7V6c3/DDG0Ou+xAhz27Jmye
	hOBEwBKDz8lmnOW5EyUDsyK2Y/swwJ/S7dBxqZpgrO5oQltxw85+kHZ+dkyrOPxhcQ
	Y8sKBRVJyrZ6+j8074BZFV/lBJaz/KGA6iCBbwRA=
X-Virus-Scanned: amavisd-new at greensocs.com
Authentication-Results: gs-01.greensocs.com (amavisd-new);
	dkim=pass (1024-bit key) header.d=greensocs.com header.b=jO6nGONG;
	dkim=pass (1024-bit key) header.d=greensocs.com header.b=D0Iuyj9P
Received: from greensocs.com ([127.0.0.1])
	by localhost (gs-01.greensocs.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id 3DwhDFob11ki; Tue, 18 Dec 2018 16:24:56 +0100 (CET)
Received: by greensocs.com (Postfix, from userid 998)
	id 05CF55DB9E7; Tue, 18 Dec 2018 16:24:55 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=greensocs.com;
	s=mail; t=1545146696;
	bh=I/GeEisdZ5yeUfFK3V5+LeNmaolyKhAyt5HGXuHEZ2w=;
	h=Subject:To:Cc:References:From:Date:In-Reply-To;
	b=jO6nGONGLd3blMdEOVrKwAG34VOxhI3Qm7YYmSL1IwcA0OCRQM4mtoRqvMaWI07aN
	Oi7JbF4RbZNJ3apjw735Tln1d3KMCR5igP4WPDZP/UqL2MZcuwgUWgyZsMaHto3ySr
	z69CHXATwVmEr0U0wEaOP8zZNlm5kZoDYgBPbncE=
Received: from [172.16.10.145] (antfield.tima.u-ga.fr [147.171.129.253])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	(Authenticated sender: damien.hedde@greensocs.com)
	by greensocs.com (Postfix) with ESMTPSA id 6E54E5DB9E7;
	Tue, 18 Dec 2018 16:24:55 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=greensocs.com;
	s=mail; t=1545146695;
	bh=I/GeEisdZ5yeUfFK3V5+LeNmaolyKhAyt5HGXuHEZ2w=;
	h=Subject:To:Cc:References:From:Date:In-Reply-To;
	b=D0Iuyj9PBpOb0Lu1ZF7n2W9YaiXjBtXeciBqzWvusCtossn26u0BtLdv10QluPLfD
	o7Ny4A8TVModuxo7G1/E3uzp21MRFdpYLRZcRUHtXo+kTe9sAH9IQhkH1QH/x47PiZ
	eAK9A6c3/mN6VaFmML8fp9OAYb/395Un+qUuWaJc=
To: Peter Maydell <peter.maydell@linaro.org>
References: <20181002142443.30976-1-damien.hedde@greensocs.com>
	<09e1483c-298e-d41a-f9c9-4f186f530dcb@greensocs.com>
	<CAFEAcA9cNMiB01hSerawnfZsyXbJsrJYs_vFfWMi294XYeV8Zw@mail.gmail.com>
From: Damien Hedde <damien.hedde@greensocs.com>
Message-ID: <bb9c73c9-68e8-42f4-1e5f-f476b447db06@greensocs.com>
Date: Tue, 18 Dec 2018 16:24:54 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <CAFEAcA9cNMiB01hSerawnfZsyXbJsrJYs_vFfWMi294XYeV8Zw@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US-large
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 193.104.36.180
Subject: Re: [Qemu-devel] [PATCH v5 0/9] Clock framework API.
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Edgar Iglesias <edgar.iglesias@xilinx.com>,
	Alistair Francis <alistair@alistair23.me>,
	Mark Burton <mark.burton@greensocs.com>,
	QEMU Developers <qemu-devel@nongnu.org>,
	Sai Pavan Boddu <saipava@xilinx.com>, qemu-arm <qemu-arm@nongnu.org>,
	Paolo Bonzini <pbonzini@redhat.com>, Luc Michel <luc.michel@greensocs.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On 10/16/18 5:48 PM, Peter Maydell wrote:
> On 12 October 2018 at 16:26, Damien Hedde <damien.hedde@greensocs.com> wrote:
>> Hi Peter,
>>
>> Sorry to bother you with this, but you said some time ago you would
>> write something about reset.
> 
> Yeah, sorry about that. I haven't found (made) the time to think
> the issues through yet. Let me just dump to email the notes I had.
> This is a very "raw" set of notes, so it's not very organised and
> has a lot of 'todo' bits in it...
> 
> 
> Overall question -- does anybody know of other device modelling
> systems that do a good job of modelling reset, and how they do it?
> If we can borrow a proven design that might be better tha
> thrashing one out ourseles...
> 
> 
> My idea was roughly that we need a multi-phase reset, something like:
> 
>  PHASE 1:
>    Devices reset internal state. No calls out to other devices
>    (ie no setting IRQ line state, etc)
>    Some common bit of code (dev base class?) marks the device
>    reset as being in-progress by setting dev->resetting = true.
> 
>  PHASE 2:
>    Devices update their output lines (calls to irq line setting
>    functions, clock setting, etc)
>    In this phase devices may be the recipients of callbacks for
>    IRQ line level changes, etc, and must cope with this. A
>    callback can tell it's being called for a level change during
>    reset because dev->resetting will be true.
>    (They can update their own outputs in response to input changes.)
> 
>  PHASE 3:
>    Common code (dev base class) sets dev->resetting = false.
>    (Individual devices don't get to do anything here, unless
>    there's some painful case that requires it.)
> 
> The theory is that by decoupling reset into multiple phases
> we can avoid most of the reset order issues, by having the
> two ends do things in the right phase and/or by having
> the destination end be able to identify when a change is
> happening in the middle of reset.

This strategy seems fine to me.

> 
> Compatibility with existing device reset methods:
> essentially the current rules are the same as the "phase 1"
> rules, so we can just say that the current reset code in
> all devices is phase 1 reset. Then we can adjust anything
> that needs a phase 2 (which is probably not all that many
> devices).
> 
> Places where reset order currently matters:
> (this is just a list of things we should make sure our design
> copes with)
>  * wired-high IRQ lines, and device outputs that are asserted
>    as the device comes out of reset
>  * setting PC in the generic-loader device vs CPU reset
>  * image load (rom image reset) vs Arm M-profile reset wanting
>    to read the reset PC/SP from memory
>  * Arm M-profile CPUs should have INITVTOR as a config signal input
>  * x86 CPU vs APIC reset order ??
>  * anything else?
> 
> We should have some sort of "reset domain" object which can
> contain devices and also other reset domains. A reset domain's
> reset is simple: its phase 1 reset is "for each child, do
> phase 1 reset for that child", similarly for phases 2 and 3.
> A reset domain has an overall "reset" method that says
> "do phase 1 for all children, then phase 2, then phase 3".
> This allows things like "this SoC has a reset line which
> resets all its internal devices". (Do we want to give
> reset domains input gpio lines to trigger reset, or is
> being able to call a method on it sufficient?)

Consider the following use case: a platform with a controller that holds
a reset line on another device (starting with reset held).
At the beginning, the main (cold) reset will be triggered to start the
platform. During phase 2, the controller will set the reset line of the
other device (a gpio). Then we have phase 3. How do we handle this ?
Do we need to "delay" the phase 3 of the device until the controller
releases its reset line or do we consider the internal gpio reset line
to be outside of this reset scope ?

If we do that, we have 2 reset "sources": the main reset and the
internal gpio and there is some kind of OR operation to do between these
2 sources.

> 
> At the moment we have reset methods on devices:
>  * each bus handles reset for the things on the bus
>  * the (one and only) sysbus resets all the sysbus devices
>  * devices on no bus don't get reset at all unless something
>    takes special measures! (notably the CPUs are reset in
>    a very ad-hoc way at the moment)
> I guess this should be cleaned up by making each bus be
> a 'reset domain', and having a "system" reset domain which gets
> anything which doesn't have a parent reset domain (and which
> we then use for whole-board power-on reset). Calling the
> system reset domain's overall reset method will then do
> the 3-phase reset for everything>
> How would direct qemu_register_reset() calls fit into this
> scheme? (Some of them are devices that could get QOM reset
> methods instead. Perhaps we could get away with dumping the
> rest into the 'master reset' domain, or leaving them as-is?
> Some are for CPU reset which we definitely should clean up.)
> 
> We need to handle different types of reset somehow, in
> particular "cold/power on reset" versus "warm reset".
> Can we do this just with reset domain objects, or do we
> need/want to pass each device's reset method a "type" argument?

Maybe phase 1 only needs the type, phase 2 and 3 can only depends on the
device state.

Anyway, this reset problem seems outside of the scope of this patch set.
I think I'll do a reroll with the remark I've got so far, but it will
still miss the reset part to be well integrated. I can also propose
something in another rfc about the 3-phase reset to advance on that part.

--
Damien

