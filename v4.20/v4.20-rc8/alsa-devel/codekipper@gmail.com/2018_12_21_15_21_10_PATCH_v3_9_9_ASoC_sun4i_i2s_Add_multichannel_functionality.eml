Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:51:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id CCEF8580522;
	Fri, 21 Dec 2018 07:22:26 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 07:22:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AIG7UKhZ9QsT8SKpPsMG2xp3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc++Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/zIHbboGOLPpzfLjQcc8ZSGdbQspcTTBNDp+6?=
 =?us-ascii?q?YoASD+QBJ+FYr4zlqlQSqhuxGBejBODuyj9Qnn/5w7c63v8uEQHDxgMgHtYOvG?=
 =?us-ascii?q?7Io9XyMacfV/2+wqrQzTjbcf9axTPw5JLVfh0vv/2AR698fMnNxUU1Fg7IjE2c?=
 =?us-ascii?q?pIj5Mz+Py+gAvHaX4/BvWO+hkWIrtg98rzupy8wxkIfGnJgVxUrB9ShhwIY6O9?=
 =?us-ascii?q?m4SEljbN66H5tfqTuaO5F1Qsw8WWFovjg1yrkctZ68ZigKx4wrxx/Za/OZb4iF?=
 =?us-ascii?q?+gzvWPqVLDtimX5odqyziwyv/UWj1uHwTMi53VRSoipAiNbMt3QN1xLJ6siAT/?=
 =?us-ascii?q?tw5kOh2TeJ1wDO5eBIOEM0mrTBK54n3LEwkoMfsUPNHy/whkr2lrSbdlsr+ue2?=
 =?us-ascii?q?8eTreLbmqYGGN49ylA7+Nr4imsulAeQ3KgQORXSU+fyg1L3/+k30WLFKjvw1kq?=
 =?us-ascii?q?bHqpzbKtkbq7W9Aw9U1IYj9hm+Ay2n0NQegXkIMlZFdAibgIjuPlHEOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPr37DZXMMnjMirDhcax9605B0gUzy99f6olQCrEAJvLzR0DwuM?=
 =?us-ascii?q?bZDh8/Lwy73eLnBM9h2YMZXGKFGrWZP7/KsV+U+uIvJPGBa5UOuDb9LPgl5OTi?=
 =?us-ascii?q?jWUjll8fZqSp2ZoXaHalHvVpOUmZYHzsgssfHmcOpAYxUOvqiFiaWz5Je3myR7?=
 =?us-ascii?q?485i08CI++DofMXIatjKaF3Ce6BJJWYG9GB0uIEXfpcYWERvgNZDiTIs9njjwL?=
 =?us-ascii?q?S7yhR5U92hGpsQ/w06BnIfbM+i0EqZLj08B46PDJmhEs6zN4FcSd3HuLT2FvgG?=
 =?us-ascii?q?wIQTg63KR8oUx4zleOyqx4g/1eFdxO6PJFSAY6NZjAz+NkD9D+QB7OftCMSFy+?=
 =?us-ascii?q?WNWpHSkxTs4tw98Je0tyBs+tjg7d0CawA78ajbqLBIcq/aLaxHXxI8d9y3Db1K?=
 =?us-ascii?q?gulVUmQ81PNXG4ia577QTcG4nJk0CBnaawaascxDLN9HuEzWeWoEFYUQtwUaLZ?=
 =?us-ascii?q?XXAfZkrat8j56lnFT7+0DbQnMw1BycGZJ6tOa93pi0hGRfj5NNTfZWKxh3m/BR?=
 =?us-ascii?q?KSyryQa4rqfn0X3D/BB0gcjwAT4XGGOBAkCSelvW3fAyJhFFL1b0z37OlxtWm0?=
 =?us-ascii?q?Tkk3zwGNcU1szL61+h8ThfyBRPIfxLMEuCE9qzpqGFaxxc7ZC92FpwB5ZqVTfc?=
 =?us-ascii?q?s94Etb1WLerwF8PoGgI7p+iVIEcgV3v1nh1xN4CohblcgqrXUqzBd9KK6C0VNB?=
 =?us-ascii?q?cS+Y0o70OrHNNmby+xWvYbbM2l7CyNaW5rsP6PMgplX5vQGmClAt82963NlSyX?=
 =?us-ascii?q?ec4IvFDBATUZ7oTkk47Rx6qKzEbSkn4IPU02ZhMa21sj/ExtIoC/Epyhemf9dD?=
 =?us-ascii?q?LqyEEBX+HNEdB8irMOYqgUSmbgoYPOBO8645J8Ond/qc1K+rJupghy+mjWJc7Y?=
 =?us-ascii?q?B500KM8Td8S+HS05YExfGYwhWIVzPmgFi9tcD3nJhOZSsOEWqn1SjkGIlRa7Vw?=
 =?us-ascii?q?fYkRE2euIM63xtJki572QXFY912jB1IA2MC3fxqfdFj93QxW1UQKrn2rgyq4zz?=
 =?us-ascii?q?pokz43qqqTxjDBw+PndBAfIG5EWHFijUvwIYizl90bXFKnbw8zmBun5Eb6wbNW?=
 =?us-ascii?q?pKB+L2nVXEdJcDL6L2BkUqusqLWCZ9RD548vsSVSSO68e0yVSqbhoxsG1CPuB2?=
 =?us-ascii?q?heyyo6dz2wupX5ggZ1iGSSLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCnuzIOAtzG06XdkABKhhPCzhsPoERIh3iDlzd?=
 =?us-ascii?q?lqWj7FrBL9YontyqS7PvhrfkhuBF/g9cV6HptynZc3hJEVwXIanIma/WIbkWfv?=
 =?us-ascii?q?NtVWwb7+bH0IRTIRwt/a+g7l2FB4LnKSxoL0TXGdwspnZ9mnbWIawCM978ZWCK?=
 =?us-ascii?q?iK6LxIhzd6ol29rQjJe/hygi8dyecy6H4dm+wGoxAiziKZArAPB0VYOTHsmg+M?=
 =?us-ascii?q?79C/qqVXeWmufaKx1Ep4gdCuErWCrhtAV3b+f5coBTVw4dlnMFLQzH3z7ZnpeN?=
 =?us-ascii?q?vKYtIWqBKUiA3Mj/RPJJIyi/oKhjdnOWTnsn0+0OM7iR1u3ZenvImIMWlt/aS5?=
 =?us-ascii?q?AgJGOT3xfc8c5jbtjaNGlMaMw4+vBolhGikMXJbwTfOoFy8Ste36NwmUFj0wsG?=
 =?us-ascii?q?ybGb3ZHQ+Q80pmq3PPE5a2N3CYPnUZzNNiRAWDK0xbmgwbQDI6npshHACw2MPh?=
 =?us-ascii?q?aFt55iwW5lPgqhtD1ONoNxr8UmfevguoaS00SJ+QLBVI9AFC+lzVPNea7uJyGS?=
 =?us-ascii?q?FY45KgoBaMKmydewRHE2UJVlaYCFDkO7mk/cPA/PSABuqiM/vOZq2DpvZDV/iT?=
 =?us-ascii?q?35KgzItn8yyINsWOJXRiC/w72kxeXXF2AcjZmjMPSzAJmCLJdcKUuBC8+ihvpM?=
 =?us-ascii?q?Cl7PvrQB7v5ZeIC7ZKLdVv+hW2jb2fOOKKmCl5KShX1pUXyH/Mybgf2kMSii50?=
 =?us-ascii?q?ezmsF7QAqTDCTKbKlqBLCB4bbjt5NNFU4KIkwglNJcnbh8v117FiiP41DlZFVV?=
 =?us-ascii?q?r5lcCoZcwFOWe9NFzcCUaPNbSGIyDLws7tbaO9T71QkPtbtxmqtTmHFE/jO2fL?=
 =?us-ascii?q?qz68Uhm/MORByjuaJBVEtKmzaBtgTGXnQdn6cBq9K5l8ijhyiaI5gGjiPnUdPH?=
 =?us-ascii?q?57aUwJ5rmR6z5Ix+5iHXxAxnViKuaAlimD6PTAMdAdtv44LD5zkrdR53g3yLpN?=
 =?us-ascii?q?9CxebPNwkSrW6NVppgL12tKTwyZqBUId4g1Ag5iG6B1v?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAADSBB1ch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJ4wWX4sdgg0UiROOOIFzEwEBGBMBhzAiNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjoigm8DAwECJAsBDQEbHQEDAgkBAQUQCjEDHgIRA?=
 =?us-ascii?q?QUBHAcSBYMdgWkBAxUEAZolPIwVFgUBF4J3BYEBg0AKGScNXhOBJAIGEodsgX2?=
 =?us-ascii?q?BKIEcF4F/g26DDIgJAolLl0czCYZSh2SDJwwYiXqHZYlThhCKEgIEAgQFAgUPI?=
 =?us-ascii?q?YElgg5wgQGCO4Ibg22KVD8ygQQBAQE7jVQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AFAADSBB1ch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJ4wWX4sdgg0UiROOOIFzEwEBGBMBhzAiNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjoigm8DAwECJAsBDQEbHQEDAgkBAQUQCjEDHgIRAQUBHAcSBYMdgWk?=
 =?us-ascii?q?BAxUEAZolPIwVFgUBF4J3BYEBg0AKGScNXhOBJAIGEodsgX2BKIEcF4F/g26DD?=
 =?us-ascii?q?IgJAolLl0czCYZSh2SDJwwYiXqHZYlThhCKEgIEAgQFAgUPIYElgg5wgQGCO4I?=
 =?us-ascii?q?bg22KVD8ygQQBAQE7jVQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,381,1539673200"; 
   d="scan'208";a="45964587"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 07:22:20 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404086AbeLUPVa (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 10:21:30 -0500
Received: from mail-lj1-f194.google.com ([209.85.208.194]:44977 "EHLO
        mail-lj1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2390999AbeLUPV0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 10:21:26 -0500
Received: by mail-lj1-f194.google.com with SMTP id k19-v6so5039471lji.11
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 07:21:25 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=WttkbvrJMbeZSlFiVpQSvZj2pxx/qQWUGD6I3DfhS0U=;
        b=ktqJ1kt/lk3JTICDqMUMFZnM2hvnF0zNJ9f6saRYbOT1cE39WkOTvcMSCKRmCo5piX
         CGP/+24RvDovdWvNf0HgXyJqzb8JHy5505WjBekXy/W8z7pjRWfTrKROy/ouRa2DIO/5
         akULMl1zJyNbmQkHL95C2XYX+cXp6iqznK2W4Y0QGV3o04sEVQf5R8pQpTd01xz9dgSO
         79c/QTYzU+5IsulRWwGHlSCpsTFPkqymht4qE4bslgc+YMMFyy5+4YCsy4TuSSNMCJ8E
         dTdM3wsdbmuUgMvAlQ0P+VucQRLdwvGeiGWPKxkpMyWmIaiTas7ZOO7eIOBEGvJuujWk
         97vA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=WttkbvrJMbeZSlFiVpQSvZj2pxx/qQWUGD6I3DfhS0U=;
        b=SDgH1z/rpu9YjzaF2S9r6UnMicT5V+ES7w7+DycFnkJZpXQpn/rg8fzFtBJoD2+aHS
         HvDFWvDc0Cv4wcTYZ1Yo44sc9xuCFXL80kaeswh92G9X+8m6efUkP3C+H3j6CvNQ6Oxj
         WjeEhzrualxsrXAP6jqVZE+qilzZUmLzC3dDY71txM4WGotp3OdijUt9JSpYObMtoR7w
         W2fqBCQEGRuS+Sf1nA3ODVuSmtdm7j4FtZ0jnxIUg7+g+StM6A721OWgZTUAaZYL5CnW
         uqaYclc3zxXaBiAOil29z+vyz9T+JlTkiR7RftO9bZ+R7GtRRgqPS+ntIrTWRf7oHEks
         +C6w==
X-Gm-Message-State: AJcUukfjFv4OZhWdQTAa3q+euMnBrOW8CBvpi3fGxD3i8+Vr8kShx6bz
        xXW6x0pSzURZvg8X1Igu4Fg=
X-Google-Smtp-Source: ALg8bN7Uh4stQ0PblLE2HU9yausHFhInzYDcjBzuEG/XnLwQ+lPxK5aqiO6E4XElZbTdm/9GhK5vCQ==
X-Received: by 2002:a2e:2416:: with SMTP id k22-v6mr2090824ljk.80.1545405684248;
        Fri, 21 Dec 2018 07:21:24 -0800 (PST)
Received: from localhost.localdomain (c90-142-43-138.bredband.comhem.se. [90.142.43.138])
        by smtp.gmail.com with ESMTPSA id q30sm5005601lfi.94.2018.12.21.07.21.23
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 21 Dec 2018 07:21:23 -0800 (PST)
From: codekipper@gmail.com
To: maxime.ripard@free-electrons.com, wens@csie.org,
        linux-sunxi@googlegroups.com
Cc: linux-arm-kernel@lists.infradead.org, lgirdwood@gmail.com,
        broonie@kernel.org, linux-kernel@vger.kernel.org,
        alsa-devel@alsa-project.org, be17068@iperbole.bo.it,
        Marcus Cooper <codekipper@gmail.com>
Subject: [PATCH v3 9/9] ASoC: sun4i-i2s: Add multichannel functionality
Date: Fri, 21 Dec 2018 16:21:10 +0100
Message-Id: <20181221152110.17982-10-codekipper@gmail.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20181221152110.17982-1-codekipper@gmail.com>
References: <20181221152110.17982-1-codekipper@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Marcus Cooper <codekipper@gmail.com>

The i2s block can be used to pass PCM data over multiple channels
and is sometimes used for the audio side of an HDMI connection.

Signed-off-by: Marcus Cooper <codekipper@gmail.com>
---
 sound/soc/sunxi/sun4i-i2s.c | 121 +++++++++++++++++++-----------------
 1 file changed, 64 insertions(+), 57 deletions(-)

diff --git a/sound/soc/sunxi/sun4i-i2s.c b/sound/soc/sunxi/sun4i-i2s.c
index cfcf427270fd..2be3a3e7a3c0 100644
--- a/sound/soc/sunxi/sun4i-i2s.c
+++ b/sound/soc/sunxi/sun4i-i2s.c
@@ -199,6 +199,7 @@ struct sun4i_i2s {
 
 	unsigned int	tdm_slots;
 	unsigned int	slot_width;
+	unsigned int	offset;
 };
 
 struct sun4i_i2s_clk_div {
@@ -406,56 +407,71 @@ static int sun4i_i2s_hw_params(struct snd_pcm_substream *substream,
 	int lines;
 
 	channels = params_channels(params);
-	if ((channels > dai->driver->playback.channels_max) ||
-		(channels < dai->driver->playback.channels_min)) {
-		dev_err(dai->dev, "Unsupported number of channels: %d\n",
-			channels);
-		return -EINVAL;
-	}
-
-	lines = (channels + 1) / 2;
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		if ((channels > dai->driver->playback.channels_max) ||
+			(channels < dai->driver->playback.channels_min)) {
+			dev_err(dai->dev, "Unsupported number of channels: %d\n",
+				channels);
+			return -EINVAL;
+		}
 
-	/* Enable the required output lines */
-	regmap_update_bits(i2s->regmap, SUN4I_I2S_CTRL_REG,
-			   SUN4I_I2S_CTRL_SDO_EN_MASK,
-			   SUN4I_I2S_CTRL_SDO_EN(lines));
-
-	if (i2s->variant->has_chcfg) {
-		regmap_update_bits(i2s->regmap, SUN8I_I2S_CHAN_CFG_REG,
-				   SUN8I_I2S_CHAN_CFG_TX_SLOT_NUM_MASK,
-				   SUN8I_I2S_CHAN_CFG_TX_SLOT_NUM(channels));
-		regmap_update_bits(i2s->regmap, SUN8I_I2S_CHAN_CFG_REG,
-				   SUN8I_I2S_CHAN_CFG_RX_SLOT_NUM_MASK,
-				   SUN8I_I2S_CHAN_CFG_RX_SLOT_NUM(channels));
-	}
+		lines = (channels + 1) / 2;
 
-	/* Map the channels for playback and capture */
-	regmap_field_write(i2s->field_rxchanmap, 0x00003210);
-	regmap_field_write(i2s->field_txchanmap, 0x10);
-	if (i2s->variant->has_chsel_tx_chen) {
-		if (channels > 2)
-			regmap_write(i2s->regmap,
-				     SUN8I_I2S_TX_CHAN_MAP_REG+4, 0x32);
-		if (channels > 4)
-			regmap_write(i2s->regmap,
-				     SUN8I_I2S_TX_CHAN_MAP_REG+8, 0x54);
-		if (channels > 6)
-			regmap_write(i2s->regmap,
-				     SUN8I_I2S_TX_CHAN_MAP_REG+12, 0x76);
+		/* Enable the required output lines */
+		regmap_update_bits(i2s->regmap, SUN4I_I2S_CTRL_REG,
+				   SUN4I_I2S_CTRL_SDO_EN_MASK,
+				   SUN4I_I2S_CTRL_SDO_EN(lines));
+
+		if (i2s->variant->has_chcfg)
+			regmap_update_bits(i2s->regmap, SUN8I_I2S_CHAN_CFG_REG,
+					   SUN8I_I2S_CHAN_CFG_TX_SLOT_NUM_MASK,
+					   SUN8I_I2S_CHAN_CFG_TX_SLOT_NUM(channels));
+
+		regmap_field_write(i2s->field_txchanmap, 0x10);
+		/* Configure the channels */
+		regmap_field_write(i2s->field_txchansel, SUN4I_I2S_CHAN_SEL(2));
+
+		if (i2s->variant->has_chsel_tx_chen) {
+			u32 chan_sel = SUN8I_I2S_TX_CHAN_OFFSET(i2s->offset) | 0x1;
+			regmap_write(i2s->regmap, SUN8I_I2S_TX_CHAN_SEL_REG,
+				     chan_sel | 0x30);
+
+			if (channels > 2) {
+				regmap_write(i2s->regmap,
+					     SUN8I_I2S_TX_CHAN_MAP_REG+4, 0x32);
+				regmap_write(i2s->regmap, SUN8I_I2S_TX_CHAN_SEL_REG+4,
+					     chan_sel | 0x30);
+			}
+			if (channels > 4) {
+				regmap_write(i2s->regmap,
+					     SUN8I_I2S_TX_CHAN_MAP_REG+8, 0x54);
+				regmap_write(i2s->regmap, SUN8I_I2S_TX_CHAN_SEL_REG+8,
+					     chan_sel | 0x30);
+			}
+			if (channels > 6) {
+				regmap_write(i2s->regmap,
+					     SUN8I_I2S_TX_CHAN_MAP_REG+12, 0x76);
+				regmap_write(i2s->regmap, SUN8I_I2S_TX_CHAN_SEL_REG+12,
+					     chan_sel | 0x30);
+			}
+		}
+	} else {
+		/* Map the channels for capture */
+		regmap_field_write(i2s->field_rxchanmap, 0x00003210);
+		regmap_field_write(i2s->field_rxchansel,
+				   SUN4I_I2S_CHAN_SEL(params_channels(params)));
+
+		if (i2s->variant->has_chcfg)
+			regmap_update_bits(i2s->regmap, SUN8I_I2S_CHAN_CFG_REG,
+					   SUN8I_I2S_CHAN_CFG_RX_SLOT_NUM_MASK,
+					   SUN8I_I2S_CHAN_CFG_RX_SLOT_NUM(channels));
+
+		if (i2s->variant->has_chsel_tx_chen)
+			regmap_update_bits(i2s->regmap, SUN8I_I2S_RX_CHAN_SEL_REG,
+					   SUN8I_I2S_TX_CHAN_OFFSET_MASK,
+					   SUN8I_I2S_TX_CHAN_OFFSET(i2s->offset));
 	}
 
-	/* Configure the channels */
-	regmap_field_write(i2s->field_txchansel,
-			   SUN4I_I2S_CHAN_SEL(params_channels(params)));
-
-	regmap_field_write(i2s->field_rxchansel,
-			   SUN4I_I2S_CHAN_SEL(params_channels(params)));
-
-	if (i2s->variant->has_chsel_tx_chen)
-		regmap_update_bits(i2s->regmap, SUN8I_I2S_TX_CHAN_SEL_REG,
-				   SUN8I_I2S_TX_CHAN_EN_MASK,
-				   SUN8I_I2S_TX_CHAN_EN(channels));
-
 	switch (params_physical_width(params)) {
 	case 16:
 		width = DMA_SLAVE_BUSWIDTH_2_BYTES;
@@ -509,7 +525,6 @@ static int sun4i_i2s_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 {
 	struct sun4i_i2s *i2s = snd_soc_dai_get_drvdata(dai);
 	u32 val;
-	u32 offset = 0;
 	u32 bclk_polarity = SUN4I_I2S_FMT0_POLARITY_NORMAL;
 	u32 lrclk_polarity = SUN4I_I2S_FMT0_POLARITY_NORMAL;
 
@@ -517,7 +532,7 @@ static int sun4i_i2s_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
 	case SND_SOC_DAIFMT_I2S:
 		val = SUN4I_I2S_FMT0_FMT_I2S;
-		offset = 1;
+		i2s->offset = 1;
 		break;
 	case SND_SOC_DAIFMT_LEFT_J:
 		val = SUN4I_I2S_FMT0_FMT_LEFT_J;
@@ -538,16 +553,8 @@ static int sun4i_i2s_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 		 * i2s shares the same setting with the LJ format. Increment
 		 * val so that the bit to value to write is correct.
 		 */
-		if (offset > 0)
+		if (i2s->offset > 0)
 			val++;
-		/* blck offset determines whether i2s or LJ */
-		regmap_update_bits(i2s->regmap, SUN8I_I2S_TX_CHAN_SEL_REG,
-				   SUN8I_I2S_TX_CHAN_OFFSET_MASK,
-				   SUN8I_I2S_TX_CHAN_OFFSET(offset));
-
-		regmap_update_bits(i2s->regmap, SUN8I_I2S_RX_CHAN_SEL_REG,
-				   SUN8I_I2S_TX_CHAN_OFFSET_MASK,
-				   SUN8I_I2S_TX_CHAN_OFFSET(offset));
 	}
 
 	regmap_field_write(i2s->field_fmt_mode, val);
-- 
2.20.1

