Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:44:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 587FD58055F;
	Tue, 18 Dec 2018 14:03:33 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 18 Dec 2018 14:03:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AP9ZDexCc/FkdEEGjq+zWUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/o8ywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95SWSJcAo2y?=
 =?us-ascii?q?cYUBAOgPPeZfs4byqVQBoxSlBQm0Bu7i0SNIi33s0KEmz+gsCwPL0Qo9FNwOqn?=
 =?us-ascii?q?TUq9D1Ob8UX+G10anH0CvMZO5M1zjn9YjIdg0qrPaIXbNwbMre1FcgGhjfjlqO?=
 =?us-ascii?q?tIPlPyma1vgXv2eH6OpgUPuihmg6oA9yujii3tkghpXNi44P11zJ+zt1zJwoKd?=
 =?us-ascii?q?C7VEJ3e9+pHZlIuy2HOIZ7TdkuT3x2tCon0LEKp4K3cDIXxJkm2RLSbeGMfZKS?=
 =?us-ascii?q?7RL5TumRJC91hHJ7d7K7gBa/6VagyuLiWcmuylpKrTRKksPKtn8T0xzf8M+HSu?=
 =?us-ascii?q?Fy/ku52DaP0R7c6v1cLEwqiabWL4QtzqM+m5YNq0jPAyz7lFnsgKKXdEgo4u2o?=
 =?us-ascii?q?5P7mYrXiqJ+cLYh0igTmP6Qqm8y/B/k4MwcXU2iY5+u8zrvj8lP9QLlTif03nK?=
 =?us-ascii?q?/Zv47AJckAuK65DBFa0pw55xa8ETimytIYkmcDLF5ffxKHlYfpN0nUIP/kFfe/?=
 =?us-ascii?q?n0iskDBzyvDCP73hAYvCImLMkbf8Zrt9709cyAwuzdFQ/Z5UC7cBIO7tVU/1rt?=
 =?us-ascii?q?DXEhg5Mwmsyeb9FNp9zp8eWX6IAqKBMKPdq16I5v41LOmLfoMVuCv9JOIj5/7h?=
 =?us-ascii?q?lnI5nV4dfa+03ZoYcny4H/JmI1mHbnromNsODWAKvg8mRuzwlFKCSSJTZ2q1X6?=
 =?us-ascii?q?8k5DE7D5ypAZ3ARoCqhryB2iC7E4ZSZmBHDFCMDHjpe5+FW/cKdCKdPMthniYY?=
 =?us-ascii?q?WrimTo8rzQuuuxPiy7p7MurU/TUVuoj41Nh14O3Tlgs+9SZuAMSfyGyNS2B0nm?=
 =?us-ascii?q?UVRz45xqx/oEp9ykud3qh8mfBXCdtT5/ZRWAcgKZHc1/B6C8z1Wg/ZfdeGUlCm?=
 =?us-ascii?q?Ts+iATEwVN0xxdAObl15G9WjiBDDwiWrD6UUl7yNGJw77Kbc02LtKMZ6znbMzL?=
 =?us-ascii?q?MhgEU+QstTKW2mgbZy+BXJCI7XjUqVjaaqer4a3C7W6miDy22CvEVbUA51VaXI?=
 =?us-ascii?q?RnQfZkrQrdTk6ULOVb6uCbI7MgRfzc6OMLdFatrsjV9eXvfsJMzeY36tm2e3HR?=
 =?us-ascii?q?uH26mDbJT0dGkH3CXSEk4EkxsN8naALgU+Aiaho2TDDD1hD17vYkXs8fVgp3O/?=
 =?us-ascii?q?VEM70waKb0h53bqv5hEVneCcS+8U3r8cpCchqjB0HFGh39LWC9uMvRZhcL9bYd?=
 =?us-ascii?q?Mn5FdH1GTZtwNmM5ykLqBigEMecgtts0Pv0RV3FptPkcwwoHw2ywpyLLqS0Eld?=
 =?us-ascii?q?eDOAwZDwJrrXJ3Ho8xCrdaHX1U/R0daM9qgU9fQ3tk/svAeqFkol7XVqyN1V03?=
 =?us-ascii?q?qa5pXXAwseS5PxUkAr9xdko7HWeDUy54TR1Xd0K6m7rifC2841BOsi0huhf8pf?=
 =?us-ascii?q?PLmYGwPoEswaB9KhKOolm1WyahIEPeZS9LM7Ps+8dvuG3rKrM/hknD68kWtH54?=
 =?us-ascii?q?V92FqW9yVgUu7Iw4oFw/aA0wudVjfzkE2ustrqloBDfz0SGHSwyTLlBIJIeqJ9?=
 =?us-ascii?q?Z4ILBnqwLM2twdV+gYXgW3pZ9F6lGlMH19WleRuUb1zhwwJQ0V4brmCgmSu91z?=
 =?us-ascii?q?Z0iS0mrrKD3CzSxOTvbBoGOm9RSGhil1vsOpW0j9YBUUisbggpkgal5Engy6ha?=
 =?us-ascii?q?oqR/M3fcQUNScyfqKGFiV7O6tqCebM5X9JMorSJXXfy+YV+AUL79oBga0yT5E2?=
 =?us-ascii?q?tF3j87dDKqupT/nxNkjmKQN3JzrHvfecFtyhbT/t3cRfhN3jUYQCl0kyXYBl+5?=
 =?us-ascii?q?P9Ox59Wbi4/DsvyiV2KmTpBScTPkzYSauCu55G1qBwayn/Symt3hDAg73jX319?=
 =?us-ascii?q?hsVSXUshn8ZpPn2Li9MeJiZkNoHkPz69JmGoFilYs9nJIQ1mIbhpmP/XoHjH38?=
 =?us-ascii?q?MdNU2a/laHoNRDgLw8Pa4QT/2U1jKG6JyJz9VnmH3sRhYNy6aHsM2i0h98BKFL?=
 =?us-ascii?q?uU7LtckCtwo1q4rhjebeJznzgD0vsu9GAVg/sStwUz1CWdDasfHU1ZPSzqihSJ?=
 =?us-ascii?q?4MqyrKRRZGazb7ew0FByksymDLGHugtcQmr2eo8+HS9s6cVyKE7M0Hr26o3+ed?=
 =?us-ascii?q?jfd9QTtgCPkxfbjuhYM5YxlvsMhSp6NmPxp3wly+gnjRNw2ZG2ppSIK2Jo/Kih?=
 =?us-ascii?q?GB5XKiX1Z98P+jHqlatRhdyZ34erHpV8ADkLWIboQOmsEDITs/TnKgmPHCc9qn?=
 =?us-ascii?q?edBbrQAwuf5F16oHLIFpChL2uXK2UBzdV+WBmdI1RSgAIOUzU/gJE5DRqmxND7?=
 =?us-ascii?q?fEd6+zAR5UP4qh1WxeJzLBT/VmbfpAG1ajY7UpSfLRxW7h1c6EfRK8CR8uVzHy?=
 =?us-ascii?q?RA9J27sAONMnCbZxhPDWwRWk2EAE3jPqCz5dba9eiUHPG+L/zIYbWBsuFeU/aI?=
 =?us-ascii?q?xZSy0opp5TqMN8OPPmV8AP0/wEZMQXd5G8HBkTUVVyMXjz7Nb9KcpBqk+i14sM?=
 =?us-ascii?q?G/8PfoWALu/4ePCKFSMdJg+x+om6eDKvWQiT19KTZZ0JMM2HDJxKIe3F4UlyFh?=
 =?us-ascii?q?aT2tHa4cui7KSaLagrVXAAIDayNvKMtI6Lox0RNQOcHAkNP6yL55guQxC1dETl?=
 =?us-ascii?q?HhnsCpZcoXI2CyLl/HBUCLNKiYKj3P2c34faS8SbhIhuVOqxKwoSqbE1PkPjmb?=
 =?us-ascii?q?iznpVhWvPftQgy2BIBNeuJ+ychB2BGjnTdLmbAC7MdBtgT03x700mm3FNWoGPT?=
 =?us-ascii?q?dgdENNq6Wa7TlEjfVnB2xB8n1lIPGEmimD6enYL5cWsf1zDSV1l+JV+nI6y7RO?=
 =?us-ascii?q?4SFARfx1njbSr9F0r1GnlOmP1iRoUB5UpjlXg4KLuBYqBaKM2pBGWHvAtCwA8X?=
 =?us-ascii?q?mdEVxeq9JjC9Drk65e1dzL0qnzfmRs6dXRqO8NGsTZYPqOLX5pZR74BTLZJBEI?=
 =?us-ascii?q?QT6iKSfUgEkLw6LazWGcspVv8suko5EJULIOEQVtTv4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BVAABgbRlch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYFWghYng32UFIINFJdagV8TAQEYEwGEPAKCXyI4EgEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCCkvgjYkAYJiAQIDAQIgBFIGCQEBChgCAiYCAgMxAQUBHAYTBYMdg?=
 =?us-ascii?q?gEFm0k8ixl8M4VBhG0SeYs0F4F/gRGDEoQ7LoMgglcCiUaBdYReN5BUCYIpiCm?=
 =?us-ascii?q?HDhhgfYgZh2Esih2PAwYCCQcPIYE8gXczGggbFYMngicXEo4pIjJlIAEBixUNF?=
 =?us-ascii?q?weCIAEB?=
X-IPAS-Result: =?us-ascii?q?A0BVAABgbRlch0O0hNFjGwEBAQEDAQEBBwMBAQGBZYFWghY?=
 =?us-ascii?q?ng32UFIINFJdagV8TAQEYEwGEPAKCXyI4EgEDAQEBAQEBAgETAQEBCgsJCCkvg?=
 =?us-ascii?q?jYkAYJiAQIDAQIgBFIGCQEBChgCAiYCAgMxAQUBHAYTBYMdggEFm0k8ixl8M4V?=
 =?us-ascii?q?BhG0SeYs0F4F/gRGDEoQ7LoMgglcCiUaBdYReN5BUCYIpiCmHDhhgfYgZh2Esi?=
 =?us-ascii?q?h2PAwYCCQcPIYE8gXczGggbFYMngicXEo4pIjJlIAEBixUNFweCIAEB?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="58029578"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 14:02:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727455AbeLRWC1 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 17:02:27 -0500
Received: from mail-qk1-f195.google.com ([209.85.222.195]:36648 "EHLO
        mail-qk1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726536AbeLRWC1 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 17:02:27 -0500
Received: by mail-qk1-f195.google.com with SMTP id o125so10491826qkf.3
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 14:02:26 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:organization:user-agent:mime-version
         :content-transfer-encoding;
        bh=EsojUI9QDJJ/V+WS2VaONbvCwzMWLBaQYZDQtJ82Bms=;
        b=Q1VuxznnFsMVXQvLCF55dWIhhA08MYmnvUOkf450i6Ne9HV+g9iT4rMBT6cqg/B26B
         aljgu4QO7zvoh+YE/U+giqOaglJ4FiIQ/Wyf+oxh+mR7Lb0a3SEGBdhTVpVLidJ1NhSk
         BG1pWSPO1cykwbYeOHo3byY48t34uGXM4b2VmiNhZwpj0tAsPnFEE0IelxaHQwrBoHL3
         7IJe28nmiib6iky+zkT0A2zm+Jv8CKD1kfYHJkv3PUCHWAEZKEXFwjgiSwO3oMKPMMEg
         7Q2W5H7omi9aOFDdhCy83EOqMlo6+FNP7pVUNyCzJU/3cQCbU/oP1gPKDZZUUC/x/yeU
         28NQ==
X-Gm-Message-State: AA+aEWYzN8QQKhrAmuA4xu+JnBNYUJUa30D4TX6sSoIFSj0oMgV+rg7Q
        5QZpS/qgUqOz4vSyp1fDhM4jUA==
X-Google-Smtp-Source: AFSGD/XEqY1jfVb9+miHoVuC68zCxyZVBYEtxVN9dbnpLAM5w7Ac3G2r+ZO2rT6FyGndoBEuIGs13Q==
X-Received: by 2002:a37:9e0d:: with SMTP id h13mr13290700qke.260.1545170545691;
        Tue, 18 Dec 2018 14:02:25 -0800 (PST)
Received: from dhcp-10-20-1-11.bss.redhat.com ([144.121.20.162])
        by smtp.gmail.com with ESMTPSA id u4sm490709qkk.51.2018.12.18.14.02.24
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 18 Dec 2018 14:02:24 -0800 (PST)
Message-ID: <a678fe870b682a0f2ec466a62f1862cb9633893b.camel@redhat.com>
Subject: Re: [WIP PATCH 05/15] drm/dp_mst: Fix payload deallocation on
 hotplugs using malloc refs
From: Lyude Paul <lyude@redhat.com>
To: Daniel Vetter <daniel@ffwll.ch>
Cc: dri-devel@lists.freedesktop.org, nouveau@lists.freedesktop.org,
        intel-gfx@lists.freedesktop.org, amd-gfx@lists.freedesktop.org,
        Dave Airlie <airlied@gmail.com>,
        Harry Wentland <harry.wentland@amd.com>,
        Jerry Zuo <Jerry.Zuo@amd.com>,
        Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Sean Paul <sean@poorly.run>, David Airlie <airlied@linux.ie>,
        linux-kernel@vger.kernel.org
Date: Tue, 18 Dec 2018 17:02:23 -0500
In-Reply-To: <20181214093845.GP21184@phenom.ffwll.local>
References: <20181214012604.13746-1-lyude@redhat.com>
         <20181214012604.13746-6-lyude@redhat.com>
         <20181214093845.GP21184@phenom.ffwll.local>
Organization: Red Hat
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.3 (3.30.3-1.fc29) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 2018-12-14 at 10:38 +0100, Daniel Vetter wrote:
> On Thu, Dec 13, 2018 at 08:25:34PM -0500, Lyude Paul wrote:
> > Up until now, freeing payloads on remote MST hubs that just had ports
> > removed has almost never worked because we've been relying on port
> > validation in order to stop us from accessing ports that have already
> > been freed from memory, but ports which need their payloads released due
> > to being removed will never be a valid part of the topology after
> > they've been removed.
> > 
> > Since we've introduced malloc refs, we can replace all of the validation
> > logic in payload helpers which are used for deallocation with some
> > well-placed malloc krefs. This ensures that regardless of whether or not
> > the ports are still valid and in the topology, any port which has an
> > allocated payload will remain allocated in memory until it's payloads
> > have been removed - finally allowing us to actually release said
> > payloads correctly.
> > 
> > Signed-off-by: Lyude Paul <lyude@redhat.com>
> 
> I think with this we can also remove the int return value (that everyone
> ignored except for some debug output) from drm_dp_update_payload_part1/2.
> Follow-up cleanup patch ofc.
A note as well-I'm not sure we want to remove that yet, it might actually be a
better idea to just teach drivers to actually look at the return values so
they can take action if it fails. Of course, such actions wouldn't involve
actually changing the atomic state that userspace set, but moreso knowing
which parts of updating the payload succeeded or not so if a downstream branch
was disconnected mid-atomic commit we have enough information to know what
steps we need to skip when userspace later unsets the mode on said branch.
> 
> This looks good.
> 
> Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
> > ---
> >  drivers/gpu/drm/drm_dp_mst_topology.c | 54 +++++++++++++++------------
> >  1 file changed, 30 insertions(+), 24 deletions(-)
> > 
> > diff --git a/drivers/gpu/drm/drm_dp_mst_topology.c
> > b/drivers/gpu/drm/drm_dp_mst_topology.c
> > index ae9d019af9f2..93f08bfd2ab3 100644
> > --- a/drivers/gpu/drm/drm_dp_mst_topology.c
> > +++ b/drivers/gpu/drm/drm_dp_mst_topology.c
> > @@ -1989,10 +1989,6 @@ static int drm_dp_payload_send_msg(struct
> > drm_dp_mst_topology_mgr *mgr,
> >  	u8 sinks[DRM_DP_MAX_SDP_STREAMS];
> >  	int i;
> >  
> > -	port = drm_dp_mst_topology_get_port_validated(mgr, port);
> > -	if (!port)
> > -		return -EINVAL;
> > -
> >  	port_num = port->port_num;
> >  	mstb = drm_dp_mst_topology_get_mstb_validated(mgr, port->parent);
> >  	if (!mstb) {
> > @@ -2000,10 +1996,8 @@ static int drm_dp_payload_send_msg(struct
> > drm_dp_mst_topology_mgr *mgr,
> >  							       port->parent,
> >  							       &port_num);
> >  
> > -		if (!mstb) {
> > -			drm_dp_mst_topology_put_port(port);
> > +		if (!mstb)
> >  			return -EINVAL;
> > -		}
> >  	}
> >  
> >  	txmsg = kzalloc(sizeof(*txmsg), GFP_KERNEL);
> > @@ -2032,7 +2026,6 @@ static int drm_dp_payload_send_msg(struct
> > drm_dp_mst_topology_mgr *mgr,
> >  	kfree(txmsg);
> >  fail_put:
> >  	drm_dp_mst_topology_put_mstb(mstb);
> > -	drm_dp_mst_topology_put_port(port);
> >  	return ret;
> >  }
> >  
> > @@ -2137,15 +2130,16 @@ static int drm_dp_destroy_payload_step2(struct
> > drm_dp_mst_topology_mgr *mgr,
> >   */
> >  int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr *mgr)
> >  {
> > -	int i, j;
> > -	int cur_slots = 1;
> >  	struct drm_dp_payload req_payload;
> >  	struct drm_dp_mst_port *port;
> > +	int i, j;
> > +	int cur_slots = 1;
> >  
> >  	mutex_lock(&mgr->payload_lock);
> >  	for (i = 0; i < mgr->max_payloads; i++) {
> >  		struct drm_dp_vcpi *vcpi = mgr->proposed_vcpis[i];
> >  		struct drm_dp_payload *payload = &mgr->payloads[i];
> > +		bool put_port = false;
> >  
> >  		/* solve the current payloads - compare to the hw ones
> >  		   - update the hw view */
> > @@ -2153,12 +2147,20 @@ int drm_dp_update_payload_part1(struct
> > drm_dp_mst_topology_mgr *mgr)
> >  		if (vcpi) {
> >  			port = container_of(vcpi, struct drm_dp_mst_port,
> >  					    vcpi);
> > -			port = drm_dp_mst_topology_get_port_validated(mgr,
> > -								      port);
> > -			if (!port) {
> > -				mutex_unlock(&mgr->payload_lock);
> > -				return -EINVAL;
> > +
> > +			/* Validated ports don't matter if we're releasing
> > +			 * VCPI
> > +			 */
> > +			if (vcpi->num_slots) {
> > +				port = drm_dp_mst_topology_get_port_validated(
> > +				    mgr, port);
> > +				if (!port) {
> > +					mutex_unlock(&mgr->payload_lock);
> > +					return -EINVAL;
> > +				}
> > +				put_port = true;
> >  			}
> > +
> >  			req_payload.num_slots = vcpi->num_slots;
> >  			req_payload.vcpi = vcpi->vcpi;
> >  		} else {
> > @@ -2190,7 +2192,7 @@ int drm_dp_update_payload_part1(struct
> > drm_dp_mst_topology_mgr *mgr)
> >  		}
> >  		cur_slots += req_payload.num_slots;
> >  
> > -		if (port)
> > +		if (put_port)
> >  			drm_dp_mst_topology_put_port(port);
> >  	}
> >  
> > @@ -3005,6 +3007,8 @@ bool drm_dp_mst_allocate_vcpi(struct
> > drm_dp_mst_topology_mgr *mgr,
> >  	DRM_DEBUG_KMS("initing vcpi for pbn=%d slots=%d\n",
> >  		      pbn, port->vcpi.num_slots);
> >  
> > +	/* Keep port allocated until it's payload has been removed */
> > +	drm_dp_mst_get_port_malloc(port);
> >  	drm_dp_mst_topology_put_port(port);
> >  	return true;
> >  out:
> > @@ -3034,11 +3038,12 @@ EXPORT_SYMBOL(drm_dp_mst_get_vcpi_slots);
> >   */
> >  void drm_dp_mst_reset_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr,
> > struct drm_dp_mst_port *port)
> >  {
> > -	port = drm_dp_mst_topology_get_port_validated(mgr, port);
> > -	if (!port)
> > -		return;
> > +	/*
> > +	 * A port with VCPI will remain allocated until it's VCPI is
> > +	 * released, no verified ref needed
> > +	 */
> > +
> >  	port->vcpi.num_slots = 0;
> > -	drm_dp_mst_topology_put_port(port);
> >  }
> >  EXPORT_SYMBOL(drm_dp_mst_reset_vcpi_slots);
> >  
> > @@ -3050,16 +3055,17 @@ EXPORT_SYMBOL(drm_dp_mst_reset_vcpi_slots);
> >  void drm_dp_mst_deallocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
> >  				struct drm_dp_mst_port *port)
> >  {
> > -	port = drm_dp_mst_topology_get_port_validated(mgr, port);
> > -	if (!port)
> > -		return;
> > +	/*
> > +	 * A port with VCPI will remain allocated until it's VCPI is
> > +	 * released, no verified ref needed
> > +	 */
> >  
> >  	drm_dp_mst_put_payload_id(mgr, port->vcpi.vcpi);
> >  	port->vcpi.num_slots = 0;
> >  	port->vcpi.pbn = 0;
> >  	port->vcpi.aligned_pbn = 0;
> >  	port->vcpi.vcpi = 0;
> > -	drm_dp_mst_topology_put_port(port);
> > +	drm_dp_mst_put_port_malloc(port);
> >  }
> >  EXPORT_SYMBOL(drm_dp_mst_deallocate_vcpi);
> >  
> > -- 
> > 2.19.2
> > 
-- 
Cheers,
	Lyude Paul

