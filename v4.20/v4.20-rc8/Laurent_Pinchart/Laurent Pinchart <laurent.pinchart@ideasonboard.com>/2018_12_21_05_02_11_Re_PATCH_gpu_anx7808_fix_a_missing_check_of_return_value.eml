Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:45:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id ACFF3580522;
	Thu, 20 Dec 2018 21:01:23 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 21:01:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AglfgYxEA/vphjK0Vj39kI51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8+9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeoGP+lYoYbyqVQSohulHQmhBvjiyiNViHLswaE2z/gtHR/A0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakUS++10bPIwivFb/NKxDzz8onIchY9rvGMR71wa9bRwlQoGgPBlFqQ?=
 =?us-ascii?q?tJblMC2T1uQRqWSb9+tgVeSzhG4nsQ5xuCSvy9wtiobUmI0a0EvE9SJ/wIkuIt?=
 =?us-ascii?q?23UlR7bsO+HJRMsCGaMpJ7T8U/SG9roCY30qMKtYK/cSQQ1ZgqyQDTZ+aaf4WL?=
 =?us-ascii?q?/h7vTuecLDVgiH57Zb6zmQy+/Va9xuDyTMW4zVJHoylfntXRq3wByRre4dWdRP?=
 =?us-ascii?q?Rn5EeuwzOP2hjT6u5aJUA0krLWK4AuwrEujJofq0fDETHsmEXwkqCWcl8o+u+y?=
 =?us-ascii?q?6+Toernmp5mcOJFoigzmLKgihsiyDf4lPgUAQWSX4/mw2b7/8UHjQbhHjOU6kq?=
 =?us-ascii?q?zDv5DbIcQbqLS5AwhQ0os77xa/DjGm0MkXnHUeL1JKZgiHj473NFHKOfz4Cvm+?=
 =?us-ascii?q?g1Kynzdx3P3GILLhDYvXLnTZk7fuY6x960hCxwo319xf4IhUCr4ZLPLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsx+bnCdZ92Z0EVWOAH6+UK6fSsV6O5uIyLOiAfo4VuDDhK/c74/7i?=
 =?us-ascii?q?l2M2mVgYfaOxx5sYdGi4Huh6I0WeeXfsgs0OEWYWvgUkS+zmkl2CUSNJaHa0UK?=
 =?us-ascii?q?Ix/TU7CIOgDYfeSYGhmr2B3CGnHpJIYmBKEEyDEXDtd4+cQfcDdDqSItN9kjwD?=
 =?us-ascii?q?TbWuUZQh1RGptA/50bZnNPDb+i8DuJLn1dh14fDTlB4o+Tx1CcSdz3+CT2Vukm?=
 =?us-ascii?q?wUQD822bh1oVZhxVebzah4n/tYGMRQ5/xTVAc2L5rcz+1gBND0VQLMZdOJSFeg?=
 =?us-ascii?q?QtW7DjA9VNMxw9kSY0ljH9WulAzM3y2vA7UNjbyEGIQ08r7A33j2P8ty1mzJ1L?=
 =?us-ascii?q?c/gFU8QstAL2umhrVh+AjVAILJl0aZl6OudakH2C7N9WGDzXeBvU1CUQ5wV7nF?=
 =?us-ascii?q?Um4bZkfMsdv54UbCRae0Cbs7KgtB1dKCKqxSZ9L0l1pGWunsNM7eY22rnWewHg?=
 =?us-ascii?q?iHxrWXYYruemUd2jjdCUcenwAS+3aGKRYxBiO7r23CCzxuEErlY1nw/ulmtHO7?=
 =?us-ascii?q?Ukg0whmWb01g0rq1/QIVhfycSv8JwrIIoiAhqy9wHFa82dLWBMGNpw5gfKVafN?=
 =?us-ascii?q?M8701L1WPftwxhIJOgK7puiUIZcwRyp0nuzQl4Cp1ckcg2q3Mn1BB9KaaG31JO?=
 =?us-ascii?q?aTyZ3Yr8NabKKmbv5h+vba3W2lbA0NuN/qcP6fI4q0jsvQ2zF0oi9Wln3MdR03?=
 =?us-ascii?q?eG+prKCw8SW4rrUkkr7xh6u63aYi4l6oLUyH1gK7W7viXD2tIpHuQlzBmgcsxb?=
 =?us-ascii?q?MKOFEg/yDsIbC9KvKOwsh1imcBYEMPpO+64zOsOsb+GG17KzPOZ8gDKminxK4J?=
 =?us-ascii?q?p80k2Q7SV8UPPH35Efz/GewASHTTb8gE69vc/tnYBLeC8dHnC4ySjiH4NRYqxy?=
 =?us-ascii?q?fYAWCWahOcG3x9N+h4LzVH5c7lKsG1QG2MqxcxqIc1P9xRFQ1VgQoXG/mSq4zi?=
 =?us-ascii?q?Z4kjEzoqqEwSzOxf/vdB4GOm5NWWljgk3gIYmyj9AGQkeoaxIlmwei5Ub/36Jb?=
 =?us-ascii?q?vrhwL3HPQUdUeCj7N2NiXbGqtrqBYM5P74kksT5NX+S/YlCaS7j9rAUc0y74G2?=
 =?us-ascii?q?texTY7dyylu5njnhx6jn6dI2h3rHbDZc5wwhLf7sTGRfFNxjoGWDV4iT7PC1m8?=
 =?us-ascii?q?Jdap+s+Yl5XCsuC4TG+hUpxTcS/2zYKPrie75GtqAQGhkPC3gNHoDQ860Srj3d?=
 =?us-ascii?q?lwSSrItAr8YpXs16miMuJoZEhoCEX868pnAI5+lIQwiYoU2XgbgJWV4HUGnX3y?=
 =?us-ascii?q?MdVdxaLxcn4NSSQXzN7S5QjvwFdjIW6Rx4LlSnWdxdNsZ9y7YmMVwC0x9c5LB7?=
 =?us-ascii?q?mP7LxYgyR1uEG3ohzLYfhyhTodzfou6HgHg+AGogYtzyOdAqwMEklcJyDjixOI?=
 =?us-ascii?q?79WmpqVNeGmvaaSw1FZ5nd25ELGCpQRcVGz4e5g4Gy9w895/MEnN0HDo7oHked?=
 =?us-ascii?q?/Qbc8ctxGOkhfAifRVJ4w1lvYQmSVnPmf9t2U/y+EnlRxuwY26vI+fJmp25q25?=
 =?us-ascii?q?BRpYNiDva8MX5zHglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/PEYqkN3SJK3kC19liWAORJE9CgAAXQTU6mIQ2Fhuxyczl?=
 =?us-ascii?q?cUd54C0R51HiphtNzOJoKwfwUmPFqAi0bTc0TYCVLABK4QFa+0fVLcue4/pzHi?=
 =?us-ascii?q?Ff452htRGNJXadZwhSFmEJXUqEB1/4M7mq5NnA9fWYB+WkI/vPZ7WOtfJRV/OS?=
 =?us-ascii?q?yZ2z1Ytm+i6GNt+TMXl6E/07xk1DUGh5G8vHmjUPSC8XlyPXY86Yvhe8/SJ3od?=
 =?us-ascii?q?6l8PT2QwLi/o+PC7pUMdVy9BG6m6aDN+iMhClnLTZUzI8DxXjNyLIHxl4dlzlu?=
 =?us-ascii?q?dyWxEbQHrSPCVr/QlbRNDxEFayJ/Ls9I76Mn0wlJOM7bjM7117Figv40DVdFSU?=
 =?us-ascii?q?LumsWzacMWJGG9MUvNBFyXO7SeOT3L38b3bLugSb1RieVYrQG/tSyHHE/jIDuD?=
 =?us-ascii?q?kSLkVxSuMeFKkSGaMwZSuIC7chZxF2fjSMjqZQG8MN9ylTc226E7hmvWNW4ANj?=
 =?us-ascii?q?hxa0NMoaeW7SNdg/V/HXRO73tlLeaenSaZ4PLVKpIXsfttHyR1mPhW4HU8y7tJ?=
 =?us-ascii?q?8i5EQOZ5lzfVrt5r8BmalbyswzxoUhtD4hJWzNaIv0F/Ebjc8N9NVWuSrzwX6m?=
 =?us-ascii?q?DFLx0XvdZjFpXXuqZbytHViOqnLD5f6d/S4Y0EBs7fKMudLFIgPRfgAznSBgwM?=
 =?us-ascii?q?VzLtPmba0R8O2MqO/2GY+8Bp4qPnn4ADH/oCDAQ4?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAAAmcxxch0O0hNFkDhABBgcGgVEJC?=
 =?us-ascii?q?wGBWoIRJ5gRgg0UjX6JTIFzLRMBhy4iNAkNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJhAQEBAQIBAQIkEwYBATcBBAEJAQEKDgoJFRADDAFHBhMFgx2BeggEA?=
 =?us-ascii?q?aV7gWwzgnYBAQWHLwh5iiqBHIFXP4MlfoRlhXuJQ4dshHGLHgcCgiUEj1QKkVO?=
 =?us-ascii?q?bU4IOTSODPIIbDBd/AQmCQYoYPT4ygQQBAQGOGQEB?=
X-IPAS-Result: =?us-ascii?q?A0AZAAAmcxxch0O0hNFkDhABBgcGgVEJCwGBWoIRJ5gRgg0?=
 =?us-ascii?q?UjX6JTIFzLRMBhy4iNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBA?=
 =?us-ascii?q?QIBAQIkEwYBATcBBAEJAQEKDgoJFRADDAFHBhMFgx2BeggEAaV7gWwzgnYBAQW?=
 =?us-ascii?q?HLwh5iiqBHIFXP4MlfoRlhXuJQ4dshHGLHgcCgiUEj1QKkVObU4IOTSODPIIbD?=
 =?us-ascii?q?Bd/AQmCQYoYPT4ygQQBAQGOGQEB?=
X-IronPort-AV: E=Sophos;i="5.56,380,1539673200"; 
   d="scan'208";a="45912554"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 21:01:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725818AbeLUFBT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 00:01:19 -0500
Received: from perceval.ideasonboard.com ([213.167.242.64]:39722 "EHLO
        perceval.ideasonboard.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725800AbeLUFBT (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 00:01:19 -0500
Received: from avalon.localnet (unknown [212.213.198.112])
        by perceval.ideasonboard.com (Postfix) with ESMTPSA id 78366558;
        Fri, 21 Dec 2018 06:01:15 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=ideasonboard.com;
        s=mail; t=1545368475;
        bh=b/ny2p9pitdlV0AfO232pxMv/D3gBr9SRaVq4Gls2Es=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Y8hd4ECSGVM4dgxnMyXB20Jv7do/jj5L/jm50XfR8XZEG/dQgA5u/F6EBHN/wkGFj
         youXheUzZCuYZDDoKlsoPW/Bxvr27OlJw4mcW2Ei54xoCLYb6A1gzPr2teH3xfaY4y
         RVBIlyvAu+s5yDL12pY61yEjC6A4yDVgtfRPk+tc=
From: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
To: Kangjie Lu <kjlu@umn.edu>
Cc: pakki001@umn.edu, Archit Taneja <architt@codeaurora.org>,
        Andrzej Hajda <a.hajda@samsung.com>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        dri-devel@lists.freedesktop.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] gpu: anx7808: fix a missing check of return value
Date: Fri, 21 Dec 2018 07:02:11 +0200
Message-ID: <3157460.hcpWlpvoCn@avalon>
Organization: Ideas on Board Oy
In-Reply-To: <20181220074116.40546-1-kjlu@umn.edu>
References: <20181220074116.40546-1-kjlu@umn.edu>
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Kangjie,

Thank you for the patch.

On Thursday, 20 December 2018 09:41:16 EET Kangjie Lu wrote:
> Both anx78xx_set_bits() and anx78xx_clear_bits() in the poweron process
> may fail. The fix inserts checks for their return values. If the poweron
> process fails, it calls anx78xx_poweroff().
> 
> Signed-off-by: Kangjie Lu <kjlu@umn.edu>
> ---
>  drivers/gpu/drm/bridge/analogix-anx78xx.c | 26 ++++++++++++++++-------
>  1 file changed, 18 insertions(+), 8 deletions(-)
> 
> diff --git a/drivers/gpu/drm/bridge/analogix-anx78xx.c
> b/drivers/gpu/drm/bridge/analogix-anx78xx.c index
> f8433c93f463..a57104c71739 100644
> --- a/drivers/gpu/drm/bridge/analogix-anx78xx.c
> +++ b/drivers/gpu/drm/bridge/analogix-anx78xx.c
> @@ -610,20 +610,20 @@ static int anx78xx_enable_interrupts(struct anx78xx
> *anx78xx) return 0;
>  }
> 
> -static void anx78xx_poweron(struct anx78xx *anx78xx)
> +static int anx78xx_poweron(struct anx78xx *anx78xx)
>  {
>  	struct anx78xx_platform_data *pdata = &anx78xx->pdata;
> -	int err;
> +	int err = 0;
> 
>  	if (WARN_ON(anx78xx->powered))
> -		return;
> +		return err;

You can return 0 here.

> 
>  	if (pdata->dvdd10) {
>  		err = regulator_enable(pdata->dvdd10);
>  		if (err) {
>  			DRM_ERROR("Failed to enable DVDD10 regulator: %d\n",
>  				  err);
> -			return;
> +			return err;
>  		}
> 
>  		usleep_range(1000, 2000);
> @@ -638,12 +638,18 @@ static void anx78xx_poweron(struct anx78xx *anx78xx)
>  	gpiod_set_value_cansleep(pdata->gpiod_reset, 0);
> 
>  	/* Power on registers module */
> -	anx78xx_set_bits(anx78xx->map[I2C_IDX_TX_P2], SP_POWERDOWN_CTRL_REG,
> +	err = anx78xx_set_bits(anx78xx->map[I2C_IDX_TX_P2], SP_POWERDOWN_CTRL_REG,
> SP_HDCP_PD | SP_AUDIO_PD | SP_VIDEO_PD | SP_LINK_PD);
> -	anx78xx_clear_bits(anx78xx->map[I2C_IDX_TX_P2], SP_POWERDOWN_CTRL_REG,
> +	err |= anx78xx_clear_bits(anx78xx->map[I2C_IDX_TX_P2],
> SP_POWERDOWN_CTRL_REG, SP_REGISTER_PD | SP_TOTAL_PD);

If both functions fail with a different error code, this may result in a 
meaningless error being returned. One option is to do

	err = anx78xx_set_bits(...);
	if (!err)
		err = anx78xx_clear_bits(...);

The construct gets quickly ugly though, so I sometimes define register 
accessors as taking an int * for the error code instead of returning it.

void write(..., int *status)
{
	if (*status)
		return;

	*status = real_write(...);
}

and then use it as

	int status = 0;

	write(..., &status);
	write(..., &status);
	write(..., &status);
	write(..., &status);
	write(..., &status);

	return status;

This may be overkill here.

> +	if (err) {
> +		anx78xx_poweroff(anx78xx);
> +		return err;
> +	}
> 
>  	anx78xx->powered = true;
> +
> +	return err;

And return 0 here too, removing the need to initialize the err variable to 0.

>  }
> 
>  static void anx78xx_poweroff(struct anx78xx *anx78xx)
> @@ -1144,7 +1150,9 @@ static irqreturn_t anx78xx_hpd_threaded_handler(int
> irq, void *data) mutex_lock(&anx78xx->lock);
> 
>  	/* Cable is pulled, power on the chip */
> -	anx78xx_poweron(anx78xx);
> +	err = anx78xx_poweron(anx78xx);
> +	if (err)
> +		DRM_ERROR("Failed to power on the chip: %d\n", err);

Wouldn't it be better to move the error message to the an78xx_poweron() 
function ? That way it would also be printed in the probe() path.

>  	err = anx78xx_enable_interrupts(anx78xx);
>  	if (err)
> @@ -1379,7 +1387,9 @@ static int anx78xx_i2c_probe(struct i2c_client
> *client, }
> 
>  	/* Look for supported chip ID */
> -	anx78xx_poweron(anx78xx);
> +	err = anx78xx_poweron(anx78xx);
> +	if (err)
> +		goto err_poweroff;

If poweron fails, doesn't it clean up after itself ? Do you need to call 
poweroff here ?

>  	err = regmap_read(anx78xx->map[I2C_IDX_TX_P2], SP_DEVICE_IDL_REG,
>  			  &idl);

-- 
Regards,

Laurent Pinchart



