Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:50:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 15BC65804D6;
	Fri, 21 Dec 2018 04:53:30 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 04:53:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxV1zWhAIhD9GuvKKSoKQUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP74osmwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVoAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAfIAPeZbqIn9o0EBrBujDgSxA+Pv0D5IhmTx3a0kzu8sFgfG0xcnH9IUsX?=
 =?us-ascii?q?TUt9L1NLkJXOCu0anI1ivMY+lK1jf67YjFaxYsquyPU7Joacfd11UjGgffglmN?=
 =?us-ascii?q?p4HpISmZ2vkOvmSH9eZtVOCih3Y6pwx1ojWj3Nogh4fJi44P1FzI6zl1zJwrKd?=
 =?us-ascii?q?C4R0N2Z8OvHoFKuCGALYR2R9svQ2F2tyY+zb0LoYC7fCcUx5Q93RLfaOKIc5KO?=
 =?us-ascii?q?4h39UOadOzB4hGhqeL6nhhay91avyvHkW8WqzFpHqjBJnsTCu3wTzRDf98uKRu?=
 =?us-ascii?q?dn8kqg2zuDzwXT5ftFIUAwm6rbMZkhwrsom5oXsETDGDL2mUrvgK+VaEok4O6o?=
 =?us-ascii?q?5PrjYrn/oZ+dOYl0hR/kMqk1hMy/Dvo3MhIUU2iY5+u8zrvj8lP9QLlQif02iK?=
 =?us-ascii?q?bZvIjAJcsHvq65HxNV0oE75ha7Djem08oXkWMILVJYYx+Hi4npO1fTIPH3F/u/?=
 =?us-ascii?q?glKskCt1yPDCJLHuHpLNLn3bmrf7Ybl981JcyBY0zd1H55JbELABIO7pVU/2rt?=
 =?us-ascii?q?DYDgI5PBayw+boE9h90oIeWWSSAq6WKq/SsFmI5v4xLOmIfoMapDH9K/097f70?=
 =?us-ascii?q?kXA5gUMdfbWu3ZYPcn+4BfRmI0KaYXb2mNcOC2UKsxE6TOzrjl2CTDFSa2yzX6?=
 =?us-ascii?q?I6+jE0FoamAZ3fSYCqhbyLxD27EYFOZmBaFlCMFm/ld4aeVPcKci6SJs5hnSYC?=
 =?us-ascii?q?VbiuUIIh0RCutAnny7toNObU+ysYtY7929hx/eHciRYy9TlsBcSHz26NV310nn?=
 =?us-ascii?q?8PRzIuwa9wu1J9xUmZ3ah4mfNYE8dT6O1PUgs9MZ7czOl6C9TpVwLFf9eJTkum?=
 =?us-ascii?q?Q9q8DTEwSNIx38EBY0JnF9q+iRDD2jKgA6UJmLyTGJw07qXc0mDsKMln1XbJyr?=
 =?us-ascii?q?Mtj1k8TctJLm2pmKh/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejCagmMgtEzs6CNqtKa93zgVVaXvvjP87eY2awm2e2Ch?=
 =?us-ascii?q?aF3beMbIvse2UA0yTREkkEkwYP/XmYMQgyHDuuo2XbDDZ2D1Lgf1vs8fViqHO8?=
 =?us-ascii?q?VkI71QWKYFNu1rWr+h8Zn+eTS+4O0b0evichqDJ0HEim0tLSCtqAoRdhfapGbd?=
 =?us-ascii?q?M85ldHyXzWtwhnMpO8KKBig0YUcx5rsEP2yxV3FoJAnNAqrXM31gZ9NbiU0VJB?=
 =?us-ascii?q?dzyC25DwNabaKm3z/BCpdq7X1UvS0NeQ+qcT9vs4r0/vsx2uFkon639nycVa02?=
 =?us-ascii?q?OA5pXWCwofSYjxUkcr+BdgvbHVfy4965nS1XJyK6m0sybO1M4zC+sh1xmvYc1f?=
 =?us-ascii?q?MKSCFALpF80aBs6uKPElmlSzbxIEOvxS+7AwP8+8a/SG36urNv56nD26lWRH/J?=
 =?us-ascii?q?x90kWU+it8S+7ExZYEz+uD3guaUTfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14G2tWmeQCRb1z+2g1cz18XrmakmSu7zj?=
 =?us-ascii?q?x0lS8mrqyE0SzKwuTicgcHO2FRSGlji1fsPZa7j9QAUEe0aAgpkQOv5VzmyKhD?=
 =?us-ascii?q?uKR/M27TTF9IfifsKGFuSKmwtruEY8NU7JMosCNXUPmzYFyAS779pQca3D3nH2?=
 =?us-ascii?q?dE2D87cDSqsI3jnxNmkGKdMGpzrH3BdMFz3xjf5cbQRf5M3jUcQil4hiLaBly9?=
 =?us-ascii?q?P9mv4NWVmI3PsuG4V2K9SJJTdTPnwp+HtCu+/WdqGwGwn+ivmt37Fgg3ySr719?=
 =?us-ascii?q?hpVSrSthr9bJfk17+mMe15ZElnH0Hz69B1GoxlloswhZcQ2WUVh5mP/HoHl3vz?=
 =?us-ascii?q?Pstf2a7kcHUNQjsLycbP4Af5wE1jMm6Jx4XhW3WBxcthYsO2Y2IM1SI78sBKE7?=
 =?us-ascii?q?yU7L1fkCtxo1q4qx/RYPdnkjccz/su9GAVg+UTtAUxySWdB6gYHVNEMiz0ixSI?=
 =?us-ascii?q?89e+ob1Ma2m1driw0Fd+kcqlDLGfuQxcXHf5epE/HS5/9Ml/MVTM0GHt5YHgYt?=
 =?us-ascii?q?XfcdUTthiMmRfak+dVMI4xluYNhSd/O2Lyp3glxPAgjRB0wZG2pouHK3hu/KKk?=
 =?us-ascii?q?BB5XLCb1atgX+jHsi6Zeg8mX05quHpVnBjUEQp/oQei0HzIVsPTtLxyOHyEkqn?=
 =?us-ascii?q?eHBbrfGheS6Udhr3LSCpCrKmuYJH8DwdV5QxmdIkNfjRsQXDU7mJ45Cw+ryNbg?=
 =?us-ascii?q?cEd/+jAe+Fr4pgFQxeJvMhn1Sn3fqxuwajcoVJifKwJb7gFc6EfUMsye7eNzEz?=
 =?us-ascii?q?tb/p27qwyNJXKUZx5VDWESQUGEA1HjPr+z5djP6eSYB+y+L+fQbrWKs+BRS/CI?=
 =?us-ascii?q?xZe32It84zmMLtmPPmVlD/AjwEVDQGt2G97HlDQPUSAXkyPNYtWfpBe9/C13s8?=
 =?us-ascii?q?++/O7qWALp+YuAFb9SPc9z9BCxhKeJL/SQizphKTZEypMMwmfFyKQe3F4XkS1h?=
 =?us-ascii?q?ayOhHqgAtSHTSqLdgatXDx8dayNuO8pE9aM83g9ROcHFjtP5zKJ3jvkwC11dT1?=
 =?us-ascii?q?zuhtmpZdAWI2G6LF7GBFyENLKDJT3KxcH4eaK9Sb1Kg+VSuB29ojKbE07lPjSe?=
 =?us-ascii?q?mDjlTRGvMedQjC6FOBxSop2ychFoCTurcNWzbhy9Lc8yiDgewqM9jXCMMnQTdX?=
 =?us-ascii?q?B1cFtIhrmR6z5Ix/t4BmpN52ZkKu/CnDyWvMfCLZNDl/poBSB9hqpw52470LxL?=
 =?us-ascii?q?pHVCTvtvmTDVsPZ1vkqr1OKIz2w0A1J1tj9XidfT7g1ZMqLD+8wYVA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAADp4Bxch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBaLfIIhl0uBcy0TAYcvIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvgjoignYCJFIGCQI+EgNbEgWDHYICBAGnBzOKNId+hEEXgUA/jwMCj18Bk?=
 =?us-ascii?q?WUJkV0MGIoGh1gBLIknkg+CDjMaCBsVgyeCJxeOHz4ygQUBAY4PAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAADp4Bxch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBaLfIIhl0uBcy0TAYcvIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjoignYCJ?=
 =?us-ascii?q?FIGCQI+EgNbEgWDHYICBAGnBzOKNId+hEEXgUA/jwMCj18BkWUJkV0MGIoGh1g?=
 =?us-ascii?q?BLIknkg+CDjMaCBsVgyeCJxeOHz4ygQUBAY4PAQE?=
X-IronPort-AV: E=Sophos;i="5.56,381,1539673200"; 
   d="scan'208";a="67861063"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 21 Dec 2018 04:53:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390440AbeLUMxZ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 07:53:25 -0500
Received: from mx2.suse.de ([195.135.220.15]:40082 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S2388253AbeLUMxZ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 07:53:25 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 92E18AE72;
        Fri, 21 Dec 2018 12:53:22 +0000 (UTC)
From: Nikolay Borisov <nborisov@suse.com>
To: linux-mm@kvack.org, akpm@linux-foundation.org
Cc: linux-kernel@vger.kernel.org, linux-afs@lists.infradead.org,
        linux-fsdevel@vger.kernel.org, Nikolay Borisov <nborisov@suse.com>
Subject: [PATCH] mm: Define VM_(MAX|MIN)_READAHEAD via sizes.h constants
Date: Fri, 21 Dec 2018 14:53:14 +0200
Message-Id: <20181221125314.5177-1-nborisov@suse.com>
X-Mailer: git-send-email 2.17.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

All users of the aformentioned macros convert them to kbytes by
multplying. Instead, directly define the macros via the aptly named
SZ_16K/SZ_128K ones. Also remove the now redundant comments explaining
that VM_* are defined in kbytes it's obvious. No functional changes.

Signed-off-by: Nikolay Borisov <nborisov@suse.com>
---

I guess it makes sense for this to land via Andrew's mmotm tree?

 block/blk-core.c   | 3 +--
 fs/9p/vfs_super.c  | 2 +-
 fs/afs/super.c     | 2 +-
 fs/btrfs/disk-io.c | 2 +-
 fs/fuse/inode.c    | 2 +-
 include/linux/mm.h | 5 +++--
 6 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/block/blk-core.c b/block/blk-core.c
index deb56932f8c4..d28b2eeec07e 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1031,8 +1031,7 @@ struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id,
 	if (!q->stats)
 		goto fail_stats;
 
-	q->backing_dev_info->ra_pages =
-			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;
+	q->backing_dev_info->ra_pages = VM_MAX_READAHEAD / PAGE_SIZE;
 	q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK;
 	q->backing_dev_info->name = "block";
 	q->node = node_id;
diff --git a/fs/9p/vfs_super.c b/fs/9p/vfs_super.c
index 48ce50484e80..5c9f757410ae 100644
--- a/fs/9p/vfs_super.c
+++ b/fs/9p/vfs_super.c
@@ -92,7 +92,7 @@ v9fs_fill_super(struct super_block *sb, struct v9fs_session_info *v9ses,
 		return ret;
 
 	if (v9ses->cache)
-		sb->s_bdi->ra_pages = (VM_MAX_READAHEAD * 1024)/PAGE_SIZE;
+		sb->s_bdi->ra_pages = VM_MAX_READAHEAD / PAGE_SIZE;
 
 	sb->s_flags |= SB_ACTIVE | SB_DIRSYNC;
 	if (!v9ses->cache)
diff --git a/fs/afs/super.c b/fs/afs/super.c
index dcd07fe99871..d1f3af74481a 100644
--- a/fs/afs/super.c
+++ b/fs/afs/super.c
@@ -399,7 +399,7 @@ static int afs_fill_super(struct super_block *sb,
 	ret = super_setup_bdi(sb);
 	if (ret)
 		return ret;
-	sb->s_bdi->ra_pages	= VM_MAX_READAHEAD * 1024 / PAGE_SIZE;
+	sb->s_bdi->ra_pages	= VM_MAX_READAHEAD / PAGE_SIZE;
 
 	/* allocate the root inode and dentry */
 	if (as->dyn_root) {
diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c
index 6d776717d8b3..d84e7283d24b 100644
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -2900,7 +2900,7 @@ int open_ctree(struct super_block *sb,
 	sb->s_bdi->congested_fn = btrfs_congested_fn;
 	sb->s_bdi->congested_data = fs_info;
 	sb->s_bdi->capabilities |= BDI_CAP_CGROUP_WRITEBACK;
-	sb->s_bdi->ra_pages = VM_MAX_READAHEAD * SZ_1K / PAGE_SIZE;
+	sb->s_bdi->ra_pages = VM_MAX_READAHEAD / PAGE_SIZE;
 	sb->s_bdi->ra_pages *= btrfs_super_num_devices(disk_super);
 	sb->s_bdi->ra_pages = max(sb->s_bdi->ra_pages, SZ_4M / PAGE_SIZE);
 
diff --git a/fs/fuse/inode.c b/fs/fuse/inode.c
index 568abed20eb2..25766e9035b1 100644
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@ -1009,7 +1009,7 @@ static int fuse_bdi_init(struct fuse_conn *fc, struct super_block *sb)
 	if (err)
 		return err;
 
-	sb->s_bdi->ra_pages = (VM_MAX_READAHEAD * 1024) / PAGE_SIZE;
+	sb->s_bdi->ra_pages = VM_MAX_READAHEAD / PAGE_SIZE;
 	/* fuse does it's own writeback accounting */
 	sb->s_bdi->capabilities = BDI_CAP_NO_ACCT_WB | BDI_CAP_STRICTLIMIT;
 
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 5411de93a363..e2085eaceae9 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -26,6 +26,7 @@
 #include <linux/page_ref.h>
 #include <linux/memremap.h>
 #include <linux/overflow.h>
+#include <linux/sizes.h>
 
 struct mempolicy;
 struct anon_vma;
@@ -2396,8 +2397,8 @@ int __must_check write_one_page(struct page *page);
 void task_dirty_inc(struct task_struct *tsk);
 
 /* readahead.c */
-#define VM_MAX_READAHEAD	128	/* kbytes */
-#define VM_MIN_READAHEAD	16	/* kbytes (includes current page) */
+#define VM_MAX_READAHEAD	SZ_128K
+#define VM_MIN_READAHEAD	SZ_16K	/* includes current page */
 
 int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
 			pgoff_t offset, unsigned long nr_to_read);
-- 
2.17.1

