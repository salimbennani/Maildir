Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:46:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0C0775805FC;
	Mon, 17 Dec 2018 08:31:54 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 08:31:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A98OkzhUEK88TiadcdWg8QRwc98DV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhKHvKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoCy?=
 =?us-ascii?q?YZYPAeQfM+hXrYf9qEcJoxSxCgesH/vvxz1Ti3/q36A3yfgtHBva0AEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe240K3IwivMbvxM3zfy9ZbHcgo8qv+CQLJxcdbeyUoyHA7ClFqQ?=
 =?us-ascii?q?rZLqPjyP2eQLrmeU8fBgWfivi2I9tg5xvziuydsvioTSgoIVy1bE9Th2wYovJN?=
 =?us-ascii?q?24TlJ7bsCgEJdKqy6aMI52T9okTmp1tig6zbgGtoS6fCgM0JknxADQa+aBc4eW?=
 =?us-ascii?q?5hLvTuGRIS13hH9jZbmxhA6y/FC+xuHgUsS4yktGoyRbntXWq3wA1ADf5tKGR/?=
 =?us-ascii?q?Z/5kutxDiC2g/J5u1ZL005mrDXJ4Mvz7MxjJYfrFrPEy7wlU7rlqGZbF8k9fKt?=
 =?us-ascii?q?6+n/YrXpuJucN4hshwHgPaQhhNa/Df47MgcQRWib//qz1Ln58U3+WrVKgeU6kq?=
 =?us-ascii?q?jfsJ/EOcQWvrC1DxNR34o59hqyASmq3M4FkXQEMF5JYhOKgorxN1HLOv/4DPO/?=
 =?us-ascii?q?g1q2kDdswvDLJrnhApTLLnjen7btZLV95FBGyAo1099f44tYCrYPIfL1REDxrs?=
 =?us-ascii?q?fVDgE2MwOq2ebrEtZ92Z0EWWKJHKCZNLnesViS5uIgO+WMfpMauC7hK/g54P7j?=
 =?us-ascii?q?lXs5mV4efaa3x5cWZ224E+9iI0WYZ3rsn9gAHX0Lvgo4UOzlllmCXSRPaHa1Wq?=
 =?us-ascii?q?I2/is7B56+DYffWoCth6SM3CehEZ1XemBJEFeMHW3od4WZQfgMbi2SL9RlkjwF?=
 =?us-ascii?q?U7ihVoAg2QuvtA/817poMO7U9jcEupLk0dh///fTmg0q9TxoE8Sd1HmAT2Nznm?=
 =?us-ascii?q?wWXTM236d/oUp7yleEyqV4h/1YFdpO5/JGSAs6NJjcz/BkBND2QA7OYtCJSFO+?=
 =?us-ascii?q?SNW8HT4xVs4xw8MJY0tlAdqilRDD3y2pA7MPjbyEHp40/7nY33jwIcZ91nnH2L?=
 =?us-ascii?q?Mgj1kgXstAK2mmirRj+AjUAo7Di1+ZmLqydaQAwC7N83+OzWmUs0FeSgJwVaTF?=
 =?us-ascii?q?UmoZZkvZttn54kLCT7mzCbUoKAdByMiCKrdUZd3tl1lJWPDjONHGaWKrh2iwHQ?=
 =?us-ascii?q?qIxq+LbIfyZmoSxjvdB1YenwAT53mGMxM+CTmno27ZCDxuFlfvY0f3/Ol6qXO7?=
 =?us-ascii?q?SFI0zg6QY01g0bq15gAahfiGR/wP2bIEvT8rqy9oE1alw9LWF92AqhJ8c6pGf9?=
 =?us-ascii?q?My/k1L1WLDuAx7JZyvMaZii0UacwR2uUPuyhp2Bp9BkcgssHMl0g5yJbiE31NG?=
 =?us-ascii?q?cjOSxYrwNaHPKmnu4BCvbLbb2k3f0NaT/acP9PQ4qlX5sAG1DEYi9G9n091U03?=
 =?us-ascii?q?ua6ZXHFw4SUZP3UkYq+Bl2vbDaYi8h54zK0X1gK7W7sjjH29gxHusq1g6gf8tD?=
 =?us-ascii?q?MKODDAL9CckaCNahKeM0m1mldAkLPP1P+6EuOcOmdPyG2LCwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3K/yCj5HoJeerd+?=
 =?us-ascii?q?fIcLCWi0Jc23yc5zh5rsW35e6V6iCEkK2M6veRqOcVP92Rdc2lgQoXyigSG41S?=
 =?us-ascii?q?B7kyk1rqqD2yzD2/7idBsbNWFRXmltkFDsLZKyj98ERkiobhElmwe/6kb+2qdU?=
 =?us-ascii?q?ur5/L27VQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5T5nhx2kmKcIGxorHrEf8F93hPf5N3aRf5M0TsKXih4iT/LBlei?=
 =?us-ascii?q?O9ml58mbl5DGsuqmTWKuSoVTcTX3zYOHrCa753dlAQe8n/Cwnd3rCxM63jX419?=
 =?us-ascii?q?lpVCXIqgjzYo/w2qS+MOJneFRoBVDm58p7HIF+jpU/hJUK1XcGgZWV+GINkX3v?=
 =?us-ascii?q?PtVDxaL+cH0NSCYLwtHP5wjpwk9jLnOPx4/iUnWdw81hZ8S1Y28M2yI96dxKB7?=
 =?us-ascii?q?mQ7LBegSR1pV+4pxrLYfdhhjcd1ecu6HkCjuEKogUtzz+RArAPHUZCOyzsmA+F?=
 =?us-ascii?q?79S/rKVReWaufqK81Et4ndC9Er6CphtQV2r+epcnBSVw9NlwMErQ0H3v7YHpYN?=
 =?us-ascii?q?zQbdMQthKOiRvBgfZaKIktlvUUnypoInzyvWcqy+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQPK0FzISsO7rNgeUHz06t3?=
 =?us-ascii?q?ebAqHfHQ6E5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60bjpRRWzeJoMwT/Xn3bpAe1cTo0TJmfLBxL7gBN/UvVMMqe7v5tEC?=
 =?us-ascii?q?Fc5JGusAuNKmmDbQRSEW4JQlCEB0zkPrS259nP6e2YCfSlL/fUfbWCs+9eV+qL?=
 =?us-ascii?q?xZKy1Itp5S2MO96LPnljCf07x0VCUWp4G8TfhzUAVSgXmzjRYM6coRe24jd3od?=
 =?us-ascii?q?yn8PT3RALv4pOCCrtVMdVy4hC2nL2MN+iKiCZiLjZY0JwMyGTMyLge2l4Sli5v?=
 =?us-ascii?q?eyOsEbQGqS7CUqbQlrVLAB4cbiN5LNFI4L4k3glRJc7bjcv41r5mgf40CFdFVl?=
 =?us-ascii?q?3hltuqZcwQJGG9O03IBFyWNLSdPjDLx8D3YaWhSbxflulUthuwuSqFHE/nJDiM?=
 =?us-ascii?q?iz7pVxW3O+FWkC6bJABeuJ26cht1E2fjUcnpagelP953lzE2xbw0i2jONW4dNz?=
 =?us-ascii?q?h8bkxMoqeR7SNenvVwBWhB4mB5IumDniaT9/PYJYoOsft3HiR0kPpX4Gg7y7tQ?=
 =?us-ascii?q?9i1LWOZ5lzfSrtFwpVGrie2PyjthUBpTpTdHnoOLvUN+OarH8plMQ2rL/BUI7W?=
 =?us-ascii?q?+IERQFu8NlCsHzu6BX0tXOlLj8KDFH89LV+8sTH8nVKMKdP3onPhrkAzrUDAoD?=
 =?us-ascii?q?TT62OmDTnU1dkPeO9nKLqpg2sITjmJ0LSuwTaFtgXMkTBE1oGJQgZt9ITygjmr?=
 =?us-ascii?q?2axoZc/3OwpRTVbMZXpJbKUrSVG/q5bH62l7RLLzgSxrr4aKQaLJH+0koqPlZg?=
 =?us-ascii?q?kYvJG2LUXNZQsiNmcwk4qVlM9344SXc8jRHLcASotVYXGO69mBI7kENSfPUm93?=
 =?us-ascii?q?+46lM6NlPMqCYq1kl3lcj0ijO5dD/3Mbf2XIdKBi6yvE80ZMCoCz1pZBG/yBQ3?=
 =?us-ascii?q?fAzPQKhc2v45LThm?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAACezhdch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBgmmBAieDfJQQKYFkFJdEFIFfFBgLCAGHViI?=
 =?us-ascii?q?1CA0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIBAgMBAiAEUgYJAQEKGAICJ?=
 =?us-ascii?q?gICA1QGARIFgx0BggAFCqd4fDOELQGFbQWBC4dHg2x6gRyBEYIUfoRpgyCCVwK?=
 =?us-ascii?q?JQoF0hBdHN4U9ixEHAoIohGWKTRiBXY91gwqGMoEFg3GLMoFIA4IJMxojgzyCJ?=
 =?us-ascii?q?xcSiEyFYB4BATEBAYEDAQGNbwEB?=
X-IPAS-Result: =?us-ascii?q?A0ADAACezhdch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBgmmBAieDfJQQKYFkFJdEFIFfFBgLCAGHViI1CA0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQoLCQgpIwyCNiQBgmIBAgMBAiAEUgYJAQEKGAICJgICA1QGARIFgx0?=
 =?us-ascii?q?BggAFCqd4fDOELQGFbQWBC4dHg2x6gRyBEYIUfoRpgyCCVwKJQoF0hBdHN4U9i?=
 =?us-ascii?q?xEHAoIohGWKTRiBXY91gwqGMoEFg3GLMoFIA4IJMxojgzyCJxcSiEyFYB4BATE?=
 =?us-ascii?q?BAYEDAQGNbwEB?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="45300259"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 08:31:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388191AbeLQQbu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 11:31:50 -0500
Received: from mga18.intel.com ([134.134.136.126]:45195 "EHLO mga18.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2387698AbeLQQbt (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 11:31:49 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
  by orsmga106.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 08:31:48 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="111088182"
Received: from ahduyck-desk1.jf.intel.com ([10.7.198.76])
  by orsmga003.jf.intel.com with ESMTP; 17 Dec 2018 08:31:48 -0800
Message-ID: <96fc96dc7c7856a1f415417bf287936071c32f4d.camel@linux.intel.com>
Subject: Re: [driver-core PATCH v9 2/9] device core: Consolidate locking and
 unlocking of parent and device
From: Alexander Duyck <alexander.h.duyck@linux.intel.com>
To: "Rafael J. Wysocki" <rafael@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        "Luis R. Rodriguez" <mcgrof@kernel.org>,
        "linux-nvdimm@lists.01.org" <linux-nvdimm@lists.01.org>,
        Tejun Heo <tj@kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux PM <linux-pm@vger.kernel.org>,
        Lai Jiangshan <jiangshanlai@gmail.com>,
        Len Brown <len.brown@intel.com>, Pavel Machek <pavel@ucw.cz>,
        zwisler@kernel.org, Dan Williams <dan.j.williams@intel.com>,
        dave.jiang@intel.com, bvanassche@acm.org
Date: Mon, 17 Dec 2018 08:31:46 -0800
In-Reply-To: <CAJZ5v0it33gOgjR8KUqsGtykh7UovZ5MUbJeEavHDa2uQSXM0g@mail.gmail.com>
References: <154466182249.9126.3905559325944768059.stgit@ahduyck-desk1.jf.intel.com>
         <154466190393.9126.148371211828405339.stgit@ahduyck-desk1.jf.intel.com>
         <CAJZ5v0it33gOgjR8KUqsGtykh7UovZ5MUbJeEavHDa2uQSXM0g@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
X-Mailer: Evolution 3.28.5 (3.28.5-2.fc28) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, 2018-12-14 at 11:40 +0100, Rafael J. Wysocki wrote:
>  somOn Thu, Dec 13, 2018 at 1:45 AM Alexander Duyck
> <alexander.h.duyck@linux.intel.com> wrote:
> > 
> > Try to consolidate all of the locking and unlocking of both the parent and
> > device when attaching or removing a driver from a given device.
> > 
> > To do that I first consolidated the lock pattern into two functions
> > __device_driver_lock and __device_driver_unlock. After doing that I then
> > created functions specific to attaching and detaching the driver while
> > acquiring these locks. By doing this I was able to reduce the number of
> > spots where we touch need_parent_lock from 12 down to 4.
> > 
> > This patch should produce no functional changes, it is meant to be a code
> > clean-up/consolidation only.
> > 
> > Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
> > Reviewed-by: Bart Van Assche <bvanassche@acm.org>
> > Reviewed-by: Dan Williams <dan.j.williams@intel.com>
> > Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
> > Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
> > ---
> >  drivers/base/base.h |    2 +
> >  drivers/base/bus.c  |   23 ++----------
> >  drivers/base/dd.c   |   95 ++++++++++++++++++++++++++++++++++++++++-----------
> >  3 files changed, 81 insertions(+), 39 deletions(-)
> > 
> > diff --git a/drivers/base/base.h b/drivers/base/base.h
> > index 7a419a7a6235..3f22ebd6117a 100644
> > --- a/drivers/base/base.h
> > +++ b/drivers/base/base.h
> > @@ -124,6 +124,8 @@ extern int driver_add_groups(struct device_driver *drv,
> >                              const struct attribute_group **groups);
> >  extern void driver_remove_groups(struct device_driver *drv,
> >                                  const struct attribute_group **groups);
> > +int device_driver_attach(struct device_driver *drv, struct device *dev);
> > +void device_driver_detach(struct device *dev);
> > 
> >  extern char *make_class_name(const char *name, struct kobject *kobj);
> > 
> > diff --git a/drivers/base/bus.c b/drivers/base/bus.c
> > index b886b15cb53b..74054481007d 100644
> > --- a/drivers/base/bus.c
> > +++ b/drivers/base/bus.c
> > @@ -184,11 +184,7 @@ static ssize_t unbind_store(struct device_driver *drv, const char *buf,
> > 
> >         dev = bus_find_device_by_name(bus, NULL, buf);
> >         if (dev && dev->driver == drv) {
> > -               if (dev->parent && dev->bus->need_parent_lock)
> > -                       device_lock(dev->parent);
> > -               device_release_driver(dev);
> > -               if (dev->parent && dev->bus->need_parent_lock)
> > -                       device_unlock(dev->parent);
> > +               device_driver_detach(dev);
> >                 err = count;
> >         }
> >         put_device(dev);
> > @@ -211,13 +207,7 @@ static ssize_t bind_store(struct device_driver *drv, const char *buf,
> > 
> >         dev = bus_find_device_by_name(bus, NULL, buf);
> >         if (dev && dev->driver == NULL && driver_match_device(drv, dev)) {
> > -               if (dev->parent && bus->need_parent_lock)
> > -                       device_lock(dev->parent);
> > -               device_lock(dev);
> > -               err = driver_probe_device(drv, dev);
> > -               device_unlock(dev);
> > -               if (dev->parent && bus->need_parent_lock)
> > -                       device_unlock(dev->parent);
> > +               err = device_driver_attach(drv, dev);
> > 
> >                 if (err > 0) {
> >                         /* success */
> > @@ -771,13 +761,8 @@ EXPORT_SYMBOL_GPL(bus_rescan_devices);
> >   */
> >  int device_reprobe(struct device *dev)
> >  {
> > -       if (dev->driver) {
> > -               if (dev->parent && dev->bus->need_parent_lock)
> > -                       device_lock(dev->parent);
> > -               device_release_driver(dev);
> > -               if (dev->parent && dev->bus->need_parent_lock)
> > -                       device_unlock(dev->parent);
> > -       }
> > +       if (dev->driver)
> > +               device_driver_detach(dev);
> >         return bus_rescan_devices_helper(dev, NULL);
> >  }
> >  EXPORT_SYMBOL_GPL(device_reprobe);
> > diff --git a/drivers/base/dd.c b/drivers/base/dd.c
> > index 74c194ac99df..f07c16277ed9 100644
> > --- a/drivers/base/dd.c
> > +++ b/drivers/base/dd.c
> > @@ -867,6 +867,64 @@ void device_initial_probe(struct device *dev)
> >         __device_attach(dev, true);
> >  }
> > 
> > +/*
> > + * __device_driver_lock - acquire locks needed to manipulate dev->drv
> > + * @dev: Device we will update driver info for
> > + * @parent: Parent device. Needed if the bus requires parent lock
> > + *
> > + * This function will take the required locks for manipulating dev->drv.
> > + * Normally this will just be the @dev lock, but when called for a USB
> > + * interface, @parent lock will be held as well.
> > + */
> > +static void __device_driver_lock(struct device *dev, struct device *parent)
> > +{
> > +       if (parent && dev->bus->need_parent_lock)
> > +               device_lock(parent);
> > +       device_lock(dev);
> > +}
> > +
> > +/*
> > + * __device_driver_unlock - release locks needed to manipulate dev->drv
> > + * @dev: Device we will update driver info for
> > + * @parent: Parent device. Needed if the bus requires parent lock
> > + *
> > + * This function will release the required locks for manipulating dev->drv.
> > + * Normally this will just be the the @dev lock, but when called for a
> > + * USB interface, @parent lock will be released as well.
> > + */
> > +static void __device_driver_unlock(struct device *dev, struct device *parent)
> > +{
> > +       device_unlock(dev);
> > +       if (parent && dev->bus->need_parent_lock)
> > +               device_unlock(parent);
> > +}
> > +
> > +/**
> > + * device_driver_attach - attach a specific driver to a specific device
> > + * @drv: Driver to attach
> > + * @dev: Device to attach it to
> > + *
> > + * Manually attach driver to a device. Will acquire both @dev lock and
> > + * @dev->parent lock if needed.
> > + */
> > +int device_driver_attach(struct device_driver *drv, struct device *dev)
> > +{
> > +       int ret = 0;
> > +
> > +       __device_driver_lock(dev, dev->parent);
> > +
> > +       /*
> > +        * If device has been removed or someone has already successfully
> > +        * bound a driver before us just skip the driver probe call.
> > +        */
> > +       if (!dev->dead && !dev->driver)
> > +               ret = driver_probe_device(drv, dev);
> > +
> > +       __device_driver_unlock(dev, dev->parent);
> > +
> > +       return ret;
> > +}
> > +
> >  static int __driver_attach(struct device *dev, void *data)
> >  {
> >         struct device_driver *drv = data;
> > @@ -894,14 +952,7 @@ static int __driver_attach(struct device *dev, void *data)
> >                 return ret;
> >         } /* ret > 0 means positive match */
> > 
> > -       if (dev->parent && dev->bus->need_parent_lock)
> > -               device_lock(dev->parent);
> > -       device_lock(dev);
> > -       if (!dev->dead && !dev->driver)
> > -               driver_probe_device(drv, dev);
> > -       device_unlock(dev);
> > -       if (dev->parent && dev->bus->need_parent_lock)
> > -               device_unlock(dev->parent);
> > +       device_driver_attach(drv, dev);
> > 
> >         return 0;
> >  }
> > @@ -932,15 +983,11 @@ static void __device_release_driver(struct device *dev, struct device *parent)
> >         drv = dev->driver;
> >         if (drv) {
> >                 while (device_links_busy(dev)) {
> > -                       device_unlock(dev);
> > -                       if (parent)
> > -                               device_unlock(parent);
> > +                       __device_driver_unlock(dev, parent);
> > 
> >                         device_links_unbind_consumers(dev);
> > -                       if (parent)
> > -                               device_lock(parent);
> > 
> > -                       device_lock(dev);
> > +                       __device_driver_lock(dev, parent);
> >                         /*
> >                          * A concurrent invocation of the same function might
> >                          * have released the driver successfully while this one
> 
> This change will clash with
> https://patchwork.kernel.org/patch/10729571/ somewhat which really
> should go it first as a stable-candidate fix.
> 
> I would suggest rebasing on top of that one, unless Greg has different
> plans here.

Greg, any opinion here? From what I can tell the patch pointed out and
this one both address the same issue. The only real difference is that
the patch called out would be a better stable-candidate fix.

I'm just wondering if the patch set is good as is or if I need to be
submitting a v10 w/ rebase on top of this patch.

Thanks.

- Alex

