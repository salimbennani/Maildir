Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:38:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 53B5C5805F0;
	Tue, 18 Dec 2018 07:04:14 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 07:04:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASA8aWhZGLlQ2k/wqcEJE+23/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci8YB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDeUPPulXoJXmp1sWrxazHhWsCP/1xzNUmnP6wbM23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zIodXxLqgSV/2+wrTUzTrddfNW3yr25Y/TchA9v/6MR7RwfNHLyUkoGQLFik+f?=
 =?us-ascii?q?qYr4MD+P1uQCqXKb7/R6WuK1lmErsR9+rSWyxso1jITCm4Ebykjc+Cln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXO5dsTs4jQWxkoDs2x7kYtZKhYSQHxokrywTCZ/CbbYSE?=
 =?us-ascii?q?+BLuWemXLDxlnnxqYqi/iAy38UW4yu3zSM200FFSoypbndnDqGoN2wbQ6seZUP?=
 =?us-ascii?q?t9+Fmu2TKV2wDU8OFELlg4lavdK5E/3r49joQfvVjHEyPshUn7grGael859uWr?=
 =?us-ascii?q?9+jreLTrq52EO49xkA7+M6AumsKlAeQ/NwgDR2yb+eW61L3+8kz1WbZKgeMskq?=
 =?us-ascii?q?nfrp/aId0Xpqm3Ag9TzIkj8Q2yDymp0NsGh3kLNlFFdwydj4jvJV7OJOr0DfCl?=
 =?us-ascii?q?g1SjiDtr3ezJPqX9ApXRKXjOiLPhfbd+60FC0gYyws1f6olQCrEAJvLzR0DwuM?=
 =?us-ascii?q?bZDh8/Lwy73eLnBM9h2YMZXGKFGrWZP7/KsV+U+uIvJPGBZI8Ptzb8N/gq/fnu?=
 =?us-ascii?q?gWU5mV8AZ6ap25QXZWu8HvRnJUWZfHXtjs0AEWcMogoxUujqhEeeXj5UYna4R7?=
 =?us-ascii?q?g86S0jCIK6EYfDQZiggL6G3CilBJFWZWdGClaKEXfvbIiEX/YMaCSPIs5uiDAE?=
 =?us-ascii?q?VL6hS5M/2hGqrgP1171nLu/M8C0CqZ3jzMR15/HUlRwq7zN0FMSd02aOT21uhG?=
 =?us-ascii?q?MHXT020bt7oUx8zFeDzKd5j+ZZFdxV+/NGTAM6OYTAwOx9DtD4QhjBccuRSFa6?=
 =?us-ascii?q?XtWmBik8TtErzN8IeUp9H9SigQrF3yqlGLIVk72LBJop8qPTxXTxJsB9y2rY26?=
 =?us-ascii?q?kllVUpXsxPNWi+jK5l6wfTH5LJk1mel6uyaKsTxjDN+3mZwWqOpk5YVhVwXrvD?=
 =?us-ascii?q?XXwYYkvWrtH55kfZQr+qCLQnNBZByMGYJqtLbN3pkUtJRPP5NNvCZGKxnn+6BQ?=
 =?us-ascii?q?yUybOUcIrqZ2Id0T3AB0cejQAc42yKNQgkCSenuGLREjpuGEnrY0Pt9+l+tXy6?=
 =?us-ascii?q?QlU1zwGMc01uyb619gQJivybTvMZxqgEtzs5qzVoAFa92MrbC8aBpwpke6Vcfd?=
 =?us-ascii?q?M94Vdd2WLFrQB9OYagL6Rjhl4YfAR6pEfu1xRxCoVdnskmtnIqzAxuKa2G1FNN?=
 =?us-ascii?q?bS+X3Zf1OrfPMGn94Aiva7LK2lHZyNuZ4KMP5+o3qlr9vAClDFEt82h63NZP1X?=
 =?us-ascii?q?uc5ZLKDBQJXJL1U0Y38QV6pr7Abik84YPUyWNjMa2uvjDe3NIpAfMvygy8cNdH?=
 =?us-ascii?q?LKOECAjyHtUaBsizMuAlh0KlbxMEPO9I8q40MNird/+H2K6tIeZhkyiqjWVB4I?=
 =?us-ascii?q?BhzE2M8zBwRfLP35YA2/uYxBeIVy/gjFe9tcD6gZpEZTAOEWWl0yjrGYlRard0?=
 =?us-ascii?q?fYkVE2euItS7yclkiJ7pRnFX6kSjB1QA2MKyfRqSblr93RBf1EgNoHynnze4wC?=
 =?us-ascii?q?Jwkz0zsqWf2ynOyfz4dBUbIm5LWHVijVD0LIm0jtAWRkipYxIylBu440b33Kxb?=
 =?us-ascii?q?pKV5L2nOTkZEZSn2L2d+UqSusrqOedJA6JQtsS9PSuSzfUiaSqLhoxsdyy7jHX?=
 =?us-ascii?q?FRxCo4dzGpvZX1hQd6h3ieLHZwrXrZf99/xRHE6dzYRP5R2CcGRSZihTnWAFi8?=
 =?us-ascii?q?I8em/dGOm5jfteC+UnqrVodPfinz0YOAqCy76HVqABKlmPC/gN/nEQk80SLg09?=
 =?us-ascii?q?lqVCPIrAvzY4Xx1qS6N/5ncVdsBFPm98V6HYR+mJMqhJ4MwXgamomV/X0fnGfw?=
 =?us-ascii?q?K9pb2LjybHoQRTERxd7V7xPo2EliLnKP2oL4WW+RwspnZ9mmfGwW3jgx4NxNCK?=
 =?us-ascii?q?eR9LZEhzd6okKkrQLNZvhwhjIdyfot6HEAme0IthQizj6BAr8MB0lXJjLjlw6H?=
 =?us-ascii?q?792lqKVXZWCvcaW/1UZknNChCq2CrR9YWHrjZpgiGipw5N1lMF3QyH3z9p3keN?=
 =?us-ascii?q?7IYNIPsR2Ulg3MjulPJ5I3i/oKnjFnOWPmsH0hyu47iwFu3J6gsIiGLWVt4Ly2?=
 =?us-ascii?q?AhpCOjLpYMMT/ynnjbxCkcaOw4CvApJhFy0QU5TySvKoFC8Sue7jNwaTCzA8rn?=
 =?us-ascii?q?abGbzCHQ6Q8ktmrnTPE4y1OHGTPnUW0dJiRByFLkxFnA8URCk6noI+Fg2yxszu?=
 =?us-ascii?q?akJ56S4K5lLithtA0OFoNwT8UmfCogencCw0RYObLBpX6AFC+kjUPdaf7uJ1Ay?=
 =?us-ascii?q?FX4JmhoBaRJWycYgRCFXsJVVCcB1D/Irmu4sHN8uifBuqjNvvOfK+BqepEW/eT?=
 =?us-ascii?q?wpKv1IRm8i2INsWOOHliEvI61lBCXXB/B8TWhTEPRzYLmCLKas6RvA289TFvrs?=
 =?us-ascii?q?Cj7PTrXxri5YuRBLtTMtVv+BG2jb2AN+6KgyZ5JihX1okRxX/T07Uf2F8Siydz?=
 =?us-ascii?q?dziiC7gAtCjNTL7Ola9TFRIUdyRzNM5Q5aImwgZNIdLbis/y1rNglPE1FkxKVU?=
 =?us-ascii?q?b/lcCpf8AKJ2C9OUjDBEaKMrSGODLKz9v2YaO6Vb1fkuFUuwestjacFk/pJi6D?=
 =?us-ascii?q?mCXxVxCzLeFMizmWPABfuIG4aBpiFXLvQ87mahKlNt96ljk2wbwyhnPXOm8QKz?=
 =?us-ascii?q?l8c0VRrrKO6SNUmOlwG2tE7nB9N+mLhz6Z7/XEKpYRqfZqAj57l+Rf4HQ7zbta?=
 =?us-ascii?q?9CBFRPxvlyvUod5juFWmkuiJyjp6XxtCsDdLhISXvUp8PaXV7IVPWXHB/EFF0W?=
 =?us-ascii?q?LFIhIGvdZ6QuLoobtUx8mHwKv2NzBY6NbZ7OMTAsHVLISMN393YjTzHzuBJQ8M?=
 =?us-ascii?q?S3aQKWzFgQQJi+2f7Hu9tJ8lrpHqlNwOQ6VFXUY5UP4WFxI2T5Q5PJ5rU2Z8wv?=
 =?us-ascii?q?agh8kS6C/79UGJSQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAAATCxlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgzQ3J5gOgWglFJdGFIFfCSQTAYcdIjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkvgjYkAYJhAQECAgEBAjc/BQEJAgoOCi4DVAYTBYMdgXkIBah6iGIHg?=
 =?us-ascii?q?UyMPxeBf4FEgjEuhGmFdwKJK4IQhRWPfVcJkXiRV4pwkE8BggczGggdE4Mngic?=
 =?us-ascii?q?XEo4pIQEygQUBAY1zAQE?=
X-IPAS-Result: =?us-ascii?q?A0AgAAATCxlch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBgzQ?=
 =?us-ascii?q?3J5gOgWglFJdGFIFfCSQTAYcdIjYHDQEDAQEBAQEBAgETAQEBCgsJCCkvgjYkA?=
 =?us-ascii?q?YJhAQECAgEBAjc/BQEJAgoOCi4DVAYTBYMdgXkIBah6iGIHgUyMPxeBf4FEgjE?=
 =?us-ascii?q?uhGmFdwKJK4IQhRWPfVcJkXiRV4pwkE8BggczGggdE4MngicXEo4pIQEygQUBA?=
 =?us-ascii?q?Y1zAQE?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="56829652"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 07:04:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726966AbeLRPEC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 10:04:02 -0500
Received: from iolanthe.rowland.org ([192.131.102.54]:52862 "HELO
        iolanthe.rowland.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with SMTP id S1726947AbeLRPEA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 10:04:00 -0500
Received: (qmail 2561 invoked by uid 2102); 18 Dec 2018 10:03:59 -0500
Received: from localhost (sendmail-bs@127.0.0.1)
  by localhost with SMTP; 18 Dec 2018 10:03:59 -0500
Date: Tue, 18 Dec 2018 10:03:59 -0500 (EST)
From: Alan Stern <stern@rowland.harvard.edu>
X-X-Sender: stern@iolanthe.rowland.org
To: Andrew Worsley <amworsley@gmail.com>
cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Mathias Nyman <mathias.nyman@linux.intel.com>,
        Nicolas Boichat <drinkcat@chromium.org>,
        Jon Flatley <jflat@chromium.org>,
        Kai-Heng Feng <kai.heng.feng@canonical.com>,
        Bin Liu <b-liu@ti.com>, Benson Leung <bleung@chromium.org>,
        "open list:USB SUBSYSTEM" <linux-usb@vger.kernel.org>,
        open list <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] Prevent race condition between USB authorisation and
 USB discovery events
In-Reply-To: <CA+Y=x3mHS4h13dTe4549Zcir5w3U54wJjyuaAa802=brp_FpeQ@mail.gmail.com>
Message-ID: <Pine.LNX.4.44L0.1812180957040.1402-100000@iolanthe.rowland.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 18 Dec 2018, Andrew Worsley wrote:

> On Tue, 18 Dec 2018 at 03:21, Alan Stern <stern@rowland.harvard.edu> wrote:
> >
> > On Mon, 17 Dec 2018, Andrew Worsley wrote:
> >
> > > A sysfs driven USB authorisation change can trigger a usb_set_configuration
> > > while a hub_event worker thread is running. This can result in a USB device
> > > being disabled just after it was configured and bringing down all the
> > > devices and impacting hardware and user processes that were established on
> > > top of this these interfaces. In some cases the USB disable never completed
> > > and the whole system hung.
> >
> > Can you be more specific about this?  Disabling a USB device shouldn't
> > cause these kinds of problems, regardless of whether or not the device
> > was just configured.
> 
> I can't say too much about the hardware - but there was an SPI bus and
> an i2c bus built
> on top of USB devices on a bus. It appears the SPI bus shutdown was
> the item that was prone
> to problems when being torn down.
> 
> I understand it would be better if the dependant systems shutdown
> cleanly, which it
> did about 75% of the time but then it was rather messy sequence. So
> the current system
> is far from ideal. The crux of the issue is the usb_disable_device()
> (line 1874 of drivers/usb/core/message.c)
> call in usb_set_configuration() is applied to a configured device and
> triggers the
> tear down of all the devices built on that USB device and is very disruptive.

This is intentional.  When a USB device is disabled, nothing that
depends on it is supposed to survive.  However in spite of all the
disruption, nothing should hang.

> > > At my work I had an occasional hang due to this race condition. Roughly 1
> > > in 50 boots had the race occurrence and 1 in 4 of those resulted in a hang.
> > > This patch fixed the problem and I had no problems (spurious disables
> > > or hangs) in 750+ boots.
> >
> > usb_authorize_device, usb_deauthorize_device, and hub_event all acquire
> > the device mutex.  Why should adding another mutex make any difference?
> 
> I believe the new usb_authorize_mutex prevents the cascade of USB
> device bus scans,
> discoveries and probes from colliding with those caused a change in
> USB bus authorisation.
> The individual device / hub locks are not across the whole system,
> only an individual
> component hub/device so any logic that gives an orderly USB device
> scanning and probing is
> undermined. The idea of the mutex is to keep the USB device discovery
> work when a device is
> added/removed/powered up is separated from those that are caused by
> authorisation changes.
> 
> I don't pretend to understand all the logic and sequencing of the
> current code which works works
> faultlessly when these threads are serialised by the mutex (750+
> times) in boot ups which
> build up the system and shutdowns which bring down the system.
> Likewise if I endlessly run
> the authorisation off / on by itself it is faultless over hundreds of
> iterations.

Can you post a dmesg log that illustrates the problem with dynamic
debugging enabled for the usbcore module?

> > In fact there's an actual disadvantage: Making hub_event acquire a
> > global mutex will prevent us from handling multiple hubs concurrently.
> > Although we don't do this now, we might want to in the future.
> >
> > Alan Stern
> 
> This is true - I am not trying to serialise the hub_event() threads -
> but to prevent the authorisation changes
> from happening during the hub_event threads. So perhaps there would be
> a way of allowing multiple
> concurrent hub_events from happening but only one authorisation thread
> at a time. Assuming multiple
> hub_event()s are deemed ok. Something like a lock which allows
> multiple readers but only a single exclusive
> writer lock?

It's not that simple.  There are other ways a USB device can be
disabled that don't involve authorization.  For example, the user can
do:

	echo 0 >/sys/bus/usb/devices/.../bConfigurationValue

(the ... gets filled in with the device's path).  This should cause
just as much disruption.

The locking we already have is supposed to prevent the sort of problem 
you are seeing.  To find out why it doesn't, we need more information.

Alan Stern

