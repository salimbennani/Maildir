Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:42:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 26BAD58050C
	for <like.xu@linux.intel.com>; Thu, 20 Dec 2018 12:15:39 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 12:15:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AtApShBbtdxoM5JIYiHpWz+r/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZrsuzbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA57m/ZhM9+gqVGrhK5pRFxwYHZbJybOfZiYKzdZsgXSXZdUstLSyBMGJ+w?=
 =?us-ascii?q?Y5cJAuEcPehYtY79p14WoBWiBAmjGOPvxSVShnDrwKY00fouEQfb0wM+BdIOq3?=
 =?us-ascii?q?PUrNPoP6oVS+C1zbXHzTXZYPNMxDjx8ojIfQ4nof6RQ71wa9HRyU4pFw7eilWQ?=
 =?us-ascii?q?qIrlMCmP1uQKqWSb6PBgVe22hmMhtgp/rD+vxsI2hYnIgIIY0lHE9SNlz4ovPt?=
 =?us-ascii?q?23U0h2asOnHptIryyWKZd6T8A4T211pSo3yacKtYC1cSUK0pgr2hzSZ+SDfoWK?=
 =?us-ascii?q?+B7vSfidLDZiiH54Zb6yhwy+/VWgx+D+UMS/zUxEoTBfktbWs3AAzxzT5daDSv?=
 =?us-ascii?q?t65kqh3TeP1xvP6uFfO0w0mqzbK4M7zr43jJoTvlzPHi7wmErokK+bblso9vSr?=
 =?us-ascii?q?5uj9f7nqu5yRO5VqhgzwMqkigNGzDOYgPggLRWeb+OC81LP5/U3+RbVHluQ2nb?=
 =?us-ascii?q?fcsJDHPMgUu7C2AxFL3YYn8hqwFDCm0MkenXYbMl1FYxWLj4zoO1HNPv/0F/i+?=
 =?us-ascii?q?g0m0nTdvxvDGOKDhA5rXInjClrfhYahy60pGxAUvytBf4olZCrcGIPL1VU/xss?=
 =?us-ascii?q?HYAgU+MwyuzObrEM992Z8GWWKTHq+ZN7vfsVuJ5uIsPeaAfoAUuCvmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh4RJLGERowBrTPD2kEbQFnlXZm2uRO?=
 =?us-ascii?q?Q64Tc0Dp/gCp3MAYWkgbiE1SH8GYVKZ2dAEReVHHL1MomJRfoIOx+UOdJrxzkN?=
 =?us-ascii?q?VLy9TN042BSz8QP31bdja/DZ4zAVro7L0t9z6OvO0xYo+mtvEs6f3mqRGnxyhX?=
 =?us-ascii?q?4CXDQs3apy8nB6n06O1LU9j/FGGNh74fRPXQEnc5nGwL9UEdf3DzjAddeAUlru?=
 =?us-ascii?q?YtigDTwrVdU3i4sUYk19Es+uyBDO2SanGaQSkZSPBZo96KWa2GL+cZUug03a3b?=
 =?us-ascii?q?Us2gF1CvBEMner0/Zy?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CuAAAM+BtchxHrdtBlHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGBMIJijHWLHJl+gV8TAQEYFIcuIjcGDQEDAQEBAQEBAgETAQEBCgsJCBs?=
 =?us-ascii?q?OIwyCNgUCAxgJgl8EAiQZAQEECikBAgMBAgYCPgoIAwEwAQUBNQWDHYICAQScI?=
 =?us-ascii?q?jyKKYFsM4J2AQEFgkOEYAgSh2xVglCBHIFXP4NuhHuGGolJhxSQYgcCgiUEjzA?=
 =?us-ascii?q?MGIl4h2UsmToGAgkHDyGBO4F4TTCDL4IbDBeIXoVgUYEHi2mBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0CuAAAM+BtchxHrdtBlHQEBBQEHBQGBVAUBCwGBMIJijHW?=
 =?us-ascii?q?LHJl+gV8TAQEYFIcuIjcGDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxgJg?=
 =?us-ascii?q?l8EAiQZAQEECikBAgMBAgYCPgoIAwEwAQUBNQWDHYICAQScIjyKKYFsM4J2AQE?=
 =?us-ascii?q?FgkOEYAgSh2xVglCBHIFXP4NuhHuGGolJhxSQYgcCgiUEjzAMGIl4h2UsmToGA?=
 =?us-ascii?q?gkHDyGBO4F4TTCDL4IbDBeIXoVgUYEHi2mBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="56762902"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 20 Dec 2018 12:15:37 -0800
Received: from localhost ([::1]:39702 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1ga4jJ-0003mg-CT
	for like.xu@linux.intel.com; Thu, 20 Dec 2018 15:15:37 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59818)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <richard.henderson@linaro.org>) id 1ga4it-0003ku-Bp
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 15:15:12 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <richard.henderson@linaro.org>) id 1ga4io-0001XE-DN
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 15:15:11 -0500
Received: from mail-pl1-x644.google.com ([2607:f8b0:4864:20::644]:38443)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <richard.henderson@linaro.org>)
	id 1ga4io-0001Tv-61
	for qemu-devel@nongnu.org; Thu, 20 Dec 2018 15:15:06 -0500
Received: by mail-pl1-x644.google.com with SMTP id e5so1378306plb.5
	for <qemu-devel@nongnu.org>; Thu, 20 Dec 2018 12:15:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id;
	bh=x7ZkkSKSVr4HyIt0BhAOIX/c8oxP6mRSBclCC7pVpBk=;
	b=CVy2bI/hGO2VbyxQo4nLydwyoOejQBvw5r+znk2Aukwca78tTDPKuh/ymqx7dH7aLc
	7FS92qBw7gKLb3J16CQ8NrTZ27OQaUwDj+gwLmeVTJQP/m00g43FhRBQ0pFel5gfsI4J
	KOYeWh7bW4Sge6KSB51ISz12ND1UQ1L8x8Jf0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=x7ZkkSKSVr4HyIt0BhAOIX/c8oxP6mRSBclCC7pVpBk=;
	b=UBCu8xjIOylKWIIovRXwo5yp1V9dHYE2U/JFpoFEWx7d5Is2S/fIwECtIYBpP/mO53
	BQcBHmi0RU3nxFeffyTuVALIL0j6llbsKrps8h0lkFFHCXacgJbrT2a1kVDPH9jJlIbd
	ifaGENkowmcdDw7BPy6bpEogg3O6jSLEQa1w5DMiNAe6pwUvztUW9cikTeCUZCAilXSU
	nGJlFMiTh/a39kRT1zQjwhA4cogTuEG1y3L2vIYzr3F5OUPZBO/BcvB6penA5F1BoB+V
	gkySK3YQuqMslgX87URWH6psIdPqyZzsvXfGQaY4DHTJeMvtm3NGuPU5NJtJ2w3/4j+u
	lqPA==
X-Gm-Message-State: AA+aEWaX7XUvNqhkNp/KBAVsbn9Ry4NGjusSj2aaFp8Qr8ww0CRkGDif
	Khi0tIekpsxu0GWJR505neyZMqy7mjU=
X-Google-Smtp-Source: AFSGD/WKgTPFa1Do5nN9w5rrBCvPtccoo2gZn0jIrW6QrU/ArtXIoSOCDdPu8Xn8hcuK89dS3gCWpA==
X-Received: by 2002:a17:902:8d8e:: with SMTP id
	v14mr25217009plo.133.1545336904508; 
	Thu, 20 Dec 2018 12:15:04 -0800 (PST)
Received: from cloudburst.twiddle.net (97-126-115-157.tukw.qwest.net.
	[97.126.115.157]) by smtp.gmail.com with ESMTPSA id
	p67sm37351426pfg.44.2018.12.20.12.15.03
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Thu, 20 Dec 2018 12:15:03 -0800 (PST)
From: Richard Henderson <richard.henderson@linaro.org>
To: qemu-devel@nongnu.org
Date: Thu, 20 Dec 2018 12:15:02 -0800
Message-Id: <20181220201502.12285-1-richard.henderson@linaro.org>
X-Mailer: git-send-email 2.17.2
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::644
Subject: [Qemu-devel] [PATCH] linux-user: Add safe_syscall for riscv64 host
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: palmer@sifive.com, Alistair.Francis@wdc.com, laurent@vivier.eu
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
---

At some point we should make this routine be non-optional for
porting to a new host.


r~

---
 linux-user/host/riscv64/hostdep.h          | 23 +++++++
 linux-user/host/riscv64/safe-syscall.inc.S | 77 ++++++++++++++++++++++
 2 files changed, 100 insertions(+)
 create mode 100644 linux-user/host/riscv64/safe-syscall.inc.S

diff --git a/linux-user/host/riscv64/hostdep.h b/linux-user/host/riscv64/hostdep.h
index 28467ba00b..865f0fb9ff 100644
--- a/linux-user/host/riscv64/hostdep.h
+++ b/linux-user/host/riscv64/hostdep.h
@@ -8,4 +8,27 @@
 #ifndef RISCV64_HOSTDEP_H
 #define RISCV64_HOSTDEP_H
 
+/* We have a safe-syscall.inc.S */
+#define HAVE_SAFE_SYSCALL
+
+#ifndef __ASSEMBLER__
+
+/* These are defined by the safe-syscall.inc.S file */
+extern char safe_syscall_start[];
+extern char safe_syscall_end[];
+
+/* Adjust the signal context to rewind out of safe-syscall if we're in it */
+static inline void rewind_if_in_safe_syscall(void *puc)
+{
+    ucontext_t *uc = puc;
+    unsigned long *pcreg = &uc->uc_mcontext.__gregs[REG_PC];
+
+    if (*pcreg > (uintptr_t)safe_syscall_start
+        && *pcreg < (uintptr_t)safe_syscall_end) {
+        *pcreg = (uintptr_t)safe_syscall_start;
+    }
+}
+
+#endif /* __ASSEMBLER__ */
+
 #endif
diff --git a/linux-user/host/riscv64/safe-syscall.inc.S b/linux-user/host/riscv64/safe-syscall.inc.S
new file mode 100644
index 0000000000..9ca3fbfd1e
--- /dev/null
+++ b/linux-user/host/riscv64/safe-syscall.inc.S
@@ -0,0 +1,77 @@
+/*
+ * safe-syscall.inc.S : host-specific assembly fragment
+ * to handle signals occurring at the same time as system calls.
+ * This is intended to be included by linux-user/safe-syscall.S
+ *
+ * Written by Richard Henderson <rth@twiddle.net>
+ * Copyright (C) 2018 Linaro, Inc.
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2 or later.
+ * See the COPYING file in the top-level directory.
+ */
+
+	.global safe_syscall_base
+	.global safe_syscall_start
+	.global safe_syscall_end
+	.type	safe_syscall_base, @function
+	.type	safe_syscall_start, @function
+	.type	safe_syscall_end, @function
+
+	/*
+	 * This is the entry point for making a system call. The calling
+	 * convention here is that of a C varargs function with the
+	 * first argument an 'int *' to the signal_pending flag, the
+	 * second one the system call number (as a 'long'), and all further
+	 * arguments being syscall arguments (also 'long').
+	 * We return a long which is the syscall's return value, which
+	 * may be negative-errno on failure. Conversion to the
+	 * -1-and-errno-set convention is done by the calling wrapper.
+	 */
+safe_syscall_base:
+	.cfi_startproc
+	/*
+	 * The syscall calling convention is nearly the same as C:
+	 * we enter with a0 == *signal_pending
+	 *               a1 == syscall number
+	 *               a2 ... a7 == syscall arguments
+	 *               and return the result in a0
+	 * and the syscall instruction needs
+	 *               a7 == syscall number
+	 *               a0 ... a5 == syscall arguments
+	 *               and returns the result in a0
+	 * Shuffle everything around appropriately.
+	 */
+	mv	t0, a0		/* signal_pending pointer */
+	mv	t1, a1		/* syscall number */
+	mv	a0, a2		/* syscall arguments */
+	mv	a1, a3
+	mv	a2, a4
+	mv	a3, a5
+	mv	a4, a6
+	mv	a5, a7
+	mv	a7, t1
+
+	/*
+	 * This next sequence of code works in conjunction with the
+	 * rewind_if_safe_syscall_function(). If a signal is taken
+	 * and the interrupted PC is anywhere between 'safe_syscall_start'
+	 * and 'safe_syscall_end' then we rewind it to 'safe_syscall_start'.
+	 * The code sequence must therefore be able to cope with this, and
+	 * the syscall instruction must be the final one in the sequence.
+	 */
+safe_syscall_start:
+	/* If signal_pending is non-zero, don't do the call */
+	lw	t1, 0(t0)
+	bnez	t1, 0f
+	scall
+safe_syscall_end:
+	/* code path for having successfully executed the syscall */
+	ret
+
+0:
+	/* code path when we didn't execute the syscall */
+	li	a0, -TARGET_ERESTARTSYS
+	ret
+	.cfi_endproc
+
+	.size	safe_syscall_base, .-safe_syscall_base
-- 
2.17.2


