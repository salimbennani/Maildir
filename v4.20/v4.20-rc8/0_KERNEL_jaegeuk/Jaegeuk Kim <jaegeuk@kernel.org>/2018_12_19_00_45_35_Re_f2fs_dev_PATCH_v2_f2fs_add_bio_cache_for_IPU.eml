Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 12:41:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5F80D5805CF;
	Tue, 18 Dec 2018 16:46:00 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 16:45:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AC/S1/hz9VL6VHqbXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9vEMOoBmlCAmwGO/i0CNEimPs0KEk1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?naqM/6O7kdUe+r0anIzijIYfZX2Tf49YPFdRIhruuSUrJ/b8XR1EovGhjGjlqO?=
 =?us-ascii?q?s4zlOS2a1uAXv2ic9epgWvuihmg6oA9/pTivw90jiojPho8N0VDE8jh5wJwpKt?=
 =?us-ascii?q?KmRk57ZsSkEJROuC2AMYt5XN8iTmd1syg50r0LoYC3cDQOxZg92hLSZeKLf5KV?=
 =?us-ascii?q?7h/gSOqdOzZ1iXB9dL6imxq//lKsxvDyW8WqylpGsjBJn9vOu30Lyhfd8NKISu?=
 =?us-ascii?q?Fn8UekwTuP1x7c6uVDIU0si6rbJIAuwqQqmpoQr0vDBCn2l1vyjKOMcUUk4Oeo?=
 =?us-ascii?q?5/zmYrXguJCcK5d5hh/iPqkqgMCzHOo1PhYUU2SG+umwyKfv8Ez7TblSi/05iK?=
 =?us-ascii?q?jZsJTUJcQBoa65BhdY0oIi6xa5Ejen380UnXoZI1JffhKIkYzpN0jJIPH2C/ew?=
 =?us-ascii?q?nU6snSx1x/DJILLhGI/BLnvdn7f7e7Zy9UpcxBA0zdBF6JJYEqsBL+7rWk/tqN?=
 =?us-ascii?q?zYCQc0Mwi1w+bkFtpxzIwfWX+UD6+dMaPSt0KI5+01L+mNYo8VpCjyK/w/6/Hy?=
 =?us-ascii?q?in85nEcXfbO10psPdHC4AvNmLl2ZYXX2g9cBDX0Fvg0kQOzqlV2NSzhTZ3mpUq?=
 =?us-ascii?q?I45zE7Dp+mDIjZSoCshryBwDm0HplMam9aDVCMFG/id5+YVPcUdCKSPshhnyQG?=
 =?us-ascii?q?VbimVYAtzxKutAj8y7phKerZ4SkYtZPl1Nho6OzfjxAy9TpoD8uD12GBVX17nm?=
 =?us-ascii?q?QNRzUuxqBwvVR9ykuf0ah/m/FXD8dT5/NOUgc5L5Lc1fZ1C9LpVwLFf9eJTkum?=
 =?us-ascii?q?Q9q8DTEwSNIx38EBY0JnF9q+iRDD2jKgA6UJmLyTGJw07qXc0mDyJ8lnzXbKzq?=
 =?us-ascii?q?0hj1g8TctJOm2rnap/9wnVB47UnESVjaeqdaIA3CHT8GeP13aBvEZdUARoS6XK?=
 =?us-ascii?q?QWgfZlfKrdT+/k7NUqWhCao5PQdbyc6NMK1Kasb3glVAQ/vjPNfeY2e1m2qrAR?=
 =?us-ascii?q?aIx7WMbJflemkH3SXdDlQEnB4X/XqcKQc+ASKhqXrEDDNyDVLvf1/s8e5mpXym?=
 =?us-ascii?q?VEA00R+FY1dh17Wv/B4VnuKTS/UI07IAuSchrSh0HVmn09LXDdqAuxRufKFGbd?=
 =?us-ascii?q?wh51dH0HrTtxZhMZy4M6Bimlkefhxrv0Pv0hV3DZlAkcgqrX8w0Ap+M6WY0ElF?=
 =?us-ascii?q?dzOZ25DwNabaKm3z/BCpdq7X1UvS0NeQ+qcT9vs4r0/vsx2uFkon639nycVa02?=
 =?us-ascii?q?OA5pXWCwofSYj+UkIp+Bl1ub7bYjMx6JjJ1XJxK6a0tDzC29U3BOY+zhagftFf?=
 =?us-ascii?q?ML6LFQPoEs0aAdSuJ/Ium1Szch0EO+VS/rYuP8y6b/uGxLKrPOF4kTOmkGRL+p?=
 =?us-ascii?q?xy3liN9ip8UOHI2ZkFzuqc3guGUTf8kVigvtr2mYBCeTEdAG6/xTL4C45WY614?=
 =?us-ascii?q?ZZwLBnu2I82r2tV+gIbgW2RZ9FG/HVwGwtKmeR2IY1z7wwJQz0UXrWW7liSiyz?=
 =?us-ascii?q?x7ji8mrrCY3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuL2BiU7G8t7qYb85U9ZMotz5aUOC9YVCcV778rAEW0yLlH2?=
 =?us-ascii?q?tC2j87cyumtYn+nxx/kGidNmp8rGLFecFswhfS/N7cSuRL3joFRyl4jiPbBkOm?=
 =?us-ascii?q?MNmq/tWUlpHDvf64V2+6Up1TcC/rzZ6PtSeh5G1qBwG/kO63mtH9DQc61ir73c?=
 =?us-ascii?q?FwVSrUtBb8fpXr16OiPONnZEZoA0Xw68h7GoF4iYYwgJAQ2X4HhpSa53YHkGHz?=
 =?us-ascii?q?MclF1qL6dnYCWTkLw9vN6gj/xEJjNm6Jx57+VniFwctufdi6bnkW2iIg9c9KDq?=
 =?us-ascii?q?iU4adAnSt0pFq4sA3QbeJ8njcb1fsh9noaj/sVtwoqyyWXGqoSElVAPSzwixSI?=
 =?us-ascii?q?6MizrKBWZGasa7e8zkR/ks66DLGevA5cQm32dYk4HS9/9ch/NFPM0Hvu6oDrYt?=
 =?us-ascii?q?XQbNQTtgGKnBfEleRaNJUxlv8Sjyp9JW39pWEly/I8jRF2wZG6u42HJ39s/a2j?=
 =?us-ascii?q?BB5YKyb1Z9gS+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+on3UCZ+rMHWXJGQDwdVmWRmQP0hfgAESXDUnkZ81DAGqxMr9?=
 =?us-ascii?q?cEhn4jAd/EL3qhxJyuhwLRnwTn/fpBu0ajczUJWfLgBZ7gRc6EfOK8Ce8vh/Hy?=
 =?us-ascii?q?JF/p2isQyNLHaUZx9TAGENW0yEAU3jP7a06dnB9eiYGvSxL//UbbqSruxeUu+C?=
 =?us-ascii?q?xYiz3Yt+4zaMKsKPM2FiDv08x0pDRG15FN7fmzkVUCwXkCTNb8GAqRe4+y13qN?=
 =?us-ascii?q?2/8fvxVALu44uPF6VdMdF19x+qhqeDMvaahDxlJjZAypMM2XjIxaAf3FEMiiFu?=
 =?us-ascii?q?dDqtEbUauS7OVqLQnaBXAAABayNuL8tF9KY83ghLOc7GhdL5zL94jvgpC1hbUV?=
 =?us-ascii?q?ztgN2mZcsPI2ulLlPIGF6LNKiaJT3M28z4e768RqZKjOpKtxy8ozKbE074MzSH?=
 =?us-ascii?q?ljnpUQ2vMO5WgCGaOhxepJ+ychJ3BWf/S9LmbwWxMMVrgj0u3b00mnTKOHYAMT?=
 =?us-ascii?q?h9dkNBtKGf4TlEjfV/BWNB6GFoLe2Fmyaf8unZJYwasfptAiRoie1a5G42xKdS?=
 =?us-ascii?q?7CFBXPZ1gjfdrsZyo1G6lemC0jpmXwBIqjZOhYKLu11tOKTZ9pZaX3bE8wkA7W?=
 =?us-ascii?q?GRCxQMuttkBcfju6FWytjTiq3zLC1O/M7T/csZVIDoL5esMHMmeSv0UGrFEQAF?=
 =?us-ascii?q?RDnzHWHCjlNQkbeZ8XjD/bYgrZ25upMDRbJGVxQWF/ZSXkZsEdMPPZRfXT4+l7?=
 =?us-ascii?q?OfyskS6izt/1HqWMxGs8WfBbqpCvL1JWPc1OEcag=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAACMlBlch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUwIBAQEBAQsBgmmBAieYEoINFJdGgXYSGAsIAYcdIjYHDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYgECAwEBASQTBgEBLAsBBQkBAQoYC?=
 =?us-ascii?q?SUDDAUTATUTBYMdAYIABQqld4FsM4J2AQEFhysDBYsjgRwXgUA/gRGDEoMeAQS?=
 =?us-ascii?q?FF4ImiT6HFFGQAwmCKYRmhjCEFSSBXYUfiluKSYNyiziBTQOCBDMaCCgIO4Jsg?=
 =?us-ascii?q?hsMF4gjO4VgHzKBAgMBASETil8qgiMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ACAACMlBlch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUwIBAQEBAQsBgmmBAieYEoINFJdGgXYSGAsIAYcdIjYHDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCgsJCCkjDII2JAGCYgECAwEBASQTBgEBLAsBBQkBAQoYCSUDDAUTATUTBYM?=
 =?us-ascii?q?dAYIABQqld4FsM4J2AQEFhysDBYsjgRwXgUA/gRGDEoMeAQSFF4ImiT6HFFGQA?=
 =?us-ascii?q?wmCKYRmhjCEFSSBXYUfiluKSYNyiziBTQOCBDMaCCgIO4JsghsMF4gjO4VgHzK?=
 =?us-ascii?q?BAgMBASETil8qgiMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="56457723"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 16:45:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727578AbeLSApi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 19:45:38 -0500
Received: from mail.kernel.org ([198.145.29.99]:53574 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727531AbeLSAph (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 19:45:37 -0500
Received: from localhost (unknown [104.132.0.77])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 536C321873;
        Wed, 19 Dec 2018 00:45:36 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545180336;
        bh=8KYhj7dWTYQBHXcxO3b+n7ZhyeYqfMJFcMe+jMgSfLI=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=DIQ5F/e/+NKsBpfAM63N6VNOiUfEUolBYAgYWR4bNa3DJUu29yM9y1+aTxduHue6n
         gB2g3kbeybBFcLJMCbP5uZa4UrVe54UEwXdnhYr0GHhUo35i8GkoFPGg+K0re6F/Gy
         dg2fYpY//n2sethf4Xtg+KqhfeJ0DU6mQ/E5bTHE=
Date: Tue, 18 Dec 2018 16:45:35 -0800
From: Jaegeuk Kim <jaegeuk@kernel.org>
To: Chao Yu <yuchao0@huawei.com>
Cc: linux-kernel@vger.kernel.org,
        linux-f2fs-devel@lists.sourceforge.net
Subject: Re: [f2fs-dev] [PATCH v2] f2fs: add bio cache for IPU
Message-ID: <20181219004535.GA46286@jaegeuk-macbookpro.roam.corp.google.com>
References: <20181119032924.12587-1-yuchao0@huawei.com>
 <ba61f507-a209-76c9-a10e-c847b07caf40@huawei.com>
 <20181214143656.GB75922@jaegeuk-macbookpro.roam.corp.google.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181214143656.GB75922@jaegeuk-macbookpro.roam.corp.google.com>
User-Agent: Mutt/1.8.2 (2017-04-18)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/14, Jaegeuk Kim wrote:
> On 12/14, Chao Yu wrote:
> > Hi Jaegeuk,
> > 
> > I guess ("f2fs: clear PG_writeback if IPU failed") and v2 patch can fix
> > hang issue caused by v1 one, could you please have a try with v2?
> 
> Sure.

Hang again. I'll remove this patch and run the test again without this to
confirm.

> 
> > 
> > Thanks,
> > 
> > On 2018/11/19 11:29, Chao Yu wrote:
> > > SQLite in Wal mode may trigger sequential IPU write in db-wal file, after
> > > commit d1b3e72d5490 ("f2fs: submit bio of in-place-update pages"), we
> > > lost the chance of merging page in inner managed bio cache, result in
> > > submitting more small-sized IO.
> > > 
> > > So let's add temporary bio in writepages() to cache mergeable write IO as
> > > much as possible.
> > > 
> > > Test case:
> > > 1. xfs_io -f /mnt/f2fs/file -c "pwrite 0 65536" -c "fsync"
> > > 2. xfs_io -f /mnt/f2fs/file -c "pwrite 0 65536" -c "fsync"
> > > 
> > > Before:
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65544, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65552, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65560, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65568, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65576, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65584, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65592, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65600, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65608, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65616, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65624, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65632, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65640, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65648, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65656, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65664, size = 4096
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), NODE, sector = 57352, size = 4096
> > > 
> > > After:
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65544, size = 65536
> > > f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), NODE, sector = 57368, size = 4096
> > > 
> > > Signed-off-by: Chao Yu <yuchao0@huawei.com>
> > > ---
> > > v2:
> > > - submit cached bio for cp error case.
> > >  fs/f2fs/data.c    | 61 +++++++++++++++++++++++++++++++++++++++++++++--
> > >  fs/f2fs/f2fs.h    |  3 +++
> > >  fs/f2fs/segment.c |  5 +++-
> > >  3 files changed, 66 insertions(+), 3 deletions(-)
> > > 
> > > diff --git a/fs/f2fs/data.c b/fs/f2fs/data.c
> > > index 8780f3d737c4..7dffafb8b2c5 100644
> > > --- a/fs/f2fs/data.c
> > > +++ b/fs/f2fs/data.c
> > > @@ -474,6 +474,49 @@ int f2fs_submit_page_bio(struct f2fs_io_info *fio)
> > >  	return 0;
> > >  }
> > >  
> > > +int f2fs_merge_page_bio(struct f2fs_io_info *fio)
> > > +{
> > > +	struct bio *bio = *fio->bio;
> > > +	struct page *page = fio->encrypted_page ?
> > > +			fio->encrypted_page : fio->page;
> > > +
> > > +	if (!f2fs_is_valid_blkaddr(fio->sbi, fio->new_blkaddr,
> > > +			__is_meta_io(fio) ? META_GENERIC : DATA_GENERIC))
> > > +		return -EFAULT;
> > > +
> > > +	trace_f2fs_submit_page_bio(page, fio);
> > > +	f2fs_trace_ios(fio, 0);
> > > +
> > > +	if (bio && (*fio->last_block + 1 != fio->new_blkaddr ||
> > > +			!__same_bdev(fio->sbi, fio->new_blkaddr, bio))) {
> > > +		__submit_bio(fio->sbi, bio, fio->type);
> > > +		bio = NULL;
> > > +	}
> > > +alloc_new:
> > > +	if (!bio) {
> > > +		bio = __bio_alloc(fio->sbi, fio->new_blkaddr, fio->io_wbc,
> > > +				BIO_MAX_PAGES, false, fio->type, fio->temp);
> > > +		*fio->last_block = fio->new_blkaddr;
> > > +		bio_set_op_attrs(bio, fio->op, fio->op_flags);
> > > +	}
> > > +
> > > +	if (bio_add_page(bio, page, PAGE_SIZE, 0) < PAGE_SIZE) {
> > > +		__submit_bio(fio->sbi, bio, fio->type);
> > > +		bio = NULL;
> > > +		goto alloc_new;
> > > +	}
> > > +
> > > +	if (fio->io_wbc)
> > > +		wbc_account_io(fio->io_wbc, page, PAGE_SIZE);
> > > +
> > > +	*fio->last_block = fio->new_blkaddr;
> > > +
> > > +	inc_page_count(fio->sbi, WB_DATA_TYPE(fio->page));
> > > +
> > > +	*fio->bio = bio;
> > > +	return 0;
> > > +}
> > > +
> > >  void f2fs_submit_page_write(struct f2fs_io_info *fio)
> > >  {
> > >  	struct f2fs_sb_info *sbi = fio->sbi;
> > > @@ -1894,6 +1937,8 @@ int f2fs_do_write_data_page(struct f2fs_io_info *fio)
> > >  }
> > >  
> > >  static int __write_data_page(struct page *page, bool *submitted,
> > > +				struct bio **bio,
> > > +				sector_t *last_block,
> > >  				struct writeback_control *wbc,
> > >  				enum iostat_type io_type)
> > >  {
> > > @@ -1919,6 +1964,8 @@ static int __write_data_page(struct page *page, bool *submitted,
> > >  		.need_lock = LOCK_RETRY,
> > >  		.io_type = io_type,
> > >  		.io_wbc = wbc,
> > > +		.bio = bio,
> > > +		.last_block = last_block,
> > >  	};
> > >  
> > >  	trace_f2fs_writepage(page, DATA);
> > > @@ -2020,6 +2067,10 @@ static int __write_data_page(struct page *page, bool *submitted,
> > >  		f2fs_balance_fs(sbi, need_balance_fs);
> > >  
> > >  	if (unlikely(f2fs_cp_error(sbi))) {
> > > +		if (bio && *bio) {
> > > +			__submit_bio(sbi, *bio, DATA);
> > > +			*bio = NULL;
> > > +		}
> > >  		f2fs_submit_merged_write(sbi, DATA);
> > >  		submitted = NULL;
> > >  	}
> > > @@ -2046,7 +2097,7 @@ static int __write_data_page(struct page *page, bool *submitted,
> > >  static int f2fs_write_data_page(struct page *page,
> > >  					struct writeback_control *wbc)
> > >  {
> > > -	return __write_data_page(page, NULL, wbc, FS_DATA_IO);
> > > +	return __write_data_page(page, NULL, NULL, NULL, wbc, FS_DATA_IO);
> > >  }
> > >  
> > >  /*
> > > @@ -2062,6 +2113,8 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
> > >  	int done = 0;
> > >  	struct pagevec pvec;
> > >  	struct f2fs_sb_info *sbi = F2FS_M_SB(mapping);
> > > +	struct bio *bio = NULL;
> > > +	sector_t last_block;
> > >  	int nr_pages;
> > >  	pgoff_t uninitialized_var(writeback_index);
> > >  	pgoff_t index;
> > > @@ -2149,7 +2202,8 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
> > >  			if (!clear_page_dirty_for_io(page))
> > >  				goto continue_unlock;
> > >  
> > > -			ret = __write_data_page(page, &submitted, wbc, io_type);
> > > +			ret = __write_data_page(page, &submitted, &bio,
> > > +						&last_block, wbc, io_type);
> > >  			if (unlikely(ret)) {
> > >  				/*
> > >  				 * keep nr_to_write, since vfs uses this to
> > > @@ -2198,6 +2252,9 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
> > >  	if (nwritten)
> > >  		f2fs_submit_merged_write_cond(F2FS_M_SB(mapping), mapping->host,
> > >  								NULL, 0, DATA);
> > > +	/* submit cached bio of IPU write */
> > > +	if (bio)
> > > +		__submit_bio(sbi, bio, DATA);
> > >  
> > >  	return ret;
> > >  }
> > > diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> > > index 26ad1de8641c..d0bb679fd668 100644
> > > --- a/fs/f2fs/f2fs.h
> > > +++ b/fs/f2fs/f2fs.h
> > > @@ -1051,6 +1051,8 @@ struct f2fs_io_info {
> > >  	bool retry;		/* need to reallocate block address */
> > >  	enum iostat_type io_type;	/* io type */
> > >  	struct writeback_control *io_wbc; /* writeback control */
> > > +	struct bio **bio;		/* bio for ipu */
> > > +	sector_t *last_block;		/* last block number in bio */
> > >  	unsigned char version;		/* version of the node */
> > >  };
> > >  
> > > @@ -3093,6 +3095,7 @@ void f2fs_submit_merged_write_cond(struct f2fs_sb_info *sbi,
> > >  				nid_t ino, enum page_type type);
> > >  void f2fs_flush_merged_writes(struct f2fs_sb_info *sbi);
> > >  int f2fs_submit_page_bio(struct f2fs_io_info *fio);
> > > +int f2fs_merge_page_bio(struct f2fs_io_info *fio);
> > >  void f2fs_submit_page_write(struct f2fs_io_info *fio);
> > >  struct block_device *f2fs_target_device(struct f2fs_sb_info *sbi,
> > >  			block_t blk_addr, struct bio *bio);
> > > diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
> > > index 204d31e58967..b0e6331a5d95 100644
> > > --- a/fs/f2fs/segment.c
> > > +++ b/fs/f2fs/segment.c
> > > @@ -3158,7 +3158,10 @@ int f2fs_inplace_write_data(struct f2fs_io_info *fio)
> > >  
> > >  	stat_inc_inplace_blocks(fio->sbi);
> > >  
> > > -	err = f2fs_submit_page_bio(fio);
> > > +	if (fio->bio)
> > > +		err = f2fs_merge_page_bio(fio);
> > > +	else
> > > +		err = f2fs_submit_page_bio(fio);
> > >  	if (!err)
> > >  		update_device_state(fio);
> > >  
> > > 
> 
> 
> _______________________________________________
> Linux-f2fs-devel mailing list
> Linux-f2fs-devel@lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/linux-f2fs-devel
