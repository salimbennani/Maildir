Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:42:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 89F035805CF
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 10:46:12 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 10:46:12 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A4zluIRddxv5ta5zBkOq27LTGlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc24YBGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBDOQBMulEoIbgpVQBoxSwCxS0BO7tyDFFiWL60KMm3+Q7Dw7GxxctH84XsH?=
 =?us-ascii?q?nOsNn5KL0fXOKzwaLVzTvDdfRW2TLl5YbGaB8hp/CMUqx0ccHM00cjDR7Og0iO?=
 =?us-ascii?q?poz/JTOazOINs2eB6OF9Uu+gkHAoqxtroje1wMcshZfGi5kPyl/a6Cp5wJw6Jc?=
 =?us-ascii?q?GiREFnZt6kFYJduieHPIV4RcMiRntnuCc8yrAevZ60ZjUKyJI7yB7fc/yIaZWH?=
 =?us-ascii?q?7gjlVOmPPTd0nGhld6yiiBay60eg1vfwWdWz0FZPtiZKicfDtmoX1xPJ7MiHRe?=
 =?us-ascii?q?Vy8l291jaI0gDf8u9EIUQ1laXHKJ4h2KQ8mYYUsUTGBiP2nET2g7SIdkUl4Oio?=
 =?us-ascii?q?9/7rYrL8pp+TL4N7lAf+Mrg0lcy5DuQ4NhYBU3GD+eS8073j4Ur5TK9Njv0sna?=
 =?us-ascii?q?nVqJHaJcIApq6lGQBV3Zwj5Ay6Dzu8zNsYmnwHIVRYcxyEl4jkI0/CLOz7APul?=
 =?us-ascii?q?nligjTRmy+rYMrDvApjBNGXPnbX5cbpj90JRzBA/wc1R6p5KEL0NPfH+V0HruN?=
 =?us-ascii?q?DGDRI0NRG/zfz9B9VnzIweXHqCAq+HP6PWtl+F/uYvI+iXZI8JozbxMfcl5/jz?=
 =?us-ascii?q?jXMjnl8dZ6ap0YMWaHC+APtmP12UbWTwjtoCC2sGoxcyQe/whFGcXzNeZ2y+U7?=
 =?us-ascii?q?8+6z0jDYKpF4bDRoSjgLyb2ye7G4VbZnlYBVCJDHfkbpiLVOkSaC2MJs9tiycL?=
 =?us-ascii?q?Vb+8S48nyR6hqhT6x71jLurV+S0Xq4jv1ddo5+DLkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD3LN+g/xfE9xT6PVJUhogOZ7b1ex6BMj+WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCk1TtIwwN8BfVxxGtq/jh3Y2yqqArkVl6GEBZAu86Lc2WTxKNh5y3rcyK?=
 =?us-ascii?q?YhiFwmEYNyM3a7jPt/6xTLHNyO1EGYjLqxM6Ib2iHL6SGE12XJuUhZVAt5V+LC?=
 =?us-ascii?q?RWweYU3N6s30416HQ7KwBLB0Dw1a1MTXL6JLbsHu30xLQeqmNNnAbmb0gWqpGB?=
 =?us-ascii?q?uT2puKa4zlfXhb2z/SX1MZmQIe9mrTKA4lGy26qHjfBjE9KVW6TE72/aFer321?=
 =?us-ascii?q?S0YyyUnebFdox7ex0gQYifyVV7UY2bdS6x0sszFlIFHo89vQCteE7zInNI9Re8?=
 =?us-ascii?q?k05ljGnTbTuhZnN5qvIoh4i1IeehgxtETrgUZZEIJFxOQjqnInyEJKb+qy3Ulb?=
 =?us-ascii?q?fjWXXNikMLDNMGD08x2HcaPa2ljClt2R//Fcu7wDt1z/sVTxRQIZ+HJ93owQii?=
 =?us-ascii?q?PE6w=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AiAACZPxlchxHrdtBjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBZYExKoEPgRYTg3yIeIscgg2KDI9BFRgLCYRAgl0iOBIBAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQfCikDAgEBA?=
 =?us-ascii?q?gYBAQoOCgICBR0EAgIDAQsFKSATBYJSSwGBeAgBBAqnLnwzhC0BgQMPg2CBCQW?=
 =?us-ascii?q?BC4s0EQaBf4ERgxKCEIEOAgIYgUeDCDGCJgKhJAcChw+GY4NiDBiCAId2h2GOO?=
 =?us-ascii?q?4s4gV2Bd3AVggiBHxKCFRcSgziEWTuFP0ExAYEGHItNgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AiAACZPxlchxHrdtBjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BZYExKoEPgRYTg3yIeIscgg2KDI9BFRgLCYRAgl0iOBIBAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECIAQfCikDAgEBAgYBAQoOCgICBR0?=
 =?us-ascii?q?EAgIDAQsFKSATBYJSSwGBeAgBBAqnLnwzhC0BgQMPg2CBCQWBC4s0EQaBf4ERg?=
 =?us-ascii?q?xKCEIEOAgIYgUeDCDGCJgKhJAcChw+GY4NiDBiCAId2h2GOO4s4gV2Bd3AVggi?=
 =?us-ascii?q?BHxKCFRcSgziEWTuFP0ExAYEGHItNgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="142634737"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 10:46:09 -0800
Received: from localhost ([::1]:55886 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZKNd-0005V7-7s
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 13:46:09 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51666)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berrange@redhat.com>) id 1gZKNH-0005V0-J5
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 13:45:48 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berrange@redhat.com>) id 1gZKNE-00054S-Pz
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 13:45:47 -0500
Received: from mx1.redhat.com ([209.132.183.28]:37520)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <berrange@redhat.com>) id 1gZKNC-0004nW-O1
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 13:45:42 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com
	[10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id F42032D80B
	for <qemu-devel@nongnu.org>; Tue, 18 Dec 2018 18:45:40 +0000 (UTC)
Received: from redhat.com (ovpn-112-58.ams2.redhat.com [10.36.112.58])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 4A0B15D6A6;
	Tue, 18 Dec 2018 18:45:35 +0000 (UTC)
Date: Tue, 18 Dec 2018 18:45:32 +0000
From: Daniel =?utf-8?B?UC4gQmVycmFuZ8Op?= <berrange@redhat.com>
To: Gerd Hoffmann <kraxel@redhat.com>
Message-ID: <20181218184532.GA18660@redhat.com>
References: <20180222070513.8740-1-kraxel@redhat.com>
	<20180222070513.8740-6-kraxel@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20180222070513.8740-6-kraxel@redhat.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.30]);
	Tue, 18 Dec 2018 18:45:41 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v3 5/5] keymap: consider modifier state
 when picking a mapping
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-To: Daniel =?utf-8?B?UC4gQmVycmFuZ8Op?= <berrange@redhat.com>
Cc: qemu-devel@nongnu.org, Adam Williamson <awilliam@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>



On Thu, Feb 22, 2018 at 08:05:13AM +0100, Gerd Hoffmann wrote:
> Pass the modifier state to the keymap lookup function.  In case multipl=
e
> keysym -> keycode mappings exist look at the modifier state and prefer
> the mapping where the modifier state matches.
>=20
> Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
> Reviewed-by: Daniel P. Berrang=C3=A9 <berrange@redhat.com>
> ---
>  ui/keymaps.h |  3 ++-
>  ui/curses.c  |  3 ++-
>  ui/keymaps.c | 33 ++++++++++++++++++++++++++++++++-
>  ui/sdl.c     |  6 +++++-
>  ui/vnc.c     |  9 +++++++--
>  5 files changed, 48 insertions(+), 6 deletions(-)

[snip]

> diff --git a/ui/vnc.c b/ui/vnc.c
> index a77b568b57..d19f86c7f4 100644
> --- a/ui/vnc.c
> +++ b/ui/vnc.c
> @@ -1734,7 +1734,8 @@ static void reset_keys(VncState *vs)
> =20
>  static void press_key(VncState *vs, int keysym)
>  {
> -    int keycode =3D keysym2scancode(vs->vd->kbd_layout, keysym) & SCAN=
CODE_KEYMASK;
> +    int keycode =3D keysym2scancode(vs->vd->kbd_layout, keysym,
> +                                  false, false, false) & SCANCODE_KEYM=
ASK;
>      qemu_input_event_send_key_number(vs->vd->dcl.con, keycode, true);
>      qemu_input_event_send_key_delay(vs->vd->key_delay_ms);
>      qemu_input_event_send_key_number(vs->vd->dcl.con, keycode, false);
> @@ -1993,6 +1994,9 @@ static const char *code2name(int keycode)
> =20
>  static void key_event(VncState *vs, int down, uint32_t sym)
>  {
> +    bool shift =3D vs->modifiers_state[0x2a] || vs->modifiers_state[0x=
36];
> +    bool altgr =3D vs->modifiers_state[0xb8];
> +    bool ctrl  =3D vs->modifiers_state[0x1d] || vs->modifiers_state[0x=
9d];
>      int keycode;
>      int lsym =3D sym;
> =20
> @@ -2000,7 +2004,8 @@ static void key_event(VncState *vs, int down, uin=
t32_t sym)
>          lsym =3D lsym - 'A' + 'a';
>      }
> =20
> -    keycode =3D keysym2scancode(vs->vd->kbd_layout, lsym & 0xFFFF) & S=
CANCODE_KEYMASK;
> +    keycode =3D keysym2scancode(vs->vd->kbd_layout, lsym & 0xFFFF,
> +                              shift, altgr, ctrl) & SCANCODE_KEYMASK;
>      trace_vnc_key_event_map(down, sym, keycode, code2name(keycode));
>      do_key_event(vs, down, keycode, sym);
>  }

It looks like this patch is causing some buggy input handling behaviour
with VNC (and probably SDL though I didn't test)


Consider the user wants to type a "<" character.  There are two valid
key sequences for this

 down  0xffe1      (shift)
 down  0x3c        (dot)
 up    0x3c        (dot)
 up    0xffe1      (shift)

Or

 down  0xffe1      (shift)
 down  0x3c        (dot)
 up    0xffe1      (shift)
 up    0x3c        (dot)


With the original code, the "dot" character would be intepreted the
same way in both sequences.

With this patch applied, the "dot", the second sequence is broken.
The "dot" character is interpreted with no modifiers on down, and
interpreted with the shift modifier on release. This is then causing
QEMU to see a different QKeyCode on down vs up.

The trace events show the problem:

Before this patch, the two sequences show:

  18544@1545157940.945319:vnc_key_event_map down 1, sym 0xffe1 -> keycode=
 0x2a [shift]
  18544@1545157941.186608:vnc_key_event_map down 1, sym 0x3c -> keycode 0=
x56 [less]
  18544@1545157941.346898:vnc_key_event_map down 0, sym 0x3c -> keycode 0=
x56 [less]
  18544@1545157941.810041:vnc_key_event_map down 0, sym 0xffe1 -> keycode=
 0x2a [shift]

  18544@1545157943.447085:vnc_key_event_map down 1, sym 0xffe1 -> keycode=
 0x2a [shift]
  18544@1545157943.752193:vnc_key_event_map down 1, sym 0x3c -> keycode 0=
x56 [less]
  18544@1545157943.986145:vnc_key_event_map down 0, sym 0xffe1 -> keycode=
 0x2a [shift]
  18544@1545157944.258757:vnc_key_event_map down 0, sym 0x3c -> keycode 0=
x56 [less]

IOW, in both sequences we have matched pairs of events


After this patch the two sequences now show:

  19237@1545158356.679095:vnc_key_event_map down 1, sym 0xffe1 -> keycode=
 0x2a [shift]
  19237@1545158356.896528:vnc_key_event_map down 1, sym 0x3c -> keycode 0=
x33 [comma]
  19237@1545158356.993672:vnc_key_event_map down 0, sym 0x3c -> keycode 0=
x33 [comma]
  19237@1545158357.233437:vnc_key_event_map down 0, sym 0xffe1 -> keycode=
 0x2a [shift]

  19237@1545158358.726002:vnc_key_event_map down 1, sym 0xffe1 -> keycode=
 0x2a [shift]
  19237@1545158358.999542:vnc_key_event_map down 1, sym 0x3c -> keycode 0=
x33 [comma]
  19237@1545158359.201503:vnc_key_event_map down 0, sym 0xffe1 -> keycode=
 0x2a [shift]
  19237@1545158359.435021:vnc_key_event_map down 0, sym 0x3c -> keycode 0=
x56 [less]

Notice how we sent a "down(comma)" and paired it with an "up(less)". This
causes the guest to consider the key stuck down, so next time you type
a "<" it will get lost.

This is easily reproduced with gtk-vnc and the following QEMU command
line:

  ./x86_64-softmmu/qemu-system-x86_64 -vnc :1 -d trace:vnc*=20


I don't see any nice way to fix the problem without having to keep a
memory of modifier state with every "down" event, so you can use the
same modifier state with the later "up" event to ensure you get a
matching key up.  This is quite horrible though. I'm more inclined
to revert this patch and find another way to fix the original problem
which won't require the UI frontends to track modifier state.

This problem is reported in

  https://bugs.launchpad.net/bugs/1738283
  https://bugzilla.redhat.com/show_bug.cgi?id=3D1658676

Regards,
Daniel
--=20
|: https://berrange.com      -o-    https://www.flickr.com/photos/dberran=
ge :|
|: https://libvirt.org         -o-            https://fstop138.berrange.c=
om :|
|: https://entangle-photo.org    -o-    https://www.instagram.com/dberran=
ge :|

