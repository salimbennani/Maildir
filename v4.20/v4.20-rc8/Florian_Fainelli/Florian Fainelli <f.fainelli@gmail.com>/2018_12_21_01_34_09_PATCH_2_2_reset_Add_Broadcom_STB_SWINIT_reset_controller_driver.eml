Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:44:33 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 61AD058050C;
	Thu, 20 Dec 2018 17:35:12 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 17:35:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AhwoZzBbNz9ium0sEfdlPSFj/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpci7Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fmp1sWrxazHhWgCP/1xzNUnHL6wbE23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zUotXxM6cSS+G1w7POzT7eb/1Zwzb96I7WfRAlpfGMXK97fM3fyUU1GQPKlFSQ?=
 =?us-ascii?q?qYr7MDOR0uQNsnOW7+VlVe21im4nrxt9rSSoxscpk4TEgJ8exFPc9Shh3oo5Od?=
 =?us-ascii?q?m1RFRmbdOqDpdcrTyWOohqTs84Qmxluj42xqACtJKlZiQG1ZAqywTBZ/CZfYWE?=
 =?us-ascii?q?+AzvWeaNLTp+mXlrYqiwhwyo/kil0uD8Vte70FJNriddjNnMuW4C1wbJ5siEVP?=
 =?us-ascii?q?R95EGh1iiL1wzJ7eFEO080mbLaK54n3LEwioIevVrfEiLygkn6kaGbels+9uS1?=
 =?us-ascii?q?6Onrfq/qq56eOoNsjwHxKKUumsixAeQiNQgOWnCW+eC91L3l4E34T6xGjv4ona?=
 =?us-ascii?q?nDtpDVO8Abqre+Aw5b1IYs9Qy/Aiy40NQXg3YHNkhJeBGZgIjzPVHBPvT4Ae24?=
 =?us-ascii?q?g1S2nzdn3+rGMaH5ApXRMnjDl6/sfbJ8605f1gU/199e549PB7EFIfLzXFLxtd?=
 =?us-ascii?q?PCAh84NQy03/joCNFn2owCXmKPB7eTMLnOvl+Q+uIvP+6MaZcVuDnnKvgl++Th?=
 =?us-ascii?q?jXgjlV8dYKmmx50XaH+jE/RiIkWZZ2fsg9gbHWcLuAo+UPLliFmYXTFPYHayWr?=
 =?us-ascii?q?o25isnB4K+EYfDWoetjaSb0yegHp1WYWNGBkqWEXjydYWJQPMMaCOUIs98nT0I?=
 =?us-ascii?q?T7mhS4k91R6wsA/20aZoLu3R+icAr5LsyMB15/HPlRE17TF0DN6S02eXQ2Fwn2?=
 =?us-ascii?q?MHXTk23K9krEx5y1eD17V4gvNCGdxS4fNJThk1NZrGw+NmDNDyXxrLfs2VR1a+?=
 =?us-ascii?q?XtWmHTYxQ8oszNAUfUZyBc+ujhDZ0CqsGL8aibqLCJsw8qLf2njxI91wy3LH1K?=
 =?us-ascii?q?knklknTdFDNWyghq5j6QfTA5TFnFmel6avba4cxjLC9H+fzWqSu0FVSBN/Xr/b?=
 =?us-ascii?q?XX8BfEfWrc725kXZT7CwD7QqKQ9Byc+EKqtXZdzll1RGRPH/ONvAZ2K9gXu/BR?=
 =?us-ascii?q?GNxrmUdorlZ30d3DnBCEgDiw0T4XeGNQ05Bie9o2LfDCZiFU71b0Pr6+l+rHK7?=
 =?us-ascii?q?Tkk7zwyRa01h1ry1+gMahPCGSvMT2K4EtzklqzluAFm92NfWAcKapwV9ZKVcfc?=
 =?us-ascii?q?894FBf2G3DswxyIJOhIL5ih1IEaAt3ol7h2A9xCoVDlsgqsmgnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDkoj82h939ZJyX?=
 =?us-ascii?q?ed55XKAxAUUZL+SUs38xl6p7fHYigy/Y/U1HtsMbWqvT/Gwd4mGOwlyhO4dddF?=
 =?us-ascii?q?LKyEDBPyE9EdB8W2MuwqmkSmYQgePO9P8644JcWmeOWc2K6qJepvgCipjWBa74?=
 =?us-ascii?q?9jyEKM8Cx8R/XM35YExfGYwwSGWy39jFenrsD4h4REaSsOEWq4zCjuHJRRabFq?=
 =?us-ascii?q?fYYXFWeuJNW6x9V/h5L3W39U7kWjB04A2MKyfRqSblr93RBf1EgNoHynnze4wC?=
 =?us-ascii?q?Jwkz0zsqWf2ynOyfz4dBUbIm5LWHVijVD0LIi2ld8aRkuobwsulBe//kb13atb?=
 =?us-ascii?q?pKd+L2nVX0hIeTP7L2VjUqu2q7qDbNRD6JIusSVLTuu8ZUqWRaL6oxsfyynjBX?=
 =?us-ascii?q?dRxCgndzG2vZX0hxx7h3iaLHpprnrZeMdwyAzb5NzdQ/5RwzUHSDN5iTnRGliz?=
 =?us-ascii?q?Id2p8c+ImJfEt+C0T3ihWYFLcSn30YOAszO25W5wDh2+hfyzmsDnHhI80S/0zN?=
 =?us-ascii?q?RqUSTIrBDhYojkzai6MORnflV2C1/48cZ1BoZ+ko4ojpEKxXcanomV/WYAkWrr?=
 =?us-ascii?q?NNVb2KH+Y2AXST8F3dHV+xTl11N5Ln2S2Y35THqdz9BlZ9m7ZGMWxy0849pLCK?=
 =?us-ascii?q?eS8LxLgy91rkCkogLWZPh3hi0dxuc26H4Gn+EJvxIgzjmaArAXB0VZPDbjlxKV?=
 =?us-ascii?q?79Clt6VXZX2icbyx1Ep4gNCgA6uOogBaWHblZJgiGTV84dl4MFLJyHfz8J3reM?=
 =?us-ascii?q?HMbdIPsR2ZiwzPgPJSKJI1i/oGny5nOX/msH0hyu47iwFu3J6gsIiGLWVt4Ly2?=
 =?us-ascii?q?AhpCOjLpYMMT/ynnjbxCkcaOw4CvApJhFy0JXJTySPKnDikSue77NwqUEz08t3?=
 =?us-ascii?q?SbGafZHQCF80drtHbPE5GtN3GKK3gV19RiRB+BJENBhAAYRik1npk8Fgqy3szu?=
 =?us-ascii?q?bF955iwN5l7/shZNyuVoNwTmUmfCvgiobC04SIOYLBpQ4QFP/EPVMc2Y7uJuEC?=
 =?us-ascii?q?BU5JyhrAqRKmOFYwREF30GWkuBB1r7JLmh+cHA8/SEBuq5N/bOYauBqe1dV/eL?=
 =?us-ascii?q?xJKjyIhm/yyLNsWAIHZiFeA72lFYUHB9GsTZnSgPSiMNmyLMac6buAmz+iltos?=
 =?us-ascii?q?+j9/TrXRrl5ZGTBLtKLdVv5xe2jL+ZOO6Nnyl5MyhX15MWyX/MybgSx1oSiyBo?=
 =?us-ascii?q?dzmwHrUMry/NTKTMmqBJCx4XcT98NMxN76gkxAlCJdbbis/p1r5/lvM1F1ZFVV?=
 =?us-ascii?q?n7ls61f8AFP2G9O03BBEuQMLSGJDvLw9z4YK+mSL1QivlUuAO0uTqBD0DjOTGD?=
 =?us-ascii?q?nSHzVx+zKeFMkD2bPBtGtYC9aBltD23jTNPgahKjMd53jSc5wbs7hn7RMW4cMD?=
 =?us-ascii?q?58c15Cr7GK7CNYhOl/FHJF7nZ/MeaEnCOZvKHkLcMO9+liCClwv/pX5nsn16FS?=
 =?us-ascii?q?6iBUAvB43GPWr9hzsxSln/OJxz5PThVDsHBIiZiNsEEkPr/WpbdaXnOR0hYK92?=
 =?us-ascii?q?SZDVwkrtpjB9nruugExJ7BnaP1JTNG8vrb+MIdA47fL8fRYylpCgbgBDOBVFhN?=
 =?us-ascii?q?djWsL2yKwhUFyPw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAB2Qhxch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBaLe4IhiRKONxSBXxMBARgTAYcuIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYgMDAQIkGQEbHQEDAgkBAQUQOwMeAhEBBQEcBxIFg?=
 =?us-ascii?q?x2BaQEDFQWbSzyMFRYFAReCdwWEQAoZJw1egTcCBhKHbIMlgRyBVz+BEYVpgW8?=
 =?us-ascii?q?khXYCj1x/kC8zBwKOM4MmDBhhiReHZSyJIYYNigwCBAIEBQIFDyGBJYIOTSOBA?=
 =?us-ascii?q?YI7ghsMF4NKinQfMoEFAQGNYAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAB2Qhxch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBaLe4IhiRKONxSBXxMBARgTAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYgMDAQIkGQEbHQEDAgkBAQUQOwMeAhEBBQEcBxIFgx2BaQEDFQWbSzy?=
 =?us-ascii?q?MFRYFAReCdwWEQAoZJw1egTcCBhKHbIMlgRyBVz+BEYVpgW8khXYCj1x/kC8zB?=
 =?us-ascii?q?wKOM4MmDBhhiReHZSyJIYYNigwCBAIEBQIFDyGBJYIOTSOBAYI7ghsMF4NKinQ?=
 =?us-ascii?q?fMoEFAQGNYAEB?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="67805400"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 20 Dec 2018 17:35:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390634AbeLUBfJ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 20:35:09 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:34203 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2388683AbeLUBfF (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 20:35:05 -0500
Received: by mail-pl1-f193.google.com with SMTP id w4so1717474plz.1;
        Thu, 20 Dec 2018 17:35:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=lvNiz1sJUN3u4plyiJIU8RxNvE8IqOxkEmcLaSL2s9E=;
        b=I/F1IbSqypDVMmpm8s6j1LcPFTXJVOZW2zuejfnZiDSqFjQjsjiUXYZAPEk7SekDM3
         9i9rNGjui+cV5pYQ9sYZkUbxuiGrR0UBbJmkKXbK2qYKxpPDM1Ee7dc0qvPBunFBiwYj
         21UkHnWqxm70qknUyldt6QcCgydjfyOZkTnYCCjEotT4JJPxoxH8/++DwggzNX7rgCg5
         aPf51nceW6JphEYmRHeGOJqdnUGhzr2Aa8Au+QdGTLSslplv5FJGwSxSrJoTpq9VNnPZ
         Md7XsIrYPwX+6zcAoG+WGPFmvHfka79r+AUN5YjPY/QwtKvpJsB/SByvubkGmH33uzdw
         TLtg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=lvNiz1sJUN3u4plyiJIU8RxNvE8IqOxkEmcLaSL2s9E=;
        b=TRuGQeLKVyVAvX69axUJY148dUCy+MwtNkG9b8YSsstGRzvPDed9jEU//7/ByDwxmR
         zRUAL6s7YR2gJCnyOdIUjVFK75TTLT0C+UeVcBdaSSgJZojFT2ve5kgu3bu5OSyMa/WL
         K3l4RRuynXrvRQoS7E3EUB4+n1yeS6UOs4SeZHlmTFNF2x46Ao7H5AHaA/dYs288CoRV
         dzvwombkkWiALCWONz+7Zc/roSpk33lTMTQyZcuxqEFkqC9OwsfufpVMw3Hahz+UFyvL
         fMk48lKxSTnP+K55yaNXDGVvZTQldOfwzAEhBViDiUl2Vu6LTKFNLzVopFF/BmJSNcBL
         z2fQ==
X-Gm-Message-State: AJcUukevRIGxmBvBrjInR8STVAR2Fo4OpJ3EfC5Fzgl3NtXa1+Lf2uC9
        0dE2Hui7BZK2IyLnJ0MQvoU=
X-Google-Smtp-Source: ALg8bN4DewViTg+GKJQ0oCcmcZCNie0uw4RNm1NwGuvwRV5jIG2NgGWSwXsAY6WYMP/jhcWVJkSX1Q==
X-Received: by 2002:a17:902:5601:: with SMTP id h1mr557187pli.160.1545356103605;
        Thu, 20 Dec 2018 17:35:03 -0800 (PST)
Received: from fainelli-desktop.igp.broadcom.net ([192.19.223.250])
        by smtp.gmail.com with ESMTPSA id g70sm36590854pfg.98.2018.12.20.17.35.02
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 20 Dec 2018 17:35:02 -0800 (PST)
From: Florian Fainelli <f.fainelli@gmail.com>
To: p.zabel@pengutronix.de, linux-kernel@vger.kernel.org
Cc: Florian Fainelli <f.fainelli@gmail.com>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Brian Norris <computersforpeace@gmail.com>,
        Gregory Fong <gregory.0xf0@gmail.com>,
        bcm-kernel-feedback-list@broadcom.com (maintainer:BROADCOM BCM7XXX ARM
        ARCHITECTURE),
        devicetree@vger.kernel.org (open list:OPEN FIRMWARE AND FLATTENED
        DEVICE TREE BINDINGS),
        linux-arm-kernel@lists.infradead.org (moderated list:BROADCOM BCM7XXX
        ARM ARCHITECTURE)
Subject: [PATCH 2/2] reset: Add Broadcom STB SW_INIT reset controller driver
Date: Thu, 20 Dec 2018 17:34:09 -0800
Message-Id: <20181221013409.14324-3-f.fainelli@gmail.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181221013409.14324-1-f.fainelli@gmail.com>
References: <20181221013409.14324-1-f.fainelli@gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add support for resetting blocks through the Linux reset controller
subsystem when reset lines are provided through a SW_INIT-style reset
controller on Broadcom STB SoCs.

Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
---
 drivers/reset/Kconfig         |   7 ++
 drivers/reset/Makefile        |   1 +
 drivers/reset/reset-brcmstb.c | 121 ++++++++++++++++++++++++++++++++++
 3 files changed, 129 insertions(+)
 create mode 100644 drivers/reset/reset-brcmstb.c

diff --git a/drivers/reset/Kconfig b/drivers/reset/Kconfig
index 2e01bd833ffd..1ca03c57e049 100644
--- a/drivers/reset/Kconfig
+++ b/drivers/reset/Kconfig
@@ -40,6 +40,13 @@ config RESET_BERLIN
 	help
 	  This enables the reset controller driver for Marvell Berlin SoCs.
 
+config RESET_BRCMSTB
+	bool "Broadcom STB reset controller" if COMPILE_TEST
+	default ARCH_BRCMSTB
+	help
+	  This enables the reset controller driver for Broadcom STB SoCs using
+	  a SUN_TOP_CTRL_SW_INIT style controller.
+
 config RESET_HSDK
 	bool "Synopsys HSDK Reset Driver"
 	depends on HAS_IOMEM
diff --git a/drivers/reset/Makefile b/drivers/reset/Makefile
index dc7874df78d9..7395db2cb1dd 100644
--- a/drivers/reset/Makefile
+++ b/drivers/reset/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_RESET_A10SR) += reset-a10sr.o
 obj-$(CONFIG_RESET_ATH79) += reset-ath79.o
 obj-$(CONFIG_RESET_AXS10X) += reset-axs10x.o
 obj-$(CONFIG_RESET_BERLIN) += reset-berlin.o
+obj-$(CONFIG_RESET_BRCMSTB) += reset-brcmstb.o
 obj-$(CONFIG_RESET_HSDK) += reset-hsdk.o
 obj-$(CONFIG_RESET_IMX7) += reset-imx7.o
 obj-$(CONFIG_RESET_LANTIQ) += reset-lantiq.o
diff --git a/drivers/reset/reset-brcmstb.c b/drivers/reset/reset-brcmstb.c
new file mode 100644
index 000000000000..17a0bcdd6c9a
--- /dev/null
+++ b/drivers/reset/reset-brcmstb.c
@@ -0,0 +1,121 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Broadcom STB generic reset controller for SW_INIT style reset controller
+ *
+ * Copyright (C) 2018 Broadcom
+ *
+ */
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/reset-controller.h>
+#include <linux/types.h>
+
+struct brcmstb_reset {
+	void __iomem *base;
+	unsigned int n_words;
+	struct device *dev;
+	struct reset_controller_dev rcdev;
+};
+
+#define SW_INIT_SET		0x00
+#define SW_INIT_CLEAR		0x04
+#define SW_INIT_STATUS		0x08
+
+#define SW_INIT_BIT(id)		BIT((id) & 0x1f)
+#define SW_INIT_BANK(id)	(id >> 5)
+
+#define SW_INIT_BANK_SIZE	0x18
+
+static inline
+struct brcmstb_reset *to_brcmstb(struct reset_controller_dev *rcdev)
+{
+	return container_of(rcdev, struct brcmstb_reset, rcdev);
+}
+
+static int brcmstb_reset_assert(struct reset_controller_dev *rcdev,
+				unsigned long id)
+{
+	unsigned int off = SW_INIT_BANK(id) * SW_INIT_BANK_SIZE;
+	struct brcmstb_reset *priv = to_brcmstb(rcdev);
+
+	writel_relaxed(SW_INIT_BIT(id), priv->base + off + SW_INIT_SET);
+	msleep(10);
+
+	return 0;
+}
+
+static int brcmstb_reset_deassert(struct reset_controller_dev *rcdev,
+				  unsigned long id)
+{
+	unsigned int off = SW_INIT_BANK(id) * SW_INIT_BANK_SIZE;
+	struct brcmstb_reset *priv = to_brcmstb(rcdev);
+
+	writel_relaxed(SW_INIT_BIT(id), priv->base + off + SW_INIT_CLEAR);
+	msleep(10);
+
+	return 0;
+}
+
+static int brcmstb_reset_status(struct reset_controller_dev *rcdev,
+				unsigned long id)
+{
+	unsigned int off = SW_INIT_BANK(id) * SW_INIT_BANK_SIZE;
+	struct brcmstb_reset *priv = to_brcmstb(rcdev);
+
+	return readl_relaxed(priv->base + off + SW_INIT_STATUS);
+}
+
+static const struct reset_control_ops brcmstb_reset_ops = {
+	.assert	= brcmstb_reset_assert,
+	.deassert = brcmstb_reset_deassert,
+	.status = brcmstb_reset_status,
+};
+
+static int brcmstb_reset_probe(struct platform_device *pdev)
+{
+	struct device *kdev = &pdev->dev;
+	struct brcmstb_reset *priv;
+	struct resource *res;
+
+	priv = devm_kzalloc(kdev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	priv->base = devm_ioremap_resource(kdev, res);
+	if (IS_ERR(priv->base))
+		return PTR_ERR(priv->base);
+
+	dev_set_drvdata(kdev, priv);
+
+	priv->rcdev.owner = THIS_MODULE;
+	priv->rcdev.nr_resets = (resource_size(res) / SW_INIT_BANK_SIZE) * 32;
+	priv->rcdev.ops = &brcmstb_reset_ops;
+	priv->rcdev.of_node = kdev->of_node;
+	/* Use defaults: 1 cell and simple xlate function */
+	priv->dev = kdev;
+
+	return devm_reset_controller_register(kdev, &priv->rcdev);
+}
+
+static const struct of_device_id brcmstb_reset_of_match[] = {
+	{ .compatible = "brcm,brcmstb-reset" },
+	{ /* sentinel */ }
+};
+
+static struct platform_driver brcmstb_reset_driver = {
+	.probe	= brcmstb_reset_probe,
+	.driver	= {
+		.name = "brcmstb-reset",
+		.of_match_table = brcmstb_reset_of_match,
+	},
+};
+module_platform_driver(brcmstb_reset_driver);
+
+MODULE_AUTHOR("Broadcom");
+MODULE_DESCRIPTION("Broadcom STB reset controller");
+MODULE_LICENSE("GPL");
-- 
2.17.1

