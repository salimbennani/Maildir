Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:48:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 05BB0580261;
	Fri, 21 Dec 2018 01:40:32 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 01:40:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AU2+qHhU4Y+r99A9VzL5kZsEoEQjV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCCuKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBPuhWoYfyqFQMohSiCgesBfjvyidKi3Ltwa030f4sHR3a0AEuHd8Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41LXGzTLYYPxIwzf99I/IeQ08r/6WRrJwatfRwlQoGgPfiVWf?=
 =?us-ascii?q?spLqPymJ1uQKqWSb9PBvVfm0i246sAxxoiWvyd0ii4bXh4IZ0EzL9SJ8wIssI9?=
 =?us-ascii?q?CzVU11Yca8HZdOqy2XM5F6Tt4sTm12oio2174LtYKhcCULypkr3wPTZ+Cdf4SW?=
 =?us-ascii?q?/B7vSPydLSp2iX9lYr6zmgi+/Va4xuHhVcS50ExGojdHn9TNrHwA1R3e5tKZRv?=
 =?us-ascii?q?dg4kus3yuE2RrJ5eFeO080kLLWK54/zb40kZoeqVrDHiDol0XslqOWdVsr+vKu?=
 =?us-ascii?q?6+v5ZrXqvJicN5V7ig3mM6QunNKwAfggPwQQQ2SW/f6w2KDt8EHnWrlGk/47nr?=
 =?us-ascii?q?XDvJ3bJ8kXvqu5DBVU0oYn5Ra/FTCm0NEAkHkDLVJFfg+HjofwN1HNPv/4F/G/?=
 =?us-ascii?q?jEqokDtywPDHMLvhDYvXLnXYjrfhcqhy61RGxAow099f/ZRUBa8FIP7pXU/xrt?=
 =?us-ascii?q?PYAgcjMwOo2+bnFMl91oQGVGKLA6+ZM73dvUWH5+IyOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTOzlklyCUSJJaHa1Ra?=
 =?us-ascii?q?485iw7B5igDYfMXY2thL2B3CGmHpxZfGxGC1aMEWv2eIWAQfsDdCWSIsp5mDwe?=
 =?us-ascii?q?SbehU5Mh1Q2ptALi0bVnNerU+iobtZ75zth6/e/TmAo29Tx1CcSdzm6MQ3t1nm?=
 =?us-ascii?q?MOWz85wqR/rVZhxVeE1Khym+ZYGsBL5/NVTgc6MobRz+9gBND0QA7BetaJR0yg?=
 =?us-ascii?q?QtWpGjwxStMxw9kTY0dyAdmijxbD3za0DL8RjbCEGJs08qfE1XjrO8l902rG1L?=
 =?us-ascii?q?Umj1Q+X8RAL3OmibBl+wjTHYHJlV6ZmLisdagb2C7N92KDzW6VsUFcUQ5wV7jF?=
 =?us-ascii?q?XH8FakvXq9T5+l3NT7u0Bbs7NQtBzNaIKrFWZd3xkVVGWPDjNczDbG2rhWe/Gw?=
 =?us-ascii?q?yExrOWY4rsYGUSwiPdBVMAkwAS+3aGKAc/Cj2go2LYEDxhC1bvb1nw/ul5rXOx?=
 =?us-ascii?q?VlU0wB2Sb019y7q1/QYYheCdS/MW2bIEpCchqjVuEFahxd7WDMCApw5gfKVabt?=
 =?us-ascii?q?Mw+1NH1WPftwxgMZ2sNaFihlgCcwtpu0PizQl4CoJFkcIytnMl0BJyKb6E0FNG?=
 =?us-ascii?q?bz6Xx5TwNaPYK2bs/BGjcbXZ2kzD39mM/KcP6/M4q0v4sQGtF0oi9Whn0tZP33?=
 =?us-ascii?q?ud4JXKEBQdUZbrXkkr8Bh6oqnQYjMh6IPMyX1sLa60vyfC2tI0Hucq1gysftZf?=
 =?us-ascii?q?MKyeEg/yHNYXB8yvKOwshlioYQgIPOFU9K4oIcymc+GK17KsPOZlhDiml3hI4J?=
 =?us-ascii?q?hh0kKQ8CpxUvTI35cZzP6CxAuISjD8gE2nss/pg4BEZCgeEXalxijgGYFeeLdy?=
 =?us-ascii?q?fYENCWq1J823x9N+h4PiWnJC9V6jAU8G19GteRaIc1P92ghQ31wNoXO7gSu40y?=
 =?us-ascii?q?B0kzYxo6uf3SzC2eTjeAAcOm5WQmlvllPsIYmyj9AHU0mkdQkplB255Unkw6hX?=
 =?us-ascii?q?vrhwL27WQU1QZSj5M3liUrestrqFe8NP6oknsT9UUOS/ZlCWUKX9rAEZ0yPgHm?=
 =?us-ascii?q?tewi40dzext5X9nhx6jn+dLXlpoHrYf8Fw2QnQ5NjGSfFN2ToGQTFyiSPLCVik?=
 =?us-ascii?q?I9mp4dKUmo/Ds++kUGKtTJ9TcSjtzY6bsCu75GtqAQCwnvypm93nFxQ63jH/19?=
 =?us-ascii?q?VwSSrIqxP8aJHx16umKeJnYlVoBFjk5sp5AI5+k5E8hJEN2XcAgJWV8mEKkWPy?=
 =?us-ascii?q?MdVdxKL/Y2ABRT8Nw97J/gfl3FdvIW6Ox4L8Tn+d2NduZ8GmYmMK3SIw98VKCK?=
 =?us-ascii?q?aX7LNehyd0rES3rRnNYfdjhDcS0uUh6GQVg+wSvAotzyOdAq0dHEVCPCzskQiI?=
 =?us-ascii?q?4M66rKlNeGmvdr2w3lJknd+9FLGCvh1cWHHhd5c+Gi9w699zMVPW333194HkY8?=
 =?us-ascii?q?LQbdMIux2QkhfAifVVKZ0rmvoLgypnJXzyvXk/x+Enihxu2ImwvJKbJGV14KK5?=
 =?us-ascii?q?HhlYOyXuaMwJ/THtibtektyS34CyBZhhHjQLXJ31TfOnCj4StPLnNxqQHz04sH?=
 =?us-ascii?q?uUBb3fHQqH4kd8s33PC4yrN22QJHQBz9VtXhydK1JEgAwOQDU2hJ05Fh2pxMz8?=
 =?us-ascii?q?dkd2/CsR60X8qhtNzOJoKhb+Xn3epAeudjc7VpyfIABK4QFF4kffKdae4f5rHy?=
 =?us-ascii?q?FE4p2hqxSAK2ycZwRVFGEJR1aLB1b5Mrm14tnA9eeYC/G6L/vPZ7WOtONfW+2J?=
 =?us-ascii?q?xZKpzotp4TKMOt+TMXllCv0xwlBDUmxhG8TFhzUPTDQalyLTYM6apxe8+Sx3ot?=
 =?us-ascii?q?q88PTxXwLv6pWAC6FPMdV04B22haaDN+iNhCd2MzpY15UMxWPWx7gbxlIdlyZu?=
 =?us-ascii?q?dzy1G7QaqSHNVL7QmrNQDxMDcSxzKdBH77gi0QhNI8LbjtL126V8jv40DVdFSF?=
 =?us-ascii?q?PgltuoZcwMP2GyKlfHCFyXO7SBID3B29v3br+kSb1MkOVUsAW9uSqaE0/mJDiM?=
 =?us-ascii?q?iyPlWAyvMe5SiiGWJxheuIC7chZwBmnvVtPmahunMNBpiT0626E7hnTPNWQEKz?=
 =?us-ascii?q?hzb1tNrqGM7SNfmvh+G3ZO7nxgLemFnSaW9+jZKpYMvvttDSR5jOZa4HU8y7tI?=
 =?us-ascii?q?4yBIXv11mC3OrtFwp1GqiPWAyj1iUEkGljEepouRvkZlcZ7Q9ZpBX3vCtEYP5H?=
 =?us-ascii?q?+TCBNMvNJmCdzptqZ4ztnJibK1KTFe/taS9swZUZv6MsWCZUAmOxfzBDmcNwIe?=
 =?us-ascii?q?ViPjYXvYjUFHjPbU7XSOtYUSqoXlh5cPDLRcUQpmRbshFk15EYlac99MVTQ+nO?=
 =?us-ascii?q?ve1ZZQ6A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AXAADksxxch0O0hNFOFhwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVIGAQELAYNrJwqDc5QVgWAtFGiWYxSBXxUYEwGHLiI1CA0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQgNCQgpL4I6KQGCZwECAwECIAQRQQYJAQEKGAICDxcCAgNEEAYNAQUCA?=
 =?us-ascii?q?QEBgx2CAgQBpi98M4VAhHaBC4s0gVc/gREngjY1gVSCaiuDIIJXAoknJIF3hGO?=
 =?us-ascii?q?RGQcCgiUEjzcGGIoLh1QskmmGfoFIAYILMxojUIJsgiYBF44ePgEBMQGBAwEBA?=
 =?us-ascii?q?Q6Ma4EfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AXAADksxxch0O0hNFOFhwBAQEEAQEHBAEBgVIGAQELAYN?=
 =?us-ascii?q?rJwqDc5QVgWAtFGiWYxSBXxUYEwGHLiI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpL?=
 =?us-ascii?q?4I6KQGCZwECAwECIAQRQQYJAQEKGAICDxcCAgNEEAYNAQUCAQEBgx2CAgQBpi9?=
 =?us-ascii?q?8M4VAhHaBC4s0gVc/gREngjY1gVSCaiuDIIJXAoknJIF3hGORGQcCgiUEjzcGG?=
 =?us-ascii?q?IoLh1QskmmGfoFIAYILMxojUIJsgiYBF44ePgEBMQGBAwEBAQ6Ma4EfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,380,1539673200"; 
   d="scan'208";a="56833028"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 01:40:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2387927AbeLUJk0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 04:40:26 -0500
Received: from lhrrgout.huawei.com ([185.176.76.210]:32817 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1731114AbeLUJkZ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 04:40:25 -0500
Received: from LHREML712-CAH.china.huawei.com (unknown [172.18.7.108])
        by Forcepoint Email with ESMTP id 93404C90874A1;
        Fri, 21 Dec 2018 09:40:22 +0000 (GMT)
Received: from [10.220.135.122] (10.220.135.122) by smtpsuk.huawei.com
 (10.201.108.35) with Microsoft SMTP Server (TLS) id 14.3.408.0; Fri, 21 Dec
 2018 09:40:14 +0000
Subject: Re: [PATCH v7 1/5] tpm: dynamically allocate the allocated_banks
 array
To: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
CC: <zohar@linux.ibm.com>, <david.safford@ge.com>,
        <monty.wiseman@ge.com>, <linux-integrity@vger.kernel.org>,
        <linux-security-module@vger.kernel.org>,
        <linux-kernel@vger.kernel.org>, <silviu.vlasceanu@huawei.com>
References: <20181213102945.30946-1-roberto.sassu@huawei.com>
 <20181213102945.30946-2-roberto.sassu@huawei.com>
 <20181220145500.GA10652@linux.intel.com>
From: Roberto Sassu <roberto.sassu@huawei.com>
Message-ID: <0900a894-e17b-edc8-fa30-db7d16665082@huawei.com>
Date: Fri, 21 Dec 2018 10:40:09 +0100
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181220145500.GA10652@linux.intel.com>
Content-Type: text/plain; charset="utf-8"; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.220.135.122]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/20/2018 3:55 PM, Jarkko Sakkinen wrote:
> On Thu, Dec 13, 2018 at 11:29:41AM +0100, Roberto Sassu wrote:
>> This patch renames active_banks (member of tpm_chip) to allocated_banks,
>> stores the number of allocated PCR banks in nr_allocated_banks (new member
>> of tpm_chip), and replaces the static array with a pointer to a dynamically
>> allocated array.
>>
>> tpm2_get_pcr_allocation() determines if a PCR bank is allocated by checking
>> the mask in the TPML_PCR_SELECTION structure returned by the TPM for
>> TPM2_Get_Capability(). If a bank is not allocated, the TPM returns that
>> bank in TPML_PCR_SELECTION, with all bits in the mask set to zero. In this
>> case, the bank is not included in chip->allocated_banks, to avoid that TPM
>> driver users unnecessarily calculate a digest for that bank.
>>
>> One PCR bank with algorithm set to SHA1 is always allocated for TPM 1.x.
>>
>> As a consequence of the introduction of nr_allocated_banks,
>> tpm_pcr_extend() does not check anymore if the algorithm stored in tpm_chip
>> is equal to zero.
>>
>> Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
>> Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
>> ---
>>   drivers/char/tpm/tpm-chip.c      |  1 +
>>   drivers/char/tpm/tpm-interface.c | 18 +++++++++--------
>>   drivers/char/tpm/tpm.h           |  3 ++-
>>   drivers/char/tpm/tpm1-cmd.c      | 10 ++++++++++
>>   drivers/char/tpm/tpm2-cmd.c      | 34 ++++++++++++++++++++++----------
>>   5 files changed, 47 insertions(+), 19 deletions(-)
>>
>> diff --git a/drivers/char/tpm/tpm-chip.c b/drivers/char/tpm/tpm-chip.c
>> index 32db84683c40..ce851c62bb68 100644
>> --- a/drivers/char/tpm/tpm-chip.c
>> +++ b/drivers/char/tpm/tpm-chip.c
>> @@ -160,6 +160,7 @@ static void tpm_dev_release(struct device *dev)
>>   	kfree(chip->log.bios_event_log);
>>   	kfree(chip->work_space.context_buf);
>>   	kfree(chip->work_space.session_buf);
>> +	kfree(chip->allocated_banks);
>>   	kfree(chip);
>>   }
>>   
>> diff --git a/drivers/char/tpm/tpm-interface.c b/drivers/char/tpm/tpm-interface.c
>> index d9439f9abe78..7b80919228be 100644
>> --- a/drivers/char/tpm/tpm-interface.c
>> +++ b/drivers/char/tpm/tpm-interface.c
>> @@ -488,8 +488,7 @@ EXPORT_SYMBOL_GPL(tpm_pcr_read);
>>   int tpm_pcr_extend(struct tpm_chip *chip, u32 pcr_idx, const u8 *hash)
>>   {
>>   	int rc;
>> -	struct tpm2_digest digest_list[ARRAY_SIZE(chip->active_banks)];
>> -	u32 count = 0;
>> +	struct tpm2_digest *digest_list;
>>   	int i;
>>   
>>   	chip = tpm_find_get_ops(chip);
>> @@ -497,16 +496,19 @@ int tpm_pcr_extend(struct tpm_chip *chip, u32 pcr_idx, const u8 *hash)
>>   		return -ENODEV;
>>   
>>   	if (chip->flags & TPM_CHIP_FLAG_TPM2) {
>> -		memset(digest_list, 0, sizeof(digest_list));
>> +		digest_list = kcalloc(chip->nr_allocated_banks,
>> +				      sizeof(*digest_list), GFP_KERNEL);
>> +		if (!digest_list)
>> +			return -ENOMEM;
> 
> You could preallocate digest list and place it to struct tpm_chip
> instead of doing it everytime tpm_pcr_extend() called.

This part will be removed with patch 5/5.


>> -		for (i = 0; i < ARRAY_SIZE(chip->active_banks) &&
>> -			    chip->active_banks[i] != TPM2_ALG_ERROR; i++) {
>> -			digest_list[i].alg_id = chip->active_banks[i];
>> +		for (i = 0; i < chip->nr_allocated_banks; i++) {
>> +			digest_list[i].alg_id = chip->allocated_banks[i];
>>   			memcpy(digest_list[i].digest, hash, TPM_DIGEST_SIZE);
>> -			count++;
>>   		}
>>   
>> -		rc = tpm2_pcr_extend(chip, pcr_idx, count, digest_list);
>> +		rc = tpm2_pcr_extend(chip, pcr_idx, chip->nr_allocated_banks,
>> +				     digest_list);
>> +		kfree(digest_list);
>>   		tpm_put_ops(chip);
>>   		return rc;
>>   	}
>> diff --git a/drivers/char/tpm/tpm.h b/drivers/char/tpm/tpm.h
>> index f27d1f38a93d..6b94306ab7c5 100644
>> --- a/drivers/char/tpm/tpm.h
>> +++ b/drivers/char/tpm/tpm.h
>> @@ -257,7 +257,8 @@ struct tpm_chip {
>>   	const struct attribute_group *groups[3];
>>   	unsigned int groups_cnt;
>>   
>> -	u16 active_banks[7];
>> +	u32 nr_allocated_banks;
>> +	u16 *allocated_banks;
>>   #ifdef CONFIG_ACPI
>>   	acpi_handle acpi_dev_handle;
>>   	char ppi_version[TPM_PPI_VERSION_LEN + 1];
>> diff --git a/drivers/char/tpm/tpm1-cmd.c b/drivers/char/tpm/tpm1-cmd.c
>> index 6f306338953b..0874743ca96d 100644
>> --- a/drivers/char/tpm/tpm1-cmd.c
>> +++ b/drivers/char/tpm/tpm1-cmd.c
>> @@ -709,6 +709,16 @@ int tpm1_auto_startup(struct tpm_chip *chip)
>>   		goto out;
>>   	}
>>   
>> +	chip->allocated_banks = kcalloc(1, sizeof(*chip->allocated_banks),
>> +					GFP_KERNEL);
>> +	if (!chip->allocated_banks) {
>> +		rc = -ENOMEM;
>> +		goto out;
>> +	}
>> +
>> +	chip->allocated_banks[0] = TPM2_ALG_SHA1;
>> +	chip->nr_allocated_banks = 1;
>> +
>>   	return rc;
>>   out:
>>   	if (rc > 0)
>> diff --git a/drivers/char/tpm/tpm2-cmd.c b/drivers/char/tpm/tpm2-cmd.c
>> index a6bec13afa69..245669a7aba5 100644
>> --- a/drivers/char/tpm/tpm2-cmd.c
>> +++ b/drivers/char/tpm/tpm2-cmd.c
>> @@ -234,7 +234,7 @@ int tpm2_pcr_extend(struct tpm_chip *chip, u32 pcr_idx, u32 count,
>>   	int i;
>>   	int j;
>>   
>> -	if (count > ARRAY_SIZE(chip->active_banks))
>> +	if (count > chip->nr_allocated_banks)
>>   		return -EINVAL;
>>   
>>   	rc = tpm_buf_init(&buf, TPM2_ST_SESSIONS, TPM2_CC_PCR_EXTEND);
>> @@ -825,11 +825,14 @@ static ssize_t tpm2_get_pcr_allocation(struct tpm_chip *chip)
>>   	void *marker;
>>   	void *end;
>>   	void *pcr_select_offset;
>> -	unsigned int count;
>>   	u32 sizeof_pcr_selection;
>> +	u32 nr_possible_banks;
>> +	u32 nr_alloc_banks = 0;
>> +	u16 hash_alg;
>>   	u32 rsp_len;
>>   	int rc;
>>   	int i = 0;
>> +	int j;
>>   
>>   	rc = tpm_buf_init(&buf, TPM2_ST_NO_SESSIONS, TPM2_CC_GET_CAPABILITY);
>>   	if (rc)
>> @@ -844,11 +847,14 @@ static ssize_t tpm2_get_pcr_allocation(struct tpm_chip *chip)
>>   	if (rc)
>>   		goto out;
>>   
>> -	count = be32_to_cpup(
>> +	nr_possible_banks = be32_to_cpup(
>>   		(__be32 *)&buf.data[TPM_HEADER_SIZE + 5]);
>>   
>> -	if (count > ARRAY_SIZE(chip->active_banks)) {
>> -		rc = -ENODEV;
>> +	chip->allocated_banks = kcalloc(nr_possible_banks,
>> +					sizeof(*chip->allocated_banks),
>> +					GFP_KERNEL);
>> +	if (!chip->allocated_banks) {
>> +		rc = -ENOMEM;
>>   		goto out;
>>   	}
>>   
>> @@ -857,7 +863,7 @@ static ssize_t tpm2_get_pcr_allocation(struct tpm_chip *chip)
>>   	rsp_len = be32_to_cpup((__be32 *)&buf.data[2]);
>>   	end = &buf.data[rsp_len];
>>   
>> -	for (i = 0; i < count; i++) {
>> +	for (i = 0; i < nr_possible_banks; i++) {
>>   		pcr_select_offset = marker +
>>   			offsetof(struct tpm2_pcr_selection, size_of_select);
>>   		if (pcr_select_offset >= end) {
>> @@ -866,17 +872,25 @@ static ssize_t tpm2_get_pcr_allocation(struct tpm_chip *chip)
>>   		}
>>   
>>   		memcpy(&pcr_selection, marker, sizeof(pcr_selection));
>> -		chip->active_banks[i] = be16_to_cpu(pcr_selection.hash_alg);
>> +		hash_alg = be16_to_cpu(pcr_selection.hash_alg);
>> +
>> +		for (j = 0; j < pcr_selection.size_of_select; j++)
>> +			if (pcr_selection.pcr_select[j])
>> +				break;
>> +
>> +		if (j < pcr_selection.size_of_select) {
>> +			chip->allocated_banks[nr_alloc_banks] = hash_alg;
>> +			nr_alloc_banks++;
>> +		}
> 
> The same comment as before: you should use memchr_inv() here.

Ok.

Roberto


>> +
>>   		sizeof_pcr_selection = sizeof(pcr_selection.hash_alg) +
>>   			sizeof(pcr_selection.size_of_select) +
>>   			pcr_selection.size_of_select;
>>   		marker = marker + sizeof_pcr_selection;
>>   	}
>>   
>> +	chip->nr_allocated_banks = nr_alloc_banks;
>>   out:
>> -	if (i < ARRAY_SIZE(chip->active_banks))
>> -		chip->active_banks[i] = TPM2_ALG_ERROR;
>> -
>>   	tpm_buf_destroy(&buf);
>>   
>>   	return rc;
>> -- 
>> 2.17.1
>>
> 
> /Jarkko
> 

-- 
HUAWEI TECHNOLOGIES Duesseldorf GmbH, HRB 56063
Managing Director: Bo PENG, Jian LI, Yanli SHI
