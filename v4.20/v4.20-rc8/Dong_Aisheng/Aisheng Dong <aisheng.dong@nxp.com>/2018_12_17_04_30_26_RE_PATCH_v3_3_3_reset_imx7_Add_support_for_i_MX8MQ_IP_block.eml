Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 14:06:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 92BC85805FC;
	Sun, 16 Dec 2018 20:30:39 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 16 Dec 2018 20:30:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ADBKsZh14dfe/8ZtgsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTIv3xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJBHo2y?=
 =?us-ascii?q?YYgBD+UDPOZXs4bzqFQVrRumBwShH//vyiZUinPqwaE2z/otHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOacTSuC1zLfHzTPMb/hL1zn9747Ich88qvyLR71wcNHRyUkxGAPDgVWc?=
 =?us-ascii?q?s5HqPzST1uQCqGWb6eVhVfq1h2E7rAFxpyGiy8ExgYfKnoIY0k7I+Tl9zYovON?=
 =?us-ascii?q?G1RlB3bcS5HJZTqy2WLYp7T8E6T211pSo3zqcKtJCmcCQQ1ZgqxRHSZ+aGfoWJ?=
 =?us-ascii?q?+h7jWvieLDRkiH9gfb+ygwu+/Vagx+D5SMa500pGoytAn9TOuH0ByxLe582aRf?=
 =?us-ascii?q?Z+4Eis2DCC3B3J5O5eO0A7j6/bJoYhwrEukpoTtlzOHjH5mErolq+abEYk9fay?=
 =?us-ascii?q?6+ThfLrmooWQN4huigHxKqgum8q/DvokMgUWQWSX5eCx2Kf+8UD3XrlGlOA6n6?=
 =?us-ascii?q?rFvJzAJMkWpLa1AwpP3YYi7xa/AS2m0NMdnXQfKFJFeRSHj5XmOl3XI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3vzGObPgApPTIXjZi7rhY7l95FBGyAYpztBQ+YhUCrcfL/L3QEPxs8?=
 =?us-ascii?q?bYDhAhPwyu3+nnEMl91p8ZWW+XBq+ZMaDSvkGS6uMgPumBf4sVuDf7K/g46P/i?=
 =?us-ascii?q?l345mVkBfaa32Zsbcmy3HvNjI0+Be3rjns8BEXsWvgo5VOHqiEeNUT9PZ3moWK?=
 =?us-ascii?q?Iw/DE7CJ+8AofFSYCgm7iB3Ca9Hp1LaWFKEFGMEXH0d4qaX/cAcj6dIshkkjYc?=
 =?us-ascii?q?T7iuV5ch1Q2ytA/907dnLO3U9TMCuZLg09h14evTlRYp+DxwDsSd1XyNTm5ukm?=
 =?us-ascii?q?MJQT82wL5woUhnxlif1qh4huRSFcZP6PNRTgc6KZncwvRgBNDpWgLBedSJREy8?=
 =?us-ascii?q?Qtq8AzE8VdYxw94IY0ZgFNSulBHD3yy2A7ALk7yHHoA78qXZ33LpPcZy127G1L?=
 =?us-ascii?q?U9j1khWsZPNnephqhl+wjXBo7GiUOZl6mxeKQY3S7N8nqDzGWUsEFZVg5wTbvK?=
 =?us-ascii?q?XXQFakTKqtT541vIT6WyBrQ/LgtB1cmCJ7NXZdLzk1VJWu3vONTEbGK3gGe/Gx?=
 =?us-ascii?q?CIyrSIbIrpfmUd2D7QCEwFkwAV4HaHOhIyBiano2LCEjNuEUjjbF/r8el7sHm7?=
 =?us-ascii?q?VFM7zxmWb0190Lq44gMaiuaCS/wNxL4EuD0uqzNvHFmj2dLbEN6ApwtnfKVBbt?=
 =?us-ascii?q?Ix+lZH1WTFtwNjOpysNbxthlkbcw5vpUPhyw13CplckcgttH4q0AtyKaef0FNd?=
 =?us-ascii?q?dzOZ3Yr8OqHNJmn15hCvb6/W2lfR0NuN/qcP6fI4q0jsvQ2zF0oi9Wln3MdR03?=
 =?us-ascii?q?eG+prKCw8SW4rrUkkr7xh6u63aYi4l6ozO0X1jL6a1vSHC2t4zH+Ql1wuvcM1Z?=
 =?us-ascii?q?MKOHEw/yDdYXB8yvKOwshlioYQgIPOFU9K4oIcymc+GK17KsPOZlhDiml3hI4J?=
 =?us-ascii?q?hh0kKQ8CpxUu7J34sfz/6ExAeGVjf8g02nssD4go1EYTASHmyiySnrHoJRZ6ty?=
 =?us-ascii?q?fZoVBmeqOcG42tJ+h5v1UX5C6FGjH08G2NOueReKdVz93BFf2l4NoXO6niu01T?=
 =?us-ascii?q?p0nC8zrqqexSDB3/7tdB4aNWFVXmliilHsLJOwj9AbWkiocgcomAGk5Ub826hU?=
 =?us-ascii?q?uqB/I3PPTkdPeij8N3tiXbeotrqef85P74slsCVWUOimYVGWUKX9owYc0y74G2?=
 =?us-ascii?q?texTY7dyylu5njnhx6jn6dI2h3rHbDZc5wwhLf7sTGRfFNxjoGWDV4iT7PC1i+?=
 =?us-ascii?q?Jdap59aUl5TEsuykTGKuTJ5TcSrqzYOGqiS743ZnARm+n/C1h93mHhI20S7919?=
 =?us-ascii?q?l2SyrIqAzwbZXs16S/KehnZFVnBEfg68pmHYFziosxi4sX2XQAhJWV/HwHnHz3?=
 =?us-ascii?q?MdVa36L+cXUMSSQKw97T/AjqxkljImiVyIL+U3WX2tFhaMWiYmMKxiI96NhHCK?=
 =?us-ascii?q?SO47xFhyd1oke4ohjXYfhyhTodzfou6HgHg+AGogYtzyOdAqwMEklcJyDjixOI?=
 =?us-ascii?q?79WmpqVNeGmvaaSw1FZ5nd25CbGCowJcV2zjdpYsAyBw9dl/P0zW0HLo9I7kYt?=
 =?us-ascii?q?bQYMkXth2VlRfAkudUJIgwlvoMmSpoJ2b9sWc5xO48iBxkxYu6s5SfK2Vx4KK5?=
 =?us-ascii?q?BQZVNiHyZ8MW4D3sjLxRnsCL34C0BZVhGy4GXJ/pTfKuDTITuu7rNweIED0gtH?=
 =?us-ascii?q?ibHaDTEhOY6Edjt3jPCYykN2mLJHkFytVvXAKSK1ZYgAAQQTU2hJo5Fh2xyczl?=
 =?us-ascii?q?cUd54C0R51HiphtNzOJoKwfwUmPFqAi0bTc0TYCVLABK4QFa+0fVLcue4/pxHy?=
 =?us-ascii?q?5C+52usheNJnaHZwhSDmEJR0+EB03lPra0/tnN6OyYBuu4L/vTbrSCs+1eV/GU?=
 =?us-ascii?q?xZ2x1otq5SqDNsKKPnN6Ff00xlJDXWxlG8TegzgOSysXlz/Ub86Gvhi8/Dd7rt?=
 =?us-ascii?q?u48PTtVwLi/o+PC7pUMdVy9BG6m6aDN+iMhClnLTZUzI8DxXjNyLIHxl4dlzlu?=
 =?us-ascii?q?dyWxEbQHrSPNTLzfmq5UDx4YaiN/LshI77g73glCJ8HbkM711qVjg/4xCldFU0?=
 =?us-ascii?q?Hhm86zacwLJWG9KE3IBEKROLuaIj3Lxtn9YbmgRr1IkOVUqxqwtC6BHE/+JTuD?=
 =?us-ascii?q?jSfmVhC1PeFIjSGWJxheuIC7chZwBmnvVtPmahunMNBpiT0626E7hnTPNWQEKz?=
 =?us-ascii?q?hzb1tNrqGM7SNfmvh/B21B7n9/IeaYgSqW8+nYJYgQsfZwBiR0luRa4Gk1yrdP?=
 =?us-ascii?q?7SFEQuB1lzXWrtJ0v16mleyPwCJ9UBVSsjZLmJ6LvUJ6NKTZ7JZAX3PE/BML7W?=
 =?us-ascii?q?qIChUKp8FqCtvgu61LztjPlaTzKCpN8t7O/MscAdTUJ9yDMHY7LRXpHzvUX0M5?=
 =?us-ascii?q?SmuCM23Fil0Vq/ST7HuSsNBuo57ggpcRDKReVUYzEe0yBUFsHdhEK5ByCHds27?=
 =?us-ascii?q?qaitMYoHmzth/cQO1EsZ3dEPGfG/PiLHCel7YOL08MwLXlPcEQO5f91khKdFZ3?=
 =?us-ascii?q?hsLJFlDWUNQLpTduOFwaukJIpVF/VW0+3U2tRgSr7zdHHP+vnhMwhU1yZuIi3D?=
 =?us-ascii?q?H8+xE8IV+c93h4q1U4hdiw2WPZSzX2NqrlGNgOUyc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAC6JRdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTBQgVwECycKhzkDhE+LK0qCDRSJAY5DFIFfEwEYEwGEQAKDBSI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmEBAQEBAgEBAiQTBgEBNwEEA?=
 =?us-ascii?q?QYDAQEBAQgOAwQBAR8JBwMeBwoUCQgCBAENBQUDgxqBaQMNBwEBAgKcDwKKCoF?=
 =?us-ascii?q?sM4J2AQEFhHcNghQIjD6BVz+BV4IeLoJXgXMfAYNQgiaLOJU0LwcCgiQEixJwg?=
 =?us-ascii?q?0iRUok8hgiJeQIEAgQFAg0BAQWBRoIOMxojgzyCG4NtilNygQUBASGLAYEuAYE?=
 =?us-ascii?q?eAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAC6JRdch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTB?=
 =?us-ascii?q?QgVwECycKhzkDhE+LK0qCDRSJAY5DFIFfEwEYEwGEQAKDBSI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQoLCQgpIwyCNiQBgmEBAQEBAgEBAiQTBgEBNwEEAQYDAQEBAQgOAwQ?=
 =?us-ascii?q?BAR8JBwMeBwoUCQgCBAENBQUDgxqBaQMNBwEBAgKcDwKKCoFsM4J2AQEFhHcNg?=
 =?us-ascii?q?hQIjD6BVz+BV4IeLoJXgXMfAYNQgiaLOJU0LwcCgiQEixJwg0iRUok8hgiJeQI?=
 =?us-ascii?q?EAgQFAg0BAQWBRoIOMxojgzyCG4NtilNygQUBASGLAYEuAYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="44301598"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 20:30:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731426AbeLQEae (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 16 Dec 2018 23:30:34 -0500
Received: from mail-eopbgr70048.outbound.protection.outlook.com ([40.107.7.48]:27795
        "EHLO EUR04-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726318AbeLQEad (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 16 Dec 2018 23:30:33 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=TVM/u1SwPjPXikn42aSuXDo2KeXYHUiAdeznFL7qiT4=;
 b=i2D/WPKHPTQptUFu0SizuvSndYfvu4IzDXVgOj5PAgqJERWxkogeP0KsPlFT9VjJbCVsa5A0+iuH3rgHu7Srv4045CoQfOSegR831qB/q86Oe/LC/E/PJvQWt4LN2QxkAMRSInym+0Wzu/xNuMzJb7zo1eL0/P0D23PSMNtoboY=
Received: from AM0PR04MB4211.eurprd04.prod.outlook.com (52.134.126.21) by
 AM0PR04MB5475.eurprd04.prod.outlook.com (20.178.113.146) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1425.19; Mon, 17 Dec 2018 04:30:26 +0000
Received: from AM0PR04MB4211.eurprd04.prod.outlook.com
 ([fe80::9125:e806:7303:d8e6]) by AM0PR04MB4211.eurprd04.prod.outlook.com
 ([fe80::9125:e806:7303:d8e6%6]) with mapi id 15.20.1425.021; Mon, 17 Dec 2018
 04:30:26 +0000
From: Aisheng Dong <aisheng.dong@nxp.com>
To: Andrey Smirnov <andrew.smirnov@gmail.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>
CC: "p.zabel@pengutronix.de" <p.zabel@pengutronix.de>,
        Fabio Estevam <fabio.estevam@nxp.com>,
        "cphealy@gmail.com" <cphealy@gmail.com>,
        "l.stach@pengutronix.de" <l.stach@pengutronix.de>,
        Leonard Crestez <leonard.crestez@nxp.com>,
        Richard Zhu <hongxing.zhu@nxp.com>,
        Rob Herring <robh@kernel.org>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        dl-linux-imx <linux-imx@nxp.com>,
        "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>
Subject: RE: [PATCH v3 3/3] reset: imx7: Add support for i.MX8MQ IP block
 variant
Thread-Topic: [PATCH v3 3/3] reset: imx7: Add support for i.MX8MQ IP block
 variant
Thread-Index: AQHUlbGpZLhb5vhy5kOlQw0ltavusqWCViBQ
Date: Mon, 17 Dec 2018 04:30:26 +0000
Message-ID: <AM0PR04MB42114239FC75F5514554B55280BC0@AM0PR04MB4211.eurprd04.prod.outlook.com>
References: <20181217023827.7947-1-andrew.smirnov@gmail.com>
 <20181217023827.7947-4-andrew.smirnov@gmail.com>
In-Reply-To: <20181217023827.7947-4-andrew.smirnov@gmail.com>
Accept-Language: zh-CN, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=aisheng.dong@nxp.com; 
x-originating-ip: [119.31.174.66]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR04MB5475;6:3oT5cCfjrkckT75W/FsusYX1LXpGNsonESi4sSTuZdKlLADJ/kbg/qgGoSQ7B7xc530qiqeIlY6q39ZLKuBy/NKBsJZ68E73qH+hm+NTsrTTXAdIPlZPzrYznAB2HUSIQKl5MXCnCea4zX77ZEW43b0BoSe9hHIKvKr0MV+f6YBuxkmRtK2LwEOEaH2KGT13mtmeeuRebVBOxjFh3vY0xF7iSSpFkHyN8L6wOpJocF782mhBmC/bqrHEilPFNvn/WRiDk814mziGBuRCSS5OfSiU2SWqsovOzVSyaGCc0TEpffh74pyrVAL0hoSR0lQgIMvPvUFG19+MqNVXHWUriZiIGbp1LsCd3qm1UgJ610HkSRZWQQjqpRjXQAQTjj0MDPQcNwiffcDuEwc5E/2EG6h3Ux7DsPYmAJRLWzJAvfEIR3FzbLZJP6f7R4DhzJWlhm7xJVo/ifcgICgVynorUw==;5:nVQKLDn46Y9Vk8xlhBIIY8uj4fVb/63yq3WlproBmwxkc2dFafSXO430v/2ogyIYp/ZIOdY/CQMgPE49PoTMTfgJ4Rkl5urV04Xv8fHeVlOIKCT54TYR0gFX7LtjFVPfqfIEyGD7wtsOZGIo6LoqVaQbIjL+q3RbVtymENRriB4=;7:tK8+oZ7v92Vt8VtmvBlpufYap8g8XjJvVYe2opr/yXOJI3e34KKJCQq1oMRY+HUj37ElDvS+VZYOY6+zKPVOEP+8ELmQczFnAYY1892pkyWP3l9Buc3ar1f8+96PUuiwrAhxfnrA82eBkgTh6SnczA==
x-ms-exchange-antispam-srfa-diagnostics: SOS;
x-ms-office365-filtering-correlation-id: 5a48f20a-9ee0-4dbe-f5da-08d663d85e74
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:AM0PR04MB5475;
x-ms-traffictypediagnostic: AM0PR04MB5475:
x-microsoft-antispam-prvs: <AM0PR04MB5475B117682619B8454AD14D80BC0@AM0PR04MB5475.eurprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(999002)(5005020)(6040522)(2401047)(8121501046)(93006095)(93001095)(10201501046)(3231475)(944501520)(52105112)(3002001)(6055026)(148016)(149066)(150057)(6041310)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123562045)(20161123558120)(201708071742011)(7699051)(76991095);SRVR:AM0PR04MB5475;BCL:0;PCL:0;RULEID:;SRVR:AM0PR04MB5475;
x-forefront-prvs: 08897B549D
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(346002)(136003)(376002)(396003)(39860400002)(366004)(199004)(189003)(13464003)(2501003)(33656002)(81166006)(11346002)(8676002)(97736004)(5660300001)(66066001)(55016002)(6246003)(53936002)(74316002)(71190400001)(2906002)(9686003)(6116002)(14454004)(39060400002)(99286004)(4326008)(25786009)(305945005)(478600001)(8936002)(14444005)(6436002)(71200400001)(3846002)(86362001)(53546011)(105586002)(229853002)(106356001)(486006)(44832011)(446003)(316002)(81156014)(110136005)(68736007)(26005)(7736002)(7696005)(186003)(76176011)(6506007)(54906003)(476003)(256004)(102836004);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR04MB5475;H:AM0PR04MB4211.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: H2rdqHO9VW7TFTLERac0aeRnHAw09CzItj4NspFYMbC4fzLuLpJDTZQ5oVoGKQjjE0yQyvlP8W8yb/Vkuf/7+GZsbl2cipLZ0/HVtOueH3++rrYeGYPdaFS8Le5Ub00Yu2IqojU4DeFUmPy7ndeMrqJVwN4WCKv6ByNmERm+QRVWr+7SXQeCGlo6ZjmGh3bTrJuPgl6n83/h2E8a0eNGKbA3EUdX1BxqSRxEvoI9y7UpDFCnwE897GVgrk708hOykHn88jWf6bEJ/SjFFc+G0oEfYx1zKwbpR7Km7DloBPex/TtgQNrtXl7nJ2WlYe9l
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 5a48f20a-9ee0-4dbe-f5da-08d663d85e74
X-MS-Exchange-CrossTenant-originalarrivaltime: 17 Dec 2018 04:30:26.7422
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR04MB5475
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

> -----Original Message-----
> From: Andrey Smirnov [mailto:andrew.smirnov@gmail.com]
> Sent: Monday, December 17, 2018 10:38 AM
> To: linux-kernel@vger.kernel.org
> Cc: Andrey Smirnov <andrew.smirnov@gmail.com>; p.zabel@pengutronix.de;
> Fabio Estevam <fabio.estevam@nxp.com>; cphealy@gmail.com;
> l.stach@pengutronix.de; Leonard Crestez <leonard.crestez@nxp.com>; Aishen=
g
> Dong <aisheng.dong@nxp.com>; Richard Zhu <hongxing.zhu@nxp.com>; Rob
> Herring <robh@kernel.org>; devicetree@vger.kernel.org; dl-linux-imx
> <linux-imx@nxp.com>; linux-arm-kernel@lists.infradead.org
> Subject: [PATCH v3 3/3] reset: imx7: Add support for i.MX8MQ IP block var=
iant
>=20
> Add bits and pieces needed to support IP block variant found on i.MX8MQ
> SoCs.
>=20
> Cc: p.zabel@pengutronix.de
> Cc: Fabio Estevam <fabio.estevam@nxp.com>
> Cc: cphealy@gmail.com
> Cc: l.stach@pengutronix.de
> Cc: Leonard Crestez <leonard.crestez@nxp.com>
> Cc: "A.s. Dong" <aisheng.dong@nxp.com>
> Cc: Richard Zhu <hongxing.zhu@nxp.com>
> Cc: Rob Herring <robh@kernel.org>
> Cc: devicetree@vger.kernel.org
> Cc: linux-imx@nxp.com
> Cc: linux-arm-kernel@lists.infradead.org
> Cc: linux-kernel@vger.kernel.org
> Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
> ---
>  drivers/reset/Kconfig      |   2 +-
>  drivers/reset/reset-imx7.c | 106
> +++++++++++++++++++++++++++++++++++++
>  2 files changed, 107 insertions(+), 1 deletion(-)
>=20
> diff --git a/drivers/reset/Kconfig b/drivers/reset/Kconfig index
> c21da9fe51ec..4909aab7401b 100644
> --- a/drivers/reset/Kconfig
> +++ b/drivers/reset/Kconfig
> @@ -50,7 +50,7 @@ config RESET_HSDK
>  config RESET_IMX7
>  	bool "i.MX7 Reset Driver" if COMPILE_TEST
>  	depends on HAS_IOMEM
> -	default SOC_IMX7D
> +	default SOC_IMX7D || SOC_IMX8MQ

SOC_IMX8MQ has been removed in Shawn's tree.
I'd suggest simply using ARCH_MXC.

Regards
Dong Aisheng

>  	select MFD_SYSCON
>  	help
>  	  This enables the reset controller driver for i.MX7 SoCs.
> diff --git a/drivers/reset/reset-imx7.c b/drivers/reset/reset-imx7.c inde=
x
> 3a36d5863891..bb826935db6d 100644
> --- a/drivers/reset/reset-imx7.c
> +++ b/drivers/reset/reset-imx7.c
> @@ -22,6 +22,7 @@
>  #include <linux/reset-controller.h>
>  #include <linux/regmap.h>
>  #include <dt-bindings/reset/imx7-reset.h>
> +#include <dt-bindings/reset/imx8mq-reset.h>
>=20
>  struct imx7_src_signal {
>  	unsigned int offset, bit;
> @@ -113,6 +114,110 @@ static const struct imx7_src_variant variant_imx7 =
=3D
> {
>  	.prepare =3D imx7_src_prepare,
>  };
>=20
> +enum imx8mq_src_registers {
> +	SRC_A53RCR0		=3D 0x0004,
> +	SRC_HDMI_RCR		=3D 0x0030,
> +	SRC_DISP_RCR		=3D 0x0034,
> +	SRC_GPU_RCR		=3D 0x0040,
> +	SRC_VPU_RCR		=3D 0x0044,
> +	SRC_PCIE2_RCR		=3D 0x0048,
> +	SRC_MIPIPHY1_RCR	=3D 0x004c,
> +	SRC_MIPIPHY2_RCR	=3D 0x0050,
> +	SRC_DDRC2_RCR		=3D 0x1004,
> +};
> +
> +static const struct imx7_src_signal
> imx8mq_src_signals[IMX8MQ_RESET_NUM] =3D {
> +	[IMX8MQ_RESET_A53_CORE_POR_RESET0]	=3D { SRC_A53RCR0, BIT(0) },
> +	[IMX8MQ_RESET_A53_CORE_POR_RESET1]	=3D { SRC_A53RCR0, BIT(1) },
> +	[IMX8MQ_RESET_A53_CORE_POR_RESET2]	=3D { SRC_A53RCR0, BIT(2) },
> +	[IMX8MQ_RESET_A53_CORE_POR_RESET3]	=3D { SRC_A53RCR0, BIT(3) },
> +	[IMX8MQ_RESET_A53_CORE_RESET0]		=3D { SRC_A53RCR0, BIT(4) },
> +	[IMX8MQ_RESET_A53_CORE_RESET1]		=3D { SRC_A53RCR0, BIT(5) },
> +	[IMX8MQ_RESET_A53_CORE_RESET2]		=3D { SRC_A53RCR0, BIT(6) },
> +	[IMX8MQ_RESET_A53_CORE_RESET3]		=3D { SRC_A53RCR0, BIT(7) },
> +	[IMX8MQ_RESET_A53_DBG_RESET0]		=3D { SRC_A53RCR0, BIT(8) },
> +	[IMX8MQ_RESET_A53_DBG_RESET1]		=3D { SRC_A53RCR0, BIT(9) },
> +	[IMX8MQ_RESET_A53_DBG_RESET2]		=3D { SRC_A53RCR0, BIT(10) },
> +	[IMX8MQ_RESET_A53_DBG_RESET3]		=3D { SRC_A53RCR0, BIT(11) },
> +	[IMX8MQ_RESET_A53_ETM_RESET0]		=3D { SRC_A53RCR0, BIT(12) },
> +	[IMX8MQ_RESET_A53_ETM_RESET1]		=3D { SRC_A53RCR0, BIT(13) },
> +	[IMX8MQ_RESET_A53_ETM_RESET2]		=3D { SRC_A53RCR0, BIT(14) },
> +	[IMX8MQ_RESET_A53_ETM_RESET3]		=3D { SRC_A53RCR0, BIT(15) },
> +	[IMX8MQ_RESET_A53_SOC_DBG_RESET]	=3D { SRC_A53RCR0, BIT(20) },
> +	[IMX8MQ_RESET_A53_L2RESET]		=3D { SRC_A53RCR0, BIT(21) },
> +	[IMX8MQ_RESET_SW_NON_SCLR_M4C_RST]	=3D { SRC_M4RCR, BIT(0) },
> +	[IMX8MQ_RESET_OTG1_PHY_RESET]		=3D { SRC_USBOPHY1_RCR,
> BIT(0) },
> +	[IMX8MQ_RESET_OTG2_PHY_RESET]		=3D { SRC_USBOPHY2_RCR,
> BIT(0) },
> +	[IMX8MQ_RESET_MIPI_DSI_RESET_BYTE_N]	=3D { SRC_MIPIPHY_RCR,
> BIT(1) },
> +	[IMX8MQ_RESET_MIPI_DSI_RESET_N]		=3D { SRC_MIPIPHY_RCR,
> BIT(2) },
> +	[IMX8MQ_RESET_MIPI_DIS_DPI_RESET_N]	=3D { SRC_MIPIPHY_RCR,
> BIT(3) },
> +	[IMX8MQ_RESET_MIPI_DIS_ESC_RESET_N]	=3D { SRC_MIPIPHY_RCR,
> BIT(4) },
> +	[IMX8MQ_RESET_MIPI_DIS_PCLK_RESET_N]	=3D { SRC_MIPIPHY_RCR,
> BIT(5) },
> +	[IMX8MQ_RESET_PCIEPHY]			=3D { SRC_PCIEPHY_RCR,
> +						    BIT(2) | BIT(1) },
> +	[IMX8MQ_RESET_PCIEPHY_PERST]		=3D { SRC_PCIEPHY_RCR,
> BIT(3) },
> +	[IMX8MQ_RESET_PCIE_CTRL_APPS_EN]	=3D { SRC_PCIEPHY_RCR,
> BIT(6) },
> +	[IMX8MQ_RESET_PCIE_CTRL_APPS_TURNOFF]	=3D { SRC_PCIEPHY_RCR,
> BIT(11) },
> +	[IMX8MQ_RESET_HDMI_PHY_APB_RESET]	=3D { SRC_HDMI_RCR, BIT(0) },
> +	[IMX8MQ_RESET_DISP_RESET]		=3D { SRC_DISP_RCR, BIT(0) },
> +	[IMX8MQ_RESET_GPU_RESET]		=3D { SRC_GPU_RCR, BIT(0) },
> +	[IMX8MQ_RESET_VPU_RESET]		=3D { SRC_VPU_RCR, BIT(0) },
> +	[IMX8MQ_RESET_PCIEPHY2]			=3D { SRC_PCIE2_RCR,
> +						    BIT(2) | BIT(1) },
> +	[IMX8MQ_RESET_PCIEPHY2_PERST]		=3D { SRC_PCIE2_RCR, BIT(3) },
> +	[IMX8MQ_RESET_PCIE2_CTRL_APPS_EN]	=3D { SRC_PCIE2_RCR, BIT(6) },
> +	[IMX8MQ_RESET_PCIE2_CTRL_APPS_TURNOFF]	=3D { SRC_PCIE2_RCR,
> BIT(11) },
> +	[IMX8MQ_RESET_MIPI_CSI1_CORE_RESET]	=3D { SRC_MIPIPHY1_RCR,
> BIT(0) },
> +	[IMX8MQ_RESET_MIPI_CSI1_PHY_REF_RESET]	=3D { SRC_MIPIPHY1_RCR,
> BIT(1) },
> +	[IMX8MQ_RESET_MIPI_CSI1_ESC_RESET]	=3D { SRC_MIPIPHY1_RCR,
> BIT(2) },
> +	[IMX8MQ_RESET_MIPI_CSI2_CORE_RESET]	=3D { SRC_MIPIPHY2_RCR,
> BIT(0) },
> +	[IMX8MQ_RESET_MIPI_CSI2_PHY_REF_RESET]	=3D { SRC_MIPIPHY2_RCR,
> BIT(1) },
> +	[IMX8MQ_RESET_MIPI_CSI2_ESC_RESET]	=3D { SRC_MIPIPHY2_RCR,
> BIT(2) },
> +	[IMX8MQ_RESET_DDRC1_PRST]		=3D { SRC_DDRC_RCR, BIT(0) },
> +	[IMX8MQ_RESET_DDRC1_CORE_RESET]		=3D { SRC_DDRC_RCR,
> BIT(1) },
> +	[IMX8MQ_RESET_DDRC1_PHY_RESET]		=3D { SRC_DDRC_RCR, BIT(2) },
> +	[IMX8MQ_RESET_DDRC2_PHY_RESET]		=3D { SRC_DDRC2_RCR, BIT(0) },
> +	[IMX8MQ_RESET_DDRC2_CORE_RESET]		=3D { SRC_DDRC2_RCR,
> BIT(1) },
> +	[IMX8MQ_RESET_DDRC2_PRST]		=3D { SRC_DDRC2_RCR, BIT(2) },
> +};
> +
> +static unsigned int
> +imx8mq_src_prepare(struct imx7_src *imx7src, unsigned long id, bool
> +assert) {
> +	const unsigned int bit =3D imx7src->variant->signals[id].bit;
> +	unsigned int value =3D assert ? bit : 0;
> +
> +	switch (id) {
> +	case IMX8MQ_RESET_PCIEPHY:
> +	case IMX8MQ_RESET_PCIEPHY2: /* fallthrough */
> +		/*
> +		 * wait for more than 10us to release phy g_rst and
> +		 * btnrst
> +		 */
> +		if (!assert)
> +			udelay(10);
> +		break;
> +
> +	case IMX8MQ_RESET_PCIE_CTRL_APPS_EN:
> +	case IMX8MQ_RESET_PCIE2_CTRL_APPS_EN:	/* fallthrough */
> +	case IMX8MQ_RESET_MIPI_DIS_PCLK_RESET_N:	/* fallthrough */
> +	case IMX8MQ_RESET_MIPI_DIS_ESC_RESET_N:	/* fallthrough */
> +	case IMX8MQ_RESET_MIPI_DIS_DPI_RESET_N:	/* fallthrough */
> +	case IMX8MQ_RESET_MIPI_DSI_RESET_N:	/* fallthrough */
> +	case IMX8MQ_RESET_MIPI_DSI_RESET_BYTE_N:	/* fallthrough */
> +		value =3D assert ? 0 : bit;
> +		break;
> +	}
> +
> +	return value;
> +}
> +
> +static const struct imx7_src_variant variant_imx8mq =3D {
> +	.signals =3D imx8mq_src_signals,
> +	.signals_num =3D ARRAY_SIZE(imx8mq_src_signals),
> +	.prepare =3D imx8mq_src_prepare,
> +};
> +
>  static struct imx7_src *to_imx7_src(struct reset_controller_dev *rcdev) =
 {
>  	return container_of(rcdev, struct imx7_src, rcdev); @@ -175,6 +280,7
> @@ static int imx7_reset_probe(struct platform_device *pdev)
>=20
>  static const struct of_device_id imx7_reset_dt_ids[] =3D {
>  	{ .compatible =3D "fsl,imx7d-src", .data =3D &variant_imx7 },
> +	{ .compatible =3D "fsl,imx8mq-src", .data =3D &variant_imx8mq },
>  	{ /* sentinel */ },
>  };
>=20
> --
> 2.19.1

