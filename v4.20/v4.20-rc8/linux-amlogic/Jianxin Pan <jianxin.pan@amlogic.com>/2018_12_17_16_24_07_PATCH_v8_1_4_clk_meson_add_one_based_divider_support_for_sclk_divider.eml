Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:46:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 91E195805CF;
	Mon, 17 Dec 2018 08:24:44 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 17 Dec 2018 08:24:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ACU0kfxa76mIUzrfodMFeJUL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm5ZR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyxPDJ2h?=
 =?us-ascii?q?YYUBDOQPOuRXr4fyqFQSrBu+HhGsCeH0xz9UmnP7x7E23v49HQ3a2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocVeG1w7POzTTMbvNW3yr25pLSfRAnvPqBWrBwccvLxkkpGALFj1OQ?=
 =?us-ascii?q?pZb9PzyP0OQAqHKU7+9kVeKohG4nqh1+riKzyccrj4nEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RUphbdK5HpZcqTuWO5Z1T88+WW1luSQ3xqUbtZKnZiQG1ZcqywTCZ/CaaYSE?=
 =?us-ascii?q?/A/vWeSJLTp4h39pYryyiwio/US+1OHxVdO43VlKoydDj9LCrGoC1wbJ5ciCUv?=
 =?us-ascii?q?Z9/lmu2TKI1w3L9OFELl47lbDBJ54i3LEwjJwTvlrHHiPsn0X2lqCWel0l+uiu?=
 =?us-ascii?q?9evnfq3rqoGAO4JwkA3yL6ojltKlDeglMQUCQ3KX9OW+2bH7+E32WrRKjvk4kq?=
 =?us-ascii?q?nDt5DaINwWpqq4Aw9Tz4Yi5A+zDzS439QCm3kIMlZFdAuAj4nnPVHBPur4AOyh?=
 =?us-ascii?q?g1Sjjjhr3erKPr7/DZXXKHjMjrPhcax6605Gxwo/1cpf6I5MCrEdPPLzXVf8tN?=
 =?us-ascii?q?jZDh86LQO42enmCMhm24MaWGKPBLKZMazIvV+J4OIvP/eDZIsPtDnhLPgl4ubk?=
 =?us-ascii?q?jWUlll8FYampwZwXZWi4Hvt8IkWZfWDjgtAbHWcKowoxVurqiFKZXD5XZnayWb?=
 =?us-ascii?q?885z4hBIKnC4fDWp6igLib0CinGZ1WY3hMCkqQHnfwa4WER/AMZTqQIs9mjDMI?=
 =?us-ascii?q?T7uhS4gn1RGosw/30L5nLuvS+i0FupPvztl15+vPlR4s8Tx4FdiS02aIT2tshG?=
 =?us-ascii?q?MHWyc23LxjoUx60lqMy7N4g/xfFdxQ/f9JSB01NZzHwux+CtDyXB/Bf9iTRFan?=
 =?us-ascii?q?RNWmHS8+TtYrz9ASZEZ9Hs2ojgrf0CqyH78Vi7uLCYQ38q3G2Xj9PcJ9y3fc26?=
 =?us-ascii?q?kngFkrWc9PNWyghq5i+AnfHY/Jk0OFl6m0caQQxjLC9GCGzWCWpkFXTBZwUbnZ?=
 =?us-ascii?q?XXAYfkbZsM725l3cQLO0CbQoKA1BydWcJatMbdHpiVZGRPLnONnFZ2KxmmGwBQ?=
 =?us-ascii?q?uHx7+WbYrqfXkd0zvZCEQejw8T+nOGPxAkBii9u2LeECBuFVX3bkzx6+Z+tm20?=
 =?us-ascii?q?QlU0zw6QaU1hzKS6+hgOiPyYSvMT2K8EuSg7pzV1Gla9w8zZC96aqwV9e6VcZM?=
 =?us-ascii?q?s34E1b2mLBqwx9IpugIrh+hl4fdgR3uF/u1xV3C4lajcgmtnQqzBB2KaKZ1lNB?=
 =?us-ascii?q?eCiV3ZTxOr3RN2nz8wqja6/Q2lHCztmW/r0D5+g/q1XmpAupDFYt821709lJ1H?=
 =?us-ascii?q?uR/o/FDA4MXpP+TEk29wJ2qKrHYiYg/YzU035sMa6qsjLZ39IpBe0lyguvfttF?=
 =?us-ascii?q?MaOEEhPyHNMeB8S0NOMqnF2pZAoePO9O7K40I9+md/ye1a+rIeZshi6pgX5G4Y?=
 =?us-ascii?q?B9yE2M8SV8R/XM35YExfGYwwSGWy39jFenrsD4h4REaSsOEWq4zCjuHJRRabFq?=
 =?us-ascii?q?fYYXFWeuJNW6xs9/h5HxQXFY7kOsB1Qc1M+vZxWSdV390RRM2ksNpXyohDW3zy?=
 =?us-ascii?q?ZzkzEvtaef2C3Ow+L/dBsIIGJLRW9ijUvyLoiwldwVQE+obw0xnhu/+Un637Rb?=
 =?us-ascii?q?pLh4L2TLQUZIfjL6LmF4Xqurq7qCZdVC6JcpsSVRTeS9bkqWSr/7oxsGzSzjG3?=
 =?us-ascii?q?FSyyw8dzGvop/5hQB1iHqBLHZvq3rUYcNwyg3F5NzfRv5R2SAKRDJihjnUBVi8?=
 =?us-ascii?q?Pt+p8suSl5rYtuC+VmShVoBccCXxzIOAsje76nNuARGlg/+zndjnGxAg0SDnz9?=
 =?us-ascii?q?lqSTnIrBHkb4jrzau6NvhrfktpBF/68Md6HoB+ko0thJAfw3Qah5OV/WYZnmf3?=
 =?us-ascii?q?K9lUxaX+bH8VTz4R39HV+BTl2FFkLn+RxIL2THSdztFhZ9mneGwW3C094ttOCK?=
 =?us-ascii?q?eV6rxEgCR0rkC5rQLXffhygDMdxeEy534dhuEDoBAtwTmFArAOAUlYOjThlxGJ?=
 =?us-ascii?q?79C9tqpbfmiufqar1Epig9+hFqqNrR9GWHb2YZoiGS5w7sNiMFPDynHz64fkeM?=
 =?us-ascii?q?XOYtIXrBGbjxDAj+1NIpIrivUKnTZnOX76vXA91+47ihlu0Yu7vYedLWVt4bm5?=
 =?us-ascii?q?AgVZNjDuY8MT+zftjbtRn8qM3oCvGIlhFSsPXJfyUf2oFzcSv+z9NwmSCD08tm?=
 =?us-ascii?q?ubGb3HEACE8khmqHbPE42xO3GTOXkU1tFiRBibJExCjwEYRjQ6npglFg+0wMzt?=
 =?us-ascii?q?alt25jcU5lTgsBtD1vpoNwXjUmfYvAqoaC07SJ2BIxpN9A1C+13ZMc+D7uJwAi?=
 =?us-ascii?q?FY+IeurBeWJ2yfZgRIC3wJW0OeC1DiOLmu+cfP8+yCCuWiKPvOZK2EqfZCWPeQ?=
 =?us-ascii?q?2ZKvzoxm8i6MN8WII3liFuA71VBFXXxjAMTZnDMPSyMMmiLJbs6bogq8+yJtos?=
 =?us-ascii?q?C+9vTrRBzg5Y+VB7RONtVv/gi8gb2fOO6ImCZ5NTFY24sMxXDWybgf310SiyB0?=
 =?us-ascii?q?ezmuC7QAsiHNQ7zKmq9KFB4WcCdzNMpO76Ih0QhBI8/bitXp1rFmiv45EUtKVV?=
 =?us-ascii?q?vkmsuxf8wFP3m9NE/bBEaMLLmJPyDLzNrtYayiSbxcluFUtxyrtDafEk/jOCmD?=
 =?us-ascii?q?ljbzWxCuN+FMkD+UPBhEtI6hdRZtDHDpTMj6ZR2jLN93kTo2zKUohnPLMG4QKy?=
 =?us-ascii?q?Rzf1lRob2Q8yxYhO5yG2hA7npjMOmFlDyV7+jeKpYKr/RrBj54mP5d4HQ/07FV?=
 =?us-ascii?q?9j1LRORpmCvOqd5ju1GnnfOJyjpiURpOrC5EhYOLvUp4P6XZ+YJNWXLF/BIL8G?=
 =?us-ascii?q?WRBA4Gp9pjCt3zpa9QzsLDm770KDdHoJro+p4+CtLTLc/PGmA8Nxf1UGrWBhEY?=
 =?us-ascii?q?SzO3HWvWlkhcmuufsHaSq85+4r7hmZ5GY6VeT0AvEfUVQhBjFcYHO4ttWTUrub?=
 =?us-ascii?q?SSncoJ72Cz6hLWQZMJkIrAU6ewAPzpODefxYFNYVNcw7LxK5QSMMvj0kpKY1x+?=
 =?us-ascii?q?m4vLEAzbWtUb8X4pVRM9vEgYqCs2dWY0wU+wL1r1uHI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AfAABwzRdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snCpgCgiGXRIFzLBMBh1YiNgcNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IKS+CNiQBgmIDAwECJFIGCQEBGDgDVAYBDQUFgx2CAAEFqH0ziiCHfYRBgVc/j?=
 =?us-ascii?q?wMCiUKBdIUUkE8HAoIkBIQliw8WkVKJPJF1AYIGMxojgzyCJxeOKjIBATGBBQE?=
 =?us-ascii?q?BjFCBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0AfAABwzRdch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?nCpgCgiGXRIFzLBMBh1YiNgcNAQMBAQEBAQECARMBAQEKCwkIKS+CNiQBgmIDA?=
 =?us-ascii?q?wECJFIGCQEBGDgDVAYBDQUFgx2CAAEFqH0ziiCHfYRBgVc/jwMCiUKBdIUUkE8?=
 =?us-ascii?q?HAoIkBIQliw8WkVKJPJF1AYIGMxojgzyCJxeOKjIBATGBBQEBjFCBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="44369530"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 08:24:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388034AbeLQQYj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 11:24:39 -0500
Received: from mail-sh2.amlogic.com ([58.32.228.45]:33928 "EHLO
        mail-sh2.amlogic.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2387823AbeLQQYh (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 11:24:37 -0500
Received: from localhost.localdomain (10.18.11.217) by mail-sh2.amlogic.com
 (10.18.11.6) with Microsoft SMTP Server id 15.0.1320.4; Tue, 18 Dec 2018
 00:24:49 +0800
From: Jianxin Pan <jianxin.pan@amlogic.com>
To: Jerome Brunet <jbrunet@baylibre.com>,
        Neil Armstrong <narmstrong@baylibre.com>
CC: Jianxin Pan <jianxin.pan@amlogic.com>,
        Kevin Hilman <khilman@baylibre.com>,
        Carlo Caione <carlo@caione.org>,
        Michael Turquette <mturquette@baylibre.com>,
        Stephen Boyd <sboyd@kernel.org>, Rob Herring <robh@kernel.org>,
        Miquel Raynal <miquel.raynal@bootlin.com>,
        Boris Brezillon <boris.brezillon@bootlin.com>,
        Martin Blumenstingl <martin.blumenstingl@googlemail.com>,
        Yixun Lan <yixun.lan@amlogic.com>,
        Liang Yang <liang.yang@amlogic.com>,
        Jian Hu <jian.hu@amlogic.com>,
        Qiufang Dai <qiufang.dai@amlogic.com>,
        Hanjie Lin <hanjie.lin@amlogic.com>,
        Victor Wan <victor.wan@amlogic.com>,
        <linux-clk@vger.kernel.org>, <linux-amlogic@lists.infradead.org>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>, <devicetree@vger.kernel.org>
Subject: [PATCH v8 1/4] clk: meson: add one based divider support for sclk divider
Date: Tue, 18 Dec 2018 00:24:07 +0800
Message-ID: <1545063850-21504-2-git-send-email-jianxin.pan@amlogic.com>
X-Mailer: git-send-email 1.9.1
In-Reply-To: <1545063850-21504-1-git-send-email-jianxin.pan@amlogic.com>
References: <1545063850-21504-1-git-send-email-jianxin.pan@amlogic.com>
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.18.11.217]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

When CLK_DIVIDER_ONE_BASED flag is set, the sclk divider will be:
one based divider (div = val), and zero value gates the clock

Signed-off-by: Jianxin Pan <jianxin.pan@amlogic.com>
---
 drivers/clk/meson/Makefile     |  3 ++-
 drivers/clk/meson/clkc-audio.h |  8 ------
 drivers/clk/meson/clkc.h       | 10 ++++++-
 drivers/clk/meson/sclk-div.c   | 59 ++++++++++++++++++++++++++++--------------
 4 files changed, 50 insertions(+), 30 deletions(-)

diff --git a/drivers/clk/meson/Makefile b/drivers/clk/meson/Makefile
index a849aa8..acd8694 100644
--- a/drivers/clk/meson/Makefile
+++ b/drivers/clk/meson/Makefile
@@ -4,7 +4,8 @@
 
 obj-$(CONFIG_COMMON_CLK_AMLOGIC) += clk-pll.o clk-mpll.o clk-phase.o vid-pll-div.o
 obj-$(CONFIG_COMMON_CLK_AMLOGIC) += clk-input.o
-obj-$(CONFIG_COMMON_CLK_AMLOGIC_AUDIO)	+= clk-triphase.o sclk-div.o
+obj-$(CONFIG_COMMON_CLK_AMLOGIC) += sclk-div.o
+obj-$(CONFIG_COMMON_CLK_AMLOGIC_AUDIO) += clk-triphase.o
 obj-$(CONFIG_COMMON_CLK_MESON_AO) += meson-aoclk.o
 obj-$(CONFIG_COMMON_CLK_MESON8B) += meson8b.o
 obj-$(CONFIG_COMMON_CLK_GXBB)	 += gxbb.o gxbb-aoclk.o gxbb-aoclk-32k.o
diff --git a/drivers/clk/meson/clkc-audio.h b/drivers/clk/meson/clkc-audio.h
index 0a7c157..286ff12 100644
--- a/drivers/clk/meson/clkc-audio.h
+++ b/drivers/clk/meson/clkc-audio.h
@@ -15,14 +15,6 @@ struct meson_clk_triphase_data {
 	struct parm ph2;
 };
 
-struct meson_sclk_div_data {
-	struct parm div;
-	struct parm hi;
-	unsigned int cached_div;
-	struct clk_duty cached_duty;
-};
-
 extern const struct clk_ops meson_clk_triphase_ops;
-extern const struct clk_ops meson_sclk_div_ops;
 
 #endif /* __MESON_CLKC_AUDIO_H */
diff --git a/drivers/clk/meson/clkc.h b/drivers/clk/meson/clkc.h
index 6183b22..00b3320 100644
--- a/drivers/clk/meson/clkc.h
+++ b/drivers/clk/meson/clkc.h
@@ -27,6 +27,14 @@ struct parm {
 	u8	width;
 };
 
+struct meson_sclk_div_data {
+	struct parm div;
+	struct parm hi;
+	unsigned int cached_div;
+	struct clk_duty cached_duty;
+	u8 flags;
+};
+
 static inline unsigned int meson_parm_read(struct regmap *map, struct parm *p)
 {
 	unsigned int val;
@@ -118,10 +126,10 @@ struct clk_regmap _name = {						\
 extern const struct clk_ops meson_clk_mpll_ops;
 extern const struct clk_ops meson_clk_phase_ops;
 extern const struct clk_ops meson_vid_pll_div_ro_ops;
+extern const struct clk_ops meson_sclk_div_ops;
 
 struct clk_hw *meson_clk_hw_register_input(struct device *dev,
 					   const char *of_name,
 					   const char *clk_name,
 					   unsigned long flags);
-
 #endif /* __CLKC_H */
diff --git a/drivers/clk/meson/sclk-div.c b/drivers/clk/meson/sclk-div.c
index bc64019..a6c425b 100644
--- a/drivers/clk/meson/sclk-div.c
+++ b/drivers/clk/meson/sclk-div.c
@@ -4,42 +4,60 @@
  * Author: Jerome Brunet <jbrunet@baylibre.com>
  *
  * Sample clock generator divider:
- * This HW divider gates with value 0 but is otherwise a zero based divider:
+ * This HW divider gates with value 0
  *
  * val >= 1
- * divider = val + 1
+ * divider = val + 1 if ONE_BASED is not set, otherwise divider = val.
  *
  * The duty cycle may also be set for the LR clock variant. The duty cycle
  * ratio is:
  *
  * hi = [0 - val]
- * duty_cycle = (1 + hi) / (1 + val)
+ * duty_cycle = (1 + hi) / (1 + val) if ONE_BASED is not set, otherwise:
+ * duty_cycle = hi / (1 + val)
  */
 
-#include "clkc-audio.h"
+#include "clkc.h"
 
-static inline struct meson_sclk_div_data *
-meson_sclk_div_data(struct clk_regmap *clk)
+static inline int get_reg(int val, unsigned char flag)
 {
-	return (struct meson_sclk_div_data *)clk->data;
+	WARN_ON(val < 1);
+	if ((flag & CLK_DIVIDER_ONE_BASED) || !val)
+		return val;
+	else
+		return val - 1;
+}
+
+static inline int get_value(int reg, unsigned char flag)
+{
+	if (flag & CLK_DIVIDER_ONE_BASED)
+		return reg;
+	else
+		return reg + 1;
 }
 
-static int sclk_div_maxval(struct meson_sclk_div_data *sclk)
+static inline struct meson_sclk_div_data *
+meson_sclk_div_data(struct clk_regmap *clk)
 {
-	return (1 << sclk->div.width) - 1;
+	return (struct meson_sclk_div_data *)clk->data;
 }
 
 static int sclk_div_maxdiv(struct meson_sclk_div_data *sclk)
 {
-	return sclk_div_maxval(sclk) + 1;
+	unsigned int reg = clk_div_mask(sclk->div.width);
+
+	return get_value(reg, sclk->flags);
 }
 
 static int sclk_div_getdiv(struct clk_hw *hw, unsigned long rate,
 			   unsigned long prate, int maxdiv)
 {
 	int div = DIV_ROUND_CLOSEST_ULL((u64)prate, rate);
+	struct clk_regmap *clk = to_clk_regmap(hw);
+	struct meson_sclk_div_data *sclk = meson_sclk_div_data(clk);
+	int mindiv = get_value(1, sclk->flags);
 
-	return clamp(div, 2, maxdiv);
+	return clamp(div, mindiv, maxdiv);
 }
 
 static int sclk_div_bestdiv(struct clk_hw *hw, unsigned long rate,
@@ -47,7 +65,7 @@ static int sclk_div_bestdiv(struct clk_hw *hw, unsigned long rate,
 			    struct meson_sclk_div_data *sclk)
 {
 	struct clk_hw *parent = clk_hw_get_parent(hw);
-	int bestdiv = 0, i;
+	int bestdiv = 0, i, mindiv;
 	unsigned long maxdiv, now, parent_now;
 	unsigned long best = 0, best_parent = 0;
 
@@ -64,8 +82,9 @@ static int sclk_div_bestdiv(struct clk_hw *hw, unsigned long rate,
 	 * unsigned long in rate * i below
 	 */
 	maxdiv = min(ULONG_MAX / rate, maxdiv);
+	mindiv = get_value(1, sclk->flags);
 
-	for (i = 2; i <= maxdiv; i++) {
+	for (i = mindiv; i <= maxdiv; i++) {
 		/*
 		 * It's the most ideal case if the requested rate can be
 		 * divided from parent clock without needing to change
@@ -111,10 +130,7 @@ static void sclk_apply_ratio(struct clk_regmap *clk,
 					    sclk->cached_duty.num,
 					    sclk->cached_duty.den);
 
-	if (hi)
-		hi -= 1;
-
-	meson_parm_write(clk->map, &sclk->hi, hi);
+	meson_parm_write(clk->map, &sclk->hi, get_reg(hi, sclk->flags));
 }
 
 static int sclk_div_set_duty_cycle(struct clk_hw *hw,
@@ -145,7 +161,7 @@ static int sclk_div_get_duty_cycle(struct clk_hw *hw,
 	}
 
 	hi = meson_parm_read(clk->map, &sclk->hi);
-	duty->num = hi + 1;
+	duty->num = get_value(hi, sclk->flags);
 	duty->den = sclk->cached_div;
 	return 0;
 }
@@ -153,10 +169,13 @@ static int sclk_div_get_duty_cycle(struct clk_hw *hw,
 static void sclk_apply_divider(struct clk_regmap *clk,
 			       struct meson_sclk_div_data *sclk)
 {
+	unsigned int div;
+
 	if (MESON_PARM_APPLICABLE(&sclk->hi))
 		sclk_apply_ratio(clk, sclk);
 
-	meson_parm_write(clk->map, &sclk->div, sclk->cached_div - 1);
+	div = get_reg(sclk->cached_div, sclk->flags);
+	meson_parm_write(clk->map, &sclk->div, div);
 }
 
 static int sclk_div_set_rate(struct clk_hw *hw, unsigned long rate,
@@ -224,7 +243,7 @@ static void sclk_div_init(struct clk_hw *hw)
 	if (!val)
 		sclk->cached_div = sclk_div_maxdiv(sclk);
 	else
-		sclk->cached_div = val + 1;
+		sclk->cached_div = get_value(val, sclk->flags);
 
 	sclk_div_get_duty_cycle(hw, &sclk->cached_duty);
 }
-- 
1.9.1

