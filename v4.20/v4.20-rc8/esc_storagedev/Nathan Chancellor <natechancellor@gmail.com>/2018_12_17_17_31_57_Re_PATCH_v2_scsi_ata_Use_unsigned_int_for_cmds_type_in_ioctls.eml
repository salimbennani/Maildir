Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:47:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 456545805CF;
	Mon, 17 Dec 2018 09:32:09 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 09:32:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AYoNSfx0BJYRPUzwEsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segQKf3xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZos3vO6cOUeC61q/IxijdYvNWwzj97pTHfQ4lofGIWrJwa9faxE4pFwzfklWf?=
 =?us-ascii?q?t5DqPzOP2eQLr2eU8e5gVeaoi249sAxxrT2vyd0tionNnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2Rkl7Ydu+H5tRsSGXL4R2QsI+Q2FopSY10acKtoK8fCgPzpks2h3Ra+SffoSW?=
 =?us-ascii?q?/h7uUPydLSp2iX57Yr6zmhW//VS6xuD9VMS4yEhGoTBZntXRs30A2BLT58uCR/?=
 =?us-ascii?q?dg4kuuwjOC2x7c5+5eIU05kK/WJ4Anz7UtjJQcq17DETXzmEjujK+ZaEEk+u+w?=
 =?us-ascii?q?5uT5bbXpuIWcO5V3ig7gKKQunNKwAeAiPggJRWib9vyw1Lzl/ULnXLVHluM6nr?=
 =?us-ascii?q?XdvZzAOMgWqLC1DxVI3osg9xqzFTar3dYAkXkCNl1FeRaHj4bzO1HJJfD1FfO/?=
 =?us-ascii?q?g1WqkDd2yPHKJ77hDYvXLnjFjrjhea9x60lSyQo1099f/YlZCq8OIP3tQE/9rt?=
 =?us-ascii?q?/YAQEjMwyy3ennDM9x1oQEWWKAGqOZKr/dsUeU5uIzJOmBfIsVuDf+K/c7/fLv?=
 =?us-ascii?q?gmI5lEQZfamo25sXdX+5Eu5nI0WffXrjnNMBHX0WsQo5SezgkEeCXiJLZ3auQ6?=
 =?us-ascii?q?I84Sk2CIK8AofCWoCimruB0D27Hp1LfG9GDF+MHGzsd4WFXfcMdS2TLtVgkjwC?=
 =?us-ascii?q?SbiuVYsh2Quyuw/9zrptNvDU9TEAtZL/yNh14PXelRM19TNqFcid0GaNT2dynm?=
 =?us-ascii?q?MPXDI22KF/oUpgylaMy6R4gvpYFcBN6PNNSAs1KZncz+liAdDoRg3BZsuJSEqh?=
 =?us-ascii?q?Qti+Gz4xVdIxw9gNY0pnAdWtlBLD0jGuA78UkbyLGZM1/rjd33j3O8Zy1XLG2L?=
 =?us-ascii?q?M9gFkhR8tFLXemibJn9wjPG47JlF2Ul6WweqQaxiLN8GaDwnCIvEFXSwNwVaTF?=
 =?us-ascii?q?XXYCZkrZt9j550XCT6OwBrQjKAdO1cmCKq5SYN3zkVpGXOvjOMjZY2+phmi/Hw?=
 =?us-ascii?q?iIya2WYIrqYWod2j7dB1YCkwwU+XaGNg0+BiO6rmLaDTxuE0/vYkz2/el/rnO7?=
 =?us-ascii?q?UlE7zwWQY0J90Lq1/wYfheaARPMLwrIEpCAhpi1pE1mnwdLZFcCMpwp7c6Vaet?=
 =?us-ascii?q?My/lFH2Hndtwx8OJygMq9jikQfcwRxo0PhyRF3Bp9cnsgtqXMg1BByJr6A0FNd?=
 =?us-ascii?q?azOY2oj9OqHWKmn3+xCvd67W21HE3NaK4KsP7+44q1HivAGvGUov6HFn09hT03?=
 =?us-ascii?q?uB6ZTGFgsSUZTtUkkp8xh2va3VYi4454nMz31jLbG0siPe29IuHOYq0BKgcMlQ?=
 =?us-ascii?q?MayaFA7+CdYVB9WzJ+MwnVipbRUEPP5J+a4wPsOmceaG2aGxMOZhmjKmkXpI4I?=
 =?us-ascii?q?Rn3k2Q8Cp8T/bC34wZzPGAwguHSzD8gU+hs8Dqg4xLeSseH2u/ySf+Ao5RabZ/?=
 =?us-ascii?q?fYIKCWeoPs22yc9yh5/rW35E6lGjA0kK19OueRqXd1b9xxFf1VwLoXy7niu11y?=
 =?us-ascii?q?Z0kzA1oaWFxizB3uPieAABOmFVXmlijE7gLpSugNAeQUencRIplByj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iLjHm?=
 =?us-ascii?q?tS3jA6eyuxupXkmRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+hVIdccTPozYODsyu3/3ZqDge8n/Cwm93nFxY10Sng2t?=
 =?us-ascii?q?luVCXIqgv8Y4bx26S7N+JnYldnBFvm58VmHYF+l5M6hIsM1ngCmpWV4X0HnH/z?=
 =?us-ascii?q?MNpB3qLydngNRT8Nw9PO5Ajl2UtjLm+Gxo7jV3WdxNdhaMe+Ym8Mxi096MVKAr?=
 =?us-ascii?q?+O7LNYhSt1vka4rQXJbPh+hDgdyOEi6H4Hg+4TvgotwT6QArQTHUleICztmA6E?=
 =?us-ascii?q?79G4rKVLemmvdaK821Z5ndCkFLuCuB1TWG7lepc+Gi999sB/MFPP0HLp8I3lds?=
 =?us-ascii?q?ffbckPthKKiRfPlPZaKIg+lvcRgSpnOGT9vWAqyuIhjBxu2426s5aDK2l34K25?=
 =?us-ascii?q?BRtYPCXvZ8wP4jHtkbpensGO0oCzGZVhHy8HXZryQvKuDTISru/nNweVHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5Gxixy8P7?=
 =?us-ascii?q?d0d54i0R6kT8qhtR0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQD2EGQEmECE74PrW0+dnM6euYBve9L/vTZ7WBs/deWuyM?=
 =?us-ascii?q?xZKu1Itm4jmNOt+OPnlkE/00xE5DUWplFMTenjUFUzYXmD7Vb86HuBe8/TV6r8?=
 =?us-ascii?q?C48PT2QQLv+JGAC71IPdV0/BC2h6iDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF76Ii0QlMOs7bidL12qR7jv4vDFdFWk?=
 =?us-ascii?q?Lumtu0ZcwROGy9MFLHBECWNLWJPzHLwsf3Yb+iRr1UlulbqxqwuTODGU/5IjuD?=
 =?us-ascii?q?jyXpVwyoMexUli6bIQdRuJujfRdtE2TjSNPmZwa/MN92iz023LI1imnLNW4aLT?=
 =?us-ascii?q?hzbUdNoqeM4iNfh/V1A3ZB4WZ9LemYhyaZ6PHVKooXsftuGCh7i/hW72g6y7RL?=
 =?us-ascii?q?6iFJX/h1mCrUrt5zrFCqiOiPyjx7UBVQrjZHnp6EvUJnOa/B7JlPRW7E/A4R7W?=
 =?us-ascii?q?WXExkLp8FqCtvqu6BRzNjAjKPyKDdY/NLS8ssRHMzUKMOBMHo8PhvlAj/UDA0Z?=
 =?us-ascii?q?TTG1MWHTnVBSkPaX9i7dkp9viJXqg9InWrVcWRRhH+MQDUlNH9EYJppzGD8nx/?=
 =?us-ascii?q?rTxuwB4Hel5DSXZoMSlJfbSvWXBfj+Yn7Nj7RGbTMMwLXlPcINMIDnnU1obx9x?=
 =?us-ascii?q?m4GcXwKaeNlXvixnJixy6H1A7HVkVWA1kQqxbwq3/H4VU+a5ghMskQZ4SeM3/T?=
 =?us-ascii?q?zo7hE8IV+c9wUql0xkv9z5gTmXOBXxJaG7UIVSDDC84044Lp7wQw9zZgC2mUt+?=
 =?us-ascii?q?HDjBTrNVybBncDY420fnpZJTFKsEHuV/axgKyKTSPq1w3A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAD23Bdch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBAYEvgTmBAieMFYt3gg0UjXyES4R9FIFbFgE?=
 =?us-ascii?q?BGAsIAYdWIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDEIBEAEEAYFdJAGCYgECA?=
 =?us-ascii?q?wECJBMGARsdAQMCCQEBBQUYCSUDDAUNAhEBBQEiARIFgx0BgWcBAxUBBAqcUzy?=
 =?us-ascii?q?MDBYFAReCdwWBMQGDAAoZJw1dgTcCAQUSixCBHBeBf4ERgxKCV0cCgUqDUIImA?=
 =?us-ascii?q?ok4gX6FFVGPTi8Jhw2HHYMlIwqBU4gWh18siRCBBYNxgRKJeQYCCQcPIYElgg5?=
 =?us-ascii?q?wgzyCGwwXEoM4inMgMoECAwEBIRMLAYUNgwqFGAEB?=
X-IPAS-Result: =?us-ascii?q?A0AEAAD23Bdch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBAYEvgTmBAieMFYt3gg0UjXyES4R9FIFbFgEBGAsIAYdWIjQJD?=
 =?us-ascii?q?QEDAQEBAQEBAgETAQEBCgsJCCkjDEIBEAEEAYFdJAGCYgECAwECJBMGARsdAQM?=
 =?us-ascii?q?CCQEBBQUYCSUDDAUNAhEBBQEiARIFgx0BgWcBAxUBBAqcUzyMDBYFAReCdwWBM?=
 =?us-ascii?q?QGDAAoZJw1dgTcCAQUSixCBHBeBf4ERgxKCV0cCgUqDUIImAok4gX6FFVGPTi8?=
 =?us-ascii?q?Jhw2HHYMlIwqBU4gWh18siRCBBYNxgRKJeQYCCQcPIYElgg5wgzyCGwwXEoM4i?=
 =?us-ascii?q?nMgMoECAwEBIRMLAYUNgwqFGAEB?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="55507556"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 09:32:07 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1733226AbeLQRcD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 12:32:03 -0500
Received: from mail-wr1-f66.google.com ([209.85.221.66]:37979 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726436AbeLQRcD (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 12:32:03 -0500
Received: by mail-wr1-f66.google.com with SMTP id v13so13141946wrw.5;
        Mon, 17 Dec 2018 09:32:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=5aV86hksqq7H5njVl0GMGphmG/sfCU30G1FoJiZP1Us=;
        b=NZD9IER4sFVO0uEXRotjaWs4vsDAHC4VRA8c87IQxZzTq4MVHprOxg9rQYLmJ7+wi/
         jaXfb3f0ZWnE9V7AnasUAlvZoqX9koKmQ/aWxuCHR6HjSqxkg59nKjiXyHiX0ze9tHug
         nUOCMAuswgsZxUZaFpfEIOwuclOahfFPTaG2jW0jGMV7QKBcv5ZGys62sG6CF5aiW2Yt
         7j7PCSXz6PhSuKfQHRrqXkmVVh0Pjz13FfyYPqPTREEihf6gkis4q667mH+EM+bSevKs
         mtaocj6U5VFRp8yhsgnrfJ5whrL/DFV3AzOy+iC4wVuYnWjlbkhP9oq2f6ptL4bHJeDv
         aWcQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=5aV86hksqq7H5njVl0GMGphmG/sfCU30G1FoJiZP1Us=;
        b=UBLcEyXmsMkSCNzPki5FP8jiuhsY378PQrp9Zlc71OTB/PxdaaOujysZmml+tx20vE
         Rge0DtBbgbEBgnGyTzXhNJ1Ea6eJifAPn3l1/gqWHCZZh+tSVjXXGGyPBRZlKgvI/25C
         6SkPTgFaowPdPcIHbrK5BMs1/W5FWE/bG/mrew6MWO6kYvoft8Gs271mjNBa72PX/YJG
         +KM9v4kAMgzqDZfIiDaRoD76FrOrarrfCwQ7bIEA0pKzLNrclDLbVYJCJ3RjEYfYCyoX
         W9Zh6M4QurjtOD1TCJcPukiASvph7zHzjWnqlOitaKY4ACvvMuPHfuvd1IIDKwe4irjV
         jQxg==
X-Gm-Message-State: AA+aEWZDjN/W4Z+wPxdnJfScKEIVqUfEOOGcEBAxu1RdsWR34IMKShMx
        8FezIfWXARunXXIj19dhCj4=
X-Google-Smtp-Source: AFSGD/UO+Pne0SPa5ErScKc+tQV8UqnJIXPpN8qIwnVyKx5SSRvIEzxDtFC147pUFKyBJJjb7evLdw==
X-Received: by 2002:adf:e78f:: with SMTP id n15mr11878584wrm.115.1545067919294;
        Mon, 17 Dec 2018 09:31:59 -0800 (PST)
Received: from flashbox ([2a01:4f8:10b:24a5::2])
        by smtp.gmail.com with ESMTPSA id m4sm237232wmi.3.2018.12.17.09.31.58
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 17 Dec 2018 09:31:58 -0800 (PST)
Date: Mon, 17 Dec 2018 10:31:57 -0700
From: Nathan Chancellor <natechancellor@gmail.com>
To: Jens Axboe <axboe@kernel.dk>,
        "James E.J. Bottomley" <jejb@linux.vnet.ibm.com>,
        "Martin K. Petersen" <martin.petersen@oracle.com>
Cc: Adaptec OEM Raid Solutions <aacraid@microsemi.com>,
        "Manoj N. Kumar" <manoj@linux.vnet.ibm.com>,
        "Matthew R. Ochs" <mrochs@linux.vnet.ibm.com>,
        Uma Krishnan <ukrishn@linux.vnet.ibm.com>,
        Bradley Grove <linuxdrivers@attotech.com>,
        Don Brace <don.brace@microsemi.com>,
        Brian King <brking@us.ibm.com>,
        Bart Van Assche <bvanassche@acm.org>,
        linux-ide@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-scsi@vger.kernel.org, esc.storagedev@microsemi.com,
        Nick Desaulniers <ndesaulniers@google.com>
Subject: Re: [PATCH v2] scsi/ata: Use unsigned int for cmd's type in ioctls
 in scsi_host_template
Message-ID: <20181217173157.GA32586@flashbox>
References: <20181019175714.444-1-natechancellor@gmail.com>
 <20181020050143.589-1-natechancellor@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181020050143.589-1-natechancellor@gmail.com>
User-Agent: Mutt/1.11.1 (2018-12-01)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Oct 19, 2018 at 10:01:44PM -0700, Nathan Chancellor wrote:
> Clang warns several times in the scsi subsystem (trimmed for brevity):
> 
> drivers/scsi/hpsa.c:6209:7: warning: overflow converting case value to
> switch condition type (2147762695 to 18446744071562347015) [-Wswitch]
>         case CCISS_GETBUSTYPES:
>              ^
> drivers/scsi/hpsa.c:6208:7: warning: overflow converting case value to
> switch condition type (2147762694 to 18446744071562347014) [-Wswitch]
>         case CCISS_GETHEARTBEAT:
>              ^
> 
> The root cause is that the _IOC macro can generate really large numbers,
> which don't find into type 'int', which is used for the cmd paremeter in
> the ioctls in scsi_host_template. My research into how GCC and Clang are
> handling this at a low level didn't prove fruitful. However, looking at
> the rest of the kernel tree, all ioctls use an 'unsigned int' for the
> cmd parameter, which will fit all of the _IOC values in the scsi/ata
> subsystems.
> 
> Make that change because none of the ioctls expect to take a negative
> value, it brings the ioctls inline with the reset of the kernel, and it
> removes ambiguity, which is never good when dealing with compilers.
> 
> Link: https://github.com/ClangBuiltLinux/linux/issues/85
> Link: https://github.com/ClangBuiltLinux/linux/issues/154
> Link: https://github.com/ClangBuiltLinux/linux/issues/157
> Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
> ---
> 
> v1 -> 2:
> 
> * Fix build breakage in cxlflash driver from forgetting to update
>   prototype (thanks to 0day for catching it).
> 
>  drivers/ata/libata-scsi.c             |  5 +++--
>  drivers/scsi/aacraid/aachba.c         |  2 +-
>  drivers/scsi/aacraid/aacraid.h        |  4 ++--
>  drivers/scsi/aacraid/commctrl.c       |  2 +-
>  drivers/scsi/aacraid/linit.c          |  6 ++++--
>  drivers/scsi/cxlflash/common.h        |  3 ++-
>  drivers/scsi/cxlflash/superpipe.c     | 12 +++++-------
>  drivers/scsi/esas2r/esas2r.h          |  4 ++--
>  drivers/scsi/esas2r/esas2r_ioctl.c    | 13 ++++++-------
>  drivers/scsi/esas2r/esas2r_main.c     |  2 +-
>  drivers/scsi/hpsa.c                   | 15 +++++++++------
>  drivers/scsi/ipr.c                    |  3 ++-
>  drivers/scsi/libsas/sas_scsi_host.c   |  2 +-
>  drivers/scsi/scsi_debug.c             |  3 ++-
>  drivers/scsi/smartpqi/smartpqi_init.c |  3 ++-
>  include/linux/libata.h                |  5 +++--
>  include/scsi/libsas.h                 |  3 ++-
>  include/scsi/scsi_host.h              |  6 ++++--
>  18 files changed, 52 insertions(+), 41 deletions(-)
> 
> diff --git a/drivers/ata/libata-scsi.c b/drivers/ata/libata-scsi.c
> index 3d4887d0e84a..6291f1dbf342 100644
> --- a/drivers/ata/libata-scsi.c
> +++ b/drivers/ata/libata-scsi.c
> @@ -778,7 +778,7 @@ static int ata_ioc32(struct ata_port *ap)
>  }
>  
>  int ata_sas_scsi_ioctl(struct ata_port *ap, struct scsi_device *scsidev,
> -		     int cmd, void __user *arg)
> +		     unsigned int cmd, void __user *arg)
>  {
>  	unsigned long val;
>  	int rc = -EINVAL;
> @@ -829,7 +829,8 @@ int ata_sas_scsi_ioctl(struct ata_port *ap, struct scsi_device *scsidev,
>  }
>  EXPORT_SYMBOL_GPL(ata_sas_scsi_ioctl);
>  
> -int ata_scsi_ioctl(struct scsi_device *scsidev, int cmd, void __user *arg)
> +int ata_scsi_ioctl(struct scsi_device *scsidev, unsigned int cmd,
> +		   void __user *arg)
>  {
>  	return ata_sas_scsi_ioctl(ata_shost_to_port(scsidev->host),
>  				scsidev, cmd, arg);
> diff --git a/drivers/scsi/aacraid/aachba.c b/drivers/scsi/aacraid/aachba.c
> index bd7f352c28f3..a6399fac3333 100644
> --- a/drivers/scsi/aacraid/aachba.c
> +++ b/drivers/scsi/aacraid/aachba.c
> @@ -3452,7 +3452,7 @@ static int delete_disk(struct aac_dev *dev, void __user *arg)
>  	}
>  }
>  
> -int aac_dev_ioctl(struct aac_dev *dev, int cmd, void __user *arg)
> +int aac_dev_ioctl(struct aac_dev *dev, unsigned int cmd, void __user *arg)
>  {
>  	switch (cmd) {
>  	case FSACTL_QUERY_DISK:
> diff --git a/drivers/scsi/aacraid/aacraid.h b/drivers/scsi/aacraid/aacraid.h
> index 39eb415987fc..1965072ab673 100644
> --- a/drivers/scsi/aacraid/aacraid.h
> +++ b/drivers/scsi/aacraid/aacraid.h
> @@ -2705,12 +2705,12 @@ void aac_set_intx_mode(struct aac_dev *dev);
>  int aac_get_config_status(struct aac_dev *dev, int commit_flag);
>  int aac_get_containers(struct aac_dev *dev);
>  int aac_scsi_cmd(struct scsi_cmnd *cmd);
> -int aac_dev_ioctl(struct aac_dev *dev, int cmd, void __user *arg);
> +int aac_dev_ioctl(struct aac_dev *dev, unsigned int cmd, void __user *arg);
>  #ifndef shost_to_class
>  #define shost_to_class(shost) &shost->shost_dev
>  #endif
>  ssize_t aac_get_serial_number(struct device *dev, char *buf);
> -int aac_do_ioctl(struct aac_dev * dev, int cmd, void __user *arg);
> +int aac_do_ioctl(struct aac_dev *dev, unsigned int cmd, void __user *arg);
>  int aac_rx_init(struct aac_dev *dev);
>  int aac_rkt_init(struct aac_dev *dev);
>  int aac_nark_init(struct aac_dev *dev);
> diff --git a/drivers/scsi/aacraid/commctrl.c b/drivers/scsi/aacraid/commctrl.c
> index 25f6600d6c09..fd8a10871598 100644
> --- a/drivers/scsi/aacraid/commctrl.c
> +++ b/drivers/scsi/aacraid/commctrl.c
> @@ -1061,7 +1061,7 @@ static int aac_send_reset_adapter(struct aac_dev *dev, void __user *arg)
>  	return retval;
>  }
>  
> -int aac_do_ioctl(struct aac_dev * dev, int cmd, void __user *arg)
> +int aac_do_ioctl(struct aac_dev *dev, unsigned int cmd, void __user *arg)
>  {
>  	int status;
>  
> diff --git a/drivers/scsi/aacraid/linit.c b/drivers/scsi/aacraid/linit.c
> index 2d4e4ddc5ace..cd2efb44f62c 100644
> --- a/drivers/scsi/aacraid/linit.c
> +++ b/drivers/scsi/aacraid/linit.c
> @@ -616,7 +616,8 @@ static struct device_attribute *aac_dev_attrs[] = {
>  	NULL,
>  };
>  
> -static int aac_ioctl(struct scsi_device *sdev, int cmd, void __user * arg)
> +static int aac_ioctl(struct scsi_device *sdev, unsigned int cmd,
> +		     void __user *arg)
>  {
>  	struct aac_dev *dev = (struct aac_dev *)sdev->host->hostdata;
>  	if (!capable(CAP_SYS_RAWIO))
> @@ -1205,7 +1206,8 @@ static long aac_compat_do_ioctl(struct aac_dev *dev, unsigned cmd, unsigned long
>  	return ret;
>  }
>  
> -static int aac_compat_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
> +static int aac_compat_ioctl(struct scsi_device *sdev, unsigned int cmd,
> +			    void __user *arg)
>  {
>  	struct aac_dev *dev = (struct aac_dev *)sdev->host->hostdata;
>  	if (!capable(CAP_SYS_RAWIO))
> diff --git a/drivers/scsi/cxlflash/common.h b/drivers/scsi/cxlflash/common.h
> index 8908a20065c8..4d90106fcb37 100644
> --- a/drivers/scsi/cxlflash/common.h
> +++ b/drivers/scsi/cxlflash/common.h
> @@ -334,7 +334,8 @@ int cxlflash_afu_sync(struct afu *afu, ctx_hndl_t c, res_hndl_t r, u8 mode);
>  void cxlflash_list_init(void);
>  void cxlflash_term_global_luns(void);
>  void cxlflash_free_errpage(void);
> -int cxlflash_ioctl(struct scsi_device *sdev, int cmd, void __user *arg);
> +int cxlflash_ioctl(struct scsi_device *sdev, unsigned int cmd,
> +		   void __user *arg);
>  void cxlflash_stop_term_user_contexts(struct cxlflash_cfg *cfg);
>  int cxlflash_mark_contexts_error(struct cxlflash_cfg *cfg);
>  void cxlflash_term_local_luns(struct cxlflash_cfg *cfg);
> diff --git a/drivers/scsi/cxlflash/superpipe.c b/drivers/scsi/cxlflash/superpipe.c
> index acac6152f50b..1a94a469051e 100644
> --- a/drivers/scsi/cxlflash/superpipe.c
> +++ b/drivers/scsi/cxlflash/superpipe.c
> @@ -1924,7 +1924,7 @@ static int cxlflash_disk_verify(struct scsi_device *sdev,
>   *
>   * Return: A string identifying the decoded ioctl.
>   */
> -static char *decode_ioctl(int cmd)
> +static char *decode_ioctl(unsigned int cmd)
>  {
>  	switch (cmd) {
>  	case DK_CXLFLASH_ATTACH:
> @@ -2051,7 +2051,7 @@ static int cxlflash_disk_direct_open(struct scsi_device *sdev, void *arg)
>   *
>   * Return: 0 on success, -errno on failure
>   */
> -static int ioctl_common(struct scsi_device *sdev, int cmd)
> +static int ioctl_common(struct scsi_device *sdev, unsigned int cmd)
>  {
>  	struct cxlflash_cfg *cfg = shost_priv(sdev->host);
>  	struct device *dev = &cfg->dev->dev;
> @@ -2096,7 +2096,7 @@ static int ioctl_common(struct scsi_device *sdev, int cmd)
>   *
>   * Return: 0 on success, -errno on failure
>   */
> -int cxlflash_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
> +int cxlflash_ioctl(struct scsi_device *sdev, unsigned int cmd, void __user *arg)
>  {
>  	typedef int (*sioctl) (struct scsi_device *, void *);
>  
> @@ -2179,8 +2179,7 @@ int cxlflash_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
>  	}
>  
>  	if (unlikely(copy_from_user(&buf, arg, size))) {
> -		dev_err(dev, "%s: copy_from_user() fail "
> -			"size=%lu cmd=%d (%s) arg=%p\n",
> +		dev_err(dev, "%s: copy_from_user() fail size=%lu cmd=%u (%s) arg=%p\n",
>  			__func__, size, cmd, decode_ioctl(cmd), arg);
>  		rc = -EFAULT;
>  		goto cxlflash_ioctl_exit;
> @@ -2203,8 +2202,7 @@ int cxlflash_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
>  	rc = do_ioctl(sdev, (void *)&buf);
>  	if (likely(!rc))
>  		if (unlikely(copy_to_user(arg, &buf, size))) {
> -			dev_err(dev, "%s: copy_to_user() fail "
> -				"size=%lu cmd=%d (%s) arg=%p\n",
> +			dev_err(dev, "%s: copy_to_user() fail size=%lu cmd=%u (%s) arg=%p\n",
>  				__func__, size, cmd, decode_ioctl(cmd), arg);
>  			rc = -EFAULT;
>  		}
> diff --git a/drivers/scsi/esas2r/esas2r.h b/drivers/scsi/esas2r/esas2r.h
> index 858c3b33db78..7f43b95f4e94 100644
> --- a/drivers/scsi/esas2r/esas2r.h
> +++ b/drivers/scsi/esas2r/esas2r.h
> @@ -965,8 +965,8 @@ struct esas2r_adapter {
>  const char *esas2r_info(struct Scsi_Host *);
>  int esas2r_write_params(struct esas2r_adapter *a, struct esas2r_request *rq,
>  			struct esas2r_sas_nvram *data);
> -int esas2r_ioctl_handler(void *hostdata, int cmd, void __user *arg);
> -int esas2r_ioctl(struct scsi_device *dev, int cmd, void __user *arg);
> +int esas2r_ioctl_handler(void *hostdata, unsigned int cmd, void __user *arg);
> +int esas2r_ioctl(struct scsi_device *dev, unsigned int cmd, void __user *arg);
>  u8 handle_hba_ioctl(struct esas2r_adapter *a,
>  		    struct atto_ioctl *ioctl_hba);
>  int esas2r_queuecommand(struct Scsi_Host *host, struct scsi_cmnd *cmd);
> diff --git a/drivers/scsi/esas2r/esas2r_ioctl.c b/drivers/scsi/esas2r/esas2r_ioctl.c
> index 34bcc8c04ff4..916b9adf4921 100644
> --- a/drivers/scsi/esas2r/esas2r_ioctl.c
> +++ b/drivers/scsi/esas2r/esas2r_ioctl.c
> @@ -1274,7 +1274,7 @@ int esas2r_write_params(struct esas2r_adapter *a, struct esas2r_request *rq,
>  
>  
>  /* This function only cares about ATTO-specific ioctls (atto_express_ioctl) */
> -int esas2r_ioctl_handler(void *hostdata, int cmd, void __user *arg)
> +int esas2r_ioctl_handler(void *hostdata, unsigned int cmd, void __user *arg)
>  {
>  	struct atto_express_ioctl *ioctl = NULL;
>  	struct esas2r_adapter *a;
> @@ -1292,7 +1292,7 @@ int esas2r_ioctl_handler(void *hostdata, int cmd, void __user *arg)
>  	ioctl = memdup_user(arg, sizeof(struct atto_express_ioctl));
>  	if (IS_ERR(ioctl)) {
>  		esas2r_log(ESAS2R_LOG_WARN,
> -			   "ioctl_handler access_ok failed for cmd %d, "
> +			   "ioctl_handler access_ok failed for cmd %u, "
>  			   "address %p", cmd,
>  			   arg);
>  		return PTR_ERR(ioctl);
> @@ -1493,7 +1493,7 @@ int esas2r_ioctl_handler(void *hostdata, int cmd, void __user *arg)
>  ioctl_done:
>  
>  	if (err < 0) {
> -		esas2r_log(ESAS2R_LOG_WARN, "err %d on ioctl cmd %d", err,
> +		esas2r_log(ESAS2R_LOG_WARN, "err %d on ioctl cmd %u", err,
>  			   cmd);
>  
>  		switch (err) {
> @@ -1518,9 +1518,8 @@ int esas2r_ioctl_handler(void *hostdata, int cmd, void __user *arg)
>  	err = __copy_to_user(arg, ioctl, sizeof(struct atto_express_ioctl));
>  	if (err != 0) {
>  		esas2r_log(ESAS2R_LOG_WARN,
> -			   "ioctl_handler copy_to_user didn't copy "
> -			   "everything (err %d, cmd %d)", err,
> -			   cmd);
> +			   "ioctl_handler copy_to_user didn't copy everything (err %d, cmd %u)",
> +			   err, cmd);
>  		kfree(ioctl);
>  
>  		return -EFAULT;
> @@ -1531,7 +1530,7 @@ int esas2r_ioctl_handler(void *hostdata, int cmd, void __user *arg)
>  	return 0;
>  }
>  
> -int esas2r_ioctl(struct scsi_device *sd, int cmd, void __user *arg)
> +int esas2r_ioctl(struct scsi_device *sd, unsigned int cmd, void __user *arg)
>  {
>  	return esas2r_ioctl_handler(sd->host->hostdata, cmd, arg);
>  }
> diff --git a/drivers/scsi/esas2r/esas2r_main.c b/drivers/scsi/esas2r/esas2r_main.c
> index c07118617d89..25dc8d44ed8e 100644
> --- a/drivers/scsi/esas2r/esas2r_main.c
> +++ b/drivers/scsi/esas2r/esas2r_main.c
> @@ -624,7 +624,7 @@ static int esas2r_proc_major;
>  long esas2r_proc_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
>  {
>  	return esas2r_ioctl_handler(esas2r_proc_host->hostdata,
> -				    (int)cmd, (void __user *)arg);
> +				    cmd, (void __user *)arg);
>  }
>  
>  static void __exit esas2r_exit(void)
> diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
> index c9cccf35e9d7..c9d41d3b50f1 100644
> --- a/drivers/scsi/hpsa.c
> +++ b/drivers/scsi/hpsa.c
> @@ -251,10 +251,11 @@ static int number_of_controllers;
>  
>  static irqreturn_t do_hpsa_intr_intx(int irq, void *dev_id);
>  static irqreturn_t do_hpsa_intr_msi(int irq, void *dev_id);
> -static int hpsa_ioctl(struct scsi_device *dev, int cmd, void __user *arg);
> +static int hpsa_ioctl(struct scsi_device *dev, unsigned int cmd,
> +		      void __user *arg);
>  
>  #ifdef CONFIG_COMPAT
> -static int hpsa_compat_ioctl(struct scsi_device *dev, int cmd,
> +static int hpsa_compat_ioctl(struct scsi_device *dev, unsigned int cmd,
>  	void __user *arg);
>  #endif
>  
> @@ -6123,7 +6124,7 @@ static void cmd_free(struct ctlr_info *h, struct CommandList *c)
>  
>  #ifdef CONFIG_COMPAT
>  
> -static int hpsa_ioctl32_passthru(struct scsi_device *dev, int cmd,
> +static int hpsa_ioctl32_passthru(struct scsi_device *dev, unsigned int cmd,
>  	void __user *arg)
>  {
>  	IOCTL32_Command_struct __user *arg32 =
> @@ -6160,7 +6161,7 @@ static int hpsa_ioctl32_passthru(struct scsi_device *dev, int cmd,
>  }
>  
>  static int hpsa_ioctl32_big_passthru(struct scsi_device *dev,
> -	int cmd, void __user *arg)
> +	unsigned int cmd, void __user *arg)
>  {
>  	BIG_IOCTL32_Command_struct __user *arg32 =
>  	    (BIG_IOCTL32_Command_struct __user *) arg;
> @@ -6197,7 +6198,8 @@ static int hpsa_ioctl32_big_passthru(struct scsi_device *dev,
>  	return err;
>  }
>  
> -static int hpsa_compat_ioctl(struct scsi_device *dev, int cmd, void __user *arg)
> +static int hpsa_compat_ioctl(struct scsi_device *dev, unsigned int cmd,
> +			     void __user *arg)
>  {
>  	switch (cmd) {
>  	case CCISS_GETPCIINFO:
> @@ -6517,7 +6519,8 @@ static void check_ioctl_unit_attention(struct ctlr_info *h,
>  /*
>   * ioctl
>   */
> -static int hpsa_ioctl(struct scsi_device *dev, int cmd, void __user *arg)
> +static int hpsa_ioctl(struct scsi_device *dev, unsigned int cmd,
> +		      void __user *arg)
>  {
>  	struct ctlr_info *h;
>  	void __user *argp = (void __user *)arg;
> diff --git a/drivers/scsi/ipr.c b/drivers/scsi/ipr.c
> index 271990bc065b..97fcc881f9f1 100644
> --- a/drivers/scsi/ipr.c
> +++ b/drivers/scsi/ipr.c
> @@ -6696,7 +6696,8 @@ static int ipr_queuecommand(struct Scsi_Host *shost,
>   * Return value:
>   * 	0 on success / other on failure
>   **/
> -static int ipr_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
> +static int ipr_ioctl(struct scsi_device *sdev, unsigned int cmd,
> +		     void __user *arg)
>  {
>  	struct ipr_resource_entry *res;
>  
> diff --git a/drivers/scsi/libsas/sas_scsi_host.c b/drivers/scsi/libsas/sas_scsi_host.c
> index 33229348dcb6..4eeaafbe0504 100644
> --- a/drivers/scsi/libsas/sas_scsi_host.c
> +++ b/drivers/scsi/libsas/sas_scsi_host.c
> @@ -805,7 +805,7 @@ void sas_scsi_recover_host(struct Scsi_Host *shost)
>  		    shost->host_failed, tries);
>  }
>  
> -int sas_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
> +int sas_ioctl(struct scsi_device *sdev, unsigned int cmd, void __user *arg)
>  {
>  	struct domain_device *dev = sdev_to_domain_dev(sdev);
>  
> diff --git a/drivers/scsi/scsi_debug.c b/drivers/scsi/scsi_debug.c
> index 60bcc6df97a9..4c513651c95f 100644
> --- a/drivers/scsi/scsi_debug.c
> +++ b/drivers/scsi/scsi_debug.c
> @@ -836,7 +836,8 @@ static void mk_sense_invalid_opcode(struct scsi_cmnd *scp)
>  	mk_sense_buffer(scp, ILLEGAL_REQUEST, INVALID_OPCODE, 0);
>  }
>  
> -static int scsi_debug_ioctl(struct scsi_device *dev, int cmd, void __user *arg)
> +static int scsi_debug_ioctl(struct scsi_device *dev, unsigned int cmd,
> +			    void __user *arg)
>  {
>  	if (sdebug_verbose) {
>  		if (0x1261 == cmd)
> diff --git a/drivers/scsi/smartpqi/smartpqi_init.c b/drivers/scsi/smartpqi/smartpqi_init.c
> index a25a07a0b7f0..498bdfbbebfa 100644
> --- a/drivers/scsi/smartpqi/smartpqi_init.c
> +++ b/drivers/scsi/smartpqi/smartpqi_init.c
> @@ -5572,7 +5572,8 @@ static int pqi_passthru_ioctl(struct pqi_ctrl_info *ctrl_info, void __user *arg)
>  	return rc;
>  }
>  
> -static int pqi_ioctl(struct scsi_device *sdev, int cmd, void __user *arg)
> +static int pqi_ioctl(struct scsi_device *sdev, unsigned int cmd,
> +		     void __user *arg)
>  {
>  	int rc;
>  	struct pqi_ctrl_info *ctrl_info;
> diff --git a/include/linux/libata.h b/include/linux/libata.h
> index 38c95d66ab12..263ca4f05c24 100644
> --- a/include/linux/libata.h
> +++ b/include/linux/libata.h
> @@ -1123,10 +1123,11 @@ extern int ata_host_activate(struct ata_host *host, int irq,
>  extern void ata_host_detach(struct ata_host *host);
>  extern void ata_host_init(struct ata_host *, struct device *, struct ata_port_operations *);
>  extern int ata_scsi_detect(struct scsi_host_template *sht);
> -extern int ata_scsi_ioctl(struct scsi_device *dev, int cmd, void __user *arg);
> +extern int ata_scsi_ioctl(struct scsi_device *dev, unsigned int cmd,
> +			  void __user *arg);
>  extern int ata_scsi_queuecmd(struct Scsi_Host *h, struct scsi_cmnd *cmd);
>  extern int ata_sas_scsi_ioctl(struct ata_port *ap, struct scsi_device *dev,
> -			    int cmd, void __user *arg);
> +			    unsigned int cmd, void __user *arg);
>  extern void ata_sas_port_destroy(struct ata_port *);
>  extern struct ata_port *ata_sas_port_alloc(struct ata_host *,
>  					   struct ata_port_info *, struct Scsi_Host *);
> diff --git a/include/scsi/libsas.h b/include/scsi/libsas.h
> index 3de3b10da19a..70461264d6e7 100644
> --- a/include/scsi/libsas.h
> +++ b/include/scsi/libsas.h
> @@ -709,7 +709,8 @@ int sas_eh_target_reset_handler(struct scsi_cmnd *cmd);
>  
>  extern void sas_target_destroy(struct scsi_target *);
>  extern int sas_slave_alloc(struct scsi_device *);
> -extern int sas_ioctl(struct scsi_device *sdev, int cmd, void __user *arg);
> +extern int sas_ioctl(struct scsi_device *sdev, unsigned int cmd,
> +		     void __user *arg);
>  extern int sas_drain_work(struct sas_ha_struct *ha);
>  
>  extern void sas_ssp_task_response(struct device *dev, struct sas_task *task,
> diff --git a/include/scsi/scsi_host.h b/include/scsi/scsi_host.h
> index 5ea06d310a25..5c1df26e1d4f 100644
> --- a/include/scsi/scsi_host.h
> +++ b/include/scsi/scsi_host.h
> @@ -65,7 +65,8 @@ struct scsi_host_template {
>  	 *
>  	 * Status: OPTIONAL
>  	 */
> -	int (* ioctl)(struct scsi_device *dev, int cmd, void __user *arg);
> +	int (*ioctl)(struct scsi_device *dev, unsigned int cmd,
> +		     void __user *arg);
>  
>  
>  #ifdef CONFIG_COMPAT
> @@ -75,7 +76,8 @@ struct scsi_host_template {
>  	 *
>  	 * Status: OPTIONAL
>  	 */
> -	int (* compat_ioctl)(struct scsi_device *dev, int cmd, void __user *arg);
> +	int (*compat_ioctl)(struct scsi_device *dev, unsigned int cmd,
> +			    void __user *arg);
>  #endif
>  
>  	/*
> -- 
> 2.19.1
> 

Gentle ping for review, it would be nice to get this into 4.21/5.0 since
I sent it out almost two months ago.

Nathan
