Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:40:00 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 84615580522
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 07:44:15 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 07:44:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AVTtGEReFwFleyBlrVRRsVmAllGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxcW7Yh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhMJzgq1ZrhKuqBNxzZPMYIyXNvRzcb7RcN0GSWVfRcZcTDBNApqm?=
 =?us-ascii?q?YocTE+YNIfpUoo/grFUOtxu+AgysCfv1xDBSgX/22ao62Pk8HAHB2gwhHtMOsH?=
 =?us-ascii?q?LVrN7oM6oSSfu6zK7OzTTCbvNW3zb95ZPSch8/vP6MXah/cdbLxUYzEAPFi0yd?=
 =?us-ascii?q?pIr4ND2WzuQAq3aX4/ZjWO61lmIrtgJ8riKxysoiioTFnJ8Zx1Lc+Sln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXOoVsTs88QGxlvjsxxKcctp6hZicKzYwqxx7BZPyDdIiF?=
 =?us-ascii?q?+hbjVOeKITdkn3JpYr2/hxCv8US6ze38TMa03E5LripDjNbMqmgA2wLP5sWEUP?=
 =?us-ascii?q?dx41qt1DWV2wzN5OxJIVo4mbfZJpI5x74/jJsTsUDNHi/sn0X2ibebdlw69eit?=
 =?us-ascii?q?9uTre6jpqYGCN4BqjgHyK78hmsuiAeQ+LgcBQXOb9eO41L3i/k32Xq9Gj/Irkq?=
 =?us-ascii?q?TBtJDaJMIbprO2AgNP04Yj7Qq/ACmi0NgCgXYHK1dFdQmBj4juPVHOL/b4Deql?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZY+vvt0SV7LcvP/WUf91S/zL8MOQ+ofjp?=
 =?us-ascii?q?i3A/hBkaZ6bu2JIWbHWxGLNhO1mYZnz3xc4MFHpPsgcgQei5tVuZTDQGYn+zW7?=
 =?us-ascii?q?47tCg2DZ/jAYrdS4TomrGYwSqgArVQYWZJDE3KFm3nIJ6ZUfUBYz7HP8l6jzYf?=
 =?us-ascii?q?XqKgQYJy6Rb7rQL/1v9rI/TZ/gUespTs0sUz4Pfcxj8o8jkhN82a12bFZWZyjG?=
 =?us-ascii?q?IORndixKp4p158zFary6V0g/VEU9dU4qUaAU8BKZfAwrkiWJjJUQXbc4LRRQ?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DVAADnZRpchxHrdtBkHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwgmKMdYsdm1YcGBSHLSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxg?=
 =?us-ascii?q?JglwDAwECJB8KLAMBAgYBAUgIAwFTGQWDHYICAQSpJzOFQIRtjD8XgUA/gRGHT?=
 =?us-ascii?q?YYlAolJhg+RXAmRVgwYiXeHYpZNgzWBXIF4MxoIGxU7gmyCJxcSjgxAMYEHHIs?=
 =?us-ascii?q?GR4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0DVAADnZRpchxHrdtBkHgEGBwaBVAYLAYEwgmKMdYsdm1Y?=
 =?us-ascii?q?cGBSHLSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxgJglwDAwECJB8KL?=
 =?us-ascii?q?AMBAgYBAUgIAwFTGQWDHYICAQSpJzOFQIRtjD8XgUA/gRGHTYYlAolJhg+RXAm?=
 =?us-ascii?q?RVgwYiXeHYpZNgzWBXIF4MxoIGxU7gmyCJxcSjgxAMYEHHIsGR4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="57541681"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 07:44:14 -0800
Received: from localhost ([::1]:60862 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZe17-0001kl-RA
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 10:44:13 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:56116)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <pbonzini@redhat.com>) id 1gZdeX-0006uk-32
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 10:20:55 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <pbonzini@redhat.com>) id 1gZdeR-0004tw-KY
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 10:20:51 -0500
Received: from mx1.redhat.com ([209.132.183.28]:35002)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <pbonzini@redhat.com>) id 1gZdeR-0004tT-BT
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 10:20:47 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 90135FD1BE
	for <qemu-devel@nongnu.org>; Wed, 19 Dec 2018 15:20:46 +0000 (UTC)
Received: from donizetti.redhat.com (ovpn-112-76.ams2.redhat.com
	[10.36.112.76])
	by smtp.corp.redhat.com (Postfix) with ESMTP id CB22318237
	for <qemu-devel@nongnu.org>; Wed, 19 Dec 2018 15:20:45 +0000 (UTC)
From: Paolo Bonzini <pbonzini@redhat.com>
To: qemu-devel@nongnu.org
Date: Wed, 19 Dec 2018 16:19:11 +0100
Message-Id: <20181219151917.3874-30-pbonzini@redhat.com>
In-Reply-To: <20181219151917.3874-1-pbonzini@redhat.com>
References: <20181219151917.3874-1-pbonzini@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Wed, 19 Dec 2018 15:20:46 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PULL 29/35] qemu/queue.h: reimplement QTAILQ without
 pointer-to-pointers
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

QTAILQ is a doubly linked list, with a pointer-to-pointer to the last
element from the head, and the previous element from each node.

But if you squint enough, QTAILQ becomes a combination of a singly-linked
forwards list, and another singly-linked list which goes backwards and
is circular.  This is the idea that lets QTAILQ implement reverse
iteration: only, because the backwards list points inside the node,
accessing the previous element needs to go two steps back and one
forwards.

What this patch does is implement it in these terms, without actually
changing the in-memory layout at all.  The coexistence of the two lists
is realized by making QTAILQ_HEAD and QTAILQ_ENTRY unions of the forwards
pointer and a generic QTailQLink node.  Thq QTailQLink can walk the list =
in
both directions; the union is needed so that the forwards pointer can
have the correct type, as a sort of poor man's template.  While there
are other ways to get the same layout without a union, this one has
the advantage of simpler operation in the debugger, because the fields
tqh_first and tqe_next still exist as before the patch.  Those fields are
also used by scripts/qemugdb/mtree.py, so it's a good idea to preserve th=
em.

The advantage of the new representation is that the two-back-one-forward
dance done by backwards accesses can be done all while operating on
QTailQLinks.  No casting to the head struct is needed anymore because,
even though the QTailQLink's forward pointer is a void *, we can use
typeof to recover the correct type.  This patch only changes the
implementation, not the interface.  The next patch will remove the head
struct name from the backwards visit macros.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 include/qemu/queue.h       | 139 ++++++++++++++++---------------------
 include/qemu/rcu_queue.h   |  45 ++++++------
 scripts/cocci-macro-file.h |  14 ++--
 3 files changed, 92 insertions(+), 106 deletions(-)

diff --git a/include/qemu/queue.h b/include/qemu/queue.h
index b9571e93d8..a893facb86 100644
--- a/include/qemu/queue.h
+++ b/include/qemu/queue.h
@@ -346,23 +346,28 @@ struct {                                           =
                     \
 #define QSIMPLEQ_FIRST(head)        ((head)->sqh_first)
 #define QSIMPLEQ_NEXT(elm, field)   ((elm)->field.sqe_next)
=20
+typedef struct QTailQLink {
+    void *tql_next;
+    struct QTailQLink *tql_prev;
+} QTailQLink;
=20
 /*
- * Tail queue definitions.
+ * Tail queue definitions.  The union acts as a poor man template, as if
+ * it were QTailQLink<type>.
  */
 #define QTAILQ_HEAD(name, type)                                         =
\
-struct name {                                                           =
\
-        type *tqh_first;      /* first element */                       =
\
-        type **tqh_last;      /* addr of last next element */           =
\
+union name {                                                            =
\
+        struct type *tqh_first;       /* first element */               =
\
+        QTailQLink tqh_circ;          /* link for circular backwards lis=
t */ \
 }
=20
 #define QTAILQ_HEAD_INITIALIZER(head)                                   =
\
-        { NULL, &(head).tqh_first }
+        { .tqh_circ =3D { NULL, &(head).tqh_circ } }
=20
 #define QTAILQ_ENTRY(type)                                              =
\
-struct {                                                                =
\
-        type *tqe_next;       /* next element */                   \
-        type **tqe_prev;      /* address of previous next element */    =
\
+union {                                                                 =
\
+        struct type *tqe_next;        /* next element */                =
\
+        QTailQLink tqe_circ;          /* link for circular backwards lis=
t */ \
 }
=20
 /*
@@ -370,51 +375,51 @@ struct {                                           =
                     \
  */
 #define QTAILQ_INIT(head) do {                                          =
\
         (head)->tqh_first =3D NULL;                                     =
  \
-        (head)->tqh_last =3D &(head)->tqh_first;                        =
  \
+        (head)->tqh_circ.tql_prev =3D &(head)->tqh_circ;                =
  \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_INSERT_HEAD(head, elm, field) do {                       =
\
         if (((elm)->field.tqe_next =3D (head)->tqh_first) !=3D NULL)    =
    \
-                (head)->tqh_first->field.tqe_prev =3D                   =
  \
-                    &(elm)->field.tqe_next;                             =
\
+            (head)->tqh_first->field.tqe_circ.tql_prev =3D              =
  \
+                &(elm)->field.tqe_circ;                                 =
\
         else                                                            =
\
-                (head)->tqh_last =3D &(elm)->field.tqe_next;            =
  \
+            (head)->tqh_circ.tql_prev =3D &(elm)->field.tqe_circ;       =
  \
         (head)->tqh_first =3D (elm);                                    =
  \
-        (elm)->field.tqe_prev =3D &(head)->tqh_first;                   =
  \
+        (elm)->field.tqe_circ.tql_prev =3D &(head)->tqh_circ;           =
  \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_INSERT_TAIL(head, elm, field) do {                       =
\
         (elm)->field.tqe_next =3D NULL;                                 =
  \
-        (elm)->field.tqe_prev =3D (head)->tqh_last;                     =
  \
-        *(head)->tqh_last =3D (elm);                                    =
  \
-        (head)->tqh_last =3D &(elm)->field.tqe_next;                    =
  \
+        (elm)->field.tqe_circ.tql_prev =3D (head)->tqh_circ.tql_prev;   =
  \
+        (head)->tqh_circ.tql_prev->tql_next =3D (elm);                  =
  \
+        (head)->tqh_circ.tql_prev =3D &(elm)->field.tqe_circ;           =
  \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_INSERT_AFTER(head, listelm, elm, field) do {             =
\
         if (((elm)->field.tqe_next =3D (listelm)->field.tqe_next) !=3D N=
ULL)\
-                (elm)->field.tqe_next->field.tqe_prev =3D               =
  \
-                    &(elm)->field.tqe_next;                             =
\
+            (elm)->field.tqe_next->field.tqe_circ.tql_prev =3D          =
  \
+                &(elm)->field.tqe_circ;                                 =
\
         else                                                            =
\
-                (head)->tqh_last =3D &(elm)->field.tqe_next;            =
  \
+            (head)->tqh_circ.tql_prev =3D &(elm)->field.tqe_circ;       =
  \
         (listelm)->field.tqe_next =3D (elm);                            =
  \
-        (elm)->field.tqe_prev =3D &(listelm)->field.tqe_next;           =
  \
+        (elm)->field.tqe_circ.tql_prev =3D &(listelm)->field.tqe_circ;  =
  \
 } while (/*CONSTCOND*/0)
=20
-#define QTAILQ_INSERT_BEFORE(listelm, elm, field) do {                  =
\
-        (elm)->field.tqe_prev =3D (listelm)->field.tqe_prev;            =
  \
-        (elm)->field.tqe_next =3D (listelm);                            =
  \
-        *(listelm)->field.tqe_prev =3D (elm);                           =
  \
-        (listelm)->field.tqe_prev =3D &(elm)->field.tqe_next;           =
  \
+#define QTAILQ_INSERT_BEFORE(listelm, elm, field) do {                  =
     \
+        (elm)->field.tqe_circ.tql_prev =3D (listelm)->field.tqe_circ.tql=
_prev; \
+        (elm)->field.tqe_next =3D (listelm);                            =
       \
+        (listelm)->field.tqe_circ.tql_prev->tql_next =3D (elm);         =
       \
+        (listelm)->field.tqe_circ.tql_prev =3D &(elm)->field.tqe_circ;  =
       \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_REMOVE(head, elm, field) do {                            =
\
         if (((elm)->field.tqe_next) !=3D NULL)                          =
  \
-                (elm)->field.tqe_next->field.tqe_prev =3D               =
  \
-                    (elm)->field.tqe_prev;                              =
\
+            (elm)->field.tqe_next->field.tqe_circ.tql_prev =3D          =
  \
+                (elm)->field.tqe_circ.tql_prev;                         =
\
         else                                                            =
\
-                (head)->tqh_last =3D (elm)->field.tqe_prev;             =
  \
-        *(elm)->field.tqe_prev =3D (elm)->field.tqe_next;               =
  \
-        (elm)->field.tqe_prev =3D NULL;                                 =
  \
+            (head)->tqh_circ.tql_prev =3D (elm)->field.tqe_circ.tql_prev=
; \
+        (elm)->field.tqe_circ.tql_prev->tql_next =3D (elm)->field.tqe_ne=
xt; \
+        (elm)->field.tqe_circ.tql_prev =3D NULL;                        =
  \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_FOREACH(var, head, field)                                =
\
@@ -428,13 +433,13 @@ struct {                                           =
                     \
                 (var) =3D (next_var))
=20
 #define QTAILQ_FOREACH_REVERSE(var, head, headname, field)              =
\
-        for ((var) =3D (*(((struct headname *)((head)->tqh_last))->tqh_l=
ast));    \
+        for ((var) =3D QTAILQ_LAST(head, headname);                     =
  \
                 (var);                                                  =
\
-                (var) =3D (*(((struct headname *)((var)->field.tqe_prev)=
)->tqh_last)))
+                (var) =3D QTAILQ_PREV(var, headname, field))
=20
 #define QTAILQ_FOREACH_REVERSE_SAFE(var, head, headname, field, prev_var=
) \
-        for ((var) =3D (*(((struct headname *)((head)->tqh_last))->tqh_l=
ast)); \
-             (var) && ((prev_var) =3D (*(((struct headname *)((var)->fie=
ld.tqe_prev))->tqh_last)), 1); \
+        for ((var) =3D QTAILQ_LAST(head, headname);                     =
  \
+             (var) && ((prev_var) =3D QTAILQ_PREV(var, headname, field))=
; \
              (var) =3D (prev_var))
=20
 /*
@@ -443,71 +448,49 @@ struct {                                           =
                     \
 #define QTAILQ_EMPTY(head)               ((head)->tqh_first =3D=3D NULL)
 #define QTAILQ_FIRST(head)               ((head)->tqh_first)
 #define QTAILQ_NEXT(elm, field)          ((elm)->field.tqe_next)
-#define QTAILQ_IN_USE(elm, field)        ((elm)->field.tqe_prev !=3D NUL=
L)
+#define QTAILQ_IN_USE(elm, field)        ((elm)->field.tqe_circ.tql_prev=
 !=3D NULL)
=20
+#define QTAILQ_LINK_PREV(link)                                          =
\
+        ((link).tql_prev->tql_prev->tql_next)
 #define QTAILQ_LAST(head, headname) \
-        (*(((struct headname *)((head)->tqh_last))->tqh_last))
+        ((typeof((head)->tqh_first)) QTAILQ_LINK_PREV((head)->tqh_circ))
 #define QTAILQ_PREV(elm, headname, field) \
-        (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))
+        ((typeof((elm)->field.tqe_next)) QTAILQ_LINK_PREV((elm)->field.t=
qe_circ))
=20
 #define field_at_offset(base, offset, type)                             =
       \
-        ((type) (((char *) (base)) + (offset)))
-
-typedef struct DUMMY_Q_ENTRY DUMMY_Q_ENTRY;
-typedef struct DUMMY_Q DUMMY_Q;
-
-struct DUMMY_Q_ENTRY {
-        QTAILQ_ENTRY(DUMMY_Q_ENTRY) next;
-};
-
-struct DUMMY_Q {
-        QTAILQ_HEAD(DUMMY_Q_HEAD, DUMMY_Q_ENTRY) head;
-};
-
-#define dummy_q ((DUMMY_Q *) 0)
-#define dummy_qe ((DUMMY_Q_ENTRY *) 0)
+        ((type *) (((char *) (base)) + (offset)))
=20
 /*
- * Offsets of layout of a tail queue head.
- */
-#define QTAILQ_FIRST_OFFSET (offsetof(typeof(dummy_q->head), tqh_first))
-#define QTAILQ_LAST_OFFSET  (offsetof(typeof(dummy_q->head), tqh_last))
-/*
- * Raw access of elements of a tail queue
+ * Raw access of elements of a tail queue head.  Offsets are all zero
+ * because it's a union.
  */
 #define QTAILQ_RAW_FIRST(head)                                          =
       \
-        (*field_at_offset(head, QTAILQ_FIRST_OFFSET, void **))
-#define QTAILQ_RAW_TQH_LAST(head)                                       =
       \
-        (*field_at_offset(head, QTAILQ_LAST_OFFSET, void ***))
-
-/*
- * Offsets of layout of a tail queue element.
- */
-#define QTAILQ_NEXT_OFFSET (offsetof(typeof(dummy_qe->next), tqe_next))
-#define QTAILQ_PREV_OFFSET (offsetof(typeof(dummy_qe->next), tqe_prev))
+        field_at_offset(head, 0, void *)
+#define QTAILQ_RAW_TQH_CIRC(head)                                       =
       \
+        field_at_offset(head, 0, QTailQLink)
=20
 /*
  * Raw access of elements of a tail entry
  */
 #define QTAILQ_RAW_NEXT(elm, entry)                                     =
       \
-        (*field_at_offset(elm, entry + QTAILQ_NEXT_OFFSET, void **))
-#define QTAILQ_RAW_TQE_PREV(elm, entry)                                 =
       \
-        (*field_at_offset(elm, entry + QTAILQ_PREV_OFFSET, void ***))
+        field_at_offset(elm, entry, void *)
+#define QTAILQ_RAW_TQE_CIRC(elm, entry)                                 =
       \
+        field_at_offset(elm, entry, QTailQLink)
 /*
- * Tail queue tranversal using pointer arithmetic.
+ * Tail queue traversal using pointer arithmetic.
  */
 #define QTAILQ_RAW_FOREACH(elm, head, entry)                            =
       \
-        for ((elm) =3D QTAILQ_RAW_FIRST(head);                          =
         \
+        for ((elm) =3D *QTAILQ_RAW_FIRST(head);                         =
         \
              (elm);                                                     =
       \
-             (elm) =3D QTAILQ_RAW_NEXT(elm, entry))
+             (elm) =3D *QTAILQ_RAW_NEXT(elm, entry))
 /*
  * Tail queue insertion using pointer arithmetic.
  */
-#define QTAILQ_RAW_INSERT_TAIL(head, elm, entry) do {                   =
       \
-        QTAILQ_RAW_NEXT(elm, entry) =3D NULL;                           =
         \
-        QTAILQ_RAW_TQE_PREV(elm, entry) =3D QTAILQ_RAW_TQH_LAST(head);  =
         \
-        *QTAILQ_RAW_TQH_LAST(head) =3D (elm);                           =
         \
-        QTAILQ_RAW_TQH_LAST(head) =3D &QTAILQ_RAW_NEXT(elm, entry);     =
         \
+#define QTAILQ_RAW_INSERT_TAIL(head, elm, entry) do {                   =
        \
+        *QTAILQ_RAW_NEXT(elm, entry) =3D NULL;                          =
          \
+        QTAILQ_RAW_TQE_CIRC(elm, entry)->tql_prev =3D QTAILQ_RAW_TQH_CIR=
C(head)->tql_prev; \
+        QTAILQ_RAW_TQH_CIRC(head)->tql_prev->tql_next =3D (elm);        =
          \
+        QTAILQ_RAW_TQH_CIRC(head)->tql_prev =3D QTAILQ_RAW_TQE_CIRC(elm,=
 entry);  \
 } while (/*CONSTCOND*/0)
=20
 #endif /* QEMU_SYS_QUEUE_H */
diff --git a/include/qemu/rcu_queue.h b/include/qemu/rcu_queue.h
index 904b3372dc..2d386f303e 100644
--- a/include/qemu/rcu_queue.h
+++ b/include/qemu/rcu_queue.h
@@ -206,47 +206,50 @@ extern "C" {
 #define QTAILQ_INSERT_HEAD_RCU(head, elm, field) do {                   =
\
     (elm)->field.tqe_next =3D (head)->tqh_first;                        =
  \
     if ((elm)->field.tqe_next !=3D NULL) {                              =
  \
-        (head)->tqh_first->field.tqe_prev =3D &(elm)->field.tqe_next;   =
  \
+        (head)->tqh_first->field.tqe_circ.tql_prev =3D                  =
  \
+            &(elm)->field.tqe_circ;                                     =
\
     } else {                                                            =
\
-        (head)->tqh_last =3D &(elm)->field.tqe_next;                    =
  \
+        (head)->tqh_circ.tql_prev =3D &(elm)->field.tqe_circ;           =
  \
     }                                                                   =
\
     atomic_rcu_set(&(head)->tqh_first, (elm));                          =
\
-    (elm)->field.tqe_prev =3D &(head)->tqh_first;                       =
  \
+    (elm)->field.tqe_circ.tql_prev =3D &(head)->tqh_circ;               =
  \
 } while (/*CONSTCOND*/0)
=20
-#define QTAILQ_INSERT_TAIL_RCU(head, elm, field) do {               \
-    (elm)->field.tqe_next =3D NULL;                                   \
-    (elm)->field.tqe_prev =3D (head)->tqh_last;                       \
-    atomic_rcu_set((head)->tqh_last, (elm));                        \
-    (head)->tqh_last =3D &(elm)->field.tqe_next;                      \
+#define QTAILQ_INSERT_TAIL_RCU(head, elm, field) do {                   =
\
+    (elm)->field.tqe_next =3D NULL;                                     =
  \
+    (elm)->field.tqe_circ.tql_prev =3D (head)->tqh_circ.tql_prev;       =
  \
+    atomic_rcu_set(&(head)->tqh_circ.tql_prev->tql_next, (elm));        =
\
+    (head)->tqh_circ.tql_prev =3D &(elm)->field.tqe_circ;               =
  \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_INSERT_AFTER_RCU(head, listelm, elm, field) do {         =
\
     (elm)->field.tqe_next =3D (listelm)->field.tqe_next;                =
  \
     if ((elm)->field.tqe_next !=3D NULL) {                              =
  \
-        (elm)->field.tqe_next->field.tqe_prev =3D &(elm)->field.tqe_next=
; \
+        (elm)->field.tqe_next->field.tqe_circ.tql_prev =3D              =
  \
+            &(elm)->field.tqe_circ;                                     =
\
     } else {                                                            =
\
-        (head)->tqh_last =3D &(elm)->field.tqe_next;                    =
  \
+        (head)->tqh_circ.tql_prev =3D &(elm)->field.tqe_circ;           =
  \
     }                                                                   =
\
     atomic_rcu_set(&(listelm)->field.tqe_next, (elm));                  =
\
-    (elm)->field.tqe_prev =3D &(listelm)->field.tqe_next;               =
  \
+    (elm)->field.tqe_circ.tql_prev =3D &(listelm)->field.tqe_circ;      =
  \
 } while (/*CONSTCOND*/0)
=20
-#define QTAILQ_INSERT_BEFORE_RCU(listelm, elm, field) do {          \
-    (elm)->field.tqe_prev =3D (listelm)->field.tqe_prev;              \
-    (elm)->field.tqe_next =3D (listelm);                              \
-    atomic_rcu_set((listelm)->field.tqe_prev, (elm));               \
-    (listelm)->field.tqe_prev =3D &(elm)->field.tqe_next;             \
-    } while (/*CONSTCOND*/0)
+#define QTAILQ_INSERT_BEFORE_RCU(listelm, elm, field) do {              =
  \
+    (elm)->field.tqe_circ.tql_prev =3D (listelm)->field.tqe_circ.tql_pre=
v;  \
+    (elm)->field.tqe_next =3D (listelm);                                =
    \
+    atomic_rcu_set(&(listelm)->field.tqe_circ.tql_prev->tql_next, (elm))=
; \
+    (listelm)->field.tqe_circ.tql_prev =3D &(elm)->field.tqe_circ;      =
    \
+} while (/*CONSTCOND*/0)
=20
 #define QTAILQ_REMOVE_RCU(head, elm, field) do {                        =
\
     if (((elm)->field.tqe_next) !=3D NULL) {                            =
  \
-        (elm)->field.tqe_next->field.tqe_prev =3D (elm)->field.tqe_prev;=
  \
+        (elm)->field.tqe_next->field.tqe_circ.tql_prev =3D              =
  \
+            (elm)->field.tqe_circ.tql_prev;                             =
\
     } else {                                                            =
\
-        (head)->tqh_last =3D (elm)->field.tqe_prev;                     =
  \
+        (head)->tqh_circ.tql_prev =3D (elm)->field.tqe_circ.tql_prev;   =
  \
     }                                                                   =
\
-    atomic_set((elm)->field.tqe_prev, (elm)->field.tqe_next);           =
\
-    (elm)->field.tqe_prev =3D NULL;                                     =
  \
+    atomic_set(&(elm)->field.tqe_circ.tql_prev->tql_next, (elm)->field.t=
qe_next); \
+    (elm)->field.tqe_circ.tql_prev =3D NULL;                            =
  \
 } while (/*CONSTCOND*/0)
=20
 #define QTAILQ_FOREACH_RCU(var, head, field)                            =
\
diff --git a/scripts/cocci-macro-file.h b/scripts/cocci-macro-file.h
index e274ca3682..e485cdccae 100644
--- a/scripts/cocci-macro-file.h
+++ b/scripts/cocci-macro-file.h
@@ -93,18 +93,18 @@ struct {                                             =
                   \
  * Tail queue definitions.
  */
 #define QTAILQ_HEAD(name, type)                                         =
\
-struct name {                                                           =
\
-        type *tqh_first;      /* first element */                       =
\
-        type **tqh_last;      /* addr of last next element */           =
\
+union name {                                                            =
\
+        struct type *tqh_first;       /* first element */               =
\
+        QTailQLink tqh_circ;          /* link for last element */       =
\
 }
=20
 #define QTAILQ_HEAD_INITIALIZER(head)                                   =
\
-        { NULL, &(head).tqh_first }
+        { .tqh_circ =3D { NULL, &(head).tqh_circ } }
=20
 #define QTAILQ_ENTRY(type)                                              =
\
-struct {                                                                =
\
-        type *tqe_next;       /* next element */                        =
\
-        type **tqe_prev;      /* address of previous next element */    =
\
+union {                                                                 =
\
+        struct type *tqe_next;        /* next element */                =
\
+        QTailQLink tqe_circ;          /* link for prev element */       =
\
 }
=20
 /* From glib */
--=20
2.20.1



