Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:56:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C525558050C;
	Fri, 21 Dec 2018 15:52:58 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 15:52:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AVuaD3R28gudAH0GtsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSKvXxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Cy?=
 =?us-ascii?q?b4UAAOUdIOlXrYfyp0AWrRa8HgSsGP/jxyVUinPqx6A2zeIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotHvO6cJVuC1yrTDwzTeb/NQxTf96I/Icgo5of6SQLl9dsjRyUYgFw7ej1SQ?=
 =?us-ascii?q?qJLqPyuL2egXr2eU9fNtWOSygGAprAFxpyKgxsYqioTRhYIa1ErE9SNnz4YxP9?=
 =?us-ascii?q?G4T1R7YdGiHZBNtC+aL5N7Tt0+T2xsoio217MLtYChcCQXy5kr2wTTZv2FfoSQ?=
 =?us-ascii?q?/x7uVumcLS12iX5/Zb6ygxe//VK9xuHiWMS51ktBoDBfndnWrH8N0gTe6siZRf?=
 =?us-ascii?q?t5+UeswSiP1w/N5eFeO0w0lrTUK4QnwrEukpofq0PDHjX5mEnuja+WcFsr+vSw?=
 =?us-ascii?q?5uj5frnrooWQO5J6hw3gKKgih8+yDfgiPgUPXWWX4eG826fi/U39TrVKlPo2kq?=
 =?us-ascii?q?zBvZDeJMQboLO5AgBM3oYg9Rm/FTGm38ocnXUeK1JEdhSHgJbzO1zVPvD4Aumw?=
 =?us-ascii?q?g062nDdo2f/GJLvhDYvJLnTZl7fhZ7l951ZGyAUv1dBf+45UCrYZLfL3W0/xt8?=
 =?us-ascii?q?LXAgU2Mgyp2OvnDNR91oUDWWOAGKOZMaXSsUOW6eIrOeWDeIgVuDPlIfg/+/Hu?=
 =?us-ascii?q?lWM5mUMafaSx3ZsYcnG4Huh8LEWee3bsgsoBHn0MvgoxV+HqjFyCUThOZ3e9Ra?=
 =?us-ascii?q?485zc7CJ64AofHXIyinLuB3CKjFJ1Mem9GEkyMEWvvd4icQfgMcyKSIshikjAe?=
 =?us-ascii?q?T7iuUY0h2AqqtA/7zbpnM+XV9jcZtZLlyNh6+enTmQsu+jxzCsSXy3uNQH1snm?=
 =?us-ascii?q?MUWz8227hyoU9nxVeFy6R4h/1YGsZV5/NGSQo6MZ/cz+pnC9H9QA7Bf9GJSEq4?=
 =?us-ascii?q?TdWiGz0+UtUxw9oWaUZnB9qilgzD3zatA7INirOEHoI0/bzG03jxPcl9zW3G27?=
 =?us-ascii?q?cnj1UhRstPNmimhqpk+gjXBo7JlViZlqmweaQd2i7N6HmMzW6UsE5EVw5wVL3P?=
 =?us-ascii?q?XWoDaUvOsdT5+kTCQqezBrs9LAtO19SOKqtQZd3vllVJWvHjNc/aY2KwnWewGB?=
 =?us-ascii?q?mJyqmNbIrsZ2USwiHdBFIYnAAU+HaMLRI+CTu5o2LCEDxuEkriY1/t8el7r3O7?=
 =?us-ascii?q?Uk80zgGQY019zba1/QQVhfidS/MV0bIJoyMhqzRyHFag0NPaEduApwx9fKpCZd?=
 =?us-ascii?q?Mx+ktI1WXctwZlJJyvM7hihkICcwRwp07hzRF3BZtPkMc0rHIm1hF9Kb+F31xb?=
 =?us-ascii?q?cTOY3pfwOqPMJ2n2/RCvbbPW217E3NaX/KcP9Oo3q1H5sA61EUoi9m1t08NJ3H?=
 =?us-ascii?q?uE+pXKEA0SXIrxU0Yq7RR1u6vWYyg954zO031sPrK5sjvD29IvGeskxQysf9ZZ?=
 =?us-ascii?q?MKOYCgDyF9cWCNSpKOwvg1KpdA4LPPhO9K4oOMOrb+GG2K+3M+l6hjKpkGNH7J?=
 =?us-ascii?q?p70k2S7Sp8S/fE0IofzPGcwwSISS38jFCnss3snYBEZDcSHnewyCT+BY5RYLFy?=
 =?us-ascii?q?cpgPCWu0P8K3wdB+jYb3W3FE7F6jG08G2MixdBuSblzxxw1R2V4MoXy6nyu11D?=
 =?us-ascii?q?h0kzAvrqqC0y3C2eXidBwbOmFVQGlul0vjIY+xj9oCRkincxAplAe55Ub936Vb?=
 =?us-ascii?q?pr5wL3PQQUdLeCj6NXpiXbGztrqBYs5P7o0nsSNMXeS4YFCaTKP9ohQA3yPiGW?=
 =?us-ascii?q?te2C40dzWwtprlmBx6jXqXLGxvo3rBZcFw2RDf6cTcRPFL2ToKXit4iTjRBlWn?=
 =?us-ascii?q?O9mp/NOUl4rMs+ykVmKhUIFTfjfvzY+aqCS74mhqCwWln/+vgt3nDRQ60Sjj2t?=
 =?us-ascii?q?lpTyrIrQzwYon216ugN+JncVJlBFv968p8B4F/nZE8hJAW2XgGmJqV+WALnnv0?=
 =?us-ascii?q?MdVewaj+dmYCRSYXw97J5wjowEhjLnOKx43jTHmczNVuZ8KmYmwIwCIy9N5FCL?=
 =?us-ascii?q?2b7LFfmSt1o1y4rR/eYPRnnzcdz+cu52Aeg+0TpAUtySCdCKgIHUZEJSzsiwiI?=
 =?us-ascii?q?79emoaVLY2avdKK81UtkktCnEbGCuRpcWHfid5cmHC9w6Nh/MV3W3H3y7IHkZM?=
 =?us-ascii?q?ffbdYJuhKIlBfAivBfKIgtmfoSmSpnJWX9sGU+xOEhihxu2Yy6sJKDK2Vw56+5?=
 =?us-ascii?q?Bh9YNjvoZ8Ic4D3tjKBentqI0ICrBJluBjILXJ7wR/KyDD0SrejnNxqJEDAkqH?=
 =?us-ascii?q?eUA7/fEhGE6Et8s3LDCZOrN2yUJHkEy9VtXgKdKVdbgAAVWjU6g5E4GhqrxMzn?=
 =?us-ascii?q?bEd2+DQR6kTkpRtLz+JiLwP/XXvHpAe0djc0T4CSLRpR7gFf/kfVLNaR7uRpEy?=
 =?us-ascii?q?FD+Z2hqgONJ3efZwRJC2EJR0OFC0riPrmo+dnP7eyYCvCiIPvJZLWEsfZeWOuQ?=
 =?us-ascii?q?xZKzzotm+C6BNsWRMXljDP072UtDUWp6G8TDnDUPRDIYlzjQb86Avxq8/ix3rs?=
 =?us-ascii?q?ai8PXkQg7v5I2PC6dMPtVr4Ry5naCDN+uIjiZjNTlYzo8MxWPPyLUHxlESljph?=
 =?us-ascii?q?dyOzHrUAryLNSKPQl7RTDx4abSNzKcRJ47g93glLJc7UlNf12qRkgf4yDldPTU?=
 =?us-ascii?q?bhld2xZcwWP2G9M0vKBFqKNLSDPzHE39v7br+8SbJOiuVZrBmwuTedE0/+MTWP?=
 =?us-ascii?q?jTjpVxazMe5SiCGXJgBRuIa4chx1E2jsUMrmagGnMN9wlTA3wac7hnXPNW4dNz?=
 =?us-ascii?q?hza0JMrr2K4iNejfVyAGhB7ntjLemZlCeV9ejYKpAKsfR1BiR4jf5V4HM/y+gd?=
 =?us-ascii?q?0CYRZvt40BPftNVurkruxuuIxxJ/XQBFqjtQwomMuBMxF7/e88xiUG3D+loi8G?=
 =?us-ascii?q?OMCxMQv9YtXt/gtIhCy9XXmeT4IWERoJrv4cIACp2Me4q8O307PE+sQWaMAQ?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABgfB1ch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgmmBAieMFl+LbgaBNRSJEIk9hH6BcxMBARg?=
 =?us-ascii?q?NBgGHMCI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCOikBgmYBAQEBAwECNwYBA?=
 =?us-ascii?q?SoKAwEFCQEBChEBAgECAQkTBwsDDAUgAQUBAQ0GDhMFgx0BgXQNBQqaPjyKKYI?=
 =?us-ascii?q?fgnYBAQWHIQMFEosRgRwXeIEHgRGDEoRaBwEBg1eCJolNgXiFHZBlCYcSiksMG?=
 =?us-ascii?q?Il6h2UsjiWLJAYCCQcPIYElgg5NOIMnghsMFxKCZIVohV8gMgEBgQIBAQGLYQ8?=
 =?us-ascii?q?XgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABgfB1ch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgmmBAieMFl+LbgaBNRSJEIk9hH6BcxMBARgNBgGHMCI0CQ0BA?=
 =?us-ascii?q?wEBAQEBAQIBEwEBAQgNCQgpIwyCOikBgmYBAQEBAwECNwYBASoKAwEFCQEBChE?=
 =?us-ascii?q?BAgECAQkTBwsDDAUgAQUBAQ0GDhMFgx0BgXQNBQqaPjyKKYIfgnYBAQWHIQMFE?=
 =?us-ascii?q?osRgRwXeIEHgRGDEoRaBwEBg1eCJolNgXiFHZBlCYcSiksMGIl6h2UsjiWLJAY?=
 =?us-ascii?q?CCQcPIYElgg5NOIMnghsMFxKCZIVohV8gMgEBgQIBAQGLYQ8XgicBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,383,1539673200"; 
   d="scan'208";a="56921228"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 15:52:37 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404038AbeLUXwe (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 18:52:34 -0500
Received: from mail-pl1-f195.google.com ([209.85.214.195]:39805 "EHLO
        mail-pl1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732613AbeLUXwe (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 18:52:34 -0500
Received: by mail-pl1-f195.google.com with SMTP id 101so3149513pld.6
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 15:52:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ziepe.ca; s=google;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=Xa8YBftbit4LNU64bv2g0Ji6QGiSR3QswJ4spPgs5h8=;
        b=Dr/HrLVsyJDciRZ3b6VzcvXivcuj7bTDCHFh7BkZ84RNzZAOmyBW+7+BqoipP6Wevk
         VMYy0d30/uBPD37UreftstG8zqPTtd/lyyASBdw31WD9HcfMjf3a/uKQG3HGK9BV1W4s
         FpIRz4A2MbKeP+Jvj0zvuAd2YDoYiBmbrt+Csa9kVRjvjbLtGOvjyAkw7FskK1T+j/B+
         LIdWXpRN9t4sEYJvI1fFHt7WKdsq40OhA07EE9QudEaCrK2gHDgAfxXyWgcWANte1hoq
         BVwhWCrIFstqmm4v506IYvt0IqdKSNx8jWThoV2LBwj0CXGPUeuvvxplg02bxVgfJUBN
         8rmg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=Xa8YBftbit4LNU64bv2g0Ji6QGiSR3QswJ4spPgs5h8=;
        b=EceKETpNDPj2bDi745X91pHkKBwEUYJxLtmxvB5Bccc/4xU45WCgJFofRfv0MV6N5k
         hLod5hY/QWIbfv/PJ04x9wj4UzI0h+CIxqMd9z6iP3/0QJc5L1wvqbQL2kSz2rl2HN6L
         5k80u30refiLS5q/F1UOXwj2IYIBV2AyrKeJupHBuivHTPhHDOOPV3a77oWJgzlkBnbA
         oXmaMTOqobjGCfCIGcl4ZoZhYH5xFqijDJNm1JUlJGXAlcuMHwSnkuBIcixZuhPThfRC
         QFEA81wEloE9KqyIOEGvqv/OBdIY/vlEpWQDDu/h6fS0EmC5Fwv3VyumrpWqWXto2ulm
         A9Ew==
X-Gm-Message-State: AJcUukd0eDBsJyodoZVOYt7vDqBS14/8L9PX69fe97/ldilE8xrhrfiJ
        T4jt83FUKikmh/DOwEKtC5/j4A==
X-Google-Smtp-Source: ALg8bN6j1YeXXULYyGA+KFxfTkusOG7wI7lX3KpaAbsIYcEUjjCn1zPjGVmg7Ej9s+ch7T9BnrVj4A==
X-Received: by 2002:a17:902:bcc7:: with SMTP id o7mr4568107pls.281.1545436352687;
        Fri, 21 Dec 2018 15:52:32 -0800 (PST)
Received: from ziepe.ca (S010614cc2056d97f.ed.shawcable.net. [174.3.196.123])
        by smtp.gmail.com with ESMTPSA id 15sm35800446pfr.55.2018.12.21.15.52.31
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 21 Dec 2018 15:52:31 -0800 (PST)
Received: from jgg by mlx.ziepe.ca with local (Exim 4.90_1)
        (envelope-from <jgg@ziepe.ca>)
        id 1gaUak-0006MP-PS; Fri, 21 Dec 2018 16:52:30 -0700
Date: Fri, 21 Dec 2018 16:52:30 -0700
From: Jason Gunthorpe <jgg@ziepe.ca>
To: Joe Perches <joe@perches.com>
Cc: Bart Van Assche <bvanassche@acm.org>,
        Stephen Warren <swarren@wwwdotorg.org>,
        Tariq Toukan <tariqt@mellanox.com>, xavier.huwei@huawei.com,
        netdev@vger.kernel.org, linux-rdma@vger.kernel.org,
        Doug Ledford <dledford@redhat.com>,
        Stephen Warren <swarren@nvidia.com>,
        Christoph Hellwig <hch@lst.de>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Jonathan Corbet <corbet@lwn.net>, linux-kernel@vger.kernel.org
Subject: Re: rfc: bool structure members (was Re: [PATCH V3] net/mlx4: Get
 rid of page operation after dma_alloc_coherent)
Message-ID: <20181221235230.GC13168@ziepe.ca>
References: <20181219182031.8675-1-swarren@wwwdotorg.org>
 <20181220174318.GA21404@ziepe.ca>
 <20181220174448.GA21149@lst.de>
 <1545328145.185366.500.camel@acm.org>
 <072c2d9d187daf0672bf54ab035e47a05fd1cd1d.camel@perches.com>
 <20181221033159.GF23877@ziepe.ca>
 <b906bec0fd12d25474561263087a26b8b0519fe4.camel@perches.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <b906bec0fd12d25474561263087a26b8b0519fe4.camel@perches.com>
User-Agent: Mutt/1.9.4 (2018-02-28)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 20, 2018 at 09:12:43PM -0800, Joe Perches wrote:
> Care to submit a coding_style.rst patch or
> improve the one below this?

I took yours and revised it a little bit. I spent some time looking at
assembly and decided to drop the performance note, the number of cases
that run into overhead seems pretty small and probably already
requires !! to be correct. There is also an equally unlikely gain, ie
'if (a & b)' optimizes a tiny bit better for bool types.

I also added a small intro on bool, as I know some people are
unfamiliar with C11 _Bool and might think bool is just '#define bool
u8'

(for those added to the cc) I'm looking at cases, like the patch that
spawned this, where the struct has a single bool and no performance
considerations. As CH said, seeing that get converted to int due to
checkpatch is worse than having used bool. Using u8 won't make this
struct smaller or faster.

Cheers,
Jason

From c5e2c887f6326e1c4369876f39996417da5e90cc Mon Sep 17 00:00:00 2001
From: Jason Gunthorpe <jgg@mellanox.com>
Date: Fri, 21 Dec 2018 16:29:22 -0700
Subject: [PATCH] coding-style: Clarify the expectations around bool

There has been some confusion since checkpatch started warning about bool
use in structures, and people have been avoiding using it.

Many people feel there is still a legitimate place for bool in structures,
so provide some guidance on bool usage derived from the entire thread that
spawned the checkpatch warning.

Link: https://lkml.kernel.org/r/CA+55aFwVZk1OfB9T2v014PTAKFhtVan_Zj2dOjnCy3x6E4UJfA@mail.gmail.com
Signed-off-by: Joe Perches <joe@perches.com>
Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
---
 Documentation/process/coding-style.rst | 33 ++++++++++++++++++++++----
 1 file changed, 29 insertions(+), 4 deletions(-)

diff --git a/Documentation/process/coding-style.rst b/Documentation/process/coding-style.rst
index 4e7c0a1c427a9a..efdb1d32035fe1 100644
--- a/Documentation/process/coding-style.rst
+++ b/Documentation/process/coding-style.rst
@@ -918,7 +918,32 @@ result.  Typical examples would be functions that return pointers; they use
 NULL or the ERR_PTR mechanism to report failure.
 
 
-17) Don't re-invent the kernel macros
+17) Using bool
+--------------
+
+The Linux kernel uses the C11 standard for the bool type. bool values can only
+evaluate to 0 or 1, and implicit or explicit conversion to bool automatically
+converts the value to true or false. When using bool types the !! construction
+is not needed, which eliminates a class of bugs.
+
+When working with bool values the true and false labels should be used instead
+of 0 and 1.
+
+bool function return types, arguments and stack variables are always fine to
+use whenever appropriate. Use of bool is encouraged to improve readability and
+is often a better option than 'int' for storing boolean values.
+
+Do not use bool if cache line layout or size of the value matters, its size
+and alignment varies based on the compiled architecture. Structures that are
+optimized for alignment and size should not use bool.
+
+If a structure has many true/false values, consider consolidating them into a
+bitfield with 1 bit members, or using an appropriate fixed width type, such as
+u8.
+
+Otherwise limited use of bool in structures does improve readability.
+
+18) Don't re-invent the kernel macros
 -------------------------------------
 
 The header file include/linux/kernel.h contains a number of macros that
@@ -941,7 +966,7 @@ need them.  Feel free to peruse that header file to see what else is already
 defined that you shouldn't reproduce in your code.
 
 
-18) Editor modelines and other cruft
+19) Editor modelines and other cruft
 ------------------------------------
 
 Some editors can interpret configuration information embedded in source files,
@@ -975,7 +1000,7 @@ own custom mode, or may have some other magic method for making indentation
 work correctly.
 
 
-19) Inline assembly
+20) Inline assembly
 -------------------
 
 In architecture-specific code, you may need to use inline assembly to interface
@@ -1007,7 +1032,7 @@ the next instruction in the assembly output:
 	     : /* outputs */ : /* inputs */ : /* clobbers */);
 
 
-20) Conditional Compilation
+21) Conditional Compilation
 ---------------------------
 
 Wherever possible, don't use preprocessor conditionals (#if, #ifdef) in .c
-- 
2.19.2

