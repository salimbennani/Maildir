Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:32:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7CED1580261;
	Wed, 19 Dec 2018 01:54:56 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga006-1.fm.intel.com with ESMTP; 19 Dec 2018 01:54:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AALfXFBRPLQx74pdYteZUn5glVtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YxGCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZH42y?=
 =?us-ascii?q?cYUPAeoCM+hWoYbyqFkBogexCwm3HOPiyCRFhmP10KAgz+gtDQ/L0Q4mEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO671qbIyzTDYO1S2Tzg7obHbBEgru2WUrJ2dsra1E4iGB7fgVWW?=
 =?us-ascii?q?qIzqITeV2v4Js2eF7utvSfigi2ggqwxqpjivx8EshZPThoIS0FzE8j95wIksKN?=
 =?us-ascii?q?C+VUV1b9mkEJ5KuCGbMYt7Wt8iQm9puCYm1r0Jp4S7cDIWx5Qgwh7Tc/iHc4mO?=
 =?us-ascii?q?4h35TuaRJi10hHV/eLKwnxqy/1KvxfHiWcav11ZKqSlFnsPQuXAK0hze7NWMRP?=
 =?us-ascii?q?hl/kq5xzqDywTe5vtZLU06i6bXMYMtz70smpYJsEnOHDf6lUHogKOMckgo5PKk?=
 =?us-ascii?q?5uT7brn8u5OQK495hwfjOao0gMO/G/43Mg0WUmib5+u80Lrj8FXnQLVFkPI2iL?=
 =?us-ascii?q?PVsJPEKsQBoK62HQtV3pwk6xalADeqyNUYnX8ZI1JZYB+LkZTlNlXULPzlA/qz?=
 =?us-ascii?q?nU6gnCpoyvzaJLHsA5fAImDGkLj7fLZ970BcyBA0zdBa/59UDrABIPTuWk7+rd?=
 =?us-ascii?q?DYDQE2Mxayw+n5DNVxz4QeWGyJAqCHKqPfqkGI5u0xLOmWfoMVuyjyK+Ij5/Hw?=
 =?us-ascii?q?iX81g1gdfbOm3ZcPcnC3AuxmI1mFYXrrmtoBFWYKvgkgQ+Dwh1yCTCVeZ3KzX6?=
 =?us-ascii?q?I6+zE6B5iqDYbFRoCxnrOB2D23EYFRZmBDElqMC2vnd52YW/cQbyKfOs9hnSYF?=
 =?us-ascii?q?Vbi9UYAh0guitA/ny7V9KOrU9TYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDd5T5/RXXQsgNp7cyOp6C9b1Wg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKsln0HbG1K?=
 =?us-ascii?q?4hj1o8TstVL2KmhLVy9wzSB47PjkWYmLymdaUa3C7R6miDyXCCs11fUA51Sa/F?=
 =?us-ascii?q?R2wQZlPKrdTl4UPPV7yuBq4hMgdbzc6CK7FFatvmjVhdQPfjOdLeY3++mmuqBB?=
 =?us-ascii?q?aIwK+MY5Tue2kHwCrdD00EmRgJ/XmaLQg+Gjuho2XGATNzD13vfV3j/fN+qHyh?=
 =?us-ascii?q?SE801B+Fb0tm27qx+R4VgPicRugX3rIFvichtjp1EEy839LQF9qPuQ5hcL9Abt?=
 =?us-ascii?q?M65VdNzXjZuBBlPpy8M6BigUYTfBltsEPwyRp7EIVAntIsrHMx0gVyL7mV0FdA?=
 =?us-ascii?q?dzOewJDxNafbKmj0/BCzdaHW3kvS38qR+qcK8P44sUnsvBm1Fko+9HVqy8VV03?=
 =?us-ascii?q?qZ5pXNEAoSUZLwXlwr9xRgoLHaeC0954LS1X1jKqS0tj7C29Q0BOoq0BqgftFf?=
 =?us-ascii?q?ML+aGw/2CcEVG8+uKOkykVizch0EJPxS9LIzP86+bfSG3LCkPel+kzOml2hI+5?=
 =?us-ascii?q?193V+W+Cp6Se7I2IgFzuqc3guGUTf8kVigvtr2mYBCeTEdAG6/xTL4C45WY614?=
 =?us-ascii?q?ZZwLBnu2I82r2tV+gIbgWn5F9FK5G1wKws6oeRqIYFz70g1dzkAXoX2hmSulwD?=
 =?us-ascii?q?14iTAprqyD3CPQx+TubgYIOmlORGN6l1fjPZC0j8wGXEivdwUpjhql6lrgyKhB?=
 =?us-ascii?q?uat/KHPfQUFWcCjsLmFuS7e/uaCGY8FS9pwoqyJXUOKnbFCeS779pQYa0iz5E2?=
 =?us-ascii?q?tfwjA7ay+lupHjkxNmj2KdKW55rGDFdsFo2Rff+NvcSOZR3zoHXiV5iSPbBkOh?=
 =?us-ascii?q?P9mv5tiUk5bDsuajV2OuTJFTcC/rzZ+euyu//2FlHRq/n/WrkN39DQc6yTP718?=
 =?us-ascii?q?VtVSjQrhbzeJPr16e5MeJgZEVoH0Xz68l5GoF/lIs/mpcQ1GMehpWU+3oHjGjy?=
 =?us-ascii?q?Pc9a2aL4cHoCWzoLz8TJ7wji3U1pNmiJyJ7hVnWB3sthYMG3Y2MM1SI69cxKCq?=
 =?us-ascii?q?aU7LpfkCtxo1q4qx/RYPdnkjccz/su9GAVg+UTtAUxySWdB6gYHVNEMiz0ixSI?=
 =?us-ascii?q?89e+ob1UZGm1cLi8zkp+nc27A7GErQFRQ3L5epYkHS9t4cRzKlPM0Hvv6o76fN?=
 =?us-ascii?q?ncd84cthqRkx3YlehaNIoxluYWhSpgIW/9uHwly+0hghB005C1opOHK3lz86Kj?=
 =?us-ascii?q?GRFXKCf1Z8wI9zHpjKZemNuW3o+1EpVgHDULQIXnTfayHD0OsvTnMh6EECcgpX?=
 =?us-ascii?q?eDBbrfAQif5V96r3LIFpCnLXCWK2MfzdV/XxmdP01fjRsQXDU7mJ45Cw+ryNbg?=
 =?us-ascii?q?cEd/+jAe+Fr4pgFQxeJvMhn1Sn3fqxuwajcoVJifKwJb4RpY6EfSNcye8/h/Hy?=
 =?us-ascii?q?VF/pC6qAyNK2qbZxlHDG0TW0yEAUzjMaeq5dXa7+eYAe++JePUYbqSsexeS+uI?=
 =?us-ascii?q?xZW334tk5TmMM9uAPmJ4A/0nwEZDXm15G8fEmzUJUSMXjDnAb8qapBe65y12od?=
 =?us-ascii?q?qz8PXtWALz+4SPD6FePslo+xCzma2DLfKfhD5lKTZE0ZMB3X/JyL8C3F4LliFh?=
 =?us-ascii?q?bT+tHa4btS7KSqLQlbRaDxoaayN1KctJ4Lgw3ghLOc7HlNz10qR0geIyC1dATV?=
 =?us-ascii?q?bhgN2mZdQWI2GhM1PKHEaLO6qHJT3IwMH3YLmwSb5KjOVTuB2/pyybE1L4PjmY?=
 =?us-ascii?q?kznpVhavMfxDjS2BPRxevp29fQhpCWT5UN3mbRi7OsdtjTIq2b00mm/KNWkEPD?=
 =?us-ascii?q?dmbkNCtaeQ4j1Yg/llH2xB72FoLe2Fmyaf8unZJYwasfptAiRoie1a5G42xKdS?=
 =?us-ascii?q?7CFBXPZ1gjfdrsZyo1G6lemC0iZnUBtLqjpRmI2Hp1ltOaXH+ZlGQnvE+BMN7W?=
 =?us-ascii?q?ONCxUFvddlC9vvu7xOxdjLjq78NDBC89fM98sGG8fUMN6HMGYmMRfxGD/bFg0F?=
 =?us-ascii?q?TTuqNWHZn0NckfGS+WeTrpg1sZXsnJsOSrlGVF06DP8aC0JlHMAcL5dzRD8rjb?=
 =?us-ascii?q?mbjMtbrUa5+STVSo16t5bcTfWUSaHyLDjfjbBCfAAPx5v8LIIaLIq93FZtPB0y?=
 =?us-ascii?q?1r7DFUPdWZhv6mspUR4vp05O8TI2GncxxGr/aBy8+3gYFv/ymBMq3E82Wvkh+T?=
 =?us-ascii?q?r0q3cwIl7D7H8rjUU8lM2jgTeVdDfZJb21G4pRDnyw/2w2KJ79UQE9VQy/h0Vg?=
 =?us-ascii?q?NSzFD+Z1iKFtc3JszjfdtIFGHf9HTIVNehpWzvaSMbFg9F1GqW2d2FND7O3JQc?=
 =?us-ascii?q?9nnREpN4Sxs3ZJ3Q5LZcQwY6fXIfwNhlxRgL+e+zet/v4+zRVYJEsX9m6WPikS?=
 =?us-ascii?q?tx8mLL4jcgah+O1h7USmlilIcW4LH64mq/Rr+0d7P+mSxCvm1JZHK0a4LevZKL?=
 =?us-ascii?q?mW7TuT3fWUS089gxtb33JO+qJ7hIJ6KxKZ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CaAAAqFRpch0O0hNFcBxwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVQEAQELAYJpA38ng32TYDWBYC0UiQGOW4FfEwEBGAcMAYFLgnWCaiI3Bg0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIBAgMBAiAECwENAQE3AQUJAQEKG?=
 =?us-ascii?q?AICERUCAgMeEwEFARwGAQwGAgEBAQSDGQGBaQMVBAEKm1c8iilwfDOCdgEBBYE?=
 =?us-ascii?q?FAYE9gkYNghUIEnmKGIEcgVc/gREngmuCVzwLAgKBGg4bCT8TgkmCV4dwgTaCG?=
 =?us-ascii?q?ZU/MwcCgiUEhAFlhyGDKwYYgiqHTBGHT4lHhHiBE4oDAgQCBAUCBQ8hgTuBeDM?=
 =?us-ascii?q?aMIMvCYISDBeDSoUUhQgBNz8ygQUBAYsTAiQDBIIgAQE?=
X-IPAS-Result: =?us-ascii?q?A0CaAAAqFRpch0O0hNFcBxwBAQEEAQEHBAEBgVQEAQELAYJ?=
 =?us-ascii?q?pA38ng32TYDWBYC0UiQGOW4FfEwEBGAcMAYFLgnWCaiI3Bg0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgpIwyCNiQBgmIBAgMBAiAECwENAQE3AQUJAQEKGAICERUCAgMeEwE?=
 =?us-ascii?q?FARwGAQwGAgEBAQSDGQGBaQMVBAEKm1c8iilwfDOCdgEBBYEFAYE9gkYNghUIE?=
 =?us-ascii?q?nmKGIEcgVc/gREngmuCVzwLAgKBGg4bCT8TgkmCV4dwgTaCGZU/MwcCgiUEhAF?=
 =?us-ascii?q?lhyGDKwYYgiqHTBGHT4lHhHiBE4oDAgQCBAUCBQ8hgTuBeDMaMIMvCYISDBeDS?=
 =?us-ascii?q?oUUhQgBNz8ygQUBAYsTAiQDBIIgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="58098875"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 01:54:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728741AbeLSJye (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 04:54:34 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:50767 "EHLO
        mail-wm1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728660AbeLSJyc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 04:54:32 -0500
Received: by mail-wm1-f65.google.com with SMTP id n190so5427420wmd.0
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 01:54:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding;
        bh=O0vouEdLzSS4mYarCHOwZC3GUarLRhIXtaaYdhIDtVM=;
        b=X6fdH8mdSlxrkG1pj85BRjgGnSoKRwoO9XBbPTOuC6nazNYpoiDhHS17AL6qGvNa52
         6IHanetEy+71QtnUahHrQO8YgCkoJpRlndEe5mY5ldKcdEdEKxvCnas54zu7HCE3m/A+
         DwPZP9GlVL0+s2a9GJDReI7yVSXYIbV++SCeQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-language
         :content-transfer-encoding;
        bh=O0vouEdLzSS4mYarCHOwZC3GUarLRhIXtaaYdhIDtVM=;
        b=ppif9CjnAezDaUA47Ls4fHjOOo0sLumnggGFJkK7aZEAG2ypob7/x860gLP73HfoP7
         YI+7cTsPUo919wHFyCN11H49UAHA2VlF4zWYW1q9Lbg7XLU1DwwTrPTPRdgFS5BqUEfT
         F5r4c2WQsvGCJqydjC3orOq2KKCY+r2be1NLA4jxF2bKsTq50t4JHu+G/kg+0M0VNy5J
         114ITYEgITho4deKKdkCbwY5MmzM6mZ+Hd+r9deqyj+EFHloWjhbgB52LR3arbjWv5lT
         FuUCe1zJYF2SsS9/BuWnlKV/jr7rbj28uaXekCNluV5b4VomO//lGApNyIvLMEZcviso
         bosg==
X-Gm-Message-State: AA+aEWasufecmwbA41C3MPDLm07EH93lzFQGhdlSdKs+Zcym+2K9bWZw
        k9TbWs9ZbweobWJ58d49C+4mWQ==
X-Google-Smtp-Source: AFSGD/WLxTeqA7jVvlZfXQp0dhI5SFUOy5bKe87vkm+cF8XOUdyPjIr7KR8PVlkbo5qRjn8B/K9UxA==
X-Received: by 2002:a1c:e1d5:: with SMTP id y204mr6419457wmg.65.1545213268868;
        Wed, 19 Dec 2018 01:54:28 -0800 (PST)
Received: from [192.168.0.40] (105.50.92.92.rev.sfr.net. [92.92.50.105])
        by smtp.googlemail.com with ESMTPSA id q3sm8599214wrn.84.2018.12.19.01.54.26
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 01:54:28 -0800 (PST)
Subject: Re: [PATCH v10 04/27] PM / Domains: Add genpd governor for CPUs
To: Ulf Hansson <ulf.hansson@linaro.org>,
        "Rafael J . Wysocki" <rjw@rjwysocki.net>,
        Sudeep Holla <sudeep.holla@arm.com>,
        Lorenzo Pieralisi <Lorenzo.Pieralisi@arm.com>,
        Mark Rutland <mark.rutland@arm.com>, linux-pm@vger.kernel.org
Cc: "Raju P . L . S . S . S . N" <rplsssn@codeaurora.org>,
        Stephen Boyd <sboyd@kernel.org>,
        Tony Lindgren <tony@atomide.com>,
        Kevin Hilman <khilman@kernel.org>,
        Lina Iyer <ilina@codeaurora.org>,
        Viresh Kumar <viresh.kumar@linaro.org>,
        Vincent Guittot <vincent.guittot@linaro.org>,
        Geert Uytterhoeven <geert+renesas@glider.be>,
        linux-arm-kernel@lists.infradead.org,
        linux-arm-msm@vger.kernel.org, linux-kernel@vger.kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Frederic Weisbecker <fweisbec@gmail.com>,
        Ingo Molnar <mingo@kernel.org>
References: <20181129174700.16585-1-ulf.hansson@linaro.org>
 <20181129174700.16585-5-ulf.hansson@linaro.org>
From: Daniel Lezcano <daniel.lezcano@linaro.org>
Message-ID: <5529fc0a-af96-b10a-ca4a-f1417598f4ee@linaro.org>
Date: Wed, 19 Dec 2018 10:54:26 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181129174700.16585-5-ulf.hansson@linaro.org>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 29/11/2018 18:46, Ulf Hansson wrote:
> As it's now perfectly possible that a PM domain managed by genpd contains
> devices belonging to CPUs, we should start to take into account the
> residency values for the idle states during the state selection process.
> The residency value specifies the minimum duration of time, the CPU or a
> group of CPUs, needs to spend in an idle state to not waste energy entering
> it.
> 
> To deal with this, let's add a new genpd governor, pm_domain_cpu_gov, that
> may be used for a PM domain that have CPU devices attached or if the CPUs
> are attached through subdomains.
> 
> The new governor computes the minimum expected idle duration time for the
> online CPUs being attached to the PM domain and its subdomains. Then in the
> state selection process, trying the deepest state first, it verifies that
> the idle duration time satisfies the state's residency value.
> 
> It should be noted that, when computing the minimum expected idle duration
> time, we use the information from tick_nohz_get_next_wakeup(), to find the
> next wakeup for the related CPUs. Future wise, this may deserve to be
> improved, as there are more reasons to why a CPU may be woken up from idle.
> 
> Cc: Thomas Gleixner <tglx@linutronix.de>
> Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
> Cc: Lina Iyer <ilina@codeaurora.org>
> Cc: Frederic Weisbecker <fweisbec@gmail.com>
> Cc: Ingo Molnar <mingo@kernel.org>
> Co-developed-by: Lina Iyer <lina.iyer@linaro.org>
> Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
> ---
> 
> Changes in v10:
> 	- Fold in patch that extended the new genpd CPU governor to cope with
> 	  QoS constraints, as to avoid confusion.
> 	- Simplified the code according to suggestions from Rafael.
> 
> ---
>  drivers/base/power/domain_governor.c | 61 +++++++++++++++++++++++++++-
>  include/linux/pm_domain.h            |  3 ++
>  2 files changed, 63 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/base/power/domain_governor.c b/drivers/base/power/domain_governor.c
> index 99896fbf18e4..61a7c3c03c98 100644
> --- a/drivers/base/power/domain_governor.c
> +++ b/drivers/base/power/domain_governor.c
> @@ -10,6 +10,9 @@
>  #include <linux/pm_domain.h>
>  #include <linux/pm_qos.h>
>  #include <linux/hrtimer.h>
> +#include <linux/cpumask.h>
> +#include <linux/ktime.h>
> +#include <linux/tick.h>
>  
>  static int dev_update_qos_constraint(struct device *dev, void *data)
>  {
> @@ -211,8 +214,10 @@ static bool default_power_down_ok(struct dev_pm_domain *pd)
>  	struct generic_pm_domain *genpd = pd_to_genpd(pd);
>  	struct gpd_link *link;
>  
> -	if (!genpd->max_off_time_changed)
> +	if (!genpd->max_off_time_changed) {
> +		genpd->state_idx = genpd->cached_power_down_state_idx;
>  		return genpd->cached_power_down_ok;
> +	}
>  
>  	/*
>  	 * We have to invalidate the cached results for the masters, so
> @@ -237,6 +242,7 @@ static bool default_power_down_ok(struct dev_pm_domain *pd)
>  		genpd->state_idx--;
>  	}
>  
> +	genpd->cached_power_down_state_idx = genpd->state_idx;
>  	return genpd->cached_power_down_ok;
>  }
>  
> @@ -245,6 +251,54 @@ static bool always_on_power_down_ok(struct dev_pm_domain *domain)
>  	return false;
>  }
>  
> +static bool cpu_power_down_ok(struct dev_pm_domain *pd)
> +{
> +	struct generic_pm_domain *genpd = pd_to_genpd(pd);
> +	ktime_t domain_wakeup, cpu_wakeup;
> +	s64 idle_duration_ns;
> +	int cpu, i;
> +
> +	/* Validate dev PM QoS constraints. */
> +	if (!default_power_down_ok(pd))
> +		return false;
> +
> +	if (!(genpd->flags & GENPD_FLAG_CPU_DOMAIN))
> +		return true;

Is it possible to have this function called without the
GENPD_FLAG_CPU_DOMAIN flag set in the genpd?

> +	/*
> +	 * Find the next wakeup for any of the online CPUs within the PM domain
> +	 * and its subdomains. Note, we only need the genpd->cpus, as it already
> +	 * contains a mask of all CPUs from subdomains.
> +	 */
> +	domain_wakeup = ktime_set(KTIME_SEC_MAX, 0);
> +	for_each_cpu_and(cpu, genpd->cpus, cpu_online_mask) {
> +		cpu_wakeup = tick_nohz_get_next_wakeup(cpu);
> +		if (ktime_before(cpu_wakeup, domain_wakeup))
> +			domain_wakeup = cpu_wakeup;
> +	}
> +
> +	/* The minimum idle duration is from now - until the next wakeup. */
> +	idle_duration_ns = ktime_to_ns(ktime_sub(domain_wakeup, ktime_get()));
> +	if (idle_duration_ns <= 0)
> +		return false;
> +
> +	/*
> +	 * Find the deepest idle state that has its residency value satisfied
> +	 * and by also taking into account the power off latency for the state.
> +	 * Start at the state picked by the dev PM QoS constraint validation.
> +	 */
> +	i = genpd->state_idx;
> +	do {
> +		if (idle_duration_ns >= (genpd->states[i].residency_ns +
> +		    genpd->states[i].power_off_latency_ns)) {
> +			genpd->state_idx = i;
> +			return true;
> +		}
> +	} while (--i >= 0);
> +
> +	return false;
> +}
> +
>  struct dev_power_governor simple_qos_governor = {
>  	.suspend_ok = default_suspend_ok,
>  	.power_down_ok = default_power_down_ok,
> @@ -257,3 +311,8 @@ struct dev_power_governor pm_domain_always_on_gov = {
>  	.power_down_ok = always_on_power_down_ok,
>  	.suspend_ok = default_suspend_ok,
>  };
> +
> +struct dev_power_governor pm_domain_cpu_gov = {
> +	.suspend_ok = default_suspend_ok,
> +	.power_down_ok = cpu_power_down_ok,
> +};
> diff --git a/include/linux/pm_domain.h b/include/linux/pm_domain.h
> index 5a4673605d22..969a9b36c0db 100644
> --- a/include/linux/pm_domain.h
> +++ b/include/linux/pm_domain.h
> @@ -116,6 +116,7 @@ struct generic_pm_domain {
>  	s64 max_off_time_ns;	/* Maximum allowed "suspended" time. */
>  	bool max_off_time_changed;
>  	bool cached_power_down_ok;
> +	bool cached_power_down_state_idx;
>  	int (*attach_dev)(struct generic_pm_domain *domain,
>  			  struct device *dev);
>  	void (*detach_dev)(struct generic_pm_domain *domain,
> @@ -195,6 +196,7 @@ int dev_pm_genpd_set_performance_state(struct device *dev, unsigned int state);
>  
>  extern struct dev_power_governor simple_qos_governor;
>  extern struct dev_power_governor pm_domain_always_on_gov;
> +extern struct dev_power_governor pm_domain_cpu_gov;
>  #else
>  
>  static inline struct generic_pm_domain_data *dev_gpd_data(struct device *dev)
> @@ -238,6 +240,7 @@ static inline int dev_pm_genpd_set_performance_state(struct device *dev,
>  
>  #define simple_qos_governor		(*(struct dev_power_governor *)(NULL))
>  #define pm_domain_always_on_gov		(*(struct dev_power_governor *)(NULL))
> +#define pm_domain_cpu_gov		(*(struct dev_power_governor *)(NULL))
>  #endif
>  
>  #ifdef CONFIG_PM_GENERIC_DOMAINS_SLEEP
> 


-- 
 <http://www.linaro.org/> Linaro.org │ Open source software for ARM SoCs

Follow Linaro:  <http://www.facebook.com/pages/Linaro> Facebook |
<http://twitter.com/#!/linaroorg> Twitter |
<http://www.linaro.org/linaro-blog/> Blog

