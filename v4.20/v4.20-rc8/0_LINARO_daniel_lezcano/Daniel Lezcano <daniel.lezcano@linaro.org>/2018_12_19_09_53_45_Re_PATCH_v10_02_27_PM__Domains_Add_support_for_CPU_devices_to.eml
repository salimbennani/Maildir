Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:32:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8DFDD58043E;
	Wed, 19 Dec 2018 01:53:55 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 01:53:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AzOiOpxCgqvglbD+0cl3JUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP78osmwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJfDIOy?=
 =?us-ascii?q?b4gBAeQPMulXrYbyu1QArQCmBQSuH+7v1jxFi2Xq0aEm3eksEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqkIXuCzzanH0zHDZO5Q1zjj6YnHbgouofeLXbltdsfe1FMgFwXEjlqO?=
 =?us-ascii?q?rYzpJTeV2foMsmeH9eVgU+WvhnUjqwFwpDig3N0sio7TioIS0FDE+jx0zYAoLt?=
 =?us-ascii?q?O2T057ZMSrEJpWtyyCK4t3TMIiQ310uCkk0L0Ko4K0fC8PyJg/wx7favqHfJKS?=
 =?us-ascii?q?4hLkTuqRJi14hH19dLKxnRm97Vavxfb7Vsmz01ZGtDZKkt7Jtn0Lyhfd6dCHR+?=
 =?us-ascii?q?Nj8ku93TuDzR3f5+9aLUwuiKbWKIItzqQxm5cRqUjOGjH6lF/ygaOIbEkp+vSk?=
 =?us-ascii?q?5/76brn6ppKRMZJ/hBvkPaQ0gMO/BPw1MggQUGif/uSxzKPj/ULnT7VQlPE2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GQhV0pws6xqnDjem1soXnWUfIV5bZB6Ki5LlN0zALfzmF/uz?=
 =?us-ascii?q?nlehnCtxy/3HPLDtGpDNIWLCkLflc7Z98UlcyA8rwNBb5pJUDKwBIf3qVk/yqt?=
 =?us-ascii?q?PYFBk5PBKww+r+D9V82IUeVnyVAqKCLqPSvkGH5vg1L+mPeoAVojD9JOYh5/L0?=
 =?us-ascii?q?in85g1AdcbGz3ZQLcHC4AuhmI0KBbHrog9cBEnkFshAxTez3k1CCVT9TZ3CvX6?=
 =?us-ascii?q?Mz/D07CYSmDZvdSYCpmrCOwCC7HphObGBcFl+MCWvod5mDW/oUaCKdOM5hkiAe?=
 =?us-ascii?q?WrimUYMh1QyuuxX8y7poNefU/iwYtZT+1Nl6/eHTlBcy9SBqAMSZyW2CU2Z0nm?=
 =?us-ascii?q?YQTT8swK9/uVB9ykuE0aVggfxYEsJc6+lKUgc9M57cyet6Bsv2WgLAeNeJVVmn?=
 =?us-ascii?q?Ts+nATE3UtI+3dsOb1xhFNWlixDJxzCqDKMNl7yXGJw09brR0GLqJ8Z9zHbG17?=
 =?us-ascii?q?Mtj0M8TctNLmCmgq9/9w7OB4/GiUmZlqCqdbgC0y7J7muM0W2OvERAWg5qTarF?=
 =?us-ascii?q?RWwfZlfRrdnh5UPNVbmuBa4jMgtA08GCLKRKZ8btjVVHQvfjJdvfb3iwm2e2GR?=
 =?us-ascii?q?aH2LeMYJD2dGUa2SXXEFIEnBwL/XaaKQg+AT+srH/EAzxwC13jeUPs/vN4qHOg?=
 =?us-ascii?q?UEA0yQaGb0li17qw/h4YnvicS/IV3rIZtyYtsTR0HFCh393ID9qMvRZufKJZYd?=
 =?us-ascii?q?kl+ldIyXrZtxBhPpynN61tm0QRcxppsE/01xV4EINAkdM0o3Ms1wdyLaOY0FVc?=
 =?us-ascii?q?dzKXx5zwO7vXKnXs8xCrcaLZxlbe0NOO8KcV9Ps4s0njvB2uFkc673Vn0txV03?=
 =?us-ascii?q?yA5pXKDAseS47xXlww9xhgo7HaYy8954zP2H1oMKm0tCLC2t0zCOskzBagY8lQ?=
 =?us-ascii?q?MKeeGADuFM0aAtCkKPY2lFixchIEIOdS+bYuMMOiafSH17CkPeZ6kD29kGRI/Z?=
 =?us-ascii?q?py0kSP9yp7VO7FxJIFw/Ce3guaWDbwllahssbrmY9aYTEeBHawyS/hBIRJfK19?=
 =?us-ascii?q?YZ4LCXuyI82w3th/h4PtV2RE+1K5BlIG2NWmeRydb1Hm2Q1Q1EIXoWGomCeizj?=
 =?us-ascii?q?x0lS0pobSb3CDU3+vicx8HMHZRRGZ+lVfsPZS0j9cCUUiybggmiAGq5VznyKhc?=
 =?us-ascii?q?vqh/KXfcQV1JfyTvM25tSK+wuaecbM5V75Motz5aUOC9YVCcV778rAEW0yLlH2?=
 =?us-ascii?q?tC2j87cyumtYn+nxx/kGidNmp8rGLFecFswhfS/NzdRf9L0jsGXiV4kiTXBl6n?=
 =?us-ascii?q?Mtmt/NWUkYrDs++kW2KgUJ1TbTfkzYeauCSn4m1qBAW1n+qvld3/DQg6zSj72s?=
 =?us-ascii?q?FoVSrSthb8YYrr16OgPeJ8ZEZoB1z868t8Go5glIs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZgZ8O1YmQM1iI/7sBKDr?=
 =?us-ascii?q?yZ7LhFnStzv1q5ohjdYfl7njcB1/Qu7GQWjP0OuAoo1i+dGKwdHVFEPSzwkBSF?=
 =?us-ascii?q?99O+o79WZGq1cbiwyVBxndauDLyZpgFcWXD5eootHCNq78V/Nk7M32P36o3+ZN?=
 =?us-ascii?q?bQatcTvAWOkxjcl+hVNI4xlv0SiCpiOGL9vmcqx/Q1jBNwxpG6oJaIK392862n?=
 =?us-ascii?q?GB5YOSb4Z8cS+jHrkKZfkdya34GpHpV9BDoLWIHkQu6vEDIXrf7nLRqBECUgqn?=
 =?us-ascii?q?eHHrrSBROf6EBjr37VEpGkLXeXJGQCzdV5RRmQP0hfgAESXDUnkZ81DAGqxMr9?=
 =?us-ascii?q?cEhn4jAd/EL3qhxJyuhwLRnwTn/fpBu0ajczUJWQNwBZ7gZG50fIK8Ce6v9zEj?=
 =?us-ascii?q?pc/p2gqgyNN2Oaax5JDWEPRkyLGVTjMqOy6tnH9uiSHvC+IOfWYbWStexeUO+F?=
 =?us-ascii?q?xZC13Ytj4TmMLd+DPmV4A/04x0pDXm15G8LDlDUUUCEXkyPNb8iGpBaz4CF3r8?=
 =?us-ascii?q?a/8Oj1VwLr/4eAF7xSMdB38RCsnaiDL/KQhDp+KTtA1pIMwmLIyKEC3FEIjSFi?=
 =?us-ascii?q?bSKtEbMGtS7CV6/Qnq5XDxgGayJ8LsdI7qQ83hVTNs7fkN/6yrl4jvstAVdfSV?=
 =?us-ascii?q?Phgt2pZdANI2ylNFPIGkeLNLeFJT3K2c33Yrm8SbpfjOpKrR2wpC2bHlTnPjSC?=
 =?us-ascii?q?kTnpSh+uPftNjCGdIBxRpoW9fgxxBmjkSdLscge7P8NvjT0q3b00gWvHOnQBMT?=
 =?us-ascii?q?dnaUNCsL2R4TlcgvV+AGFB6ntlLe+ZmyeW9eXYK5AWsed1DSRwje5V/HM6y75N?=
 =?us-ascii?q?5iFeWPN1gDfSrsJpo1y+jumPyz9nXABSpTpRmI2LvVttOaPC+5lEWHbE+g8N7G?=
 =?us-ascii?q?qKBxQLodtlFsPgu6RKxtfTk6LzLS9I88jI8ssEG8jUNMWHPWIhMBXzHj7UCQoF?=
 =?us-ascii?q?TTizOmDeh0xSiveS9nKOo5g+q5jsnocOS7BBWFw0EPMaFlpqHNgYLJhrWTMklO?=
 =?us-ascii?q?3TsMld2H6w5DnYQt5BuZaPAu+WD7PvITCClr5CTx8Jx7riKsIULIKtnwQoUFB0?=
 =?us-ascii?q?lYnOU2iYG5hyszZmZQw16g0Z6nphZncxxFP+bQiu4TkVGOLi2lYNlwdzbPxl1D?=
 =?us-ascii?q?Do515/ckHXqCY9iA8xntHhiBiYaju3J6C1C8UeLy3uuk4jNdvDQgtvZAmzhk0s?=
 =?us-ascii?q?YBPDXb9XnbwmTWFmkgbYuIBOMfdGSOtPZxpGgbmybu8rmW5BtiGuw0MPse7ME5?=
 =?us-ascii?q?gkjhY2dZeqo1pJwQclZ9kwc+iYIKtP00gVnqemoCClzKYyzRUYKkJL93mdKwAS?=
 =?us-ascii?q?v0ldGrAgJiestshh+weLnTwLLGQFUfsnprRu+1E2MuKH5ybh1bdZLQa2LePJfP?=
 =?us-ascii?q?DRgHTJicPdGgB47UgPjUQQuOEuico=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CaAAD0Expch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgVqBDwN/J4N9k2A1gWAIJRSZOxMBARgHDAGBS4VfIjcGDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCgsJCCkjDII2JAGCYgECAwECIAQLAQ0BATcBBQkBAQoYAgImA?=
 =?us-ascii?q?gIDMQEFARwGAQwGAgEBAQSDGQGCAQQBCptXPIopcHwzgnYBAQWBBQGBPYRoCBJ?=
 =?us-ascii?q?5ihiBHIFXP4ERJwyCMS6DEwsCAoEoG4MkgleHcIE2ghmEGZFZBwKCJQSEAWWKT?=
 =?us-ascii?q?AYYgV1Nh0wRh0+JR4EFg3OLFgIEAgQFAgUPIYE7gXgzGjCDLwmCEgwXfwEJgkG?=
 =?us-ascii?q?FFIUIATc/MoEFAQGLEwQlgiQBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CaAAD0Expch0O0hNFjHAEBAQQBAQcEAQGBVAQBAQsBgVq?=
 =?us-ascii?q?BDwN/J4N9k2A1gWAIJRSZOxMBARgHDAGBS4VfIjcGDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?gsJCCkjDII2JAGCYgECAwECIAQLAQ0BATcBBQkBAQoYAgImAgIDMQEFARwGAQw?=
 =?us-ascii?q?GAgEBAQSDGQGCAQQBCptXPIopcHwzgnYBAQWBBQGBPYRoCBJ5ihiBHIFXP4ERJ?=
 =?us-ascii?q?wyCMS6DEwsCAoEoG4MkgleHcIE2ghmEGZFZBwKCJQSEAWWKTAYYgV1Nh0wRh0+?=
 =?us-ascii?q?JR4EFg3OLFgIEAgQFAgUPIYE7gXgzGjCDLwmCEgwXfwEJgkGFFIUIATc/MoEFA?=
 =?us-ascii?q?QGLEwQlgiQBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="142728104"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 01:53:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728525AbeLSJxv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 04:53:51 -0500
Received: from mail-wm1-f67.google.com ([209.85.128.67]:35485 "EHLO
        mail-wm1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728378AbeLSJxu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 04:53:50 -0500
Received: by mail-wm1-f67.google.com with SMTP id c126so5682982wmh.0
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 01:53:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding;
        bh=Kl/hiez7H8vqKUrwdN36AXfEtS84bobhGCKViVP/Hus=;
        b=jUx3vDHGuyWNGLm/tlgKhzoO0di6wDFVQ+8rAlW9+d8IBxXoMTj/zBqPDwBvrdWKpk
         gkLkSAjuIpIPX5gyA4OzsQWaHuH7TIpkvzXb829a3a9hasD+V4VhiQtjFeSqVS+hZsPS
         UK0hHb3GTfyavtNIARtVVSS2HiybD1l2fIEnY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-language
         :content-transfer-encoding;
        bh=Kl/hiez7H8vqKUrwdN36AXfEtS84bobhGCKViVP/Hus=;
        b=QGdyZs0MO7AVH3QfU6rwKanSs4s2KsWsN++fLvPO5hOe99hKwL116UtNVSR+HsYhHe
         uuDD8Wwx3ZTOTstawYGoIr3NavtjiI8mnmaamq/WhUPc3GNaWhaqS+cGPcFvAsrIOPi1
         ZvXB0jq8TBI8K0sjqodpm6i8c1iRACRH187Vb/h6O663tP1lk3cH9vbixkagNKWRtyjA
         l9cBXFVyqO0Fa7QcKARBwwHz1E8m7B8OdB3AbWI4GQssC2JMgT+tMqIzQF8F9O+faNz/
         Q63c1sEl8xWRLV/A+eODHh82hS1rBmqlp/12jsI3DAl+dj1AqdOVpJcIDTloqaEjhAT/
         XUzA==
X-Gm-Message-State: AA+aEWYZuqM3ss0+Toxw0udqE7f+bRzAXDnqA4B57QVViPUDLJZYmqtJ
        HEfIInLfG5HFB4lUbaF643H36N6B1oQ=
X-Google-Smtp-Source: AFSGD/WZfaIuzSFbyolJOlkXVcL/zP2pYpPE6D4ZNkl9HODGtzxZjdb53O/T78dHJBg9Zva3MpEHDw==
X-Received: by 2002:a1c:5892:: with SMTP id m140mr6535332wmb.60.1545213227895;
        Wed, 19 Dec 2018 01:53:47 -0800 (PST)
Received: from [192.168.0.40] (105.50.92.92.rev.sfr.net. [92.92.50.105])
        by smtp.googlemail.com with ESMTPSA id x10sm6327130wrn.29.2018.12.19.01.53.46
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 01:53:47 -0800 (PST)
Subject: Re: [PATCH v10 02/27] PM / Domains: Add support for CPU devices to
 genpd
To: Ulf Hansson <ulf.hansson@linaro.org>,
        "Rafael J . Wysocki" <rjw@rjwysocki.net>,
        Sudeep Holla <sudeep.holla@arm.com>,
        Lorenzo Pieralisi <Lorenzo.Pieralisi@arm.com>,
        Mark Rutland <mark.rutland@arm.com>, linux-pm@vger.kernel.org
Cc: "Raju P . L . S . S . S . N" <rplsssn@codeaurora.org>,
        Stephen Boyd <sboyd@kernel.org>,
        Tony Lindgren <tony@atomide.com>,
        Kevin Hilman <khilman@kernel.org>,
        Lina Iyer <ilina@codeaurora.org>,
        Viresh Kumar <viresh.kumar@linaro.org>,
        Vincent Guittot <vincent.guittot@linaro.org>,
        Geert Uytterhoeven <geert+renesas@glider.be>,
        linux-arm-kernel@lists.infradead.org,
        linux-arm-msm@vger.kernel.org, linux-kernel@vger.kernel.org
References: <20181129174700.16585-1-ulf.hansson@linaro.org>
 <20181129174700.16585-3-ulf.hansson@linaro.org>
From: Daniel Lezcano <daniel.lezcano@linaro.org>
Message-ID: <45ff9a4b-6130-7800-28cc-a2f5f736f44b@linaro.org>
Date: Wed, 19 Dec 2018 10:53:45 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <20181129174700.16585-3-ulf.hansson@linaro.org>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 29/11/2018 18:46, Ulf Hansson wrote:
> To enable a device belonging to a CPU to be attached to a PM domain managed
> by genpd, let's do a few changes to it, as to make it convenient to manage
> the specifics around CPUs.
> 
> To be able to quickly find out what CPUs that are attached to a genpd,
> which typically becomes useful from a genpd governor as following changes
> is about to show, let's add a cpumask to the struct generic_pm_domain. At
> the point when a CPU device gets attached to a genpd, let's update its
> cpumask. Moreover, let's also propagate changes to the cpumask upwards in
> the topology to the master PM domains. In this way, the cpumask for a genpd
> hierarchically reflects all CPUs attached to the topology below it.
> 
> Finally, let's make this an opt-in feature, to avoid having to manage CPUs
> and the cpumask for a genpd that doesn't need it. For that reason, let's
> add a new genpd configuration bit, GENPD_FLAG_CPU_DOMAIN.
> 
> Cc: Lina Iyer <ilina@codeaurora.org>
> Co-developed-by: Lina Iyer <lina.iyer@linaro.org>
> Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
> ---
> 
> Changes in v10:
> 	- Don't allocate the cpumask when not used.
> 	- Simplify the code that updates the cpumask.
> 	- Document the GENPD_FLAG_CPU_DOMAIN.
> 
> ---
>  drivers/base/power/domain.c | 66 ++++++++++++++++++++++++++++++++++++-
>  include/linux/pm_domain.h   | 13 ++++++++
>  2 files changed, 78 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/base/power/domain.c b/drivers/base/power/domain.c
> index e27b91d36a2a..c3ff8e395308 100644
> --- a/drivers/base/power/domain.c
> +++ b/drivers/base/power/domain.c
> @@ -20,6 +20,7 @@
>  #include <linux/sched.h>
>  #include <linux/suspend.h>
>  #include <linux/export.h>
> +#include <linux/cpu.h>
>  
>  #include "power.h"
>  
> @@ -126,6 +127,7 @@ static const struct genpd_lock_ops genpd_spin_ops = {
>  #define genpd_is_irq_safe(genpd)	(genpd->flags & GENPD_FLAG_IRQ_SAFE)
>  #define genpd_is_always_on(genpd)	(genpd->flags & GENPD_FLAG_ALWAYS_ON)
>  #define genpd_is_active_wakeup(genpd)	(genpd->flags & GENPD_FLAG_ACTIVE_WAKEUP)
> +#define genpd_is_cpu_domain(genpd)	(genpd->flags & GENPD_FLAG_CPU_DOMAIN)
>  
>  static inline bool irq_safe_dev_in_no_sleep_domain(struct device *dev,
>  		const struct generic_pm_domain *genpd)
> @@ -1377,6 +1379,56 @@ static void genpd_free_dev_data(struct device *dev,
>  	dev_pm_put_subsys_data(dev);
>  }
>  
> +static void __genpd_update_cpumask(struct generic_pm_domain *genpd,
> +				   int cpu, bool set, unsigned int depth)
> +{
> +	struct gpd_link *link;
> +
> +	if (!genpd_is_cpu_domain(genpd))
> +		return;

With this test, we won't continue updating the cpumask for the other
masters. Is it done on purpose ?

> +	list_for_each_entry(link, &genpd->slave_links, slave_node) {
> +		struct generic_pm_domain *master = link->master;
> +
> +		genpd_lock_nested(master, depth + 1);
> +		__genpd_update_cpumask(master, cpu, set, depth + 1);
> +		genpd_unlock(master);
> +	}
> +
> +	if (set)
> +		cpumask_set_cpu(cpu, genpd->cpus);
> +	else
> +		cpumask_clear_cpu(cpu, genpd->cpus);
> +}
> +
> +static void genpd_update_cpumask(struct generic_pm_domain *genpd,
> +				 struct device *dev, bool set)
> +{
> +	int cpu;
> +
> +	if (!genpd_is_cpu_domain(genpd))
> +		return;
> +
> +	for_each_possible_cpu(cpu) {
> +		if (get_cpu_device(cpu) == dev) {
> +			__genpd_update_cpumask(genpd, cpu, set, 0);
> +			return;
> +		}
> +	}
> +}
> +
> +static void genpd_set_cpumask(struct generic_pm_domain *genpd,
> +			      struct device *dev)
> +{
> +	genpd_update_cpumask(genpd, dev, true);
> +}
> +
> +static void genpd_clear_cpumask(struct generic_pm_domain *genpd,
> +				struct device *dev)
> +{
> +	genpd_update_cpumask(genpd, dev, false);
> +}
> +
>  static int genpd_add_device(struct generic_pm_domain *genpd, struct device *dev,
>  			    struct gpd_timing_data *td)
>  {
> @@ -1398,6 +1450,8 @@ static int genpd_add_device(struct generic_pm_domain *genpd, struct device *dev,
>  	if (ret)
>  		goto out;
>  
> +	genpd_set_cpumask(genpd, dev);
> +
>  	dev_pm_domain_set(dev, &genpd->domain);
>  
>  	genpd->device_count++;
> @@ -1459,6 +1513,7 @@ static int genpd_remove_device(struct generic_pm_domain *genpd,
>  	if (genpd->detach_dev)
>  		genpd->detach_dev(genpd, dev);
>  
> +	genpd_clear_cpumask(genpd, dev);
>  	dev_pm_domain_set(dev, NULL);
>  
>  	list_del_init(&pdd->list_node);
> @@ -1686,11 +1741,18 @@ int pm_genpd_init(struct generic_pm_domain *genpd,
>  	if (genpd_is_always_on(genpd) && !genpd_status_on(genpd))
>  		return -EINVAL;
>  
> +	if (genpd_is_cpu_domain(genpd) &&
> +	    !zalloc_cpumask_var(&genpd->cpus, GFP_KERNEL))
> +		return -ENOMEM;
> +
>  	/* Use only one "off" state if there were no states declared */
>  	if (genpd->state_count == 0) {
>  		ret = genpd_set_default_power_state(genpd);
> -		if (ret)
> +		if (ret) {
> +			if (genpd_is_cpu_domain(genpd))
> +				free_cpumask_var(genpd->cpus);
>  			return ret;
> +		}
>  	} else if (!gov) {
>  		pr_warn("%s : no governor for states\n", genpd->name);
>  	}
> @@ -1736,6 +1798,8 @@ static int genpd_remove(struct generic_pm_domain *genpd)
>  	list_del(&genpd->gpd_list_node);
>  	genpd_unlock(genpd);
>  	cancel_work_sync(&genpd->power_off_work);
> +	if (genpd_is_cpu_domain(genpd))
> +		free_cpumask_var(genpd->cpus);
>  	if (genpd->free_state) {
>  		kfree(genpd->states);
>  		genpd->states = NULL;
> diff --git a/include/linux/pm_domain.h b/include/linux/pm_domain.h
> index f9e09bd4152c..5a4673605d22 100644
> --- a/include/linux/pm_domain.h
> +++ b/include/linux/pm_domain.h
> @@ -16,6 +16,7 @@
>  #include <linux/of.h>
>  #include <linux/notifier.h>
>  #include <linux/spinlock.h>
> +#include <linux/cpumask.h>
>  
>  /*
>   * Flags to control the behaviour of a genpd.
> @@ -42,11 +43,22 @@
>   * GENPD_FLAG_ACTIVE_WAKEUP:	Instructs genpd to keep the PM domain powered
>   *				on, in case any of its attached devices is used
>   *				in the wakeup path to serve system wakeups.
> + *
> + * GENPD_FLAG_CPU_DOMAIN:	Instructs genpd that it should expect to get
> + *				devices attached, which may belong to CPUs or
> + *				possibly have subdomains with CPUs attached.
> + *				This flag enables the genpd backend driver to
> + *				deploy idle power management support for CPUs
> + *				and groups of CPUs. Note that, the backend
> + *				driver must then comply with the so called,
> + *				last-man-standing algorithm, for the CPUs in the
> + *				PM domain.
>   */
>  #define GENPD_FLAG_PM_CLK	 (1U << 0)
>  #define GENPD_FLAG_IRQ_SAFE	 (1U << 1)
>  #define GENPD_FLAG_ALWAYS_ON	 (1U << 2)
>  #define GENPD_FLAG_ACTIVE_WAKEUP (1U << 3)
> +#define GENPD_FLAG_CPU_DOMAIN	 (1U << 4)
>  
>  enum gpd_status {
>  	GPD_STATE_ACTIVE = 0,	/* PM domain is active */
> @@ -93,6 +105,7 @@ struct generic_pm_domain {
>  	unsigned int suspended_count;	/* System suspend device counter */
>  	unsigned int prepared_count;	/* Suspend counter of prepared devices */
>  	unsigned int performance_state;	/* Aggregated max performance state */
> +	cpumask_var_t cpus;		/* A cpumask of the attached CPUs */
>  	int (*power_off)(struct generic_pm_domain *domain);
>  	int (*power_on)(struct generic_pm_domain *domain);
>  	unsigned int (*opp_to_performance_state)(struct generic_pm_domain *genpd,
> 


-- 
 <http://www.linaro.org/> Linaro.org │ Open source software for ARM SoCs

Follow Linaro:  <http://www.facebook.com/pages/Linaro> Facebook |
<http://twitter.com/#!/linaroorg> Twitter |
<http://www.linaro.org/linaro-blog/> Blog

