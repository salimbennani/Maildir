Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:45:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 70C3B58055F
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 15:12:19 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 18 Dec 2018 15:12:19 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A3d9E7BF/Wz4uouz3WgPBzZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ76p8qybnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHI2y?=
 =?us-ascii?q?YYgIAeUDM+ZXoJXyqVQToxumBwSiBuzixiJGi3Pqw6I6yP8sER3f3AE6A94Dqm?=
 =?us-ascii?q?jYodfzOawPUe611q7IzTDbYv1Lwzj97ZXIfQ4lofqRQ7xwccvRxlI1GAPYilWQ?=
 =?us-ascii?q?tZHuMjSO1usXtmib8vRvVea1h247qwFxoyOgyd0xionNmoIY0U7L9SNiwIosId?=
 =?us-ascii?q?25SEl7Ydi+HJtXrSGaOJJ7T8U/SG9roCY30qMKtYK4cSQQ1Zgr2h3SZ+aZf4WG?=
 =?us-ascii?q?4h/vTvudLDVgiH57Yr2zmwu+/E28xeLnS8W51FNHojdGn9XRs30CywLf5tSbRv?=
 =?us-ascii?q?Z4+kquxy2A2gHW5+5ZPUw0m6TbJpsvwrEulZceskHOETP4lUrqjqKbcFgv9PKy?=
 =?us-ascii?q?5OT9eLrmo4eRN49qhQH6NaQjgsi/AeUjMggSRGiX4+u81Lv+/UHjR7VKlPI2nr?=
 =?us-ascii?q?HYsJDcO8sbura0DxFJ3osg8RqzEiqq3dcCkXUZIl9IeAiLg5XrNl3WJfD3F/a/?=
 =?us-ascii?q?g1CikDdxwPDGO6XsAozTIXjGjbftZKty5FBCyAUtydBT/olbCrYcIPL1RkD+qs?=
 =?us-ascii?q?fYAhg9Mwy1wOboFs9x14wDWW+XBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5lEQbfamu25sXZ3a4Hul8L0Wee3rsjc8NEX0WsQomUOzqlFqCXCZXZ3azXK?=
 =?us-ascii?q?Iz+Cs3CY27DYrYQoCtgbqB3Dq0H5FMZ2BGDEyMHmnsd4meR/gMbyeScYdclCcZ?=
 =?us-ascii?q?X+2hV5M5zkPp8wv70KZ8aOzT/CIeqNTkztcy4uTSkRQ783tzF9ic1GeWCHh5m3?=
 =?us-ascii?q?5NSzIo0aQsnEpm113W1KF5h+BfR8Ve4u4MXgokOJqZ1eFjFt3pRirHedGGTkvg?=
 =?us-ascii?q?Rc+pViosRNA8yMNbfkBmBt+5hQrC1Sf5P7hAjrGOGdk4/7zR21D3IMByzWuA07?=
 =?us-ascii?q?MuyxE+T9dCLyujj79z+gzXL4rIlUyDkOCtb6tP8jTK8TK4xG+TsUUQbA5xW6zY?=
 =?us-ascii?q?WWxXMlDfqMn04gXeT76kAKkjLiNMz9XHLrpNbJvul1oQF6SrA8jXf2/kwzT4Ph?=
 =?us-ascii?q?2P3L7ZKdOyI2g=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BaAAC0fRlchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCYoN9iHiLHIINmU0VGBSHHSI3Bg0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDi+CNgUCAxoBBoJcAwMBAiAEHwopAwMBAgYBAR8FAiIEAgIDATgbBxIFg?=
 =?us-ascii?q?x2CAQEEpx18M4VAhG6BC4ZzhEGBVz+BEYd9gx6CVwKJPAqGDIFPkAMHAoIlBI8?=
 =?us-ascii?q?rJJFXiUSQL4EmNoF4TTCDL4InF44ecYEEAyCLSYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BaAAC0fRlchxHrdtBkHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?CYoN9iHiLHIINmU0VGBSHHSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCA?=
 =?us-ascii?q?xoBBoJcAwMBAiAEHwopAwMBAgYBAR8FAiIEAgIDATgbBxIFgx2CAQEEpx18M4V?=
 =?us-ascii?q?AhG6BC4ZzhEGBVz+BEYd9gx6CVwKJPAqGDIFPkAMHAoIlBI8rJJFXiUSQL4EmN?=
 =?us-ascii?q?oF4TTCDL4InF44ecYEEAyCLSYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="58039572"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 15:12:18 -0800
Received: from localhost ([::1]:56686 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZOXB-00058K-VT
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 18:12:18 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40205)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <samuel.thibault@ens-lyon.org>) id 1gZOQI-00081V-LO
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 18:05:12 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <samuel.thibault@ens-lyon.org>) id 1gZOQE-0004Dl-1u
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 18:05:08 -0500
Received: from hera.aquilenet.fr ([2a0c:e300::1]:57434)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <samuel.thibault@ens-lyon.org>)
	id 1gZOQC-00044j-DM
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 18:05:05 -0500
Received: from localhost (localhost [127.0.0.1])
	by hera.aquilenet.fr (Postfix) with ESMTP id BCEBC2764;
	Wed, 19 Dec 2018 00:04:55 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at aquilenet.fr
Received: from hera.aquilenet.fr ([127.0.0.1])
	by localhost (hera.aquilenet.fr [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id SLiq6_tpoJe3; Wed, 19 Dec 2018 00:04:54 +0100 (CET)
Received: from function.home (unknown
	[IPv6:2a01:cb19:181:c200:9eb6:d0ff:fe88:c3c7])
	by hera.aquilenet.fr (Postfix) with ESMTPSA id 7F61B2809;
	Wed, 19 Dec 2018 00:04:44 +0100 (CET)
Received: from samy by function.home with local (Exim 4.91)
	(envelope-from <samuel.thibault@ens-lyon.org>)
	id 1gZOPq-0007Hw-Pt; Wed, 19 Dec 2018 00:04:42 +0100
From: Samuel Thibault <samuel.thibault@ens-lyon.org>
To: qemu-devel@nongnu.org,
	peter.maydell@linaro.org
Date: Wed, 19 Dec 2018 00:03:51 +0100
Message-Id: <20181218230442.27887-14-samuel.thibault@ens-lyon.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181218230442.27887-1-samuel.thibault@ens-lyon.org>
References: <20181218230442.27887-1-samuel.thibault@ens-lyon.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2a0c:e300::1
Subject: [Qemu-devel] [PULL 13/64] slirp: move socket pair creation in
 helper function
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>,
	Samuel Thibault <samuel.thibault@ens-lyon.org>,
	stefanha@redhat.com, jan.kiszka@siemens.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>

Originally, the patch was fixing a bunch of issues, but Peter beat me
to it with earlier commit "slirp: fork_exec(): create and connect
child socket before fork()".

Factor out socket pair creation, to simplify the fork_exec() code.
Use the name socketpair_with_oob() since the code is actually similar
to what socketpair() would do, except that it uses TCP sockets, for
SLIRP to be able to call send with MSG_OOB (since SO_OOBINLINE is set,
this could probably be faked instead on regular unix sockets though).

Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
---
 slirp/misc.c | 142 +++++++++++++++++++++++++--------------------------
 1 file changed, 71 insertions(+), 71 deletions(-)

diff --git a/slirp/misc.c b/slirp/misc.c
index 4840187750..7362e14339 100644
--- a/slirp/misc.c
+++ b/slirp/misc.c
@@ -73,85 +73,92 @@ fork_exec(struct socket *so, const char *ex)
=20
 #else
=20
-/*
- * XXX This is ugly
- * We create and bind a socket, then fork off to another
- * process, which connects to this socket, after which we
- * exec the wanted program.  If something (strange) happens,
- * the accept() call could block us forever.
- */
+static int
+slirp_socketpair_with_oob(int sv[2])
+{
+    struct sockaddr_in addr =3D {
+        .sin_family =3D AF_INET,
+        .sin_port =3D 0,
+        .sin_addr.s_addr =3D INADDR_ANY,
+    };
+    socklen_t addrlen =3D sizeof(addr);
+    int ret, s;
+
+    sv[1] =3D -1;
+    s =3D qemu_socket(AF_INET, SOCK_STREAM, 0);
+    if (s < 0 || bind(s, (struct sockaddr *)&addr, addrlen) < 0 ||
+        listen(s, 1) < 0 ||
+        getsockname(s, (struct sockaddr *)&addr, &addrlen) < 0) {
+        goto err;
+    }
+
+    sv[1] =3D qemu_socket(AF_INET, SOCK_STREAM, 0);
+    if (sv[1] < 0) {
+        goto err;
+    }
+    /*
+     * This connect won't block because we've already listen()ed on
+     * the server end (even though we won't accept() the connection
+     * until later on).
+     */
+    do {
+        ret =3D connect(sv[1], (struct sockaddr *)&addr, addrlen);
+    } while (ret < 0 && errno =3D=3D EINTR);
+    if (ret < 0) {
+        goto err;
+    }
+
+    do {
+        sv[0] =3D accept(s, (struct sockaddr *)&addr, &addrlen);
+    } while (sv[0] < 0 && errno =3D=3D EINTR);
+    if (sv[0] < 0) {
+        goto err;
+    }
+
+    closesocket(s);
+    return 0;
+
+err:
+    error_report("Error: slirp_socketpair(): %s", strerror(errno));
+    if (s >=3D 0) {
+        closesocket(s);
+    }
+    if (sv[1] >=3D 0) {
+        closesocket(sv[1]);
+    }
+    return -1;
+}
+
 int
 fork_exec(struct socket *so, const char *ex)
 {
-        int s, cs;
-        struct sockaddr_in addr, csaddr;
-	socklen_t addrlen =3D sizeof(addr);
-        socklen_t csaddrlen =3D sizeof(csaddr);
-	int opt;
 	char **argv;
-	int ret;
+	int opt, c, sp[2];
 	pid_t pid;
=20
 	DEBUG_CALL("fork_exec");
 	DEBUG_ARG("so =3D %p", so);
 	DEBUG_ARG("ex =3D %p", ex);
=20
-    addr.sin_family =3D AF_INET;
-    addr.sin_port =3D 0;
-    addr.sin_addr.s_addr =3D INADDR_ANY;
-
-    s =3D qemu_socket(AF_INET, SOCK_STREAM, 0);
-    if (s < 0 || bind(s, (struct sockaddr *)&addr, addrlen) < 0 ||
-        listen(s, 1) < 0) {
-        error_report("Error: inet socket: %s", strerror(errno));
-        if (s >=3D 0) {
-            closesocket(s);
-        }
+    if (slirp_socketpair_with_oob(sp) < 0) {
         return 0;
     }
=20
-        if (getsockname(s, (struct sockaddr *)&csaddr, &csaddrlen) < 0) =
{
-            closesocket(s);
-            return 0;
-        }
-        cs =3D qemu_socket(AF_INET, SOCK_STREAM, 0);
-        if (cs < 0) {
-            closesocket(s);
-            return 0;
-        }
-        csaddr.sin_addr =3D loopback_addr;
-        /*
-         * This connect won't block because we've already listen()ed on
-         * the server end (even though we won't accept() the connection
-         * until later on).
-         */
-        do {
-            ret =3D connect(cs, (struct sockaddr *)&csaddr, csaddrlen);
-        } while (ret < 0 && errno =3D=3D EINTR);
-        if (ret < 0) {
-            closesocket(s);
-            closesocket(cs);
-            return 0;
-        }
-
 	pid =3D fork();
 	switch(pid) {
 	 case -1:
 		error_report("Error: fork failed: %s", strerror(errno));
-                closesocket(cs);
-		close(s);
+		closesocket(sp[0]);
+		closesocket(sp[1]);
 		return 0;
=20
 	 case 0:
-                setsid();
-
-		/* Set the DISPLAY */
-                close(s);
-                dup2(cs, 0);
-                dup2(cs, 1);
-                dup2(cs, 2);
-		for (s =3D getdtablesize() - 1; s >=3D 3; s--)
-		   close(s);
+		setsid();
+		dup2(sp[1], 0);
+		dup2(sp[1], 1);
+		dup2(sp[1], 2);
+		for (c =3D getdtablesize() - 1; c >=3D 3; c--)
+		   close(c);
=20
                 argv =3D g_strsplit(ex, " ", -1);
 		execvp(argv[0], (char **)argv);
@@ -163,19 +170,12 @@ fork_exec(struct socket *so, const char *ex)
 		exit(1);
=20
 	 default:
+		so->s =3D sp[0];
+		closesocket(sp[1]);
 		qemu_add_child_watch(pid);
-                closesocket(cs);
-                /*
-                 * This should never block, because we already connect()=
ed
-                 * on the child end before we forked.
-                 */
-                do {
-                    so->s =3D accept(s, (struct sockaddr *)&addr, &addrl=
en);
-                } while (so->s < 0 && errno =3D=3D EINTR);
-                closesocket(s);
-                socket_set_fast_reuse(so->s);
-                opt =3D 1;
-                qemu_setsockopt(so->s, SOL_SOCKET, SO_OOBINLINE, &opt, s=
izeof(int));
+		socket_set_fast_reuse(so->s);
+		opt =3D 1;
+		qemu_setsockopt(so->s, SOL_SOCKET, SO_OOBINLINE, &opt, sizeof(int));
 		qemu_set_nonblock(so->s);
 		return 1;
 	}
--=20
2.19.2


