Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:44:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 944F75805F0;
	Thu, 20 Dec 2018 18:36:30 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 18:36:29 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ADM9phBJBpFAfLsMuXdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvryrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYQAE+UBJv5YoovmqlsBsRezHxOhCP/zxjNWgHL9wK000/4mEQHDxAEuAs4Ov2?=
 =?us-ascii?q?rMrNX1KqgSV/2+wrXPzTXfb/NX1yny6IzMchs8pvyMRrxwcdDKxEYzDQzFiE6f?=
 =?us-ascii?q?pZb/MDOIy+QNvHKX7+16VeKgkWIosRxxryGpy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886XW1kpCg3xqcbtZKmZiQHyokrywTCZ/GBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86ykhB4K9DYfDQYOtjKab3CihHJ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/j18J65+vJmRE29Dx7FcKd026WQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+UR1m8?=
 =?us-ascii?q?XNWpHys9TtIrzN8IeEZyBdOighfH3yqpBr8Vk6eGBJg18qLawnjwKNxxy3fA1K?=
 =?us-ascii?q?k9kVYmRtFDOnGhhq567wLTHZLGk12Fl6a2cqQRxDPC+32dzWWQpk1YUBR/UaPe?=
 =?us-ascii?q?XX8BYEvbttD55kLET7+zBrUrKApBycieKqRUbt3ll0lJRPDmON7GeWK+h3+wBQ?=
 =?us-ascii?q?qUxrOLdIfqZ2Qd3CDaCEgYkwAS/WyKNRQkCiemuWLeCD1uFVTgY0739el+qXW7?=
 =?us-ascii?q?TlI7zg2Qbk1h0aa19QARhfCGV/wT2bcEsj87qzpoBFa9w87WC92YqgV7eKVTf9?=
 =?us-ascii?q?w870lH1G7DrAN9I4GvILpkhl4ddAR3oVjj1xF2CoVGjMgro2kmzAt0KaKEzlxB?=
 =?us-ascii?q?cymU0oz3Or3SMmPy5gyga7bK2lHC19ab4qcO6Okip1r/pg2oF0oi/G9h09layH?=
 =?us-ascii?q?ac4pTKDAwPUZP+SEo39h56p63EbSk5/Y/byXpsMaysuD/Yx90pHPclygqnf9pH?=
 =?us-ascii?q?KqOEFRP9HNcAB8ezL+wmgV6pYQwePOBT7aI7I9mpd/+b16G1JuZgmzSmgH9D4I?=
 =?us-ascii?q?B81EKM6iV9RvTJ35YD3/GXwA+HWy3gg1emt8D9gZpEai0KHmqj1SjkA5ZcZ61z?=
 =?us-ascii?q?fYoRCWaiOda3xsh4h5P2X35Y9VijB04J2cOzeBqSaUD90hNU1UgNvXOnni64xS?=
 =?us-ascii?q?Rukz41tqqfwDDOw+P6eRoFIGFLXmpijVTrIYSulNAVRkuobwsolBuj+0n6wbNW?=
 =?us-ascii?q?pKB+L2nVXEdJcDL6L2BkUqusqLWCZ9RD548vsSVSSO68e0yVSqbhoxsG1CPuB2?=
 =?us-ascii?q?tfyyo8dz2wuJX5nhp6hXmZLHZyqnrZZM5xyQ3e5NzaWf5ewD4GSDNkhjnQA1i2?=
 =?us-ascii?q?J8Op8smMl5ffruC+UHqsVp5Jfinq14+AtDa76ndsAR2whP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI3Hgah5aV8mAdnWb9?=
 =?us-ascii?q?L9pbwr7+Y2QXRTEQ3dHV+gfl1VZnLnKIwYL5S3qcztFgZ9m8fmMZxCY949pWB6?=
 =?us-ascii?q?eT6bxOhTF1rUagrQLNffh9mS8Qyecp6H4fme0IuRAiziOAArAJBklYPDfhlxCJ?=
 =?us-ascii?q?79C4saVWa3yjcbm21Epig9+hCKuOrR1bWHb8Yp0iBzN/7t1jMFLQ133+8prrd8?=
 =?us-ascii?q?PXbdIXqx2YiRPAj/VOJZI1l/oKgzdnOG3nsX0kze47kQJh3ZWgsIebLGVt+bqz?=
 =?us-ascii?q?AgREOT3te8MT5jbtgL5cnsmM2oCgAI5hFi8XXJfyTvKoDTEStenhNwmUCz0xsX?=
 =?us-ascii?q?ObGbvZHQ+C50ZqtXPPE5a3N36JIHkV18ltRB6YJEZHmgAbQC06noIlFgCt3MHg?=
 =?us-ascii?q?cEB55i0I5l7lsBRMzPhkNwL4UmfZqwelcTM0SJmZLBpL4QBO/UbVMcqC7u1tGy?=
 =?us-ascii?q?FU5IGurAuIKmaDfQRHEXkJWlCYB1DkJrSu5cfP8+mbBuq9LvvCe7aOqfZZV/eH?=
 =?us-ascii?q?252vyJZm/y2XO8WLP3liCeA720VZUXB4HcTZhysASygNmy3RaM6boQ+2+jdroc?=
 =?us-ascii?q?Cn7PTrRAXv6JOVBLtPKtpv4Q65gKeZO+6UhSZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRNJc/bitbv2rFklPI6F1dFWk?=
 =?us-ascii?q?LnmsyyYcwKIme9NE7IBUqRNbSGIyHLzN/zYa+mVbJQi+BUvQWquTmHC0/jIiiD?=
 =?us-ascii?q?lz7xWhGvK+5MiiSbPB1YuI6lcxdtCXLsTNTpahCgNN93jDs2waA7h3/QNG4cNy?=
 =?us-ascii?q?R8fF1JrrGK8SxYhfB/SCR96S9JJO+FliLRxe7CKZMft/0jVih9keNX5Fw7zLRY?=
 =?us-ascii?q?5TtOQ+wznibO+JomilWrguSOggF7WQBJtDFKmIWV9RFrIrnx9ZRaX3vAuhUX4j?=
 =?us-ascii?q?PUQzIHu8RiEN7uva8Ynt7CiK7+Nh9c/N/Ou8gRHc7ZLISAKnV3YjTzHzuBNxcI?=
 =?us-ascii?q?VT6mMynlgFBdj/yW8jXBtZYggpPlnpBIQ6JGWxoyDPxcA1kzT49KG4t+Qj5xye?=
 =?us-ascii?q?3Tt8UP/3fr6UCJHMg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AOAAA3URxch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBggCBayeMFl+LHFABAQaBSYkQjjqCAwUrAYcuIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2JAGCaQI9AQE3AQUJAislAwxOAReDHYF1DAEFpgmCH?=
 =?us-ascii?q?4J2AQEFhyUHCIJtiDaBHBd4gQeBEAGNcol7l0MJkVkMGI5jgnqJTZBAgUaCDk0?=
 =?us-ascii?q?fGYMnghuCJ4wtKwEygQQBAQGOGQEB?=
X-IPAS-Result: =?us-ascii?q?A0AOAAA3URxch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBggC?=
 =?us-ascii?q?BayeMFl+LHFABAQaBSYkQjjqCAwUrAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2JAGCaQI9AQE3AQUJAislAwxOAReDHYF1DAEFpgmCH4J2AQEFhyUHCIJ?=
 =?us-ascii?q?tiDaBHBd4gQeBEAGNcol7l0MJkVkMGI5jgnqJTZBAgUaCDk0fGYMnghuCJ4wtK?=
 =?us-ascii?q?wEygQQBAQGOGQEB?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="56800104"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 18:36:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390865AbeLUCgY (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 21:36:24 -0500
Received: from ozlabs.org ([203.11.71.1]:51077 "EHLO ozlabs.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729178AbeLUCgY (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 21:36:24 -0500
Received: from authenticated.ozlabs.org (localhost [127.0.0.1])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        by ozlabs.org (Postfix) with ESMTPSA id 43LXnH5Jrwz9s9G;
        Fri, 21 Dec 2018 13:36:18 +1100 (AEDT)
Authentication-Results: ozlabs.org; dmarc=none (p=none dis=none) header.from=canb.auug.org.au
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=canb.auug.org.au;
        s=201702; t=1545359779;
        bh=v99VvRjDFX8BRk4xVvqx9ePPsuYfX6pBOMhn3xSf4FU=;
        h=Date:From:To:Cc:Subject:From;
        b=vIDeLZ6SZi3SAqwojtAcPphXK/SNxCCK/m/bV5whQUrMcQ0wOPc7tqLqFtdnDGkcN
         jXpuAaDn9KW+vISaTtA4GsaH+Oe3KuhD5ttEOL87z9D+/PKMc7OwPrSyShHhoKaKIT
         uAvKAipYzYbBzkQ88kdqB3qUJ+yl66vUItZwzVS6hFjba6J9zyAOlOml7EjuEkDJUi
         spUWZwNXLTA82VeR290rJRf1+txJqzfEs9JshE9aZNagI5WnO00oV/Mqk9lUUoEEaq
         YA52zrnTymLKAPqPt7e+u5A3jIFHiRNkK8mNTGZoVBatuko2Sf+QDIzkBx6Q2YPXg0
         z50PoOvusG6LQ==
Date: Fri, 21 Dec 2018 13:36:17 +1100
From: Stephen Rothwell <sfr@canb.auug.org.au>
To: Daniel Borkmann <daniel@iogearbox.net>,
        Alexei Starovoitov <ast@kernel.org>,
        Networking <netdev@vger.kernel.org>
Cc: Linux Next Mailing List <linux-next@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        Jakub Kicinski <jakub.kicinski@netronome.com>
Subject: linux-next: manual merge of the bpf-next tree with Linus' tree
Message-ID: <20181221133617.43e01372@canb.auug.org.au>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
 boundary="Sig_/D7ZQ8GWlc5zloykB2GMgfOH"; protocol="application/pgp-signature"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

--Sig_/D7ZQ8GWlc5zloykB2GMgfOH
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

Hi all,

Today's linux-next merge of the bpf-next tree got a conflict in:

  tools/testing/selftests/bpf/test_verifier.c

between commits:

  7640ead93924 ("bpf: verifier: make sure callees don't prune with caller d=
ifferences")
  14507e35bd9d ("selftests: bpf: verifier: add tests for JSET interpretatio=
n")

from Linus' tree and commit:

  5a8d5209ac02 ("selftests: bpf: add trivial JSET tests")

from the bpf-next tree.

I fixed it up (see below) and can carry the fix as necessary. This
is now fixed as far as linux-next is concerned, but any non trivial
conflicts should be mentioned to your upstream maintainer when your tree
is submitted for merging.  You may also want to consider cooperating
with the maintainer of the conflicting tree to minimise any particularly
complex conflicts.

--=20
Cheers,
Stephen Rothwell

diff --cc tools/testing/selftests/bpf/test_verifier.c
index c3b799c1ee97,dbd31750b214..000000000000
--- a/tools/testing/selftests/bpf/test_verifier.c
+++ b/tools/testing/selftests/bpf/test_verifier.c
@@@ -14098,34 -14169,198 +14169,225 @@@ static struct bpf_test tests[] =3D=
=20
  		.errstr =3D "invalid bpf_context access",
  		.errstr_unpriv =3D "R1 leaks addr",
  		.result =3D REJECT,
 +	},
 +		"calls: cross frame pruning",
 +		.insns =3D {
 +			/* r8 =3D !!random();
 +			 * call pruner()
 +			 * if (r8)
 +			 *     do something bad;
 +			 */
 +			BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0,
 +				     BPF_FUNC_get_prandom_u32),
 +			BPF_MOV64_IMM(BPF_REG_8, 0),
 +			BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),
 +			BPF_MOV64_IMM(BPF_REG_8, 1),
 +			BPF_MOV64_REG(BPF_REG_1, BPF_REG_8),
 +			BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 1, 0, 4),
 +			BPF_JMP_IMM(BPF_JEQ, BPF_REG_8, 1, 1),
 +			BPF_LDX_MEM(BPF_B, BPF_REG_9, BPF_REG_1, 0),
 +			BPF_MOV64_IMM(BPF_REG_0, 0),
 +			BPF_EXIT_INSN(),
 +			BPF_JMP_IMM(BPF_JEQ, BPF_REG_1, 0, 0),
 +			BPF_EXIT_INSN(),
 +		},
 +		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
 +		.errstr_unpriv =3D "function calls to other bpf functions are allowed f=
or root only",
 +		.result_unpriv =3D REJECT,
 +		.errstr =3D "!read_ok",
 +		.result =3D REJECT,
  	},
+ 	{
+ 		"jset: functional",
+ 		.insns =3D {
+ 			/* r0 =3D 0 */
+ 			BPF_MOV64_IMM(BPF_REG_0, 0),
+ 			/* prep for direct packet access via r2 */
+ 			BPF_LDX_MEM(BPF_W, BPF_REG_2, BPF_REG_1,
+ 				    offsetof(struct __sk_buff, data)),
+ 			BPF_LDX_MEM(BPF_W, BPF_REG_3, BPF_REG_1,
+ 				    offsetof(struct __sk_buff, data_end)),
+ 			BPF_MOV64_REG(BPF_REG_4, BPF_REG_2),
+ 			BPF_ALU64_IMM(BPF_ADD, BPF_REG_4, 8),
+ 			BPF_JMP_REG(BPF_JLE, BPF_REG_4, BPF_REG_3, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			BPF_LDX_MEM(BPF_DW, BPF_REG_7, BPF_REG_2, 0),
+=20
+ 			/* reg, bit 63 or bit 0 set, taken */
+ 			BPF_LD_IMM64(BPF_REG_8, 0x8000000000000001),
+ 			BPF_JMP_REG(BPF_JSET, BPF_REG_7, BPF_REG_8, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			/* reg, bit 62, not taken */
+ 			BPF_LD_IMM64(BPF_REG_8, 0x4000000000000000),
+ 			BPF_JMP_REG(BPF_JSET, BPF_REG_7, BPF_REG_8, 1),
+ 			BPF_JMP_IMM(BPF_JA, 0, 0, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			/* imm, any bit set, taken */
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_7, -1, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			/* imm, bit 31 set, taken */
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_7, 0x80000000, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			/* all good - return r0 =3D=3D 2 */
+ 			BPF_MOV64_IMM(BPF_REG_0, 2),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SCHED_CLS,
+ 		.result =3D ACCEPT,
+ 		.runs =3D 7,
+ 		.retvals =3D {
+ 			{ .retval =3D 2,
+ 			  .data64 =3D { (1ULL << 63) | (1U << 31) | (1U << 0), }
+ 			},
+ 			{ .retval =3D 2,
+ 			  .data64 =3D { (1ULL << 63) | (1U << 31), }
+ 			},
+ 			{ .retval =3D 2,
+ 			  .data64 =3D { (1ULL << 31) | (1U << 0), }
+ 			},
+ 			{ .retval =3D 2,
+ 			  .data64 =3D { (__u32)-1, }
+ 			},
+ 			{ .retval =3D 2,
+ 			  .data64 =3D { ~0x4000000000000000ULL, }
+ 			},
+ 			{ .retval =3D 0,
+ 			  .data64 =3D { 0, }
+ 			},
+ 			{ .retval =3D 0,
+ 			  .data64 =3D { ~0ULL, }
+ 			},
+ 		},
+ 	},
+ 	{
+ 		"jset: sign-extend",
+ 		.insns =3D {
+ 			/* r0 =3D 0 */
+ 			BPF_MOV64_IMM(BPF_REG_0, 0),
+ 			/* prep for direct packet access via r2 */
+ 			BPF_LDX_MEM(BPF_W, BPF_REG_2, BPF_REG_1,
+ 				    offsetof(struct __sk_buff, data)),
+ 			BPF_LDX_MEM(BPF_W, BPF_REG_3, BPF_REG_1,
+ 				    offsetof(struct __sk_buff, data_end)),
+ 			BPF_MOV64_REG(BPF_REG_4, BPF_REG_2),
+ 			BPF_ALU64_IMM(BPF_ADD, BPF_REG_4, 8),
+ 			BPF_JMP_REG(BPF_JLE, BPF_REG_4, BPF_REG_3, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			BPF_LDX_MEM(BPF_DW, BPF_REG_7, BPF_REG_2, 0),
+=20
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_7, 0x80000000, 1),
+ 			BPF_EXIT_INSN(),
+=20
+ 			BPF_MOV64_IMM(BPF_REG_0, 2),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SCHED_CLS,
+ 		.result =3D ACCEPT,
+ 		.retval =3D 2,
+ 		.data =3D { 1, 0, 0, 0, 0, 0, 0, 1, },
+ 	},
+ 	{
+ 		"jset: known const compare",
+ 		.insns =3D {
+ 			BPF_MOV64_IMM(BPF_REG_0, 1),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_0, 1, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
+ 		.retval_unpriv =3D 1,
+ 		.result_unpriv =3D ACCEPT,
+ 		.retval =3D 1,
+ 		.result =3D ACCEPT,
+ 	},
+ 	{
+ 		"jset: known const compare bad",
+ 		.insns =3D {
+ 			BPF_MOV64_IMM(BPF_REG_0, 0),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_0, 1, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
+ 		.errstr_unpriv =3D "!read_ok",
+ 		.result_unpriv =3D REJECT,
+ 		.errstr =3D "!read_ok",
+ 		.result =3D REJECT,
+ 	},
+ 	{
+ 		"jset: unknown const compare taken",
+ 		.insns =3D {
+ 			BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0,
+ 				     BPF_FUNC_get_prandom_u32),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_0, 1, 1),
+ 			BPF_JMP_IMM(BPF_JA, 0, 0, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
+ 		.errstr_unpriv =3D "!read_ok",
+ 		.result_unpriv =3D REJECT,
+ 		.errstr =3D "!read_ok",
+ 		.result =3D REJECT,
+ 	},
+ 	{
+ 		"jset: unknown const compare not taken",
+ 		.insns =3D {
+ 			BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0,
+ 				     BPF_FUNC_get_prandom_u32),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_0, 1, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
+ 		.errstr_unpriv =3D "!read_ok",
+ 		.result_unpriv =3D REJECT,
+ 		.errstr =3D "!read_ok",
+ 		.result =3D REJECT,
+ 	},
+ 	{
+ 		"jset: half-known const compare",
+ 		.insns =3D {
+ 			BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0,
+ 				     BPF_FUNC_get_prandom_u32),
+ 			BPF_ALU64_IMM(BPF_OR, BPF_REG_0, 2),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_0, 3, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_MOV64_IMM(BPF_REG_0, 0),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
+ 		.result_unpriv =3D ACCEPT,
+ 		.result =3D ACCEPT,
+ 	},
+ 	{
+ 		"jset: range",
+ 		.insns =3D {
+ 			BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0,
+ 				     BPF_FUNC_get_prandom_u32),
+ 			BPF_MOV64_REG(BPF_REG_1, BPF_REG_0),
+ 			BPF_MOV64_IMM(BPF_REG_0, 0),
+ 			BPF_ALU64_IMM(BPF_AND, BPF_REG_1, 0xff),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_1, 0xf0, 3),
+ 			BPF_JMP_IMM(BPF_JLT, BPF_REG_1, 0x10, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_EXIT_INSN(),
+ 			BPF_JMP_IMM(BPF_JSET, BPF_REG_1, 0x10, 1),
+ 			BPF_EXIT_INSN(),
+ 			BPF_JMP_IMM(BPF_JGE, BPF_REG_1, 0x10, 1),
+ 			BPF_LDX_MEM(BPF_B, BPF_REG_8, BPF_REG_9, 0),
+ 			BPF_EXIT_INSN(),
+ 		},
+ 		.prog_type =3D BPF_PROG_TYPE_SOCKET_FILTER,
+ 		.result_unpriv =3D ACCEPT,
+ 		.result =3D ACCEPT,
+ 	},
  };
 =20
  static int probe_filter_length(const struct bpf_insn *fp)

--Sig_/D7ZQ8GWlc5zloykB2GMgfOH
Content-Type: application/pgp-signature
Content-Description: OpenPGP digital signature

-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEENIC96giZ81tWdLgKAVBC80lX0GwFAlwcUaEACgkQAVBC80lX
0GxHLQf/VZFb5/hhlWjKBgiX7OSP7nN7GwE0XKLFwE72jy3XOGiK2/uaQf+3hT8Y
U8sKVeDym2bnDTKnofi7U8j4uPe21C//+7TD/tuNNocinwh5P6BezJfg5GgtXqlQ
2Wpmhry2bXbYy6/dADpmaweistft4oYEbMhPvAeJ7BBGXaP4W2+L1HQXtlBpIOyf
AuoqYutbakvBhBGsW/141LL/3w+me83bmO9jMj6Xy4GG9iFPHEZEXWgovIcw+ucw
1/WP2RPOGQksVtCGSji4CeYHVryY2K+C1ucrzDqkRZHxprFjtP9ak8Np0aX2zsmT
f3E/HiTeeWzippdjlE97MdSeint3Ww==
=sDdo
-----END PGP SIGNATURE-----

--Sig_/D7ZQ8GWlc5zloykB2GMgfOH--
