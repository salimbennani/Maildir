Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:50:13 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 57EDB580522;
	Fri, 21 Dec 2018 04:59:14 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 04:59:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A72zrNxJoCBo6UdsMntmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUKf7/rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kHKTA37W/ZhM93gq1ZrhKuqABww5XMYIyXL/d+Yr/RcMkGSWdbQspdSypMCZ68?=
 =?us-ascii?q?YYsVCOoBOP5Vr5D8p1sPsBC/CxOjBOXgyjRVgXL2xKw60+U7HQDIxgMgGd0OvW?=
 =?us-ascii?q?/RrNrrKagSUPq6zLXWwjXAdf9ZxTD96I3Rfx0nvPqCXqpwfNLPxUUzEw7JlEic?=
 =?us-ascii?q?pIL7Mz+Py+gAsHSX4/BhWO+tk2IrtRx9riS1ysotl4XFnIEYxk7e+Slkw4s4K9?=
 =?us-ascii?q?u1Q1Nhb9G+CptfrSSaOpN2Qsw8R2Fovz43yqMJuZGlZigG0pcnyADFa/yBbYeI?=
 =?us-ascii?q?5gjvVOGLITd3nH5lebS/iAiu8UW41OHwSs253ExXoidLjNXArG0B2h/P5sSdS/?=
 =?us-ascii?q?Zw/F+t2TOV2ADS7uFEL1o0la3eK5M5xr4wl5wTsVnMHyPvm0X5krWWdkM69eis?=
 =?us-ascii?q?8ujnZbvnppmCOI9ukQz+LKsuldKlAegiMQgBQXKb+eKi273n50H5R69KjvIunq?=
 =?us-ascii?q?nDrJ/aPdgbprK+AwJN1oYj6hW/ACm83NUXgHkKN1ZFeBOBj4j0NFDCOvH4DfGj?=
 =?us-ascii?q?g1uylDdn3ezJPrrkAp/VNHjMjK/hfaph605b0AczzcpQ55NICr4bJ/L/QE/xtM?=
 =?us-ascii?q?HCAR8/PAy52OLnCNR71oMDVmODGK6ZMKXOsVCW4uIjOfWDZIgQuDzlMfgq++bu?=
 =?us-ascii?q?jWMlmV8aZaSmx4AXaHC/HvRlOUmZe2DjgtUaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ5ingKad0yejAp1WemdGB0iPEXjycYWIQfMMaCOILc9nnTwJ?=
 =?us-ascii?q?TryhS44n1RGzuw720btnLuzI+iIGsZLvzsR65+rWlRsq7zx7E9yd032RT2Fzhm?=
 =?us-ascii?q?4HWiU53L5hrkBnyleMy654g+dGGtxV4P9JVgQ6NZvYz+FhD9DyWwTBfsqGSVq8?=
 =?us-ascii?q?Q9WmBy0xQcw1w9MUf0l9HNCihAjZ3yW2G78Vi6CLBJss/63BxXfxOdhyx2zG1K?=
 =?us-ascii?q?Y7iVkmWdVANWu9i6579gjTAZPJkkqDm6arc6QcwDDC9GOZwWWSu0FYVRZ6Ub/Z?=
 =?us-ascii?q?UnAHekvWsdP561veT7+vDLQnNRdByc6CK6dQdt3ll1JGRO3nONTfZWKxlHy9BR?=
 =?us-ascii?q?KJxrOKcYrrdH8R3CTbCEgYjQ8T+WyKOhQ5Bieku2jeFiBhFUrzY0Pw9ulzsGm0?=
 =?us-ascii?q?TksqwACFcUJg16C59QUIhfOBUfwT2LEEuCA/qzhvGFa93tTWC8ePpgZ7faVcZ8?=
 =?us-ascii?q?8970lD1W7DqwN9OZmgJbh4hlECawR3o1/u1xJvB4RAjMgmtm8lwBBzKKKYylxB?=
 =?us-ascii?q?cTyY0Iv0Or3WLGny4R+uZ7TX2lHYzNaZ5KMP5O4kpFXkuQGjDlAi/Gl/09lJz3?=
 =?us-ascii?q?uc4Y3HDBATUZ3tSEk37QV1p7bAbik7+YzUz3xsPbCovTDY39ImGfUqygynf9dZ?=
 =?us-ascii?q?K66EEA7yE8sHB8mhMuAqml6pbg4aM+BW7qI7I8Smd/6e0q6xIOlghC6mjXhA4I?=
 =?us-ascii?q?1l0kOM9jBwS+7S05Ye3vGY2BCKVzP9jFenr8D2lppIZTAUHmqj1yfkAJRdabF1?=
 =?us-ascii?q?fYYOEW2uOdG4xs1ih57xXH5V7FyjCEkc2M+qehqSaEbx3RZK2kQUonynmC24wC?=
 =?us-ascii?q?Jykzwyqqqf3SrOw/ntdRYdO25LQnVigknoIYSuk98aW02oZRAzlBS5/Ub627Rb?=
 =?us-ascii?q?pKNnImjTW0hIeDL6L2NjUqu2rbeCZ89P6JU1sSRYSui8YFaaSqLjrBseyS/sA2?=
 =?us-ascii?q?xexDUjfTGwppr5hwB6iH6aLHtrr3rWY8BwyQ3f5NzBX/FR2DUGSTJ8iTnWAFi8?=
 =?us-ascii?q?Itao8c+Vl5fFruCxSWahWodPfinsyIOKrDG76nFyAR2jg/CzncXqEQ070S/4zd?=
 =?us-ascii?q?ZmTyvJowjnYon3yau6K/locVdyBF/z8Md6HoB+ko0thJAfw3Qah5OV/WYZnmf3?=
 =?us-ascii?q?K9lUxaX+bH8VTz4R39HV+BTl2FFkLn+R24L5UXCdztFgZtagZGMWxzk979tLCK?=
 =?us-ascii?q?qP6LxEnC11oke3rA7LYPh9mCsdxuUq6HIAn+4Jvw8txD2HAr8OBUlYITDslxOQ?=
 =?us-ascii?q?4t+ltqpXY2KvcaWq2Ep6gNCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKhzBoOWfjsn0+0eI7kQZi3ZKnvIiENmVt+ri2?=
 =?us-ascii?q?AgVDOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLfHA+Y9Udmtm/PHIqtN32NP3kZytNiRBaGKUxbgQAUWig6n5EjGgCrwszh?=
 =?us-ascii?q?bFl25jQL6lHkrRtMz/piNwPjXWfHuAeodjA0RYCfLBVI7wFC5ETVMc2E4uJwBS?=
 =?us-ascii?q?FY+ZKhoxKXKmyGfARFFmUJWk2CB1D+Mbii/9jA8+6EBuWgK/vCe6mBqetbV/2Q?=
 =?us-ascii?q?35KgzpNm/yqQNsWIJnRtFeA71VFZXX9nG8XVgTEPSy0MmiLJbs6bogq8+yJtos?=
 =?us-ascii?q?C+9vTrRBzg5Y+VB7RONtVv/gi8gb2fOO6ImCZ5NTFY24sQxX/JzbgTxkIdhzty?=
 =?us-ascii?q?eDmtD7sAszXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO2G8O0nBBEaONbSGIyXEwsD3YaymT71Qg/5ZtxmxuTadDk/iMS6P?=
 =?us-ascii?q?lzjvVxCzL+5MiDuXMwBZuIG4IV5RDj23U8nvQgG7PZp7lzA/xKZyin6cZkAGNj?=
 =?us-ascii?q?0pakJM5qKZ6ywQ1ux+Gipe53xqBeyJlyeQ8+TbbJ0RtK04UWxPi+tG7SFimPNu?=
 =?us-ascii?q?5yZeSaktlQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AABc4hxch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeYEoIhl0uBdhIYEwGHLyI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpIwy?=
 =?us-ascii?q?COiKCbwMDAQIkUgYJAQFQA1QGCgQFBYMdggEBBaZ+M4o0h36EQYFXP4ERgmSLD?=
 =?us-ascii?q?gKJS4F4hRyQZgcCgimEKYsZFpFfmhyBTAGCB3CDPIInF4t3gjMyAQExgQUBAY4?=
 =?us-ascii?q?PAQE?=
X-IPAS-Result: =?us-ascii?q?A0A4AABc4hxch0O0hNFjHQEBBQEHBQGBUwYBCwGDayeYEoI?=
 =?us-ascii?q?hl0uBdhIYEwGHLyI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCOiKCbwMDAQIkU?=
 =?us-ascii?q?gYJAQFQA1QGCgQFBYMdggEBBaZ+M4o0h36EQYFXP4ERgmSLDgKJS4F4hRyQZgc?=
 =?us-ascii?q?CgimEKYsZFpFfmhyBTAGCB3CDPIInF4t3gjMyAQExgQUBAY4PAQE?=
X-IronPort-AV: E=Sophos;i="5.56,381,1539673200"; 
   d="scan'208";a="56110411"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 04:59:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390463AbeLUM7K (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 07:59:10 -0500
Received: from mailgw01.mediatek.com ([210.61.82.183]:52269 "EHLO
        mailgw01.mediatek.com" rhost-flags-OK-FAIL-OK-FAIL) by vger.kernel.org
        with ESMTP id S2388308AbeLUM7J (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 07:59:09 -0500
X-UUID: 31acee4af7d94e7fbd718370a0339b36-20181221
X-UUID: 31acee4af7d94e7fbd718370a0339b36-20181221
Received: from mtkcas08.mediatek.inc [(172.21.101.126)] by mailgw01.mediatek.com
        (envelope-from <qii.wang@mediatek.com>)
        (mhqrelay.mediatek.com ESMTP with TLS)
        with ESMTP id 715243887; Fri, 21 Dec 2018 20:59:04 +0800
Received: from mtkcas09.mediatek.inc (172.21.101.178) by
 mtkmbs08n2.mediatek.inc (172.21.101.56) with Microsoft SMTP Server (TLS) id
 15.0.1395.4; Fri, 21 Dec 2018 20:59:02 +0800
Received: from localhost.localdomain (10.17.3.153) by mtkcas09.mediatek.inc
 (172.21.101.73) with Microsoft SMTP Server id 15.0.1395.4 via Frontend
 Transport; Fri, 21 Dec 2018 20:59:02 +0800
From: qii wang <qii.wang@mediatek.com>
To: <wsa@the-dreams.de>
CC: <linux-i2c@vger.kernel.org>, <devicetree@vger.kernel.org>,
        <linux-arm-kernel@lists.infradead.org>,
        <linux-kernel@vger.kernel.org>,
        <linux-mediatek@lists.infradead.org>,
        <srv_heupstream@mediatek.com>, <leilk.liu@mediatek.com>,
        <qii.wang@mediatek.com>, <ryder.lee@mediatek.com>
Subject: [PATCH 4/6] i2c: mediatek: Add offsets array for new i2c registers
Date: Fri, 21 Dec 2018 20:58:29 +0800
Message-ID: <1545397111-24183-5-git-send-email-qii.wang@mediatek.com>
X-Mailer: git-send-email 1.7.9.5
In-Reply-To: <1545397111-24183-1-git-send-email-qii.wang@mediatek.com>
References: <1545397111-24183-1-git-send-email-qii.wang@mediatek.com>
MIME-Version: 1.0
Content-Type: text/plain
X-TM-SNTS-SMTP: 47BB2D38155CBC166CEC689C3C5BDB8E3193E683A84AC264B0E27FC7FF6F7CF82000:8
X-MTK: N
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

New i2c registers would have different offsets, so we use different
offsets array to distinguish different i2c registers version.

Signed-off-by: qii wang <qii.wang@mediatek.com>
---
 drivers/i2c/busses/i2c-mt65xx.c |  163 +++++++++++++++++++++++++--------------
 1 file changed, 104 insertions(+), 59 deletions(-)

diff --git a/drivers/i2c/busses/i2c-mt65xx.c b/drivers/i2c/busses/i2c-mt65xx.c
index 660de1e..428ac99 100644
--- a/drivers/i2c/busses/i2c-mt65xx.c
+++ b/drivers/i2c/busses/i2c-mt65xx.c
@@ -106,34 +106,62 @@ enum mtk_trans_op {
 };
 
 enum I2C_REGS_OFFSET {
-	OFFSET_DATA_PORT = 0x0,
-	OFFSET_SLAVE_ADDR = 0x04,
-	OFFSET_INTR_MASK = 0x08,
-	OFFSET_INTR_STAT = 0x0c,
-	OFFSET_CONTROL = 0x10,
-	OFFSET_TRANSFER_LEN = 0x14,
-	OFFSET_TRANSAC_LEN = 0x18,
-	OFFSET_DELAY_LEN = 0x1c,
-	OFFSET_TIMING = 0x20,
-	OFFSET_START = 0x24,
-	OFFSET_EXT_CONF = 0x28,
-	OFFSET_FIFO_STAT = 0x30,
-	OFFSET_FIFO_THRESH = 0x34,
-	OFFSET_FIFO_ADDR_CLR = 0x38,
-	OFFSET_IO_CONFIG = 0x40,
-	OFFSET_RSV_DEBUG = 0x44,
-	OFFSET_HS = 0x48,
-	OFFSET_SOFTRESET = 0x50,
-	OFFSET_DCM_EN = 0x54,
-	OFFSET_PATH_DIR = 0x60,
-	OFFSET_DEBUGSTAT = 0x64,
-	OFFSET_DEBUGCTRL = 0x68,
-	OFFSET_TRANSFER_LEN_AUX = 0x6c,
-	OFFSET_CLOCK_DIV = 0x70,
+	OFFSET_DATA_PORT,
+	OFFSET_SLAVE_ADDR,
+	OFFSET_INTR_MASK,
+	OFFSET_INTR_STAT,
+	OFFSET_CONTROL,
+	OFFSET_TRANSFER_LEN,
+	OFFSET_TRANSAC_LEN,
+	OFFSET_DELAY_LEN,
+	OFFSET_TIMING,
+	OFFSET_START,
+	OFFSET_EXT_CONF,
+	OFFSET_FIFO_STAT,
+	OFFSET_FIFO_THRESH,
+	OFFSET_FIFO_ADDR_CLR,
+	OFFSET_IO_CONFIG,
+	OFFSET_RSV_DEBUG,
+	OFFSET_HS,
+	OFFSET_SOFTRESET,
+	OFFSET_DCM_EN,
+	OFFSET_PATH_DIR,
+	OFFSET_DEBUGSTAT,
+	OFFSET_DEBUGCTRL,
+	OFFSET_TRANSFER_LEN_AUX,
+	OFFSET_CLOCK_DIV,
+};
+
+static const u16 mt_i2c_regs_v1[] = {
+	[OFFSET_DATA_PORT] = 0x0,
+	[OFFSET_SLAVE_ADDR] = 0x4,
+	[OFFSET_INTR_MASK] = 0x8,
+	[OFFSET_INTR_STAT] = 0xc,
+	[OFFSET_CONTROL] = 0x10,
+	[OFFSET_TRANSFER_LEN] = 0x14,
+	[OFFSET_TRANSAC_LEN] = 0x18,
+	[OFFSET_DELAY_LEN] = 0x1c,
+	[OFFSET_TIMING] = 0x20,
+	[OFFSET_START] = 0x24,
+	[OFFSET_EXT_CONF] = 0x28,
+	[OFFSET_FIFO_STAT] = 0x30,
+	[OFFSET_FIFO_THRESH] = 0x34,
+	[OFFSET_FIFO_ADDR_CLR] = 0x38,
+	[OFFSET_IO_CONFIG] = 0x40,
+	[OFFSET_RSV_DEBUG] = 0x44,
+	[OFFSET_HS] = 0x48,
+	[OFFSET_SOFTRESET] = 0x50,
+	[OFFSET_DCM_EN] = 0x54,
+	[OFFSET_PATH_DIR] = 0x60,
+	[OFFSET_DEBUGSTAT] = 0x64,
+	[OFFSET_DEBUGCTRL] = 0x68,
+	[OFFSET_TRANSFER_LEN_AUX] = 0x6c,
+	[OFFSET_CLOCK_DIV] = 0x70,
 };
 
 struct mtk_i2c_compatible {
 	const struct i2c_adapter_quirks *quirks;
+	const u16 *regs;
 	unsigned char pmic_i2c: 1;
 	unsigned char dcm: 1;
 	unsigned char auto_restart: 1;
@@ -181,6 +209,7 @@ struct mtk_i2c {
 };
 
 static const struct mtk_i2c_compatible mt2712_compat = {
+	.regs = mt_i2c_regs_v1,
 	.pmic_i2c = 0,
 	.dcm = 1,
 	.auto_restart = 1,
@@ -191,6 +220,7 @@ struct mtk_i2c {
 
 static const struct mtk_i2c_compatible mt6577_compat = {
 	.quirks = &mt6577_i2c_quirks,
+	.regs = mt_i2c_regs_v1,
 	.pmic_i2c = 0,
 	.dcm = 1,
 	.auto_restart = 0,
@@ -201,6 +231,7 @@ struct mtk_i2c {
 
 static const struct mtk_i2c_compatible mt6589_compat = {
 	.quirks = &mt6577_i2c_quirks,
+	.regs = mt_i2c_regs_v1,
 	.pmic_i2c = 1,
 	.dcm = 0,
 	.auto_restart = 0,
@@ -211,6 +242,7 @@ struct mtk_i2c {
 
 static const struct mtk_i2c_compatible mt7622_compat = {
 	.quirks = &mt7622_i2c_quirks,
+	.regs = mt_i2c_regs_v1,
 	.pmic_i2c = 0,
 	.dcm = 1,
 	.auto_restart = 1,
@@ -220,6 +252,7 @@ struct mtk_i2c {
 };
 
 static const struct mtk_i2c_compatible mt8173_compat = {
+	.regs = mt_i2c_regs_v1,
 	.pmic_i2c = 0,
 	.dcm = 1,
 	.auto_restart = 1,
@@ -238,6 +271,17 @@ struct mtk_i2c {
 };
 MODULE_DEVICE_TABLE(of, mtk_i2c_of_match);
 
+static u16 mtk_i2c_readw(struct mtk_i2c *i2c, enum I2C_REGS_OFFSET reg)
+{
+	return readw(i2c->base + i2c->dev_comp->regs[reg]);
+}
+
+static void mtk_i2c_writew(struct mtk_i2c *i2c, u16 val,
+			   enum I2C_REGS_OFFSET reg)
+{
+	writew(val, i2c->base + i2c->dev_comp->regs[reg]);
+}
+
 static int mtk_i2c_clock_enable(struct mtk_i2c *i2c)
 {
 	int ret;
@@ -278,31 +322,31 @@ static void mtk_i2c_init_hw(struct mtk_i2c *i2c)
 {
 	u16 control_reg;
 
-	writew(I2C_SOFT_RST, i2c->base + OFFSET_SOFTRESET);
+	mtk_i2c_writew(i2c, I2C_SOFT_RST, OFFSET_SOFTRESET);
 
 	/* Set ioconfig */
 	if (i2c->use_push_pull)
-		writew(I2C_IO_CONFIG_PUSH_PULL, i2c->base + OFFSET_IO_CONFIG);
+		mtk_i2c_writew(i2c, I2C_IO_CONFIG_PUSH_PULL, OFFSET_IO_CONFIG);
 	else
-		writew(I2C_IO_CONFIG_OPEN_DRAIN, i2c->base + OFFSET_IO_CONFIG);
+		mtk_i2c_writew(i2c, I2C_IO_CONFIG_OPEN_DRAIN, OFFSET_IO_CONFIG);
 
 	if (i2c->dev_comp->dcm)
-		writew(I2C_DCM_DISABLE, i2c->base + OFFSET_DCM_EN);
+		mtk_i2c_writew(i2c, I2C_DCM_DISABLE, OFFSET_DCM_EN);
 
 	if (i2c->dev_comp->timing_adjust)
-		writew(I2C_DEFAULT_CLK_DIV - 1, i2c->base + OFFSET_CLOCK_DIV);
+		mtk_i2c_writew(i2c, I2C_DEFAULT_CLK_DIV - 1, OFFSET_CLOCK_DIV);
 
-	writew(i2c->timing_reg, i2c->base + OFFSET_TIMING);
-	writew(i2c->high_speed_reg, i2c->base + OFFSET_HS);
+	mtk_i2c_writew(i2c, i2c->timing_reg, OFFSET_TIMING);
+	mtk_i2c_writew(i2c, i2c->high_speed_reg, OFFSET_HS);
 
 	/* If use i2c pin from PMIC mt6397 side, need set PATH_DIR first */
 	if (i2c->have_pmic)
-		writew(I2C_CONTROL_WRAPPER, i2c->base + OFFSET_PATH_DIR);
+		mtk_i2c_writew(i2c, I2C_CONTROL_WRAPPER, OFFSET_PATH_DIR);
 
 	control_reg = I2C_CONTROL_ACKERR_DET_EN |
 		      I2C_CONTROL_CLK_EXT_EN | I2C_CONTROL_DMA_EN;
-	writew(control_reg, i2c->base + OFFSET_CONTROL);
-	writew(I2C_DELAY_LEN, i2c->base + OFFSET_DELAY_LEN);
+	mtk_i2c_writew(i2c, control_reg, OFFSET_CONTROL);
+	mtk_i2c_writew(i2c, I2C_DELAY_LEN, OFFSET_DELAY_LEN);
 
 	writel(I2C_DMA_HARD_RST, i2c->pdmabase + OFFSET_RST);
 	udelay(50);
@@ -454,7 +498,7 @@ static int mtk_i2c_do_transfer(struct mtk_i2c *i2c, struct i2c_msg *msgs,
 
 	reinit_completion(&i2c->msg_complete);
 
-	control_reg = readw(i2c->base + OFFSET_CONTROL) &
+	control_reg = mtk_i2c_readw(i2c, OFFSET_CONTROL) &
 			~(I2C_CONTROL_DIR_CHANGE | I2C_CONTROL_RS);
 	if ((i2c->speed_hz > MAX_FS_MODE_SPEED) || (left_num >= 1))
 		control_reg |= I2C_CONTROL_RS;
@@ -462,40 +506,41 @@ static int mtk_i2c_do_transfer(struct mtk_i2c *i2c, struct i2c_msg *msgs,
 	if (i2c->op == I2C_MASTER_WRRD)
 		control_reg |= I2C_CONTROL_DIR_CHANGE | I2C_CONTROL_RS;
 
-	writew(control_reg, i2c->base + OFFSET_CONTROL);
+	mtk_i2c_writew(i2c, control_reg, OFFSET_CONTROL);
 
 	/* set start condition */
 	if (i2c->speed_hz <= I2C_DEFAULT_SPEED)
-		writew(I2C_ST_START_CON, i2c->base + OFFSET_EXT_CONF);
+		mtk_i2c_writew(i2c, I2C_ST_START_CON, OFFSET_EXT_CONF);
 	else
-		writew(I2C_FS_START_CON, i2c->base + OFFSET_EXT_CONF);
+		mtk_i2c_writew(i2c, I2C_FS_START_CON, OFFSET_EXT_CONF);
 
 	addr_reg = i2c_8bit_addr_from_msg(msgs);
-	writew(addr_reg, i2c->base + OFFSET_SLAVE_ADDR);
+	mtk_i2c_writew(i2c, addr_reg, OFFSET_SLAVE_ADDR);
 
 	/* Clear interrupt status */
-	writew(restart_flag | I2C_HS_NACKERR | I2C_ACKERR |
-	       I2C_TRANSAC_COMP, i2c->base + OFFSET_INTR_STAT);
-	writew(I2C_FIFO_ADDR_CLR, i2c->base + OFFSET_FIFO_ADDR_CLR);
+	mtk_i2c_writew(i2c, restart_flag | I2C_HS_NACKERR | I2C_ACKERR |
+	       I2C_TRANSAC_COMP, OFFSET_INTR_STAT);
+
+	mtk_i2c_writew(i2c, I2C_FIFO_ADDR_CLR, OFFSET_FIFO_ADDR_CLR);
 
 	/* Enable interrupt */
-	writew(restart_flag | I2C_HS_NACKERR | I2C_ACKERR |
-	       I2C_TRANSAC_COMP, i2c->base + OFFSET_INTR_MASK);
+	mtk_i2c_writew(i2c, restart_flag | I2C_HS_NACKERR | I2C_ACKERR |
+	       I2C_TRANSAC_COMP, OFFSET_INTR_MASK);
 
 	/* Set transfer and transaction len */
 	if (i2c->op == I2C_MASTER_WRRD) {
 		if (i2c->dev_comp->aux_len_reg) {
-			writew(msgs->len, i2c->base + OFFSET_TRANSFER_LEN);
-			writew((msgs + 1)->len, i2c->base +
-			       OFFSET_TRANSFER_LEN_AUX);
+			mtk_i2c_writew(i2c, msgs->len, OFFSET_TRANSFER_LEN);
+			mtk_i2c_writew(i2c, (msgs + 1)->len,
+					    OFFSET_TRANSFER_LEN_AUX);
 		} else {
-			writew(msgs->len | ((msgs + 1)->len) << 8,
-			       i2c->base + OFFSET_TRANSFER_LEN);
+			mtk_i2c_writew(i2c, msgs->len | ((msgs + 1)->len) << 8,
+					    OFFSET_TRANSFER_LEN);
 		}
-		writew(I2C_WRRD_TRANAC_VALUE, i2c->base + OFFSET_TRANSAC_LEN);
+		mtk_i2c_writew(i2c, I2C_WRRD_TRANAC_VALUE, OFFSET_TRANSAC_LEN);
 	} else {
-		writew(msgs->len, i2c->base + OFFSET_TRANSFER_LEN);
-		writew(num, i2c->base + OFFSET_TRANSAC_LEN);
+		mtk_i2c_writew(i2c, msgs->len, OFFSET_TRANSFER_LEN);
+		mtk_i2c_writew(i2c, num, OFFSET_TRANSAC_LEN);
 	}
 
 	/* Prepare buffer data to start transfer */
@@ -607,14 +652,14 @@ static int mtk_i2c_do_transfer(struct mtk_i2c *i2c, struct i2c_msg *msgs,
 		if (left_num >= 1)
 			start_reg |= I2C_RS_MUL_CNFG;
 	}
-	writew(start_reg, i2c->base + OFFSET_START);
+	mtk_i2c_writew(i2c, start_reg, OFFSET_START);
 
 	ret = wait_for_completion_timeout(&i2c->msg_complete,
 					  i2c->adap.timeout);
 
 	/* Clear interrupt mask */
-	writew(~(restart_flag | I2C_HS_NACKERR | I2C_ACKERR |
-	       I2C_TRANSAC_COMP), i2c->base + OFFSET_INTR_MASK);
+	mtk_i2c_writew(i2c, ~(restart_flag | I2C_HS_NACKERR | I2C_ACKERR |
+	       I2C_TRANSAC_COMP), OFFSET_INTR_MASK);
 
 	if (i2c->op == I2C_MASTER_WR) {
 		dma_unmap_single(i2c->dev, wpaddr,
@@ -724,8 +769,8 @@ static irqreturn_t mtk_i2c_irq(int irqno, void *dev_id)
 	if (i2c->auto_restart)
 		restart_flag = I2C_RS_TRANSFER;
 
-	intr_stat = readw(i2c->base + OFFSET_INTR_STAT);
-	writew(intr_stat, i2c->base + OFFSET_INTR_STAT);
+	intr_stat = mtk_i2c_readw(i2c, OFFSET_INTR_STAT);
+	mtk_i2c_writew(i2c, intr_stat, OFFSET_INTR_STAT);
 
 	/*
 	 * when occurs ack error, i2c controller generate two interrupts
@@ -737,8 +782,8 @@ static irqreturn_t mtk_i2c_irq(int irqno, void *dev_id)
 	if (i2c->ignore_restart_irq && (i2c->irq_stat & restart_flag)) {
 		i2c->ignore_restart_irq = false;
 		i2c->irq_stat = 0;
-		writew(I2C_RS_MUL_CNFG | I2C_RS_MUL_TRIG | I2C_TRANSAC_START,
-		       i2c->base + OFFSET_START);
+		mtk_i2c_writew(i2c, I2C_RS_MUL_CNFG | I2C_RS_MUL_TRIG |
+				    I2C_TRANSAC_START, OFFSET_START);
 	} else {
 		if (i2c->irq_stat & (I2C_TRANSAC_COMP | restart_flag))
 			complete(&i2c->msg_complete);
-- 
1.7.9.5

