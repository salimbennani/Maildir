Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:53:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C7CF4580522;
	Fri, 21 Dec 2018 09:12:48 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 21 Dec 2018 09:12:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApBfjAR2W8V+lkCfbsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segVI/3xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelWoJL9p0MMoBalGQmsHfnixiNUinPq36A31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?jZrNPoO6YSTOu7yrTIzSnEb/NT2Df98pPIchMgofqRWr9wddfRyVUoFw7ejVWf?=
 =?us-ascii?q?t5blPzWL2eQJqWSb6PBgVe22hmMhtgp/oSCvy98yhoXVgo8Z0E3I+CtnzIovON?=
 =?us-ascii?q?G1S1J3bcSlHZZSry2WKZd6T8c4T2xruCs20KAKtYC4cSQQx5kqxxjSYOGdfYeS?=
 =?us-ascii?q?+BLsTuORLC94hH17fLK/gA6/8VavyuLiTMm4ylVKoTRfktnKqH8N0wbf6s+dSv?=
 =?us-ascii?q?ty5kuh2DCP2B7P6uxcP0w4ia7WJ4Q8zrM+iJYfq1nPEyzqlEnsjaKbdF0o+u2y?=
 =?us-ascii?q?5OTmZrXmqIWcN4hxigzmNqQum8q/Afk3MwQXXGiU5/681Lv98k39WblKifM3kq?=
 =?us-ascii?q?/Hv5DAPskbuKG5DBFP0oo56BawES2m0NIGknkDNl5FfwiHj4fxN1HUPP/4Feu/?=
 =?us-ascii?q?g0irkDpzw/DGP77hDYvXInnMjbfsZrJ9609ayAouwtFT/ZNUCrcdIP3tXk/9rs?=
 =?us-ascii?q?DXDhg8Mwas2eboFM191p8CWWKIGqKZMLndsV6U5u01JOmAfo8VuCvnJPgj6P7j?=
 =?us-ascii?q?lns5mV4bfam00pobcnG4HvJ6I0qHZXrgmMsOEWAPvgAmVuzllEWCUSJPZ3a1R6?=
 =?us-ascii?q?8z/Co7CIKhDYfAXIytmqaO3CWgE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTpcr1Quyuw/i17pnMu3U9zUbtZ350th5/enTlRAo+jxyAMSQyGWNT2Bynm?=
 =?us-ascii?q?MVSD46xqF/oUphylid1ah0meBXFdtW5/lRSAc1KYbcz/BmC9D1Qg/OY82GSEi4?=
 =?us-ascii?q?Tdm8ATE+VNQxw8QQbEZ7HNmiihPD3y+uA7IOk7yLBZo08r/T3nTrJsZ9zWrG27?=
 =?us-ascii?q?clj1U8XsRPMmimjLZl9wfPH47Jj1mZl6GyeKsBxiHN6nmMwXCOvE5CVg5wSrvK?=
 =?us-ascii?q?XXYEa0vSrNT54F7CTrC0BbQmNAtB1dCNKq9QZtL1ilVGQe/pOM7CbGKph2ewGR?=
 =?us-ascii?q?GIy6uQbIrrfmUd2zndCEgEkgwJ4XaKLw8+Bj2lo2LfCjxuGkniY0ft8el4tXO6?=
 =?us-ascii?q?QVU4zwCMb019ybW1/gQZiuCbS/MWxrgEojsuqy1oHFah2NLbE8CPpw5/c6RTf9?=
 =?us-ascii?q?w84E1L2nnEtwNgJJOgKaNihlkAcwlsu0Pu1hN3CphPkMQwrXMqyhZyJryc0F9b?=
 =?us-ascii?q?azyY2pXwMKXNKmbu5BCvd7LW2lbG3deW56cD8ug3p0/ivQGpDEUi9Xpn3sJR03?=
 =?us-ascii?q?ud4JXKEQUTXYjwUkYx6xh1ubXabjMh6IPT0H1mKbO0vSPa29I1GOslzQ6tf81e?=
 =?us-ascii?q?MKyYDgDyCdAVB8+0JOwshVepdBMEMPlO+6EuO8OpauWJ2LSsPOZmhz+miWVH4I?=
 =?us-ascii?q?Zg0kOD7SZ8S+jI34obzPGcxAeISzD8jFK5uMDthY9EfS0SHna4ySX8BI9RZ7d+?=
 =?us-ascii?q?fIYRBWe1Ps23wM5zh5rsW35e6V6iCEkK2M6veRqOcVP92Rdc2lgQoXyigSG41S?=
 =?us-ascii?q?B7kyk1rqqD2yzD2+biewAdOm5IR2liik3gIZOugNAZX0iobg4pmwWj5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iLjBW?=
 =?us-ascii?q?Rewyo3dzOrupX/hBF6jGOdLHBurHvWY81wxBHf5MDCSv5VxDYJWC54iTzPDFim?=
 =?us-ascii?q?I9ap5cmUl4vEsu2mVGKuTJxTfTPrzYOdriS742JqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hJQR2XgZnJqZ53QGnnno?=
 =?us-ascii?q?MdVHx63+dmECSiARw97a+wXl3ExjLnSUx4P2THmdw81hZ8WkbWMSwC4y88dKCK?=
 =?us-ascii?q?KM5rxegSR1uka4rR7WYfVlgjcdzv4u5GQbgu4Tvgot0z6dAqsTHURDOSzslhKI?=
 =?us-ascii?q?782xralNZWavd6Sw21R6ndy7EL6CpQRcUm7jepg+BS9w8tl/MFXU3XLo8I7kf9?=
 =?us-ascii?q?3Qbc8Juh2QjhfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jztj7xRnsOI0IC0BJlhBi8HXJj1TfKrDTISs+7oNx2VHT04q3?=
 =?us-ascii?q?ebH6ffHACF5EdnqXLPD46kN3WNKHYFytViQQGXJFZDjwAMQDU6gpk5Gxiqxczm?=
 =?us-ascii?q?bUd5/y0R6UT+qhdW0eJoMB//UmjEqQesazc0ToWfLRVM4gFD4UfVLdKR7uZpEy?=
 =?us-ascii?q?5E+Z2hqRSHKnaHaARQEWEJRkuECkjjPraw5NnA8OuYBuukI/vNe7WOruNeWOmS?=
 =?us-ascii?q?xZKyyYtr5DKMNsSJPnl/APw3wEtDXXZlG8vHnzUDUTAYlyXIb8SDvhez5jV3rt?=
 =?us-ascii?q?yj8PTsQA/g/5aPBKBIMdpx+xG6m6ODN++LiSZ9KDZY0I4MxHDSxLge2l4Slz9h?=
 =?us-ascii?q?dz23Hbscsi7NSbramrVLAB4DdyNzKMxI4rog3glMPM7XkM/62qRkgf41FVhFU0?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jznoWAqpMeFJjSGbOgRRuYC9chl3D2jjQ8nrahm6MN9xkD03zqc4hnLMNW4ALz?=
 =?us-ascii?q?d8d1lBoaGX7SNd0b1DHDlo9HYtB+iJgCaU8vfVLt5CuOFnRC51mvla7Wkkxr99?=
 =?us-ascii?q?6CBCTeZy3izIoYg9jUuhl7ymzDZ2GD5TtjFOhZiQvkQqbaHE6p5oWnve+h8Jq2?=
 =?us-ascii?q?KKBEJZ9JNeFtTztvUImZD0n6XpJWIHqoqM8A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAABAHh1ch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YFaghEng32UZgEBBoE1FIkQjjuBcxUYEwGEQIJwIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII6KQGCZgEBAQECAQECIAQZAQE3AQQBCQEBCgsHBgICJgICAx8SA?=
 =?us-ascii?q?QUBDg4GEwWDHYF1BQgFmk08iilwfDOCdgEBBYcrCIELihiBHBd4gQeBEYIUUC6?=
 =?us-ascii?q?FAYMIgleJKSATH4FKhR2QZQmKV4cSGIFghSCKX5oNDyGBJYIOfQg7MQaCNYIbD?=
 =?us-ascii?q?Bd/AQKHXIVgHzIBgQQBAY4uAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAABAHh1ch0O0hNFkHgEGBwaBUQkLAYFaghEng32UZgE?=
 =?us-ascii?q?BBoE1FIkQjjuBcxUYEwGEQIJwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII6K?=
 =?us-ascii?q?QGCZgEBAQECAQECIAQZAQE3AQQBCQEBCgsHBgICJgICAx8SAQUBDg4GEwWDHYF?=
 =?us-ascii?q?1BQgFmk08iilwfDOCdgEBBYcrCIELihiBHBd4gQeBEYIUUC6FAYMIgleJKSATH?=
 =?us-ascii?q?4FKhR2QZQmKV4cSGIFghSCKX5oNDyGBJYIOfQg7MQaCNYIbDBd/AQKHXIVgHzI?=
 =?us-ascii?q?BgQQBAY4uAQE?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="45008564"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 09:12:46 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390069AbeLURMi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 12:12:38 -0500
Received: from mail.kernel.org ([198.145.29.99]:35064 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S2390041AbeLURMi (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 12:12:38 -0500
Received: from mail-wm1-f45.google.com (mail-wm1-f45.google.com [209.85.128.45])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 84FEB21924
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 17:12:36 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545412356;
        bh=AC3N5cPmiWWCoi55jyxZG7SDG+N0rDbDxh2J62m/Kd4=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=j0ZOzJzUwQGJViXlXiGXzuLtogRDNIDIMf3u7tuc7oxXVJOLWwDevwoJzWOjy/xdM
         +TI7ZZr3ZIkIpEDRUI6ycSepBJdHrvB/I277GFpcIkaRLZQCOZvL34SPcfBGgXorCq
         wZTy/0xtBYw2wROx9hSzaQbzXbXR3cZHvJ9Wsi+w=
Received: by mail-wm1-f45.google.com with SMTP id f188so6400954wmf.5
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 09:12:36 -0800 (PST)
X-Gm-Message-State: AJcUukfxI4X9rF1CqmNjoN/b1+lo5hyx3Nz6MmI37Azlmg5SeFGc04BG
        Oe6cb1/QeXaOf/dgNV24PtIfbaEZmS87mbfBnsp+rQ==
X-Google-Smtp-Source: ALg8bN5xcqaM3jE5hJcUPjCFtOO3g6YR0MFVkz8Pn8U7+8VNRxUUknF1JZtAsfGq7SfDWSwZEu46tAxAcKayRH2OiRo=
X-Received: by 2002:a7b:c7c7:: with SMTP id z7mr3851149wmk.74.1545412354958;
 Fri, 21 Dec 2018 09:12:34 -0800 (PST)
MIME-Version: 1.0
References: <20181212000354.31955-1-rick.p.edgecombe@intel.com>
 <20181212000354.31955-2-rick.p.edgecombe@intel.com> <CALCETrVP577NvdeYj8bzpEfTXj3GZD3nFcJxnUq5n1daDBxU=g@mail.gmail.com>
 <CAKv+Gu_kunBqhUAQt6==SN-ei4Xc+z6=Z=pKXHHJYjk4Gdw73g@mail.gmail.com>
In-Reply-To: <CAKv+Gu_kunBqhUAQt6==SN-ei4Xc+z6=Z=pKXHHJYjk4Gdw73g@mail.gmail.com>
From: Andy Lutomirski <luto@kernel.org>
Date: Fri, 21 Dec 2018 09:12:23 -0800
X-Gmail-Original-Message-ID: <CALCETrWScgJpdnzNswJSKioQ93Oyw+Y_dJLoRxPX2Z=REVV1Ug@mail.gmail.com>
Message-ID: <CALCETrWScgJpdnzNswJSKioQ93Oyw+Y_dJLoRxPX2Z=REVV1Ug@mail.gmail.com>
Subject: Re: [PATCH v2 1/4] vmalloc: New flags for safe vfree on special perms
To: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: Andy Lutomirski <luto@kernel.org>,
        Rick Edgecombe <rick.p.edgecombe@intel.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Will Deacon <will.deacon@arm.com>,
        Linux-MM <linux-mm@kvack.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Kernel Hardening <kernel-hardening@lists.openwall.com>,
        "Naveen N . Rao" <naveen.n.rao@linux.vnet.ibm.com>,
        Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>,
        "David S. Miller" <davem@davemloft.net>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Ingo Molnar <mingo@redhat.com>,
        Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>,
        Jessica Yu <jeyu@kernel.org>, Nadav Amit <namit@vmware.com>,
        Network Development <netdev@vger.kernel.org>,
        Jann Horn <jannh@google.com>,
        Kristen Carlson Accardi <kristen@linux.intel.com>,
        Dave Hansen <dave.hansen@intel.com>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

> On Dec 21, 2018, at 9:39 AM, Ard Biesheuvel <ard.biesheuvel@linaro.org> w=
rote:
>
>> On Wed, 12 Dec 2018 at 03:20, Andy Lutomirski <luto@kernel.org> wrote:
>>
>> On Tue, Dec 11, 2018 at 4:12 PM Rick Edgecombe
>> <rick.p.edgecombe@intel.com> wrote:
>>>
>>> This adds two new flags VM_IMMEDIATE_UNMAP and VM_HAS_SPECIAL_PERMS, fo=
r
>>> enabling vfree operations to immediately clear executable TLB entries t=
o freed
>>> pages, and handle freeing memory with special permissions.
>>>
>>> In order to support vfree being called on memory that might be RO, the =
vfree
>>> deferred list node is moved to a kmalloc allocated struct, from where i=
t is
>>> today, reusing the allocation being freed.
>>>
>>> arch_vunmap is a new __weak function that implements the actual unmappi=
ng and
>>> resetting of the direct map permissions. It can be overridden by more e=
fficient
>>> architecture specific implementations.
>>>
>>> For the default implementation, it uses architecture agnostic methods w=
hich are
>>> equivalent to what most usages do before calling vfree. So now it is ju=
st
>>> centralized here.
>>>
>>> This implementation derives from two sketches from Dave Hansen and Andy
>>> Lutomirski.
>>>
>>> Suggested-by: Dave Hansen <dave.hansen@intel.com>
>>> Suggested-by: Andy Lutomirski <luto@kernel.org>
>>> Suggested-by: Will Deacon <will.deacon@arm.com>
>>> Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
>>> ---
>>> include/linux/vmalloc.h |  2 ++
>>> mm/vmalloc.c            | 73 +++++++++++++++++++++++++++++++++++++----
>>> 2 files changed, 69 insertions(+), 6 deletions(-)
>>>
>>> diff --git a/include/linux/vmalloc.h b/include/linux/vmalloc.h
>>> index 398e9c95cd61..872bcde17aca 100644
>>> --- a/include/linux/vmalloc.h
>>> +++ b/include/linux/vmalloc.h
>>> @@ -21,6 +21,8 @@ struct notifier_block;                /* in notifier.=
h */
>>> #define VM_UNINITIALIZED       0x00000020      /* vm_struct is not full=
y initialized */
>>> #define VM_NO_GUARD            0x00000040      /* don't add guard page =
*/
>>> #define VM_KASAN               0x00000080      /* has allocated kasan s=
hadow memory */
>>> +#define VM_IMMEDIATE_UNMAP     0x00000200      /* flush before releasi=
ng pages */
>>> +#define VM_HAS_SPECIAL_PERMS   0x00000400      /* may be freed with sp=
ecial perms */
>>> /* bits [20..32] reserved for arch specific ioremap internals */
>>>
>>> /*
>>> diff --git a/mm/vmalloc.c b/mm/vmalloc.c
>>> index 97d4b25d0373..02b284d2245a 100644
>>> --- a/mm/vmalloc.c
>>> +++ b/mm/vmalloc.c
>>> @@ -18,6 +18,7 @@
>>> #include <linux/interrupt.h>
>>> #include <linux/proc_fs.h>
>>> #include <linux/seq_file.h>
>>> +#include <linux/set_memory.h>
>>> #include <linux/debugobjects.h>
>>> #include <linux/kallsyms.h>
>>> #include <linux/list.h>
>>> @@ -38,6 +39,11 @@
>>>
>>> #include "internal.h"
>>>
>>> +struct vfree_work {
>>> +       struct llist_node node;
>>> +       void *addr;
>>> +};
>>> +
>>> struct vfree_deferred {
>>>        struct llist_head list;
>>>        struct work_struct wq;
>>> @@ -50,9 +56,13 @@ static void free_work(struct work_struct *w)
>>> {
>>>        struct vfree_deferred *p =3D container_of(w, struct vfree_deferr=
ed, wq);
>>>        struct llist_node *t, *llnode;
>>> +       struct vfree_work *cur;
>>>
>>> -       llist_for_each_safe(llnode, t, llist_del_all(&p->list))
>>> -               __vunmap((void *)llnode, 1);
>>> +       llist_for_each_safe(llnode, t, llist_del_all(&p->list)) {
>>> +               cur =3D container_of(llnode, struct vfree_work, node);
>>> +               __vunmap(cur->addr, 1);
>>> +               kfree(cur);
>>> +       }
>>> }
>>>
>>> /*** Page table manipulation functions ***/
>>> @@ -1494,6 +1504,48 @@ struct vm_struct *remove_vm_area(const void *add=
r)
>>>        return NULL;
>>> }
>>>
>>> +/*
>>> + * This function handles unmapping and resetting the direct map as eff=
iciently
>>> + * as it can with cross arch functions. The three categories of archit=
ectures
>>> + * are:
>>> + *   1. Architectures with no set_memory implementations and no direct=
 map
>>> + *      permissions.
>>> + *   2. Architectures with set_memory implementations but no direct ma=
p
>>> + *      permissions
>>> + *   3. Architectures with set_memory implementations and direct map p=
ermissions
>>> + */
>>> +void __weak arch_vunmap(struct vm_struct *area, int deallocate_pages)
>>
>> My general preference is to avoid __weak functions -- they don't
>> optimize well.  Instead, I prefer either:
>>
>> #ifndef arch_vunmap
>> void arch_vunmap(...);
>> #endif
>>
>> or
>>
>> #ifdef CONFIG_HAVE_ARCH_VUNMAP
>> ...
>> #endif
>>
>>
>>> +{
>>> +       unsigned long addr =3D (unsigned long)area->addr;
>>> +       int immediate =3D area->flags & VM_IMMEDIATE_UNMAP;
>>> +       int special =3D area->flags & VM_HAS_SPECIAL_PERMS;
>>> +
>>> +       /*
>>> +        * In case of 2 and 3, use this general way of resetting the pe=
rmissions
>>> +        * on the directmap. Do NX before RW, in case of X, so there is=
 no W^X
>>> +        * violation window.
>>> +        *
>>> +        * For case 1 these will be noops.
>>> +        */
>>> +       if (immediate)
>>> +               set_memory_nx(addr, area->nr_pages);
>>> +       if (deallocate_pages && special)
>>> +               set_memory_rw(addr, area->nr_pages);
>>
>> Can you elaborate on the intent here?  VM_IMMEDIATE_UNMAP means "I
>> want that alias gone before any deallocation happens".
>> VM_HAS_SPECIAL_PERMS means "I mucked with the direct map -- fix it for
>> me, please".  deallocate means "this was vfree -- please free the
>> pages".  I'm not convinced that all the various combinations make
>> sense.  Do we really need both flags?
>>
>> (VM_IMMEDIATE_UNMAP is a bit of a lie, since, if in_interrupt(), it's
>> not immediate.)
>>
>> If we do keep both flags, maybe some restructuring would make sense,
>> like this, perhaps.  Sorry about horrible whitespace damage.
>>
>> if (special) {
>>  /* VM_HAS_SPECIAL_PERMS makes little sense without deallocate_pages. */
>>  WARN_ON_ONCE(!deallocate_pages);
>>
>>  if (immediate) {
>>    /* It's possible that the vmap alias is X and we're about to make
>> the direct map RW.  To avoid a window where executable memory is
>> writable, first mark the vmap alias NX.  This is silly, since we're
>> about to *unmap* it, but this is the best we can do if all we have to
>> work with is the set_memory_abc() APIs.  Architectures should override
>> this whole function to get better behavior. */
>
> So can't we fix this first? Assuming that architectures that bother to
> implement them will not have executable mappings in the linear region,
> all we'd need is set_linear_range_ro/rw() routines that default to
> doing nothing, and encapsulate the existing code for x86 and arm64.
> That way, we can handle do things in the proper order, i.e., release
> the vmalloc mapping (without caring about the permissions), restore
> the linear alias attributes, and finally release the pages.

Seems reasonable, except that I think it should be
set_linear_range_not_present() and set_linear_range_rw(), for three
reasons:

1. It=E2=80=99s not at all clear to me that we need to keep the linear mapp=
ing
around for modules.

2. At least on x86, the obvious algorithm to do the free operation
with a single flush requires it.  Someone should probably confirm that
arm=E2=80=99s TLB works the same way, i.e. that no flush is needed when
changing from not-present (or whatever ARM calls it) to RW.

3. Anyone playing with XPFO wants this facility anyway.  In fact, with
this change, Rick=E2=80=99s series will more or less implement XPFO for
vmalloc memory :)

Does that seem reasonable to you?
