Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:51:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1CFCC5805CF
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 15:04:09 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 15:04:08 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Au2D3ZR0bZ+w50jZDsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMVI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhfWSJCAIy8?=
 =?us-ascii?q?YYQAAeUcM+ZArYTzpVQDoQawCAWwGuzv0SRFimPv3aAgz+gtDR3K0BAmEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6y1qbJwijIYe9I1jf89IjJcw0qrPaJXbJqb8XRyFUvFgLeg1WK?=
 =?us-ascii?q?t4PqIjOV2f4Rs2SB8+VgUuevhnchpgpsoTav3t8hhpfVio8W0FzI6Dh1zYUvKd?=
 =?us-ascii?q?GmRkN2YcSoHIZSui2CKYd6XscvT3t1tCs01LEKo4O3cSsExZg92RLSaPqKeJWS?=
 =?us-ascii?q?7B35TuaeOzJ4iWpleL2hgxay9lCtyun9VsmvzFZKtTBJktbKtnAQzRDT7dKHSv?=
 =?us-ascii?q?Rl8keg3zaAyRzT5/laLUwolqfXMYMtzqMzm5YJr0jOEC/7lF/rgKKUbkkk//Kn?=
 =?us-ascii?q?6+XjYrXovJ+cMIp0hxnnMqswn8y/HP00PRUQUGiF5+u80KTv8lb+QLVXiP05jr?=
 =?us-ascii?q?fWsIvdKcQfp665ABFa3pws6haiFzqm1NUYnX8aLFNKYh6Hjo7pO03QL/D8F/uw?=
 =?us-ascii?q?n1OskDJwyvDAOb3hBJrNLn7ekLv7erZ98UFcxBIpzd9D/5JUFq0BIPXrV0/1td?=
 =?us-ascii?q?zYDQE2Pxa7wub6E9h90oIeWWSSAq6WKq/SsFmI5v4xLOmIfoMapDH9K/12r8Po?=
 =?us-ascii?q?lmIzzF8BYbGyj9xQbHGjAu8gJUKfbnzxxNAbHiAPtws6SeXsz1qaTT9UYW31Rq?=
 =?us-ascii?q?85+3Q3BZyrCdT+QJuwiumE1Sa/ApoEf21DFxWAHGnlc8CeVu4RZTmOCslmlDMC?=
 =?us-ascii?q?SP6mUYB2zgyktgLx1+96KPHJ8DYTr5Pp2YtJ4LjKmBQvsDZwCM+e+2eKSW5ygy?=
 =?us-ascii?q?UPXTBl8rp4pBlYw0fL66V5n+4QQdlJ6vJVQC8gOJLcxvA8ANf3DFGSNuyVQUqr?=
 =?us-ascii?q?F431SQo6Scg8lppXOx5w?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BdAAArKhhchxHrdtBlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTCCYox0jiORX4ZsGRgUh1YiNwYNAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IGw4vgjYFAgMaAQaCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQUWgweCAQEEqR8zh?=
 =?us-ascii?q?UCEbIhSg2wXgUA/gRGCXYUghVMiAok4CoYLgU+PfQmRTwsYgV2IFodfLIoVjyO?=
 =?us-ascii?q?BXIF4TSMVgyeCJAMXjh5AMYEHHItcgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BdAAArKhhchxHrdtBlHAEBAQQBAQcEAQGBVAQBAQsBgTC?=
 =?us-ascii?q?CYox0jiORX4ZsGRgUh1YiNwYNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaA?=
 =?us-ascii?q?QaCXAMDAQIkHwopAwMBAgYBAUgIAwFTGQUWgweCAQEEqR8zhUCEbIhSg2wXgUA?=
 =?us-ascii?q?/gRGCXYUghVMiAok4CoYLgU+PfQmRTwsYgV2IFodfLIoVjyOBXIF4TSMVgyeCJ?=
 =?us-ascii?q?AMXjh5AMYEHHItcgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="56740361"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 15:03:07 -0800
Received: from localhost ([::1]:50343 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZ1uk-0005FF-Hz
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 18:03:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33997)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1dF-0007lk-18
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:45:05 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gZ1dC-0006WE-0C
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 17:45:00 -0500
Received: from mx1.redhat.com ([209.132.183.28]:58328)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mreitz@redhat.com>)
	id 1gZ1d5-0006T5-4v; Mon, 17 Dec 2018 17:44:51 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7859689AD3;
	Mon, 17 Dec 2018 22:44:50 +0000 (UTC)
Received: from localhost (ovpn-204-73.brq.redhat.com [10.40.204.73])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 729AE707BC;
	Mon, 17 Dec 2018 22:44:49 +0000 (UTC)
From: Max Reitz <mreitz@redhat.com>
To: qemu-block@nongnu.org
Date: Mon, 17 Dec 2018 23:43:41 +0100
Message-Id: <20181217224348.14922-25-mreitz@redhat.com>
In-Reply-To: <20181217224348.14922-1-mreitz@redhat.com>
References: <20181217224348.14922-1-mreitz@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Mon, 17 Dec 2018 22:44:50 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v12 24/31] block: Purify
 .bdrv_refresh_filename()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-devel@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Currently, BlockDriver.bdrv_refresh_filename() is supposed to both
refresh the filename (BDS.exact_filename) and set BDS.full_open_options.
Now that we have generic code in the central bdrv_refresh_filename() for
creating BDS.full_open_options, we can drop the latter part from all
BlockDriver.bdrv_refresh_filename() implementations.

This also means that we can drop all of the existing default code for
this from the global bdrv_refresh_filename() itself.

Furthermore, we now have to call BlockDriver.bdrv_refresh_filename()
after having set BDS.full_open_options, because the block driver's
implementation should now be allowed to depend on BDS.full_open_options
being set correctly.

Finally, with this patch we can drop the @options parameter from
BlockDriver.bdrv_refresh_filename(); also, add a comment on this
function's purpose in block/block_int.h while touching its interface.

This completely obsoletes blklogwrite's implementation of
.bdrv_refresh_filename().

Signed-off-by: Max Reitz <mreitz@redhat.com>
Reviewed-by: Alberto Garcia <berto@igalia.com>
---
 include/block/block_int.h |   6 +-
 block.c                   | 131 +++++++-------------------------------
 block/blkdebug.c          |  54 ++++++----------
 block/blklogwrites.c      |  23 -------
 block/blkverify.c         |  16 +----
 block/commit.c            |   2 +-
 block/mirror.c            |   2 +-
 block/nbd.c               |  23 +------
 block/nfs.c               |  36 +----------
 block/null.c              |  22 ++++---
 block/nvme.c              |  22 ++++---
 block/quorum.c            |  30 ---------
 12 files changed, 80 insertions(+), 287 deletions(-)

diff --git a/include/block/block_int.h b/include/block/block_int.h
index 8df23ab79c..620581d236 100644
--- a/include/block/block_int.h
+++ b/include/block/block_int.h
@@ -139,7 +139,11 @@ struct BlockDriver {
                                             Error **errp);
     int (*bdrv_make_empty)(BlockDriverState *bs);
=20
-    void (*bdrv_refresh_filename)(BlockDriverState *bs, QDict *options);
+    /*
+     * Refreshes the bs->exact_filename field. If that is impossible,
+     * bs->exact_filename has to be left empty.
+     */
+    void (*bdrv_refresh_filename)(BlockDriverState *bs);
=20
     /*
      * Gathers the open options for all children into @target.
diff --git a/block.c b/block.c
index 53cb14a5ed..c8399a9036 100644
--- a/block.c
+++ b/block.c
@@ -5403,33 +5403,6 @@ static bool append_strong_runtime_options(QDict *d=
, BlockDriverState *bs)
     return found_any;
 }
=20
-static bool append_open_options(QDict *d, BlockDriverState *bs)
-{
-    const QDictEntry *entry;
-    QemuOptDesc *desc;
-    bool found_any =3D false;
-
-    for (entry =3D qdict_first(bs->options); entry;
-         entry =3D qdict_next(bs->options, entry))
-    {
-        /* Exclude all non-driver-specific options */
-        for (desc =3D bdrv_runtime_opts.desc; desc->name; desc++) {
-            if (!strcmp(qdict_entry_key(entry), desc->name)) {
-                break;
-            }
-        }
-        if (desc->name) {
-            continue;
-        }
-
-        qdict_put_obj(d, qdict_entry_key(entry),
-                      qobject_ref(qdict_entry_value(entry)));
-        found_any =3D true;
-    }
-
-    return found_any;
-}
-
 /* Note: This function may return false positives; it may return true
  * even if opening the backing file specified by bs's image header
  * would result in exactly bs->backing. */
@@ -5463,6 +5436,8 @@ void bdrv_refresh_filename(BlockDriverState *bs)
     BdrvChild *child;
     QDict *opts;
     bool backing_overridden;
+    bool generate_json_filename; /* Whether our default implementation s=
hould
+                                    fill exact_filename (false) or not (=
true) */
=20
     if (!drv) {
         return;
@@ -5498,90 +5473,10 @@ void bdrv_refresh_filename(BlockDriverState *bs)
         backing_overridden =3D false;
     }
=20
-    if (drv->bdrv_refresh_filename) {
-        /* Obsolete information is of no use here, so drop the old file =
name
-         * information before refreshing it */
-        bs->exact_filename[0] =3D '\0';
-        if (bs->full_open_options) {
-            qobject_unref(bs->full_open_options);
-            bs->full_open_options =3D NULL;
-        }
-
-        opts =3D qdict_new();
-        append_open_options(opts, bs);
-        drv->bdrv_refresh_filename(bs, opts);
-        qobject_unref(opts);
-    } else if (bs->file) {
-        /* Try to reconstruct valid information from the underlying file=
 */
-        bool has_open_options;
-
-        bs->exact_filename[0] =3D '\0';
-        if (bs->full_open_options) {
-            qobject_unref(bs->full_open_options);
-            bs->full_open_options =3D NULL;
-        }
-
-        opts =3D qdict_new();
-        has_open_options =3D append_open_options(opts, bs);
-        has_open_options |=3D backing_overridden;
-
-        /* If no specific options have been given for this BDS, the file=
name of
-         * the underlying file should suffice for this one as well */
-        if (bs->file->bs->exact_filename[0] && !has_open_options) {
-            strcpy(bs->exact_filename, bs->file->bs->exact_filename);
-        }
-        /* Reconstructing the full options QDict is simple for most form=
at block
-         * drivers, as long as the full options are known for the underl=
ying
-         * file BDS. The full options QDict of that file BDS should some=
how
-         * contain a representation of the filename, therefore the follo=
wing
-         * suffices without querying the (exact_)filename of this BDS. *=
/
-        if (bs->file->bs->full_open_options &&
-            (!bs->backing || bs->backing->bs->full_open_options))
-        {
-            qdict_put_str(opts, "driver", drv->format_name);
-            qdict_put(opts, "file",
-                      qobject_ref(bs->file->bs->full_open_options));
-
-            if (bs->backing) {
-                qdict_put(opts, "backing",
-                          qobject_ref(bs->backing->bs->full_open_options=
));
-            } else if (backing_overridden) {
-                qdict_put_null(opts, "backing");
-            }
-
-            bs->full_open_options =3D opts;
-        } else {
-            qobject_unref(opts);
-        }
-    } else if (!bs->full_open_options && qdict_size(bs->options)) {
-        /* There is no underlying file BDS (at least referenced by BDS.f=
ile),
-         * so the full options QDict should be equal to the options give=
n
-         * specifically for this block device when it was opened (plus t=
he
-         * driver specification).
-         * Because those options don't change, there is no need to updat=
e
-         * full_open_options when it's already set. */
-
-        opts =3D qdict_new();
-        append_open_options(opts, bs);
-        qdict_put_str(opts, "driver", drv->format_name);
-
-        if (bs->exact_filename[0]) {
-            /* This may not work for all block protocol drivers (some ma=
y
-             * require this filename to be parsed), but we have to find =
some
-             * default solution here, so just include it. If some block =
driver
-             * does not support pure options without any filename at all=
 or
-             * needs some special format of the options QDict, it needs =
to
-             * implement the driver-specific bdrv_refresh_filename() fun=
ction.
-             */
-            qdict_put_str(opts, "filename", bs->exact_filename);
-        }
-
-        bs->full_open_options =3D opts;
-    }
-
     /* Gather the options QDict */
     opts =3D qdict_new();
-    append_strong_runtime_options(opts, bs);
+    generate_json_filename =3D append_strong_runtime_options(opts, bs);
+    generate_json_filename |=3D backing_overridden;
=20
     if (drv->bdrv_gather_child_options) {
         /* Some block drivers may not want to present all of their child=
ren's
@@ -5607,6 +5502,24 @@ void bdrv_refresh_filename(BlockDriverState *bs)
     qobject_unref(bs->full_open_options);
     bs->full_open_options =3D opts;
=20
+    if (drv->bdrv_refresh_filename) {
+        /* Obsolete information is of no use here, so drop the old file =
name
+         * information before refreshing it */
+        bs->exact_filename[0] =3D '\0';
+
+        drv->bdrv_refresh_filename(bs);
+    } else if (bs->file) {
+        /* Try to reconstruct valid information from the underlying file=
 */
+
+        bs->exact_filename[0] =3D '\0';
+
+        /* If no specific options have been given for this BDS, the file=
name of
+         * the underlying file should suffice for this one as well */
+        if (bs->file->bs->exact_filename[0] && !generate_json_filename) =
{
+            strcpy(bs->exact_filename, bs->file->bs->exact_filename);
+        }
+    }
+
     if (bs->exact_filename[0]) {
         pstrcpy(bs->filename, sizeof(bs->filename), bs->exact_filename);
     } else {
diff --git a/block/blkdebug.c b/block/blkdebug.c
index 71b4275b98..1ea835c2b9 100644
--- a/block/blkdebug.c
+++ b/block/blkdebug.c
@@ -811,51 +811,37 @@ static int64_t blkdebug_getlength(BlockDriverState =
*bs)
     return bdrv_getlength(bs->file->bs);
 }
=20
-static void blkdebug_refresh_filename(BlockDriverState *bs, QDict *optio=
ns)
+static void blkdebug_refresh_filename(BlockDriverState *bs)
 {
     BDRVBlkdebugState *s =3D bs->opaque;
-    QDict *opts;
     const QDictEntry *e;
-    bool force_json =3D false;
-
-    for (e =3D qdict_first(options); e; e =3D qdict_next(options, e)) {
-        if (strcmp(qdict_entry_key(e), "config") &&
-            strcmp(qdict_entry_key(e), "x-image"))
-        {
-            force_json =3D true;
-            break;
-        }
-    }
+    int ret;
=20
-    if (force_json && !bs->file->bs->full_open_options) {
-        /* The config file cannot be recreated, so creating a plain file=
name
-         * is impossible */
+    if (!bs->file->bs->exact_filename[0]) {
         return;
     }
=20
-    if (!force_json && bs->file->bs->exact_filename[0]) {
-        int ret =3D snprintf(bs->exact_filename, sizeof(bs->exact_filena=
me),
-                           "blkdebug:%s:%s", s->config_file ?: "",
-                           bs->file->bs->exact_filename);
-        if (ret >=3D sizeof(bs->exact_filename)) {
-            /* An overflow makes the filename unusable, so do not report=
 any */
-            bs->exact_filename[0] =3D 0;
+    for (e =3D qdict_first(bs->full_open_options); e;
+         e =3D qdict_next(bs->full_open_options, e))
+    {
+        /* Real child options are under "image", but "x-image" may
+         * contain a filename */
+        if (strcmp(qdict_entry_key(e), "config") &&
+            strcmp(qdict_entry_key(e), "image") &&
+            strcmp(qdict_entry_key(e), "x-image") &&
+            strcmp(qdict_entry_key(e), "driver"))
+        {
+            return;
         }
     }
=20
-    opts =3D qdict_new();
-    qdict_put_str(opts, "driver", "blkdebug");
-
-    qdict_put(opts, "image", qobject_ref(bs->file->bs->full_open_options=
));
-
-    for (e =3D qdict_first(options); e; e =3D qdict_next(options, e)) {
-        if (strcmp(qdict_entry_key(e), "x-image")) {
-            qdict_put_obj(opts, qdict_entry_key(e),
-                          qobject_ref(qdict_entry_value(e)));
-        }
+    ret =3D snprintf(bs->exact_filename, sizeof(bs->exact_filename),
+                   "blkdebug:%s:%s",
+                   s->config_file ?: "", bs->file->bs->exact_filename);
+    if (ret >=3D sizeof(bs->exact_filename)) {
+        /* An overflow makes the filename unusable, so do not report any=
 */
+        bs->exact_filename[0] =3D 0;
     }
-
-    bs->full_open_options =3D opts;
 }
=20
 static void blkdebug_refresh_limits(BlockDriverState *bs, Error **errp)
diff --git a/block/blklogwrites.c b/block/blklogwrites.c
index 1c8e200326..eb2b4901a5 100644
--- a/block/blklogwrites.c
+++ b/block/blklogwrites.c
@@ -280,28 +280,6 @@ static int64_t blk_log_writes_getlength(BlockDriverS=
tate *bs)
     return bdrv_getlength(bs->file->bs);
 }
=20
-static void blk_log_writes_refresh_filename(BlockDriverState *bs,
-                                            QDict *options)
-{
-    BDRVBlkLogWritesState *s =3D bs->opaque;
-
-    if (bs->file->bs->full_open_options
-        && s->log_file->bs->full_open_options)
-    {
-        QDict *opts =3D qdict_new();
-        qdict_put_str(opts, "driver", "blklogwrites");
-
-        qobject_ref(bs->file->bs->full_open_options);
-        qdict_put_obj(opts, "file", QOBJECT(bs->file->bs->full_open_opti=
ons));
-        qobject_ref(s->log_file->bs->full_open_options);
-        qdict_put_obj(opts, "log",
-                      QOBJECT(s->log_file->bs->full_open_options));
-        qdict_put_int(opts, "log-sector-size", s->sectorsize);
-
-        bs->full_open_options =3D opts;
-    }
-}
-
 static void blk_log_writes_child_perm(BlockDriverState *bs, BdrvChild *c=
,
                                       const BdrvChildRole *role,
                                       BlockReopenQueue *ro_q,
@@ -532,7 +510,6 @@ static BlockDriver bdrv_blk_log_writes =3D {
     .bdrv_open              =3D blk_log_writes_open,
     .bdrv_close             =3D blk_log_writes_close,
     .bdrv_getlength         =3D blk_log_writes_getlength,
-    .bdrv_refresh_filename  =3D blk_log_writes_refresh_filename,
     .bdrv_child_perm        =3D blk_log_writes_child_perm,
     .bdrv_refresh_limits    =3D blk_log_writes_refresh_limits,
=20
diff --git a/block/blkverify.c b/block/blkverify.c
index 3c7d4c8729..3ff77ff49a 100644
--- a/block/blkverify.c
+++ b/block/blkverify.c
@@ -281,24 +281,10 @@ static bool blkverify_recurse_is_first_non_filter(B=
lockDriverState *bs,
     return bdrv_recurse_is_first_non_filter(s->test_file->bs, candidate)=
;
 }
=20
-static void blkverify_refresh_filename(BlockDriverState *bs, QDict *opti=
ons)
+static void blkverify_refresh_filename(BlockDriverState *bs)
 {
     BDRVBlkverifyState *s =3D bs->opaque;
=20
-    if (bs->file->bs->full_open_options
-        && s->test_file->bs->full_open_options)
-    {
-        QDict *opts =3D qdict_new();
-        qdict_put_str(opts, "driver", "blkverify");
-
-        qdict_put(opts, "raw",
-                  qobject_ref(bs->file->bs->full_open_options));
-        qdict_put(opts, "test",
-                  qobject_ref(s->test_file->bs->full_open_options));
-
-        bs->full_open_options =3D opts;
-    }
-
     if (bs->file->bs->exact_filename[0]
         && s->test_file->bs->exact_filename[0])
     {
diff --git a/block/commit.c b/block/commit.c
index 093b1505de..2b876bf6e9 100644
--- a/block/commit.c
+++ b/block/commit.c
@@ -230,7 +230,7 @@ static int coroutine_fn bdrv_commit_top_preadv(BlockD=
riverState *bs,
     return bdrv_co_preadv(bs->backing, offset, bytes, qiov, flags);
 }
=20
-static void bdrv_commit_top_refresh_filename(BlockDriverState *bs, QDict=
 *opts)
+static void bdrv_commit_top_refresh_filename(BlockDriverState *bs)
 {
     pstrcpy(bs->exact_filename, sizeof(bs->exact_filename),
             bs->backing->bs->filename);
diff --git a/block/mirror.c b/block/mirror.c
index c965b2d3e1..28e7708871 100644
--- a/block/mirror.c
+++ b/block/mirror.c
@@ -1432,7 +1432,7 @@ static int coroutine_fn bdrv_mirror_top_pdiscard(Bl=
ockDriverState *bs,
                                     NULL, 0);
 }
=20
-static void bdrv_mirror_top_refresh_filename(BlockDriverState *bs, QDict=
 *opts)
+static void bdrv_mirror_top_refresh_filename(BlockDriverState *bs)
 {
     if (bs->backing =3D=3D NULL) {
         /* we can be here after failed bdrv_attach_child in
diff --git a/block/nbd.c b/block/nbd.c
index 5b4e4cf1db..fcc9e897e5 100644
--- a/block/nbd.c
+++ b/block/nbd.c
@@ -513,12 +513,9 @@ static void nbd_attach_aio_context(BlockDriverState =
*bs,
     nbd_client_attach_aio_context(bs, new_context);
 }
=20
-static void nbd_refresh_filename(BlockDriverState *bs, QDict *options)
+static void nbd_refresh_filename(BlockDriverState *bs)
 {
     BDRVNBDState *s =3D bs->opaque;
-    QDict *opts =3D qdict_new();
-    QObject *saddr_qdict;
-    Visitor *ov;
     const char *host =3D NULL, *port =3D NULL, *path =3D NULL;
=20
     if (s->saddr->type =3D=3D SOCKET_ADDRESS_TYPE_INET) {
@@ -531,8 +528,6 @@ static void nbd_refresh_filename(BlockDriverState *bs=
, QDict *options)
         path =3D s->saddr->u.q_unix.path;
     } /* else can't represent as pseudo-filename */
=20
-    qdict_put_str(opts, "driver", "nbd");
-
     if (path && s->export) {
         snprintf(bs->exact_filename, sizeof(bs->exact_filename),
                  "nbd+unix:///%s?socket=3D%s", s->export, path);
@@ -546,22 +541,6 @@ static void nbd_refresh_filename(BlockDriverState *b=
s, QDict *options)
         snprintf(bs->exact_filename, sizeof(bs->exact_filename),
                  "nbd://%s:%s", host, port);
     }
-
-    ov =3D qobject_output_visitor_new(&saddr_qdict);
-    visit_type_SocketAddress(ov, NULL, &s->saddr, &error_abort);
-    visit_complete(ov, &saddr_qdict);
-    visit_free(ov);
-    qdict_put_obj(opts, "server", saddr_qdict);
-
-    if (s->export) {
-        qdict_put_str(opts, "export", s->export);
-    }
-    if (s->tlscredsid) {
-        qdict_put_str(opts, "tls-creds", s->tlscredsid);
-    }
-
-    qdict_flatten(opts);
-    bs->full_open_options =3D opts;
 }
=20
 static char *nbd_dirname(BlockDriverState *bs, Error **errp)
diff --git a/block/nfs.c b/block/nfs.c
index 6985a44b89..531903610b 100644
--- a/block/nfs.c
+++ b/block/nfs.c
@@ -799,14 +799,9 @@ static int nfs_reopen_prepare(BDRVReopenState *state=
,
     return 0;
 }
=20
-static void nfs_refresh_filename(BlockDriverState *bs, QDict *options)
+static void nfs_refresh_filename(BlockDriverState *bs)
 {
     NFSClient *client =3D bs->opaque;
-    QDict *opts =3D qdict_new();
-    QObject *server_qdict;
-    Visitor *ov;
-
-    qdict_put_str(opts, "driver", "nfs");
=20
     if (client->uid && !client->gid) {
         snprintf(bs->exact_filename, sizeof(bs->exact_filename),
@@ -824,35 +819,6 @@ static void nfs_refresh_filename(BlockDriverState *b=
s, QDict *options)
         snprintf(bs->exact_filename, sizeof(bs->exact_filename),
                  "nfs://%s%s", client->server->host, client->path);
     }
-
-    ov =3D qobject_output_visitor_new(&server_qdict);
-    visit_type_NFSServer(ov, NULL, &client->server, &error_abort);
-    visit_complete(ov, &server_qdict);
-    qdict_put_obj(opts, "server", server_qdict);
-    qdict_put_str(opts, "path", client->path);
-
-    if (client->uid) {
-        qdict_put_int(opts, "user", client->uid);
-    }
-    if (client->gid) {
-        qdict_put_int(opts, "group", client->gid);
-    }
-    if (client->tcp_syncnt) {
-        qdict_put_int(opts, "tcp-syn-cnt", client->tcp_syncnt);
-    }
-    if (client->readahead) {
-        qdict_put_int(opts, "readahead-size", client->readahead);
-    }
-    if (client->pagecache) {
-        qdict_put_int(opts, "page-cache-size", client->pagecache);
-    }
-    if (client->debug) {
-        qdict_put_int(opts, "debug", client->debug);
-    }
-
-    visit_free(ov);
-    qdict_flatten(opts);
-    bs->full_open_options =3D opts;
 }
=20
 static char *nfs_dirname(BlockDriverState *bs, Error **errp)
diff --git a/block/null.c b/block/null.c
index 858892f0c4..1c56a0ef01 100644
--- a/block/null.c
+++ b/block/null.c
@@ -239,17 +239,23 @@ static int coroutine_fn null_co_block_status(BlockD=
riverState *bs,
     return ret;
 }
=20
-static void null_refresh_filename(BlockDriverState *bs, QDict *opts)
+static void null_refresh_filename(BlockDriverState *bs)
 {
-    qdict_del(opts, "filename");
-
-    if (!qdict_size(opts)) {
-        snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s://"=
,
-                 bs->drv->format_name);
+    const QDictEntry *e;
+
+    for (e =3D qdict_first(bs->full_open_options); e;
+         e =3D qdict_next(bs->full_open_options, e))
+    {
+        /* These options can be ignored */
+        if (strcmp(qdict_entry_key(e), "filename") &&
+            strcmp(qdict_entry_key(e), "driver"))
+        {
+            return;
+        }
     }
=20
-    qdict_put_str(opts, "driver", bs->drv->format_name);
-    bs->full_open_options =3D qobject_ref(opts);
+    snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s://",
+             bs->drv->format_name);
 }
=20
 static const char *const null_strong_runtime_opts[] =3D {
diff --git a/block/nvme.c b/block/nvme.c
index d987b35f02..51d100cca4 100644
--- a/block/nvme.c
+++ b/block/nvme.c
@@ -1056,17 +1056,23 @@ static int nvme_reopen_prepare(BDRVReopenState *r=
eopen_state,
     return 0;
 }
=20
-static void nvme_refresh_filename(BlockDriverState *bs, QDict *opts)
+static void nvme_refresh_filename(BlockDriverState *bs)
 {
-    qdict_del(opts, "filename");
-
-    if (!qdict_size(opts)) {
-        snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s://"=
,
-                 bs->drv->format_name);
+    const QDictEntry *e;
+
+    for (e =3D qdict_first(bs->full_open_options); e;
+         e =3D qdict_next(bs->full_open_options, e))
+    {
+        /* These options can be ignored */
+        if (strcmp(qdict_entry_key(e), "filename") &&
+            strcmp(qdict_entry_key(e), "driver"))
+        {
+            return;
+        }
     }
=20
-    qdict_put_str(opts, "driver", bs->drv->format_name);
-    bs->full_open_options =3D qobject_ref(opts);
+    snprintf(bs->exact_filename, sizeof(bs->exact_filename), "%s://",
+             bs->drv->format_name);
 }
=20
 static void nvme_refresh_limits(BlockDriverState *bs, Error **errp)
diff --git a/block/quorum.c b/block/quorum.c
index 3984f0aa4f..352f729136 100644
--- a/block/quorum.c
+++ b/block/quorum.c
@@ -1065,35 +1065,6 @@ static void quorum_del_child(BlockDriverState *bs,=
 BdrvChild *child,
     bdrv_drained_end(bs);
 }
=20
-static void quorum_refresh_filename(BlockDriverState *bs, QDict *options=
)
-{
-    BDRVQuorumState *s =3D bs->opaque;
-    QDict *opts;
-    QList *children;
-    int i;
-
-    for (i =3D 0; i < s->num_children; i++) {
-        if (!s->children[i]->bs->full_open_options) {
-            return;
-        }
-    }
-
-    children =3D qlist_new();
-    for (i =3D 0; i < s->num_children; i++) {
-        qlist_append(children,
-                     qobject_ref(s->children[i]->bs->full_open_options))=
;
-    }
-
-    opts =3D qdict_new();
-    qdict_put_str(opts, "driver", "quorum");
-    qdict_put_int(opts, QUORUM_OPT_VOTE_THRESHOLD, s->threshold);
-    qdict_put_bool(opts, QUORUM_OPT_BLKVERIFY, s->is_blkverify);
-    qdict_put_bool(opts, QUORUM_OPT_REWRITE, s->rewrite_corrupted);
-    qdict_put(opts, "children", children);
-
-    bs->full_open_options =3D opts;
-}
-
 static void quorum_gather_child_options(BlockDriverState *bs, QDict *tar=
get,
                                         bool backing_overridden)
 {
@@ -1159,7 +1130,6 @@ static BlockDriver bdrv_quorum =3D {
=20
     .bdrv_open                          =3D quorum_open,
     .bdrv_close                         =3D quorum_close,
-    .bdrv_refresh_filename              =3D quorum_refresh_filename,
     .bdrv_gather_child_options          =3D quorum_gather_child_options,
     .bdrv_dirname                       =3D quorum_dirname,
=20
--=20
2.19.2


