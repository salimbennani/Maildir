Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:09:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DF5995805AD
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 00:18:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga005-1.fm.intel.com with ESMTP; 18 Dec 2018 00:18:02 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AygcVHxRd2+3VLpTn4ql3kdIc89psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZBSOt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+gqFVrhWjqBxx3oDUeIOYOvhxc6/Ac94WWXROXt1KWiBdHo+x?=
 =?us-ascii?q?dZcDAvAdMepEqYT2ulsArQG5BQmpHO7gyT9IiWXw3a01zu8uEwDG1xEnEtMOsX?=
 =?us-ascii?q?TYttT0OL0TUOC11qbIyzrDYuhS2Tf87ojIbx8greuNXbJ2bcre100vGxnZgVWX?=
 =?us-ascii?q?rIzoJjWY3fkOvWiD9+dsS/6jhm09pw1svzSixd0ghpfHi48V0FzI6Cd0zJ4oKd?=
 =?us-ascii?q?C2R0N3e8OoHZVfui2AKod7TMIvT3tmtSonzLANpIS1czIQyJs9wh7Sc/yHfJaM?=
 =?us-ascii?q?4hLkTOuRJTZ4hGl5eLKknRqy/k6gyvDmWsmzylZKoTJJktjKtn8Tyxze8taLRu?=
 =?us-ascii?q?d+80u7xDqDygPe5vtaLU06lafXMYMtz7wompoWq0vDHyv2mEvsjK+Rc0Up4vGo?=
 =?us-ascii?q?5PriYrX7v5OTKpF7ih/gPaQqg8CwGuM4MhUIX2eH5+u8z7rv/Un4QLVJkPI6iK?=
 =?us-ascii?q?bYsI3CKMQfp665BRJV04k55xa+CTemzMoXnX0dIF1ZfxKHipPkO1fJIPD+Ave/?=
 =?us-ascii?q?hUmsnC1sx/DcMb3tGo/NIWTbkLf9YbZ97FZRyA4yzdBc+Z1YEL4AIO/oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStAzA2+Q0PuPZZJMJoC2vbL8h5uXy?=
 =?us-ascii?q?ljk/nlkSe7Tv2oEYL3WxH/BjKkPeZmLwg9AHCiATsw8jCeDnllCGAgNVfGu4Cq?=
 =?us-ascii?q?c15zUnD9C/AILeA4ygnrGFmT22B4BbfXxuDFeKHnH1MYKeVKAXdSiQL8R9xyEC?=
 =?us-ascii?q?TqWrUIQ71Buj5zP9nr98MsLO9yEYvI6l399wo6XLmA0/73pxBtWR3mWJZ2V1mG?=
 =?us-ascii?q?oSQHkxxq876V1gjFzFw6hxhfNwEd1V+uMPUwEmOJqaxOt/T5j/WgvLfdCSVH68?=
 =?us-ascii?q?T9mmCC13RdU0h5cPZk94HtiuiTjZ0iaqCqNTnLuOV7Iu9aeJ7Xj4Ick1+neOgL?=
 =?us-ascii?q?ggyUtgUMtGM2KOgq956hiVBojVnkHfnKGvI/dPlBXR/XuOmDLd9HpTVxR9BP3I?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BRAAC1rBhchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwglASjHSLGimBPwGXfoFzFRgUh14iNAkNAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?vgjYFAgMYCYJcAwMBAiQfCikDAwECBgEBSAgDAVMHEgWDHYIBAQSpAzOKO4d+h?=
 =?us-ascii?q?EF6gRyBETMBjT4CkE6QUwcCDZFSGF+QdSyJFZAtgUaCDnCDPIIkAxcSjhg0MQE?=
 =?us-ascii?q?BgQWMAYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BRAAC1rBhchxHrdtBkHgEGBwaBUQkLAYEwglASjHSLGim?=
 =?us-ascii?q?BPwGXfoFzFRgUh14iNAkNAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMYCYJcA?=
 =?us-ascii?q?wMBAiQfCikDAwECBgEBSAgDAVMHEgWDHYIBAQSpAzOKO4d+hEF6gRyBETMBjT4?=
 =?us-ascii?q?CkE6QUwcCDZFSGF+QdSyJFZAtgUaCDnCDPIIkAxcSjhg0MQEBgQWMAYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="44463819"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 00:17:58 -0800
Received: from localhost ([::1]:52450 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZAZh-0001eu-T6
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 03:17:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53603)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yi.z.zhang@linux.intel.com>) id 1gZAZ2-0001eE-AR
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 03:17:18 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yi.z.zhang@linux.intel.com>) id 1gZAYz-0001Yu-3Y
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 03:17:16 -0500
Received: from mga06.intel.com ([134.134.136.31]:6554)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yi.z.zhang@linux.intel.com>)
	id 1gZAYy-0001YK-Pm
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 03:17:13 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
	by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	18 Dec 2018 00:17:09 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; d="scan'208";a="128766954"
Received: from linux.intel.com ([10.54.29.200])
	by fmsmga004.fm.intel.com with ESMTP; 18 Dec 2018 00:17:08 -0800
Received: from dazhang1-ssd.sh.intel.com (unknown [10.239.48.128])
	by linux.intel.com (Postfix) with ESMTP id 480AE5805AD;
	Tue, 18 Dec 2018 00:17:06 -0800 (PST)
From: Zhang Yi <yi.z.zhang@linux.intel.com>
To: mst@redhat.com, peter.maydell@linaro.org, yu.c.zhang@linux.intel.com,
	ehabkost@redhat.com, imammedo@redhat.com
Date: Tue, 18 Dec 2018 16:17:04 +0800
Message-Id: <62a8796330b86f9f6571e48755d718db11855a6b.1545120100.git.yi.z.zhang@linux.intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <cover.1545120100.git.yi.z.zhang@linux.intel.com>
References: <cover.1545120100.git.yi.z.zhang@linux.intel.com>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 134.134.136.31
Subject: [Qemu-devel] [PATCH V7 2/6] util/mmap-alloc: switch qemu_ram_mmap()
 to 'flags' parameter
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: xiaoguangrong.eric@gmail.com, crosthwaite.peter@gmail.com,
	richard.henderson@linaro.org, qemu-devel@nongnu.org,
	Zhang Yi <yi.z.zhang@linux.intel.com>, stefanha@redhat.com,
	pbonzini@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

As more flag parameters besides the existing 'shared' are going to be
added to qemu_ram_mmap(), let's switch 'shared' to a 'flags' parameter
in advance, so as to ease the further additions.

Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
Signed-off-by: Zhang Yi <yi.z.zhang@linux.intel.com>
---
 exec.c                    |  7 ++++---
 include/qemu/mmap-alloc.h | 19 ++++++++++++++++++-
 util/mmap-alloc.c         |  8 +++++---
 util/oslib-posix.c        |  8 +++++++-
 4 files changed, 34 insertions(+), 8 deletions(-)

diff --git a/exec.c b/exec.c
index bb6170d..e92a7da 100644
--- a/exec.c
+++ b/exec.c
@@ -1810,6 +1810,7 @@ static void *file_ram_alloc(RAMBlock *block,
                             ram_addr_t memory,
                             int fd,
                             bool truncate,
+                            uint32_t flags,
                             Error **errp)
 {
     void *area;
@@ -1859,8 +1860,7 @@ static void *file_ram_alloc(RAMBlock *block,
         perror("ftruncate");
     }
 
-    area = qemu_ram_mmap(fd, memory, block->mr->align,
-                         block->flags & RAM_SHARED);
+    area = qemu_ram_mmap(fd, memory, block->mr->align, flags);
     if (area == MAP_FAILED) {
         error_setg_errno(errp, errno,
                          "unable to map backing store for guest RAM");
@@ -2279,7 +2279,8 @@ RAMBlock *qemu_ram_alloc_from_fd(ram_addr_t size, MemoryRegion *mr,
     new_block->used_length = size;
     new_block->max_length = size;
     new_block->flags = ram_flags;
-    new_block->host = file_ram_alloc(new_block, size, fd, !file_size, errp);
+    new_block->host = file_ram_alloc(new_block, size, fd, !file_size,
+            ram_flags, errp);
     if (!new_block->host) {
         g_free(new_block);
         return NULL;
diff --git a/include/qemu/mmap-alloc.h b/include/qemu/mmap-alloc.h
index 50385e3..6fe6ed4 100644
--- a/include/qemu/mmap-alloc.h
+++ b/include/qemu/mmap-alloc.h
@@ -7,7 +7,24 @@ size_t qemu_fd_getpagesize(int fd);
 
 size_t qemu_mempath_getpagesize(const char *mem_path);
 
-void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared);
+/**
+ * qemu_ram_mmap: mmap the specified file or device.
+ *
+ * Parameters:
+ *  @fd: the file or the device to mmap
+ *  @size: the number of bytes to be mmaped
+ *  @align: if not zero, specify the alignment of the starting mapping address;
+ *          otherwise, the alignment in use will be determined by QEMU.
+ *  @flags: specifies additional properties of the mapping, which can be one or
+ *          bit-or of following values
+ *          - RAM_SHARED: mmap with MAP_SHARED flag
+ *          Other bits are ignored.
+ *
+ * Return:
+ *  On success, return a pointer to the mapped area.
+ *  On failure, return MAP_FAILED.
+ */
+void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags);
 
 void qemu_ram_munmap(void *ptr, size_t size);
 
diff --git a/util/mmap-alloc.c b/util/mmap-alloc.c
index fd329ec..8f0a740 100644
--- a/util/mmap-alloc.c
+++ b/util/mmap-alloc.c
@@ -13,6 +13,7 @@
 #include "qemu/osdep.h"
 #include "qemu/mmap-alloc.h"
 #include "qemu/host-utils.h"
+#include "exec/memory.h"
 
 #define HUGETLBFS_MAGIC       0x958458f6
 
@@ -75,7 +76,7 @@ size_t qemu_mempath_getpagesize(const char *mem_path)
     return getpagesize();
 }
 
-void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared)
+void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
 {
     /*
      * Note: this always allocates at least one extra page of virtual address
@@ -92,11 +93,12 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared)
      * anonymous memory is OK.
      */
     int anonfd = fd == -1 || qemu_fd_getpagesize(fd) == getpagesize() ? -1 : fd;
-    int flags = anonfd == -1 ? MAP_ANONYMOUS : MAP_NORESERVE;
-    void *ptr = mmap(0, total, PROT_NONE, flags | MAP_PRIVATE, anonfd, 0);
+    int mmap_flags = anonfd == -1 ? MAP_ANONYMOUS : MAP_NORESERVE;
+    void *ptr = mmap(0, total, PROT_NONE, mmap_flags | MAP_PRIVATE, anonfd, 0);
 #else
     void *ptr = mmap(0, total, PROT_NONE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
 #endif
+    bool shared = flags & RAM_SHARED;
     size_t offset;
     void *ptr1;
 
diff --git a/util/oslib-posix.c b/util/oslib-posix.c
index fbd0dc8..121c31f 100644
--- a/util/oslib-posix.c
+++ b/util/oslib-posix.c
@@ -203,7 +203,13 @@ void *qemu_memalign(size_t alignment, size_t size)
 void *qemu_anon_ram_alloc(size_t size, uint64_t *alignment, bool shared)
 {
     size_t align = QEMU_VMALLOC_ALIGN;
-    void *ptr = qemu_ram_mmap(-1, size, align, shared);
+    uint32_t flags = 0;
+    void *ptr;
+
+    if (shared) {
+        flags = MAP_SHARED;
+    }
+    ptr = qemu_ram_mmap(-1, size, align, flags);
 
     if (ptr == MAP_FAILED) {
         return NULL;
-- 
2.7.4


