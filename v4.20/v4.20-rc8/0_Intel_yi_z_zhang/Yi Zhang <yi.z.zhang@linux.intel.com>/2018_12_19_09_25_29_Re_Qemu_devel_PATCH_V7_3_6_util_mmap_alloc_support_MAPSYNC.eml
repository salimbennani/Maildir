Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:32:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4BBC8580261
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 01:26:09 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 01:26:09 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AF+wTfB2uRnIYeiV8smDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMSKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmhi?=
 =?us-ascii?q?cJOSA6/mHZhcN/kL9UrxCvqBJi247ZYoObOfVjcq7TYd8VW3FBU91NVyBdGI6w?=
 =?us-ascii?q?c5cDAvADMOtesoLzp0EOrRy7BQS0BuzvyyJDiXz23aIg1eQhHhzN0QsgHtIPqn?=
 =?us-ascii?q?jVrc/5NaYSUe+vyqnIwi7Ob/dX2Tf79YjJfQotofCKXbJsb8XRzVMjGB/CjlWV?=
 =?us-ascii?q?sIHoOS6e2OcVs2WD8eZsSeGih3Q6pw1soTWj3Nkgh4fJi44P11zJ9z11zJsxKN?=
 =?us-ascii?q?GmUkJ2Yd6pHIFQui2ELYd6X90uT31utS0n0LMJo4S7czIPyJk/xx7QdfiHc4+Q?=
 =?us-ascii?q?7xLnVeaROit4hGl/dLKwgRay7FKsyurmVsm7yFpKryxFncfQtn0VyRDf9suKRu?=
 =?us-ascii?q?Fg8ku82juDzR7f5+9ELEwuiKbWKYYtwrsqmZoStUTDEDX2mELzjKKOb0Ur5O2o?=
 =?us-ascii?q?6/n+brr7uJCcKZF7igXnPqs1ncy/HOI4PRQQUGiA/ui80Lzj/U7nT7lQgfw2j7?=
 =?us-ascii?q?HUsJTbJcQdu664DBVZ0ocl6xajETim1M4UkmUALFJAYx+HiY/pO1fBIPD+EPez?=
 =?us-ascii?q?mVOskC1kx/zeJL3uHo3NLmTfkLfmZbt9709cyAktwtxF6JNUF6oMIPbyWk/3qd?=
 =?us-ascii?q?zZAQU1Mw2yw+b7Ftp90pkSVn6IAq+cY+vvt0SV7LcvP/WUf91S/zL8MOQ+ofjp?=
 =?us-ascii?q?i3A/hBkaZ6bu2JIWbHWxGLNhO1mYZnz3xc4MFHpPsgcgQei5tVuZTDQGYn+zW7?=
 =?us-ascii?q?47tCg2DZ/jAYrdS4TomrGYwSqgArVQYWZJDE3KFm3nIJ6ZUfUBYz7HP8l6jzYf?=
 =?us-ascii?q?XqKgQYJy6Rb7/ir7wLpuI+6cwWtQiYniztt04aebwRQp6RRuAsid2n3LRGZxyD?=
 =?us-ascii?q?AmXTgziZF+6X59w1GMmfxpgrpKU85T7vVGegM7M4PMie18F932HAnGe4HaGx6d?=
 =?us-ascii?q?Xty6DGRpHZoKyNgUbhMlFg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAADLDRpchxHrdtBjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gSmDfYgZX4sdKYFkl1yBcxUYBw2HKiI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMYCYJcAQIDAQIgIwopAwMBAgYBA?=
 =?us-ascii?q?QoYAgIFHQQCAgMBCwVJEwWDHQGCAQEEpy6BL4owgQuLNHqBHIERgxKICTGCJgK?=
 =?us-ascii?q?QU5BcBwKCKYRmikYkCgKBUY95LIogjzCBRoIOTSODPAmCHhcSigmEDzQxAQEPd?=
 =?us-ascii?q?otpgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AFAADLDRpchxHrdtBjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gSmDfYgZX4sdKYFkl1yBcxUYBw2HKiI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgbDiMMgjYFAgMYCYJcAQIDAQIgIwopAwMBAgYBAQoYAgIFHQQCAgM?=
 =?us-ascii?q?BCwVJEwWDHQGCAQEEpy6BL4owgQuLNHqBHIERgxKICTGCJgKQU5BcBwKCKYRmi?=
 =?us-ascii?q?kYkCgKBUY95LIogjzCBRoIOTSODPAmCHhcSigmEDzQxAQEPdotpgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="67489403"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 01:26:07 -0800
Received: from localhost ([::1]:58457 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZY7C-0006Qm-NH
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 04:26:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45768)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yi.z.zhang@linux.intel.com>) id 1gZY6n-0006Ow-HJ
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 04:25:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yi.z.zhang@linux.intel.com>) id 1gZY6j-0006KX-D7
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 04:25:41 -0500
Received: from mga04.intel.com ([192.55.52.120]:32279)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yi.z.zhang@linux.intel.com>)
	id 1gZY6j-0006IU-2F
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 04:25:37 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from orsmga008.jf.intel.com ([10.7.209.65])
	by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	19 Dec 2018 01:25:34 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; d="scan'208";a="102714689"
Received: from linux.intel.com ([10.54.29.200])
	by orsmga008.jf.intel.com with ESMTP; 19 Dec 2018 01:25:34 -0800
Received: from tiger-server (dazhang1-ssd.sh.intel.com [10.239.48.128])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 67AD25805F0;
	Wed, 19 Dec 2018 01:25:32 -0800 (PST)
Date: Wed, 19 Dec 2018 17:25:29 +0800
From: Yi Zhang <yi.z.zhang@linux.intel.com>
To: "Michael S. Tsirkin" <mst@redhat.com>
Message-ID: <20181219092528.GB35378@tiger-server>
Mail-Followup-To: "Michael S. Tsirkin" <mst@redhat.com>,
	peter.maydell@linaro.org, yu.c.zhang@linux.intel.com,
	ehabkost@redhat.com, imammedo@redhat.com, qemu-devel@nongnu.org,
	pbonzini@redhat.com, stefanha@redhat.com,
	crosthwaite.peter@gmail.com, richard.henderson@linaro.org,
	xiaoguangrong.eric@gmail.com
References: <cover.1545120100.git.yi.z.zhang@linux.intel.com>
	<2dda518be27a44e26dc8b45d6e2dc7f46c890926.1545120100.git.yi.z.zhang@linux.intel.com>
	<20181218083603-mutt-send-email-mst@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181218083603-mutt-send-email-mst@kernel.org>
User-Agent: Mutt/1.5.24 (2015-08-30)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 192.55.52.120
Subject: Re: [Qemu-devel] [PATCH V7 3/6] util/mmap-alloc: support MAP_SYNC
 in qemu_ram_mmap()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: peter.maydell@linaro.org, ehabkost@redhat.com, crosthwaite.peter@gmail.com,
	richard.henderson@linaro.org, qemu-devel@nongnu.org,
	yu.c.zhang@linux.intel.com, stefanha@redhat.com,
	imammedo@redhat.com, pbonzini@redhat.com, xiaoguangrong.eric@gmail.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 2018-12-18 at 08:52:09 -0500, Michael S. Tsirkin wrote:
> On Tue, Dec 18, 2018 at 04:17:12PM +0800, Zhang Yi wrote:
> > When a file supporting DAX is used as vNVDIMM backend, mmap it with
> > MAP_SYNC flag in addition can guarantee the persistence of guest write
> > to the backend file without other QEMU actions (e.g., periodic fsync()
> > by QEMU).
> > 
> > A set of RAM_SYNC flags are added to qemu_ram_mmap():
> > 
> > Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
> > Signed-off-by: Zhang Yi <yi.z.zhang@linux.intel.com>
> 
> Should we be reusing RAM_ flags? These are used widely
> already -are you going to allow RAM_SYNC everywhere
> where other RAM flags are legal?
> E.g. memory_region_init_ram_from_file?
To reuse the RAM_* is much straightforward, just like RAM_SHARE, it is a
mmmap flag, and we will check the inlegal flags at a easy way.

assert((ram_flags & ~(RAM_SHARED | RAM_PMEM | RAM_SYNC)) == 0);

What do you think, do you have a better choice? Thanks, Micheal.
> 
> 
> > ---
> >  exec.c                    |  2 +-
> >  include/exec/memory.h     |  3 +++
> >  include/exec/ram_addr.h   |  1 +
> >  include/qemu/mmap-alloc.h |  1 +
> >  include/qemu/osdep.h      | 29 +++++++++++++++++++++++++++++
> >  util/mmap-alloc.c         | 14 ++++++++++----
> >  6 files changed, 45 insertions(+), 5 deletions(-)
> > 
> > diff --git a/exec.c b/exec.c
> > index e92a7da..dc4d180 100644
> > --- a/exec.c
> > +++ b/exec.c
> > @@ -2241,7 +2241,7 @@ RAMBlock *qemu_ram_alloc_from_fd(ram_addr_t size, MemoryRegion *mr,
> >      int64_t file_size;
> >  
> >      /* Just support these ram flags by now. */
> > -    assert((ram_flags & ~(RAM_SHARED | RAM_PMEM)) == 0);
> > +    assert((ram_flags & ~(RAM_SHARED | RAM_PMEM | RAM_SYNC)) == 0);
> >  
> >      if (xen_enabled()) {
> >          error_setg(errp, "-mem-path not supported with Xen");
> > diff --git a/include/exec/memory.h b/include/exec/memory.h
> > index 667466b..33a4e2c 100644
> > --- a/include/exec/memory.h
> > +++ b/include/exec/memory.h
> > @@ -126,6 +126,9 @@ typedef struct IOMMUNotifier IOMMUNotifier;
> >  /* RAM is a persistent kind memory */
> >  #define RAM_PMEM (1 << 5)
> >  
> > +/* RAM can be mmap by a MAP_SYNC flag */
> 
> "RAM is mmap-ed with MAP_SYNC"
> 
> > +#define RAM_SYNC (1 << 6)
> > +
> >  static inline void iommu_notifier_init(IOMMUNotifier *n, IOMMUNotify fn,
> >                                         IOMMUNotifierFlag flags,
> >                                         hwaddr start, hwaddr end,
> 
> 
> 
> 
> 
> > diff --git a/include/exec/ram_addr.h b/include/exec/ram_addr.h
> > index 9ecd911..d239ce7 100644
> > --- a/include/exec/ram_addr.h
> > +++ b/include/exec/ram_addr.h
> > @@ -87,6 +87,7 @@ long qemu_getrampagesize(void);
> >   *              or bit-or of following values
> >   *              - RAM_SHARED: mmap the backing file or device with MAP_SHARED
> >   *              - RAM_PMEM: the backend @mem_path or @fd is persistent memory
> > + *              - RAM_SYNC:   mmap with MAP_SYNC flag
> >   *              Other bits are ignored.
> >   *  @mem_path or @fd: specify the backing file or device
> >   *  @errp: pointer to Error*, to store an error if it happens
> > diff --git a/include/qemu/mmap-alloc.h b/include/qemu/mmap-alloc.h
> > index 6fe6ed4..1755a8b 100644
> > --- a/include/qemu/mmap-alloc.h
> > +++ b/include/qemu/mmap-alloc.h
> > @@ -18,6 +18,7 @@ size_t qemu_mempath_getpagesize(const char *mem_path);
> >   *  @flags: specifies additional properties of the mapping, which can be one or
> >   *          bit-or of following values
> >   *          - RAM_SHARED: mmap with MAP_SHARED flag
> > + *          - RAM_SYNC:   mmap with MAP_SYNC flag
> >   *          Other bits are ignored.
> >   *
> >   * Return:
> > diff --git a/include/qemu/osdep.h b/include/qemu/osdep.h
> > index 3bf48bc..f94ea68 100644
> > --- a/include/qemu/osdep.h
> > +++ b/include/qemu/osdep.h
> > @@ -410,6 +410,35 @@ void qemu_anon_ram_free(void *ptr, size_t size);
> >  #  define QEMU_VMALLOC_ALIGN getpagesize()
> >  #endif
> >  
> > +/*
> > + * MAP_SHARED_VALIDATE and MAP_SYNC are introduced in Linux kernel
> > + * 4.15, so they may not be defined when compiling on older kernels.
> 
> Then you want to import the relevant headers into linux-headers
> using scripts/update-linux-headers.sh. Pls do not duplicate code.
Indeed, will update it. 
> 
> > + */
> > +#ifdef CONFIG_LINUX
> > +
> > +#include <sys/mman.h>
> > +
> > +#ifndef MAP_SHARED_VALIDATE
> > +#define MAP_SHARED_VALIDATE   0x3
> > +#endif
> > +
> > +#ifndef MAP_SYNC
> > +#define MAP_SYNC              0x80000
> > +#endif
> > +
> > +/* MAP_SYNC is only available with MAP_SHARED_VALIDATE. */
> > +#define MAP_SYNC_FLAGS (MAP_SYNC | MAP_SHARED_VALIDATE)
> 
> Given mmap flags tend to start with MAP_, adding our own ones
> unconditionally is not a good idea.
How about to move the define to other place? 
> 
> 
> > +
> > +#else  /* !CONFIG_LINUX */
> > +
> > +#define MAP_SHARED_VALIDATE   0x0
> > +#define MAP_SYNC              0x0
> > +
> > +#define QEMU_HAS_MAP_SYNC     false
> 
> Isn't just checking MAP_SYNC enough?
> 
> > +#define MAP_SYNC_FLAGS 0
> > +
> > +#endif /* CONFIG_LINUX */
> > +
> >  #ifdef CONFIG_POSIX
> >  struct qemu_signalfd_siginfo {
> >      uint32_t ssi_signo;   /* Signal number */
> > diff --git a/util/mmap-alloc.c b/util/mmap-alloc.c
> > index 8f0a740..89ae862 100644
> > --- a/util/mmap-alloc.c
> > +++ b/util/mmap-alloc.c
> > @@ -99,6 +99,8 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
> >      void *ptr = mmap(0, total, PROT_NONE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
> >  #endif
> >      bool shared = flags & RAM_SHARED;
> > +    bool is_pmem = flags & RAM_PMEM;
> > +    int mmap_xflags = 0;
> >      size_t offset;
> >      void *ptr1;
> >  
> > @@ -109,16 +111,20 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
> >      assert(is_power_of_2(align));
> >      /* Always align to host page size */
> >      assert(align >= getpagesize());
> > +    if ((flags & RAM_SYNC) && shared && is_pmem) {
> > +        mmap_xflags |= MAP_SYNC_FLAGS;
> > +    }
> >  
> >      offset = QEMU_ALIGN_UP((uintptr_t)ptr, align) - (uintptr_t)ptr;
> > + retry_mmap_fd:
> >      ptr1 = mmap(ptr + offset, size, PROT_READ | PROT_WRITE,
> >                  MAP_FIXED |
> >                  (fd == -1 ? MAP_ANONYMOUS : 0) |
> > -                (shared ? MAP_SHARED : MAP_PRIVATE),
> > +                (shared ? MAP_SHARED : MAP_PRIVATE) | mmap_xflags,
> >                  fd, 0);
> > -    if (ptr1 == MAP_FAILED) {
> > -        munmap(ptr, total);
> > -        return MAP_FAILED;
> > +    if ((ptr1 == MAP_FAILED) && (mmap_xflags & MAP_SYNC_FLAGS)) {
> > +        mmap_xflags &= ~MAP_SYNC_FLAGS;
> > +        goto retry_mmap_fd;
> >      }
> >  
> >      if (offset > 0) {
> > -- 
> > 2.7.4

