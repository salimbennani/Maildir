Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:30:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9051E5805F0;
	Tue, 18 Dec 2018 22:04:10 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 22:04:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Au3VDGxSCC7EjLmyWTTWut8DbZdpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBCGt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+kaxVrhGmqRN9zY7bb52aNOFmfq7fZt4aWXZNU9xNWyFbHo+w?=
 =?us-ascii?q?c40CBPcBM+ZCqIn9okMDowa5BQmqC+Pk1zlGhn7r3aYn1OkhCgbG3AovH9IKsX?=
 =?us-ascii?q?TUsc76NL0IXuCrzanIyzrDYuhY2Tjm8oTHbhchofSVUL92bMHfylEvGhvbglmM?=
 =?us-ascii?q?rYHpJS6Z2+oTv2SB8uZtVv6jh3QmpgxzujSj2MYhhpfVio8Q11zI6Th2zYMpKt?=
 =?us-ascii?q?GkS0N3fNupHIZMuyyfMoZ6X80vTmd1sygg0LIGo4S0fC0SxZQn2RHfb/uHfpCW?=
 =?us-ascii?q?4hLsSumROy10hHF7d7KlgRa970ygxvf7Vsmu31ZGtitFkt/SuXARzxHf9NSLR/?=
 =?us-ascii?q?9n8ku81zuDyRrf5vxHLEwoj6bWKpwszqY1lpUJsETDGiH2mF/xjK+Tbkgk/umo?=
 =?us-ascii?q?6+L6YrTpv5OcNJF7ihv4MqswnsyzGOM4MwYIX2eF4+Sxz6Pj/ULnT7VQlPE2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GQhV0pws6xqnFTepzMwYnWUbLFJCYB+Hi4npO1LQL/ziAva/?=
 =?us-ascii?q?nk+hkDNqx/DAI73gDY/BLnnFkLf9Y7l971RQxxY0zdBa/5hUEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFh85PBa1w+b7Etp90ZkSWWKSAqCDNqPSvkSF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWUKvg0gQ+Dwi12CVjhTZ3C1X6?=
 =?us-ascii?q?8n4jE7CYSmDZrMR4y3gbyB2ju7EYNSZmxcFl+MFnLofZ2eW/gQcCKSPtNhkjsc?=
 =?us-ascii?q?WLe7UI8h1RautAzgx7p9NOXU+DYVtZbi1Nhz+u3Smgs+9T1yD8SBzW6NS3t4kX?=
 =?us-ascii?q?8PRz8zxKp/u1Byyk+f0ahkhPxVDd9T6OlPUgsgMZ7czvZ1C9b9Wg/aeteJSVCm?=
 =?us-ascii?q?QsipAD0rT9IxxcMObFh5G9m4kh/D2C+qCacPl7OXHJw07r7c33/pKslg0XnGyr?=
 =?us-ascii?q?cug0MmQsRVM22mnbBw9w7UC47NkEWZkqKqeL8Y3C7M8meD0GWPsFtZUA52TaXK?=
 =?us-ascii?q?Q3QfalHKotT+40PIV6WuBqg/Mgtd1c6CLbNHZcDzglVYWvjvItTebHi3m2erGx?=
 =?us-ascii?q?mIwKiBbI7re2UbwSXcB1IIkwEV/XaaKwc+Aj2trH7ZDDxrDVjveV/j8fFiqHOn?=
 =?us-ascii?q?SU851x2Kb0xk17qy5h4VhfydR+kP3r4evychsTF0HFe739LZENeAowthfKNBYd?=
 =?us-ascii?q?Iy+ltH1GTZtxBjMZykNaxtmlkecwFvtUP0yxp3EplAkdQtrH4y1gVyLbyX0Vxf?=
 =?us-ascii?q?eDKYx5z/IaDXJXTo8xCpaK7W3U/e3c2S+qcO7vQ4tlrisBuoFkok73Vozd1V32?=
 =?us-ascii?q?GA6ZXNCQoYSYjxXVov9xhmu7HaZTEw5oPJ1XF2Laa4qD7D29IzC+sjxRatZNNf?=
 =?us-ascii?q?MKKCFA/vHMwWHcmuKOo2m1e3ahIIJvxd9KkxP8m+bfuJxLarPPp8nDKhlWlH+o?=
 =?us-ascii?q?F93V6W+CpmV+HI2IwJw/eG0QudVjfwlUuuvdrzmY9Zez4SBG2/yS7/CY5VZ61y?=
 =?us-ascii?q?e5sLCGi0L822wNV+m4DiW3pC+FG/AFMG3dejeQCOYFzlwQ1QyUMXrGSnmCu51T?=
 =?us-ascii?q?B1kyslrrGC3CzI2OnicBsHOmhWRGhtl1vsII60j8wEU0isdQQmiByl5UPizahB?=
 =?us-ascii?q?uKt/N3XTQVtPfyXuLWFtSLGwtrmBY85I8p8oqj9YUOe/YVCbTL7yvR0a3jjnH2?=
 =?us-ascii?q?tfwjA7aj6rto/4nxx8lGKSMnJzoGDFdsF3wBfV/MbcSuJJ3joaWCl4jiHaB1im?=
 =?us-ascii?q?MNmu59mUlZbDsualWmKlV51TdzTrzIyauCu6421qHQOwn/SpltL7Fgg61Dfx18?=
 =?us-ascii?q?N2WiXQsBb8fo7r2ry5Me19f0lkHl/869dgFYF4nYs9n5UQ2XkchpWI8nsLi2bz?=
 =?us-ascii?q?MdNH2a3gaHoBXyIEw9nQ4AL9wk1sMmqJx57lVnWa2sZhYti6YmAM1S4n4cFFFr?=
 =?us-ascii?q?yU7KBakitvuVW3sxjRYfdmkzcZyPsu7mMagu4TtAosyCWdHq4dHU1CMSPwkBSI?=
 =?us-ascii?q?6si0rL9La2a3bbiwyE1+kMi9DLGFpwFQQnf4dY0kHS9t9cV/K1PM3Wb36oHlft?=
 =?us-ascii?q?nQcN0SugeVkxfGk+haNpYxmuAWiipgPGL3pWclxPIjjRxywZG6u5CKJH5386K+?=
 =?us-ascii?q?Bh5YKyf5Z8cO+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLNCZ+rMm+YJGIDwdV+XhWdJ1FfgAMJXDU8hJE5DRunxMjg?=
 =?us-ascii?q?cEd/+zAQ6UT0qhpKyuJ0KRb/Vn3TqxuvajcxUJKfNgZZ7hle50fJNsyT9uJyHy?=
 =?us-ascii?q?ZF/p24sQyCMGqbax5TDWEOXEyECEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB5FNrYmzUMSCwXljjBb82BpBe79S14sN?=
 =?us-ascii?q?q/8OnwWA/04YuPCr1SMchg+hysgKeDMfKQizh9KTpCypwMwnrIwqAF3FEOkyFu?=
 =?us-ascii?q?ayWtEbMYuCHXUaLfgbVXAAAbai9pMMtI7rkx3g1MOc7dl9P02aR0jv8zC1dZS1?=
 =?us-ascii?q?PhntulatANI2G4LFnHHlqENKyaJT3XxMH6eb+8SbxVjOlOqxK8oyqUE0/9MTSF?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?Vkc0JCtLuQ7SZZgvV5A2NA73plIvOCmyaW9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrts9622hx72Lyzx6QF9NpyxNiYajo0pvI+Pa+4NGVHKC+wgCuy?=
 =?us-ascii?q?HYXxIHu9doFPXxtK1KjNvCjqT+LHFF6d2CruUGAM2BE8WBPzIFMAehTCXTCgQB?=
 =?us-ascii?q?TCOhL2jBhkpSuP+YsHaSq85p+dDXhJMSR+oDBxQOHfQABxE9EQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AJAAC13hlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGBMCqCESeMdY0+aJFjhnMQAQEYEwGHJSI3Bg0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgpIwyCNiKCZQIBAwECJBkBATcBBQkBAVADKSsGAQ0FB?=
 =?us-ascii?q?YJSS4ICAQSaNYsKAQEBgWozgnYBAQWHLAiHfoRBF4F/gRGCXYR/hhaJRIF5hBd?=
 =?us-ascii?q?+kFYJgimPKySBXYghL4cpLIkakAkCAgICCQIUgVyBeDMaI4M8ghsLAReDSop0I?=
 =?us-ascii?q?DGBBQEBixOCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AJAAC13hlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGBMCqCESeMdY0+aJFjhnMQAQEYEwGHJSI3Bg0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgpIwyCNiKCZQIBAwECJBkBATcBBQkBAVADKSsGAQ0FBYJSS4ICAQSaNYs?=
 =?us-ascii?q?KAQEBgWozgnYBAQWHLAiHfoRBF4F/gRGCXYR/hhaJRIF5hBd+kFYJgimPKySBX?=
 =?us-ascii?q?YghL4cpLIkakAkCAgICCQIUgVyBeDMaI4M8ghsLAReDSop0IDGBBQEBixOCTQE?=
 =?us-ascii?q?B?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="56947559"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 22:04:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728133AbeLSGDs (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 01:03:48 -0500
Received: from mx0a-00082601.pphosted.com ([67.231.145.42]:41642 "EHLO
        mx0a-00082601.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1725290AbeLSGCp (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 01:02:45 -0500
Received: from pps.filterd (m0044008.ppops.net [127.0.0.1])
        by mx0a-00082601.pphosted.com (8.16.0.27/8.16.0.27) with SMTP id wBJ5wcsd017135
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 22:02:44 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : in-reply-to : references : mime-version :
 content-type; s=facebook; bh=WGMviR76W7ZSLtIvtBj5jPmGeoOdJ0D0/oexGvtmvDs=;
 b=UX3nALJhAn8WonFDvHmSUrE1YPqSWZKgLDK4XeGAkAZyWqSK+haNuN0Y60IeKjTatGsw
 WDasWZdFPC4ifXcArHAGkIs50XhXs/Almt3Pfo1BpZiEiyaMH6VaVA8SJpoOj/TFeA5V
 6M+pJwevcZZ4fRpErYSELYD56x+W+VwMct8= 
Received: from mail.thefacebook.com ([199.201.64.23])
        by mx0a-00082601.pphosted.com with ESMTP id 2pff9c04hs-10
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 22:02:43 -0800
Received: from mx-out.facebook.com (2620:10d:c081:10::13) by
 mail.thefacebook.com (2620:10d:c081:35::127) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA) id 15.1.1531.3;
 Tue, 18 Dec 2018 22:02:40 -0800
Received: by devbig006.ftw2.facebook.com (Postfix, from userid 4523)
        id 9D01D62E1FFC; Tue, 18 Dec 2018 22:02:37 -0800 (PST)
Smtp-Origin-Hostprefix: devbig
From: Song Liu <songliubraving@fb.com>
Smtp-Origin-Hostname: devbig006.ftw2.facebook.com
To: <linux-kernel@vger.kernel.org>, <netdev@vger.kernel.org>
CC: Song Liu <songliubraving@fb.com>, <peterz@infradead.org>,
        <acme@kernel.org>, <ast@kernel.org>, <daniel@iogearbox.net>,
        <kernel-team@fb.com>
Smtp-Origin-Cluster: ftw2c04
Subject: [PATCH v4 perf, bpf-next 6/7] perf util: handle PERF_RECORD_BPF_EVENT
Date: Tue, 18 Dec 2018 22:02:26 -0800
Message-ID: <20181219060227.1057679-8-songliubraving@fb.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181219060227.1057679-1-songliubraving@fb.com>
References: <20181219060227.1057679-1-songliubraving@fb.com>
X-FB-Internal: Safe
MIME-Version: 1.0
Content-Type: text/plain
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-19_03:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds basic handling of PERF_RECORD_BPF_EVENT.
Tracking of PERF_RECORD_BPF_EVENT is OFF by default. Option --bpf-event
is added to turn it on.

Signed-off-by: Song Liu <songliubraving@fb.com>
---
 tools/perf/builtin-record.c |  1 +
 tools/perf/perf.h           |  1 +
 tools/perf/util/Build       |  2 ++
 tools/perf/util/bpf-event.c | 15 +++++++++++++++
 tools/perf/util/bpf-event.h | 11 +++++++++++
 tools/perf/util/event.c     | 20 ++++++++++++++++++++
 tools/perf/util/event.h     | 16 ++++++++++++++++
 tools/perf/util/evsel.c     | 10 ++++++++++
 tools/perf/util/evsel.h     |  1 +
 tools/perf/util/machine.c   |  3 +++
 tools/perf/util/session.c   |  4 ++++
 tools/perf/util/tool.h      |  3 ++-
 12 files changed, 86 insertions(+), 1 deletion(-)
 create mode 100644 tools/perf/util/bpf-event.c
 create mode 100644 tools/perf/util/bpf-event.h

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 488779bc4c8d..8983ab2e60dd 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1604,6 +1604,7 @@ static struct option __record_options[] = {
 	OPT_BOOLEAN(0, "tail-synthesize", &record.opts.tail_synthesize,
 		    "synthesize non-sample events at the end of output"),
 	OPT_BOOLEAN(0, "overwrite", &record.opts.overwrite, "use overwrite mode"),
+	OPT_BOOLEAN(0, "bpf-event", &record.opts.bpf_event, "record bpf events"),
 	OPT_BOOLEAN(0, "strict-freq", &record.opts.strict_freq,
 		    "Fail if the specified frequency can't be used"),
 	OPT_CALLBACK('F', "freq", &record.opts, "freq or 'max'",
diff --git a/tools/perf/perf.h b/tools/perf/perf.h
index 0ed4a34c74c4..a45a85ab38d4 100644
--- a/tools/perf/perf.h
+++ b/tools/perf/perf.h
@@ -66,6 +66,7 @@ struct record_opts {
 	bool	     ignore_missing_thread;
 	bool	     strict_freq;
 	bool	     sample_id;
+	bool	     bpf_event;
 	unsigned int freq;
 	unsigned int mmap_pages;
 	unsigned int auxtrace_mmap_pages;
diff --git a/tools/perf/util/Build b/tools/perf/util/Build
index b7bf201fe8a8..99455f30c264 100644
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@ -151,6 +151,8 @@ endif
 
 libperf-y += perf-hooks.o
 
+libperf-$(CONFIG_LIBBPF) += bpf-event.o
+
 libperf-$(CONFIG_CXX) += c++/
 
 CFLAGS_config.o   += -DETC_PERFCONFIG="BUILD_STR($(ETC_PERFCONFIG_SQ))"
diff --git a/tools/perf/util/bpf-event.c b/tools/perf/util/bpf-event.c
new file mode 100644
index 000000000000..f24f75506f51
--- /dev/null
+++ b/tools/perf/util/bpf-event.c
@@ -0,0 +1,15 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <errno.h>
+#include <bpf/bpf.h>
+#include "bpf-event.h"
+#include "debug.h"
+#include "symbol.h"
+
+int machine__process_bpf_event(struct machine *machine __maybe_unused,
+			       union perf_event *event,
+			       struct perf_sample *sample __maybe_unused)
+{
+	if (dump_trace)
+		perf_event__fprintf_bpf_event(event, stderr);
+	return 0;
+}
diff --git a/tools/perf/util/bpf-event.h b/tools/perf/util/bpf-event.h
new file mode 100644
index 000000000000..d5ca355dd298
--- /dev/null
+++ b/tools/perf/util/bpf-event.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __PERF_BPF_EVENT_H
+#define __PERF_BPF_EVENT_H
+
+#include "machine.h"
+
+int machine__process_bpf_event(struct machine *machine,
+			       union perf_event *event,
+			       struct perf_sample *sample);
+
+#endif
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index 4b47194eaa4b..0e2eb3a3eab4 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -25,6 +25,7 @@
 #include "asm/bug.h"
 #include "stat.h"
 #include "session.h"
+#include "bpf-event.h"
 
 static const char *perf_event__names[] = {
 	[0]					= "TOTAL",
@@ -45,6 +46,7 @@ static const char *perf_event__names[] = {
 	[PERF_RECORD_SWITCH_CPU_WIDE]		= "SWITCH_CPU_WIDE",
 	[PERF_RECORD_NAMESPACES]		= "NAMESPACES",
 	[PERF_RECORD_KSYMBOL]			= "KSYMBOL",
+	[PERF_RECORD_BPF_EVENT]			= "BPF_EVENT",
 	[PERF_RECORD_HEADER_ATTR]		= "ATTR",
 	[PERF_RECORD_HEADER_EVENT_TYPE]		= "EVENT_TYPE",
 	[PERF_RECORD_HEADER_TRACING_DATA]	= "TRACING_DATA",
@@ -1345,6 +1347,14 @@ int perf_event__process_ksymbol(struct perf_tool *tool __maybe_unused,
 	return machine__process_ksymbol(machine, event, sample);
 }
 
+int perf_event__process_bpf_event(struct perf_tool *tool __maybe_unused,
+				  union perf_event *event,
+				  struct perf_sample *sample __maybe_unused,
+				  struct machine *machine)
+{
+	return machine__process_bpf_event(machine, event, sample);
+}
+
 size_t perf_event__fprintf_mmap(union perf_event *event, FILE *fp)
 {
 	return fprintf(fp, " %d/%d: [%#" PRIx64 "(%#" PRIx64 ") @ %#" PRIx64 "]: %c %s\n",
@@ -1484,6 +1494,13 @@ size_t perf_event__fprintf_ksymbol(union perf_event *event, FILE *fp)
 		       event->ksymbol_event.name);
 }
 
+size_t perf_event__fprintf_bpf_event(union perf_event *event, FILE *fp)
+{
+	return fprintf(fp, " bpf event with type %u, flags %u, id %u\n",
+		       event->bpf_event.type, event->bpf_event.flags,
+		       event->bpf_event.id);
+}
+
 size_t perf_event__fprintf(union perf_event *event, FILE *fp)
 {
 	size_t ret = fprintf(fp, "PERF_RECORD_%s",
@@ -1522,6 +1539,9 @@ size_t perf_event__fprintf(union perf_event *event, FILE *fp)
 	case PERF_RECORD_KSYMBOL:
 		ret += perf_event__fprintf_ksymbol(event, fp);
 		break;
+	case PERF_RECORD_BPF_EVENT:
+		ret += perf_event__fprintf_bpf_event(event, fp);
+		break;
 	default:
 		ret += fprintf(fp, "\n");
 	}
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index 100b59f1fdec..eef795e89bef 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -96,6 +96,16 @@ struct ksymbol_event {
 	char name[KSYM_NAME_LEN];
 };
 
+struct bpf_event {
+	struct perf_event_header header;
+	u16 type;
+	u16 flags;
+	u32 id;
+
+	/* for bpf_prog types */
+	u8 tag[BPF_TAG_SIZE];  // prog tag
+};
+
 #define PERF_SAMPLE_MASK				\
 	(PERF_SAMPLE_IP | PERF_SAMPLE_TID |		\
 	 PERF_SAMPLE_TIME | PERF_SAMPLE_ADDR |		\
@@ -664,6 +674,7 @@ union perf_event {
 	struct time_conv_event		time_conv;
 	struct feature_event		feat;
 	struct ksymbol_event		ksymbol_event;
+	struct bpf_event		bpf_event;
 };
 
 void perf_event__print_totals(void);
@@ -767,6 +778,10 @@ int perf_event__process_ksymbol(struct perf_tool *tool,
 				union perf_event *event,
 				struct perf_sample *sample,
 				struct machine *machine);
+int perf_event__process_bpf_event(struct perf_tool *tool,
+				  union perf_event *event,
+				  struct perf_sample *sample,
+				  struct machine *machine);
 int perf_tool__process_synth_event(struct perf_tool *tool,
 				   union perf_event *event,
 				   struct machine *machine,
@@ -832,6 +847,7 @@ size_t perf_event__fprintf_thread_map(union perf_event *event, FILE *fp);
 size_t perf_event__fprintf_cpu_map(union perf_event *event, FILE *fp);
 size_t perf_event__fprintf_namespaces(union perf_event *event, FILE *fp);
 size_t perf_event__fprintf_ksymbol(union perf_event *event, FILE *fp);
+size_t perf_event__fprintf_bpf_event(union perf_event *event, FILE *fp);
 size_t perf_event__fprintf(union perf_event *event, FILE *fp);
 
 int kallsyms__get_function_start(const char *kallsyms_filename,
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index de34ce875648..1e8b7d2897e3 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -1036,6 +1036,8 @@ void perf_evsel__config(struct perf_evsel *evsel, struct record_opts *opts,
 	attr->mmap2 = track && !perf_missing_features.mmap2;
 	attr->comm  = track;
 	attr->ksymbol = track && !perf_missing_features.ksymbol;
+	attr->bpf_event = track && opts->bpf_event &&
+		!perf_missing_features.bpf_event;
 
 	if (opts->record_namespaces)
 		attr->namespaces  = track;
@@ -1654,6 +1656,7 @@ int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
 	PRINT_ATTRf(write_backward, p_unsigned);
 	PRINT_ATTRf(namespaces, p_unsigned);
 	PRINT_ATTRf(ksymbol, p_unsigned);
+	PRINT_ATTRf(bpf_event, p_unsigned);
 
 	PRINT_ATTRn("{ wakeup_events, wakeup_watermark }", wakeup_events, p_unsigned);
 	PRINT_ATTRf(bp_type, p_unsigned);
@@ -1815,6 +1818,8 @@ int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 		evsel->attr.read_format &= ~(PERF_FORMAT_GROUP|PERF_FORMAT_ID);
 	if (perf_missing_features.ksymbol)
 		evsel->attr.ksymbol = 0;
+	if (perf_missing_features.bpf_event)
+		evsel->attr.bpf_event = 0;
 retry_sample_id:
 	if (perf_missing_features.sample_id_all)
 		evsel->attr.sample_id_all = 0;
@@ -1964,6 +1969,11 @@ int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 		perf_missing_features.ksymbol = true;
 		pr_debug2("switching off ksymbol\n");
 		goto fallback_missing_features;
+	} else if (!perf_missing_features.bpf_event &&
+		   evsel->attr.bpf_event) {
+		perf_missing_features.bpf_event = true;
+		pr_debug2("switching off bpf_event\n");
+		goto fallback_missing_features;
 	} else if (!perf_missing_features.sample_id_all) {
 		perf_missing_features.sample_id_all = true;
 		pr_debug2("switching off sample_id_all\n");
diff --git a/tools/perf/util/evsel.h b/tools/perf/util/evsel.h
index c647c1963f7a..490d7972e87a 100644
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@ -169,6 +169,7 @@ struct perf_missing_features {
 	bool write_backward;
 	bool group_read;
 	bool ksymbol;
+	bool bpf_event;
 };
 
 extern struct perf_missing_features perf_missing_features;
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 5b50442d77c9..61854e2ded95 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -21,6 +21,7 @@
 #include "unwind.h"
 #include "linux/hash.h"
 #include "asm/bug.h"
+#include "bpf-event.h"
 
 #include "sane_ctype.h"
 #include <symbol/kallsyms.h>
@@ -1869,6 +1870,8 @@ int machine__process_event(struct machine *machine, union perf_event *event,
 		ret = machine__process_switch_event(machine, event); break;
 	case PERF_RECORD_KSYMBOL:
 		ret = machine__process_ksymbol(machine, event, sample); break;
+	case PERF_RECORD_BPF_EVENT:
+		ret = machine__process_bpf_event(machine, event, sample); break;
 	default:
 		ret = -1;
 		break;
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index 2c1976a66164..640c78871cb5 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -373,6 +373,8 @@ void perf_tool__fill_defaults(struct perf_tool *tool)
 		tool->context_switch = perf_event__process_switch;
 	if (tool->ksymbol == NULL)
 		tool->ksymbol = perf_event__process_ksymbol;
+	if (tool->bpf_event == NULL)
+		tool->bpf_event = perf_event__process_bpf_event;
 	if (tool->read == NULL)
 		tool->read = process_event_sample_stub;
 	if (tool->throttle == NULL)
@@ -1304,6 +1306,8 @@ static int machines__deliver_event(struct machines *machines,
 		return tool->context_switch(tool, event, sample, machine);
 	case PERF_RECORD_KSYMBOL:
 		return tool->ksymbol(tool, event, sample, machine);
+	case PERF_RECORD_BPF_EVENT:
+		return tool->bpf_event(tool, event, sample, machine);
 	default:
 		++evlist->stats.nr_unknown_events;
 		return -1;
diff --git a/tools/perf/util/tool.h b/tools/perf/util/tool.h
index 9c81ca2f3cf7..250391672f9f 100644
--- a/tools/perf/util/tool.h
+++ b/tools/perf/util/tool.h
@@ -54,7 +54,8 @@ struct perf_tool {
 			context_switch,
 			throttle,
 			unthrottle,
-			ksymbol;
+			ksymbol,
+			bpf_event;
 
 	event_attr_op	attr;
 	event_attr_op	event_update;
-- 
2.17.1

