Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:30:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 318895805CF;
	Tue, 18 Dec 2018 22:04:08 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 22:04:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A75mAvhQzKEbT9zreHVH14jxeX9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBeOt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+kaxVrhGmqRN9zY7bb52aNOFmfq7fZt4aWXZNU9xNWyFbHo+w?=
 =?us-ascii?q?c40CBPcBM+ZCqIn9okMDowa5BQmqC+Pk1zlGhn7r3aYn1OkhCgbG3AovH9IKsX?=
 =?us-ascii?q?TUsc76NL0IXuCrzanIyzrDYuhY2Tjm8oTHbhchofSVUL92bMHfylEvGhvbglmM?=
 =?us-ascii?q?rYHpJS6Z2+oTv2SB8uZtVv6jh3QmpgxzujSj2MYhhpfVio8Q11zI6Th2zYMpKt?=
 =?us-ascii?q?GkUkF3fNupHZVVuiyfKod7TMUvSHxytikg0L0Jo5u7cTAKyJs5wx7fbOSKc5aH?=
 =?us-ascii?q?4h39TuadOzR4i2x/eLK5mRmy9VKsyurmVsm7yFpKryxFncfQtn0VyRDf9syKRu?=
 =?us-ascii?q?Fg8kqvxzqDzR3f5+JYLUwulKfWKYYtwrsqmZoStUTDEDX2mELzjKKOckUk++6o?=
 =?us-ascii?q?6/noY7n/pZ+TKZV0igfgPaQqg8C/Buo5Mg4QUGiB4um8yrLj8lPjQLlQjf05jL?=
 =?us-ascii?q?PZsJbEKsQfvKK5BBVV0ok75xalEzimyMgYnWUALF9dfBKHjovpNE/ULPH3EPey?=
 =?us-ascii?q?mFCskDZtx/DbMbztGJTNLn7fkLj/ebZx8VJTyA02zdpH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYDgU2Mw2ow+n9D9VxzIMeWX+VDa+fP6PfqluI5uMpI+mRa44Zojf9K/455/Hw?=
 =?us-ascii?q?iX81g0MSfa6s3ZEPcnC3AuxmI1mFYXrrmtoBE2AKsRQkQOzpj12CVzhTZ3GpUq?=
 =?us-ascii?q?I45zE7Dp+mDIjZSoCshryBwDm0HplMam9aDVCMFG/id5+YVPcUdCKSPshhnyQe?=
 =?us-ascii?q?Wri6S48h0hKuuBXgy7V9LOrZ4SkYtZPl1Nho6OzfjxAy9TpoD8uD12GBVX17nm?=
 =?us-ascii?q?QNRzUuxqBwvVR9ykuf0ah/m/FYFsZc5/VTXgc+NJ7T1ep6C9/pVwLFf9eJTkum?=
 =?us-ascii?q?Q9q8DTEwSNIx38EBY0JnF9q+iRDD2jKgA6UJmLyTGJw07qXc0mDsKMln1XbJyr?=
 =?us-ascii?q?Mtj1k8TctJLm2pmKh/+w/XB47KlkWZk72ndaAd3C7L6WeCwnCCvEBeUA5sT6rF?=
 =?us-ascii?q?WWoTaVfRrdT8/knCVaOhCaw7Mgtdzs6PMrZFZcf3jVpYXvvjOM7RY2Sqm2iuAx?=
 =?us-ascii?q?aF3beMbIvse2UA0yTREkkEkwYP/XmYMQgyHDuuo2XbDDZ2D1Lgf1vs8fViqHO8?=
 =?us-ascii?q?VkI00wCKb0hm17qp+h4UheaQS+8J0rIDoichrzR0HFCy39/ND9qApgxhfLhTYN?=
 =?us-ascii?q?8n4VdH037ZuBJ5PpC6M69igVseeRxtv0zyzxV3FplAkc8yoXwwyAp9N62Z301B?=
 =?us-ascii?q?dj+Cxp/wJ6DYJXP0/BCsbK7WxErT0NKX+qcJ9fQ5pE/vvACvFko+7Xpn18NZ3G?=
 =?us-ascii?q?eb5pXPFAASS47+Ul4r9xhmoLHXeik8557O2XJwK6W1sz/C1MgvBOsq0Ruge9Zf?=
 =?us-ascii?q?MKWZFA79CcEaBs6uKPA0lFitdB4LIOdS9KssNcO8a/SGwLKrPPpnnD++l2RH4Z?=
 =?us-ascii?q?xy3ViW9yVhTe7ExZAFzO+C3guGTjvzkE2ussTqlo9afzESGWy/xDPgBI5QYK1y?=
 =?us-ascii?q?YIkKBX2vI82x2tVxmZrtV2RE+16kAlMMwNWpdgaKb1zhwQ1Q0lwaoHymmSeizz?=
 =?us-ascii?q?14iSoprreZ3CHVx+TidRwHOnNERWV4jFfsJ5S0gM4eXESycwcpkx6l717gx6dH?=
 =?us-ascii?q?vKR/M3XTQUBQcij0NW5iSKiwtrmFY8JV85MnqyZXUOe9YVCcVLH9pQAX0yfiH2?=
 =?us-ascii?q?tY2TA6eCumupT/nxxmlm2dKGx/o2beecF13R3f/sDTReZN3joaQyl1kTnWCUK7?=
 =?us-ascii?q?P9Wz/9WUlpHDv/u6V2KgUJ1TbCbqwZmBtCu9+W1lHxm/k+qvld3gFAgwyTX72M?=
 =?us-ascii?q?VyVSXUsBb8ZZHm16egPuJmZEVoBEL85NB8GoFxiYYwgJAQ2X4HhpSa53YHkGHz?=
 =?us-ascii?q?MclF1qL6dnYCWTkLw9vN6gj/xEJjNm6Jx57+VniFx8thZtq6bXkM1iMz8c9KE7?=
 =?us-ascii?q?uU46JenSRuvFW4tw3RbON5njccz/su9XEbj/sIuAor0iWSHLQSEVNEMizrkhSC?=
 =?us-ascii?q?98q+o7lPZGazbbiw01JzncymDLGHuA1dWWz2epE/HS9r9cV/MUnB0Hny6oHiZd?=
 =?us-ascii?q?nRYsgfthySkxfckedVLIg9meYNhSpiIWj9p2Eqy/YnjRxy2pG3pJOIJH9q/KK9?=
 =?us-ascii?q?Hx5ULDn1Z94I9zHpjKZemNuW3o+1EpVgHDULQIXnTfayHD0OsvTnMh6EECcgpX?=
 =?us-ascii?q?eDBbrfAQif5V9kr33VFpCkKWqXKGMFzdl4RxmdOU9fgB0SXDoghZ40DQSqxM3n?=
 =?us-ascii?q?cEdk6TEd/F/4qh1Qyu12MxnzSHvQpACtaj0sUpiQMAJW7h1e50fSKcGf7uVzHz?=
 =?us-ascii?q?xB/p28tgONLHaXZx9PDWEPVUyJHFTjPrio5dnd/OmUHOu+L/3SYbqQrexSTeuH?=
 =?us-ascii?q?xZWq0oF+5TaDKt2PPmV+D/08wkdDXW52G8XamzUMSiwbjSHNb9ScpBez5CJ3tN?=
 =?us-ascii?q?2/8O/wVQLr5IuPDaZSMNp19xC3h6eDK/CfhCJjJTlE0ZMMwGfCyKID014KlyFu?=
 =?us-ascii?q?az6tHKwaui7QV63QgLFYDh4BZyN3NctF9KY83ghLOc7GhdL5zL94jvgpC1hbUV?=
 =?us-ascii?q?ztgN2mZcsPI2ulLlPIGF6LNKiaJT3M28z3faK8SbhKgOpIrRG/pTabHFHlPjmY?=
 =?us-ascii?q?kznpVhavMfxDjS2BPRxevp29fQhpCWT5UN3mbRi7OsdtjTIq2b00mm/KNWkEPD?=
 =?us-ascii?q?l8aUxNqLiQ7SJegvpnGm1B7mBqLe+LmyuC6+nYK5AWseZkAyhuluJa5mg6xKVR?=
 =?us-ascii?q?7C1eWPN1ny7S/ZZSpATyluiJ1yoiUxdUrDtPrJyEsF8kOqjD8JREH3He80RJpT?=
 =?us-ascii?q?GWBggGqsVNFNLioeZTx8LJmaa1Ly1NpYH658wZUvPTLs3PFHs8eU7yHzjbCAoY?=
 =?us-ascii?q?RySiK2DZiGRTmreZ8XjD/ctykYTlhJdbEuwTb1cyDP5PUkk=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAAG3hlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGBMCqBD4ECJ4x1jT5olmCBcxMBARgDEAGHJSI2Bw0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiKCZQIBAwECJBkBATcBBQkBAVADKSsGA?=
 =?us-ascii?q?Q0FBYJSSwGCAQEEmjWLCgEBAYFqM4J2AQEFhywIh36EQReBf4ERgl2LFYk+gX+?=
 =?us-ascii?q?EF35RkAUJgimEZopFJIIqh1SHWCyJGpAJAgICAgkCFIFNB4IAMxojgzwJghIMF?=
 =?us-ascii?q?xKDOIRRhiMgMYEFAQGNYAEB?=
X-IPAS-Result: =?us-ascii?q?A0AEAAAG3hlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGBMCqBD4ECJ4x1jT5olmCBcxMBARgDEAGHJSI2Bw0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgpIwyCNiKCZQIBAwECJBkBATcBBQkBAVADKSsGAQ0FBYJSSwGCAQE?=
 =?us-ascii?q?EmjWLCgEBAYFqM4J2AQEFhywIh36EQReBf4ERgl2LFYk+gX+EF35RkAUJgimEZ?=
 =?us-ascii?q?opFJIIqh1SHWCyJGpAJAgICAgkCFIFNB4IAMxojgzwJghIMFxKDOIRRhiMgMYE?=
 =?us-ascii?q?FAQGNYAEB?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="55751340"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 22:04:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728118AbeLSGDp (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 01:03:45 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:34802 "EHLO
        mx0a-00082601.pphosted.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1727933AbeLSGCp (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 01:02:45 -0500
Received: from pps.filterd (m0001303.ppops.net [127.0.0.1])
        by m0001303.ppops.net (8.16.0.27/8.16.0.27) with SMTP id wBJ62g3S013616
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 22:02:44 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com; h=from : to : cc : subject
 : date : message-id : in-reply-to : references : mime-version :
 content-type; s=facebook; bh=TOPwOVNfLVT+RHMwYzAnx3oQRuvZkf30d8y9gJuyX4c=;
 b=ZR8jwmiigQqqT1zzVVlsOS5jaJBXwg9KSpUY7N6EqQbySHPDheteFRZ6Pfa2yLj8HmlU
 fqPFWU+K82DhK/+A7TSgnpDfBfVHRXbOVFGZBY+c4seKB8jGxWv+0WuM5vk9wLEpnKld
 9uqynYFIu2tYlXuJ/pxC+okXEG64m9XD5lU= 
Received: from maileast.thefacebook.com ([199.201.65.23])
        by m0001303.ppops.net with ESMTP id 2pfeex07th-8
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 22:02:44 -0800
Received: from mx-out.facebook.com (2620:10d:c0a1:3::13) by
 mail.thefacebook.com (2620:10d:c021:18::171) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA) id 15.1.1531.3;
 Tue, 18 Dec 2018 22:02:38 -0800
Received: by devbig006.ftw2.facebook.com (Postfix, from userid 4523)
        id AA63762E1FCB; Tue, 18 Dec 2018 22:02:37 -0800 (PST)
Smtp-Origin-Hostprefix: devbig
From: Song Liu <songliubraving@fb.com>
Smtp-Origin-Hostname: devbig006.ftw2.facebook.com
To: <linux-kernel@vger.kernel.org>, <netdev@vger.kernel.org>
CC: Song Liu <songliubraving@fb.com>, <peterz@infradead.org>,
        <acme@kernel.org>, <ast@kernel.org>, <daniel@iogearbox.net>,
        <kernel-team@fb.com>
Smtp-Origin-Cluster: ftw2c04
Subject: [PATCH v4 perf, bpf-next 7/7] perf tools: synthesize PERF_RECORD_* for loaded BPF programs
Date: Tue, 18 Dec 2018 22:02:27 -0800
Message-ID: <20181219060227.1057679-9-songliubraving@fb.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181219060227.1057679-1-songliubraving@fb.com>
References: <20181219060227.1057679-1-songliubraving@fb.com>
X-FB-Internal: Safe
MIME-Version: 1.0
Content-Type: text/plain
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-19_03:,,
 signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch synthesize PERF_RECORD_KSYMBOL and PERF_RECORD_BPF_EVENT for
BPF programs loaded before perf-record. This is achieved by gathering
information about all BPF programs via sys_bpf.

Signed-off-by: Song Liu <songliubraving@fb.com>
---
 tools/perf/builtin-record.c |   6 ++
 tools/perf/util/bpf-event.c | 204 ++++++++++++++++++++++++++++++++++++
 tools/perf/util/bpf-event.h |   5 +
 3 files changed, 215 insertions(+)

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 8983ab2e60dd..d239e8bf2f0f 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -41,6 +41,7 @@
 #include "util/perf-hooks.h"
 #include "util/time-utils.h"
 #include "util/units.h"
+#include "util/bpf-event.h"
 #include "asm/bug.h"
 
 #include <errno.h>
@@ -855,6 +856,11 @@ static int record__synthesize(struct record *rec, bool tail)
 		return err;
 	}
 
+	err = perf_event__synthesize_bpf_events(tool, process_synthesized_event,
+						machine, opts);
+	if (err < 0)
+		pr_warning("Couldn't synthesize bpf events.\n");
+
 	err = __machine__synthesize_threads(machine, tool, &opts->target, rec->evlist->threads,
 					    process_synthesized_event, opts->sample_address,
 					    opts->proc_map_timeout, 1);
diff --git a/tools/perf/util/bpf-event.c b/tools/perf/util/bpf-event.c
index f24f75506f51..98208b577533 100644
--- a/tools/perf/util/bpf-event.c
+++ b/tools/perf/util/bpf-event.c
@@ -1,10 +1,24 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <errno.h>
 #include <bpf/bpf.h>
+#include <bpf/btf.h>
+#include <linux/btf.h>
 #include "bpf-event.h"
 #include "debug.h"
 #include "symbol.h"
 
+#define ptr_to_u64(ptr)    ((__u64)(unsigned long)(ptr))
+
+static int snprintf_hex(char *buf, size_t size, unsigned char *data, size_t len)
+{
+	int ret = 0;
+	size_t i;
+
+	for (i = 0; i < len; i++)
+		ret += snprintf(buf + ret, size - ret, "%02x", data[i]);
+	return ret;
+}
+
 int machine__process_bpf_event(struct machine *machine __maybe_unused,
 			       union perf_event *event,
 			       struct perf_sample *sample __maybe_unused)
@@ -13,3 +27,193 @@ int machine__process_bpf_event(struct machine *machine __maybe_unused,
 		perf_event__fprintf_bpf_event(event, stderr);
 	return 0;
 }
+
+/*
+ * Synthesize PERF_RECORD_KSYMBOL and PERF_RECORD_BPF_EVENT for one bpf
+ * program. One PERF_RECORD_BPF_EVENT is generated for the program. And
+ * one PERF_RECORD_KSYMBOL is generated for each sub program.
+ */
+static int perf_event__synthesize_one_bpf_prog(struct perf_tool *tool,
+					       perf_event__handler_t process,
+					       struct machine *machine,
+					       int fd,
+					       union perf_event *event,
+					       struct record_opts *opts)
+{
+	struct ksymbol_event *ksymbol_event = &event->ksymbol_event;
+	struct bpf_event *bpf_event = &event->bpf_event;
+	u32 sub_prog_cnt, i, func_info_rec_size;
+	u8 (*prog_tags)[BPF_TAG_SIZE] = NULL;
+	struct bpf_prog_info info = {};
+	u32 info_len = sizeof(info);
+	void *func_infos = NULL;
+	u64 *prog_addrs = NULL;
+	struct btf *btf = NULL;
+	u32 *prog_lens = NULL;
+	bool has_btf = false;
+	int err = 0;
+
+	/* Call bpf_obj_get_info_by_fd() to get sizes of arrays */
+	err = bpf_obj_get_info_by_fd(fd, &info, &info_len);
+
+	if (err || info_len < 192 /* need field prog_tags */)
+		return -1;
+
+	/* number of ksyms, func_lengths, and tags should match */
+	sub_prog_cnt = info.nr_jited_ksyms;
+	if (sub_prog_cnt != info.nr_prog_tags ||
+	    sub_prog_cnt != info.nr_jited_func_lens)
+		return -1;
+
+	/* check BTF func info support */
+	if (info.btf_id && info.nr_func_info && info.func_info_rec_size) {
+		/* btf func info number should be same as sub_prog_cnt */
+		if (sub_prog_cnt != info.nr_func_info)
+			return -1;
+		if (btf__get_from_id(info.btf_id, &btf))
+			return -1;
+		func_info_rec_size = info.func_info_rec_size;
+		func_infos = malloc(sub_prog_cnt * func_info_rec_size);
+		if (!func_infos)
+			return -1;
+		has_btf = true;
+	}
+
+	/*
+	 * We need address, length, and tag for each sub program.
+	 * Allocate memory and call bpf_obj_get_info_by_fd() again
+	 */
+	prog_addrs = (u64 *)malloc(sizeof(u64) * sub_prog_cnt);
+	prog_lens = (u32 *)malloc(sizeof(u64) * sub_prog_cnt);
+	prog_tags = malloc(sizeof(u8) * BPF_TAG_SIZE * sub_prog_cnt);
+
+	err = !prog_addrs || !prog_lens || !prog_tags;
+	if (err)
+		goto out;
+
+	memset(&info, 0, sizeof(info));
+	info.nr_jited_ksyms = sub_prog_cnt;
+	info.nr_jited_func_lens = sub_prog_cnt;
+	info.nr_prog_tags = sub_prog_cnt;
+	info.jited_ksyms = ptr_to_u64(prog_addrs);
+	info.jited_func_lens = ptr_to_u64(prog_lens);
+	info.prog_tags = ptr_to_u64(prog_tags);
+	info_len = sizeof(info);
+	if (has_btf) {
+		info.nr_func_info = sub_prog_cnt;
+		info.func_info_rec_size = func_info_rec_size;
+		info.func_info = ptr_to_u64(func_infos);
+	}
+
+	err = bpf_obj_get_info_by_fd(fd, &info, &info_len);
+	if (err)
+		goto out;
+
+	/* Synthesize PERF_RECORD_KSYMBOL */
+	for (i = 0; i < sub_prog_cnt; i++) {
+		const struct bpf_func_info *finfo;
+		const char *short_name = NULL;
+		const struct btf_type *t;
+		int name_len;
+
+		*ksymbol_event = (struct ksymbol_event){
+			.header = {
+				.type = PERF_RECORD_KSYMBOL,
+				.misc = PERF_RECORD_MISC_KSYMBOL_TYPE_BPF,
+				.size = sizeof(struct ksymbol_event),
+			},
+			.addr = prog_addrs[i],
+			.len = prog_lens[i],
+		};
+		name_len = snprintf(ksymbol_event->name, KSYM_NAME_LEN,
+				    "bpf_prog_");
+		name_len += snprintf_hex(ksymbol_event->name + name_len,
+					 KSYM_NAME_LEN - name_len,
+					 prog_tags[i], BPF_TAG_SIZE);
+		if (has_btf) {
+			finfo = func_infos + i * info.func_info_rec_size;
+			t = btf__type_by_id(btf, finfo->type_id);
+			short_name = btf__name_by_offset(btf, t->name_off);
+		} else if (i == 0 && sub_prog_cnt == 1) {
+			/* no subprog */
+			if (info.name[0])
+				short_name = info.name;
+		} else
+			short_name = "F";
+		if (short_name)
+			name_len += snprintf(ksymbol_event->name + name_len,
+					     KSYM_NAME_LEN - name_len,
+					     "_%s", short_name);
+
+		ksymbol_event->header.size += PERF_ALIGN(name_len + 1,
+							 sizeof(u64));
+		err = perf_tool__process_synth_event(tool, event,
+						     machine, process);
+	}
+
+	/* Synthesize PERF_RECORD_BPF_EVENT */
+	if (opts->bpf_event) {
+		*bpf_event = (struct bpf_event){
+			.header = {
+				.type = PERF_RECORD_BPF_EVENT,
+				.size = sizeof(struct bpf_event),
+			},
+			.type = PERF_BPF_EVENT_PROG_LOAD,
+			.flags = 0,
+			.id = info.id,
+		};
+		memcpy(bpf_event->tag, prog_tags[i], BPF_TAG_SIZE);
+		err = perf_tool__process_synth_event(tool, event,
+						     machine, process);
+	}
+
+out:
+	free(prog_tags);
+	free(prog_lens);
+	free(prog_addrs);
+	free(func_infos);
+	free(btf);
+	return err ? -1 : 0;
+}
+
+int perf_event__synthesize_bpf_events(struct perf_tool *tool,
+				      perf_event__handler_t process,
+				      struct machine *machine,
+				      struct record_opts *opts)
+{
+	union perf_event *event;
+	__u32 id = 0;
+	int err;
+	int fd;
+
+	event = malloc(sizeof(event->bpf_event) + KSYM_NAME_LEN);
+	if (!event)
+		return -1;
+	while (true) {
+		err = bpf_prog_get_next_id(id, &id);
+		if (err) {
+			if (errno == ENOENT) {
+				err = 0;
+				break;
+			}
+			pr_err("can't get next program: %s%s",
+			       strerror(errno),
+			       errno == EINVAL ? " -- kernel too old?" : "");
+			err = -1;
+			break;
+		}
+		fd = bpf_prog_get_fd_by_id(id);
+		if (fd < 0) {
+			pr_debug("Failed to get fd for prog_id %u\n", id);
+			continue;
+		}
+
+		err = perf_event__synthesize_one_bpf_prog(
+			tool, process, machine, fd, event, opts);
+		close(fd);
+		if (err)
+			break;
+	}
+	free(event);
+	return err;
+}
diff --git a/tools/perf/util/bpf-event.h b/tools/perf/util/bpf-event.h
index d5ca355dd298..38aee4040f12 100644
--- a/tools/perf/util/bpf-event.h
+++ b/tools/perf/util/bpf-event.h
@@ -8,4 +8,9 @@ int machine__process_bpf_event(struct machine *machine,
 			       union perf_event *event,
 			       struct perf_sample *sample);
 
+int perf_event__synthesize_bpf_events(struct perf_tool *tool,
+				      perf_event__handler_t process,
+				      struct machine *machine,
+				      struct record_opts *opts);
+
 #endif
-- 
2.17.1

