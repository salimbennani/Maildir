Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:30:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B6DBC5805F0;
	Tue, 18 Dec 2018 22:00:31 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 22:00:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8D42khKeHw5vqX6RHdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL//6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXshfSTFPDI2/?=
 =?us-ascii?q?YYUIDeUBM+lXoYbmp1sWrxazHhWgCeD1xzNUnHL6wbE23uI8Gg/GxgwgGNcOvW?=
 =?us-ascii?q?zUo9X0MKcSVeG1w7PNzT7ecv5Wwyny55LUchAhoPGMQa5wetfQx0k1DQzEjkib?=
 =?us-ascii?q?pIv7PzOU0uQNs3aU7+5lVe61hG4nsRt+ozi0y8cjj4nGnIMVylTe+Splx4Y1IM?=
 =?us-ascii?q?S1RUhmatCnCJtdrz+WO5dyT884Xm1ltjg2xqcbtZO4YCQG0pUqyhzHZ/CZb4SE?=
 =?us-ascii?q?/g/vWeOPLTp5h39ofa6wiwqo/kS+z+DzSNK73VZXoidAk9TAqm0B2h/W58WISv?=
 =?us-ascii?q?Zy40is1DOP2g3T8O5IP0U5mrTfJpMu2bE9kIcYv17ZES/sgkr2ibebdkU69eis?=
 =?us-ascii?q?7OTqeqvmppCCOI9ukA3+Mbohmta5AesmNggCRW+b+f6z1LH7/E35RqtFjuEun6?=
 =?us-ascii?q?XHrJzXId4XqrO3DgNLyIov9hWyAyu83NkZn3QLNFdFdwiGj4jtNVHOOvf4DfKn?=
 =?us-ascii?q?jlSokTdrwe3GP7L4DpXOMHfDirHhcqh560JFzwoyw9Zf6IxOCrwaPvLzVVH+tM?=
 =?us-ascii?q?bCAh86LQO02eDnB8t51o8EXmKPGKCZPLvIsVCU/uIvP/WMZIgNtTb5Kvgl5ODh?=
 =?us-ascii?q?gWU2mF8AZqSp2ZoXaHalHvVpOUmZYHzsgssfHmcOpAYxUOvqiFiaWz5Je3myR7?=
 =?us-ascii?q?485i08CI++DYfMXIGtgKCb0ye8BJFWZn1GBUqKEXfnbIiEX/YMaCSPIs5uiDAE?=
 =?us-ascii?q?VL6hS5M/2hGqrgP1171nLu/M8C0CqZ3jzMR15/HUlRwq9zx0CNqS33uOT2FzmG?=
 =?us-ascii?q?MIQTg20bt7oUx8zFeDzKd5j+ZZFdxV+/NGTAM6OYTAwOx9DtD4QhjBccuRSFa6?=
 =?us-ascii?q?XtWmBik8Qcgqw98OZEZ9GM+ujgrZ0CqoGLIVk72LBJop8qPTxXTxJsB9y2rY26?=
 =?us-ascii?q?kllVUpXsxPNWi+jK5l6wfTH5LJk1mel6uydqQTxijN+H2HzWqPpk5YVgFwXL7B?=
 =?us-ascii?q?XXAeYEvWsNv46lnDT7+oFbQoLA9BxdSeJatNb93jlU9GS+v7ONTCf2KxnH+9Cg?=
 =?us-ascii?q?uSybOScoXmYWUd0z/bCEgfjQ8T+3GKNQw9Biekp2LTFzhuFVPpY0Px/uhysnK7?=
 =?us-ascii?q?Tkkozw6Ua01tzaa6+hkQhfaEUfMcwqoEuDs9qzVzBFuywsjZC8SeqAZ7fKVTe9?=
 =?us-ascii?q?U94ExZ2mLfrAF9Op2gL6Z/hl8RaQh3vkXu1wlpBYVEi8QlsHQqzA9qI6KCzFxB?=
 =?us-ascii?q?by+Y3Yz3OrDPNmny/RWva6nK2lHe0Nea4LsP5O4/q1X5uAGpF0wi83p83tlR0n?=
 =?us-ascii?q?uc4IjKDQUIXZLwVEY36wZ1p7XAbiYh4IPU0GVmMbOovT/ax9IpGOwlxw66cNdb?=
 =?us-ascii?q?LqyFGxH9Es0AC8e1NewlhkKmbhQHPOBV6q45JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs32mZ1EaSsOEWalyCnkBJReZqt9?=
 =?us-ascii?q?fYsQDWeuIsu3xshxhpL3Wn5Y8kKjCE0C2MOzZRWSaFn91xVK1UsLuXynhTe4zz?=
 =?us-ascii?q?tsnjEzr6qQwDbBw/7/exoAIGJLQndtjU3tIYStk98VRkyoYBU3mxu/4kb6wbNW?=
 =?us-ascii?q?pKB+L2nVXEdJcDL6L2BkUqusqLWCZ9RD548vsSVSSO68e0yVSqbhoxsG1CPuB2?=
 =?us-ascii?q?tfxDEhezCqoJn5hAF6iGSGIXZ3rXrZf9xwxBjF6NzdQ/5RwiQJRC1ihTbLAVi8?=
 =?us-ascii?q?OsGj/c+ImJfbruC+S2WhW4VRcSbx14OAtyi75WpwDR2khf+zmd7nEQk80SDl0d?=
 =?us-ascii?q?lnTiHIrBf6Yon22KW2K+Nnfk90BFDi78p2AJ1xkow1hJsIw3gVmo2V/WYbkWf0?=
 =?us-ascii?q?Kdha2bjxbH0XST4Jwt7V5hPo2EliLnKP2oL4WW+RwspnZ9mmfGwW3jgx4NxNCK?=
 =?us-ascii?q?eR9LZEhzd6okKkrQLNZvhwhjQdxuEv6HIAg+EJpRAiziOSAr0JGUlYPCrslwmH?=
 =?us-ascii?q?7tykraVXYnqvfqa01EZkgd+hC7SCqBlGWHnlYpciATNw7sJnPVLJ0X3z6ZvrdM?=
 =?us-ascii?q?PebN0NrR2UjwnPj/JOJ50vjPoKijFqOWb8vX0j1u46ggZi3ZC8vIibNWpt+Li1?=
 =?us-ascii?q?DQJfNj3wf8kT4C3ijb5CnsaK2ICiBolhGjIOXJfyTPOnCjQSten8NwaVET0xsX?=
 =?us-ascii?q?ObGbvZHQ+C50ZqtXPPE5a3N36JIHkV18ltRB6YJEZHmgAbQC06noIlFgCt3MHu?=
 =?us-ascii?q?a1125jcV5l7lsBdMzv9oOgL7Umfeogeodzg1RIKeLBpQ8gFN+UPVPdaC4eJ0Gi?=
 =?us-ascii?q?FS5oehoxCVKmyHewRICnkEWk6eCFDmILau/sPM8/SCCuq9MvvOYqiOqepEWPeT?=
 =?us-ascii?q?3p+v1opm/zCRNsSAJHViDvs72lZdUnB9AcjWhzIPSykPnSLXc8GbvAu8+jFwrs?=
 =?us-ascii?q?2n8PXrXx/v5ZKSC7RIN9Vj4Qu2gaCFN+6fnyt5LTdY1pURxX7H0rQf3VgSiz1w?=
 =?us-ascii?q?eDmpC7gPqSnNTKfIkK9NExEbcz9zNNdP768k3glCJ8/bitD21r55lPI1CE1FVV?=
 =?us-ascii?q?vums63f8wKPnq9OUjDBEaKMrSGODLKz9v2YaO6Vb1fkuFUuwestjacFk/pJi6D?=
 =?us-ascii?q?mCXxVxCzLeFMizmWMwZDuI6maBZiF2jiQMjiah26K9J3iTw2wbsphnLFL2IcMD?=
 =?us-ascii?q?58c19Tob2U9y9XnvJ/G2lZ5Hp/MeaEgzqZ7/XfKpsOrftrAyF0m/hG73gg17RV?=
 =?us-ascii?q?7D9LRPpulSvWr95upUymk+aVxjpmVhpOtihEhIaRsUp+PqXZ84FKWWzY8xIV8W?=
 =?us-ascii?q?WQFxMKqsNlC9L1vaBQz9nPlKTrJzZD89Lb580cB8fPJcKDMXohNwfpGTHOAAsE?=
 =?us-ascii?q?Sz6rKX/Qh0hHnP6O8X2Vq8tylp+5nJsIV6QdS1UxEv4bCGxhHdoLOpAxWSkrwp?=
 =?us-ascii?q?CBi8td2nu6qBjYQY1wpJ3OSvKTHemnByyQnPEQeRoMwb78KMIcLITq80NnY1h+?=
 =?us-ascii?q?2o/NHhyDDph2viR9Y1ps8w12+39kQzh2ghq9Zw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AVAAC+3Rlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTCCOyeZejmJEok5hH2BcxMBARgTAYclIjUIDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCCkjDII2JAGCYgMDAQIvAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHBkFg?=
 =?us-ascii?q?x2BaQEDFQEEmls8jCsFAReCdwWEQQoZJw1egTcCBhKHbIMlgRyCFoFEhCqBDIg?=
 =?us-ascii?q?JApBPkA8YMAcChk+HYIMxGIl2h2AsjySJfwIEAgQFAgUPIYEnAoIKTSOBAYI7g?=
 =?us-ascii?q?hsMF4NKimIxMoEEAQEBO40lAQE?=
X-IPAS-Result: =?us-ascii?q?A0AVAAC+3Rlch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgTC?=
 =?us-ascii?q?COyeZejmJEok5hH2BcxMBARgTAYclIjUIDQEDAQEBAQEBAgETAQEBCgsJCCkjD?=
 =?us-ascii?q?II2JAGCYgMDAQIvAQ0BGx0BAwIJAQEFEDsDHgIRAQUBHBkFgx2BaQEDFQEEmls?=
 =?us-ascii?q?8jCsFAReCdwWEQQoZJw1egTcCBhKHbIMlgRyCFoFEhCqBDIgJApBPkA8YMAcCh?=
 =?us-ascii?q?k+HYIMxGIl2h2AsjySJfwIEAgQFAgUPIYEnAoIKTSOBAYI7ghsMF4NKimIxMoE?=
 =?us-ascii?q?EAQEBO40lAQE?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="56947226"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 22:00:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727834AbeLSGA2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 01:00:28 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:42997 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726920AbeLSGA1 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 01:00:27 -0500
Received: by mail-pg1-f196.google.com with SMTP id d72so8957610pga.9;
        Tue, 18 Dec 2018 22:00:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=xnUaejTO+RHAIQg3+66gxDXJKefuVgpBWyozPBW8nPI=;
        b=FLrEwq39Dtedo1lXWu9vPxPrs8VKabP7hU3XdGRj1wdQrfW8ERYTnWU00o1IL+LXoA
         YYkuIwg6K6s72ZxcaQoJhwl+Ta0rHybTa7GCCw1LoNN96+ClZWjd/Unj4FdPwv+DPEUU
         F1ZOJxqzLu8MJOezGWG8rEze1xOYsjwPBS2NFe+boRsA5m4sfLF3OAyrSMKFiwMKn1LU
         6R+uRpEXHs+aE9lalbm78bpGct+1ujgG0cXgWEAkGeoPyQ4X/n+sxoYxzemOB5R7cAOn
         4s3Cahua2bDvMcz8P91qK4PsaLqVtHTSDRBizLr44yYg5dqBRDw5WUwxE3Ayv3FOiNUg
         YB7w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=xnUaejTO+RHAIQg3+66gxDXJKefuVgpBWyozPBW8nPI=;
        b=mTK2WczdkClzVrVxp/4dvDkuL0NjTAsL+EeWRL0PWD/C8gYewBp2Z9IGOSFFcdtIcv
         4nVcgsnUt+KLzqZIbKtITMFhFPlumT2HiR76dMfiUvKY/iXQTglOpjFAquu5S7bACLIA
         6mUdHd08WyuGMY+7Z4OkNFRMxJ8IHtb5W4om+nzFIHOm2w+z4Qn15W3Rjq+9INqkjW3p
         mZabPMo0GAlIvUoukWfI+Pyc/z05qm6OHBf5z0fIN8QPJ6X3yig46i04BX8nC4mghrwd
         xsxnV47YjrdDR4u0oQ27CNOAEYjemhluYPKBlAKndiuKn/x500Rf/MPBiXwfG7C7UO6I
         aBCg==
X-Gm-Message-State: AA+aEWb3SY6a4tVKiNiG2ICyXUymLSefuaj1gc/UAnu5uohJF+Ejpcfh
        ZfMZ+Boa2Xdf66AMaYYfwOE=
X-Google-Smtp-Source: AFSGD/WHmQ9X27h92uOdmBRpRx3CaD6yCd2EJdwDwblDrGSruGB8BueNmhEA6SGaOuI2ok6KnTYHUg==
X-Received: by 2002:a63:e5c:: with SMTP id 28mr5404940pgo.369.1545199226912;
        Tue, 18 Dec 2018 22:00:26 -0800 (PST)
Received: from localhost.localdomain ([2001:268:c0a2:eb51:6018:45d4:55a2:e94b])
        by smtp.gmail.com with ESMTPSA id y71sm35592141pfi.123.2018.12.18.22.00.22
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 18 Dec 2018 22:00:26 -0800 (PST)
From: William Breathitt Gray <vilhelm.gray@gmail.com>
To: linus.walleij@linaro.org
Cc: akpm@linux-foundation.org, linux-gpio@vger.kernel.org,
        linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
        andriy.shevchenko@linux.intel.com, linux@rasmusvillemoes.dk,
        William Breathitt Gray <vilhelm.gray@gmail.com>,
        Andy Shevchenko <andy.shevchenko@gmail.com>
Subject: [PATCH v6 2/8] lib/test_bitmap.c: Add for_each_set_clump8 test cases
Date: Wed, 19 Dec 2018 15:00:55 +0900
Message-Id: <53bc13df75e9a26ef9fc7ba764c3536b4fc51433.1545198260.git.vilhelm.gray@gmail.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <cover.1545198260.git.vilhelm.gray@gmail.com>
References: <cover.1545198260.git.vilhelm.gray@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The introduction of the for_each_set_clump8 macro warrants test cases to
verify the implementation. This patch adds test case checks for whether
an out-of-bounds clump index is returned, a zero clump is returned, or
the returned clump value differs from the expected clump value.

Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
---
 lib/test_bitmap.c | 65 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/lib/test_bitmap.c b/lib/test_bitmap.c
index 6cd7d0740005..66ddb3fb98cb 100644
--- a/lib/test_bitmap.c
+++ b/lib/test_bitmap.c
@@ -88,6 +88,36 @@ __check_eq_u32_array(const char *srcfile, unsigned int line,
 	return true;
 }
 
+static bool __init __check_eq_clump8(const char *srcfile, unsigned int line,
+				    const unsigned int offset,
+				    const unsigned int size,
+				    const unsigned char *const clump_exp,
+				    const unsigned long *const clump)
+{
+	unsigned long exp;
+
+	if (offset >= size) {
+		pr_warn("[%s:%u] bit offset for clump out-of-bounds: expected less than %u, got %u\n",
+			srcfile, line, size, offset);
+		return false;
+	}
+
+	exp = clump_exp[offset / 8];
+	if (!exp) {
+		pr_warn("[%s:%u] bit offset for zero clump: expected nonzero clump, got bit offset %u with clump value 0",
+			srcfile, line, offset);
+		return false;
+	}
+
+	if (*clump != exp) {
+		pr_warn("[%s:%u] expected clump value of 0x%lX, got clump value of 0x%lX",
+			srcfile, line, exp, *clump);
+		return false;
+	}
+
+	return true;
+}
+
 #define __expect_eq(suffix, ...)					\
 	({								\
 		int result = 0;						\
@@ -104,6 +134,7 @@ __check_eq_u32_array(const char *srcfile, unsigned int line,
 #define expect_eq_bitmap(...)		__expect_eq(bitmap, ##__VA_ARGS__)
 #define expect_eq_pbl(...)		__expect_eq(pbl, ##__VA_ARGS__)
 #define expect_eq_u32_array(...)	__expect_eq(u32_array, ##__VA_ARGS__)
+#define expect_eq_clump8(...)		__expect_eq(clump8, ##__VA_ARGS__)
 
 static void __init test_zero_clear(void)
 {
@@ -361,6 +392,39 @@ static void noinline __init test_mem_optimisations(void)
 	}
 }
 
+static const unsigned char clump_exp[] __initconst = {
+	0x01,	/* 1 bit set */
+	0x02,	/* non-edge 1 bit set */
+	0x00,	/* zero bits set */
+	0x28,	/* 3 bits set across 4-bit boundary */
+	0x28,	/* Repeated clump */
+	0x0F,	/* 4 bits set */
+	0xFF,	/* all bits set */
+	0x05,	/* non-adjacent 2 bits set */
+};
+
+static void __init test_for_each_set_clump8(void)
+{
+#define CLUMP_EXP_NUMBITS 64
+	DECLARE_BITMAP(bits, CLUMP_EXP_NUMBITS);
+	unsigned int start;
+	unsigned long clump;
+
+	/* set bitmap to test case */
+	bitmap_zero(bits, CLUMP_EXP_NUMBITS);
+	bitmap_set(bits, 0, 1);		/* 0x01 */
+	bitmap_set(bits, 8, 1);		/* 0x02 */
+	bitmap_set(bits, 27, 3);	/* 0x28 */
+	bitmap_set(bits, 35, 3);	/* 0x28 */
+	bitmap_set(bits, 40, 4);	/* 0x0F */
+	bitmap_set(bits, 48, 8);	/* 0xFF */
+	bitmap_set(bits, 56, 1);	/* 0x05 - part 1 */
+	bitmap_set(bits, 58, 1);	/* 0x05 - part 2 */
+
+	for_each_set_clump8(start, clump, bits, CLUMP_EXP_NUMBITS)
+		expect_eq_clump8(start, CLUMP_EXP_NUMBITS, clump_exp, &clump);
+}
+
 static int __init test_bitmap_init(void)
 {
 	test_zero_clear();
@@ -369,6 +433,7 @@ static int __init test_bitmap_init(void)
 	test_bitmap_arr32();
 	test_bitmap_parselist();
 	test_mem_optimisations();
+	test_for_each_set_clump8();
 
 	if (failed_tests == 0)
 		pr_info("all %u tests passed\n", total_tests);
-- 
2.20.1

