Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:30:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 34FD95805CF;
	Tue, 18 Dec 2018 22:01:26 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 22:01:25 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6Qvojh+x04ZiFv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+MWIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHoli?=
 =?us-ascii?q?kJKjA3/mLQhMNygqJUrx2vpwdnw4PWe4yZKPlzc7nBcd4AWWZNQsBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMMuZZr4n5o1sOrAGxBQyxD+7y0D9HmGX53bE60+QgDQHGwBErEdMUsH?=
 =?us-ascii?q?vOrNT+KaAfUf60zKnMzTXMcfdW2TLn5IjHaBAuu/GNUKl/ccrU00YvFgfFgk+M?=
 =?us-ascii?q?poziOjOYz+IAuHWY4ep4Te+jlXIrpgVrrjSyyMoglJPFip8Wx1zY7yl0wYQ4Kc?=
 =?us-ascii?q?WmREJnfdKoDZ5duz+bOoZ1R84tX31ktzwkxrADp5G0ZygHxIkiyhPed/CLbouF?=
 =?us-ascii?q?7xfsWeuRPDh1i3dodbK/ihmo70Stz/PzW8273VlRqCdOj8PCuWoX1xPJ78iKUv?=
 =?us-ascii?q?t98Vml2TaIzw3T9O5ELl4ulabBKJ4u3KQwlpwNvkTHBCP2n1/2jKCOekUl/Oin?=
 =?us-ascii?q?9fjnb634qpOAM4J4kBzyP6owlsClHOg1MRQCU3Ka9Om+zLHj+Ff2QLROjv04iK?=
 =?us-ascii?q?nZt5XaKNwfpq64BQ9Vz4ki5w+8Dzi4ytQYm2cILFZcdBKAgYnpPU/BIOrjAPeh?=
 =?us-ascii?q?jFSjji1ry+rFPrL/GJXNKGbMkLP7cbZ68U5cxxI/zcpD6JJMFrEBPPXzV1f1tN?=
 =?us-ascii?q?zZDR82LRa4wun6CNhm0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0l7eb0?=
 =?us-ascii?q?jXAlgV8dYbWp3ZwPZXC4BPtmIlmZbmDrgtsbEWcKoxAxTOrliFCZVT5TZnCyX7?=
 =?us-ascii?q?8z5z0hCYKmC5vDSZ6pgLCbwCi7GZhWbHhcCl+QCXfoa5mEW/AUZSKQJc9ujCYI?=
 =?us-ascii?q?VbumS48n0xGusxT3y75mLurS5y0Zuojv1Nlz5+3Pix4y8SZ4ANia02GIV2t0hH?=
 =?us-ascii?q?8HRycq3KBjpkxw0k2M0bN4g/xfFtxf/elJXR04NZPHy+x6CtbyWh/Of9uTSVam?=
 =?us-ascii?q?RMmmDi81Tt4r39AOZEN9Ec24jh/fxyqqH6MVl7uTCZw36K3c2WL9J8J8y3nc0q?=
 =?us-ascii?q?khgEIrQs9ONW2gm65++BLfB4/Pk0WFiamqcb4Q0zLK9GeG1WCOpl1XUBZsUaXZ?=
 =?us-ascii?q?WnASflbZos7n5kzcVbOuCa4oMg1aycGcLKtGbdnpjVZDRPfnI9neZ2Oxm2GtBR?=
 =?us-ascii?q?eH3L+MbYzqe3kD0yXZEkQLjwcT/XOePwgkGiihu37eDCBpFV/3fkzj6/d+p22h?=
 =?us-ascii?q?Qk801Q6KaVZh2KSz+hMOgfycSvUT3q8LuSs7qjV0Gkq90MzSC9aauwVhe6Bca8?=
 =?us-ascii?q?sn4FhbzWLZqxB9Ppu4IqB+h14edgN3v1/u1xR3EIlAjdImrHQwzAp2KKKY1lxB?=
 =?us-ascii?q?eiic3ZDxPL3XN2bz8Aqua67QxlHRztKW9r0T5/Q/rlXppBupGVY683V7z9lV1G?=
 =?us-ascii?q?OR6Y/ODAUMXpP+TEY2+wJhqLHHfyYy/YXU1X5rMamqqTLC39MpBO04yhevZdtf?=
 =?us-ascii?q?MaWEFBPsHM0eHcShNOsqm12xZBIeIO9S7LI0P9+hd/ae2K+rIfxsky68gWVG4I?=
 =?us-ascii?q?ByyESM9yVnR+7M3pYFxeyY3wSdWzf9ilehrt74mYReaT4OGWq/zDDuBJRNaa1q?=
 =?us-ascii?q?YYYLFWCuLtWtxtV/m5HiQWRY+0OkB18c3s+mZwCSb13k0QJMz0sXpWGoljWizz?=
 =?us-ascii?q?xzlTEkta6f3C3Iw+T/exsLIG9LRG9+jVjyJYi4lcwVXE+tbwIxjhuq+V76x7RH?=
 =?us-ascii?q?pKR4N2TSQUZIczL2Lm14Sauwq7yCbtVL6JMptyVXTeu9bUqbSr77vxsVzSfjE3?=
 =?us-ascii?q?FCyzA8cjGgoo/5kABiiGKBMHZzq2LUecNqyhfF59zcRvlR0iAdRCZiijnXBVm8?=
 =?us-ascii?q?P9+38tWSjJrDtuG+V2S8VpxcayXrzIWAtDel6m1uGxGwg/ezmtj/GwggzSD7z8?=
 =?us-ascii?q?VqVTnPrBvkYojkzaO6PfhlfklpAl/x8M56GoB4kosti5Acw3kahpOJ/XUZlWf/?=
 =?us-ascii?q?K8lU2aX7bHAVXz4E38bV4BT52E1kNn+JxJj2VnSHzsthetm1eGUW2i0m4sBOCa?=
 =?us-ascii?q?eU6qFEnCRvrlq5qwLRfeZynjMHxfQy734ahvkDuBAxwSWFHrASAU5YMDTplxSJ?=
 =?us-ascii?q?7NCxtr9bZWixfriryEpxg8qhA6qcrQFGV3b0YZMiHS527sViP1PAynzz6of4eN?=
 =?us-ascii?q?bOadIfrAGbkxDFj+JNMpI+iuIKhTZ7OWL6pXAl1+k7jRl00ZC7poeHLXht/Lmi?=
 =?us-ascii?q?Ah5ZLTD1Y8IT+jfwjadRhMqW3oavHol/FTUPRpfnUfWoEDcKv/T9KwmOCCE8qm?=
 =?us-ascii?q?ucGbfHBgCQ8kBmr3bSE5yxM3GXOWIUzdFjRBmbOUxejxoYXDQ8np4lCA+qwNbt?=
 =?us-ascii?q?f1t+5jAU/lT4sAdDyvp0NxnjVWfSvAWoZS0xSJeBNxpa9B1C613WMcyD7eJzAi?=
 =?us-ascii?q?dY8Ye6rAGWLmybZgJIDXwGW0CeBlDjOKWu6sfE8+SCGuW+KP7Oa62UqeNCT/eI?=
 =?us-ascii?q?2Y6v0ox+8jeMMcWPI2BiD+Ah1UpFR3x5AMPZmzMASyEMkyLNbsibpAqz+yFtr8?=
 =?us-ascii?q?C/9ujrVxzr5YeVF7RSNtBv8QisgaifL+6QmDp5KTFA25MM23DIybsf3F0Tiy10?=
 =?us-ascii?q?dDmtC7MAtSHTQ6LKh69XFAUWaydyNMtO8qI90RNBOc/ditPpyLF4iuQ5BEtCVV?=
 =?us-ascii?q?zkgsupf9AFI3mhNFPbA0aGLK6JJSDQzMHtf6y9SadcjOFVtxCrvTabEknjPimM?=
 =?us-ascii?q?ljXzVhCvN/1Mgz+fPBBEpI69dRNtA3D5TN36ch27LMN3jTouzL0oh3PKMHQQPi?=
 =?us-ascii?q?Rmf0xRrr2f8yVYj+57G2xA6HplMOaFlzyY7+neNpYZr/9rDj5omOJd5XQw06FV?=
 =?us-ascii?q?4z1cRPxphCvSqcZjolG8nemJzzpnURxOpS5KhYKLp0piP6rZ+4JEWXbF+hIN8G?=
 =?us-ascii?q?qRBw4Lp9tjFt3gpaRQxsLTm6L0LTcRu+7TqM8dAdXPbt2ONH4sMBjBHD/SBREC?=
 =?us-ascii?q?CzmxOjLxnUtYxc6T8nmUp51ygILhkYYOS6NHHHMvH+JSXlpkGNwPJJIxUSktgJ?=
 =?us-ascii?q?aUiccJ4Ty1qxyHF5YShYzOSv/HWaanEz2el7QRPxY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAADW3Rlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMFo1kOYkSiTmEfYFzEwEBGBMBhyUiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIKSMMgjYigmUDAwECJAsBDQEbHQEDAgkBAQUQOwMeAhEBBQEcG?=
 =?us-ascii?q?QWDHYFpAQMVAQSaWzyMFRYFAReCdwWEQQoZJw1egTcCBhKHbIMlgRyCFoFEhTa?=
 =?us-ascii?q?ICQKJRocJkCcwBwKGT4dggzEYgV2IGTeHKSyKH4UFiX8CBAIEBQIFDyGBJYIOT?=
 =?us-ascii?q?SOBAYI7ghsMF4NKimIxMoEEAQEBO40lAQE?=
X-IPAS-Result: =?us-ascii?q?A0ARAADW3Rlch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMFo1kOYkSiTmEfYFzEwEBGBMBhyUiNAkNAQMBAQEBAQECARMBAQEKCwkIK?=
 =?us-ascii?q?SMMgjYigmUDAwECJAsBDQEbHQEDAgkBAQUQOwMeAhEBBQEcGQWDHYFpAQMVAQS?=
 =?us-ascii?q?aWzyMFRYFAReCdwWEQQoZJw1egTcCBhKHbIMlgRyCFoFEhTaICQKJRocJkCcwB?=
 =?us-ascii?q?wKGT4dggzEYgV2IGTeHKSyKH4UFiX8CBAIEBQIFDyGBJYIOTSOBAYI7ghsMF4N?=
 =?us-ascii?q?KimIxMoEEAQEBO40lAQE?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="scan'208";a="57471791"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 22:01:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727876AbeLSGBW (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 01:01:22 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:45601 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725290AbeLSGBW (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 01:01:22 -0500
Received: by mail-pg1-f196.google.com with SMTP id y4so8946161pgc.12;
        Tue, 18 Dec 2018 22:01:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=85H/4t6RkooDK10L2W5Uhts7AwM0xn2RPdanjNRGSLI=;
        b=bs8D01NDGRrQMYQeznQEUI87B/5jG5L0Zm2E3nB1wbgxDqkWavCfYb9XVR0iGOxhHs
         6lKf3kSAcNplpUuq4YbSGpTeb9LullDC8ZJb5kkBcDbVwzcyg3lo4GcMuNyWpju+EM6c
         E2Yw43ILSZ7qkqXfqSYPNATYje8bKhjq1YD3vkyvcD6OvHscULQp5HemeelM5OhsDr2z
         8q/nAXVYUeO4kAE5CqZdLiLpSB/en5tjMAuQMZ5itFVR1nNBYXQrixVsuMmi8owqm9ce
         lz7rWFrA5+43643xsL8F6IoMXBdQBmPnMTFwB03m+86jNkjL+z9z5PWBg1nN5Wm8Knga
         8Stg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=85H/4t6RkooDK10L2W5Uhts7AwM0xn2RPdanjNRGSLI=;
        b=U3oFe061wrXUP9Wj+wmk5f4CS0EJNlQhB8szLLxi7O0b+zMUAEYh0P8uHmCwIz9Inp
         Y5Bs24bqwo+oJs/RmuhKgG/mC/2Qj4FCH7Zv7vVXJS8OFBbAN8Y0k9MRoeN8YPcRDFsY
         ZmgV4Gyt0Ysr02vSXB2G0/AR0+Sr9Ibm9PaKrPh0fFsu7Y7wi/T54n4SzAuT4UevLTGC
         SW02pmTbhfHPjMKDbQQ4uU7s5H9Kd1R1Bp3wTkrA8ZbrCtq9YhcsuLAjhGq87VdyE3RH
         GVLP+yYG8Ti8Y+Xgz2ovk1iZPyQLTq9ntWdwSIZAPYs/y0gkB7BgIGpxUnknSTbAr2EH
         y6EQ==
X-Gm-Message-State: AA+aEWahKckk7CjvyRc808qxm97IMytT/RchBHErcwpp7lSJmKcxbE26
        OqZvomuvSr4NKvE9zTgRel8zffi8
X-Google-Smtp-Source: AFSGD/UcrILknSxpVDLDAcvOQm+uq/TzPuniH98X6Cc9U0UDisgtiBR1YtRZmcMzC6rgQpWATQ7Hww==
X-Received: by 2002:a62:509b:: with SMTP id g27mr19577844pfj.48.1545199280959;
        Tue, 18 Dec 2018 22:01:20 -0800 (PST)
Received: from localhost.localdomain ([2001:268:c0a2:eb51:6018:45d4:55a2:e94b])
        by smtp.gmail.com with ESMTPSA id v89sm25093381pfk.12.2018.12.18.22.01.17
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 18 Dec 2018 22:01:20 -0800 (PST)
From: William Breathitt Gray <vilhelm.gray@gmail.com>
To: linus.walleij@linaro.org
Cc: akpm@linux-foundation.org, linux-gpio@vger.kernel.org,
        linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
        andriy.shevchenko@linux.intel.com, linux@rasmusvillemoes.dk,
        William Breathitt Gray <vilhelm.gray@gmail.com>
Subject: [PATCH v6 5/8] gpio: gpio-mm: Utilize for_each_set_clump8 macro
Date: Wed, 19 Dec 2018 15:01:50 +0900
Message-Id: <1a54a935c918d2b9c2dcd268e1ccc34ba3c00142.1545198260.git.vilhelm.gray@gmail.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <cover.1545198260.git.vilhelm.gray@gmail.com>
References: <cover.1545198260.git.vilhelm.gray@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Replace verbose implementation in get_multiple/set_multiple callbacks
with for_each_set_clump8 macro to simplify code and improve clarity.

Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
---
 drivers/gpio/gpio-gpio-mm.c | 71 +++++++++++--------------------------
 1 file changed, 20 insertions(+), 51 deletions(-)

diff --git a/drivers/gpio/gpio-gpio-mm.c b/drivers/gpio/gpio-gpio-mm.c
index 8c150fd68d9d..5647abe72376 100644
--- a/drivers/gpio/gpio-gpio-mm.c
+++ b/drivers/gpio/gpio-gpio-mm.c
@@ -172,46 +172,25 @@ static int gpiomm_gpio_get(struct gpio_chip *chip, unsigned int offset)
 	return !!(port_state & mask);
 }
 
+static const size_t ports[] = { 0, 1, 2, 4, 5, 6 };
+
 static int gpiomm_gpio_get_multiple(struct gpio_chip *chip, unsigned long *mask,
 	unsigned long *bits)
 {
 	struct gpiomm_gpio *const gpiommgpio = gpiochip_get_data(chip);
-	size_t i;
-	static const size_t ports[] = { 0, 1, 2, 4, 5, 6 };
-	const unsigned int gpio_reg_size = 8;
-	unsigned int bits_offset;
-	size_t word_index;
-	unsigned int word_offset;
-	unsigned long word_mask;
-	const unsigned long port_mask = GENMASK(gpio_reg_size - 1, 0);
+	unsigned int offset;
+	unsigned long gpio_mask;
+	unsigned int port_addr;
 	unsigned long port_state;
 
 	/* clear bits array to a clean slate */
 	bitmap_zero(bits, chip->ngpio);
 
-	/* get bits are evaluated a gpio port register at a time */
-	for (i = 0; i < ARRAY_SIZE(ports); i++) {
-		/* gpio offset in bits array */
-		bits_offset = i * gpio_reg_size;
-
-		/* word index for bits array */
-		word_index = BIT_WORD(bits_offset);
-
-		/* gpio offset within current word of bits array */
-		word_offset = bits_offset % BITS_PER_LONG;
-
-		/* mask of get bits for current gpio within current word */
-		word_mask = mask[word_index] & (port_mask << word_offset);
-		if (!word_mask) {
-			/* no get bits in this port so skip to next one */
-			continue;
-		}
-
-		/* read bits from current gpio port */
-		port_state = inb(gpiommgpio->base + ports[i]);
+	for_each_set_clump8(offset, gpio_mask, mask, ARRAY_SIZE(ports) * 8) {
+		port_addr = gpiommgpio->base + ports[offset / 8];
+		port_state = inb(port_addr) & gpio_mask;
 
-		/* store acquired bits at respective bits array offset */
-		bits[word_index] |= (port_state << word_offset) & word_mask;
+		bitmap_set_value8(bits, &port_state, offset);
 	}
 
 	return 0;
@@ -242,37 +221,27 @@ static void gpiomm_gpio_set_multiple(struct gpio_chip *chip,
 	unsigned long *mask, unsigned long *bits)
 {
 	struct gpiomm_gpio *const gpiommgpio = gpiochip_get_data(chip);
-	unsigned int i;
-	const unsigned int gpio_reg_size = 8;
-	unsigned int port;
-	unsigned int out_port;
+	unsigned int offset;
+	unsigned long gpio_mask;
+	size_t index;
+	unsigned int port_addr;
 	unsigned int bitmask;
 	unsigned long flags;
 
-	/* set bits are evaluated a gpio register size at a time */
-	for (i = 0; i < chip->ngpio; i += gpio_reg_size) {
-		/* no more set bits in this mask word; skip to the next word */
-		if (!mask[BIT_WORD(i)]) {
-			i = (BIT_WORD(i) + 1) * BITS_PER_LONG - gpio_reg_size;
-			continue;
-		}
+	for_each_set_clump8(offset, gpio_mask, mask, ARRAY_SIZE(ports) * 8) {
+		index = offset / 8;
+		port_addr = gpiommgpio->base + ports[index];
 
-		port = i / gpio_reg_size;
-		out_port = (port > 2) ? port + 1 : port;
-		bitmask = mask[BIT_WORD(i)] & bits[BIT_WORD(i)];
+		bitmask = bitmap_get_value8(bits, offset) & gpio_mask;
 
 		spin_lock_irqsave(&gpiommgpio->lock, flags);
 
 		/* update output state data and set device gpio register */
-		gpiommgpio->out_state[port] &= ~mask[BIT_WORD(i)];
-		gpiommgpio->out_state[port] |= bitmask;
-		outb(gpiommgpio->out_state[port], gpiommgpio->base + out_port);
+		gpiommgpio->out_state[index] &= ~gpio_mask;
+		gpiommgpio->out_state[index] |= bitmask;
+		outb(gpiommgpio->out_state[index], port_addr);
 
 		spin_unlock_irqrestore(&gpiommgpio->lock, flags);
-
-		/* prepare for next gpio register set */
-		mask[BIT_WORD(i)] >>= gpio_reg_size;
-		bits[BIT_WORD(i)] >>= gpio_reg_size;
 	}
 }
 
-- 
2.20.1

