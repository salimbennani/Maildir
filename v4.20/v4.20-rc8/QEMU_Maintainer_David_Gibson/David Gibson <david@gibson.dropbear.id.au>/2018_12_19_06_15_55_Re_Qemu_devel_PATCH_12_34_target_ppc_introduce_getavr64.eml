Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:31:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 562975805F0
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 23:50:08 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 23:50:08 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ASOlMRxMUscirAajdvcsl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0K/z8osbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2/?=
 =?us-ascii?q?YYsAAPYOMvtaoIbzulUOtRmzCwujCe/yxDJEmmH53bYh3uQuDQ3LxhYtE84UvX?=
 =?us-ascii?q?jKqtj+KaccUfqyzKnN1TjNYelZ2Sn86IfVbxsvoPCMUqlrccrWz0kkCgTIgUiK?=
 =?us-ascii?q?poz7PjOay/8As2ea7+V7TuKvjGgnpxtsrTi1wccskpLGiZwPxVDe7yl5wZs6Kc?=
 =?us-ascii?q?eiR05meNOpFoZbuS+dN4tzWMwiQmdotT49yrwHvZ60ZjMFyI89yx7YcfyHfJCE?=
 =?us-ascii?q?7Q/5VOaWOTd3n2xqd6ilhxqo8Eiv1+vxXdS33lZStidJjMXAu3MX2xDO98SKSe?=
 =?us-ascii?q?Fx8lmv1DuPzQzf9+NJLVgqmafUN5It37s9m5QXvEjfAiP7nVv6gaqLekgh/+Wk?=
 =?us-ascii?q?9eLqaaj8qJCGLY97kAT+P7wumsOhBeQ4NRADX2ya+eSnyL3j5lf1QLpMjv0riK?=
 =?us-ascii?q?XZt4raJcsDqq64BQ9azJoj5g6hAzu609kUh2QLIE9GdR6dkYTkNVHDLOrlAfq9?=
 =?us-ascii?q?m1islS1kx/HCPr3vGJXNKX3Dna/4fblj7k5c1RM/ws1B6JJKFL4BJOv/VVT2tN?=
 =?us-ascii?q?zFCB82LxK7w/3gBNV514MeWnyADrWWMaPPqVKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4MZXC+GfRmJUqZYXzxgtsbFmcKpAU+QPTwiFKeST5Te2qyX6?=
 =?us-ascii?q?Uk6zE/CYKmDpnMSpqigbycxyq7GpxWZmZbClGDC3vodoOEW+sSZyKWOMNujjsE?=
 =?us-ascii?q?Vb3yA7Inzgyk4Q/m16J8fK2T/iwDqYml0t9z6OvO0xYo+ntxBsWZ1miLCGZsgm?=
 =?us-ascii?q?IPQSRxxa16vAlxx0mO1ftFhedFH4lW7vJNTgBoLJPZ0ql2Bs7/Xkfbc86URU26?=
 =?us-ascii?q?atOhBz43U5Q22dBZeFt3GdipkkXe2TG3CaQejb2BCc8I9ffm3nPxLtxxg1bL0q?=
 =?us-ascii?q?UslUIhRIMbL2ythqdl+07TCojFnl+CkKCCcaUa1TTKsmCZwjzdkltfVVtcWLvE?=
 =?us-ascii?q?UTgwZ0HNqtKxsk/LUb6iIbsmOBBGz4iOMKxSYNDglxNHSLHqJYKNMCqKh26sCE?=
 =?us-ascii?q?PQlfu3Z43wdjBYhX2FBQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAAAt9xlchxHrdtBjFgYBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwgTmBKYwWX4sdgg2XXIF1AQ0FGAcNhykiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIGw4jDII2BQIDGgEGglsBAQEBAgEBAiQZAQEECikBAgIBAQIGA?=
 =?us-ascii?q?QEKFQMJGgMIAwELBRgxEwUEgxkBgXkIAQSlTYFsM4J2AQEFhyUHCIJtiDaBHBe?=
 =?us-ascii?q?Bf4NuNYQ7hiWPWJFZCYIphGaKRgwYYIFKjywskQ6IQoFGgg4zGggXGYMnCQqCC?=
 =?us-ascii?q?AwXEoFyhlqFUy0xAYEDA4sTDxcELIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ATAAAt9xlchxHrdtBjFgYBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wgTmBKYwWX4sdgg2XXIF1AQ0FGAcNhykiNAkNAQMBAQEBAQECARMBAQEKCwkIG?=
 =?us-ascii?q?w4jDII2BQIDGgEGglsBAQEBAgEBAiQZAQEECikBAgIBAQIGAQEKFQMJGgMIAwE?=
 =?us-ascii?q?LBRgxEwUEgxkBgXkIAQSlTYFsM4J2AQEFhyUHCIJtiDaBHBeBf4NuNYQ7hiWPW?=
 =?us-ascii?q?JFZCYIphGaKRgwYYIFKjywskQ6IQoFGgg4zGggXGYMnCQqCCAwXEoFyhlqFUy0?=
 =?us-ascii?q?xAYEDA4sTDxcELIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,371,1539673200"; 
   d="asc'?scan'208";a="56495443"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 23:50:06 -0800
Received: from localhost ([::1]:58050 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZWcH-0001wQ-WF
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 02:50:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41631)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gZWbf-0001w9-LB
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 02:49:29 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <dgibson@ozlabs.org>) id 1gZWbd-0005n8-QE
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 02:49:27 -0500
Received: from ozlabs.org ([2401:3900:2:1::2]:38313)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <dgibson@ozlabs.org>)
	id 1gZWba-0005iY-A8; Wed, 19 Dec 2018 02:49:25 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 43KRqK4rZKz9s3q; Wed, 19 Dec 2018 18:49:17 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1545205757;
	bh=y98570X4Vq7xDA7poUW42ZdV3tpCuR0SjoNm+NjRfd0=;
	h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
	b=DTlnCg2HN3Ic6lhGufEVJfP4iN7w0gv9nDYSGn+1Ck3vJ8sVhbblmwQ+n3xT9qhZb
	83SJH90v5U77g00zlkWUGTgUMQYy6NgFnqRx7/CXUkpud03YKXOT5a8cXdjykHqsRG
	5uAPbf4SXltd9IrHAGQS5823iUXmNHcvjv2dyMY4=
Date: Wed, 19 Dec 2018 17:15:55 +1100
From: David Gibson <david@gibson.dropbear.id.au>
To: Richard Henderson <richard.henderson@linaro.org>
Message-ID: <20181219061555.GH30570@umbus.fritz.box>
References: <20181218063911.2112-1-richard.henderson@linaro.org>
	<20181218063911.2112-13-richard.henderson@linaro.org>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	protocol="application/pgp-signature"; boundary="smOfPzt+Qjm5bNGJ"
Content-Disposition: inline
In-Reply-To: <20181218063911.2112-13-richard.henderson@linaro.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2401:3900:2:1::2
Subject: Re: [Qemu-devel] [PATCH 12/34] target/ppc: introduce get_avr64()
 and set_avr64() helpers for VMX register access
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, mark.cave-ayland@ilande.co.uk, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


--smOfPzt+Qjm5bNGJ
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Mon, Dec 17, 2018 at 10:38:49PM -0800, Richard Henderson wrote:
> From: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
>=20
> These helpers allow us to move AVR register values to/from the specified =
TCGv_i64
> argument.
>=20
> To prevent VMX helpers accessing the cpu_avr{l,h} arrays directly, add ex=
tra TCG
> temporaries as required.
>=20
> Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
> Reviewed-by: Richard Henderson <richard.henderson@linaro.org>

Acked-by: David Gibson <david@gibson.dropbear.id.au>

> Message-Id: <20181217122405.18732-3-mark.cave-ayland@ilande.co.uk>
> ---
>  target/ppc/translate.c              |  10 +++
>  target/ppc/translate/vmx-impl.inc.c | 128 ++++++++++++++++++++++------
>  2 files changed, 110 insertions(+), 28 deletions(-)
>=20
> diff --git a/target/ppc/translate.c b/target/ppc/translate.c
> index 1d4bf624a3..fa3e8dc114 100644
> --- a/target/ppc/translate.c
> +++ b/target/ppc/translate.c
> @@ -6704,6 +6704,16 @@ static inline void set_fpr(int regno, TCGv_i64 src)
>      tcg_gen_mov_i64(cpu_fpr[regno], src);
>  }
> =20
> +static inline void get_avr64(TCGv_i64 dst, int regno, bool high)
> +{
> +    tcg_gen_mov_i64(dst, (high ? cpu_avrh : cpu_avrl)[regno]);
> +}
> +
> +static inline void set_avr64(int regno, TCGv_i64 src, bool high)
> +{
> +    tcg_gen_mov_i64((high ? cpu_avrh : cpu_avrl)[regno], src);
> +}
> +
>  #include "translate/fp-impl.inc.c"
> =20
>  #include "translate/vmx-impl.inc.c"
> diff --git a/target/ppc/translate/vmx-impl.inc.c b/target/ppc/translate/v=
mx-impl.inc.c
> index 3cb6fc2926..30046c6e31 100644
> --- a/target/ppc/translate/vmx-impl.inc.c
> +++ b/target/ppc/translate/vmx-impl.inc.c
> @@ -18,52 +18,66 @@ static inline TCGv_ptr gen_avr_ptr(int reg)
>  static void glue(gen_, name)(DisasContext *ctx)                         =
              \
>  {                                                                       =
      \
>      TCGv EA;                                                            =
      \
> +    TCGv_i64 avr;                                                       =
      \
>      if (unlikely(!ctx->altivec_enabled)) {                              =
      \
>          gen_exception(ctx, POWERPC_EXCP_VPU);                           =
      \
>          return;                                                         =
      \
>      }                                                                   =
      \
>      gen_set_access_type(ctx, ACCESS_INT);                               =
      \
> +    avr =3D tcg_temp_new_i64();                                         =
        \
>      EA =3D tcg_temp_new();                                              =
        \
>      gen_addr_reg_index(ctx, EA);                                        =
      \
>      tcg_gen_andi_tl(EA, EA, ~0xf);                                      =
      \
>      /* We only need to swap high and low halves. gen_qemu_ld64_i64 does =
      \
>         necessary 64-bit byteswap already. */                            =
      \
>      if (ctx->le_mode) {                                                 =
      \
> -        gen_qemu_ld64_i64(ctx, cpu_avrl[rD(ctx->opcode)], EA);          =
      \
> +        gen_qemu_ld64_i64(ctx, avr, EA);                                =
      \
> +        set_avr64(rD(ctx->opcode), avr, false);                         =
      \
>          tcg_gen_addi_tl(EA, EA, 8);                                     =
      \
> -        gen_qemu_ld64_i64(ctx, cpu_avrh[rD(ctx->opcode)], EA);          =
      \
> +        gen_qemu_ld64_i64(ctx, avr, EA);                                =
      \
> +        set_avr64(rD(ctx->opcode), avr, true);                          =
      \
>      } else {                                                            =
      \
> -        gen_qemu_ld64_i64(ctx, cpu_avrh[rD(ctx->opcode)], EA);          =
      \
> +        gen_qemu_ld64_i64(ctx, avr, EA);                                =
      \
> +        set_avr64(rD(ctx->opcode), avr, true);                          =
      \
>          tcg_gen_addi_tl(EA, EA, 8);                                     =
      \
> -        gen_qemu_ld64_i64(ctx, cpu_avrl[rD(ctx->opcode)], EA);          =
      \
> +        gen_qemu_ld64_i64(ctx, avr, EA);                                =
      \
> +        set_avr64(rD(ctx->opcode), avr, false);                         =
      \
>      }                                                                   =
      \
>      tcg_temp_free(EA);                                                  =
      \
> +    tcg_temp_free_i64(avr);                                             =
      \
>  }
> =20
>  #define GEN_VR_STX(name, opc2, opc3)                                    =
      \
>  static void gen_st##name(DisasContext *ctx)                             =
      \
>  {                                                                       =
      \
>      TCGv EA;                                                            =
      \
> +    TCGv_i64 avr;                                                       =
      \
>      if (unlikely(!ctx->altivec_enabled)) {                              =
      \
>          gen_exception(ctx, POWERPC_EXCP_VPU);                           =
      \
>          return;                                                         =
      \
>      }                                                                   =
      \
>      gen_set_access_type(ctx, ACCESS_INT);                               =
      \
> +    avr =3D tcg_temp_new_i64();                                         =
        \
>      EA =3D tcg_temp_new();                                              =
        \
>      gen_addr_reg_index(ctx, EA);                                        =
      \
>      tcg_gen_andi_tl(EA, EA, ~0xf);                                      =
      \
>      /* We only need to swap high and low halves. gen_qemu_st64_i64 does =
      \
>         necessary 64-bit byteswap already. */                            =
      \
>      if (ctx->le_mode) {                                                 =
      \
> -        gen_qemu_st64_i64(ctx, cpu_avrl[rD(ctx->opcode)], EA);          =
      \
> +        get_avr64(avr, rD(ctx->opcode), false);                         =
      \
> +        gen_qemu_st64_i64(ctx, avr, EA);                                =
      \
>          tcg_gen_addi_tl(EA, EA, 8);                                     =
      \
> -        gen_qemu_st64_i64(ctx, cpu_avrh[rD(ctx->opcode)], EA);          =
      \
> +        get_avr64(avr, rD(ctx->opcode), true);                          =
      \
> +        gen_qemu_st64_i64(ctx, avr, EA);                                =
      \
>      } else {                                                            =
      \
> -        gen_qemu_st64_i64(ctx, cpu_avrh[rD(ctx->opcode)], EA);          =
      \
> +        get_avr64(avr, rD(ctx->opcode), true);                          =
      \
> +        gen_qemu_st64_i64(ctx, avr, EA);                                =
      \
>          tcg_gen_addi_tl(EA, EA, 8);                                     =
      \
> -        gen_qemu_st64_i64(ctx, cpu_avrl[rD(ctx->opcode)], EA);          =
      \
> +        get_avr64(avr, rD(ctx->opcode), false);                         =
      \
> +        gen_qemu_st64_i64(ctx, avr, EA);                                =
      \
>      }                                                                   =
      \
>      tcg_temp_free(EA);                                                  =
      \
> +    tcg_temp_free_i64(avr);                                             =
      \
>  }
> =20
>  #define GEN_VR_LVE(name, opc2, opc3, size)                              \
> @@ -159,15 +173,20 @@ static void gen_lvsr(DisasContext *ctx)
>  static void gen_mfvscr(DisasContext *ctx)
>  {
>      TCGv_i32 t;
> +    TCGv_i64 avr;
>      if (unlikely(!ctx->altivec_enabled)) {
>          gen_exception(ctx, POWERPC_EXCP_VPU);
>          return;
>      }
> -    tcg_gen_movi_i64(cpu_avrh[rD(ctx->opcode)], 0);
> +    avr =3D tcg_temp_new_i64();
> +    tcg_gen_movi_i64(avr, 0);
> +    set_avr64(rD(ctx->opcode), avr, true);
>      t =3D tcg_temp_new_i32();
>      tcg_gen_ld_i32(t, cpu_env, offsetof(CPUPPCState, vscr));
> -    tcg_gen_extu_i32_i64(cpu_avrl[rD(ctx->opcode)], t);
> +    tcg_gen_extu_i32_i64(avr, t);
> +    set_avr64(rD(ctx->opcode), avr, false);
>      tcg_temp_free_i32(t);
> +    tcg_temp_free_i64(avr);
>  }
> =20
>  static void gen_mtvscr(DisasContext *ctx)
> @@ -188,6 +207,7 @@ static void glue(gen_, name)(DisasContext *ctx)      =
                   \
>      TCGv_i64 t0 =3D tcg_temp_new_i64();                                 =
  \
>      TCGv_i64 t1 =3D tcg_temp_new_i64();                                 =
  \
>      TCGv_i64 t2 =3D tcg_temp_new_i64();                                 =
  \
> +    TCGv_i64 avr =3D tcg_temp_new_i64();                                =
  \
>      TCGv_i64 ten, z;                                                    \
>                                                                          \
>      if (unlikely(!ctx->altivec_enabled)) {                              \
> @@ -199,26 +219,35 @@ static void glue(gen_, name)(DisasContext *ctx)    =
                     \
>      z =3D tcg_const_i64(0);                                             =
  \
>                                                                          \
>      if (add_cin) {                                                      \
> -        tcg_gen_mulu2_i64(t0, t1, cpu_avrl[rA(ctx->opcode)], ten);      \
> -        tcg_gen_andi_i64(t2, cpu_avrl[rB(ctx->opcode)], 0xF);           \
> -        tcg_gen_add2_i64(cpu_avrl[rD(ctx->opcode)], t2, t0, t1, t2, z); \
> +        get_avr64(avr, rA(ctx->opcode), false);                         \
> +        tcg_gen_mulu2_i64(t0, t1, avr, ten);                            \
> +        get_avr64(avr, rB(ctx->opcode), false);                         \
> +        tcg_gen_andi_i64(t2, avr, 0xF);                                 \
> +        tcg_gen_add2_i64(avr, t2, t0, t1, t2, z);                       \
> +        set_avr64(rD(ctx->opcode), avr, false);                         \
>      } else {                                                            \
> -        tcg_gen_mulu2_i64(cpu_avrl[rD(ctx->opcode)], t2,                \
> -                          cpu_avrl[rA(ctx->opcode)], ten);              \
> +        get_avr64(avr, rA(ctx->opcode), false);                         \
> +        tcg_gen_mulu2_i64(avr, t2, avr, ten);                           \
> +        set_avr64(rD(ctx->opcode), avr, false);                         \
>      }                                                                   \
>                                                                          \
>      if (ret_carry) {                                                    \
> -        tcg_gen_mulu2_i64(t0, t1, cpu_avrh[rA(ctx->opcode)], ten);      \
> -        tcg_gen_add2_i64(t0, cpu_avrl[rD(ctx->opcode)], t0, t1, t2, z); \
> -        tcg_gen_movi_i64(cpu_avrh[rD(ctx->opcode)], 0);                 \
> +        get_avr64(avr, rA(ctx->opcode), true);                          \
> +        tcg_gen_mulu2_i64(t0, t1, avr, ten);                            \
> +        tcg_gen_add2_i64(t0, avr, t0, t1, t2, z);                       \
> +        set_avr64(rD(ctx->opcode), avr, false);                         \
> +        set_avr64(rD(ctx->opcode), z, true);                            \
>      } else {                                                            \
> -        tcg_gen_mul_i64(t0, cpu_avrh[rA(ctx->opcode)], ten);            \
> -        tcg_gen_add_i64(cpu_avrh[rD(ctx->opcode)], t0, t2);             \
> +        get_avr64(avr, rA(ctx->opcode), true);                          \
> +        tcg_gen_mul_i64(t0, avr, ten);                                  \
> +        tcg_gen_add_i64(avr, t0, t2);                                   \
> +        set_avr64(rD(ctx->opcode), avr, true);                          \
>      }                                                                   \
>                                                                          \
>      tcg_temp_free_i64(t0);                                              \
>      tcg_temp_free_i64(t1);                                              \
>      tcg_temp_free_i64(t2);                                              \
> +    tcg_temp_free_i64(avr);                                             \
>      tcg_temp_free_i64(ten);                                             \
>      tcg_temp_free_i64(z);                                               \
>  }                                                                       \
> @@ -232,12 +261,27 @@ GEN_VX_VMUL10(vmul10ecuq, 1, 1);
>  #define GEN_VX_LOGICAL(name, tcg_op, opc2, opc3)                        \
>  static void glue(gen_, name)(DisasContext *ctx)                         =
        \
>  {                                                                       \
> +    TCGv_i64 t0 =3D tcg_temp_new_i64();                                 =
  \
> +    TCGv_i64 t1 =3D tcg_temp_new_i64();                                 =
  \
> +    TCGv_i64 avr =3D tcg_temp_new_i64();                                =
  \
> +                                                                        \
>      if (unlikely(!ctx->altivec_enabled)) {                              \
>          gen_exception(ctx, POWERPC_EXCP_VPU);                           \
>          return;                                                         \
>      }                                                                   \
> -    tcg_op(cpu_avrh[rD(ctx->opcode)], cpu_avrh[rA(ctx->opcode)], cpu_avr=
h[rB(ctx->opcode)]); \
> -    tcg_op(cpu_avrl[rD(ctx->opcode)], cpu_avrl[rA(ctx->opcode)], cpu_avr=
l[rB(ctx->opcode)]); \
> +    get_avr64(t0, rA(ctx->opcode), true);                               \
> +    get_avr64(t1, rB(ctx->opcode), true);                               \
> +    tcg_op(avr, t0, t1);                                                \
> +    set_avr64(rD(ctx->opcode), avr, true);                              \
> +                                                                        \
> +    get_avr64(t0, rA(ctx->opcode), false);                              \
> +    get_avr64(t1, rB(ctx->opcode), false);                              \
> +    tcg_op(avr, t0, t1);                                                \
> +    set_avr64(rD(ctx->opcode), avr, false);                             \
> +                                                                        \
> +    tcg_temp_free_i64(t0);                                              \
> +    tcg_temp_free_i64(t1);                                              \
> +    tcg_temp_free_i64(avr);                                             \
>  }
> =20
>  GEN_VX_LOGICAL(vand, tcg_gen_and_i64, 2, 16);
> @@ -406,6 +450,7 @@ GEN_VXFORM(vmrglw, 6, 6);
>  static void gen_vmrgew(DisasContext *ctx)
>  {
>      TCGv_i64 tmp;
> +    TCGv_i64 avr;
>      int VT, VA, VB;
>      if (unlikely(!ctx->altivec_enabled)) {
>          gen_exception(ctx, POWERPC_EXCP_VPU);
> @@ -415,15 +460,28 @@ static void gen_vmrgew(DisasContext *ctx)
>      VA =3D rA(ctx->opcode);
>      VB =3D rB(ctx->opcode);
>      tmp =3D tcg_temp_new_i64();
> -    tcg_gen_shri_i64(tmp, cpu_avrh[VB], 32);
> -    tcg_gen_deposit_i64(cpu_avrh[VT], cpu_avrh[VA], tmp, 0, 32);
> -    tcg_gen_shri_i64(tmp, cpu_avrl[VB], 32);
> -    tcg_gen_deposit_i64(cpu_avrl[VT], cpu_avrl[VA], tmp, 0, 32);
> +    avr =3D tcg_temp_new_i64();
> +
> +    get_avr64(avr, VB, true);
> +    tcg_gen_shri_i64(tmp, avr, 32);
> +    get_avr64(avr, VA, true);
> +    tcg_gen_deposit_i64(avr, avr, tmp, 0, 32);
> +    set_avr64(VT, avr, true);
> +
> +    get_avr64(avr, VB, false);
> +    tcg_gen_shri_i64(tmp, avr, 32);
> +    get_avr64(avr, VA, false);
> +    tcg_gen_deposit_i64(avr, avr, tmp, 0, 32);
> +    set_avr64(VT, avr, false);
> +
>      tcg_temp_free_i64(tmp);
> +    tcg_temp_free_i64(avr);
>  }
> =20
>  static void gen_vmrgow(DisasContext *ctx)
>  {
> +    TCGv_i64 t0, t1;
> +    TCGv_i64 avr;
>      int VT, VA, VB;
>      if (unlikely(!ctx->altivec_enabled)) {
>          gen_exception(ctx, POWERPC_EXCP_VPU);
> @@ -432,9 +490,23 @@ static void gen_vmrgow(DisasContext *ctx)
>      VT =3D rD(ctx->opcode);
>      VA =3D rA(ctx->opcode);
>      VB =3D rB(ctx->opcode);
> +    t0 =3D tcg_temp_new_i64();
> +    t1 =3D tcg_temp_new_i64();
> +    avr =3D tcg_temp_new_i64();
> =20
> -    tcg_gen_deposit_i64(cpu_avrh[VT], cpu_avrh[VB], cpu_avrh[VA], 32, 32=
);
> -    tcg_gen_deposit_i64(cpu_avrl[VT], cpu_avrl[VB], cpu_avrl[VA], 32, 32=
);
> +    get_avr64(t0, VB, true);
> +    get_avr64(t1, VA, true);
> +    tcg_gen_deposit_i64(avr, t0, t1, 32, 32);
> +    set_avr64(VT, avr, true);
> +
> +    get_avr64(t0, VB, false);
> +    get_avr64(t1, VA, false);
> +    tcg_gen_deposit_i64(avr, t0, t1, 32, 32);
> +    set_avr64(VT, avr, false);
> +
> +    tcg_temp_free_i64(t0);
> +    tcg_temp_free_i64(t1);
> +    tcg_temp_free_i64(avr);
>  }
> =20
>  GEN_VXFORM(vmuloub, 4, 0);

--=20
David Gibson			| I'll have my music baroque, and my code
david AT gibson.dropbear.id.au	| minimalist, thank you.  NOT _the_ _other_
				| _way_ _around_!
http://www.ozlabs.org/~dgibson

--smOfPzt+Qjm5bNGJ
Content-Type: application/pgp-signature; name="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEdfRlhq5hpmzETofcbDjKyiDZs5IFAlwZ4hsACgkQbDjKyiDZ
s5K7fxAAuFBm2rHza6BeQtsr6fCJwx2nAucUnK0gqf5gRYo0TQuGBtRUYjEDartV
KjmF1CopsCHPwqoTST/rsKLM/m9WNhHoSLP4vl7QgpTG/c6T9lQZXa0Nz+zye57Z
+QgYwZ2Oe3af3QDkSmt2MT+M4ZcP1yBur3eIOBWDQRie1OwLnL8kY9szZ1PZl5uh
51NKTieMBRlXsWoGZ7IavKEzExG1XogxFO0zyzVs2sM2zndA8eb+1mrNJQnyrqwm
v8+zt8GXVYCOw+vfgjZT0r+TIw5FvN+as9nhsu9m0AZvQfT8PGfauj7Z5FYLdFSp
Ye3tfR/7OJhzrqiwA4HKqEF5Orvs6oVhMe+O2id3QF5C9ShPILm8nBP3e1EDGpBM
yO8+DRNYiKoQCH+uI3N+U2Qtr9uCZXEeNye/BfwJPSVqAFuXKBLhI39UdcCDkNKT
g8Ri2YddL2mOhTWqgD7DGZCealEzt1q7PWrInlvAMSA68+nfoV4U2AmDSpD0PUTH
c9+byytDdgj7CZfir9k97dNsaruCmzaP2iYlAQCSnnlv/2FWzyPGGhgsyjN5JSOr
g6C+ECLNC/78TI8T5EM7CdUDg67QIExnBtCZ0dpb0Ud/CqnxcP2GKAJPQPyKV+Mj
ts5acBOPpFgt8m8mSPxRigvmykRqmWWM7ZlxFv3rFclOE0t4Irg=
=Cu6i
-----END PGP SIGNATURE-----

--smOfPzt+Qjm5bNGJ--

