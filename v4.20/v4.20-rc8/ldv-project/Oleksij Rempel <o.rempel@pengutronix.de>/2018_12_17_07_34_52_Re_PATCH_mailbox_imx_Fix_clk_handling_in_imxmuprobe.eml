Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  17 Dec 2018 16:15:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 131FF58079C;
	Sun, 16 Dec 2018 23:38:36 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 16 Dec 2018 23:38:35 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AkrU7WRCDK2joz9xr1f9uUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+oMqwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95MWSJfDIOy?=
 =?us-ascii?q?b4gBAeQPMulXrYbyu1QArQCmBQSuH+7v1j1Fi2Xq0aEm3eksEQfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34Or4WUe+rz6nI1jTDb/FL0jnh9ofIdwghru+IXbltdsfRzlMjFxnbgVWV?=
 =?us-ascii?q?sYzqITeV2/8Vs2eF6epgWv+vi3I9qwF2pDivx8gthpPUiY0L013J8zhyzogyJd?=
 =?us-ascii?q?29UkF7YNikHYNUtyGbMYt2X8wjQ312tyYh1r0GuJi7fCcQxJQg3R7fZPqKeJWL?=
 =?us-ascii?q?7BL7TOudPyt0iXZ/dL6iiRu+71KsxvD/W8WoylpHryhInsHSunwRyxDf982KR/?=
 =?us-ascii?q?p/80i93DuC1gLe5v1BLEwpiabXN5ssz7AqmZUOsUnOGyD7lUf4jK+Yc0gk9Pan?=
 =?us-ascii?q?5P7pYrjju5OROZJ7hRv4P68zgMKwG/44PRILX2WD+eSzyrnj/UrhTbVUgf05jL?=
 =?us-ascii?q?PZvIrZJcsFvK65BRFa0oI55xa4FTem38wUnXgBLF1bZBKKl5blN03KLfziEPuy?=
 =?us-ascii?q?jUqgnC12y/3FIrHtGJTAI3rbnLfkZ7l96kpcyAQpzdBY4pJZErUBIPP1Wk/su9?=
 =?us-ascii?q?3UFxw5PBKuw+bhFtp90poSWWWBA6+fLqzSq0SF5vwgI+aSfo8ZojX9JOY/5/7o?=
 =?us-ascii?q?k3A5nUURfa6z3ZsYcHy4BOhpI12FYXrwhdcMCWMKvgs9TOP0klGDXiNTam22X6?=
 =?us-ascii?q?I94DE7FY2nAZ3CRoCrnLyOwiO7EodKaWBBD1CGCW3oeJmcW/cQdCKSJddskjwe?=
 =?us-ascii?q?WrigV48uzxauuBX6y7p6NOXU/CIYuInn1Nh04e3TiB4z+SZ1D8Sbz2GCUWV0kn?=
 =?us-ascii?q?kUSD8x2aB1uVZ9xUub0ahkn/xYEsRe5/FOUggkL5LczOt6C9b0WgLGZdqJTFem?=
 =?us-ascii?q?QtO7ATA+VN4xwtkOY1pjFNWmlBzMwy2qA7oNnbyRGJM06r7c32T2J8tl0XnGz6?=
 =?us-ascii?q?khj14lQsdVL22pnKx/+hPXB47IlUWZiqmreb4d3C7L6GeM026OsFtEXw53VKXP?=
 =?us-ascii?q?RWofaVfOrdTl+kPCSKejCbc9PQtH08KCLqpKZcfvjVVJX/rjPNXeY2Ssm2a/Hx?=
 =?us-ascii?q?qIx7WMbJb0dGUZxinSFE8EkwUL93acKQc+Hjuho37ZDDF2CF3geV3s/vdkpHO7?=
 =?us-ascii?q?VEA0yRqKYFNn17ay/h4VhvmcS/cI07IAuSchrSh0HVmn09LXDdqAuxRufKFGbd?=
 =?us-ascii?q?wh51dH0HrTtxZhMZy4M6BimlkefhxqsEz0yRV4FJ9Mkcgwo3Ms1wp9N6SY3UhF?=
 =?us-ascii?q?dzOZ25DwJ7LWJnPz/BCpd67ZxFXe3MyK9acI7fQys0/jsx2xFko+73Vn1MFY02?=
 =?us-ascii?q?ed5pXPCwoSTZLxU0Yt+xhmvb3aZTM954fV1X1qPqm5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aJwqqrM/hvnT24jWVL+p?=
 =?us-ascii?q?ty0l+R+CVmTO7I3JEFw++D0wuDVjf8ikqhs8/tlYBFYzESAnSwySz+CIFNYa1y?=
 =?us-ascii?q?eJ4BCX2yLM2v2tV+m5ntVmZY9V6+HV8JxNWleBuSb1Pn2w1Q2l8aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjAGl5UfmyKdB?=
 =?us-ascii?q?vqRwMm7TTV1OfyfoNWFiU7K8uaaYbM5L9Zwnrz9XUOO6YV2BTr79oh0a0z7sHm?=
 =?us-ascii?q?dExTA7cS2qtYv9nxBglG2dK3NzpmLDec5s3Rff+MDcRflJ0zsGRSl0kznWCkKn?=
 =?us-ascii?q?P9m0+9WZjJPDsuG4V2K8WZxfayjrzYWctCSl4W1mGwGwn/e2mtf/Cwg1zTf718?=
 =?us-ascii?q?V2VSXPtBv8YJPk1765MeJkeUlkHkT85NB5GoF9k4swgo8f2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sW2y0n6MBGEq?=
 =?us-ascii?q?WU7L1CnSZuplq4rATRYeVynzsHyPsu7mIajP8NuAY30iqdBbUSF1FCPSPwjxSI?=
 =?us-ascii?q?88y+rKJPaWasa7ew1VByndC8DL6YpAFcV230epMjHS9288V+P0jA0Hz16oH4Zt?=
 =?us-ascii?q?bQacgfuQGTkxfFl+JVMo4+luIWhSp7PmLwpXgly+84jRN0x527spaIK35x/K2n?=
 =?us-ascii?q?GB5XLSP6Z9kc+jz2iaZen8CW352gH5l7GzULWofoQuysED4IqfvnMAOOGiUmqn?=
 =?us-ascii?q?iHAbrfAROf6EB+onLTFJCrMmubJXgDwtVkWRmdP1dfgAEPUTU+n545EB2qxcP7?=
 =?us-ascii?q?fEd44DAR+kD3qh9Wxu10MBn/V3/VpB20ZTcsVJifMB1W4xlZ6EjPNsye6v9zEz?=
 =?us-ascii?q?tc/p28twGNLm2bZwJVDWAGQECEBlbjPqWw6tnE6eSXGu2+L/7Wa7WUteNeT+uI?=
 =?us-ascii?q?xY6o0oZ+/TaDLMCPMWd5D/EhxkpPR3N5G9namzUSTSwYjTnNYtWfpBe9/C13s8?=
 =?us-ascii?q?++/O7qWALp+YuAFb9SPc9z9BCxhKeJL/SQizphKTZEypMMwmfFybgY3F4PkiFu?=
 =?us-ascii?q?aiOiEbIauS7WS6LQnKBXAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GNLSYKj3KwMH3YqK8RadTjOVOsB2wtiiUE1X+PjSY?=
 =?us-ascii?q?jDTpUxGvMedRjCCUJhBeuYe9cgpzBmjnVt7pdhq7MNpvhz0s3bI0nm/KNXIbMT?=
 =?us-ascii?q?VkaUxNs6af7TlGjfR/AWBB6ntlIPKAmyaY6enYN5kXveFqAiRyi+JV/nA6x6FJ?=
 =?us-ascii?q?4yFDQfx/gDHSocJ2o1G6jumPzSJqUAZPqjZOno6EoV9uNrnZ9pZeX3bJ5xYN7W?=
 =?us-ascii?q?SWCxQXqNppENzvu6ZMytfRkKL/MitN89XR/cEEHcjbNNqHMGY9MRruADPVDBEK?=
 =?us-ascii?q?TTiuNWHegUxSiPCT9n2PoZg8pZjhg54OSr5dVFwoGfIWEEVlHNoeIJhpWjMoi6?=
 =?us-ascii?q?KUjMkN5Sn2kB6EbcFXrp3WHtGSBu/oMzaYib5aL08LwbTiKp8TN4n8xWRjcUFg?=
 =?us-ascii?q?lZ+MAVeGDv5XpSg0SQs5o15M8jBEQ2gr1katPgTr+nIWDfOwtgY7jARjff4q8j?=
 =?us-ascii?q?b8pVs6cAmZ7BAsmVU8zI22yQuadyT8eeLpBdlb?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AhAADcUBdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTCCOyeYCoFgCCUUl0SBcxQYEwGEQIMSIjUIDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCCkvgjYkAYJiAQIDAQIkEUEGCQEBChguA1QGDQYCAQEBgx2CAQEDA?=
 =?us-ascii?q?ahFM4VAhF2MPoFXP4ERJwyCX4RfIoVfAok4hlyBCI99BwKBFpA+Hol/h1MsmTi?=
 =?us-ascii?q?BSAOCCTMaJIM7kFw/MoEFAQGLMYI+AQE?=
X-IPAS-Result: =?us-ascii?q?A0AhAADcUBdch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgTC?=
 =?us-ascii?q?COyeYCoFgCCUUl0SBcxQYEwGEQIMSIjUIDQEDAQEBAQEBAgETAQEBCgsJCCkvg?=
 =?us-ascii?q?jYkAYJiAQIDAQIkEUEGCQEBChguA1QGDQYCAQEBgx2CAQEDAahFM4VAhF2MPoF?=
 =?us-ascii?q?XP4ERJwyCX4RfIoVfAok4hlyBCI99BwKBFpA+Hol/h1MsmTiBSAOCCTMaJIM7k?=
 =?us-ascii?q?Fw/MoEFAQGLMYI+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,364,1539673200"; 
   d="scan'208";a="45238430"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 16 Dec 2018 23:37:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731129AbeLQHey (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 02:34:54 -0500
Received: from metis.ext.pengutronix.de ([85.220.165.71]:50723 "EHLO
        metis.ext.pengutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726349AbeLQHey (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 02:34:54 -0500
Received: from soja.hi.pengutronix.de ([2001:67c:670:100:3ad5:47ff:feaf:13da])
        by metis.ext.pengutronix.de with esmtps (TLS1.2:ECDHE_RSA_AES_128_GCM_SHA256:128)
        (Exim 4.89)
        (envelope-from <o.rempel@pengutronix.de>)
        id 1gYnQS-00078o-Nw; Mon, 17 Dec 2018 08:34:52 +0100
Subject: Re: [PATCH] mailbox: imx: Fix clk handling in imx_mu_probe()
To: Alexey Khoroshilov <khoroshilov@ispras.ru>
Cc: Jassi Brar <jassisinghbrar@gmail.com>,
        linux-kernel@vger.kernel.org, ldv-project@linuxtesting.org
References: <1544914904-3809-1-git-send-email-khoroshilov@ispras.ru>
 <20181217060111.hsay6vhqpxyfdbiu@pengutronix.de>
 <3ccce5b6-75a5-da94-08e3-985880382d00@ispras.ru>
From: Oleksij Rempel <o.rempel@pengutronix.de>
Message-ID: <a508d43a-deed-1060-8b15-cbdad60f810e@pengutronix.de>
Date: Mon, 17 Dec 2018 08:34:52 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <3ccce5b6-75a5-da94-08e3-985880382d00@ispras.ru>
Content-Type: text/plain; charset=windows-1252; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-SA-Exim-Connect-IP: 2001:67c:670:100:3ad5:47ff:feaf:13da
X-SA-Exim-Mail-From: o.rempel@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de); SAEximRunCond expanded to false
X-PTX-Original-Recipient: linux-kernel@vger.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 17.12.18 08:24, Alexey Khoroshilov wrote:
> Hi Oleksij,
> 
> By chance I took a look at another implementations:
> 
> arch/arm/mach-ep93xx/clock.c#L266
> 
> int clk_enable(struct clk *clk)
> {
> 	unsigned long flags;
> 
> 	if (!clk)
> 		return -EINVAL;
> ...
> 
> arch/c6x/platforms/pll.c#L48
> 
> int clk_enable(struct clk *clk)
> {
> 	unsigned long flags;
> 
> 	if (clk == NULL || IS_ERR(clk))
> 		return -EINVAL;
> 
> So, I am not sure the NULL resistance is a part of the clk_enable()
> contract?

Main framework is always preferred. If some local code provide 
replacement of a functions already provided by the clk framework and not 
follow same rules, then this code should be fixed. If this code is even 
exporting this function for global use, then it is probably buggy.
And if i see it correctly:
1d81eedb8f6c1 (Lennert Buytenhek  2006-06-24 10:33:02 +0100 266) int 
clk_enable(struct clk *clk)

It is ancient code... it just can't be correct.

> --
> Alexey
> 
> 
> On 17.12.2018 9:01, Oleksij Rempel wrote:
>> Hi Alexey,
>>
>> On Sun, Dec 16, 2018 at 02:01:44AM +0300, Alexey Khoroshilov wrote:
>>> Handling of devm_clk_get() suggests that the driver should support
>>> lack of priv->clk. But imx_mu_probe() fails on clk_prepare_enable(NULL)
>>> in that case.
>>>
>>> The patch removes the try to enable absent clk and adds error handling
>>> for mbox_controller_register().
>>>
>>> Found by Linux Driver Verification project (linuxtesting.org).
>>>
>>> Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
>>> ---
>>>   drivers/mailbox/imx-mailbox.c | 18 +++++++++++++-----
>>>   1 file changed, 13 insertions(+), 5 deletions(-)
>>>
>>> diff --git a/drivers/mailbox/imx-mailbox.c b/drivers/mailbox/imx-mailbox.c
>>> index 363d35d5e49d..ddde398f576e 100644
>>> --- a/drivers/mailbox/imx-mailbox.c
>>> +++ b/drivers/mailbox/imx-mailbox.c
>>> @@ -292,10 +292,12 @@ static int imx_mu_probe(struct platform_device *pdev)
>>>   		priv->clk = NULL;
>>>   	}
>>>   
>>> -	ret = clk_prepare_enable(priv->clk);
>>> -	if (ret) {
>>> -		dev_err(dev, "Failed to enable clock\n");
>>> -		return ret;
>>> +	if (priv->clk) {
>>> +		ret = clk_prepare_enable(priv->clk);
>>> +		if (ret) {
>>> +			dev_err(dev, "Failed to enable clock\n");
>>> +			return ret;
>>> +		}
>>>   	}
>>>   
>>>   	for (i = 0; i < IMX_MU_CHANS; i++) {
>>> @@ -324,7 +326,13 @@ static int imx_mu_probe(struct platform_device *pdev)
>>>   
>>>   	imx_mu_init_generic(priv);
>>>   
>>> -	return mbox_controller_register(&priv->mbox);
>>> +	ret = mbox_controller_register(&priv->mbox);
>>> +	if (ret) {
>>> +		clk_disable_unprepare(priv->clk);
>>> +		return ret;
>>> +	}
>>> +
>>> +	return 0;
>>>   }
>>>   
>>>   static int imx_mu_remove(struct platform_device *pdev)
>>> -- 
>>> 2.7.4
>>>
>>>
>>
>> NACK for this patch.
>>
>> Here are code snippets from clk framework:
>> ============================================================================
>> /* clk_prepare_enable helps cases using clk_enable in non-atomic context. */
>> static inline int clk_prepare_enable(struct clk *clk)
>> {
>> 	int ret;
>>
>> 	ret = clk_prepare(clk);
>> 	if (ret)
>> 		return ret;
>> 	ret = clk_enable(clk);
>> 	if (ret)
>> 		clk_unprepare(clk);
>>
>> 	return ret;
>> }
>>
>> int clk_prepare(struct clk *clk)
>> {
>> 	if (!clk)
>> 		return 0;
>>
>> 	return clk_core_prepare_lock(clk->core);
>> }
>>
>> int clk_enable(struct clk *clk)
>> {
>> 	if (!clk)
>> 		return 0;
>>
>> 	return clk_core_enable_lock(clk->core);
>> }
>> ============================================================================
>>
>> As you can see, complete code path is NULL resistant. Are you trying to
>> fix some real issue, or it is a theoretical work?
>>
> 
> 
