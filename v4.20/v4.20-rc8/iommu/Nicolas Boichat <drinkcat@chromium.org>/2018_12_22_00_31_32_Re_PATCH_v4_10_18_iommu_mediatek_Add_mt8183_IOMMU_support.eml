Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:56:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E9223580522;
	Fri, 21 Dec 2018 16:31:50 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 16:31:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ADKGG/xYAP3MUg0LPpK13MI3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpc+zYx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyNOAo2+?=
 =?us-ascii?q?YIUPAeQPPvtWoZfhqFsVtRuzBxKhBP/zxjJSmnP6wbE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvtNacdTee1zK3SwjXYcvhbxDD96InUfRAhu/6MQa97fM3Mxkk1FgPFiFaQ?=
 =?us-ascii?q?ppD/MDOJzekCr2ib7/BnVeKqim4ntgRxriKoxsc2hYnEn4QYwU3H+yVh2Is5O8?=
 =?us-ascii?q?G0RUphbdK5HpZcqTuWO5Z1T88+WW1luSQ3xqUYtZKneCUG0pcqyh7FZ/CZbYSE?=
 =?us-ascii?q?/AjvWPuVLDp2gn9uZaixiAyo8Ue6z+3xTsm030hOripCitTMqH8N2ALJ6sSdSf?=
 =?us-ascii?q?ty4F2h2TCR2ADX8O1EJlo0laXDJ54gxL4/iIYTvFzdEiPqnEj6lrKae0s69uSy?=
 =?us-ascii?q?9ujqYanqqoWdOoJ2kg3+N74hms27AeQ2KAgOWG2b9Py41L3i+035XbpLguQ1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqgDw9S3Icj7QiwDy293dQGknkIMkhFdAiEj4f3IVHOJu73DfOl?=
 =?us-ascii?q?j1SrijdryOjKPqf9DZXVMnjDjLDhcK55605dywo808pT5p1JCrwaJPLzW0nxtM?=
 =?us-ascii?q?HXDxMjMgy0xfrnB8t51o8ERW2PBaqZOrvIsVCU/uIvP/WMZIgNtTb9Mfcl5uLu?=
 =?us-ascii?q?gmU+mVMHfampwIEYaHa3Hvl9J0WZYHzsgsoOEGsQvwo+SvDqh0OGUTJJe3myWK?=
 =?us-ascii?q?c87CkhCI26FYfDWpytgLuZ0SihBZ1WZmdGClOWHXfybYqEWewBaCaTIs9njzwF?=
 =?us-ascii?q?WqKtS44n1RGyqgD6z6BrIfbT+i0drZjjzsR65/XPlREu8jx5F8ed3HuLT21umm?=
 =?us-ascii?q?MIRiU53KZwoUFmzleD0K54g+FXFNBJ5vNJVBs6OoDYz+BgF9/yXQfBdM+TSFm6?=
 =?us-ascii?q?WtWmHS0xTtUpztATeUl9BcutggrD3yWwBb8VjKKEBJoz/qLY3HjxIsJ9xm3C1K?=
 =?us-ascii?q?kgiVkmX8ROOXenhq556wjcGYrJn1+FmKatcKQWxDTN+3ubzWqSoEFYVxZ9Xrjf?=
 =?us-ascii?q?UnABeETat9T56VnET7+1F7snNBBMycqDKqtMd93ogk9KRPblONTCfW2xn328Cg?=
 =?us-ascii?q?qPxrOJdIDqYXkS3D3BCEgYlAAe5WqGNQk7Biemv2LeDDxvGUjzY0/29ul+sne7?=
 =?us-ascii?q?Tk4yzwGFdEBh07u1+hgIhf2TUf8T37QEuDs/pDVwBlqyw9XWC9+YrQp7YKpcec?=
 =?us-ascii?q?894EtA1W/BrQN9OoKvLq98iV8eaQh4pF7u2AhtBYVGksgqq20qwRF2KaKZ1lNB?=
 =?us-ascii?q?ajyZ0YrxOr3RNmn94hSvZ7TK1VHZ1dac4r0P5+ggq1X/oAGpEVIv8nV609VPz3?=
 =?us-ascii?q?SQ/JTLDAoIXpL3XUY67Bx6p7DcYikg6ILYz3xsMa+osjDc39IlHvcqyhGlf91H?=
 =?us-ascii?q?KqOLCBfyE9EGB8ipMOEqgVmpYQ4eM+BI6aE0ONmqd/2Y166xPeZshS6pgn5D4I?=
 =?us-ascii?q?9gzE2M7S18SujT0pYBwvGY2BaHVjjmgFegtMD3hZ5LZTUIEmWjzijkAZZbZrdu?=
 =?us-ascii?q?coYTFWeuP8q3y81+hp7sQXJZ9ESvB0gb2M+vYheSa1393QtN1UUYu3CnmC24zy?=
 =?us-ascii?q?BqnDEttKaQwCvOw+H6fhodJmFLXHVijUvrIYWsjdAVRlKobwsqlBui/0r63LJU?=
 =?us-ascii?q?pKd8L2nSR0dHYS72InpmUquxsLqCfsFO5IkpsSVRTOSzf1SaRqThrBsd1iPpB3?=
 =?us-ascii?q?FeyywjdzG2ppX5mAR3iWKHI3Z0tnbZe8BwxRHE6dzYRP5R2CcGRSZihTnWAFi8?=
 =?us-ascii?q?I8em/dGOm5jfteC+UnqrVodPfinz0YOAqCy76HVpARKlnvC/gN3nERUg3i/92N?=
 =?us-ascii?q?lnTiHIrBf6Yon22KW2K+Nnfk90BFDi78p2AJ1xkow1hJsIw3gVmo2V/WYbkWf0?=
 =?us-ascii?q?Kdhb3KP+bHkXSjIRzd/a/hPl2FF9IXKT3I32SG+dwsR6atm+Y2MW3D897s9QBK?=
 =?us-ascii?q?eV6rxEgTV6ol6ioQ3NZvh9my8XyeEy534Cn+EJpA0twz2BArAVGElUJy3tmA6O?=
 =?us-ascii?q?79Cjt6VXf2evfKO01Ep/m9ChEb6DrhtdWHb/ZpctAytw4t9jP1LL1X358pvkd8?=
 =?us-ascii?q?XIbdIPqh2UlA/NgPNPJ5I2kvoKmDBrOWbgvXA+z+47jBpu3Yy1vYSdKmVt+r65?=
 =?us-ascii?q?DQBcNjHve8wT/TTth75EnsmKx4CvAolhGjITUZvqV/2oFSwdte/9OwaSCjE8qW?=
 =?us-ascii?q?qbGbnCHQ+Z8khmtGnCE5SqN3GROXkYws9uRBibJExDng8UWC82kYI+FgCv3Mbh?=
 =?us-ascii?q?alt25igN5l7krRtB0uJpNx7iUmfGuQencDE0RIKELBpR6AFC6FzYMcif7uJ1Ai?=
 =?us-ascii?q?FZ8YetrA2LKmyHeQtICXsFVVCDB1DmJrOu/8XP8/CEBuqiKPvDebWOpvJfV/eL?=
 =?us-ascii?q?xpKv05Fq/zWWNsWIMXltEec72ldYXX1iH8TZmjMPSzEYli7Xbs6bogu89TNzrs?=
 =?us-ascii?q?yl7PvrXwfv75OVC7ROKdVv5wy2gaCbOuGKmSZ2MixY2Y0MxHPSzLgf3UUfiyVv?=
 =?us-ascii?q?dzmrDLQBujTBTKPWmq9LEREbbzl/O9dP76I5xgNNI9LUisvp1r5kif44E0tFVV?=
 =?us-ascii?q?3kms2zecMGOX2yNFPZC0aNL7mGITzLw8fqYaKzU7FQjeNUtwGutjafCUPsIjOD?=
 =?us-ascii?q?lzzxXRC1Le5MlD2bPABZuIylchdiE27jTNfnah29KNB2jD02zqcyhnPFLmMcNT?=
 =?us-ascii?q?l8c0VQrryf9y9Yg/N/G3Bf4XphN+WLhyGZ7+yLYqoR5MpsBCs8qP8StGU9zbQT?=
 =?us-ascii?q?8zxsQfF5mSLOo90oqFajxLqh0D1iBTxPoTFPjZnDl0JjMqXQ6tEUVWzF+hEG5H?=
 =?us-ascii?q?m4ABQQoN5kF9ipvLpfnIuc3JnvIStPpoqHtfAXANLZfYfeaCIs?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B7AACThR1ch0O0hNFkHgEGBwaBVAYLA?=
 =?us-ascii?q?YNrJ4N9lGcGgTUUiRCQMSoTAYcwIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkjDII?=
 =?us-ascii?q?6KQGCZwECAwECIAQZAQE3AQUJAQEKCw0CAiYCAgMfEgEFARwGEwWDHYF1DQWaQ?=
 =?us-ascii?q?DyKKXB8M4J2AQEFhyAIEnmLNBd4gQeBEYMSiAmCV49if4VFiyEJkWkYgWCPf4p?=
 =?us-ascii?q?ZjzQwgTuBeDMaCCgIOzEGgjWCGwwXiF6FTDIzgQUBAYtjK4IbBQEB?=
X-IPAS-Result: =?us-ascii?q?A0B7AACThR1ch0O0hNFkHgEGBwaBVAYLAYNrJ4N9lGcGgTU?=
 =?us-ascii?q?UiRCQMSoTAYcwIjcGDQEDAQEBAQEBAgETAQEBCA0JCCkjDII6KQGCZwECAwECI?=
 =?us-ascii?q?AQZAQE3AQUJAQEKCw0CAiYCAgMfEgEFARwGEwWDHYF1DQWaQDyKKXB8M4J2AQE?=
 =?us-ascii?q?FhyAIEnmLNBd4gQeBEYMSiAmCV49if4VFiyEJkWkYgWCPf4pZjzQwgTuBeDMaC?=
 =?us-ascii?q?CgIOzEGgjWCGwwXiF6FTDIzgQUBAYtjK4IbBQEB?=
X-IronPort-AV: E=Sophos;i="5.56,383,1539673200"; 
   d="scan'208";a="56186345"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 16:31:48 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404740AbeLVAbq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 19:31:46 -0500
Received: from mail-qk1-f193.google.com ([209.85.222.193]:33296 "EHLO
        mail-qk1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389073AbeLVAbq (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 19:31:46 -0500
Received: by mail-qk1-f193.google.com with SMTP id o89so4196121qko.0
        for <linux-kernel@vger.kernel.org>; Fri, 21 Dec 2018 16:31:44 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=Fw6KSKC9utOhtabpKAhBkW73wfRGpPx1HvCrekdUbxM=;
        b=jMLHjyyW48Zolw/C1d2bD6lkbYg8pSaAsFJhCpYx8KYWQHml6iblx6A+WOlcQRpeaH
         zgWNNoylVNs2BNkPSz4WRnzqCamM5/aaGNQ8Pv8Wv9zCV5J7wvI7t1X02S5q+/TTkBPE
         KUrDY2J5UFOxAC35MCHBEARYQisiZtnC3P9XA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=Fw6KSKC9utOhtabpKAhBkW73wfRGpPx1HvCrekdUbxM=;
        b=qixOZHoiandjOsxYfFGht87qoTij+/iC4juZXiJ/HFryHkMfLKB9lS9y78bSMNers8
         yZ4H0BpV/2CHgv/OMdKXqz7aJz7Nu4ZH6jv5Z2Uk+FD294ieOGkKkmN46aq/VRZfNf7F
         MFjmMePPz9X86FmwPJNd1UqQ2Vtru3AOzu01AJ+d7zLll5vr1mnJ6rbh6wj9+8ONdwgs
         hEghD6EOH2xFlsRnxYG5Fc0KxzACQhz/fm5Ct3G0J2M9BRg+0o2xSluauphJ9R+JeLqt
         1niJPDnf32u3Z06fDbdMctw3ub2IpA91WlCNqvgtDtnNAdnsmAh/RWqt6Hw4XytbLVc1
         ek6w==
X-Gm-Message-State: AJcUukdaMEZhRO79ZTUmouQEiaQ4pJHjX0yxDWs0t6Ryc9Vl6x4Bgx8A
        DMbdnKjy/G21mOSiIyqK8C5hri/tTSApw82anqo4Ww==
X-Google-Smtp-Source: ALg8bN5lM6Dsz8j/gCUoawconycXriunMBfghDSBY4CUHC5ymImkL8oTraieVmXLjrrN99xR2WrQyXeE3wlmgMfoxTM=
X-Received: by 2002:a37:5107:: with SMTP id f7mr4481973qkb.124.1545438703724;
 Fri, 21 Dec 2018 16:31:43 -0800 (PST)
MIME-Version: 1.0
References: <1544258371-4600-1-git-send-email-yong.wu@mediatek.com>
 <1544258371-4600-11-git-send-email-yong.wu@mediatek.com> <CANMq1KBMWM8BhMDJo1paVbToibsZGYVOCWBOua81w7fnTCO-bw@mail.gmail.com>
 <1545379358.29587.51.camel@mhfsdcap03>
In-Reply-To: <1545379358.29587.51.camel@mhfsdcap03>
From: Nicolas Boichat <drinkcat@chromium.org>
Date: Sat, 22 Dec 2018 08:31:32 +0800
Message-ID: <CANMq1KDz5kja9BLuuDZer1eGPqOhhcAg3oPt85jE=XOuqaExcg@mail.gmail.com>
Subject: Re: [PATCH v4 10/18] iommu/mediatek: Add mt8183 IOMMU support
To: Yong Wu <yong.wu@mediatek.com>
Cc: Joerg Roedel <joro@8bytes.org>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Robin Murphy <robin.murphy@arm.com>,
        Rob Herring <robh+dt@kernel.org>,
        Tomasz Figa <tfiga@google.com>,
        Will Deacon <will.deacon@arm.com>,
        linux-mediatek@lists.infradead.org, srv_heupstream@mediatek.com,
        devicetree@vger.kernel.org, lkml <linux-kernel@vger.kernel.org>,
        linux-arm Mailing List <linux-arm-kernel@lists.infradead.org>,
        iommu@lists.linux-foundation.org, Arnd Bergmann <arnd@arndb.de>,
        yingjoe.chen@mediatek.com, youlin.pei@mediatek.com,
        Arvind Yadav <arvind.yadav.cs@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 21, 2018 at 4:02 PM Yong Wu <yong.wu@mediatek.com> wrote:
>
> On Fri, 2018-12-21 at 12:43 +0800, Nicolas Boichat wrote:
> > On Sat, Dec 8, 2018 at 4:42 PM Yong Wu <yong.wu@mediatek.com> wrote:
> > >
> > > The M4U IP blocks in mt8183 is MediaTek's generation2 M4U which use
> > > the ARM Short-descriptor like mt8173, and most of the HW registers
> > > are the same.
> > >
> > > Here list main differences between mt8183 and mt8173/mt2712:
> > > 1) mt8183 has only one M4U HW like mt8173 while mt2712 has two.
> > > 2) mt8183 don't have the "bclk" clock, it use the EMI clock instead.
> > > 3) mt8183 can support the dram over 4GB, but it doesn't call this "4GB
> > > mode".
> > > 4) mt8183 pgtable base register(0x0) extend bit[1:0] which represent
> > > the bit[33:32] in the physical address of the pgtable base, But the
> > > standard ttbr0[1] means the S bit which is enabled defaultly, Hence,
> > > we add a mask.
> > > 5) mt8183 HW has a GALS modules, SMI should enable "has_gals" support.
> > > 6) the larb-id in smi-common is remapped. M4U should enable
> > > larbid_remapped support.
> > >
> > > Signed-off-by: Yong Wu <yong.wu@mediatek.com>
> > > ---
> > >  drivers/iommu/mtk_iommu.c | 31 ++++++++++++++++++++++---------
> > >  drivers/iommu/mtk_iommu.h |  1 +
> > >  drivers/memory/mtk-smi.c  | 19 +++++++++++++++++++
> > >  3 files changed, 42 insertions(+), 9 deletions(-)
> > >
> > > diff --git a/drivers/iommu/mtk_iommu.c b/drivers/iommu/mtk_iommu.c
> > > index 8ab3b69..d91a554 100644
> > > --- a/drivers/iommu/mtk_iommu.c
> > > +++ b/drivers/iommu/mtk_iommu.c
> > > @@ -36,6 +36,7 @@
> > >  #include "mtk_iommu.h"
> > >
> > >  #define REG_MMU_PT_BASE_ADDR                   0x000
> > > +#define MMU_PT_ADDR_MASK                       GENMASK(31, 7)
> > >
> > >  #define REG_MMU_INVALIDATE                     0x020
> > >  #define F_ALL_INVLD                            0x2
> > > @@ -54,7 +55,7 @@
> > >  #define REG_MMU_CTRL_REG                       0x110
> > >  #define F_MMU_PREFETCH_RT_REPLACE_MOD          BIT(4)
> > >  #define F_MMU_TF_PROTECT_SEL_SHIFT(data) \
> > > -       ((data)->plat_data->m4u_plat == M4U_MT2712 ? 4 : 5)
> > > +       ((data)->plat_data->m4u_plat == M4U_MT8173 ? 5 : 4)
> >
> > Should the shift value be a member of plat_data instead?
>
> It's also ok.
> This TF_PROTECT_SEL MACRO looks a bit complex. I can use a new patch to
> refactor it.

SGTM.

> >
> > >  /* It's named by F_MMU_TF_PROT_SEL in mt2712. */
> > >  #define F_MMU_TF_PROTECT_SEL(prot, data) \
> > >         (((prot) & 0x3) << F_MMU_TF_PROTECT_SEL_SHIFT(data))
> > > @@ -347,7 +348,7 @@ static int mtk_iommu_attach_device(struct iommu_domain *domain,
> > >         /* Update the pgtable base address register of the M4U HW */
> > >         if (!data->m4u_dom) {
> > >                 data->m4u_dom = dom;
> > > -               writel(dom->cfg.arm_v7s_cfg.ttbr[0],
> > > +               writel(dom->cfg.arm_v7s_cfg.ttbr[0] & MMU_PT_ADDR_MASK,
> > >                        data->base + REG_MMU_PT_BASE_ADDR);
> > >         }
> > >
> > > @@ -510,6 +511,7 @@ static int mtk_iommu_of_xlate(struct device *dev, struct of_phandle_args *args)
> > >
> > >  static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > >  {
> > > +       enum mtk_iommu_plat m4u_plat = data->plat_data->m4u_plat;
> > >         u32 regval;
> > >         int ret;
> > >
> > > @@ -520,7 +522,7 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > >         }
> > >
> > >         regval = F_MMU_TF_PROTECT_SEL(2, data);
> > > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > > +       if (m4u_plat == M4U_MT8173)
> > >                 regval |= F_MMU_PREFETCH_RT_REPLACE_MOD;
> > >         writel_relaxed(regval, data->base + REG_MMU_CTRL_REG);
> > >
> > > @@ -541,14 +543,14 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > >                 F_INT_PRETETCH_TRANSATION_FIFO_FAULT;
> > >         writel_relaxed(regval, data->base + REG_MMU_INT_MAIN_CONTROL);
> > >
> > > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > > +       if (m4u_plat == M4U_MT8173)
> > >                 regval = (data->protect_base >> 1) | (data->enable_4GB << 31);
> > >         else
> > >                 regval = lower_32_bits(data->protect_base) |
> > >                          upper_32_bits(data->protect_base);
> > >         writel_relaxed(regval, data->base + REG_MMU_IVRP_PADDR);
> > >
> > > -       if (data->enable_4GB && data->plat_data->m4u_plat != M4U_MT8173) {
> > > +       if (data->enable_4GB && m4u_plat == M4U_MT2712) {
> > >                 /*
> > >                  * If 4GB mode is enabled, the validate PA range is from
> > >                  * 0x1_0000_0000 to 0x1_ffff_ffff. here record bit[32:30].
> > > @@ -558,8 +560,11 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > >         }
> > >         writel_relaxed(0, data->base + REG_MMU_DCM_DIS);
> > >
> > > -       /* It's MISC control register whose default value is ok except mt8173.*/
> > > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > > +       /*
> > > +        * It's MISC control register whose default value is ok
> > > +        * except mt8173 and mt8183.
> > > +        */
> > > +       if (m4u_plat == M4U_MT8173 || m4u_plat == M4U_MT8183)
> >
> > Again, should this be a field in plat_data?
>
> In mt8173 and mt8183, 0x48 is REG_MMU_STANDARD_AXI_MODE while it's
> MMU_MISC_CTRL which contain this STANDARD_AXI_MODE bit and some other
> bits in the other SoCs.
>
> The register name and meaning are not the same. I guess I can not use a
> value like reg_0x48 in plat_data. I'd like to keep the current way. is
> it ok?

What I mean is to add a "reset_axi" (or something) field in plat_data, and do:
if (plat_data->reset_axi)
instead of
 if (m4u_plat == M4U_MT8173 || m4u_plat == M4U_MT8183)

My main concern is that the test will grow bigger and bigger as we add
support for more SoCs (similarly to your F_MMU_TF_PROTECT_SEL_SHIFT
test above, where you are lucky because only one of the SoC requires a
shift of 5 bits, and the 2 others require 4).

Thanks,

> >
> > >                 writel_relaxed(0, data->base + REG_MMU_STANDARD_AXI_MODE);
> > >
> > >         if (devm_request_irq(data->dev, data->irq, mtk_iommu_isr, 0,
> > > @@ -713,6 +718,7 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> > >  {
> > >         struct mtk_iommu_data *data = dev_get_drvdata(dev);
> > >         struct mtk_iommu_suspend_reg *reg = &data->reg;
> > > +       struct mtk_iommu_domain *m4u_dom = data->m4u_dom;
> > >         void __iomem *base = data->base;
> > >         int ret;
> > >
> > > @@ -728,8 +734,8 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> > >         writel_relaxed(reg->int_control0, base + REG_MMU_INT_CONTROL0);
> > >         writel_relaxed(reg->int_main_control, base + REG_MMU_INT_MAIN_CONTROL);
> > >         writel_relaxed(reg->ivrp_paddr, base + REG_MMU_IVRP_PADDR);
> > > -       if (data->m4u_dom)
> > > -               writel(data->m4u_dom->cfg.arm_v7s_cfg.ttbr[0],
> > > +       if (m4u_dom)
> > > +               writel(m4u_dom->cfg.arm_v7s_cfg.ttbr[0] & MMU_PT_ADDR_MASK,
> > >                        base + REG_MMU_PT_BASE_ADDR);
> > >         return 0;
> > >  }
> > > @@ -750,9 +756,16 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> > >         .has_bclk     = true,
> > >  };
> > >
> > > +static const struct mtk_iommu_plat_data mt8183_data = {
> > > +       .m4u_plat            = M4U_MT8183,
> > > +       .larbid_remap_enable = true,
> > > +       .larbid_remapped     = {0, 4, 5, 6, 7, 2, 3, 1},
> > > +};
> > > +
> > >  static const struct of_device_id mtk_iommu_of_ids[] = {
> > >         { .compatible = "mediatek,mt2712-m4u", .data = &mt2712_data},
> > >         { .compatible = "mediatek,mt8173-m4u", .data = &mt8173_data},
> > > +       { .compatible = "mediatek,mt8183-m4u", .data = &mt8183_data},
> > >         {}
> > >  };
> > >
> > > diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
> > > index 3877050..6385dec 100644
> > > --- a/drivers/iommu/mtk_iommu.h
> > > +++ b/drivers/iommu/mtk_iommu.h
> > > @@ -39,6 +39,7 @@ enum mtk_iommu_plat {
> > >         M4U_MT2701,
> > >         M4U_MT2712,
> > >         M4U_MT8173,
> > > +       M4U_MT8183,
> > >  };
> > >
> > >  struct mtk_iommu_plat_data {
> > > diff --git a/drivers/memory/mtk-smi.c b/drivers/memory/mtk-smi.c
> > > index 3720c77..bced778 100644
> > > --- a/drivers/memory/mtk-smi.c
> > > +++ b/drivers/memory/mtk-smi.c
> > > @@ -285,6 +285,12 @@ static void mtk_smi_larb_config_port_gen1(struct device *dev)
> > >         .larb_special_mask = BIT(8) | BIT(9),          /* bdpsys */
> > >  };
> > >
> > > +static const struct mtk_smi_larb_gen mtk_smi_larb_mt8183 = {
> > > +       .has_gals          = true,
> > > +       .config_port       = mtk_smi_larb_config_port_gen2_general,
> > > +       .larb_special_mask = BIT(2) | BIT(3) | BIT(7), /* IPU0 | IPU1 | CCU */
> > > +};
> > > +
> > >  static const struct of_device_id mtk_smi_larb_of_ids[] = {
> > >         {
> > >                 .compatible = "mediatek,mt8173-smi-larb",
> > > @@ -298,6 +304,10 @@ static void mtk_smi_larb_config_port_gen1(struct device *dev)
> > >                 .compatible = "mediatek,mt2712-smi-larb",
> > >                 .data = &mtk_smi_larb_mt2712
> > >         },
> > > +       {
> > > +               .compatible = "mediatek,mt8183-smi-larb",
> > > +               .data = &mtk_smi_larb_mt8183
> > > +       },
> > >         {}
> > >  };
> > >
> > > @@ -391,6 +401,11 @@ static int mtk_smi_larb_remove(struct platform_device *pdev)
> > >         .gen = MTK_SMI_GEN2,
> > >  };
> > >
> > > +static const struct mtk_smi_common_plat mtk_smi_common_mt8183 = {
> > > +       .gen      = MTK_SMI_GEN2,
> > > +       .has_gals = true,
> > > +};
> > > +
> > >  static const struct of_device_id mtk_smi_common_of_ids[] = {
> > >         {
> > >                 .compatible = "mediatek,mt8173-smi-common",
> > > @@ -404,6 +419,10 @@ static int mtk_smi_larb_remove(struct platform_device *pdev)
> > >                 .compatible = "mediatek,mt2712-smi-common",
> > >                 .data = &mtk_smi_common_gen2,
> > >         },
> > > +       {
> > > +               .compatible = "mediatek,mt8183-smi-common",
> > > +               .data = &mtk_smi_common_mt8183,
> > > +       },
> > >         {}
> > >  };
> > >
> > > --
> > > 1.9.1
> > >
>
>
