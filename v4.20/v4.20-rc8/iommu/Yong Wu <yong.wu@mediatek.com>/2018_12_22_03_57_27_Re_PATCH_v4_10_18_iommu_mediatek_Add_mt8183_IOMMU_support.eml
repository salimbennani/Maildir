Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:56:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BAA73580522;
	Fri, 21 Dec 2018 19:57:44 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 19:57:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAYuMkBCFEzhtzrxxc8y5UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP74oMWwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95SWSJcAo2y?=
 =?us-ascii?q?cYUBAOgPPelEqIfzqFQBrQCmBQSuH+7v1j1Fi2Xq0aAgz+gsEwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34O6UVUeCzw6nD0DXMb+5L0jr66InIdRYhof6WUbN+bMrc0kwvGB3YgVWR?=
 =?us-ascii?q?s4PlIy2a1ucXv2eH6OpgUPuihmg6oA9yujii3tkghpXNi44P11zJ+zt1zJwoKd?=
 =?us-ascii?q?C7VEJ3e9+pHZlIuy2HLYd6XN8uTm9ytCony7ALt4S3cSsXxJkh2hXRceaIc5KS?=
 =?us-ascii?q?7RLmTOuRISl3hHZieL+nmRay/lavyvfmWsm3zllKtCxFncfItnwX0BzT8MeHRu?=
 =?us-ascii?q?N8/kenxzmPyxje5v9YLU0wj6bXNpAszqAqmpYOsknPAjX6lUT0gaOOc0Ur4Omo?=
 =?us-ascii?q?6+DpYrX8oZ+cMpd5igX/MqQoh8y+Dv00MgsQUGiB/+Szyrnj8VT+QLREiP05jL?=
 =?us-ascii?q?PZvYvEJcQUuKG5GRVZ0oU95BalCTepztAYkWMALFJfdxKLl5LpNE3WIPDkEfe/?=
 =?us-ascii?q?hEyhkDNqx/DFILLtGJrMLmXYnbflfLZ97VNcyQUpwdBe4ZJUFq8OIPbpVkDts9?=
 =?us-ascii?q?zYCwczMxaozOb/FNV9yoQeVHqPAqCDMaPSrUWH5uU1L+mMeY8aojD9K/c+6v7q?=
 =?us-ascii?q?jH85n0IdfKaz0ZsWbnC4AuppI0GDbXXwhdcBFH8AvhAiQ+zylF2CTTlTam6oUK?=
 =?us-ascii?q?In5jE7D4GmAZ3ZRo+3gryMxyO7HpxQZmBbBVGAC3bod4OYW/gSbCKeONNukjsB?=
 =?us-ascii?q?VbK5UY8uyQmutBPmy7pgNufU+TcXtZT52Nhx5u3cjxcy9TNvAsSZ0mGNSXx0n2?=
 =?us-ascii?q?wSSz832qB/vVJyylOZ3adkhPxYEMRZ5+lVXQciKZ7c0+t6BsjvVQ3bYNeGVkyq?=
 =?us-ascii?q?QtW8DjE3VdI+3dkOb0F5G9WhixDD2zGnA7sUl7yNGZw1/bjQ33n3J8Zh1XnG0L?=
 =?us-ascii?q?MtgEUhQstKLWemnLJw9xDPB47VlEWUj7uler4C3CHT7muDzXCBvEdDUAFuV6XI?=
 =?us-ascii?q?RnQfZkrQrdTk6ULOVb6uCbI7MgRfzc6OMLdFatrsjV9eXvfsJMzeY36tm2e3HR?=
 =?us-ascii?q?uI2rKMbI/te2UB3CXcCFIIkxwJ8XaBLwg+Aiaho2TRDDF1EVLvYkXs8fRxqX+h?=
 =?us-ascii?q?T080yR2KYFNl17av5hEVgvmcQesJ3r0YoCchtyl0HFGl0t3MD9qPuQVgc7tcYN?=
 =?us-ascii?q?8n+1hHyH/WuBZ7PpyjKKBimEUTcwB2v0PoyhV2BZ9MkcksrHM20gVyLbiU309G?=
 =?us-ascii?q?dzOdxZrwIKHYKnHu/BCzbK7bwlHf0MuM9qgT8vg5qlXjsxuvFkot6Hhn19hV03?=
 =?us-ascii?q?2B5pTFFgYSUJTxUlop+Bh+vb3Vfi4954bM3312Laa0qiPC284uBOY90BagfstQ?=
 =?us-ascii?q?P7meFADvFM0WHc6uJ/Iwm1iodx4LIPpd9KopMMy4bfuG36irMf1knDKni2RH/Y?=
 =?us-ascii?q?983liN9yp6Vu7HwZIFz+uE0QuAUjf2lE2hvdzvmYBYeTESGXKyyCjlBIJLZqx+?=
 =?us-ascii?q?Z50LCXqoI8CswtV+hpjtW2NX9VK5BlMG3tOpdgSWb1DnwQJQ0kEXq2S9mSSk1z?=
 =?us-ascii?q?x0jy0prq2H0SzM2evibhkHOm1MRGV4llfjO4u0j9MbXEiucQcpkgCo5UL7x6hd?=
 =?us-ascii?q?uaR+IHPfQUZOfyjqMW5iVrG8uaaFY85K8JkoqzlYUPygYVCGTb7wuxsb3DnkH2?=
 =?us-ascii?q?dExjA7djeqt479nxx7jmKdMXlyoGDYecF22RfQ+tjcSeRN0ToBQSlykSPXCUSk?=
 =?us-ascii?q?P9m14dWUkI/OsuOkWGKgTJFTcTTrwpmGtCu0/mBqBRy/n/aumtzoCwQ60Cn718?=
 =?us-ascii?q?V0WiXMthrzfo7r16GiO+J9YkZoHEP869Z9Goxml4swhZIQ1mIAipSb43UHinvz?=
 =?us-ascii?q?PstB2a3lcnUNXzELzsXR4Ajk3k1jM32Iy5j4VnWb3stued26bnkK1SI66sBAEL?=
 =?us-ascii?q?2U46BcnStpvlq4qhrcYeR6njcY0/cv6WQVg+cUuAo21SWdA6sfHU1ZPSzqihSJ?=
 =?us-ascii?q?4MqyrKRRZGazb7ew0FByksymDLGHugtcQmr2eo8+HS9s6cVyKEnD32f06oHgZd?=
 =?us-ascii?q?ncd9YTtgCPnhfEjuhVLo8xl/UQiSpmP2L9oWMqy+ohgRNy2pG6uZCNK39x86Kh?=
 =?us-ascii?q?Hh5YKjr1atsR+j73iKZRgN2W05qzHpl7GTULQZjoTe+uED0IrvTqLAKOEDw6qn?=
 =?us-ascii?q?eGFrvTBw6f6EF6r33RF5CnLW2YJH4czd96XhmSOFRfgBwIXDU9hpM4FgeqxNH4?=
 =?us-ascii?q?cEdk/D8R4ET0qgBLyuJuOBnySWPfpAauajcpR5mTNhtW7gde50jLNcyS9P58Hy?=
 =?us-ascii?q?Zd/pe5tgyCNnSbZxhUDWEOQkGEB07sPrit5dnD8uiUHOm+L+HJYbWBt+NeTeqI?=
 =?us-ascii?q?xYm034ti/jaMMNiPP3Z4A/063EpDQW52G8DDlzoTTCwXkjrHb9SHqxek5i13ss?=
 =?us-ascii?q?e//ezxVwLy/oSPEaVdMNV19xCygKeOLOqQhCd/KTZF2ZIA337IyL4D3FEMjyFi?=
 =?us-ascii?q?bSWiEbMFtSTVVqLfhrdXDwIHayN0LMZI86M83gxXNcHHkN/6yr54geAzC1peUV?=
 =?us-ascii?q?zhm8epZdEFIm2nNVPHAlqLO6qCJTHR3873Zqa8Q6VKjOpIrx2wpSqbE0j7MzWD?=
 =?us-ascii?q?jTbpURWvMeBKjC6DPR1euJuychBiCWX4SNLmaxu7MMJ4jDEswL00gG/KOnAYMT?=
 =?us-ascii?q?Rmb0xNqbiQvmtkhaBZGmdG6nN+ZcODmi2Z5vWQfpoMsP1oCS1ov+la+nM/yqZQ?=
 =?us-ascii?q?qiZeS6omtjHVq4tfpFep2taSgm52VxxB7ClWrIeGsURrJajasJJHXCCXr1o28W?=
 =?us-ascii?q?yMBkFS9JNeAdr1tvUVk4CXmQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAgCutR1ch0O0hNFkHQEBBQEHBQGBZ?=
 =?us-ascii?q?QKDaieDfpYiFJlEEhgTAYcwIjgSAQMBAQEBAQECARMBAQEIDQkIKS9CARABgWY?=
 =?us-ascii?q?pAYJmAQEBAQIBAQIgBFIFAQkBAQoOCgICJgICA1QGDgUFgx2BegcBBaYnfDOKJ?=
 =?us-ascii?q?YELizSBVz+BEYMSiAmCVwKLQ4QdSTaQZwcCDYIcj1gKAoFUiCuHVYpbj0WBXYF?=
 =?us-ascii?q?3cFCCbIInF44qMgEBMYEFAQGIR4NtK4IbBQEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAgCutR1ch0O0hNFkHQEBBQEHBQGBZQKDaieDfpYiFJl?=
 =?us-ascii?q?EEhgTAYcwIjgSAQMBAQEBAQECARMBAQEIDQkIKS9CARABgWYpAYJmAQEBAQIBA?=
 =?us-ascii?q?QIgBFIFAQkBAQoOCgICJgICA1QGDgUFgx2BegcBBaYnfDOKJYELizSBVz+BEYM?=
 =?us-ascii?q?SiAmCVwKLQ4QdSTaQZwcCDYIcj1gKAoFUiCuHVYpbj0WBXYF3cFCCbIInF44qM?=
 =?us-ascii?q?gEBMYEFAQGIR4NtK4IbBQEB?=
X-IronPort-AV: E=Sophos;i="5.56,383,1539673200"; 
   d="scan'208";a="57930866"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 19:57:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2387894AbeLVD5l (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 22:57:41 -0500
Received: from mailgw02.mediatek.com ([1.203.163.81]:19613 "EHLO
        mailgw02.mediatek.com" rhost-flags-OK-FAIL-OK-FAIL) by vger.kernel.org
        with ESMTP id S1728705AbeLVD5l (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 22:57:41 -0500
X-UUID: 7cf86e7198d74139a4ef6564a72c8166-20181222
X-UUID: 7cf86e7198d74139a4ef6564a72c8166-20181222
Received: from mtkcas36.mediatek.inc [(172.27.4.250)] by mailgw02.mediatek.com
        (envelope-from <yong.wu@mediatek.com>)
        (mailgw01.mediatek.com ESMTP with TLS)
        with ESMTP id 1200911103; Sat, 22 Dec 2018 11:57:30 +0800
Received: from MTKCAS36.mediatek.inc (172.27.4.186) by MTKMBS31DR.mediatek.inc
 (172.27.6.102) with Microsoft SMTP Server (TLS) id 15.0.1395.4; Sat, 22 Dec
 2018 11:57:27 +0800
Received: from [10.17.3.153] (10.17.3.153) by MTKCAS36.mediatek.inc
 (172.27.4.170) with Microsoft SMTP Server id 15.0.1395.4 via Frontend
 Transport; Sat, 22 Dec 2018 11:57:27 +0800
Message-ID: <1545451047.29587.90.camel@mhfsdcap03>
Subject: Re: [PATCH v4 10/18] iommu/mediatek: Add mt8183 IOMMU support
From: Yong Wu <yong.wu@mediatek.com>
To: Nicolas Boichat <drinkcat@chromium.org>
CC: Joerg Roedel <joro@8bytes.org>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Robin Murphy <robin.murphy@arm.com>,
        Rob Herring <robh+dt@kernel.org>,
        Tomasz Figa <tfiga@google.com>,
        Will Deacon <will.deacon@arm.com>,
        <linux-mediatek@lists.infradead.org>,
        <srv_heupstream@mediatek.com>, <devicetree@vger.kernel.org>,
        lkml <linux-kernel@vger.kernel.org>,
        linux-arm Mailing List <linux-arm-kernel@lists.infradead.org>,
        <iommu@lists.linux-foundation.org>, Arnd Bergmann <arnd@arndb.de>,
        <yingjoe.chen@mediatek.com>, <youlin.pei@mediatek.com>,
        Arvind Yadav <arvind.yadav.cs@gmail.com>
Date: Sat, 22 Dec 2018 11:57:27 +0800
In-Reply-To: <CANMq1KDz5kja9BLuuDZer1eGPqOhhcAg3oPt85jE=XOuqaExcg@mail.gmail.com>
References: <1544258371-4600-1-git-send-email-yong.wu@mediatek.com>
         <1544258371-4600-11-git-send-email-yong.wu@mediatek.com>
         <CANMq1KBMWM8BhMDJo1paVbToibsZGYVOCWBOua81w7fnTCO-bw@mail.gmail.com>
         <1545379358.29587.51.camel@mhfsdcap03>
         <CANMq1KDz5kja9BLuuDZer1eGPqOhhcAg3oPt85jE=XOuqaExcg@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"
X-Mailer: Evolution 3.2.3-0ubuntu6 
Content-Transfer-Encoding: 7bit
MIME-Version: 1.0
X-MTK: N
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Sat, 2018-12-22 at 08:31 +0800, Nicolas Boichat wrote:
> On Fri, Dec 21, 2018 at 4:02 PM Yong Wu <yong.wu@mediatek.com> wrote:
> >
> > On Fri, 2018-12-21 at 12:43 +0800, Nicolas Boichat wrote:
> > > On Sat, Dec 8, 2018 at 4:42 PM Yong Wu <yong.wu@mediatek.com> wrote:
> > > >
> > > > The M4U IP blocks in mt8183 is MediaTek's generation2 M4U which use
> > > > the ARM Short-descriptor like mt8173, and most of the HW registers
> > > > are the same.
> > > >
> > > > Here list main differences between mt8183 and mt8173/mt2712:
> > > > 1) mt8183 has only one M4U HW like mt8173 while mt2712 has two.
> > > > 2) mt8183 don't have the "bclk" clock, it use the EMI clock instead.
> > > > 3) mt8183 can support the dram over 4GB, but it doesn't call this "4GB
> > > > mode".
> > > > 4) mt8183 pgtable base register(0x0) extend bit[1:0] which represent
> > > > the bit[33:32] in the physical address of the pgtable base, But the
> > > > standard ttbr0[1] means the S bit which is enabled defaultly, Hence,
> > > > we add a mask.
> > > > 5) mt8183 HW has a GALS modules, SMI should enable "has_gals" support.
> > > > 6) the larb-id in smi-common is remapped. M4U should enable
> > > > larbid_remapped support.
> > > >
> > > > Signed-off-by: Yong Wu <yong.wu@mediatek.com>
> > > > ---
> > > >  drivers/iommu/mtk_iommu.c | 31 ++++++++++++++++++++++---------
> > > >  drivers/iommu/mtk_iommu.h |  1 +
> > > >  drivers/memory/mtk-smi.c  | 19 +++++++++++++++++++
> > > >  3 files changed, 42 insertions(+), 9 deletions(-)
> > > >
> > > > diff --git a/drivers/iommu/mtk_iommu.c b/drivers/iommu/mtk_iommu.c
> > > > index 8ab3b69..d91a554 100644
> > > > --- a/drivers/iommu/mtk_iommu.c
> > > > +++ b/drivers/iommu/mtk_iommu.c
> > > > @@ -36,6 +36,7 @@
> > > >  #include "mtk_iommu.h"
> > > >
> > > >  #define REG_MMU_PT_BASE_ADDR                   0x000
> > > > +#define MMU_PT_ADDR_MASK                       GENMASK(31, 7)
> > > >
> > > >  #define REG_MMU_INVALIDATE                     0x020
> > > >  #define F_ALL_INVLD                            0x2
> > > > @@ -54,7 +55,7 @@
> > > >  #define REG_MMU_CTRL_REG                       0x110
> > > >  #define F_MMU_PREFETCH_RT_REPLACE_MOD          BIT(4)
> > > >  #define F_MMU_TF_PROTECT_SEL_SHIFT(data) \
> > > > -       ((data)->plat_data->m4u_plat == M4U_MT2712 ? 4 : 5)
> > > > +       ((data)->plat_data->m4u_plat == M4U_MT8173 ? 5 : 4)
> > >
> > > Should the shift value be a member of plat_data instead?
> >
> > It's also ok.
> > This TF_PROTECT_SEL MACRO looks a bit complex. I can use a new patch to
> > refactor it.
> 
> SGTM.
> 
> > >
> > > >  /* It's named by F_MMU_TF_PROT_SEL in mt2712. */
> > > >  #define F_MMU_TF_PROTECT_SEL(prot, data) \
> > > >         (((prot) & 0x3) << F_MMU_TF_PROTECT_SEL_SHIFT(data))
> > > > @@ -347,7 +348,7 @@ static int mtk_iommu_attach_device(struct iommu_domain *domain,
> > > >         /* Update the pgtable base address register of the M4U HW */
> > > >         if (!data->m4u_dom) {
> > > >                 data->m4u_dom = dom;
> > > > -               writel(dom->cfg.arm_v7s_cfg.ttbr[0],
> > > > +               writel(dom->cfg.arm_v7s_cfg.ttbr[0] & MMU_PT_ADDR_MASK,
> > > >                        data->base + REG_MMU_PT_BASE_ADDR);
> > > >         }
> > > >
> > > > @@ -510,6 +511,7 @@ static int mtk_iommu_of_xlate(struct device *dev, struct of_phandle_args *args)
> > > >
> > > >  static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > > >  {
> > > > +       enum mtk_iommu_plat m4u_plat = data->plat_data->m4u_plat;
> > > >         u32 regval;
> > > >         int ret;
> > > >
> > > > @@ -520,7 +522,7 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > > >         }
> > > >
> > > >         regval = F_MMU_TF_PROTECT_SEL(2, data);
> > > > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > > > +       if (m4u_plat == M4U_MT8173)
> > > >                 regval |= F_MMU_PREFETCH_RT_REPLACE_MOD;
> > > >         writel_relaxed(regval, data->base + REG_MMU_CTRL_REG);
> > > >
> > > > @@ -541,14 +543,14 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > > >                 F_INT_PRETETCH_TRANSATION_FIFO_FAULT;
> > > >         writel_relaxed(regval, data->base + REG_MMU_INT_MAIN_CONTROL);
> > > >
> > > > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > > > +       if (m4u_plat == M4U_MT8173)
> > > >                 regval = (data->protect_base >> 1) | (data->enable_4GB << 31);
> > > >         else
> > > >                 regval = lower_32_bits(data->protect_base) |
> > > >                          upper_32_bits(data->protect_base);
> > > >         writel_relaxed(regval, data->base + REG_MMU_IVRP_PADDR);
> > > >
> > > > -       if (data->enable_4GB && data->plat_data->m4u_plat != M4U_MT8173) {
> > > > +       if (data->enable_4GB && m4u_plat == M4U_MT2712) {
> > > >                 /*
> > > >                  * If 4GB mode is enabled, the validate PA range is from
> > > >                  * 0x1_0000_0000 to 0x1_ffff_ffff. here record bit[32:30].
> > > > @@ -558,8 +560,11 @@ static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)
> > > >         }
> > > >         writel_relaxed(0, data->base + REG_MMU_DCM_DIS);
> > > >
> > > > -       /* It's MISC control register whose default value is ok except mt8173.*/
> > > > -       if (data->plat_data->m4u_plat == M4U_MT8173)
> > > > +       /*
> > > > +        * It's MISC control register whose default value is ok
> > > > +        * except mt8173 and mt8183.
> > > > +        */
> > > > +       if (m4u_plat == M4U_MT8173 || m4u_plat == M4U_MT8183)
> > >
> > > Again, should this be a field in plat_data?
> >
> > In mt8173 and mt8183, 0x48 is REG_MMU_STANDARD_AXI_MODE while it's
> > MMU_MISC_CTRL which contain this STANDARD_AXI_MODE bit and some other
> > bits in the other SoCs.
> >
> > The register name and meaning are not the same. I guess I can not use a
> > value like reg_0x48 in plat_data. I'd like to keep the current way. is
> > it ok?
> 
> What I mean is to add a "reset_axi" (or something) field in plat_data, and do:
> if (plat_data->reset_axi)
> instead of
>  if (m4u_plat == M4U_MT8173 || m4u_plat == M4U_MT8183)

I really misunderstood this, Thanks the supplementary comment.
It looks I have to add a new minor patch again...

> 
> My main concern is that the test will grow bigger and bigger as we add
> support for more SoCs (similarly to your F_MMU_TF_PROTECT_SEL_SHIFT
> test above, where you are lucky because only one of the SoC requires a
> shift of 5 bits, and the 2 others require 4).

About the F_MMU_TF_PROTECT_SEL_SHIFT, Yes. Only mt8173 shift 5 bits
since its bit4 is F_MMU_PREFETCH_RT_REPLACE_MOD. the others shift 4
bits. I guess I could refine it like this:


/* ----Use this instead of the hard code : 2 --- */
#define F_MMU_TF_PROT_TO_PROGRAM_ADDR 2

if (plat_data->has_prefetch_replace_mod)
	regval = F_MMU_PREFETCH_RT_REPLACE_MOD | (F_MMU_TF_PROT_TO_PROGRAM_ADDR
<< 5)
else
	regval = F_MMU_TF_PROT_TO_PROGRAM_ADDR << 4;

instead of
       regval = F_MMU_TF_PROTECT_SEL(2, data);
       if (m4u_plat == M4U_MT8173)
                 regval |= F_MMU_PREFETCH_RT_REPLACE_MOD;
> 
> Thanks,
> 
> > >
> > > >                 writel_relaxed(0, data->base + REG_MMU_STANDARD_AXI_MODE);
> > > >
> > > >         if (devm_request_irq(data->dev, data->irq, mtk_iommu_isr, 0,
> > > > @@ -713,6 +718,7 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> > > >  {
> > > >         struct mtk_iommu_data *data = dev_get_drvdata(dev);
> > > >         struct mtk_iommu_suspend_reg *reg = &data->reg;
> > > > +       struct mtk_iommu_domain *m4u_dom = data->m4u_dom;
> > > >         void __iomem *base = data->base;
> > > >         int ret;
> > > >
> > > > @@ -728,8 +734,8 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> > > >         writel_relaxed(reg->int_control0, base + REG_MMU_INT_CONTROL0);
> > > >         writel_relaxed(reg->int_main_control, base + REG_MMU_INT_MAIN_CONTROL);
> > > >         writel_relaxed(reg->ivrp_paddr, base + REG_MMU_IVRP_PADDR);
> > > > -       if (data->m4u_dom)
> > > > -               writel(data->m4u_dom->cfg.arm_v7s_cfg.ttbr[0],
> > > > +       if (m4u_dom)
> > > > +               writel(m4u_dom->cfg.arm_v7s_cfg.ttbr[0] & MMU_PT_ADDR_MASK,
> > > >                        base + REG_MMU_PT_BASE_ADDR);
> > > >         return 0;
> > > >  }
> > > > @@ -750,9 +756,16 @@ static int __maybe_unused mtk_iommu_resume(struct device *dev)
> > > >         .has_bclk     = true,
> > > >  };
> > > >
> > > > +static const struct mtk_iommu_plat_data mt8183_data = {
> > > > +       .m4u_plat            = M4U_MT8183,
> > > > +       .larbid_remap_enable = true,
> > > > +       .larbid_remapped     = {0, 4, 5, 6, 7, 2, 3, 1},
> > > > +};
> > > > +
> > > >  static const struct of_device_id mtk_iommu_of_ids[] = {
> > > >         { .compatible = "mediatek,mt2712-m4u", .data = &mt2712_data},
> > > >         { .compatible = "mediatek,mt8173-m4u", .data = &mt8173_data},
> > > > +       { .compatible = "mediatek,mt8183-m4u", .data = &mt8183_data},
> > > >         {}
> > > >  };
> > > >
> > > > diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h
> > > > index 3877050..6385dec 100644
> > > > --- a/drivers/iommu/mtk_iommu.h
> > > > +++ b/drivers/iommu/mtk_iommu.h
> > > > @@ -39,6 +39,7 @@ enum mtk_iommu_plat {
> > > >         M4U_MT2701,
> > > >         M4U_MT2712,
> > > >         M4U_MT8173,
> > > > +       M4U_MT8183,
> > > >  };
> > > >
> > > >  struct mtk_iommu_plat_data {
> > > > diff --git a/drivers/memory/mtk-smi.c b/drivers/memory/mtk-smi.c
> > > > index 3720c77..bced778 100644
> > > > --- a/drivers/memory/mtk-smi.c
> > > > +++ b/drivers/memory/mtk-smi.c
> > > > @@ -285,6 +285,12 @@ static void mtk_smi_larb_config_port_gen1(struct device *dev)
> > > >         .larb_special_mask = BIT(8) | BIT(9),          /* bdpsys */
> > > >  };
> > > >
> > > > +static const struct mtk_smi_larb_gen mtk_smi_larb_mt8183 = {
> > > > +       .has_gals          = true,
> > > > +       .config_port       = mtk_smi_larb_config_port_gen2_general,
> > > > +       .larb_special_mask = BIT(2) | BIT(3) | BIT(7), /* IPU0 | IPU1 | CCU */
> > > > +};
> > > > +
> > > >  static const struct of_device_id mtk_smi_larb_of_ids[] = {
> > > >         {
> > > >                 .compatible = "mediatek,mt8173-smi-larb",
> > > > @@ -298,6 +304,10 @@ static void mtk_smi_larb_config_port_gen1(struct device *dev)
> > > >                 .compatible = "mediatek,mt2712-smi-larb",
> > > >                 .data = &mtk_smi_larb_mt2712
> > > >         },
> > > > +       {
> > > > +               .compatible = "mediatek,mt8183-smi-larb",
> > > > +               .data = &mtk_smi_larb_mt8183
> > > > +       },
> > > >         {}
> > > >  };
> > > >
> > > > @@ -391,6 +401,11 @@ static int mtk_smi_larb_remove(struct platform_device *pdev)
> > > >         .gen = MTK_SMI_GEN2,
> > > >  };
> > > >
> > > > +static const struct mtk_smi_common_plat mtk_smi_common_mt8183 = {
> > > > +       .gen      = MTK_SMI_GEN2,
> > > > +       .has_gals = true,
> > > > +};
> > > > +
> > > >  static const struct of_device_id mtk_smi_common_of_ids[] = {
> > > >         {
> > > >                 .compatible = "mediatek,mt8173-smi-common",
> > > > @@ -404,6 +419,10 @@ static int mtk_smi_larb_remove(struct platform_device *pdev)
> > > >                 .compatible = "mediatek,mt2712-smi-common",
> > > >                 .data = &mtk_smi_common_gen2,
> > > >         },
> > > > +       {
> > > > +               .compatible = "mediatek,mt8183-smi-common",
> > > > +               .data = &mtk_smi_common_mt8183,
> > > > +       },
> > > >         {}
> > > >  };
> > > >
> > > > --
> > > > 1.9.1
> > > >
> >
> >


