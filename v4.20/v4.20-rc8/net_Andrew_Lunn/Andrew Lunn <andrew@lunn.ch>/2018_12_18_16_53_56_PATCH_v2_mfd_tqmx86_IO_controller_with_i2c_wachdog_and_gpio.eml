Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:40:57 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 25CB55805CF;
	Tue, 18 Dec 2018 08:54:32 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 08:54:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AboaDdhAF66hsBjKmyL0oUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP74oM+wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/KhMJ+j6VVoAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAvYHPelFtYnyuVUPpga4CwmxAuPvzCJDi3js0q08zushCx/J3QI7EtIKrX?=
 =?us-ascii?q?TUqtP1OL0OXuC11aTFyyjIYfBO2Trl9oTEbhQsreuRUb9+b8bd01QjGgDZglmK?=
 =?us-ascii?q?qIHoPSuZ2vkOvmWb9eZsSOOih3Q6pwxzvDSj3Nogh4rLi48T11vK7z92wJwvKt?=
 =?us-ascii?q?29UEN7YcCrEJ9XtyyCKYt2Td0tQ3tytCY51LIGo5i7czYOyJg9wB7fcfOHf5CJ?=
 =?us-ascii?q?4hLlSumRPS91iGx5dL+7nRq+7EatxvPmWsWp01tGsjBJn9jOu3wV0hzc8MmHSv?=
 =?us-ascii?q?9z/ke73jaP0hje6uVFIUAyiKraJIctwr0umZoJt0TMACv2lFzxjK6YcEUr5PKo?=
 =?us-ascii?q?5v/5YrXpuJCcLZV4igLgPaQ0nMywH+A4PhIJX2iB9uSwzKfj8lHhQLVWkv02lb?=
 =?us-ascii?q?HUsJTbJcQYuKG1GQBU0ps45ha7Djem1skYnHYdIFJEfhKHk5bmO1XULP/kCve/?=
 =?us-ascii?q?hkymkC13yPDeIr3hHpLNI2DDkLj7fLZ991RTyA0pwdBf+pJbELcBIP3oV0/1td?=
 =?us-ascii?q?zYCAI5MgOuz+bmDtV9yp0RWWaVDqCFN6PStEeC5vgzLOmUeI8VpDH9JuAn5/7p?=
 =?us-ascii?q?k3A1g1wdfa6v3ZsRb3C1BfBmI0SfYXrxjdYNC2YKvgwiTOP0jF2OSyJcZ3G3X6?=
 =?us-ascii?q?gk/DE0FJqmDZvfRoCqmLGOxjy7Hp1RZmBFEFyMC23nd4efVvcIaSKSJNJhkzMe?=
 =?us-ascii?q?WbigTY8hyQ+htAvgx7V7KerU/zUStYj/29ht++3TiRYy+CR3D8uH1WGBVWV0nm?=
 =?us-ascii?q?ISSD8w06Byukh9ylaF0ahljP1UD91T5/VVUggkMZ7Q1fB1C9f3WgjZZNeGVE6m?=
 =?us-ascii?q?Qsm6ATE2Vt8+3sUBY1hjFNm4jhDMxSyqA6QLmLyNA5A09qHc3331J8tmz3bG1a?=
 =?us-ascii?q?8hj0QpQ8dVNG2mgLJ/+BbXB4LTj0qZkKOqf7wG3CHR7GeD0XaOvEZAXQFtS6rF?=
 =?us-ascii?q?Q24QalHWrdvj4EPCVKGhCbI8PwtFyM6CLLZKa9LzgVVHQvfjJMrRY2arl2isAh?=
 =?us-ascii?q?aIw6uGbJD2dGUFwCXdFE8EnhgP/XaHMAg+ATuho2LeDTB0CVLjeUTs8fN6qHO6?=
 =?us-ascii?q?SE80wBqHb0lg17qz5x4UiuaQS/IV3rIYpighry94E0q639LTE9CAvRZufL1AYd?=
 =?us-ascii?q?Mh51dKzXjWtwhjMZ2vMa9jhkQSfB9qv0zzzRp3DIZAkc80rH4xyApyKKSY0E5O?=
 =?us-ascii?q?dj+C3JDwPKHXJXf2/By1d6HW3VTe2s6M+qgT8PQ4t0njvAaxG0si7nVrycVa32?=
 =?us-ascii?q?Gd55XKFgUSV53xX10z9xh7obHafyY865nV1X1qLam7rDvC18g1C+sizxaqZ81f?=
 =?us-ascii?q?P7+cFA/uD80aANCjKPYrm1e1dB0EJv1d9KkuM8OgafSGwq+rMP98kz28iWRI/Z?=
 =?us-ascii?q?5y0liL9yp6UePI25cFw/eF3gqITTv8jVGhstzploBAfz0dAm2/yS38Do5LeqJy?=
 =?us-ascii?q?ZZoLCXupI8CvxtR+hoThWn5C+F64GlMG3tSkeR6Tb1z7wA1R2l4boX2hmSuk0T?=
 =?us-ascii?q?N0lyslobaY3CzL2+7ibgYIOnZXRGl+ilfhOYq0gMoAXEirbAgpkwGp5V3gyKhY?=
 =?us-ascii?q?p6R/Lm/TTllOfyXtK2FiU62wtqeNYsJV6ZMotzlXX/q4YVyAVrH9pB4a2Tv5H2?=
 =?us-ascii?q?RC3DA7ay2qupLhkh16km2dK2x/rHjYecF23hrf4N3cRfhM3jsJXiV4iD/XBkSi?=
 =?us-ascii?q?MNmt59mbi5DDsuWmXWK7SpJTaTXrzZ+HtCaj5m1lGxy/k+qzmt36Cwc61yD72s?=
 =?us-ascii?q?JuVSXJqhb8f4bq2767MeJhYklnGlv859BmFYF5l4s6nIsQ1mQChpWJ4XoHln/+?=
 =?us-ascii?q?MdBa2aL9dnUBXzAKzMDO4Aj5xkJjNGmGyJzjVnWS2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc10iWdBbUSEVNZPCP2kRSI?=
 =?us-ascii?q?8su+rL5WZGu0dbiw1Ux+nc2uDb2YowFcXmr5dYkmHSNq8sp/N1fM2mXp6o74YN?=
 =?us-ascii?q?nQcc4TthqMnhjbledVL5YxlucQiSpjJGLwpnkly+89jRxz0pC2pomHK2Nx/K2n?=
 =?us-ascii?q?Bh5ULCH6Z8QW+jv1l6ZRgt6W35yzHpVmAjgLXoHnTfe2HzIJr/jnKxyCED4hqn?=
 =?us-ascii?q?eYBLrfGxWQ6Fx9onLLEpCrMWyXJXYDwdVjQhmdOFJQgAQOUDommZ45ExigxNb9?=
 =?us-ascii?q?f0dh+jAR+ln4pwNMy+JvKhn/S3rfqx2uajsuU5ifKxxW7g5Z6kfRMMye6P9zHi?=
 =?us-ascii?q?5C8p2gqgyNNnKUZwBSAW4VXUyEAkjpPqOy6tnY7+iYGu2+IuPOYbqQqOxeVPSI?=
 =?us-ascii?q?xZO13otl5TaMMcqPMWd4D/0mwUpORnR5G8XfmzUSRC0bjSPNb8iHpBii/i17tN?=
 =?us-ascii?q?yw8PPuWAj3/4uAF6NSMclz+xCxmaqMLfOQiz1jKTlG1pIA33vIyLkE0V4WiiFu?=
 =?us-ascii?q?cSStELsauS7MSqLQhrFYDxoBZyxvM8tI6ro23hNRNs7DltP1yrl4g+YpC1dEUF?=
 =?us-ascii?q?ztgN2madYWLGG9KlzHAl2GNLCHJT3N3sH2brmwSbxWjOVIqRKwvSyXHFPkPjSG?=
 =?us-ascii?q?jzPpTQygMflQjCGHOxxToIG8fQxrCWjmTdLmbAW0Md53jTIsx700iWjHNWodMT?=
 =?us-ascii?q?h6bkNMoaec7SJegvVjBWNB6mBpIvWDmyacvKHkLcMSvPYtACNymvly5HU8wqFS?=
 =?us-ascii?q?qiZeS69bgizX+/dor0urjaGr1zxhGE5HrDpRiZ2juVhkP+PS9s8TCj7/4BsR4D?=
 =?us-ascii?q?DIWFwxrNx/B4i3tg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAAC7JRlch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5gQgiGXRhSBYioTAYcdIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2IoJ?=
 =?us-ascii?q?sAiQZAQE3AQUJAj4SAzk0BYMdggEEAaZxgWwzgnYBAQWCQ4RmCId+hEEXgX+BE?=
 =?us-ascii?q?YdYhhqJNoYekVIJgRaBE483AhZgkHebOYIOMxoIMIMnghsMF4Miinw+M4EFAQG?=
 =?us-ascii?q?NYAEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAAC7JRlch0O0hNFkHgEGBwaBUQkLAYNrJ5gQgiGXRhS?=
 =?us-ascii?q?BYioTAYcdIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2IoJsAiQZAQE3AQUJA?=
 =?us-ascii?q?j4SAzk0BYMdggEEAaZxgWwzgnYBAQWCQ4RmCId+hEEXgX+BEYdYhhqJNoYekVI?=
 =?us-ascii?q?JgRaBE483AhZgkHebOYIOMxoIMIMnghsMF4Miinw+M4EFAQGNYAEB?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="57379311"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 08:54:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726917AbeLRQy0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 11:54:26 -0500
Received: from vps0.lunn.ch ([185.16.172.187]:51967 "EHLO vps0.lunn.ch"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726422AbeLRQyZ (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 11:54:25 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=lunn.ch; s=20171124;
        h=Message-Id:Date:Subject:Cc:To:From; bh=EY+s1c64fjbQsV87kkCuYTWiDpYkk6IxHN9/JJR3Sh8=;
        b=es3S48cqlxWhMzhj4SNC8Z4Qjpg0dq584o0tuIg1Qlrk1CN3nmeRi8/KJeUgoBH18YNWLdAlBMgjGCqxolhbPLhu1UWCElXM2EY0/mf7wN45ZsCdIsLkqem0zdYfOnQIq47/Vq9KQBzTuxDBa0cURWMqBgPBPzv67nHVgNXL818=;
Received: from andrew by vps0.lunn.ch with local (Exim 4.84_2)
        (envelope-from <andrew@lunn.ch>)
        id 1gZId8-00063Q-EP; Tue, 18 Dec 2018 17:54:02 +0100
From: Andrew Lunn <andrew@lunn.ch>
To: lee.jones@linaro.org
Cc: linux-kernel@vger.kernel.org, Andrew Lunn <andrew@lunn.ch>
Subject: [PATCH v2] mfd: tqmx86: IO controller with i2c, wachdog and gpio
Date: Tue, 18 Dec 2018 17:53:56 +0100
Message-Id: <1545152036-23239-1-git-send-email-andrew@lunn.ch>
X-Mailer: git-send-email 2.1.4
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The QMX86 is a PLD present on some TQ-Systems ComExpress modules. It
provides 1 or 2 I2C bus masters, 8 GPIOs and a watchdog timer. Add an
MFD which will instantiate the individual drivers.

Signed-off-by: Andrew Lunn <andrew@lunn.ch>
---
v2:

Drop setting i2c bus speed, which removes the build dependencies on
the i2c ocores patches. This can be added back later.
---
 drivers/mfd/Kconfig  |   8 +
 drivers/mfd/Makefile |   1 +
 drivers/mfd/tqmx86.c | 404 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 413 insertions(+)
 create mode 100644 drivers/mfd/tqmx86.c

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index 8c5dfdce4326..8c86a2a215e8 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -1676,6 +1676,14 @@ config MFD_TC6393XB
 	help
 	  Support for Toshiba Mobile IO Controller TC6393XB
 
+config MFD_TQMX86
+       tristate "TQ-Systems IO controller TQMX86"
+       select MFD_CORE
+       help
+	  Say yes here to enable support for various functions of the
+	  TQ-Systems IO controller and watchdog device, found on their
+	  ComExpress CPU modules
+
 config MFD_VX855
 	tristate "VIA VX855/VX875 integrated south bridge"
 	depends on PCI
diff --git a/drivers/mfd/Makefile b/drivers/mfd/Makefile
index 12980a4ad460..7f4790662988 100644
--- a/drivers/mfd/Makefile
+++ b/drivers/mfd/Makefile
@@ -36,6 +36,7 @@ obj-$(CONFIG_MFD_TC3589X)	+= tc3589x.o
 obj-$(CONFIG_MFD_T7L66XB)	+= t7l66xb.o tmio_core.o
 obj-$(CONFIG_MFD_TC6387XB)	+= tc6387xb.o tmio_core.o
 obj-$(CONFIG_MFD_TC6393XB)	+= tc6393xb.o tmio_core.o
+obj-$(CONFIG_MFD_TQMX86)	+= tqmx86.o
 
 obj-$(CONFIG_MFD_ARIZONA)	+= arizona-core.o
 obj-$(CONFIG_MFD_ARIZONA)	+= arizona-irq.o
diff --git a/drivers/mfd/tqmx86.c b/drivers/mfd/tqmx86.c
new file mode 100644
index 000000000000..4eca166db000
--- /dev/null
+++ b/drivers/mfd/tqmx86.c
@@ -0,0 +1,404 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * TQ-Systems PLD MFD core driver
+ *
+ * Copyright (c) 2015 TQ-Systems GmbH
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/mfd/core.h>
+#include <linux/module.h>
+#include <linux/dmi.h>
+#include <linux/io.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/platform_data/i2c-ocores.h>
+
+#define TQMX86_IOBASE	0x160
+#define TQMX86_IOSIZE	0x3f
+#define TQMX86_CLK	33000	/* default */
+
+/* Registers offsets */
+#define TQMX86_BID	0x20	/* Board ID */
+#define TQMX86_BREV	0x21	/* Board and PLD Revisions */
+#define TQMX86_IOEIC	0x26	/* I/O Extension Interrupt Configuration */
+#define TQMX86_I2C_DET	0x47	/* I2C controller detection register */
+#define TQMX86_I2C_IEN	0x49	/* machxo2 I2C nterrupt enable register */
+
+struct tqmx86_info {
+	u32	board_id;
+	u32	board_rev;
+	u32	pld_rev;
+	u32	i2c_type;
+};
+
+#define I2C_KIND_SOFT	1	/* Ocores soft controller */
+#define I2C_KIND_HARD	2	/* Machxo2 hard controller */
+
+/**
+ * struct tqmx86_device_data - Internal representation of the PLD device
+ * @io_base:		Pointer to the IO memory
+ * @pld_clock:		PLD clock frequency
+ * @dev:		Pointer to kernel device structure
+ */
+struct tqmx86_device_data {
+	void __iomem		*io_base;
+	u32			pld_clock;
+	struct device		*dev;
+	struct tqmx86_info	info;
+};
+
+/**
+ * struct tqmx86_platform_data - PLD hardware configuration structure
+ * @pld_clock:			PLD clock frequency
+ * @ioresource:			IO addresses of the PLD
+ */
+struct tqmx86_platform_data {
+	u32				pld_clock;
+	struct resource			*ioresource;
+};
+
+static uint gpio_irq;
+module_param(gpio_irq, uint, 0);
+MODULE_PARM_DESC(gpio_irq, "GPIO IRQ number (7, 9, 12)");
+
+static u8 i2c_irq_ctl[16] = {
+	[7] = 1,
+	[9] = 2,
+	[12] = 3
+};
+
+static u8 tqmx86_readb(struct tqmx86_device_data *pld, u32 off)
+{
+	return ioread8(pld->io_base + off);
+}
+
+static void tqmx86_writeb(struct tqmx86_device_data *pld, u8 val, u32 off)
+{
+	iowrite8(val, pld->io_base + off);
+}
+
+enum tqmx86_cells {
+	TQMX86_I2C_SOFT = 0,
+	TQMX86_WDT,
+	TQMX86_GPIO,
+	TQMX86_UART,
+};
+
+static struct resource tqmx_i2c_soft_resources[] = {
+	DEFINE_RES_IO(0x1a0, 10),
+};
+
+static struct resource tqmx_watchdog_resources[] = {
+	DEFINE_RES_IO(0x18b, 2),
+};
+
+static struct resource tqmx_gpio_resources[] = {
+	DEFINE_RES_IO(0x18d, 4),
+	DEFINE_RES_IRQ(0)
+};
+
+static struct i2c_board_info tqmx86_i2c_devices[] = {
+	/* 4K EEPROM at 0x50 */
+	{
+		.type = "24c32",
+		.addr = 0x50,
+	},
+};
+
+static struct ocores_i2c_platform_data ocores_platfom_data = {
+	.clock_khz = TQMX86_CLK,
+	.num_devices = ARRAY_SIZE(tqmx86_i2c_devices),
+	.devices = tqmx86_i2c_devices,
+};
+
+static const struct mfd_cell tqmx86_devs[] = {
+	[TQMX86_I2C_SOFT] = {
+		.name = "ocores-i2c",
+		.platform_data = &ocores_platfom_data,
+		.pdata_size = sizeof(ocores_platfom_data),
+		.resources = tqmx_i2c_soft_resources,
+		.num_resources = ARRAY_SIZE(tqmx_i2c_soft_resources),
+	},
+	[TQMX86_WDT] = {
+		.name = "tqmx86-wdt",
+		.resources = tqmx_watchdog_resources,
+		.num_resources = 1,
+		.ignore_resource_conflicts = 1,
+	},
+	[TQMX86_GPIO] = {
+		.name = "tqmx86-gpio",
+		.resources = tqmx_gpio_resources,
+		.num_resources = ARRAY_SIZE(tqmx_gpio_resources),
+		.ignore_resource_conflicts = 1,
+	},
+};
+
+#define TQMX86_MAX_DEVS	ARRAY_SIZE(tqmx86_devs)
+
+static int tqmx86_register_cells(struct tqmx86_device_data *pld)
+{
+	struct mfd_cell devs[TQMX86_MAX_DEVS];
+	int i = 0;
+	u8 ioeic_val = 0;
+
+	ioeic_val |= (i2c_irq_ctl[gpio_irq] & 0x3) << 4;
+
+	dev_dbg(pld->dev, "ioeic %x\n", ioeic_val);
+
+	if (ioeic_val) {
+		tqmx86_writeb(pld, ioeic_val, TQMX86_IOEIC);
+		if (tqmx86_readb(pld, TQMX86_IOEIC) != ioeic_val) {
+			dev_warn(pld->dev,
+				 "i2c/gpio interrupts not supported.\n");
+			gpio_irq = 0;
+		}
+	}
+
+	if (pld->info.i2c_type == I2C_KIND_SOFT) {
+		ocores_platfom_data.clock_khz = pld->pld_clock;
+		devs[i++] = tqmx86_devs[TQMX86_I2C_SOFT];
+	}
+
+	tqmx_gpio_resources[1].start = gpio_irq;
+
+	devs[i++] = tqmx86_devs[TQMX86_WDT];
+	devs[i++] = tqmx86_devs[TQMX86_GPIO];
+
+	return mfd_add_devices(pld->dev, -1, devs, i, NULL, 0, NULL);
+}
+
+static struct resource tqmx86_ioresource = {
+	.start	= TQMX86_IOBASE,
+	.end	= TQMX86_IOBASE + TQMX86_IOSIZE,
+	.flags	= IORESOURCE_IO,
+};
+
+static const struct tqmx86_platform_data tqmx86_platform_data_generic = {
+	.pld_clock		= TQMX86_CLK,
+	.ioresource		= &tqmx86_ioresource,
+};
+
+static struct platform_device *tqmx86_pdev;
+
+static int tqmx86_create_platform_device(const struct dmi_system_id *id)
+{
+	struct tqmx86_platform_data *pdata = id->driver_data;
+	int ret;
+
+	tqmx86_pdev = platform_device_alloc("tqmx86", -1);
+	if (!tqmx86_pdev)
+		return -ENOMEM;
+
+	ret = platform_device_add_data(tqmx86_pdev, pdata, sizeof(*pdata));
+	if (ret)
+		goto err;
+
+	ret = platform_device_add_resources(tqmx86_pdev, pdata->ioresource, 1);
+	if (ret)
+		goto err;
+
+	ret = platform_device_add(tqmx86_pdev);
+	if (ret)
+		goto err;
+
+	return 0;
+err:
+	platform_device_put(tqmx86_pdev);
+	return ret;
+}
+
+static struct tq_board_info {
+	char *name;
+	u32 pld_clock;
+} tq_board_info[] = {
+	{"", 0},
+	{"TQMxE38M", 33000},
+	{"TQMx50UC", 24000},
+	{"TQMxE38C", 33000},
+	{"TQMx60EB", 24000},
+	{"TQMxE39M", 25000},
+	{"TQMxE39C", 25000},
+	{"TQMxE39x", 25000},
+	{"TQMx70EB", 24000},
+	{"TQMx80UC", 24000},
+	{"TQMx90UC", 24000}
+};
+
+static ssize_t board_id_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)
+{
+	struct tqmx86_device_data *pld = dev_get_drvdata(dev);
+
+	return scnprintf(buf, PAGE_SIZE, "%s\n",
+			 tq_board_info[pld->info.board_id].name);
+}
+
+static ssize_t board_rev_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	struct tqmx86_device_data *pld = dev_get_drvdata(dev);
+
+	return scnprintf(buf, PAGE_SIZE, "%d\n", pld->info.board_rev);
+}
+
+static ssize_t pld_rev_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct tqmx86_device_data *pld = dev_get_drvdata(dev);
+
+	return scnprintf(buf, PAGE_SIZE, "PLD Revision: %d",
+			 pld->info.pld_rev);
+}
+
+static DEVICE_ATTR_RO(board_id);
+static DEVICE_ATTR_RO(board_rev);
+static DEVICE_ATTR_RO(pld_rev);
+
+static struct attribute *pld_attributes[] = {
+	&dev_attr_board_id.attr,
+	&dev_attr_board_rev.attr,
+	&dev_attr_pld_rev.attr,
+	NULL
+};
+
+static const struct attribute_group pld_attr_group = {
+	.attrs = pld_attributes,
+};
+
+static int tqmx86_detect_device(struct tqmx86_device_data *pld)
+{
+	u8 board_id, rev, i2c_det, i2c_ien;
+	int ret;
+
+
+	board_id = tqmx86_readb(pld, TQMX86_BID);
+	if (board_id == 0 || board_id > ARRAY_SIZE(tq_board_info) - 1)
+		return -ENODEV;
+
+	pld->pld_clock = tq_board_info[board_id].pld_clock;
+
+	rev = tqmx86_readb(pld, TQMX86_BREV);
+	pld->info.board_id = board_id;
+	pld->info.board_rev = rev >> 4;
+	pld->info.pld_rev = rev & 0xf;
+
+	i2c_det = tqmx86_readb(pld, TQMX86_I2C_DET);
+	i2c_ien = tqmx86_readb(pld, TQMX86_I2C_IEN);
+
+	if (i2c_det == 0xa5 && (i2c_ien & 0xf0) == 0xf0)
+		pld->info.i2c_type = I2C_KIND_SOFT;
+	else
+		pld->info.i2c_type = I2C_KIND_HARD;
+
+	dev_info(pld->dev,
+		 "Found TQx86 PLD - Board ID %d, PCB Revision %d, PLD Revision %d\n",
+		 board_id, rev >> 4, rev & 0xf);
+
+	ret = sysfs_create_group(&pld->dev->kobj, &pld_attr_group);
+	if (ret)
+		return ret;
+
+	ret = tqmx86_register_cells(pld);
+	if (ret)
+		sysfs_remove_group(&pld->dev->kobj, &pld_attr_group);
+
+	return ret;
+}
+
+static int tqmx86_probe(struct platform_device *pdev)
+{
+	struct tqmx86_platform_data *pdata = dev_get_platdata(&pdev->dev);
+	struct device *dev = &pdev->dev;
+	struct tqmx86_device_data *pld;
+	struct resource *ioport;
+
+	pld = devm_kzalloc(dev, sizeof(*pld), GFP_KERNEL);
+	if (!pld)
+		return -ENOMEM;
+
+	ioport = platform_get_resource(pdev, IORESOURCE_IO, 0);
+	if (!ioport)
+		return -EINVAL;
+
+	pld->io_base = devm_ioport_map(dev, ioport->start,
+				       resource_size(ioport));
+	if (!pld->io_base)
+		return -ENOMEM;
+
+	pld->pld_clock = pdata->pld_clock;
+	pld->dev = dev;
+
+	platform_set_drvdata(pdev, pld);
+
+	return tqmx86_detect_device(pld);
+}
+
+static int tqmx86_remove(struct platform_device *pdev)
+{
+	struct tqmx86_device_data *pld = dev_get_drvdata(&pdev->dev);
+
+	sysfs_remove_group(&pld->dev->kobj, &pld_attr_group);
+	mfd_remove_devices(&pdev->dev);
+
+	return 0;
+}
+
+static struct platform_driver tqmx86_driver = {
+	.driver		= {
+		.name	= "tqmx86",
+	},
+	.probe		= tqmx86_probe,
+	.remove		= tqmx86_remove,
+};
+
+static struct dmi_system_id tqmx86_dmi_table[] __initdata = {
+	{
+		.ident = "TQMX86",
+		.matches = {
+			DMI_MATCH(DMI_SYS_VENDOR, "TQ-Group"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "TQMx"),
+		},
+		.driver_data = (void *)&tqmx86_platform_data_generic,
+		.callback = tqmx86_create_platform_device,
+	},
+	{}
+};
+MODULE_DEVICE_TABLE(dmi, tqmx86_dmi_table);
+
+static int __init tqmx86_init(void)
+{
+	if (gpio_irq > 15) {
+		pr_warn("tqmx86: Invalid GPIO IRQ (%d)\n", gpio_irq);
+		gpio_irq = 0;
+	} else if (i2c_irq_ctl[gpio_irq] == 0) {
+		pr_warn("tqmx86: GPIO IRQ %d not supported\n", gpio_irq);
+		gpio_irq = 0;
+	}
+
+	if (!dmi_check_system(tqmx86_dmi_table))
+		return -ENODEV;
+
+	return platform_driver_register(&tqmx86_driver);
+}
+
+static void __exit tqmx86_exit(void)
+{
+	if (tqmx86_pdev)
+		platform_device_unregister(tqmx86_pdev);
+
+	platform_driver_unregister(&tqmx86_driver);
+}
+
+module_init(tqmx86_init);
+module_exit(tqmx86_exit);
+
+MODULE_DESCRIPTION("TQx86 PLD Core Driver");
+MODULE_AUTHOR("Vadim V.Vlasov <vvlasov@dev.rtsoft.ru>");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:tqmx86");
-- 
2.19.1

