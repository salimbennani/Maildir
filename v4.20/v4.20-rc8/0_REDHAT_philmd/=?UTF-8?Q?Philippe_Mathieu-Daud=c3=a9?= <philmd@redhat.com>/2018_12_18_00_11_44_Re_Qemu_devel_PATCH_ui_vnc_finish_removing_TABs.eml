Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:51:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EC18C5805FC
	for <like.xu@linux.intel.com>; Mon, 17 Dec 2018 16:12:22 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 16:12:22 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A7d7NdRA358L3urtdcTCwUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37psuwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95PWSxPAo2y?=
 =?us-ascii?q?bIUBAOQOMulas4bzqEYArQO8CAeuC+7j1zFFimPo0q0hyOkhDQLL0RY8E94Svn?=
 =?us-ascii?q?nZrtP4P7oSX+Cvy6nIyC3OYelW2Tf87IjIcwghoemSUr1odsTe01UvFwPEjlqO?=
 =?us-ascii?q?tIzpJj2b2f4Qs2eG9e1rSOWii3YnqwFwpjivw9ojh5LTho0L11/E9T92wJovKd?=
 =?us-ascii?q?KkT057ZMepHZ1NvC+ZL4t7Wt0uT31rtSog17EKpJ22cDIUxJkpxxPTceGLfoqQ?=
 =?us-ascii?q?7h/gV+udOyl0iG9/dL6hmxq+71KsxvD+W8Wq1ltBszBLncPWtn8X0hze8siHRe?=
 =?us-ascii?q?V5/kemwTuP0wHT6vpYIUAvj6bbJJghwqMqmpoUq0TDETf6mETwjKCIakUp4vak?=
 =?us-ascii?q?5/jkb7n8u5OQKox5hhvgPqkgmsGzG/k0PwoWU2ie4+u81bnj/UPjQLVNi/07ir?=
 =?us-ascii?q?DZv47fJcQGv6K2HhFa0pg95Ba7Fjupy9MYnWQBLF1ZZh2HlI/lO1XPIPD7E/iz?=
 =?us-ascii?q?mVutkCpzyvDCP73hBIjNL3fZnLfge7Z991BTyA4pwd9D4JJUD6oMIPT0Wk/3u9?=
 =?us-ascii?q?zYCAI5Pxazw+b9B9VxzpkeVn6XAq+FLKPStkeF5uYuI+mPeoAZojn8K+U+6v7q?=
 =?us-ascii?q?jH85n0IdfKaz0ZsWbnC4AuppI0GDbXXwhdcBFDRCgwwlUea/iEGeSSUBIDG2Xr?=
 =?us-ascii?q?kg/Xc9D4SpC5qFQZqix7mI3SO+F5sRYXhaC1eKCjDxeoCZHvsBdi+WcfJniSEO?=
 =?us-ascii?q?AL2oSos90kO3uQrnjrZqMOfQvzcVrI/uz8Rd4erVmhcvsztuAJOGzmuPQmpoy3?=
 =?us-ascii?q?4OXCI8x6tloEZwmWuEhJBxhPhfXfZU4eFIVAZyYYbWyOpoCtbzchjMcteAVBCt?=
 =?us-ascii?q?RdDwRXkoQ9cshtMDfUt5M9OliB/FwmytGbBGuaaMAckM8qPY3mDpKvFYwmrG1a?=
 =?us-ascii?q?Q8ynUvX8fOfTm+hq978gT7HYPFk0yF0a2tcPJPj2b26G6fwD/W7wljWwlqXPCA?=
 =?us-ascii?q?BChHaw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DuAgA8OhhchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExgTyBExODfIh4jHoIJZlPAwwBARgUgUuGCyI4EgEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOL4I2BQIDGgEGglwBAgMBAhcJBAsBEwopAwMBAgYBAQoOCgICIgQCA?=
 =?us-ascii?q?gMBMAEFARwGAQwGAgEBAYMdgXQNAQMBnDA8iWuBLnwziSCBDRJ5izMXgX+BESc?=
 =?us-ascii?q?Mgl+ICYJXAolChguGO4sRCZFUBhiJcxGHTok8kAECBAIEBQIFDyGBPIF3MyIbF?=
 =?us-ascii?q?YMngicXjh5xgQeLeIF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0DuAgA8OhhchxHrdtBkHAEBAQQBAQcEAQGBZYExgTyBExO?=
 =?us-ascii?q?DfIh4jHoIJZlPAwwBARgUgUuGCyI4EgEDAQEBAQEBAgETAQEBCgsJCBsOL4I2B?=
 =?us-ascii?q?QIDGgEGglwBAgMBAhcJBAsBEwopAwMBAgYBAQoOCgICIgQCAgMBMAEFARwGAQw?=
 =?us-ascii?q?GAgEBAYMdgXQNAQMBnDA8iWuBLnwziSCBDRJ5izMXgX+BEScMgl+ICYJXAolCh?=
 =?us-ascii?q?guGO4sRCZFUBhiJcxGHTok8kAECBAIEBQIFDyGBPIF3MyIbFYMngicXjh5xgQe?=
 =?us-ascii?q?LeIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="56284880"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 17 Dec 2018 16:12:21 -0800
Received: from localhost ([::1]:50721 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZ2zl-0008Uu-0N
	for like.xu@linux.intel.com; Mon, 17 Dec 2018 19:12:21 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55633)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gZ2zI-0008SZ-PQ
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 19:11:55 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <philmd@redhat.com>) id 1gZ2zE-0004ur-Oa
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 19:11:52 -0500
Received: from mail-wm1-f65.google.com ([209.85.128.65]:38376)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <philmd@redhat.com>) id 1gZ2zD-0004u3-7f
	for qemu-devel@nongnu.org; Mon, 17 Dec 2018 19:11:48 -0500
Received: by mail-wm1-f65.google.com with SMTP id m22so965104wml.3
	for <qemu-devel@nongnu.org>; Mon, 17 Dec 2018 16:11:46 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:cc:references:from:openpgp:message-id
	:date:user-agent:mime-version:in-reply-to:content-language
	:content-transfer-encoding;
	bh=f/tqKSMhMqaInxtyOzegN7VbKQ51ilHx+1mAKV7UNHw=;
	b=pq6iqPxCy+dxuVmmDMTSVTPxKiJKzria427bVYEl9kG4KXMYWbq/kyrTTXx8woiQ0E
	FobCuqbWHh9CR7ufTsw6A0PKytHBRLyXv3MUsYRf3U0+IHpQvGtVz4/cMmfOXDckXqeZ
	DyfyBZMR5d4dBaHXMwooAxzPLbpjWovvF8wWuEfzso5YpeH2a9s2s4IsPyvBNTIZ+aYP
	yCqabcBeIO8iNx7Cqa/KAis0aUlyX8SUdbYGnsnpjpZNeyPzj3deympYnRysi1ARhckm
	/Mlwv8ElxU5LRuNxflNqN5e1+TT2jSatt7ghWQg8aDNCFDlCby2tCr7x6q/oATWRyFqj
	/r9g==
X-Gm-Message-State: AA+aEWaap3vjKk1p9Fey7EMHuQMD7AH/IOZ9dyqcHW8+Ii62clWLSNmq
	aKyNT1BWumIxs4nNeNhkOIvxgA==
X-Google-Smtp-Source: AFSGD/VDcajq/YRUO/UPhFvrdHtWYj0wOgm1rPaxa0oTkNMb7jtJTE+yNgK2kedhfxAOiXfTYY2EaQ==
X-Received: by 2002:a1c:448a:: with SMTP id r132mr932159wma.47.1545091905664; 
	Mon, 17 Dec 2018 16:11:45 -0800 (PST)
Received: from [192.168.1.34] (172.red-88-21-202.staticip.rima-tde.net.
	[88.21.202.172]) by smtp.gmail.com with ESMTPSA id
	h131sm690541wmd.17.2018.12.17.16.11.44
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 17 Dec 2018 16:11:45 -0800 (PST)
To: Paolo Bonzini <pbonzini@redhat.com>, qemu-devel@nongnu.org
References: <20181217231629.24147-1-pbonzini@redhat.com>
From: =?UTF-8?Q?Philippe_Mathieu-Daud=c3=a9?= <philmd@redhat.com>
Openpgp: id=89C1E78F601EE86C867495CBA2A3FD6EDEADC0DE;
	url=http://pgp.mit.edu/pks/lookup?op=get&search=0xA2A3FD6EDEADC0DE
Message-ID: <7e322980-33ee-e4a8-8783-bc42142893a5@redhat.com>
Date: Tue, 18 Dec 2018 01:11:44 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181217231629.24147-1-pbonzini@redhat.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 8bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.85.128.65
Subject: Re: [Qemu-devel] [PATCH] ui: vnc: finish removing TABs
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kraxel@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Hi Paolo,

On 12/18/18 12:16 AM, Paolo Bonzini wrote:
> Suggested-by: Daniel P. Berrange <berrange@redhat.com>
> Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
> ---
>  ui/vnc-enc-hextile-template.h | 268 +++++++++++------------
>  ui/vnc-enc-zywrle.h           | 394 +++++++++++++++++-----------------
>  2 files changed, 331 insertions(+), 331 deletions(-)
> 
> diff --git a/ui/vnc-enc-hextile-template.h b/ui/vnc-enc-hextile-template.h
> index d868d75720..0c56262aff 100644
> --- a/ui/vnc-enc-hextile-template.h
> +++ b/ui/vnc-enc-hextile-template.h
> @@ -30,127 +30,127 @@ static void CONCAT(send_hextile_tile_, NAME)(VncState *vs,
>      int n_subtiles = 0;
>  
>      for (j = 0; j < h; j++) {
> -	for (i = 0; i < w; i++) {
> -	    switch (n_colors) {
> -	    case 0:
> -		bg = irow[i];
> -		n_colors = 1;
> -		break;
> -	    case 1:
> -		if (irow[i] != bg) {
> -		    fg = irow[i];
> -		    n_colors = 2;
> -		}
> -		break;
> -	    case 2:
> -		if (irow[i] != bg && irow[i] != fg) {
> -		    n_colors = 3;
> -		} else {
> -		    if (irow[i] == bg)

If we want to respect the QEMU CODYING_STYLE, we should respect:
"Every indented statement is braced; even if the block contains
just one statement."

Anyway this is another improvement, this patch already does a lot.

{

> -			bg_count++;

}

> -		    else if (irow[i] == fg)

{

> -			fg_count++;

}

> -		}
> -		break;
> -	    default:
> -		break;
> -	    }
> -	}
> -	if (n_colors > 2)
> -	    break;
> -	irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);
> +        for (i = 0; i < w; i++) {
> +            switch (n_colors) {
> +            case 0:
> +                bg = irow[i];
> +                n_colors = 1;
> +                break;
> +            case 1:
> +                if (irow[i] != bg) {
> +                    fg = irow[i];
> +                    n_colors = 2;
> +                }
> +                break;
> +            case 2:
> +                if (irow[i] != bg && irow[i] != fg) {
> +                    n_colors = 3;
> +                } else {
> +                    if (irow[i] == bg)

Ditto.

> +                        bg_count++;
> +                    else if (irow[i] == fg)
> +                        fg_count++;
> +                }
> +                break;
> +            default:
> +                break;
> +            }
> +        }
> +        if (n_colors > 2)

{

> +            break;

}

> +        irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);
>      }
>  
>      if (n_colors > 1 && fg_count > bg_count) {
> -	pixel_t tmp = fg;
> -	fg = bg;
> -	bg = tmp;
> +        pixel_t tmp = fg;
> +        fg = bg;
> +        bg = tmp;
>      }
>  
>      if (!*has_bg || *last_bg != bg) {
> -	flags |= 0x02;
> -	*has_bg = 1;
> -	*last_bg = bg;
> +        flags |= 0x02;
> +        *has_bg = 1;
> +        *last_bg = bg;
>      }
>  
>      if (n_colors < 3 && (!*has_fg || *last_fg != fg)) {
> -	flags |= 0x04;
> -	*has_fg = 1;
> -	*last_fg = fg;
> +        flags |= 0x04;
> +        *has_fg = 1;
> +        *last_fg = fg;
>      }
>  
>      switch (n_colors) {
>      case 1:
> -	n_data = 0;
> -	break;
> +        n_data = 0;
> +        break;
>      case 2:
> -	flags |= 0x08;
> -
> -	irow = (pixel_t *)row;
> -
> -	for (j = 0; j < h; j++) {
> -	    int min_x = -1;
> -	    for (i = 0; i < w; i++) {
> -		if (irow[i] == fg) {
> -		    if (min_x == -1)
> -			min_x = i;
> -		} else if (min_x != -1) {
> -		    hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> -		    n_data += 2;
> -		    n_subtiles++;
> -		    min_x = -1;
> -		}
> -	    }
> -	    if (min_x != -1) {
> -		hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> -		n_data += 2;
> -		n_subtiles++;
> -	    }
> -	    irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);
> -	}
> -	break;
> +        flags |= 0x08;
> +
> +        irow = (pixel_t *)row;
> +
> +        for (j = 0; j < h; j++) {
> +            int min_x = -1;
> +            for (i = 0; i < w; i++) {
> +                if (irow[i] == fg) {
> +                    if (min_x == -1)
> +                        min_x = i;
> +                } else if (min_x != -1) {
> +                    hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> +                    n_data += 2;
> +                    n_subtiles++;
> +                    min_x = -1;
> +                }
> +            }
> +            if (min_x != -1) {
> +                hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> +                n_data += 2;
> +                n_subtiles++;
> +            }
> +            irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);
> +        }
> +        break;
>      case 3:
> -	flags |= 0x18;
> -
> -	irow = (pixel_t *)row;
> -
> -	if (!*has_bg || *last_bg != bg)
> -	    flags |= 0x02;
> -
> -	for (j = 0; j < h; j++) {
> -	    int has_color = 0;
> -	    int min_x = -1;
> -	    pixel_t color = 0; /* shut up gcc */
> -
> -	    for (i = 0; i < w; i++) {
> -		if (!has_color) {
> -		    if (irow[i] == bg)
> -			continue;
> -		    color = irow[i];
> -		    min_x = i;
> -		    has_color = 1;
> -		} else if (irow[i] != color) {
> -		    has_color = 0;
> +        flags |= 0x18;
> +
> +        irow = (pixel_t *)row;
> +
> +        if (!*has_bg || *last_bg != bg)

{

> +            flags |= 0x02;

}

> +
> +        for (j = 0; j < h; j++) {
> +            int has_color = 0;
> +            int min_x = -1;
> +            pixel_t color = 0; /* shut up gcc */
> +
> +            for (i = 0; i < w; i++) {
> +                if (!has_color) {
> +                    if (irow[i] == bg)
> +                        continue;
> +                    color = irow[i];
> +                    min_x = i;
> +                    has_color = 1;
> +                } else if (irow[i] != color) {
> +                    has_color = 0;
>  #ifdef GENERIC
>                      vnc_convert_pixel(vs, data + n_data, color);
>                      n_data += vs->client_pf.bytes_per_pixel;
>  #else
> -		    memcpy(data + n_data, &color, sizeof(color));
> +                    memcpy(data + n_data, &color, sizeof(color));
>                      n_data += sizeof(pixel_t);
>  #endif
> -		    hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> -		    n_data += 2;
> -		    n_subtiles++;
> -
> -		    min_x = -1;
> -		    if (irow[i] != bg) {
> -			color = irow[i];
> -			min_x = i;
> -			has_color = 1;
> -		    }
> -		}
> -	    }
> -	    if (has_color) {
> +                    hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> +                    n_data += 2;
> +                    n_subtiles++;
> +
> +                    min_x = -1;
> +                    if (irow[i] != bg) {
> +                        color = irow[i];
> +                        min_x = i;
> +                        has_color = 1;
> +                    }
> +                }
> +            }
> +            if (has_color) {
>  #ifdef GENERIC
>                  vnc_convert_pixel(vs, data + n_data, color);
>                  n_data += vs->client_pf.bytes_per_pixel;
> @@ -158,50 +158,50 @@ static void CONCAT(send_hextile_tile_, NAME)(VncState *vs,
>                  memcpy(data + n_data, &color, sizeof(color));
>                  n_data += sizeof(pixel_t);
>  #endif
> -		hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> -		n_data += 2;
> -		n_subtiles++;
> -	    }
> -	    irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);
> -	}
> -
> -	/* A SubrectsColoured subtile invalidates the foreground color */
> -	*has_fg = 0;
> -	if (n_data > (w * h * sizeof(pixel_t))) {
> -	    n_colors = 4;
> -	    flags = 0x01;
> -	    *has_bg = 0;
> -
> -	    /* we really don't have to invalidate either the bg or fg
> -	       but we've lost the old values.  oh well. */
> -	}
> +                hextile_enc_cord(data + n_data, min_x, j, i - min_x, 1);
> +                n_data += 2;
> +                n_subtiles++;
> +            }
> +            irow += vnc_server_fb_stride(vd) / sizeof(pixel_t);
> +        }
> +
> +        /* A SubrectsColoured subtile invalidates the foreground color */
> +        *has_fg = 0;
> +        if (n_data > (w * h * sizeof(pixel_t))) {
> +            n_colors = 4;
> +            flags = 0x01;
> +            *has_bg = 0;
> +
> +            /* we really don't have to invalidate either the bg or fg
> +               but we've lost the old values.  oh well. */
> +        }
>          break;
>      default:
> -	break;
> +        break;
>      }
>  
>      if (n_colors > 3) {
> -	flags = 0x01;
> -	*has_fg = 0;
> -	*has_bg = 0;
> -	n_colors = 4;
> +        flags = 0x01;
> +        *has_fg = 0;
> +        *has_bg = 0;
> +        n_colors = 4;
>      }
>  
>      vnc_write_u8(vs, flags);
>      if (n_colors < 4) {
> -	if (flags & 0x02)
> -	    vs->write_pixels(vs, last_bg, sizeof(pixel_t));
> -	if (flags & 0x04)
> -	    vs->write_pixels(vs, last_fg, sizeof(pixel_t));
> -	if (n_subtiles) {
> -	    vnc_write_u8(vs, n_subtiles);
> -	    vnc_write(vs, data, n_data);
> -	}
> +        if (flags & 0x02)
> +            vs->write_pixels(vs, last_bg, sizeof(pixel_t));
> +        if (flags & 0x04)
> +            vs->write_pixels(vs, last_fg, sizeof(pixel_t));
> +        if (n_subtiles) {
> +            vnc_write_u8(vs, n_subtiles);
> +            vnc_write(vs, data, n_data);
> +        }
>      } else {
> -	for (j = 0; j < h; j++) {
> -	    vs->write_pixels(vs, row, w * 4);
> -	    row += vnc_server_fb_stride(vd);
> -	}
> +        for (j = 0; j < h; j++) {
> +            vs->write_pixels(vs, row, w * 4);
> +            row += vnc_server_fb_stride(vd);
> +        }
>      }
>  }
>  
> diff --git a/ui/vnc-enc-zywrle.h b/ui/vnc-enc-zywrle.h
> index 610bd79d1a..9b7f698975 100644
> --- a/ui/vnc-enc-zywrle.h
> +++ b/ui/vnc-enc-zywrle.h
> @@ -48,162 +48,162 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
>  #ifndef ZYWRLE_QUANTIZE
>  /* Type A:lower bit omitting of EZW style. */
>  static const unsigned int zywrle_param[3][3]={
> -	{0x0000F000, 0x00000000, 0x00000000},
> -	{0x0000C000, 0x00F0F0F0, 0x00000000},
> -	{0x0000C000, 0x00C0C0C0, 0x00F0F0F0},
> +        {0x0000F000, 0x00000000, 0x00000000},
> +        {0x0000C000, 0x00F0F0F0, 0x00000000},
> +        {0x0000C000, 0x00C0C0C0, 0x00F0F0F0},
>  /*	{0x0000FF00, 0x00000000, 0x00000000},
> -	{0x0000FF00, 0x00FFFFFF, 0x00000000},
> -	{0x0000FF00, 0x00FFFFFF, 0x00FFFFFF}, */
> +        {0x0000FF00, 0x00FFFFFF, 0x00000000},
> +        {0x0000FF00, 0x00FFFFFF, 0x00FFFFFF}, */
>  };
>  #else
>  /* Type B:Non liner quantization filter. */
>  static const int8_t zywrle_conv[4][256]={
>  {	/* bi=5, bo=5 r=0.0:PSNR=24.849 */
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
>  },
>  {	/* bi=5, bo=5 r=2.0:PSNR=74.031 */
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 32,
> -	32, 32, 32, 32, 32, 32, 32, 32,
> -	32, 32, 32, 32, 32, 32, 32, 32,
> -	48, 48, 48, 48, 48, 48, 48, 48,
> -	48, 48, 48, 56, 56, 56, 56, 56,
> -	56, 56, 56, 56, 64, 64, 64, 64,
> -	64, 64, 64, 64, 72, 72, 72, 72,
> -	72, 72, 72, 72, 80, 80, 80, 80,
> -	80, 80, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 96, 96,
> -	96, 96, 96, 104, 104, 104, 104, 104,
> -	104, 104, 104, 104, 104, 112, 112, 112,
> -	112, 112, 112, 112, 112, 112, 120, 120,
> -	120, 120, 120, 120, 120, 120, 120, 120,
> -	0, -120, -120, -120, -120, -120, -120, -120,
> -	-120, -120, -120, -112, -112, -112, -112, -112,
> -	-112, -112, -112, -112, -104, -104, -104, -104,
> -	-104, -104, -104, -104, -104, -104, -96, -96,
> -	-96, -96, -96, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -80,
> -	-80, -80, -80, -80, -80, -72, -72, -72,
> -	-72, -72, -72, -72, -72, -64, -64, -64,
> -	-64, -64, -64, -64, -64, -56, -56, -56,
> -	-56, -56, -56, -56, -56, -56, -48, -48,
> -	-48, -48, -48, -48, -48, -48, -48, -48,
> -	-48, -32, -32, -32, -32, -32, -32, -32,
> -	-32, -32, -32, -32, -32, -32, -32, -32,
> -	-32, -32, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 32,
> +        32, 32, 32, 32, 32, 32, 32, 32,
> +        32, 32, 32, 32, 32, 32, 32, 32,
> +        48, 48, 48, 48, 48, 48, 48, 48,
> +        48, 48, 48, 56, 56, 56, 56, 56,
> +        56, 56, 56, 56, 64, 64, 64, 64,
> +        64, 64, 64, 64, 72, 72, 72, 72,
> +        72, 72, 72, 72, 80, 80, 80, 80,
> +        80, 80, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 96, 96,
> +        96, 96, 96, 104, 104, 104, 104, 104,
> +        104, 104, 104, 104, 104, 112, 112, 112,
> +        112, 112, 112, 112, 112, 112, 120, 120,
> +        120, 120, 120, 120, 120, 120, 120, 120,
> +        0, -120, -120, -120, -120, -120, -120, -120,
> +        -120, -120, -120, -112, -112, -112, -112, -112,
> +        -112, -112, -112, -112, -104, -104, -104, -104,
> +        -104, -104, -104, -104, -104, -104, -96, -96,
> +        -96, -96, -96, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -80,
> +        -80, -80, -80, -80, -80, -72, -72, -72,
> +        -72, -72, -72, -72, -72, -64, -64, -64,
> +        -64, -64, -64, -64, -64, -56, -56, -56,
> +        -56, -56, -56, -56, -56, -56, -48, -48,
> +        -48, -48, -48, -48, -48, -48, -48, -48,
> +        -48, -32, -32, -32, -32, -32, -32, -32,
> +        -32, -32, -32, -32, -32, -32, -32, -32,
> +        -32, -32, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
>  },
>  {	/* bi=5, bo=4 r=2.0:PSNR=64.441 */
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	48, 48, 48, 48, 48, 48, 48, 48,
> -	48, 48, 48, 48, 48, 48, 48, 48,
> -	48, 48, 48, 48, 48, 48, 48, 48,
> -	64, 64, 64, 64, 64, 64, 64, 64,
> -	64, 64, 64, 64, 64, 64, 64, 64,
> -	80, 80, 80, 80, 80, 80, 80, 80,
> -	80, 80, 80, 80, 80, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	104, 104, 104, 104, 104, 104, 104, 104,
> -	104, 104, 104, 112, 112, 112, 112, 112,
> -	112, 112, 112, 112, 120, 120, 120, 120,
> -	120, 120, 120, 120, 120, 120, 120, 120,
> -	0, -120, -120, -120, -120, -120, -120, -120,
> -	-120, -120, -120, -120, -120, -112, -112, -112,
> -	-112, -112, -112, -112, -112, -112, -104, -104,
> -	-104, -104, -104, -104, -104, -104, -104, -104,
> -	-104, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -80, -80, -80, -80,
> -	-80, -80, -80, -80, -80, -80, -80, -80,
> -	-80, -64, -64, -64, -64, -64, -64, -64,
> -	-64, -64, -64, -64, -64, -64, -64, -64,
> -	-64, -48, -48, -48, -48, -48, -48, -48,
> -	-48, -48, -48, -48, -48, -48, -48, -48,
> -	-48, -48, -48, -48, -48, -48, -48, -48,
> -	-48, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        48, 48, 48, 48, 48, 48, 48, 48,
> +        48, 48, 48, 48, 48, 48, 48, 48,
> +        48, 48, 48, 48, 48, 48, 48, 48,
> +        64, 64, 64, 64, 64, 64, 64, 64,
> +        64, 64, 64, 64, 64, 64, 64, 64,
> +        80, 80, 80, 80, 80, 80, 80, 80,
> +        80, 80, 80, 80, 80, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        104, 104, 104, 104, 104, 104, 104, 104,
> +        104, 104, 104, 112, 112, 112, 112, 112,
> +        112, 112, 112, 112, 120, 120, 120, 120,
> +        120, 120, 120, 120, 120, 120, 120, 120,
> +        0, -120, -120, -120, -120, -120, -120, -120,
> +        -120, -120, -120, -120, -120, -112, -112, -112,
> +        -112, -112, -112, -112, -112, -112, -104, -104,
> +        -104, -104, -104, -104, -104, -104, -104, -104,
> +        -104, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -80, -80, -80, -80,
> +        -80, -80, -80, -80, -80, -80, -80, -80,
> +        -80, -64, -64, -64, -64, -64, -64, -64,
> +        -64, -64, -64, -64, -64, -64, -64, -64,
> +        -64, -48, -48, -48, -48, -48, -48, -48,
> +        -48, -48, -48, -48, -48, -48, -48, -48,
> +        -48, -48, -48, -48, -48, -48, -48, -48,
> +        -48, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
>  },
>  {	/* bi=5, bo=2 r=2.0:PSNR=43.175 */
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	88, 88, 88, 88, 88, 88, 88, 88,
> -	0, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, -88, -88, -88, -88, -88, -88, -88,
> -	-88, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> -	0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        88, 88, 88, 88, 88, 88, 88, 88,
> +        0, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, -88, -88, -88, -88, -88, -88, -88,
> +        -88, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
> +        0, 0, 0, 0, 0, 0, 0, 0,
>  }
>  };
>  
>  static const int8_t *zywrle_param[3][3][3]={
> -	{{zywrle_conv[0], zywrle_conv[2], zywrle_conv[0]},
> +        {{zywrle_conv[0], zywrle_conv[2], zywrle_conv[0]},
>           {zywrle_conv[0], zywrle_conv[0], zywrle_conv[0]},
>           {zywrle_conv[0], zywrle_conv[0], zywrle_conv[0]}},
> -	{{zywrle_conv[0], zywrle_conv[3], zywrle_conv[0]},
> +        {{zywrle_conv[0], zywrle_conv[3], zywrle_conv[0]},
>           {zywrle_conv[1], zywrle_conv[1], zywrle_conv[1]},
>           {zywrle_conv[0], zywrle_conv[0], zywrle_conv[0]}},
> -	{{zywrle_conv[0], zywrle_conv[3], zywrle_conv[0]},
> +        {{zywrle_conv[0], zywrle_conv[3], zywrle_conv[0]},
>           {zywrle_conv[2], zywrle_conv[2], zywrle_conv[2]},
>           {zywrle_conv[1], zywrle_conv[1], zywrle_conv[1]}},
>  };
> @@ -214,53 +214,53 @@ static const int8_t *zywrle_param[3][3][3]={
>  #define ZYWRLE_UVMASK15 0xFFFFFFF8
>  #define ZYWRLE_LOAD_PIXEL15(src, r, g, b)                               \
>      do {                                                                \
> -	r = (((uint8_t*)src)[S_1]<< 1)& 0xF8;                           \
> -	g = (((uint8_t*)src)[S_1]<< 6) | (((uint8_t*)src)[S_0]>> 2);    \
> +        r = (((uint8_t*)src)[S_1]<< 1)& 0xF8;                           \
> +        g = (((uint8_t*)src)[S_1]<< 6) | (((uint8_t*)src)[S_0]>> 2);    \
>          g &= 0xF8;                                                      \
> -	b =  (((uint8_t*)src)[S_0]<< 3)& 0xF8;                          \
> +        b =  (((uint8_t*)src)[S_0]<< 3)& 0xF8;                          \
>      } while (0)
>  
>  #define ZYWRLE_SAVE_PIXEL15(dst, r, g, b)                               \
>      do {                                                                \
> -	r &= 0xF8;                                                      \
> -	g &= 0xF8;                                                      \
> -	b &= 0xF8;                                                      \
> -	((uint8_t*)dst)[S_1] = (uint8_t)((r >> 1)|(g >> 6));            \
> -	((uint8_t*)dst)[S_0] = (uint8_t)(((b >> 3)|(g << 2))& 0xFF);    \
> +        r &= 0xF8;                                                      \
> +        g &= 0xF8;                                                      \
> +        b &= 0xF8;                                                      \
> +        ((uint8_t*)dst)[S_1] = (uint8_t)((r >> 1)|(g >> 6));            \
> +        ((uint8_t*)dst)[S_0] = (uint8_t)(((b >> 3)|(g << 2))& 0xFF);    \
>      } while (0)
>  
>  #define ZYWRLE_YMASK16  0xFFFFFFFC
>  #define ZYWRLE_UVMASK16 0xFFFFFFF8
>  #define ZYWRLE_LOAD_PIXEL16(src, r, g, b)                               \
>      do {                                                                \
> -	r = ((uint8_t*)src)[S_1] & 0xF8;                                \
> -	g = (((uint8_t*)src)[S_1]<< 5) | (((uint8_t*)src)[S_0] >> 3);   \
> +        r = ((uint8_t*)src)[S_1] & 0xF8;                                \
> +        g = (((uint8_t*)src)[S_1]<< 5) | (((uint8_t*)src)[S_0] >> 3);   \
>          g &= 0xFC;                                                      \
> -	b = (((uint8_t*)src)[S_0]<< 3) & 0xF8;                          \
> +        b = (((uint8_t*)src)[S_0]<< 3) & 0xF8;                          \
>      } while (0)
>  
>  #define ZYWRLE_SAVE_PIXEL16(dst, r, g,b)                                \
>      do {                                                                \
> -	r &= 0xF8;                                                      \
> -	g &= 0xFC;                                                      \
> -	b &= 0xF8;                                                      \
> -	((uint8_t*)dst)[S_1] = (uint8_t)(r | (g >> 5));                 \
> -	((uint8_t*)dst)[S_0] = (uint8_t)(((b >> 3)|(g << 3)) & 0xFF);   \
> +        r &= 0xF8;                                                      \
> +        g &= 0xFC;                                                      \
> +        b &= 0xF8;                                                      \
> +        ((uint8_t*)dst)[S_1] = (uint8_t)(r | (g >> 5));                 \
> +        ((uint8_t*)dst)[S_0] = (uint8_t)(((b >> 3)|(g << 3)) & 0xFF);   \
>      } while (0)
>  
>  #define ZYWRLE_YMASK32  0xFFFFFFFF
>  #define ZYWRLE_UVMASK32 0xFFFFFFFF
>  #define ZYWRLE_LOAD_PIXEL32(src, r, g, b)     \
>      do {                                      \
> -	r = ((uint8_t*)src)[L_2];             \
> -	g = ((uint8_t*)src)[L_1];             \
> -	b = ((uint8_t*)src)[L_0];             \
> +        r = ((uint8_t*)src)[L_2];             \
> +        g = ((uint8_t*)src)[L_1];             \
> +        b = ((uint8_t*)src)[L_0];             \
>      } while (0)
>  #define ZYWRLE_SAVE_PIXEL32(dst, r, g, b)             \
>      do {                                              \
> -	((uint8_t*)dst)[L_2] = (uint8_t)r;            \
> -	((uint8_t*)dst)[L_1] = (uint8_t)g;            \
> -	((uint8_t*)dst)[L_0] = (uint8_t)b;            \
> +        ((uint8_t*)dst)[L_2] = (uint8_t)r;            \
> +        ((uint8_t*)dst)[L_1] = (uint8_t)g;            \
> +        ((uint8_t*)dst)[L_0] = (uint8_t)b;            \
>      } while (0)
>  
>  static inline void harr(int8_t *px0, int8_t *px1)
> @@ -443,27 +443,27 @@ static inline void filter_wavelet_square(int *buf, int width, int height,
>  
>  static inline void wavelet(int *buf, int width, int height, int level)
>  {
> -	int l, s;
> -	int *top;
> -	int *end;
> -
> -	for (l = 0; l < level; l++) {
> -		top = buf;
> -		end = buf + height * width;
> -		s = width << l;
> -		while (top < end) {
> -			wavelet_level(top, width, l, 1);
> -			top += s;
> -		}
> -		top = buf;
> -		end = buf + width;
> -		s = 1<<l;
> -		while (top < end) {
> -			wavelet_level(top, height, l, width);
> -			top += s;
> -		}
> -		filter_wavelet_square(buf, width, height, level, l);
> -	}
> +        int l, s;
> +        int *top;
> +        int *end;
> +
> +        for (l = 0; l < level; l++) {
> +                top = buf;
> +                end = buf + height * width;
> +                s = width << l;
> +                while (top < end) {
> +                        wavelet_level(top, width, l, 1);
> +                        top += s;
> +                }
> +                top = buf;
> +                end = buf + width;
> +                s = 1<<l;
> +                while (top < end) {
> +                        wavelet_level(top, height, l, width);
> +                        top += s;
> +                }
> +                filter_wavelet_square(buf, width, height, level, l);
> +        }
>  }
>  
>  
> @@ -471,16 +471,16 @@ static inline void wavelet(int *buf, int width, int height, int level)
>   Coefficients manages as 24 bits little-endian pixel. */
>  #define ZYWRLE_LOAD_COEFF(src, r, g, b)         \
>      do {                                        \
> -	r = ((int8_t*)src)[2];                  \
> -	g = ((int8_t*)src)[1];                  \
> -	b = ((int8_t*)src)[0];                  \
> +        r = ((int8_t*)src)[2];                  \
> +        g = ((int8_t*)src)[1];                  \
> +        b = ((int8_t*)src)[0];                  \
>      } while (0)
>  
>  #define ZYWRLE_SAVE_COEFF(dst, r, g, b)       \
>      do {                                      \
> -	((int8_t*)dst)[2] = (int8_t)r;        \
> -	((int8_t*)dst)[1] = (int8_t)g;        \
> -	((int8_t*)dst)[0] = (int8_t)b;        \
> +        ((int8_t*)dst)[2] = (int8_t)r;        \
> +        ((int8_t*)dst)[1] = (int8_t)g;        \
> +        ((int8_t*)dst)[0] = (int8_t)b;        \
>      } while (0)
>  
>  /*
> @@ -502,22 +502,22 @@ static inline void wavelet(int *buf, int width, int height, int level)
>     More exact PLHarr, we reduce to odd range(-127<=x<=127). */
>  #define ZYWRLE_RGBYUV_(r, g, b, y, u, v, ymask, uvmask)          \
>      do {                                                         \
> -	y = (r + (g << 1) + b) >> 2;                             \
> -	u =  b - g;                                              \
> -	v =  r - g;                                              \
> -	y -= 128;                                                \
> -	u >>= 1;                                                 \
> -	v >>= 1;                                                 \
> -	y &= ymask;                                              \
> -	u &= uvmask;                                             \
> -	v &= uvmask;                                             \
> -	if (y == -128) {                                         \
> +        y = (r + (g << 1) + b) >> 2;                             \
> +        u =  b - g;                                              \
> +        v =  r - g;                                              \
> +        y -= 128;                                                \
> +        u >>= 1;                                                 \
> +        v >>= 1;                                                 \
> +        y &= ymask;                                              \
> +        u &= uvmask;                                             \
> +        v &= uvmask;                                             \
> +        if (y == -128) {                                         \
>              y += (0xFFFFFFFF - ymask + 1);                       \
>          }                                                        \
> -	if (u == -128) {                                         \
> +        if (u == -128) {                                         \
>              u += (0xFFFFFFFF - uvmask + 1);                      \
>          }                                                        \
> -	if (v == -128) {                                         \
> +        if (v == -128) {                                         \
>              v += (0xFFFFFFFF - uvmask + 1);                      \
>          }                                                        \
>      } while (0)
> 

Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>

