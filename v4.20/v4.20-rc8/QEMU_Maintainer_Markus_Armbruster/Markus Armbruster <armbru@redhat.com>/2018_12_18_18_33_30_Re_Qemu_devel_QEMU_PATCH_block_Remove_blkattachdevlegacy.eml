Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:42:15 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8FB8A58055F
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 10:38:38 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 10:38:38 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AnBtH/h/bN2JLvf9uRHKM819IXTAuvvDOBiVQ1KB2?=
 =?us-ascii?q?1O4cTK2v8tzYMVDF4r011RmVBdWds6oMotGVmpioYXYH75eFvSJKW713fDhBt/?=
 =?us-ascii?q?8rmRc9CtWOE0zxIa2iRSU7GMNfSA0tpCnjYgBaF8nkelLdvGC54yIMFRXjLwp1?=
 =?us-ascii?q?Ifn+FpLPg8it2O2+557ebx9UiDahfLh/MAi4oQLNu8cMnIBsMLwxyhzHontJf+?=
 =?us-ascii?q?RZ22ZlLk+Nkhj/+8m94odt/zxftPw9+cFAV776f7kjQrxDEDsmKWE169b1uhTF?=
 =?us-ascii?q?UACC+2ETUmQSkhpPHgjF8BT3VYr/vyfmquZw3jSRMNboRr4oRzut86ZrSAfpiC?=
 =?us-ascii?q?gZMT457HrXgdF0gK5CvR6tuwBzz4vSbYqINvRxY7ndcMsaS2RfUMZfWS5ODICy?=
 =?us-ascii?q?YIQAE+UPIP5Yoov/qVYBsBezCxWgC/30yjJTmn/6wbc33/g9HQzcwAAtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSee7w7PSzTXAcvNWwir25ZTSchAkuv6MR69wcdHNyUYxDQPOk1Kd?=
 =?us-ascii?q?ppb/PzOQzesNqXWb4vF6Ve2xlmEnqxt+oiS1ysgwjYnJg5sYx1bZ/it62IY4Pc?=
 =?us-ascii?q?O0RFJ4bNK+DZdcqiKXO5FoTs4sQ2xkojs2x78etZKlYCQHzI4rywPRZvCZaYSE?=
 =?us-ascii?q?/xHuWeiLLTtmh39ofq+0iQyo/ki60OL8U9G50FZUoSpBldnBrnQN1x3I6sibUf?=
 =?us-ascii?q?tx5Eih2TCS1wzJ7eFEO080mbLaK54n3LEwioIevVrfEiL1gkn6kbKae0Y+9uS2?=
 =?us-ascii?q?5enqYq/qqoKeOoNsjwHxKKUumsixAeQiNQgOWnCW+f2i273m4E31WahFgeMokq?=
 =?us-ascii?q?bHtJDWPN8UpqmkAw9Tzoks9Q2/AzCi0NQZnnkIMkhJeR2aj4XxP1HOIfb4Deqw?=
 =?us-ascii?q?gli2kTdrwezGMaPlApnXMnfDl7LhcK17605bzgozwtZf549OBrEGOvLzVVf9tM?=
 =?us-ascii?q?bEAR8hLwy03+HnBc151oMfWmKAHLWVMazPsVKT4uIvIu+MZJIauTrnKvgl4eLu?=
 =?us-ascii?q?gmE9mVMHYaap2p4XOziFGO97KRCZfWb0mYVGVmMLpRYlCurtjlKETHhUfXn1Wq?=
 =?us-ascii?q?s94jQyDsWhFZvCQYa2x6WM2Tr+EpBIa2QVN1aXDH29coyFX+sLOjufJ9IknjEa?=
 =?us-ascii?q?WLzkUYI4yBy1qCf8zLxoKPeS/TcX4on+3tp47PGGiBcp6DZvBN6c2Wzec2Yhom?=
 =?us-ascii?q?MPQjYtlIBivUw1nkuDzLR4q+ZVGdxa+7VCVQJsZrDGyOkvLtnoWR/aNv6TTVy8?=
 =?us-ascii?q?X866DCt5GtsrxtUUfm5nFtmihwyF1C2vVexG34eXDYA5p/qPl0P6INxwnjOfjP?=
 =?us-ascii?q?Es?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DaBAAvPhlchxHrdtBjHgEGBwaBZYExg?=
 =?us-ascii?q?k8TjHSLHIINfIgniTqGcBUYFIcdIjgSAQMBAQEBAQECARMBAQEKCwkIGw4vgjY?=
 =?us-ascii?q?FAgMaAQaCXAECAgEBAiQfCikDAgEBAgYBAQoOEx0IAwELAQQYMRMFgx2BdAUIA?=
 =?us-ascii?q?QSoMTOKLow/F4F/gRGCXTWKYAKJRpdeCZFgGIl2h2EsmUeBXYF3cBWDJ4InFxK?=
 =?us-ascii?q?ODEAxgQcci02BdwEB?=
X-IPAS-Result: =?us-ascii?q?A0DaBAAvPhlchxHrdtBjHgEGBwaBZYExgk8TjHSLHIINfIg?=
 =?us-ascii?q?niTqGcBUYFIcdIjgSAQMBAQEBAQECARMBAQEKCwkIGw4vgjYFAgMaAQaCXAECA?=
 =?us-ascii?q?gEBAiQfCikDAgEBAgYBAQoOEx0IAwELAQQYMRMFgx2BdAUIAQSoMTOKLow/F4F?=
 =?us-ascii?q?/gRGCXTWKYAKJRpdeCZFgGIl2h2EsmUeBXYF3cBWDJ4InFxKODEAxgQcci02Bd?=
 =?us-ascii?q?wEB?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="55683958"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 10:38:37 -0800
Received: from localhost ([::1]:55840 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZKGK-0001J9-7C
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 13:38:36 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47442)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gZKBr-0006Wp-5Z
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 13:34:04 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gZKBm-0003Ot-DB
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 13:33:58 -0500
Received: from mx1.redhat.com ([209.132.183.28]:45456)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>)
	id 1gZKBZ-0002Yh-6q; Tue, 18 Dec 2018 13:33:41 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 6D626C0C0581;
	Tue, 18 Dec 2018 18:33:40 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id BCAE827C59;
	Tue, 18 Dec 2018 18:33:32 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id CE316113860E; Tue, 18 Dec 2018 19:33:30 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: Thomas Huth <thuth@redhat.com>
References: <1545149484-4929-1-git-send-email-thuth@redhat.com>
Date: Tue, 18 Dec 2018 19:33:30 +0100
In-Reply-To: <1545149484-4929-1-git-send-email-thuth@redhat.com> (Thomas
	Huth's message of "Tue, 18 Dec 2018 17:11:24 +0100")
Message-ID: <878t0mbs79.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.32]);
	Tue, 18 Dec 2018 18:33:40 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [QEMU PATCH] block: Remove blk_attach_dev_legacy()
 / legacy_dev code
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, Anthony Perard <anthony.perard@citrix.com>,
	xen-devel@lists.xenproject.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Thomas Huth <thuth@redhat.com> writes:

> The last user of blk_attach_dev_legacy() is the code in xen_disk.c.
> It passes a pointer to a XenBlkDev as second parameter. XenBlkDev
> is derived from XenDevice which in turn is derived from DeviceState
> since commit 3a6c9172ac5951e ("xen: create qdev for each backend device").
> Thus the code can also simply use blk_attach_dev() with a pointer
> to the DeviceState instead.
> So we can finally remove all code related to the "legacy_dev" flag, too,
> and turn the related "void *" in block-backend.c into "DeviceState *"
> to fix some of the remaining TODOs there.
>
> Signed-off-by: Thomas Huth <thuth@redhat.com>
> ---
>  Note: I haven't tested the Xen code since I don't have a working Xen
>  installation at hand. I'd appreciate if someone could check it...

Same here.  All I can do is review.

>  block/block-backend.c          | 54 +++++++-----------------------------------
>  hw/block/xen_disk.c            |  6 +++--
>  include/sysemu/block-backend.h |  5 ++--
>  3 files changed, 15 insertions(+), 50 deletions(-)
>
> diff --git a/block/block-backend.c b/block/block-backend.c
> index 60d37a0..3c3118f 100644
> --- a/block/block-backend.c
> +++ b/block/block-backend.c
> @@ -47,9 +47,7 @@ struct BlockBackend {
>      QTAILQ_ENTRY(BlockBackend) monitor_link; /* for monitor_block_backends */
>      BlockBackendPublic public;
>  
> -    void *dev;                  /* attached device model, if any */
> -    bool legacy_dev;            /* true if dev is not a DeviceState */
> -    /* TODO change to DeviceState when all users are qdevified */
> +    DeviceState *dev;           /* attached device model, if any */
>      const BlockDevOps *dev_ops;
>      void *dev_opaque;
>  
> @@ -836,7 +834,11 @@ void blk_get_perm(BlockBackend *blk, uint64_t *perm, uint64_t *shared_perm)
>      *shared_perm = blk->shared_perm;
>  }
>  
> -static int blk_do_attach_dev(BlockBackend *blk, void *dev)
> +/*
> + * Attach device model @dev to @blk.
> + * Return 0 on success, -EBUSY when a device model is attached already.
> + */
> +int blk_attach_dev(BlockBackend *blk, DeviceState *dev)
>  {
>      if (blk->dev) {
>          return -EBUSY;
> @@ -851,40 +853,16 @@ static int blk_do_attach_dev(BlockBackend *blk, void *dev)
>  
>      blk_ref(blk);
>      blk->dev = dev;
> -    blk->legacy_dev = false;
>      blk_iostatus_reset(blk);
>  
>      return 0;
>  }
>  
>  /*
> - * Attach device model @dev to @blk.
> - * Return 0 on success, -EBUSY when a device model is attached already.
> - */
> -int blk_attach_dev(BlockBackend *blk, DeviceState *dev)
> -{
> -    return blk_do_attach_dev(blk, dev);
> -}
> -
> -/*
> - * Attach device model @dev to @blk.
> - * @blk must not have a device model attached already.
> - * TODO qdevified devices don't use this, remove when devices are qdevified
> - */
> -void blk_attach_dev_legacy(BlockBackend *blk, void *dev)
> -{
> -    if (blk_do_attach_dev(blk, dev) < 0) {
> -        abort();
> -    }
> -    blk->legacy_dev = true;
> -}
> -
> -/*
>   * Detach device model @dev from @blk.
>   * @dev must be currently attached to @blk.
>   */
> -void blk_detach_dev(BlockBackend *blk, void *dev)
> -/* TODO change to DeviceState *dev when all users are qdevified */
> +void blk_detach_dev(BlockBackend *blk, DeviceState *dev)
>  {
>      assert(blk->dev == dev);
>      blk->dev = NULL;
> @@ -898,8 +876,7 @@ void blk_detach_dev(BlockBackend *blk, void *dev)
>  /*
>   * Return the device model attached to @blk if any, else null.
>   */
> -void *blk_get_attached_dev(BlockBackend *blk)
> -/* TODO change to return DeviceState * when all users are qdevified */
> +DeviceState *blk_get_attached_dev(BlockBackend *blk)
>  {
>      return blk->dev;
>  }
> @@ -908,10 +885,7 @@ void *blk_get_attached_dev(BlockBackend *blk)
>   * device attached to the BlockBackend. */
>  char *blk_get_attached_dev_id(BlockBackend *blk)
>  {
> -    DeviceState *dev;
> -
> -    assert(!blk->legacy_dev);
> -    dev = blk->dev;
> +    DeviceState *dev = blk->dev;
>  
>      if (!dev) {
>          return g_strdup("");
> @@ -949,11 +923,6 @@ BlockBackend *blk_by_dev(void *dev)
>  void blk_set_dev_ops(BlockBackend *blk, const BlockDevOps *ops,
>                       void *opaque)
>  {
> -    /* All drivers that use blk_set_dev_ops() are qdevified and we want to keep
> -     * it that way, so we can assume blk->dev, if present, is a DeviceState if
> -     * blk->dev_ops is set. Non-device users may use dev_ops without device. */
> -    assert(!blk->legacy_dev);
> -
>      blk->dev_ops = ops;
>      blk->dev_opaque = opaque;
>  
> @@ -979,8 +948,6 @@ void blk_dev_change_media_cb(BlockBackend *blk, bool load, Error **errp)
>          bool tray_was_open, tray_is_open;
>          Error *local_err = NULL;
>  
> -        assert(!blk->legacy_dev);
> -
>          tray_was_open = blk_dev_is_tray_open(blk);
>          blk->dev_ops->change_media_cb(blk->dev_opaque, load, &local_err);
>          if (local_err) {
> @@ -1779,9 +1746,6 @@ void blk_eject(BlockBackend *blk, bool eject_flag)
>      BlockDriverState *bs = blk_bs(blk);
>      char *id;
>  
> -    /* blk_eject is only called by qdevified devices */
> -    assert(!blk->legacy_dev);
> -
>      if (bs) {
>          bdrv_eject(bs, eject_flag);
>      }
> diff --git a/hw/block/xen_disk.c b/hw/block/xen_disk.c
> index 36eff94..9605caf 100644
> --- a/hw/block/xen_disk.c
> +++ b/hw/block/xen_disk.c
> @@ -801,7 +801,9 @@ static int blk_connect(struct XenDevice *xendev)
>           * so we can blk_unref() unconditionally */
>          blk_ref(blkdev->blk);
>      }
> -    blk_attach_dev_legacy(blkdev->blk, blkdev);
> +    if (blk_attach_dev(blkdev->blk, DEVICE(blkdev)) < 0) {
> +        return -1;
> +    }

Other error returns in this function call xen_pv_printf() first.  Should
this one, too?

>      blkdev->file_size = blk_getlength(blkdev->blk);
>      if (blkdev->file_size < 0) {
>          BlockDriverState *bs = blk_bs(blkdev->blk);
> @@ -951,7 +953,7 @@ static void blk_disconnect(struct XenDevice *xendev)
>  
>      if (blkdev->blk) {
>          blk_set_aio_context(blkdev->blk, qemu_get_aio_context());
> -        blk_detach_dev(blkdev->blk, blkdev);
> +        blk_detach_dev(blkdev->blk, DEVICE(blkdev));
>          blk_unref(blkdev->blk);
>          blkdev->blk = NULL;
>      }
> diff --git a/include/sysemu/block-backend.h b/include/sysemu/block-backend.h
> index c96bcde..39507d6 100644
> --- a/include/sysemu/block-backend.h
> +++ b/include/sysemu/block-backend.h
> @@ -110,9 +110,8 @@ void blk_iostatus_disable(BlockBackend *blk);
>  void blk_iostatus_reset(BlockBackend *blk);
>  void blk_iostatus_set_err(BlockBackend *blk, int error);
>  int blk_attach_dev(BlockBackend *blk, DeviceState *dev);
> -void blk_attach_dev_legacy(BlockBackend *blk, void *dev);
> -void blk_detach_dev(BlockBackend *blk, void *dev);
> -void *blk_get_attached_dev(BlockBackend *blk);
> +void blk_detach_dev(BlockBackend *blk, DeviceState *dev);
> +DeviceState *blk_get_attached_dev(BlockBackend *blk);
>  char *blk_get_attached_dev_id(BlockBackend *blk);
>  BlockBackend *blk_by_dev(void *dev);
>  BlockBackend *blk_by_qdev_id(const char *id, Error **errp);

I didn't verify your claim that DEVICE(blkdev) is okay.  Apart from
that, looks good to me.

