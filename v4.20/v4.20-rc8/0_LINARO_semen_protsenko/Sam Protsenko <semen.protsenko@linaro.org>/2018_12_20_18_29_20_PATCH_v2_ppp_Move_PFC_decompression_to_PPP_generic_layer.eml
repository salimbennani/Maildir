Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:40:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 24E355805F0;
	Thu, 20 Dec 2018 10:29:36 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 10:29:35 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFhB7JxHmdxknnctI/ZSFf51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o825bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGMulWoJL9p0MMoBalGQWhB/nixiNSi3PqwaE31fkqHwHc3AwnGtIDqG?=
 =?us-ascii?q?nao8/wNKwPS+611q7IzSnYb/xI3zf964/IeQ0mrPGXQ71wdNTeyU81GwPdlFWQ?=
 =?us-ascii?q?rpDlPyiL2eQLsGib6PFtVeaui24hsQ5xuD+vyt0rionTiYIY01bJ/jh6zoYtPd?=
 =?us-ascii?q?C0VlJ3bNq+HJdNuSyWKZF6Tt4hTm10oio3y78LtYamcCUOyJkr3QDTZvKEfoSS?=
 =?us-ascii?q?5h/vSvydLSp2iX57fr+0mgy8/lK6yuLmU8m5yFZKoTRBktnLrn0NyRPT5dadSv?=
 =?us-ascii?q?dn/UeuxyyP1wbN5eFAO0w0krDbK5E5zr4xkJocr1jDEzfolEnqiKKabFgo9+a2?=
 =?us-ascii?q?5+j9f7nrpYOQO5V1hwz8Kqgun9awAeU8MggARWib/uG82aXn/U34RrVKk/I3nr?=
 =?us-ascii?q?DasJ/EP8QboLC2AwtM3oYk5Re/CSmp0M4DkHkZI1JKZgiHg5LqO17QOvD4C+mw?=
 =?us-ascii?q?g1C2nDds3fDGMaXtAo/RIXjbjLfhYbF95lZYyAoyztBQ+YhYC74cIP/oXk/xtd?=
 =?us-ascii?q?rYDgI2MgCuwubnDsl92Z0aWW6VHqCZN6bSu0eS5u0zO+mMeJMVuDHlJvgl/fHu?=
 =?us-ascii?q?jGM5lkUafaWz3ZsXdWq3HvJpI0iCZXrsg9EBEXoFvwYkTezqjkGCXiBXZ3qoQ6?=
 =?us-ascii?q?084TQ7Apq8DYjfXoCtnKCB3CCjE5JMfWBGCleMEXTye4WeQfgMajmfIstgkjwC?=
 =?us-ascii?q?SLigRJUt1RCotA/m1bVnKvDY9TEftZLmzNJ1/fHclQku9TxoCMSQy2KNQHtynm?=
 =?us-ascii?q?8SQz823bpwoUpyylqY1ah4gvpYFcFc5v9TUwc6M4LcwPJ+C9zoRg3BedKJQk68?=
 =?us-ascii?q?Qtq6GTExUs4xw9gWbklgAdqikA7M0zCqA7APkbyLH4I78qTb03j1JMZ9znLG2b?=
 =?us-ascii?q?Ilj1knRMtPKGKnirR+9wjVG47GjUGZm7y2eqQb2S7H7H2DwnaWvEFETA5wVr3I?=
 =?us-ascii?q?Um0FaUvIs9v1/EPCQKWoCbQ8LARBz9WPKq9Lat3vkFVHS+3vONXYY2KthWiwAQ?=
 =?us-ascii?q?yEya+LbIrvY28dxjnSCFAYkwAP+naLLRQ+Biako2LZEDxuFVLub1nw8eVkr3O7?=
 =?us-ascii?q?VEs0zwCMb01uzLe1/h8VhfqBS/IcxL4EuSEhqylqE1a5xd7ZF92Apw95dqVGfd?=
 =?us-ascii?q?w9+EtH1X7etwFlJJOgK75th1EAfAV3pU/hzAh3BZhansgsr3MqyxRyJLmc0FNA?=
 =?us-ascii?q?cTOYwJ/xNqfWKmn04BCgdarW1kvC39aR/6cF8O44pEn7vAG1Ckoi9G1q0tlI03?=
 =?us-ascii?q?eG+prGFgsTUZLrXUYx+Bh3vLXaYig754PJ2nxgK6i0sjne2903AOsp0Aqvf9Ba?=
 =?us-ascii?q?MKmcDg/9D9UaB9SyKOwtg1WpdBMEM/xI+64uIsymcOGK2Ki1M+Z6nTKqlHhI75?=
 =?us-ascii?q?p50k2R6SV8UOnI35AezvGc3wuHUSr8jVi7vsD2n4BEeS8dHm6lxSf4A45RY7V4?=
 =?us-ascii?q?fZwXBme2P8232tJ+iobtWn5Z7lKiB0kK2NS0eRqUdFH92QxQ1UIKoX2ogye4zj?=
 =?us-ascii?q?p0ky03oaqbxiDB3+PidB8fMG5RWGZilUvsIZSzj90CXkindRIplBim5Ub93aRb?=
 =?us-ascii?q?v75wL2rQQUdJeSj5MWdiX7C0trqDZc5P9ZwpvT9WUOS6fVCVVLr9rwEG3CPkGm?=
 =?us-ascii?q?tU3Co7eC2yupXlgxx6j3qQLXZpo3reY81wxxbf5NrHSP5V3zoGQjR4iDbNCli9?=
 =?us-ascii?q?Odmp4cubl5PZvu+iUGKhU4VZcTP3woOYqCu7+WpqDAW8n/+pm93rCwg60TLh2N?=
 =?us-ascii?q?lsWiXFtxL8Yojt16SnPuNrZEhoBFng68VkHoFyiJc/hJYV2XICnJWa4WIHkXvv?=
 =?us-ascii?q?MdVcwa/+aXsNRT0RzNLP7gnqxlZjLm6XyILjTXqS3NFhZ9ahb2MS2yI96d1KCa?=
 =?us-ascii?q?iO4LxFmyt1vkS3rQbLbfdhmTcdzOMk6GQGjOERpAot0iKdD6gOHUlfOCzgjRWJ?=
 =?us-ascii?q?4Mq4rKVKf2avarmw2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYJ4krmfoNgSpnJHjxvXk4y+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQPKqCj0SsOroNx2UHD0gsH?=
 =?us-ascii?q?ubGqffHQyC6EdgtX3PCIumN3WWJHkf0NVjSwORJE1ZgAAIQjo6moQ1GRytxMzk?=
 =?us-ascii?q?aE15/Cwe5kbkqhtQzeJlLxn+UmDCpAexdzc7Up6fIABN7gFF4UfVPteT7uZyHy?=
 =?us-ascii?q?Fe452goxaBKm2dZwRUE24JXlaICEzkPrmr/dPA6fSXBvKiL/vSZrWDsexeWOmJ?=
 =?us-ascii?q?xZKs0Ytm/iyANsaVPnllAP00xFBDXW1iG8nCnzUPSioXlz/CbsKBpRe8/DF3od?=
 =?us-ascii?q?678PjxRA3v4o6PAaNIMdpz4xC2nbuDN+mIiSljNDZXzYkMymHIybQF2F4Sijpj?=
 =?us-ascii?q?dz2sEbQGqC7MQ7jcmq5RDx4HdSxzMNFE4L473glIIcTbkM/61qZkjv4pDFdITU?=
 =?us-ascii?q?DhmsCsZcAQP26xLk/IBEaVO7SAPjDLx8D3YaWhSbxflulUthuwuSqFHE/nJDiM?=
 =?us-ascii?q?iz7pVxW3O+FWkC6bJABeuJ26cht1CWnsVtTmahi6MN9xlTI3wL00iWnMNW4TKj?=
 =?us-ascii?q?V8d0JNrruN7SJXmPl/GmpB7mZ7IumAgSqW8+7YKpNF+cdsV25Ynvxb7DwBjfNw?=
 =?us-ascii?q?7SVASeY/0H/ep8Bjpnmqm/eCzz5gXgYIrDtX0tGlp0JnbJ7Q89F4Q3HY5x8L7m?=
 =?us-ascii?q?LYXw8HotZjTMX1vLxLx97Mk4r3KTFL6dWS+tETUZuHYPmbOWYsZEK6UAXfCxEI?=
 =?us-ascii?q?GHvybTnS?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADN3htch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snmBGCIZdJgXMTAQEYEwGHLiI2Bw0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmkCJAsBDQEBLAsBBQkCUAMxAQUBIhMFgx2CAgQBnAc8iimBb?=
 =?us-ascii?q?DOCdgEBBYJDhF4IEodsgyWBHIIWgRGCZIsOj16RYQcCilaHAwwYgV+IGYdlilO?=
 =?us-ascii?q?PEwYCCQcPIYEsBYICTTBDgmyCGwkDF4hehUE+MoECAwEBIRONLAEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAADN3htch0O0hNFlHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?nmBGCIZdJgXMTAQEYEwGHLiI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mkCJAsBDQEBLAsBBQkCUAMxAQUBIhMFgx2CAgQBnAc8iimBbDOCdgEBBYJDhF4?=
 =?us-ascii?q?IEodsgyWBHIIWgRGCZIsOj16RYQcCilaHAwwYgV+IGYdlilOPEwYCCQcPIYEsB?=
 =?us-ascii?q?YICTTBDgmyCGwkDF4hehUE+MoECAwEBIRONLAEB?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="67752548"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 20 Dec 2018 10:29:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389147AbeLTS32 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 13:29:28 -0500
Received: from mail-lf1-f68.google.com ([209.85.167.68]:37299 "EHLO
        mail-lf1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2389111AbeLTS3Z (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 13:29:25 -0500
Received: by mail-lf1-f68.google.com with SMTP id y11so2105644lfj.4
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 10:29:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=A5oSEUX5NghaDjuKlQPFL03PIZwpGHlDsIssOQKwoKw=;
        b=cB6yWGl+9A2svMSCpy6fDEoVmhR557ria7RvDQLuskrCWzSTDUtzdhRNkzPb/gkHZy
         zUMhy12TCmTQTNT73Zc1wypZH31T0FVgR3CNjI6nOZgRb2E4M1b2IHY7DKSgceMWcB4p
         ouqGmSmbpHM+HEN6FkGYZgX/P5T1rXzN6LqFA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=A5oSEUX5NghaDjuKlQPFL03PIZwpGHlDsIssOQKwoKw=;
        b=swLnlLPt7qSR1ErleYLWfL6ICcEl+cMn9/LnSo4I/OFWzl0Uo0gfxh94nxSxQ94oyF
         LetoBKEXrUNTYFfklKQDB+akmP4PkjKZJwSbGmyZsPG1JthjXHla+qOzUAlT9j8rMu5z
         XZAAwIUCJSNlVXEOoOKBftEmgWppA3XUrLdA5ZHC1LGZaKzlRO6MtsblwNXuWYcgqduA
         VrzZFU5B+2CBzahRIpxTrh3h7DU/fc8W2i5wv5RlUfEY9YLvchcky/bNjLJozWeVG10h
         Db7snL9GXXHJcMoaxCzxDxJfe7bCJYTUZ6R5FBzauuKxi5ztqY0PZNymXhES3uND36BE
         H+Tw==
X-Gm-Message-State: AA+aEWblbVcrCD1F7uYWWcd5CY9+x3tYqkCUkpMhGv97k61HY6OhDzDk
        1e/87/pF9JA/UzKso5UMHVhzirA++1Lc3w==
X-Google-Smtp-Source: AFSGD/WW2BN5PJDOsGHW8e/LAO5/TOnO1px1VhCKTIRpnD/MN3aZFvRx6wofoczHqVxaYgSnxkd+hQ==
X-Received: by 2002:a19:3fcf:: with SMTP id m198mr15134088lfa.106.1545330561983;
        Thu, 20 Dec 2018 10:29:21 -0800 (PST)
Received: from localhost ([195.238.92.132])
        by smtp.gmail.com with ESMTPSA id y1-v6sm4179166ljh.39.2018.12.20.10.29.21
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 20 Dec 2018 10:29:21 -0800 (PST)
From: Sam Protsenko <semen.protsenko@linaro.org>
To: "David S. Miller" <davem@davemloft.net>
Cc: netdev@vger.kernel.org, linux-kernel@vger.kernel.org,
        Guillaume Nault <g.nault@alphalink.fr>
Subject: [PATCH v2] ppp: Move PFC decompression to PPP generic layer
Date: Thu, 20 Dec 2018 20:29:20 +0200
Message-Id: <20181220182920.4208-1-semen.protsenko@linaro.org>
X-Mailer: git-send-email 2.19.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Extract "Protocol" field decompression code from transport protocols to
PPP generic layer, where it actually belongs. As a consequence, this
patch fixes incorrect place of PFC decompression in L2TP driver (when
it's not PPPOX_BOUND) and also enables this decompression for other
protocols, like PPPoE.

Protocol field decompression also happens in PPP Multilink Protocol
code and in PPP compression protocols implementations (bsd, deflate,
mppe). It looks like there is no easy way to get rid of that, so it was
decided to leave it as is, but provide those cases with appropriate
comments instead.

Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
---
Changes in v2:
  - Fix the order of checking skb data room and proto decompression
  - Remove "inline" keyword from ppp_decompress_proto()
  - Don't split line before function name
  - Prefix ppp_decompress_proto() function with "__"
  - Add ppp_decompress_proto() function with skb data room checks
  - Add description for introduced functions
  - Fix comments (as per review on mailing list)

 drivers/net/ppp/ppp_async.c   | 14 ++++-----
 drivers/net/ppp/ppp_generic.c | 54 +++++++++++++++++++++++++++++++++--
 drivers/net/ppp/ppp_synctty.c |  9 +++---
 drivers/net/ppp/pptp.c        |  5 ----
 net/l2tp/l2tp_ppp.c           |  4 ---
 5 files changed, 62 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ppp/ppp_async.c b/drivers/net/ppp/ppp_async.c
index 288cf099876b..b287bb811875 100644
--- a/drivers/net/ppp/ppp_async.c
+++ b/drivers/net/ppp/ppp_async.c
@@ -770,7 +770,7 @@ process_input_packet(struct asyncppp *ap)
 {
 	struct sk_buff *skb;
 	unsigned char *p;
-	unsigned int len, fcs, proto;
+	unsigned int len, fcs;
 
 	skb = ap->rpkt;
 	if (ap->state & (SC_TOSS | SC_ESCAPE))
@@ -799,14 +799,14 @@ process_input_packet(struct asyncppp *ap)
 			goto err;
 		p = skb_pull(skb, 2);
 	}
-	proto = p[0];
-	if (proto & 1) {
-		/* protocol is compressed */
-		*(u8 *)skb_push(skb, 1) = 0;
-	} else {
+
+	/* If protocol field is not compressed, it can be LCP packet */
+	if (!(p[0] & 0x01)) {
+		unsigned int proto;
+
 		if (skb->len < 2)
 			goto err;
-		proto = (proto << 8) + p[1];
+		proto = (p[0] << 8) + p[1];
 		if (proto == PPP_LCP)
 			async_lcp_peek(ap, p, skb->len, 1);
 	}
diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
index 500bc0027c1b..c708400fff4a 100644
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -1965,6 +1965,46 @@ ppp_do_recv(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
 	ppp_recv_unlock(ppp);
 }
 
+/**
+ * __ppp_decompress_proto - Decompress protocol field, slim version.
+ * @skb: Socket buffer where protocol field should be decompressed. It must have
+ *	 at least 1 byte of head room and 1 byte of linear data. First byte of
+ *	 data must be a protocol field byte.
+ *
+ * Decompress protocol field in PPP header if it's compressed, e.g. when
+ * Protocol-Field-Compression (PFC) was negotiated. No checks w.r.t. skb data
+ * length are done in this function.
+ */
+static void __ppp_decompress_proto(struct sk_buff *skb)
+{
+	if (skb->data[0] & 0x01)
+		*(u8 *)skb_push(skb, 1) = 0x00;
+}
+
+/**
+ * ppp_decompress_proto - Check skb data room and decompress protocol field.
+ * @skb: Socket buffer where protocol field should be decompressed. First byte
+ *	 of data must be a protocol field byte.
+ *
+ * Decompress protocol field in PPP header if it's compressed, e.g. when
+ * Protocol-Field-Compression (PFC) was negotiated. This function also makes
+ * sure that skb data room is sufficient for Protocol field, before and after
+ * decompression.
+ *
+ * Return: true - decompressed successfully, false - not enough room in skb.
+ */
+static bool ppp_decompress_proto(struct sk_buff *skb)
+{
+	/* At least one byte should be present (if protocol is compressed) */
+	if (!pskb_may_pull(skb, 1))
+		return false;
+
+	__ppp_decompress_proto(skb);
+
+	/* Protocol field should occupy 2 bytes when not compressed */
+	return pskb_may_pull(skb, 2);
+}
+
 void
 ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
 {
@@ -1977,7 +2017,7 @@ ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
 	}
 
 	read_lock_bh(&pch->upl);
-	if (!pskb_may_pull(skb, 2)) {
+	if (!ppp_decompress_proto(skb)) {
 		kfree_skb(skb);
 		if (pch->ppp) {
 			++pch->ppp->dev->stats.rx_length_errors;
@@ -2074,6 +2114,9 @@ ppp_receive_nonmp_frame(struct ppp *ppp, struct sk_buff *skb)
 	if (ppp->flags & SC_MUST_COMP && ppp->rstate & SC_DC_FERROR)
 		goto err;
 
+	/* At this point the "Protocol" field MUST be decompressed, either in
+	 * ppp_input(), ppp_decompress_frame() or in ppp_receive_mp_frame().
+	 */
 	proto = PPP_PROTO(skb);
 	switch (proto) {
 	case PPP_VJC_COMP:
@@ -2245,6 +2288,9 @@ ppp_decompress_frame(struct ppp *ppp, struct sk_buff *skb)
 		skb_put(skb, len);
 		skb_pull(skb, 2);	/* pull off the A/C bytes */
 
+		/* Don't call __ppp_decompress_proto() here, but instead rely on
+		 * corresponding algo (mppe/bsd/deflate) to decompress it.
+		 */
 	} else {
 		/* Uncompressed frame - pass to decompressor so it
 		   can update its dictionary if necessary. */
@@ -2290,9 +2336,11 @@ ppp_receive_mp_frame(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
 
 	/*
 	 * Do protocol ID decompression on the first fragment of each packet.
+	 * We have to do that here, because ppp_receive_nonmp_frame() expects
+	 * decompressed protocol field.
 	 */
-	if ((PPP_MP_CB(skb)->BEbits & B) && (skb->data[0] & 1))
-		*(u8 *)skb_push(skb, 1) = 0;
+	if (PPP_MP_CB(skb)->BEbits & B)
+		__ppp_decompress_proto(skb);
 
 	/*
 	 * Expand sequence number to 32 bits, making it as close
diff --git a/drivers/net/ppp/ppp_synctty.c b/drivers/net/ppp/ppp_synctty.c
index 047f6c68a441..d02ba2494d93 100644
--- a/drivers/net/ppp/ppp_synctty.c
+++ b/drivers/net/ppp/ppp_synctty.c
@@ -709,11 +709,10 @@ ppp_sync_input(struct syncppp *ap, const unsigned char *buf,
 		p = skb_pull(skb, 2);
 	}
 
-	/* decompress protocol field if compressed */
-	if (p[0] & 1) {
-		/* protocol is compressed */
-		*(u8 *)skb_push(skb, 1) = 0;
-	} else if (skb->len < 2)
+	/* PPP packet length should be >= 2 bytes when protocol field is not
+	 * compressed.
+	 */
+	if (!(p[0] & 0x01) && skb->len < 2)
 		goto err;
 
 	/* queue the frame to be processed */
diff --git a/drivers/net/ppp/pptp.c b/drivers/net/ppp/pptp.c
index 67ffe74747a1..8f09edd811e9 100644
--- a/drivers/net/ppp/pptp.c
+++ b/drivers/net/ppp/pptp.c
@@ -325,11 +325,6 @@ static int pptp_rcv_core(struct sock *sk, struct sk_buff *skb)
 			skb_pull(skb, 2);
 		}
 
-		if ((*skb->data) & 1) {
-			/* protocol is compressed */
-			*(u8 *)skb_push(skb, 1) = 0;
-		}
-
 		skb->ip_summed = CHECKSUM_NONE;
 		skb_set_network_header(skb, skb->head-skb->data);
 		ppp_input(&po->chan, skb);
diff --git a/net/l2tp/l2tp_ppp.c b/net/l2tp/l2tp_ppp.c
index c03c6461f236..04d9946dcdba 100644
--- a/net/l2tp/l2tp_ppp.c
+++ b/net/l2tp/l2tp_ppp.c
@@ -236,10 +236,6 @@ static void pppol2tp_recv(struct l2tp_session *session, struct sk_buff *skb, int
 	    skb->data[1] == PPP_UI)
 		skb_pull(skb, 2);
 
-	/* Decompress protocol field if PFC is enabled */
-	if ((*skb->data) & 0x1)
-		*(u8 *)skb_push(skb, 1) = 0;
-
 	if (sk->sk_state & PPPOX_BOUND) {
 		struct pppox_sock *po;
 
-- 
2.19.2

