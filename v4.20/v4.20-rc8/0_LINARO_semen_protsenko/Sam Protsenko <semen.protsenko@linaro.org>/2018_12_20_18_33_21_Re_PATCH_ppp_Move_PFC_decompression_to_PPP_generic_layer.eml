Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:40:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B6F8458050C;
	Thu, 20 Dec 2018 10:33:51 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 10:33:51 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aicc2cRCSMmnQOIqW0P3CUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/ps6wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekcM+hGs4b9vEMOoBmlCAmwGO/i0CNEimPq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nasc/6NKIPWu6v1qnIyinDb+hI1jf764jIdQ0qrPaXXb1udMre108vGxndjlWK?=
 =?us-ascii?q?rozlIyiV2foLs2iY6OptTuavi28hqw5ruDivwd0gio7ThoIa013J8zhyzoUtJd?=
 =?us-ascii?q?CgVkJ3fdqpHIFNuyyUKYd6WN4uTmJ0tCogy7ALu4a3cDYWxJkj3RLSaPyKf5KV?=
 =?us-ascii?q?7h79V+udOzZ1iXBjdbminRi961Kgxff5VsSs0FZFsC5Fkt7Uu3AT2Bzc9NKHRu?=
 =?us-ascii?q?F+/ki/wzaP0R7c6uVeLUAzj6rbJIYtwr82lpUNrUTOBjH6lFnygaOMa0kp9Pak?=
 =?us-ascii?q?5/76brjlupOQLY55hwPmPqQrgMO/AOA4MgYUX2ic/OSxzLnj/Uz/QLVXgfw6i6?=
 =?us-ascii?q?rZv47AJcQduKG5BxZZ0oEt6ha5ETimys8VnWcILF1bYhKLlYvpNE/UIPD+E/i/?=
 =?us-ascii?q?h06gkDBxx/DJJrHhGInCLmDfkLf9erZw80pcyAswzd9B/Z5VBawBLen3Wk/wst?=
 =?us-ascii?q?zYExA4Pxa1w+bhFNVyyIceVXiTDa+eNaPYqUWI6f43I+mQeI8Vvy7wK/g/6P7v?=
 =?us-ascii?q?kX82g1gdcbOp3ZsKcn+4GPtmLl6dYXrthNcBDGgLshA/TOzslF2NTzpTa2yuUK?=
 =?us-ascii?q?I74zExEJimApvbRoCxnLyB2z+2EYdNZmBGDVCMEm3kd5+eVPcOcy+SJs5hkjoZ?=
 =?us-ascii?q?VbmuUYMh1BeutBPkxLpjNObb5ioYtZf73thv++LTjQ0y9SBzD8mF0GGCVWd0kn?=
 =?us-ascii?q?kMRz83xq9/p0N9x0yH0ah5hfxYCNNS6+lIUgc8KZ7T0eh6B8ruVQLGe9eDUEym?=
 =?us-ascii?q?Tcm+ATEtUtIxxMcDbFtnFNW8kB/PxSqqDKUTl7yQGpM09KXQ33zyJ8Z4z3bLz6?=
 =?us-ascii?q?0hj1ggQstSOmyqnK9/9w7PB4HXl0WVjbqldaMZ3CTV7meM0XKOvF1EUA53SajK?=
 =?us-ascii?q?QGoQZlXIotjj5kPNVbmuCa85PQtH0sOCLqpKatv0jVRJXvvjOdLeY36vlGe0Hx?=
 =?us-ascii?q?qH2rSMbI/ycWUHwCrdEFQEkxwU/XueKQg+ByKho2XCDDxuFVPjeV/s/fN5qHOh?=
 =?us-ascii?q?Sk80zgeKb0J62rqx+x4Vg+GcSvwJ0rIFvichtyt7HFKn093KDNqAohJrfL9Abt?=
 =?us-ascii?q?Ml/FdHyWXZuhRnMZykMa9jiUARcgRts0z1yhV4F59Pkc4prHMt0gp/MqaY0FJH?=
 =?us-ascii?q?dzOF0pH8ILzXKm/u/B+xb67awE3R0NGT+q0X8vQ3t03jvB21Fkol63hm08RV32?=
 =?us-ascii?q?GA6ZnQDQsSUYj+UkA49xVho7HaYy89557b1HF2MKm0tCPC1MwtBOc/1hmgeNJf?=
 =?us-ascii?q?OrueFADuC80aG9SuKOsyllizbxILIPpd9LQpMMOhbfeG3rCkPPxhnD6/kWtI+o?=
 =?us-ascii?q?R93V+S+CpmTe7I2Y0Iw/WZ3guBSjf9g02tssHxmYBYez4SGnCzxjTjBI5Ufqdy?=
 =?us-ascii?q?Z5oECX+yI82rwdVzn57sW39C+F+jHV8Gw9KpeRyJYlz53A1Q01kXoHO9lSu5yT?=
 =?us-ascii?q?x0jy8mrq6F0CPSxOTicQINOnRXS2l6kVfsPY+0gsgYXEeydQgplxil5UHgy6hA?=
 =?us-ascii?q?vqt/LGrTQUZOfyfoKWFvSa+wtruEY85S55IkqyRXUOKgYV+ETr7xuQcV0yTmH2?=
 =?us-ascii?q?FG3jA0aymquonlnxx9kG+cLGx8rH3DdcFyxBff4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR6/kOqymtH9EQg6zDX019?=
 =?us-ascii?q?9lVSjTqBb8Y4/r17m1MO59f0loAkP85NR+Go1kjoQwg5QQ02AAhpqJ5XoHjXvz?=
 =?us-ascii?q?MdJD1KL7bXoNRiQEz8Tb4Qf7w01jMmyGx5jiWXqD2MthaMK3YmcX2iI78sBLB7?=
 =?us-ascii?q?2Y7L1CnStpvFW4qRjdbuR6njcY0fEu8mIVg/kVuAoxySWQGqwSHU5dPSD2lhWH?=
 =?us-ascii?q?9da+rLhMZGa0cLi9z05+ndGnDLGfrQBQQnf5epE+HSBu6sVzKk7D0Hr26ov8Yt?=
 =?us-ascii?q?nfccoTtgGIkxfHl+VaM4g+lv0OhSp6I279uWAlxvU/jRxv25G6oYeGJ39s/KK/?=
 =?us-ascii?q?Hh5XKDn1a9kP9THqiKZUhtyW0Jy3HpV9BjULW4PlTfCyHzIXq/vnLByCECEmpn?=
 =?us-ascii?q?eYBLrfHhKf6EF8oHLUCJ2rM3CXJH8EzdRtXhWdJUpfgBwKUzU+hJI2CgeqxMn5?=
 =?us-ascii?q?ekdj+j8R/kL4qgdLyu9wNxj/VXrfpB61ajguTpiTNgFW7gZE50faKsGe6uNzHy?=
 =?us-ascii?q?dF/pyutgCNK2qbZxhWAmENQECLG1fjPry279na7+eYHva+L+fJYbiWqexRSfaI?=
 =?us-ascii?q?xZGs0otn5TqMNd+PPn5tD/IlwEpDQGt5Ft/dmzUOTSwXii3MY9SapBe65i14sM?=
 =?us-ascii?q?S//O73VwLo4IuFE6FSPsl3+xCqnaeDMPadizxkKTlDzJMD23/JxKIb3F4TkCxu?=
 =?us-ascii?q?czitEbIdtS/CVq7Qm6lXDwIFZCN3LsdH86U83gxVM87Bltz1zqJ4juIyC1pdSV?=
 =?us-ascii?q?zhm8SpadYWLG2nKFzHBFiENLKdKD3PwsH3Z768SLJKgOVVsR2wpSiUE0v5Mjuf?=
 =?us-ascii?q?kDnpUgilMftQgyGDIBxepIa9fw5tCGf5StLmbxy7MNlvgjw3wb07nHXKNWEHPD?=
 =?us-ascii?q?h4ckNNqKCQ7CxCjvV+HWxB8mRqLe2elymF6OnYL8Vejfw+LTl1k+ZT/XE3g51c?=
 =?us-ascii?q?8SVYDKh63i3bs9pyi1iiiumGzjthU1xAsGAYqpiMuBBZMKCRzoNHRW3J+hEKpT?=
 =?us-ascii?q?GLBhEHoZ19ENrzoK1Wyd/nkKP1IS1FtdXO8p1PVIDvNMubPS95YlLSEznOAV5A?=
 =?us-ascii?q?FGbzOA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AMAQDu3xtch0O0hNFlHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ4N9lBSCDRSZPC0TAYQ8AoJwIjgSAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAQIDAQIgBBkBATcBBQkBAQoLAwoCAiYCAgMfEgEFARwGEwWDHYICB?=
 =?us-ascii?q?ZwKPIopcHwzgnYBAQWHIQgSeYs0ghaBEYJkLogJgleJSYYVkWEHApFlGIFfhR+?=
 =?us-ascii?q?DMYcumX4wgTyBd00wdAaCNYIbDBeIXoVBPTOBBQEBjWABAQ?=
X-IPAS-Result: =?us-ascii?q?A0AMAQDu3xtch0O0hNFlHAEBAQQBAQcEAQGBZYNsJ4N9lBS?=
 =?us-ascii?q?CDRSZPC0TAYQ8AoJwIjgSAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDA?=
 =?us-ascii?q?QIgBBkBATcBBQkBAQoLAwoCAiYCAgMfEgEFARwGEwWDHYICBZwKPIopcHwzgnY?=
 =?us-ascii?q?BAQWHIQgSeYs0ghaBEYJkLogJgleJSYYVkWEHApFlGIFfhR+DMYcumX4wgTyBd?=
 =?us-ascii?q?00wdAaCNYIbDBeIXoVBPTOBBQEBjWABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="67753539"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 20 Dec 2018 10:33:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2389149AbeLTSdf (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 13:33:35 -0500
Received: from mail-wm1-f67.google.com ([209.85.128.67]:37827 "EHLO
        mail-wm1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730426AbeLTSde (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 13:33:34 -0500
Received: by mail-wm1-f67.google.com with SMTP id g67so3310199wmd.2
        for <linux-kernel@vger.kernel.org>; Thu, 20 Dec 2018 10:33:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=SRKVRh4UbiqXePe+HnBwTMzrBMk8SH+LqmumIiSTs/Q=;
        b=DpVgCdp/+ob6lrRWpEcWp7ortuR6XnUa+FKuJXE25+r15tploMm9Ac9RETCw0fsI51
         40G0a7Ba9VhjtuDsVmThNyjcSMbeNVn+zb+OlPyNoSp/YUw8eQK0ZaHLtRmzgfszkMJM
         36W1wDblYP65mllw2Jb9Xl4ejkaTDzo6ExPZw=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=SRKVRh4UbiqXePe+HnBwTMzrBMk8SH+LqmumIiSTs/Q=;
        b=BevDjlPL1MaFOFWC+AEoz/dzjOo4mz0wiVoSK8E8Rpf9RyfpeiOZqHw7hOiBvVeKca
         Nn8T/XdnoTpkcRir+hTdMumrjx2V2qj4ZBp4Kwmo8Eoi2JCQZxZGpqutC7pQdydeddbG
         nSyB+fy1qlkD/3Yeq0MxpQHz6AAc8S26amHnTe+2bNGScG8YOUP2FNJMXUPEmw5RypY9
         aPsArFn9A7RynlbsvXKFAsumGVoqiSB17y9WSHgVuwcghw/AE8iAVFu3GpgBG0+gAIV3
         cDtU2UBLfpyBF3slIR+T946bv7IlOgq5UJ4YAATsMKf8HNoJJ0YBtWSLzmfHC2mii9W0
         yCeg==
X-Gm-Message-State: AA+aEWaLmk8l6/BX69wEOrdn+VAoWogQ93Hc9L1U4jGzo8r1J+Cd1J6O
        og1ussxweW1o8gyfVJor36fvoosVDeC6cSX0eup7Kjm+/eesFA==
X-Google-Smtp-Source: AFSGD/XLMv5AifI4PQDjeGCQRykFEDdrg+bwUtyKiW/M4O12wx4+8u2/FCnDVOmdzpD2mxfgP+/sRS3Da+Cmfsuuo0k=
X-Received: by 2002:a1c:d14d:: with SMTP id i74mr5925369wmg.100.1545330812697;
 Thu, 20 Dec 2018 10:33:32 -0800 (PST)
MIME-Version: 1.0
References: <20181219000808.28382-1-semen.protsenko@linaro.org> <20181219143841.GC1338@alphalink.fr>
In-Reply-To: <20181219143841.GC1338@alphalink.fr>
From: Sam Protsenko <semen.protsenko@linaro.org>
Date: Thu, 20 Dec 2018 20:33:21 +0200
Message-ID: <CAKaJLVvSZkdGG5Q2c25eyMBDZpLhEER57O_9U-LRSJ4GB9N7GQ@mail.gmail.com>
Subject: Re: [PATCH] ppp: Move PFC decompression to PPP generic layer
To: Guillaume Nault <g.nault@alphalink.fr>
Cc: "David S. Miller" <davem@davemloft.net>, netdev@vger.kernel.org,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Guillaume,

On Wed, Dec 19, 2018 at 4:38 PM Guillaume Nault <g.nault@alphalink.fr> wrote:
>
> On Wed, Dec 19, 2018 at 02:08:08AM +0200, Sam Protsenko wrote:
> > Extract "Protocol" field decompression code from transport protocols to
> > PPP generic layer, where it actually belongs. As a consequence, this
> > patch fixes incorrect place of PFC decompression in L2TP driver (when
> > it's not PPPOX_BOUND) and also enables this decompression for other
> > protocols, like PPPoE.
> >
> > Protocol field decompression also happens in PPP Multilink Protocol
> > code and in PPP compression protocols implementations (bsd, deflate,
> > mppe). It looks like there is no easy way to get rid of that, so it was
> > decided to leave it as is, but provide those cases with appropriate
> > comments instead.
> >
> Yes, ideally we'd make PPP_PROTO() handle compressed protocol so that
> we wouldn't need to decompress protocol field in place. But other parts
> of the ppp code assume uncompressed protocol field in skb->data, so
> let's stick with the current behaviour for now.
>
> > diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
> > index 500bc0027c1b..10c4c8eec995 100644
> > --- a/drivers/net/ppp/ppp_generic.c
> > +++ b/drivers/net/ppp/ppp_generic.c
> > @@ -1965,6 +1965,14 @@ ppp_do_recv(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
> >       ppp_recv_unlock(ppp);
> >  }
> >
> > +/* Decompress protocol field in PPP header if it's compressed */
> > +static inline void
> > +ppp_decompress_proto(struct sk_buff *skb)
> >
> No need for inline keyword in .c files. Also, no need to split line
> before function name. I know older function declarations of
> ppp_generic.c do this, but let's stick to the general networking stack
> style instead.
>
> > +{
> > +     if (skb->data[0] & 0x01)
> > +             *(u8 *)skb_push(skb, 1) = 0x00;
> > +}
> > +
> This assumes that we have at least 1 byte of head room and 1 byte of
> linear data. Although that's what the original code did, I find that's
> a bit dangerous. Maybe prefix the function name with '__' and add a
> comment in the function description to warn the reader.
>
> >  void
> >  ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
> >  {
> > @@ -1986,6 +1994,7 @@ ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
> >               goto done;
> >       }
> >
> > +     ppp_decompress_proto(skb);
> >
> The pskb_may_pull(skb, 2) at the beginning of the functions is there
> because we're going to read the protocol field. It doesn't make sense to
> decompress it after this test (although technically that mostly works).
>
> However, if we move ppp_decompress_proto() before pskb_may_pull(), then
> callers must respect the requirements of ppp_decompress_proto().
>
> >       proto = PPP_PROTO(skb);
> >       if (!pch->ppp || proto >= 0xc000 || proto == PPP_CCPFRAG) {
> >               /* put it on the channel queue */
> > @@ -2074,6 +2083,9 @@ ppp_receive_nonmp_frame(struct ppp *ppp, struct sk_buff *skb)
> >       if (ppp->flags & SC_MUST_COMP && ppp->rstate & SC_DC_FERROR)
> >               goto err;
> >
> > +     /* At this point the "Protocol" field MUST be decompressed, either in
> > +      * ppp_decompress_frame() or in ppp_receive_mp_frame().
> > +      */
> >
> Or ppp_input(). In the general case (no multilink header and no compression)
> it's ppp_input() that'd decompress the protocol field.
>
> > @@ -2290,9 +2305,11 @@ ppp_receive_mp_frame(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
> >
> >       /*
> >        * Do protocol ID decompression on the first fragment of each packet.
> > +      * We can't wait for this to happen in ppp_input(), because
> > +      * ppp_receive_nonmp_frame() expects decompressed protocol field.
> >        */
> ppp_input() is not going to be called anyway. I think you can omit the
> middle line entirely.

Thanks for the detailed review! All your points are well taken.
Already sent fixed v2, please review.
