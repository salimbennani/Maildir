Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:46:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4BAE35805CF;
	Tue, 18 Dec 2018 16:08:21 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga004-1.jf.intel.com with ESMTP; 18 Dec 2018 16:08:21 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ao8ZMUBzsjafmjn3XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4RI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIQAAeUaPeZArYTwvEcCoBikCAWwHu7j1iNEi3nr1qM6yeQhFgTG0RQ9Ed0UtX?=
 =?us-ascii?q?Tfsc/7NL0VUeCp16nH0zPDb/BR2Tzg74XIaQ4uofSSUrJ2a8bR0VMvFwTZjlWL?=
 =?us-ascii?q?t4PlOTCV1uMWvmif7upgU/igi3Qgqw1rpTiv3Mgsh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C8UkJ3fNCpHIVKuy2HNIZ6XtkuTmBqtSoi17ELvZ62cDIUxJkpxBPTcfiKf5aS?=
 =?us-ascii?q?7h7+WuudPzF1j29/dr2lnRa9602gx/X8Vsaq1FZKqTJIksfDtn8TzRzf8MuHRe?=
 =?us-ascii?q?Vn/kenxzmP0xrf6uZeIUA7jabbKpghzaAslpcLr0jPAiv7lF/rgKKYaEko4PWk?=
 =?us-ascii?q?5uf7brn8p5KRNZd4igTkPaQvnsy/D/44Mg8LX2WD/eS81bvj/VD2QblTjf05jL?=
 =?us-ascii?q?PZsJbEKsQfv6K5BAFU0oA95BalFDqmztsYkmcdLF5fexKIkZLpO1fQL/D8F/u/?=
 =?us-ascii?q?hE6skDhzy/DcIrLhGonNLmTEkLr5ebZ96k1cxxQpwdFQ+pJZEbUBIPP1Wk/su9?=
 =?us-ascii?q?3UFB45Mwqow+n5DNVxzJ8RWWWKAqWBKqPdrUeI5v4zI+mLfIIVuCzyK/k55/H0?=
 =?us-ascii?q?in81g18dfbSz0psRZ3C1BfBmI0SfYXrxjdYNC2YKvgwiTOP0jF2OSyJcZ3G3X6?=
 =?us-ascii?q?gk/DE0FJqmDZvfRoCqmLGB3iC7EYNMamBFDVCMF3Hod4KfVvcIaSKSJNJhkzMe?=
 =?us-ascii?q?WbigTY8hyQ+htAvgx7V7KerU/zUStYj/29ht++3TiRYy+CRuAMSG02GNSGJ0kn?=
 =?us-ascii?q?kSRzAs3qByukh9ylaF0ahljP1UD91T5/VVUggkMZ7Q1fB1C9f3WgjZZNeGVE6m?=
 =?us-ascii?q?Qsm6ATE2Vt8xwMUBY0BnF9WmjxDMxSyqA7AOmryPBZw09L/c3nfrK8Z8zXbGyL?=
 =?us-ascii?q?cuj108TsRTMm2mg7Z19xLPCI7Rj0WZi6GqeLwB0yHX6meM03CCvEFCXw52SqXK?=
 =?us-ascii?q?Q3YfakzSrdT640PCS6SjCbAmMgtH1M6DJbFGatzvjVVaWvjjPM7SbH62m2e1HR?=
 =?us-ascii?q?yI3K+DbJL2e2UB2yXQEFULnBoN/XmYLwQ+Bj2uo2TFDDNwE1LieEfs8eh4qHOm?=
 =?us-ascii?q?QU441QCKb0t917Wr/h4Zn+CTS/QW3rgcoicuty10HEqh39LRE9eAuwthfKBbYd?=
 =?us-ascii?q?Mh4FdG1XjVtxBnMpynNaBigl8ecwJ4v0710xV3C4NAkdUlrX8wzQpyL76Y301F?=
 =?us-ascii?q?dz+CwZ/wPbjXIHHo/B+zc67Wxk3e0NGO96gV7PQ3tVrisx+pF0Y46HpnzsRa3G?=
 =?us-ascii?q?Ga5pXJCwoST4n8UkI29xh8urHbbTMx54LS1X1wL6a0tiXO1M4uBOsg0hygZctQ?=
 =?us-ascii?q?MLuYFA/uFM0XH8ivKPEwl1e1dB4FPeBS+7QyP8OpbPaG3K+rPOB9nDOpl2hH4Y?=
 =?us-ascii?q?Z90l6S+Cp4UOLHw5EFw/SA1AudSzj8lEuhstzwmY1cfzESH3awxjL+BIFMYa1+?=
 =?us-ascii?q?Z4ALBnm0I82239lxm4TiW3pF+1G9HVMG38mpdAGWb1z82w1QyEsWrWammSu+0z?=
 =?us-ascii?q?x7jTUporCD0yzJxuTobAAHNXJTRGl+kVfsJpC5jtAbXESybwkljgCl5Vv8x6VA?=
 =?us-ascii?q?oKR/Lm/TQVpHfiTsLmFiVLewuaSGY8JV9JwotiBXWvymYV+GUr79vwca0yT7Em?=
 =?us-ascii?q?tc3j87bTKqupb+nxBgk2KSNnVzrHnYecF22xjf4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR2+kOq0mtH9Ewg60Cn72s?=
 =?us-ascii?q?JuVSXJqhb8f4bq2767MeJhYklnGlv859BmFYF5l4s6nIsQ1mQChpWJ4XoHln/+?=
 =?us-ascii?q?MdZB1qL/dnYNRSMLzMTT4Ajqw0BjKnOJx4TkVnSS2MdhZt+6Yn8I1SI59cxFFK?=
 =?us-ascii?q?CU7LlclytvvlW4tR7RYeR6njoFzPsu6X0ajPsTtAsj0CqdGawSEldCPSP3iRuI?=
 =?us-ascii?q?9d++ob5TZGaud7iwyUV/kcqgDLGEvgFTRnL5do0+Ei9368V1KEjM32Hr6oH4ZN?=
 =?us-ascii?q?nQasoetgGTkxfFleRUKYg+lvwXhSp8ImL9vGYoy+o6jRxowJG7s5KLK2Rr/KKl?=
 =?us-ascii?q?HBFYMif5aN8U+jHolaxehNqZ35izHpV9HTUGRIDnQuivEDIWqPTrLQKOECAnp3?=
 =?us-ascii?q?efGLrfGxKf6Uh8o3LOFZCrK2+YJH0Dwdp+QxmdIVRVgBoIUzUigp45CgeqydTj?=
 =?us-ascii?q?cEhj4zAe+EX4pgFQyu5yNBn/T2TfpBquajguU5iSNx5W7gBE50fIPs2S9ONzHy?=
 =?us-ascii?q?dE/pK/qAyBMHCUZwNNDWsRQEyLG0jjPqWy5dnH6+WZBu2+L+bXYbWTs+NeUe2E?=
 =?us-ascii?q?xYmo0otg8DaBLcGPPnhkD/0m1UtPR3F5G8LFmzoRTywbjT7Cb8mepB2k4C14st?=
 =?us-ascii?q?i/8Oj3WALo/YaPC6VdMdRs+xC1gKePLe2QhDx+KTZXyJwM32LIyKME0V4WiiFu?=
 =?us-ascii?q?cSStELsauS7MSqLQhrFYDxoBZyxvM8tI6ro23hNRNs7DltP1yrl4g+YvBFdYTl?=
 =?us-ascii?q?PhgN+mZMwQL2G5NVPKH0KLNLWAJT3WzMD7e6K8SbtMjOpKsx28oyqUE0jmPj6b?=
 =?us-ascii?q?jTnmSwivMf1QjCGcJBFepIC9chN3BWf/Vt7pdh27P8FxjTAtxb00h3XKNXMTMD?=
 =?us-ascii?q?RmckNNqKGQ4j1cgvllB2NB6X9lJ/GemymF9+nYNooWsfxzDyV0je1a5nE6y7pT?=
 =?us-ascii?q?7C5cRf11mDHdrthho1y9lumPyzxnUAdBqzpRhYKLu1liNrvd9pVaRXnE+xcNvi?=
 =?us-ascii?q?2sDEFAi9J7C9GngOYY79nLkK/pYn8W/9vK8M40C8HKJceDN3Q9dxzkBGiHIhEC?=
 =?us-ascii?q?SGuQPGSXv1ZajOqf8H6S5swhp53hntwWULhHT1EzFfQyDkVjFcYFZpBtUWV3wv?=
 =?us-ascii?q?agkMcU6C/m/1HqT8JAs8WCD6rKDA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAADIixlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGDayeYEoIhmTkTAQEYEwGHHSI3Bg0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgpIwyCNiQBgmkCJAsBDQEBNwEFCQI/EQMxAQUBIhMFgx2CAQQBm?=
 =?us-ascii?q?ys8iimBbDOCdgEBBYJDhGcIEodsgyWBHIIWgRGCZIsOoSYHApFUDBiBXYgZh2A?=
 =?us-ascii?q?BikmPAwYCCQcPIYE7gXhNMIMvghsJAxeIXoVBPjKBAgMBASETjSwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AHAADIixlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGDayeYEoIhmTkTAQEYEwGHHSI3Bg0BAwEBAQEBAQIBEwEBAQoLCQgpI?=
 =?us-ascii?q?wyCNiQBgmkCJAsBDQEBNwEFCQI/EQMxAQUBIhMFgx2CAQQBmys8iimBbDOCdgE?=
 =?us-ascii?q?BBYJDhGcIEodsgyWBHIIWgRGCZIsOoSYHApFUDBiBXYgZh2ABikmPAwYCCQcPI?=
 =?us-ascii?q?YE7gXhNMIMvghsJAxeIXoVBPjKBAgMBASETjSwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="44588112"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 16:08:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727329AbeLSAIN (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 19:08:13 -0500
Received: from mail-lf1-f68.google.com ([209.85.167.68]:39335 "EHLO
        mail-lf1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726985AbeLSAIN (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 19:08:13 -0500
Received: by mail-lf1-f68.google.com with SMTP id n18so13651673lfh.6
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 16:08:11 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=U6wuPDLanBwdg8xKHlWrvMBE4Wc9wk99yWHT28tnYjQ=;
        b=dafpww5CcFRjb80mQI3zw68kp5fn3DblCrO7dqyV+s5BjScEE4WUP086GJe6skAFPQ
         vuHzhLSXAe9Ee3ZFuriU27kZZGiTnxPM5F/l+RTOXbT8k3Wpm2SlcaKvjO0u2XD6JaLh
         gkkBQcvrw49YxXuolCCFutJ2bFZiDfn2tEnog=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=U6wuPDLanBwdg8xKHlWrvMBE4Wc9wk99yWHT28tnYjQ=;
        b=BxEhDEpO8iNtdILrQpW5UXJNpyS+yB0/4Lu7w3afCP9KFYRIPyDfWQtc+0D9HsnbJj
         JtAazEnu2hHO+qC9fmwr7kyvfikNfb4nWSsrlLV7VPWAlR7wpYSyX7NkvVHLnpzW4Tc7
         Z4Ni+BUp6496nT7mbFXivmX2ZRAOEWhDpB3YHAaluhT0Px4QoO1cO/zbATkH+iUT6XKC
         k1ny7yA3+UkM+RtYgokJ81TLCO0dnDDWF7FYZHnlRVEgpIix8Qa+t49Kn04GYNKQvmw/
         orTXCqESka7bD90QvRfMPDojtRIvMI/2QGwB8vr8BFhFmUUkCDiLH9qbrw/MULt6wpJ6
         rvWw==
X-Gm-Message-State: AA+aEWZRXZFWod7O2YsVBM2jTtg5WwpvoW+llgX9n99Z2I2jBoHGcsdz
        +bI6d4yz0vkAJjI+biG8izAjXXt1WsFakQ==
X-Google-Smtp-Source: AFSGD/XNMx57Je5CdddL/zwfFb1xzScW4FVZ06dQTE46aRVmNcnHJH0hwUQDejo7d+rKm2k+0tO3Ug==
X-Received: by 2002:a19:5059:: with SMTP id z25mr10915511lfj.120.1545178090158;
        Tue, 18 Dec 2018 16:08:10 -0800 (PST)
Received: from localhost ([195.238.92.132])
        by smtp.gmail.com with ESMTPSA id z6sm3433127lfa.87.2018.12.18.16.08.09
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 18 Dec 2018 16:08:09 -0800 (PST)
From: Sam Protsenko <semen.protsenko@linaro.org>
To: "David S. Miller" <davem@davemloft.net>
Cc: netdev@vger.kernel.org, linux-kernel@vger.kernel.org,
        Guillaume Nault <g.nault@alphalink.fr>
Subject: [PATCH] ppp: Move PFC decompression to PPP generic layer
Date: Wed, 19 Dec 2018 02:08:08 +0200
Message-Id: <20181219000808.28382-1-semen.protsenko@linaro.org>
X-Mailer: git-send-email 2.19.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Extract "Protocol" field decompression code from transport protocols to
PPP generic layer, where it actually belongs. As a consequence, this
patch fixes incorrect place of PFC decompression in L2TP driver (when
it's not PPPOX_BOUND) and also enables this decompression for other
protocols, like PPPoE.

Protocol field decompression also happens in PPP Multilink Protocol
code and in PPP compression protocols implementations (bsd, deflate,
mppe). It looks like there is no easy way to get rid of that, so it was
decided to leave it as is, but provide those cases with appropriate
comments instead.

Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
---
 drivers/net/ppp/ppp_async.c   | 14 +++++++-------
 drivers/net/ppp/ppp_generic.c | 21 +++++++++++++++++++--
 drivers/net/ppp/ppp_synctty.c |  9 ++++-----
 drivers/net/ppp/pptp.c        |  5 -----
 net/l2tp/l2tp_ppp.c           |  4 ----
 5 files changed, 30 insertions(+), 23 deletions(-)

diff --git a/drivers/net/ppp/ppp_async.c b/drivers/net/ppp/ppp_async.c
index 288cf099876b..b287bb811875 100644
--- a/drivers/net/ppp/ppp_async.c
+++ b/drivers/net/ppp/ppp_async.c
@@ -770,7 +770,7 @@ process_input_packet(struct asyncppp *ap)
 {
 	struct sk_buff *skb;
 	unsigned char *p;
-	unsigned int len, fcs, proto;
+	unsigned int len, fcs;
 
 	skb = ap->rpkt;
 	if (ap->state & (SC_TOSS | SC_ESCAPE))
@@ -799,14 +799,14 @@ process_input_packet(struct asyncppp *ap)
 			goto err;
 		p = skb_pull(skb, 2);
 	}
-	proto = p[0];
-	if (proto & 1) {
-		/* protocol is compressed */
-		*(u8 *)skb_push(skb, 1) = 0;
-	} else {
+
+	/* If protocol field is not compressed, it can be LCP packet */
+	if (!(p[0] & 0x01)) {
+		unsigned int proto;
+
 		if (skb->len < 2)
 			goto err;
-		proto = (proto << 8) + p[1];
+		proto = (p[0] << 8) + p[1];
 		if (proto == PPP_LCP)
 			async_lcp_peek(ap, p, skb->len, 1);
 	}
diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
index 500bc0027c1b..10c4c8eec995 100644
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -1965,6 +1965,14 @@ ppp_do_recv(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
 	ppp_recv_unlock(ppp);
 }
 
+/* Decompress protocol field in PPP header if it's compressed */
+static inline void
+ppp_decompress_proto(struct sk_buff *skb)
+{
+	if (skb->data[0] & 0x01)
+		*(u8 *)skb_push(skb, 1) = 0x00;
+}
+
 void
 ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
 {
@@ -1986,6 +1994,7 @@ ppp_input(struct ppp_channel *chan, struct sk_buff *skb)
 		goto done;
 	}
 
+	ppp_decompress_proto(skb);
 	proto = PPP_PROTO(skb);
 	if (!pch->ppp || proto >= 0xc000 || proto == PPP_CCPFRAG) {
 		/* put it on the channel queue */
@@ -2074,6 +2083,9 @@ ppp_receive_nonmp_frame(struct ppp *ppp, struct sk_buff *skb)
 	if (ppp->flags & SC_MUST_COMP && ppp->rstate & SC_DC_FERROR)
 		goto err;
 
+	/* At this point the "Protocol" field MUST be decompressed, either in
+	 * ppp_decompress_frame() or in ppp_receive_mp_frame().
+	 */
 	proto = PPP_PROTO(skb);
 	switch (proto) {
 	case PPP_VJC_COMP:
@@ -2245,6 +2257,9 @@ ppp_decompress_frame(struct ppp *ppp, struct sk_buff *skb)
 		skb_put(skb, len);
 		skb_pull(skb, 2);	/* pull off the A/C bytes */
 
+		/* Don't call ppp_decompress_proto() here, but rather rely on
+		 * corresponding algo (mppe/bsd/deflate) to decompress it.
+		 */
 	} else {
 		/* Uncompressed frame - pass to decompressor so it
 		   can update its dictionary if necessary. */
@@ -2290,9 +2305,11 @@ ppp_receive_mp_frame(struct ppp *ppp, struct sk_buff *skb, struct channel *pch)
 
 	/*
 	 * Do protocol ID decompression on the first fragment of each packet.
+	 * We can't wait for this to happen in ppp_input(), because
+	 * ppp_receive_nonmp_frame() expects decompressed protocol field.
 	 */
-	if ((PPP_MP_CB(skb)->BEbits & B) && (skb->data[0] & 1))
-		*(u8 *)skb_push(skb, 1) = 0;
+	if (PPP_MP_CB(skb)->BEbits & B)
+		ppp_decompress_proto(skb);
 
 	/*
 	 * Expand sequence number to 32 bits, making it as close
diff --git a/drivers/net/ppp/ppp_synctty.c b/drivers/net/ppp/ppp_synctty.c
index 047f6c68a441..d02ba2494d93 100644
--- a/drivers/net/ppp/ppp_synctty.c
+++ b/drivers/net/ppp/ppp_synctty.c
@@ -709,11 +709,10 @@ ppp_sync_input(struct syncppp *ap, const unsigned char *buf,
 		p = skb_pull(skb, 2);
 	}
 
-	/* decompress protocol field if compressed */
-	if (p[0] & 1) {
-		/* protocol is compressed */
-		*(u8 *)skb_push(skb, 1) = 0;
-	} else if (skb->len < 2)
+	/* PPP packet length should be >= 2 bytes when protocol field is not
+	 * compressed.
+	 */
+	if (!(p[0] & 0x01) && skb->len < 2)
 		goto err;
 
 	/* queue the frame to be processed */
diff --git a/drivers/net/ppp/pptp.c b/drivers/net/ppp/pptp.c
index 67ffe74747a1..8f09edd811e9 100644
--- a/drivers/net/ppp/pptp.c
+++ b/drivers/net/ppp/pptp.c
@@ -325,11 +325,6 @@ static int pptp_rcv_core(struct sock *sk, struct sk_buff *skb)
 			skb_pull(skb, 2);
 		}
 
-		if ((*skb->data) & 1) {
-			/* protocol is compressed */
-			*(u8 *)skb_push(skb, 1) = 0;
-		}
-
 		skb->ip_summed = CHECKSUM_NONE;
 		skb_set_network_header(skb, skb->head-skb->data);
 		ppp_input(&po->chan, skb);
diff --git a/net/l2tp/l2tp_ppp.c b/net/l2tp/l2tp_ppp.c
index c03c6461f236..04d9946dcdba 100644
--- a/net/l2tp/l2tp_ppp.c
+++ b/net/l2tp/l2tp_ppp.c
@@ -236,10 +236,6 @@ static void pppol2tp_recv(struct l2tp_session *session, struct sk_buff *skb, int
 	    skb->data[1] == PPP_UI)
 		skb_pull(skb, 2);
 
-	/* Decompress protocol field if PFC is enabled */
-	if ((*skb->data) & 0x1)
-		*(u8 *)skb_push(skb, 1) = 0;
-
 	if (sk->sk_state & PPPOX_BOUND) {
 		struct pppox_sock *po;
 
-- 
2.19.2

