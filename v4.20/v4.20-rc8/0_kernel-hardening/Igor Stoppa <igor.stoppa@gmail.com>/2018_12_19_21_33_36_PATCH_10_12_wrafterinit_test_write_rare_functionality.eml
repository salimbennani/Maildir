Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:43:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E7EB8580522;
	Wed, 19 Dec 2018 13:34:33 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 13:34:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AYoc9KhSIsnGi0ZEahGCnREcZGtpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YhCCt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfrYb9qUEOohSxCwm3HOPiyCRFimP10KAgz+gsCx3K0BAmEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO62w6nIyi/DZO5L1zfh74jIagghruuRVr93cMrRxk4vFxnfglWL?=
 =?us-ascii?q?tYzlOCuV1vwXvGWA4OpgUPigi28jqw1rvjevwcIsh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C8UkJ3fNCpHIVKuy2HNIZ6XtkuTmBqtSoi1LEKpYK3cDUPxZg6yBPQcOeIfo2I?=
 =?us-ascii?q?7x7+UeueOzh1i25mdb+6hxu97Vasx+L5W8Wq31tFsyhIn9zQuX8X1xHT5M2KRe?=
 =?us-ascii?q?V/80i8xzqC0R3Y5PteLkAuj6XbLoYswr4umZoXtkTOBjH2mErog6+MbEkk+fan?=
 =?us-ascii?q?6/7hYrr4op+QLYh0ihvxMqg2m8y/B/o3MhQWUmSF5eix0Kfv8VD3TblUlPE6j6?=
 =?us-ascii?q?rUvIzAKckapKO1GwpV3Zwi6xa7ATemytMYnXwfIVJBeRKHiZXpOl7XLPD7E/i/?=
 =?us-ascii?q?mVKsnylvx/zfOb3gDJPNIWbZkLr6Y7Z95FBTyBApwdBc+Z1UELcBL+z3WkPrs9?=
 =?us-ascii?q?zYFBA5PxSuw+n7ENV9yp8eWWWXD6+dMaPSskGH6vggIumRf4IVvDf9K/445//h?=
 =?us-ascii?q?l3M5mFkdfbW30psTcny3AvNmI0CBa3r2ntgBCXsKvhY5TOHyiF2NSz9TZ2qoUK?=
 =?us-ascii?q?I7/D07CJ+mAp3FRoCim7GB2Ca7HptLZmFJEFyMEHHod5maVPcIci6dPshhkjkc?=
 =?us-ascii?q?X7i7V4AhzQ2utBP9y7d/NOXU4S0YtZXg1NRv/e3cjxMy+CdwD8Sc1WGNUm51kn?=
 =?us-ascii?q?kJRz8wwKBwv0h9xk2f3qh/hvxSDcZT6O9RUgcmKZ7cyPR3C9PoVQLHZNuJTFem?=
 =?us-ascii?q?Tc+gATE+Vd8xx94OY0BgG9StlBzD3iyqA6MLmLyPHpA77qXc333pLcZn13nGzL?=
 =?us-ascii?q?Uhj0UhQsZXKGKpnLB/+BbJC47JiUqZkb2qeroa3CLK8GeDzm+OvEVDXQ50UKXF?=
 =?us-ascii?q?W20fZ0TModT44EPCU6GhCbA9PgRdzs6CL7NAasf1glVeWPfjJNPebnqslGiqGx?=
 =?us-ascii?q?aH2KmAbIrwdGUbxyXSFk4EnhsX/XaHMwg+Gyigr3jfDDxoCVLgfUfs/fNip3O8?=
 =?us-ascii?q?S08+1xuKYFF517qp5h4VguSRS+8S3rIBvychtzV0HVan09LKEdaAoBBhfKFdYd?=
 =?us-ascii?q?M771dKzmbZtw17Ppy9IKFunF8ecwJrv0zw0xV7EJlPkc8vrHky1gp9NbqY0E9d?=
 =?us-ascii?q?dzOfxZ3/ILnXJXf9/R+xa6/awErR0MuL9agV7vQ4qFLjvB+yG0om8nVn1cRV0n?=
 =?us-ascii?q?SG6pXLCgoSTYz+UkIt+xdmoLHaZzE355nI2n10Lam0rjjC1sopBes40BqvY81T?=
 =?us-ascii?q?MaKEFADoFc0aCNOjKOgrm1ivcxIFM/pe9K8yP8O6afSG3LSnM/pnnDKjlW5H+p?=
 =?us-ascii?q?xy0lqQ9ypgTe7Fx4wFw/CE0QSdTTfzkVChvtrxmY9afzESH3OzxjT+C45Ve6J9?=
 =?us-ascii?q?Y5wLCWCoI8CswtV+hpjtW2NX9VK5BlMG3tOpdgSWb1DnwQJQ0kEXq2S9mSSk1z?=
 =?us-ascii?q?x0jy0prq2H0S3OwuTubhoGNnRQRGl/i1fhOoy0j9EcXEi1YAkljhql5UDmx6dF?=
 =?us-ascii?q?oKRzNXXcQUBNfyLuNWFtTrOwtqaeY85I8J4osz9YUP6/YVCZTb7xuQAa3DngH2?=
 =?us-ascii?q?tdxTA7cS+lupPikhx+iWKdKmtzrXXDdcFxwxff+MLTRfpL0jUaQyl4jCHdBkKg?=
 =?us-ascii?q?MNmx4dWUi5DDv/i+Vm27UZ1fayvrzYKGtCag4W1qABu/n+28m9H9EAg61zP72M?=
 =?us-ascii?q?duVSnSsBn8ZYzr3bygMe17ZkloGEP8681iF4F9iIQwhYsc2XgHhpqP+3oHnnz+?=
 =?us-ascii?q?MdFa2aL4cXoMSiQHw9/T4Aj5xkJjKmiFyJ7+VnWY2sFhfcW1YnsK2iIh6MBHEK?=
 =?us-ascii?q?KU7L1HnSRvuFa5oxzeYeNhnjgD0/sh82AVg/sGuAc2yiWdA7YSHVRXPCD2lhSI?=
 =?us-ascii?q?6cy+o7tTZGq1bbew009+l8i7DL6eugFcRGr5epA6EC9s6cV/NUjA0Xzp5YHiZd?=
 =?us-ascii?q?nQdskTthyPnhfEjuhVLo8xl/UQiSpmP2L9oWMqy+ohgRNy2pG6uZCNK39x86Kh?=
 =?us-ascii?q?Hh5YKjr1atsI9T73iqZemtuW05qrHpV8ATgLWJroTfS1EDMdr/jnNgCOECEipX?=
 =?us-ascii?q?efA7bQAQif6EJ+pXLVD5+rL22XJGUezdh6RhmSPklfjx4PXDkggp41DAOqxNHi?=
 =?us-ascii?q?cEdk4DAe/EX4pwBIyuJpMRn/T2jeqB2pajcyVJiQMh5W4hte6EfSNMyU9vhzED?=
 =?us-ascii?q?1A/p29sAyNLXSWZgRPDWEUQ0yEGkrsPr+06dnb9OiYAOW+IuDKYbWPr+xeSviJ?=
 =?us-ascii?q?yYiu0otg4zaDKMGPMmN+AP0830pJRWp5FNjBmzUTVywXkDrAb86Fqxe9+S13rc?=
 =?us-ascii?q?G//O7oWAL14ouPBKVdMc9y+xCtmqqDM++QhCBkKTdXzJ8MxHnIyKQB014WkS1h?=
 =?us-ascii?q?az6tEbEYvy7XUK3QgrNXDwIcay5rLsRI8rkz3hNTNs/bkN/10r94g+UxC1dEU1?=
 =?us-ascii?q?zhh86oadYLI2G7KFPIGkKLOK6aKj3MxsH9ebm8RqFIjOVIqx2wvi6WE1PiPjSG?=
 =?us-ascii?q?jTXmSwqjPv1MjC6FOhxTo4W9chdrCWj+Q9PqcBy7MNlrjTIoxb04nG/FNWkZMT?=
 =?us-ascii?q?JkaUNCsqWQ7T9EgvV4A2FA7mBqLe+BmyaY6enXMpcXsftxDSRymOJX+3A6y7pT?=
 =?us-ascii?q?7CFZS/15girSrthyo164lumD0CZoUB1LqmUDuIXelENuKO3964VHXHfe5xEMpT?=
 =?us-ascii?q?GUFggNj9JgA9bmo6FMw9yJkq/vfnMK1tvI4csRGIDrKcaMN2ppZQXoHDrFJAoD?=
 =?us-ascii?q?QySiOWzWiwpaiv7EsjWto4Q3sNDemZgKUaNBXRRhDv4GB153NN0ELo1+Uj4tnf?=
 =?us-ascii?q?iclsFeoTKSpQfcDOVTuIvKULrGDfzxJXCZhL9fah0gxbL+MJRVN4vn1kgkYV5/?=
 =?us-ascii?q?ysCCPkvVXJh/pS1odEdgskJN+WJWSmw1xlKjdAWg/DkSH/vylRkz3FhEbPwp5Q?=
 =?us-ascii?q?vrtnY4IUCCnzc3iFE40YHkjjeLNiXtK7+oVKlZDiP1sw46NZatEChvagjnvENj?=
 =?us-ascii?q?Ln//W7VJl7IoIWFkjxWaoodIAeZVZaJBaR4Ug/qQYqN7ghxntiy7yBoftqP+Ap?=
 =?us-ascii?q?x4mV5vKMb0og=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAABAuBpch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYEwgjsnjBZfjT6JEo43FIFfEwEBGBMBhy0iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYkAYJiAwMBAgggBwENARsdAQMCCQEBBRM4Ax4CB?=
 =?us-ascii?q?QcBBAEFAQMBGAYBEgWDHYFpAQECFQEEnEE8jCsFARcNgmoFgQYBgS6CDAoZBAo?=
 =?us-ascii?q?ZDV6BNwIGEodsgyWBHIFXP4ERhF2BDIFvhhoCiT+HaI9aMwcCgiUEhCeGcXCDJ?=
 =?us-ascii?q?QwYiXeBcQtRhRUsiRyGDIoHAgQCBAUCBQ8hOWyCDjMaI4IdgR+CGwwXg0qKHAE?=
 =?us-ascii?q?4PjIBgQMBAQE7jSUBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAABAuBpch0O0hNFkGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYEwgjsnjBZfjT6JEo43FIFfEwEBGBMBhy0iNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYkAYJiAwMBAgggBwENARsdAQMCCQEBBRM4Ax4CBQcBBAEFAQMBGAY?=
 =?us-ascii?q?BEgWDHYFpAQECFQEEnEE8jCsFARcNgmoFgQYBgS6CDAoZBAoZDV6BNwIGEodsg?=
 =?us-ascii?q?yWBHIFXP4ERhF2BDIFvhhoCiT+HaI9aMwcCgiUEhCeGcXCDJQwYiXeBcQtRhRU?=
 =?us-ascii?q?siRyGDIoHAgQCBAUCBQ8hOWyCDjMaI4IdgR+CGwwXg0qKHAE4PjIBgQMBAQE7j?=
 =?us-ascii?q?SUBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,374,1539673200"; 
   d="scan'208";a="55877090"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 13:34:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730817AbeLSVeb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 16:34:31 -0500
Received: from mail-lj1-f193.google.com ([209.85.208.193]:41690 "EHLO
        mail-lj1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730762AbeLSVeZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 16:34:25 -0500
Received: by mail-lj1-f193.google.com with SMTP id k15-v6so18699605ljc.8;
        Wed, 19 Dec 2018 13:34:23 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references:reply-to
         :mime-version:content-transfer-encoding;
        bh=E9s6uCpyIf7ZYx5Vk5PQV5IG2eR2Pz8U8igLWYJ/OLE=;
        b=ISpDosYzp3xoIvuWZPXrM9oTicqJ/P2w8uJIxw6GXmO0zny4GLHIzCf+ZZfRUPnCdj
         bxR8muhxsVcm9y5zEeV25bmyVIGQdOmzmL6Rwzm7/ESZUOmOR8LXKNO5k1xtce45+4U0
         b72RuI1/wQ7jzp9OeW0vBRrdwtSRSZZMFbXRuVqdsp/IWicwV0UHHcK5HEKG6MUeGqVo
         nZks1JC1F53eomseGmQbqryGiaDVwiTYhf92jzwHWIU9y6H/tjIvQBFTOGl9XX417l5o
         D/ZrM2vi9xkii/bQQxf98k6U25wTLonbTY4OXi17h4Z4EkOKh7s4VOhuiJyrw6FcF5le
         AoGg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:reply-to:mime-version:content-transfer-encoding;
        bh=E9s6uCpyIf7ZYx5Vk5PQV5IG2eR2Pz8U8igLWYJ/OLE=;
        b=ZBA+9Do7EUZxgLaLg8dybdIqL6i4msX5fZV2krMoZsWtnsD6vF0tDZYmdW1yTGWGrV
         /W6NNRCj91uwPHNDRLVkd+pOwYP6L3PAOYIrxfGH0VlMnidlRW2N8YpYS+SAJXi2rcBe
         ANpdNQqKbJUq7+Z6GVSC5cf7gkg5auNMD8sO/HfaRu1ZJdf6J+ZwTnkB9ZlVwhGnThYn
         oKos+qRMiSOTkqWogugckNqKkdV5GZpQwxwSe4ktzS6K+TIsZM/QyU9Djespf8dvfzEQ
         jipc4QMEj8oahyW8Zp42AymuSs/Ror1Ph3xxakzj5YxcKWCdNMbO/meBrzE1UnjNUS2W
         f1QQ==
X-Gm-Message-State: AA+aEWa5m6B2GuHsfqC+6LOkqSBp0B0OGoxUlPQzoUzGMBmuH8E9ps4R
        lQBVY/ucBax2tl6A58Cuktk=
X-Google-Smtp-Source: AFSGD/VrNtQizC10rFZW5u/r8TBG0RgDsuW8dogvziYWPYJXjruqtzL0FH3mxtu5WlV/03YzGDFPvQ==
X-Received: by 2002:a2e:568d:: with SMTP id k13-v6mr5924180lje.105.1545255262956;
        Wed, 19 Dec 2018 13:34:22 -0800 (PST)
Received: from localhost.localdomain (dmhwpt3bffxn8z3-j6k-4.rev.dnainternet.fi. [2001:14bb:51:a4c8:5c24:24d7:ca5f:e7d2])
        by smtp.gmail.com with ESMTPSA id v64sm3996867lfa.48.2018.12.19.13.34.21
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 13:34:22 -0800 (PST)
From: Igor Stoppa <igor.stoppa@gmail.com>
X-Google-Original-From: Igor Stoppa <igor.stoppa@huawei.com>
To: Andy Lutomirski <luto@amacapital.net>,
        Matthew Wilcox <willy@infradead.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Mimi Zohar <zohar@linux.vnet.ibm.com>
Cc: igor.stoppa@huawei.com, Nadav Amit <nadav.amit@gmail.com>,
        Kees Cook <keescook@chromium.org>,
        linux-integrity@vger.kernel.org,
        kernel-hardening@lists.openwall.com, linux-mm@kvack.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH 10/12] __wr_after_init: test write rare functionality
Date: Wed, 19 Dec 2018 23:33:36 +0200
Message-Id: <20181219213338.26619-11-igor.stoppa@huawei.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181219213338.26619-1-igor.stoppa@huawei.com>
References: <20181219213338.26619-1-igor.stoppa@huawei.com>
Reply-To: Igor Stoppa <igor.stoppa@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Set of test cases meant to confirm that the write rare functionality
works as expected.
It can be optionally compiled as module.

Signed-off-by: Igor Stoppa <igor.stoppa@huawei.com>

CC: Andy Lutomirski <luto@amacapital.net>
CC: Nadav Amit <nadav.amit@gmail.com>
CC: Matthew Wilcox <willy@infradead.org>
CC: Peter Zijlstra <peterz@infradead.org>
CC: Kees Cook <keescook@chromium.org>
CC: Dave Hansen <dave.hansen@linux.intel.com>
CC: Mimi Zohar <zohar@linux.vnet.ibm.com>
CC: linux-integrity@vger.kernel.org
CC: kernel-hardening@lists.openwall.com
CC: linux-mm@kvack.org
CC: linux-kernel@vger.kernel.org
---
 mm/Kconfig.debug     |   8 +++
 mm/Makefile          |   1 +
 mm/test_write_rare.c | 135 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 144 insertions(+)
 create mode 100644 mm/test_write_rare.c

diff --git a/mm/Kconfig.debug b/mm/Kconfig.debug
index b10305cfac3c..ae018e56c4e4 100644
--- a/mm/Kconfig.debug
+++ b/mm/Kconfig.debug
@@ -102,3 +102,11 @@ config DEBUG_PRMEM
     help
       After any write rare operation, compares the data written with the
       value provided by the caller.
+
+config DEBUG_PRMEM_TEST
+    tristate "Run self test for statically allocated protected memory"
+    depends on PRMEM
+    default n
+    help
+      Tries to verify that the protection for statically allocated memory
+      works correctly and that the memory is effectively protected.
diff --git a/mm/Makefile b/mm/Makefile
index d210cc9d6f80..62d719c0ee1e 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -58,6 +58,7 @@ obj-$(CONFIG_SPARSEMEM)	+= sparse.o
 obj-$(CONFIG_SPARSEMEM_VMEMMAP) += sparse-vmemmap.o
 obj-$(CONFIG_SLOB) += slob.o
 obj-$(CONFIG_MMU_NOTIFIER) += mmu_notifier.o
+obj-$(CONFIG_DEBUG_PRMEM_TEST) += test_write_rare.o
 obj-$(CONFIG_KSM) += ksm.o
 obj-$(CONFIG_PAGE_POISONING) += page_poison.o
 obj-$(CONFIG_SLAB) += slab.o
diff --git a/mm/test_write_rare.c b/mm/test_write_rare.c
new file mode 100644
index 000000000000..30574bc34a20
--- /dev/null
+++ b/mm/test_write_rare.c
@@ -0,0 +1,135 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/*
+ * test_write_rare.c
+ *
+ * (C) Copyright 2018 Huawei Technologies Co. Ltd.
+ * Author: Igor Stoppa <igor.stoppa@huawei.com>
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/mm.h>
+#include <linux/bug.h>
+#include <linux/prmem.h>
+
+#ifdef pr_fmt
+#undef pr_fmt
+#endif
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+extern long __start_wr_after_init;
+extern long __end_wr_after_init;
+
+static __wr_after_init int scalar = '0';
+static __wr_after_init u8 array[PAGE_SIZE * 3] __aligned(PAGE_SIZE);
+
+/* The section must occupy a non-zero number of whole pages */
+static bool test_alignment(void)
+{
+	unsigned long pstart = (unsigned long)&__start_wr_after_init;
+	unsigned long pend = (unsigned long)&__end_wr_after_init;
+
+	if (WARN((pstart & ~PAGE_MASK) || (pend & ~PAGE_MASK) ||
+		 (pstart >= pend), "Boundaries test failed."))
+		return false;
+	pr_info("Boundaries test passed.");
+	return true;
+}
+
+static bool test_pattern(void)
+{
+	return (memtst(array, '0', PAGE_SIZE / 2) ||
+		memtst(array + PAGE_SIZE / 2, '1', PAGE_SIZE * 3 / 4) ||
+		memtst(array + PAGE_SIZE * 5 / 4, '0', PAGE_SIZE / 2) ||
+		memtst(array + PAGE_SIZE * 7 / 4, '1', PAGE_SIZE * 3 / 4) ||
+		memtst(array + PAGE_SIZE * 5 / 2, '0', PAGE_SIZE / 2));
+}
+
+static bool test_wr_memset(void)
+{
+	int new_val = '1';
+
+	wr_memset(&scalar, new_val, sizeof(scalar));
+	if (WARN(memtst(&scalar, new_val, sizeof(scalar)),
+		 "Scalar write rare memset test failed."))
+		return false;
+
+	pr_info("Scalar write rare memset test passed.");
+
+	wr_memset(array, '0', PAGE_SIZE * 3);
+	if (WARN(memtst(array, '0', PAGE_SIZE * 3),
+		 "Array write rare memset test failed."))
+		return false;
+
+	wr_memset(array + PAGE_SIZE / 2, '1', PAGE_SIZE * 2);
+	if (WARN(memtst(array + PAGE_SIZE / 2, '1', PAGE_SIZE * 2),
+		 "Array write rare memset test failed."))
+		return false;
+
+	wr_memset(array + PAGE_SIZE * 5 / 4, '0', PAGE_SIZE / 2);
+	if (WARN(memtst(array + PAGE_SIZE * 5 / 4, '0', PAGE_SIZE / 2),
+		 "Array write rare memset test failed."))
+		return false;
+
+	if (WARN(test_pattern(), "Array write rare memset test failed."))
+		return false;
+
+	pr_info("Array write rare memset test passed.");
+	return true;
+}
+
+static u8 array_1[PAGE_SIZE * 2];
+static u8 array_2[PAGE_SIZE * 2];
+
+static bool test_wr_memcpy(void)
+{
+	int new_val = 0x12345678;
+
+	wr_assign(scalar, new_val);
+	if (WARN(memcmp(&scalar, &new_val, sizeof(scalar)),
+		 "Scalar write rare memcpy test failed."))
+		return false;
+	pr_info("Scalar write rare memcpy test passed.");
+
+	wr_memset(array, '0', PAGE_SIZE * 3);
+	memset(array_1, '1', PAGE_SIZE * 2);
+	memset(array_2, '0', PAGE_SIZE * 2);
+	wr_memcpy(array + PAGE_SIZE / 2, array_1, PAGE_SIZE * 2);
+	wr_memcpy(array + PAGE_SIZE * 5 / 4, array_2, PAGE_SIZE / 2);
+
+	if (WARN(test_pattern(), "Array write rare memcpy test failed."))
+		return false;
+
+	pr_info("Array write rare memcpy test passed.");
+	return true;
+}
+
+static __wr_after_init int *dst;
+static int reference = 0x54;
+
+static bool test_wr_rcu_assign_pointer(void)
+{
+	wr_rcu_assign_pointer(dst, &reference);
+	return dst == &reference;
+}
+
+static int __init test_static_wr_init_module(void)
+{
+	pr_info("static write_rare test");
+	if (WARN(!(test_alignment() &&
+		   test_wr_memset() &&
+		   test_wr_memcpy() &&
+		   test_wr_rcu_assign_pointer()),
+		 "static rare-write test failed"))
+		return -EFAULT;
+	pr_info("static write_rare test passed");
+	return 0;
+}
+
+module_init(test_static_wr_init_module);
+
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Igor Stoppa <igor.stoppa@huawei.com>");
+MODULE_DESCRIPTION("Test module for static write rare.");
-- 
2.19.1

