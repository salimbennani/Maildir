Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:54:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 983875805FC;
	Fri, 21 Dec 2018 10:15:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 21 Dec 2018 10:15:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ASDrVixyeFEO/AWTXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ewfKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QbPelXoIf9vEMOoBmlCAWwB+7i0CNEi2Xq0aEm1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nar9r1NKAIUeuo0afI0TLDb+tO2Tjn9YPFdREhof6LXbJqa8bR0lUvFwTdjlWI?=
 =?us-ascii?q?s4PoJDyV1uEXvGia6+psT/6gi2kiqwxopDWk28QiipHRi44L1lzJ8T91zJs7KN?=
 =?us-ascii?q?GmUkJ3fN2pHIdKuyybNYZ6Wt0uT310tConz7AKpJG2czMRx5kixxPTdvmKfJKH?=
 =?us-ascii?q?7x3/V+ucJDd1i257dL+wghu+70etxfD+W8SxzFlFtCpIktfJu38T1RHc99aLR/?=
 =?us-ascii?q?1g9Um7wzmPzRrc6uRcLEA0i6XbL5khz6Yulpocr0vDBDX6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/7gYrX8qZ+QL450igfgPaQygsGzH/g0PwwUU2SG9+mwyqfv8VD6TblWlPE7k6?=
 =?us-ascii?q?vUvIjfJcsBp665BwFV0pwk6xa6Fzqm1NUYnX8aLFNKYR6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mlOskTltx//YJL3sGYvNLnfdn7f7Z7p96FBTyBA1zd9B45JYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWcKsRA/TOz2klKCViRfZ3avX6?=
 =?us-ascii?q?0m4DE7B5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szQuhtBT6y7pgLerY4DcYuojh1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwc5L5HcyfZ2C9TzWg3beNeJR02r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzL?=
 =?us-ascii?q?QugEM4QsRRL2GmhrRw9w7IB4HXlUWVkKKqdacZ3C7J72qDyWuOvEdFUA9/S6nF?=
 =?us-ascii?q?XHYfZlfIotT9/E/NU7iuCbE/OAtb1cGCMrdKasHujVheWfjsIsrebHyrl2ewHx?=
 =?us-ascii?q?mIwKiMY5Tse2gG2CXdCU4Ekx0c/HqcNAg+ADuhrHzaDDB0CV3vZEbs+/FkqHyn?=
 =?us-ascii?q?Vk800x2Kb0p52rqp+x4VgPucS+8T3rMEoishty94HFGn39LSCtqAoQVhcb5YYd?=
 =?us-ascii?q?M85ldHyG3YuxZ8PpymM6BtmFoefx5rsEPp0hV9Ep9AntQyrHM20ApyLrqV30lF?=
 =?us-ascii?q?dzyG0pH/JL3WJnPp8xCydqHZwFfe0NWR+qcR8/k4r1TjvAe0Fkst6Xln0t9V02?=
 =?us-ascii?q?eC6ZXOFgYdTZXxUkMv/Rhgu77aejU955/T1XB0Mai0ryXO1M4zCOokyhavZdFf?=
 =?us-ascii?q?MKyfGQ/2Es0aAdWuKeMwl1ioaBIEIP5d9KouM8y6cPuG3bahPPx8kzK+kWRH/I?=
 =?us-ascii?q?d931qW9yp9VuHHxYwFzOyf3gedUTfzkk2hssHulY9Yfz4SGnewxjb+BI5WYK1/?=
 =?us-ascii?q?ZoILCWaoI82qydRynZ/tW3hE9FG9A1MKwtOmeR2Xb1blxw1fyVwXoWC7mSu/1z?=
 =?us-ascii?q?F1kzAporCf3SDU2OTiaRwHN3VPRGlji1fsPIe1g8obXEiucwgmih+l6VzmyKhc?=
 =?us-ascii?q?oaR1N3PTTltQfyjqM2FiVbO9triYbM5V65MosiJXXP6nYV+ASb79oBoa0yX9EG?=
 =?us-ascii?q?tY3z07czCqupPknx11km6dLXBzrGbHdsF03xvQ+NvcRftJ1DocWCZ4kSXXBkS7?=
 =?us-ascii?q?P9Sx/dSbjZDDvvq8V2KgUJ1eai3rzYKGtCum6mxmGxy/n/avmtL5FQg2yzP019?=
 =?us-ascii?q?5vVS/QthbzfpHr17imMeJgZkRoB0Xz68tgFoF+j4s/npcQ2XcBi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sT2iI87MBFEr?=
 =?us-ascii?q?2Y7bJakituvlq3sxjRbuNjkTcHxvsj83oag+APuAowwSSRGLESHU9EPSPykxSE?=
 =?us-ascii?q?9cyxrKJSZGy3a7i/yFJ+ncy9DLGFugxcRHH5epI4ES5x9Mp/Nk/M0Gbo6oHlY9?=
 =?us-ascii?q?TQadMTthuJkxbPleRVKZQxluYUiipjI27yoXoly+sjhxx0wZ66pJSHK3lq/K+h?=
 =?us-ascii?q?GRFXLDr1Z8cO+j33iaZeg92b34SuHpVnBzUKU4HkTfOuEDIOq/vnMxyCHyE7qn?=
 =?us-ascii?q?eeAbDfBxOQ6F96r3LTFJCmL3OXK2Mczdp8XxmRPlBfjBoXXDUnnZ45Cwaqy9b6?=
 =?us-ascii?q?cEpi4jAR51j4qgZDy+5yNhn/VHvfqxmsajsuVJefKx9W5BlY50jJKcye8v5zHy?=
 =?us-ascii?q?ZA85yhqwyNN3WbZxlSAmEPQECEHFfjPr+h5dTb9+iYB+y+L+bBYLmUqOxeUeuI?=
 =?us-ascii?q?yoyr0od84zmMMcCPNGF4D/InwkpDQWx5G8PBljUPVSMXliHNb82apBum+S13tM?=
 =?us-ascii?q?e/8Pv1VwL1+IuPEKBfMdFu+xCwnKeCOPSchCd/KTZEyJwMwWXEx6QY3F4Xkytu?=
 =?us-ascii?q?bSWiEawctS7RS6LdgrVYDwMAZCNpKsRJ77gw3g1MOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgeVIth2wvCyXHFP5Mjuf?=
 =?us-ascii?q?lznmSRavPPpIjCGaOhxepY68fgxsCWjlUNLpdBm7PMVrgj0xxL0+nmnKOnIEMT?=
 =?us-ascii?q?hgb0NNqaWd7CNCjfV5HmxB73xlIvGFmiaZ9ebYLJkWvOBvAiR1keJa/Xs7x6FU?=
 =?us-ascii?q?7CFCWPx6hi/SosRyrFGhl+ncggZgBTNIpicDoJ+XukBjI77a99EUXWvY+zoE6G?=
 =?us-ascii?q?ybAgwLu9JhTNvip/YUgv3GiL7zJSgKzNPQ9swMT5zLKcaDIVIgNxTzETLZBQdD?=
 =?us-ascii?q?SiSkYyWXv0FBnevaxHyXqoMmsJGkzIIDVrJBRnQ0EP0AA0hoFdBEJ414CHdsvb?=
 =?us-ascii?q?eFgYYo7HyloR+ZEMlToJ2BVvuUGvjpADKYi6RUIRoO3b78a48UM9u/k2ljb1gy?=
 =?us-ascii?q?roPKElCYCcJKoiR7Rgs1plhdtmZ4Q3F12kjgLAiq5SlXXcK0nxc5jUNcfOIivB?=
 =?us-ascii?q?3l/lotI1PMomNkmkAslM/giDa5dD/3Mbf2XItTTSHzsh5iCJ7jRxdJaliTkkt+?=
 =?us-ascii?q?fAzYQKpJhvM0dG9skknHpZxXAfd0QqhNYRtWzvaSMaYGy1NZ/wSowlUP3vfCEY?=
 =?us-ascii?q?Nr3F8rfpm26Wlc3Bp7ZfY6IKXRIOxCyV0G1fHGhTOhyu1kmFxWHE0K6m7HPXdQ?=
 =?us-ascii?q?4EE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABgLB1ch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCOyeMFl+NP4kTjjiBcxMBARgTAYcwIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII6KQGCZwMDAQIIIAcBDQEbEA0BAwIJAQEFEwQ0Ax4CBQcBB?=
 =?us-ascii?q?AEFAQMBCg4GARIFgx2BaQEBAhUBBJpJPIwrBQEXDYJqBYEGAYEuggoKGQQKGQ1?=
 =?us-ascii?q?egTcCBhKHbIMlgRyBVz+DboMMiAkCiScghhmRMjMHAoIlBIQpg0mDK3CDJwwYg?=
 =?us-ascii?q?WCIGjeBOwxRhRYsiSeGEIoSAgQCBAUCBQ8hOWyCDjMaI4IdgR+CGwwXg0qKHAE?=
 =?us-ascii?q?4PjIBgQMBAQE7jXMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABgLB1ch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?COyeMFl+NP4kTjjiBcxMBARgTAYcwIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II6KQGCZwMDAQIIIAcBDQEbEA0BAwIJAQEFEwQ0Ax4CBQcBBAEFAQMBCg4GARI?=
 =?us-ascii?q?Fgx2BaQEBAhUBBJpJPIwrBQEXDYJqBYEGAYEuggoKGQQKGQ1egTcCBhKHbIMlg?=
 =?us-ascii?q?RyBVz+DboMMiAkCiScghhmRMjMHAoIlBIQpg0mDK3CDJwwYgWCIGjeBOwxRhRY?=
 =?us-ascii?q?siSeGEIoSAgQCBAUCBQ8hOWyCDjMaI4IdgR+CGwwXg0qKHAE4PjIBgQMBAQE7j?=
 =?us-ascii?q?XMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,382,1539673200"; 
   d="scan'208";a="45017313"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 10:15:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404319AbeLUSOy (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 13:14:54 -0500
Received: from mail-lj1-f195.google.com ([209.85.208.195]:34995 "EHLO
        mail-lj1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S2391232AbeLUSOu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 13:14:50 -0500
Received: by mail-lj1-f195.google.com with SMTP id x85-v6so5541732ljb.2;
        Fri, 21 Dec 2018 10:14:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references:reply-to
         :mime-version:content-transfer-encoding;
        bh=02CsOTWqtwZzPMlweM9pS6XE1OnLE/PPqdTJz4OZtoU=;
        b=C/bllgwWcelpTykNWYi39BnaATo8lpq89ch1ugnwfkYPRnVxve0wGvexjuxUPMzDoo
         5Jpl5b0JUZ4ZL/39R1AR2j4X3k6ukiq9RlxTBcEzcGXXAV++v3Za4nKsdMqOIzA9BnLM
         FYYV6EhXu7gS7jQm20h6QR7xCxqPqLFD8gIyXunzOdhwh2+LhS6sZVyX0ahZHFfkn3Xw
         sGSbMTE95/rO31tGYeJBOFMCsqpicf6WF5vlojY4Bfno1gSEaX5smNWCKjXFGXXiAutn
         S0s+m5efoXLUf0pB106ZUBJIrPyvf1cnpu48uQJzohHGLMXY7JXthKhEMa1N9dvbpmSr
         FT6Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:reply-to:mime-version:content-transfer-encoding;
        bh=02CsOTWqtwZzPMlweM9pS6XE1OnLE/PPqdTJz4OZtoU=;
        b=LOFpI9VSccT71W1EYeyqdijWvWPi3qIjpjuWqd1yBjnVpGZ+t9UFoChGTykeausqUd
         8xOW1QgZKQi0DkCmkSjjSIEQczlMRtPAQfTvuYsu5sFPcTr4Ia0d3SRIWGtgYPfFey/T
         Bk3JbtotXrB4slTNks2MSpjyjG2DP4lzWVdIiiKDYR0KQT9S5V6a5EkZ5QJJPZ/6qMQI
         eI1vXG8tfjBhwSG73GZK2qO11NH1pj82bGD7RzMb/888HgVH+Rqw2MyLfrM+kcIPvAXm
         RwmGaSReRbhBLFBj22mWK1WsLnzMfY241Y/cuvAQnUCz1tYmnNMzuqyDkbeYopgew19i
         x7hA==
X-Gm-Message-State: AJcUukezXVaXRd9SR/hhMW5scIYeD9PMRIqmrZoUTLPMTE4ETRmMWYAs
        qFrnbsrBMgQ4pwCa4ZdWe84=
X-Google-Smtp-Source: ALg8bN6ADTRPD4oTDrtkd5En5+bsIvKrP+5XCjbqDTL4+Lh9yRDACXYcUUsznsEdhYFvH6hg+L2VRA==
X-Received: by 2002:a2e:5b1d:: with SMTP id p29-v6mr2252747ljb.176.1545416088161;
        Fri, 21 Dec 2018 10:14:48 -0800 (PST)
Received: from localhost.localdomain (dmhwpt3bffxn8z3-j6k-4.rev.dnainternet.fi. [2001:14bb:51:a4c8:5c24:24d7:ca5f:e7d2])
        by smtp.gmail.com with ESMTPSA id m63-v6sm5444564lje.81.2018.12.21.10.14.46
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 21 Dec 2018 10:14:47 -0800 (PST)
From: Igor Stoppa <igor.stoppa@gmail.com>
X-Google-Original-From: Igor Stoppa <igor.stoppa@huawei.com>
To: Andy Lutomirski <luto@amacapital.net>,
        Matthew Wilcox <willy@infradead.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        Mimi Zohar <zohar@linux.vnet.ibm.com>,
        Thiago Jung Bauermann <bauerman@linux.ibm.com>
Cc: igor.stoppa@huawei.com, Nadav Amit <nadav.amit@gmail.com>,
        Kees Cook <keescook@chromium.org>,
        Ahmed Soliman <ahmedsoliman@mena.vt.edu>,
        linux-integrity@vger.kernel.org,
        kernel-hardening@lists.openwall.com, linux-mm@kvack.org,
        linux-kernel@vger.kernel.org
Subject: [PATCH 02/12] __wr_after_init: linker section and label
Date: Fri, 21 Dec 2018 20:14:13 +0200
Message-Id: <20181221181423.20455-3-igor.stoppa@huawei.com>
X-Mailer: git-send-email 2.19.1
In-Reply-To: <20181221181423.20455-1-igor.stoppa@huawei.com>
References: <20181221181423.20455-1-igor.stoppa@huawei.com>
Reply-To: Igor Stoppa <igor.stoppa@gmail.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Introduce a section and a label for statically allocated write rare
data. The label is named "__wr_after_init".
As the name implies, after the init phase is completed, this section
will be modifiable only by invoking write rare functions.
The section must take up a set of full pages.

To activate both section and label, the arch must set CONFIG_ARCH_HAS_PRMEM

Signed-off-by: Igor Stoppa <igor.stoppa@huawei.com>

CC: Andy Lutomirski <luto@amacapital.net>
CC: Nadav Amit <nadav.amit@gmail.com>
CC: Matthew Wilcox <willy@infradead.org>
CC: Peter Zijlstra <peterz@infradead.org>
CC: Kees Cook <keescook@chromium.org>
CC: Dave Hansen <dave.hansen@linux.intel.com>
CC: Mimi Zohar <zohar@linux.vnet.ibm.com>
CC: Thiago Jung Bauermann <bauerman@linux.ibm.com>
CC: Ahmed Soliman <ahmedsoliman@mena.vt.edu>
CC: linux-integrity@vger.kernel.org
CC: kernel-hardening@lists.openwall.com
CC: linux-mm@kvack.org
CC: linux-kernel@vger.kernel.org
---
 arch/Kconfig                      | 15 +++++++++++++++
 include/asm-generic/vmlinux.lds.h | 25 +++++++++++++++++++++++++
 include/linux/cache.h             | 21 +++++++++++++++++++++
 init/main.c                       |  2 ++
 4 files changed, 63 insertions(+)

diff --git a/arch/Kconfig b/arch/Kconfig
index e1e540ffa979..8668ffec8098 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -802,6 +802,21 @@ config VMAP_STACK
 	  the stack to map directly to the KASAN shadow map using a formula
 	  that is incorrect if the stack is in vmalloc space.
 
+config ARCH_HAS_PRMEM
+	def_bool n
+	help
+	  architecture specific symbol stating that the architecture provides
+	  a back-end function for the write rare operation.
+
+config PRMEM
+	bool "Write protect critical data that doesn't need high write speed."
+	depends on ARCH_HAS_PRMEM
+	default y
+	help
+	  If the architecture supports it, statically allocated data which
+	  has been selected for hardening becomes (mostly) read-only.
+	  The selection happens by labelling the data "__wr_after_init".
+
 config ARCH_OPTIONAL_KERNEL_RWX
 	def_bool n
 
diff --git a/include/asm-generic/vmlinux.lds.h b/include/asm-generic/vmlinux.lds.h
index 3d7a6a9c2370..ddb1fd608490 100644
--- a/include/asm-generic/vmlinux.lds.h
+++ b/include/asm-generic/vmlinux.lds.h
@@ -311,6 +311,30 @@
 	KEEP(*(__jump_table))						\
 	__stop___jump_table = .;
 
+/*
+ * Allow architectures to handle wr_after_init data on their
+ * own by defining an empty WR_AFTER_INIT_DATA.
+ * However, it's important that pages containing WR_RARE data do not
+ * hold anything else, to avoid both accidentally unprotecting something
+ * that is supposed to stay read-only all the time and also to protect
+ * something else that is supposed to be writeable all the time.
+ */
+#ifndef WR_AFTER_INIT_DATA
+#ifdef CONFIG_PRMEM
+#define WR_AFTER_INIT_DATA(align)					\
+	. = ALIGN(PAGE_SIZE);						\
+	__start_wr_after_init = .;					\
+	. = ALIGN(align);						\
+	*(.data..wr_after_init)						\
+	. = ALIGN(PAGE_SIZE);						\
+	__end_wr_after_init = .;					\
+	. = ALIGN(align);
+#else
+#define WR_AFTER_INIT_DATA(align)					\
+	. = ALIGN(align);
+#endif
+#endif
+
 /*
  * Allow architectures to handle ro_after_init data on their
  * own by defining an empty RO_AFTER_INIT_DATA.
@@ -332,6 +356,7 @@
 		__start_rodata = .;					\
 		*(.rodata) *(.rodata.*)					\
 		RO_AFTER_INIT_DATA	/* Read only after init */	\
+		WR_AFTER_INIT_DATA(align) /* wr after init */	\
 		KEEP(*(__vermagic))	/* Kernel version magic */	\
 		. = ALIGN(8);						\
 		__start___tracepoints_ptrs = .;				\
diff --git a/include/linux/cache.h b/include/linux/cache.h
index 750621e41d1c..09bd0b9284b6 100644
--- a/include/linux/cache.h
+++ b/include/linux/cache.h
@@ -31,6 +31,27 @@
 #define __ro_after_init __attribute__((__section__(".data..ro_after_init")))
 #endif
 
+/*
+ * __wr_after_init is used to mark objects that cannot be modified
+ * directly after init (i.e. after mark_rodata_ro() has been called).
+ * These objects become effectively read-only, from the perspective of
+ * performing a direct write, like a variable assignment.
+ * However, they can be altered through a dedicated function.
+ * It is intended for those objects which are occasionally modified after
+ * init, however they are modified so seldomly, that the extra cost from
+ * the indirect modification is either negligible or worth paying, for the
+ * sake of the protection gained.
+ */
+#ifndef __wr_after_init
+#ifdef CONFIG_PRMEM
+#define __wr_after_init \
+		__attribute__((__section__(".data..wr_after_init")))
+#else
+#define __wr_after_init
+#endif
+#endif
+
+
 #ifndef ____cacheline_aligned
 #define ____cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES)))
 #endif
diff --git a/init/main.c b/init/main.c
index a461150adfb1..a36f2e54f937 100644
--- a/init/main.c
+++ b/init/main.c
@@ -498,6 +498,7 @@ void __init __weak thread_stack_cache_init(void)
 void __init __weak mem_encrypt_init(void) { }
 
 void __init __weak poking_init(void) { }
+void __init __weak wr_poking_init(void) { }
 
 bool initcall_debug;
 core_param(initcall_debug, initcall_debug, bool, 0644);
@@ -734,6 +735,7 @@ asmlinkage __visible void __init start_kernel(void)
 	delayacct_init();
 
 	poking_init();
+	wr_poking_init();
 	check_bugs();
 
 	acpi_subsystem_init();
-- 
2.19.1

