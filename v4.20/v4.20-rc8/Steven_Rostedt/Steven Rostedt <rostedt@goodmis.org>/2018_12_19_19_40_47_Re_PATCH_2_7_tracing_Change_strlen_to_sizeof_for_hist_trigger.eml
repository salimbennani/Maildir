Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:42:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C4976580522;
	Wed, 19 Dec 2018 11:40:54 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 11:40:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOAnbARSmiMQnZLw4syKQFE6oytpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64ZxyPt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+laoYnzoFQBogexCwm3HOPiyCRFhmP00KAgz+gsCx3K0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6o0KnH0yvDYO1Q2Tzg9IbIdQshoe2SUr1tbcra1E4iFxnCjlWL?=
 =?us-ascii?q?tYzqIS6a1vgWvmiU6OpgUv+gi2smqwFquDSvwd0siobQi48T11vK9j15zZ4rKd?=
 =?us-ascii?q?GkTEN3e8OoHZVOuy2AKod7Qd8uT3tptSs40rELuJ+2cDIUxJko3RLSa/2Kf5KK?=
 =?us-ascii?q?7x/gUuuaPC12i2h/eL2lgha/6UigxfP4VsmzyFtKsCVFncfWtnwX1Bzc9NKHSv?=
 =?us-ascii?q?1j8UelwzqP0BrT6u5cLUA1k6rUNYIhz6YumpYPtUnPBDL6lUvogKOMa0kp+fSk?=
 =?us-ascii?q?5/7mb7jkvpOcMpV7igD6MqQggMy/BuE4PxAKX2ia/+S8ybLi8VT6QLpUlP02lL?=
 =?us-ascii?q?fWsJTDKcQcqK+5BRFa0pw45hahADepzs4YkWMELF1bYhKHiZbmO1XULPD/F/e/?=
 =?us-ascii?q?jEygkC13yPDeIr3hHpLNI2DHkLfgfrZy9VRQyQUuzd1E45JUC7cBIO/8W0Prtd?=
 =?us-ascii?q?zYCAM5PBKww+r9FNp90YYeU3qVAqCFKKPSrUOI5uU3LumMfoAVuSr9JOIi5/L0?=
 =?us-ascii?q?jX85hEUSfa+m3ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTbW6oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4+3m7yB3CC7Hp5MamBcEF+ME2zld4GFW/cKdSKTLdVtkj0C?=
 =?us-ascii?q?Vbi9VYAh0QuiuxP9y7piNuDU4DEXtYr/1Nhp4O3ejRIy+iZyD8iH12GNTnt7nm?=
 =?us-ascii?q?UHRzIt2KB/oEp9ykqM0KRigvxYE8BT6O1NUgsgKZHcyOl6AcjoWg3dZteJVEqm?=
 =?us-ascii?q?QtK+DD4sVN0x3cEBb1x9G9q4iBDDxDSlA7kSm7yPB5w096bc0mP1J8Z8zXbGya?=
 =?us-ascii?q?Ygg0MnQstJKW2pmKp/+xLPCI7OlkWTj7yqergE3C7R6GeDynKDs1xCXw5uT6rJ?=
 =?us-ascii?q?R3AfaVHQrdTi+EzCSaSjCbAmMgtH1M6DJbFGatzvjVVaWvjjPM7SbH62m2e1HR?=
 =?us-ascii?q?yI3K+DbJL2e2UB2yXQEFQEkwEW/XaBKQg+Biegr3jCDDB0ElLveUfs8eh4qHO0?=
 =?us-ascii?q?VUI0ywCKb0t817u64BIVhPqcS+8N0bIAoisutzJ0HFOl1dLMF9WAvxZhfLlbYd?=
 =?us-ascii?q?4l+lhH0XzWtgNjMZ2gNaxtnUMefBltsEPo1BV3DZtAnNMurHMrygpyNK2Z3ElA?=
 =?us-ascii?q?dzOewZD/JLnXJnPu8xCobq7cwkve38qO+qcT9PQ4rE3uvQG0FkY473prydhU03?=
 =?us-ascii?q?uG6ZXMAwofSpbxUkcx9xhnqLDWeCg954XI1XJyNam4qCPN29UsBOE90BavY89f?=
 =?us-ascii?q?ML+YFA/1C8AaHcmuJ/AwlFizcx0EO/pe9KgqMMO8dvuKwbKkM/xknD27k2tH+o?=
 =?us-ascii?q?d90kSX+ip4S+7I2YsFwv6C0guGUTf8kEmussTtlY9YYjESG3K1yTL4C45Jeq1y?=
 =?us-ascii?q?YYELBH+uIs223Nl/h4ThW2VF9F6lHF4G3M6peRyPb13yxwFQ1EIXoWC5liu81T?=
 =?us-ascii?q?B7jzYprq+H1izU3+vibAYHOnJMRGR6j1fjO5K0j9MZXEivdQQpjwGq5UX5x6ha?=
 =?us-ascii?q?oqRwMW/TTFxMfyj3KWFiT6SxuqCDY85J9JMnryFXXP6gblCdT773uwEa3D/7H2?=
 =?us-ascii?q?tC2DA7cCmnu5XjkBx9km6dLndzrHzCdMF0xBff4sHcRPFL0joHQil4lSfYBlym?=
 =?us-ascii?q?M9a1+tWUko/JsvqiWGK5Sp1TbS7rwJuDtCSh5G1mGx2/n+2pld3hHgg3yiv719?=
 =?us-ascii?q?hsVSXVoxfweIjr16KmMe15eklkHkPz681/GotmiIs/mIkQ2WQGhpWS5XcHlGbz?=
 =?us-ascii?q?MdZB1q7kYnsCWyULw8LL7wj/w0JsMGiJx43iW3WZw8thYcS6Y2wM1iI86cBKFL?=
 =?us-ascii?q?mb7LhekSRppVq4qBrbYeJhkTcF1fsu9HkajvkVuAoqyyWRGLETElNePSzxjBSI?=
 =?us-ascii?q?9NG+ob5TZGaud7iwyUV/kcqgDLGEvgFTRnL5do0+Ei9368V1KEjM32Hr6oH4ZN?=
 =?us-ascii?q?nQasoeuQaOnBfHi+hVNYg9lv4XhSd8PWL9vHsly/M0jBB03JG6upSHJHtp/K6j?=
 =?us-ascii?q?HhFYMTj1bdsJ+j7xlaZegtqW34e3E5VjADoLWYXnTemyHDIOr/jnNBuOED4hqn?=
 =?us-ascii?q?edA7XfBhSS6ENnr3LJDpCqOGubJHgfzdV+WhadIFZTjxwTXDU/hpQ5DBylxNT9?=
 =?us-ascii?q?cEdl4TAc/l75qhxRyuJxKhnwSGHfqB2zajczTpifIwFb7gVD50fTLMyf4fh/Hy?=
 =?us-ascii?q?Be/p29sgONLnaXaBhPDWEMQkaEHUzsPqGy5dnc9OiVHuq+IOXPYbWNquxeVu2E?=
 =?us-ascii?q?xZG10oth8DaDKN+PPmR5D/Ag3kpDXHZ5G9nWmjkVSiwXkT7NYNCfpBum5iJ3qc?=
 =?us-ascii?q?W/+uzxWA3z/YuPF6dSMdJ39h+snKeMLPSQizh5KDpC0pMMxGTFyLwe3F4UliFv?=
 =?us-ascii?q?eCOhEbUGtS7RUq3QnrVbAAIcayN2LMFI9b4z3hFROc7HjdP4zqJ4jv8wC1tfSV?=
 =?us-ascii?q?PtgN2mZcwULGG7L17HAEeLNLKbJTzE2c33YKW8SaFOg+VQrRG/pTGbE0r7NDSZ?=
 =?us-ascii?q?izbpTwyvMf1LjCyDPB1Rooe9chNsCWjlVN3nax27P8VxjT052rA0gnLKNWgBMT?=
 =?us-ascii?q?lzaU9Nr7uQ7T9GjfV7AWBO8n1lLezX0xqeutXfL94kuP12GT9137ZI6XIn0KBU?=
 =?us-ascii?q?xCJJXvp4nG3VtNE48H+8leza8SZqThdI4gxMn56GsVkqbb/e7YVNVWrs8xUK4W?=
 =?us-ascii?q?CREFINvdQzWY6ngLxZ1tWazPG7EzxF6d+BuJJEX8U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABLnhpch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBZfix2CDRSXSYFzFRgTAYctIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJhAQEBAQIBAQIkEz8FAQkBAQoVDBMSAwxIBhMFgx2BeggFq?=
 =?us-ascii?q?QwzijGMPxeBf4ERgmQuimACiUmGD0c3kF4JkVYkgV6Pe4pNjzWBRoIOMxoIKAi?=
 =?us-ascii?q?DJ4JQjikiMgGBBAEBjWABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAABLnhpch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBZfix2CDRSXSYFzFRgTAYctIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQIkEz8FAQkBAQoVDBMSAwxIBhMFgx2BeggFqQwzijGMPxeBf4E?=
 =?us-ascii?q?RgmQuimACiUmGD0c3kF4JkVYkgV6Pe4pNjzWBRoIOMxoIKAiDJ4JQjikiMgGBB?=
 =?us-ascii?q?AEBjWABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="67591851"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 19 Dec 2018 11:40:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729062AbeLSTkv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 14:40:51 -0500
Received: from mail.kernel.org ([198.145.29.99]:52100 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728789AbeLSTkv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 14:40:51 -0500
Received: from gandalf.local.home (cpe-66-24-56-78.stny.res.rr.com [66.24.56.78])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 331A620874;
        Wed, 19 Dec 2018 19:40:49 +0000 (UTC)
Date: Wed, 19 Dec 2018 14:40:47 -0500
From: Steven Rostedt <rostedt@goodmis.org>
To: Tom Zanussi <zanussi@kernel.org>
Cc: tglx@linutronix.de, mhiramat@kernel.org, namhyung@kernel.org,
        vedang.patel@intel.com, bigeasy@linutronix.de,
        joel@joelfernandes.org, mathieu.desnoyers@efficios.com,
        julia@ni.com, linux-kernel@vger.kernel.org,
        linux-rt-users@vger.kernel.org
Subject: Re: [PATCH 2/7] tracing: Change strlen to sizeof for hist trigger
 static strings
Message-ID: <20181219144047.49fabfa6@gandalf.local.home>
In-Reply-To: <e3e754f2bd18e56eaa8baf79bee619316ebf4cfc.1545161087.git.tom.zanussi@linux.intel.com>
References: <cover.1545161087.git.tom.zanussi@linux.intel.com>
        <e3e754f2bd18e56eaa8baf79bee619316ebf4cfc.1545161087.git.tom.zanussi@linux.intel.com>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 18 Dec 2018 14:33:21 -0600
Tom Zanussi <zanussi@kernel.org> wrote:

> From: Tom Zanussi <tom.zanussi@linux.intel.com>
> 
> There's no need to use strlen() for static strings when the length is
> already known, so update trace_events_hist.c with sizeof() for those
> cases.
> 
> Signed-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>
> ---
>  kernel/trace/trace_events_hist.c | 38 +++++++++++++++++++-------------------
>  1 file changed, 19 insertions(+), 19 deletions(-)
> 
> diff --git a/kernel/trace/trace_events_hist.c b/kernel/trace/trace_events_hist.c
> index d29bf8a8e1dd..25d06b3ae1f6 100644
> --- a/kernel/trace/trace_events_hist.c
> +++ b/kernel/trace/trace_events_hist.c
> @@ -507,7 +507,7 @@ static int synth_field_string_size(char *type)
>  	start = strstr(type, "char[");
>  	if (start == NULL)
>  		return -EINVAL;
> -	start += strlen("char[");
> +	start += sizeof("char[") - 1;
>  
>  	end = strchr(type, ']');
>  	if (!end || end < start)
> @@ -1843,8 +1843,8 @@ static int parse_action(char *str, struct hist_trigger_attrs *attrs)
>  	if (attrs->n_actions >= HIST_ACTIONS_MAX)
>  		return ret;
>  
> -	if ((strncmp(str, "onmatch(", strlen("onmatch(")) == 0) ||
> -	    (strncmp(str, "onmax(", strlen("onmax(")) == 0)) {
> +	if ((strncmp(str, "onmatch(", sizeof("onmatch(") - 1) == 0) ||
> +	    (strncmp(str, "onmax(", sizeof("onmax(") - 1) == 0)) {
>  		attrs->action_str[attrs->n_actions] = kstrdup(str, GFP_KERNEL);
>  		if (!attrs->action_str[attrs->n_actions]) {
>  			ret = -ENOMEM;
> @@ -1861,34 +1861,34 @@ static int parse_assignment(char *str, struct hist_trigger_attrs *attrs)
>  {
>  	int ret = 0;
>  
> -	if ((strncmp(str, "key=", strlen("key=")) == 0) ||
> -	    (strncmp(str, "keys=", strlen("keys=")) == 0)) {
> +	if ((strncmp(str, "key=", sizeof("key=") - 1) == 0) ||
> +	    (strncmp(str, "keys=", sizeof("keys=") - 1) == 0)) {
>  		attrs->keys_str = kstrdup(str, GFP_KERNEL);

I'll apply this as is, but since there's a lot of these, I wonder if we
should make a marcro for this:

#define strcmp_const(str, str_const) strncmp(str, str_const, sizeof(str_const) - 1)

?

This would help prevent bugs due to typos and bad cut and paste.

-- Steve



>  		if (!attrs->keys_str) {
>  			ret = -ENOMEM;
>  			goto out;
>  		}
> -	} else if ((strncmp(str, "val=", strlen("val=")) == 0) ||
> -		 (strncmp(str, "vals=", strlen("vals=")) == 0) ||
> -		 (strncmp(str, "values=", strlen("values=")) == 0)) {
> +	} else if ((strncmp(str, "val=", sizeof("val=") - 1) == 0) ||
> +		 (strncmp(str, "vals=", sizeof("vals=") - 1) == 0) ||
> +		 (strncmp(str, "values=", sizeof("values=") - 1) == 0)) {
>  		attrs->vals_str = kstrdup(str, GFP_KERNEL);
>  		if (!attrs->vals_str) {
>  			ret = -ENOMEM;
>  			goto out;
>  		}
> -	} else if (strncmp(str, "sort=", strlen("sort=")) == 0) {
> +	} else if (strncmp(str, "sort=", sizeof("sort=") - 1) == 0) {
>  		attrs->sort_key_str = kstrdup(str, GFP_KERNEL);
>  		if (!attrs->sort_key_str) {
>  			ret = -ENOMEM;
>  			goto out;
>  		}
> -	} else if (strncmp(str, "name=", strlen("name=")) == 0) {
> +	} else if (strncmp(str, "name=", sizeof("name=") - 1) == 0) {
>  		attrs->name = kstrdup(str, GFP_KERNEL);
>  		if (!attrs->name) {
>  			ret = -ENOMEM;
>  			goto out;
>  		}
> -	} else if (strncmp(str, "clock=", strlen("clock=")) == 0) {
> +	} else if (strncmp(str, "clock=", sizeof("clock=") - 1) == 0) {
>  		strsep(&str, "=");
>  		if (!str) {
>  			ret = -EINVAL;
> @@ -1901,7 +1901,7 @@ static int parse_assignment(char *str, struct hist_trigger_attrs *attrs)
>  			ret = -ENOMEM;
>  			goto out;
>  		}
> -	} else if (strncmp(str, "size=", strlen("size=")) == 0) {
> +	} else if (strncmp(str, "size=", sizeof("size=") - 1) == 0) {
>  		int map_bits = parse_map_size(str);
>  
>  		if (map_bits < 0) {
> @@ -3497,7 +3497,7 @@ static struct action_data *onmax_parse(char *str)
>  	if (!onmax_fn_name || !str)
>  		goto free;
>  
> -	if (strncmp(onmax_fn_name, "save", strlen("save")) == 0) {
> +	if (strncmp(onmax_fn_name, "save", sizeof("save") - 1) == 0) {
>  		char *params = strsep(&str, ")");
>  
>  		if (!params) {
> @@ -4302,8 +4302,8 @@ static int parse_actions(struct hist_trigger_data *hist_data)
>  	for (i = 0; i < hist_data->attrs->n_actions; i++) {
>  		str = hist_data->attrs->action_str[i];
>  
> -		if (strncmp(str, "onmatch(", strlen("onmatch(")) == 0) {
> -			char *action_str = str + strlen("onmatch(");
> +		if (strncmp(str, "onmatch(", sizeof("onmatch(") - 1) == 0) {
> +			char *action_str = str + sizeof("onmatch(") - 1;
>  
>  			data = onmatch_parse(tr, action_str);
>  			if (IS_ERR(data)) {
> @@ -4311,8 +4311,8 @@ static int parse_actions(struct hist_trigger_data *hist_data)
>  				break;
>  			}
>  			data->fn = action_trace;
> -		} else if (strncmp(str, "onmax(", strlen("onmax(")) == 0) {
> -			char *action_str = str + strlen("onmax(");
> +		} else if (strncmp(str, "onmax(", sizeof("onmax(") - 1) == 0) {
> +			char *action_str = str + sizeof("onmax(") - 1;
>  
>  			data = onmax_parse(action_str);
>  			if (IS_ERR(data)) {
> @@ -5548,9 +5548,9 @@ static int event_hist_trigger_func(struct event_command *cmd_ops,
>  			p++;
>  			continue;
>  		}
> -		if (p >= param + strlen(param) - strlen("if") - 1)
> +		if (p >= param + strlen(param) - (sizeof("if") - 1) - 1)
>  			return -EINVAL;
> -		if (*(p + strlen("if")) != ' ' && *(p + strlen("if")) != '\t') {
> +		if (*(p + sizeof("if") - 1) != ' ' && *(p + sizeof("if") - 1) != '\t') {
>  			p++;
>  			continue;
>  		}

