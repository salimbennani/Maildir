Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:40:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C390658055F;
	Tue, 18 Dec 2018 08:51:00 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 08:51:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ApQVHgRM+AMF5SayYPoQl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPjzpsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUADeQBPf1Ar4T/vFYCsQeyCBOwCO/z1jNEmnn71rA63eQ7FgHG2RQtEdwUv3?=
 =?us-ascii?q?TSrdX6KqMSWv2owanSzDXDdO9W2TDh6IPVbx8uv+yHU6t0ccrQ10kgCQLFjk+K?=
 =?us-ascii?q?pof4OD6azf4Ns2mA7+p8UuKvl3UqqxtvrTeyxscjkJXJipgJxVDD8CV02YA4Ls?=
 =?us-ascii?q?C7Rk5jedOoDodcuiWAO4drTM4uXXtktDs5x7Eao5K2fSoHxIw5yxLDb/GLaZWE?=
 =?us-ascii?q?7xz9WOqLPDt1h3xodKihixux90Wr1/fyWdOu0FlQqypIitnMuW4J1xzU8sWHVP?=
 =?us-ascii?q?R98Vm72TqV1ADc9PtEIUYqmqrfMZIhxaQwlpULvUTCGC/5hln2gbeIekk4/uWk?=
 =?us-ascii?q?8fnrb7v4qpOGKoN5iR3yPr4vl8G9Geg4NxIBX2mf+eSyzr3j+kj5Ta1Ojv03lK?=
 =?us-ascii?q?nZrZ/bKd0YpqGnGQ9V1Jgs6xKmAzeh3tUYm2cILEhedRKZgIjmJUvOLOr7Dfih?=
 =?us-ascii?q?mVSslilkx/TcMr3mGJXNIWDPkK39crZl905c1A0zwMhb55JVCbEOPuj/W0DstN?=
 =?us-ascii?q?HDCh85Mgq0w/voCdln14MeX36PDbGdMK/IrVCI4ecvKfGWZIAJoDb9N+Ql5/n2?=
 =?us-ascii?q?gH85g1AdfLWp0oEQaHyiHvRmPl+WYXzjgtoaFWcKvww+TPHliVGYUD5TYWqyUL?=
 =?us-ascii?q?w45j0hFI2mCoLDTJi3gLOdxCe7AoFWZmdeB1COFnfnaZ+IW/QLaCKUJM9hlScJ?=
 =?us-ascii?q?VbygS48nyBGvuxX2y7thLurI5CIYsYjv28Ry5+3WjRsy7yB7D9yB02GRSGF5hn?=
 =?us-ascii?q?kHRyQ23KB4okxx0E2D3rJ6g/FDEdxT5vVJUho1NJLGzux6DczyVRzFftuTVFmm?=
 =?us-ascii?q?RdCmCykrTt0t298Of1p9G9K6gxDAxSWqBaUZl7iKBJMu9KLc0GP8J8J8y3bAya?=
 =?us-ascii?q?kggEMqQspJNW26mKF/8xLfCJLOk0Wcj6yqb7gT3DbR9GefymqDpFxXXxRuUarb?=
 =?us-ascii?q?R3wfZlHZrdLi5kzcSb+iDrAnMghEyc6GMaZKbtzpjVNbRPbsItjeYmSxm3uuCh?=
 =?us-ascii?q?aM3L+DcI3qe2AF1iXHFEcEixwT/WqBNQUmGyiuuXzeAyJ0GVLveUzs9/J+p229?=
 =?us-ascii?q?TkIvywGKbkth16e6+xIPhPycTe8T0awAuCs7tzp0G1O91crMC9WcvwphYLlcYd?=
 =?us-ascii?q?Ql7Vdb1GLZsgt9PoCgL6FinFIebx57v0T01xVzC4VAl8cqoWguzApzL6KYzVxA?=
 =?us-ascii?q?eymZ3ZD2Jr3YNG3y8AqzZK7R31HUyMyW9bsX6PQkt1XjuxmkGVAm83p53NhazX?=
 =?us-ascii?q?ud6o/RAwoPTJ3+SEA39xt9p7HEeSQ944LU1XtxMai7qDPC2tQpBPc7xRakZdtQ?=
 =?us-ascii?q?LKSEFArqGc0AG8euMPAqm0Subh8cPOFS6bQ4MN+8e/qH2K6kJuBgnD29gGRD4Y?=
 =?us-ascii?q?B91F+M9iVmRu7J2ZYF3++X3g+dWzjgi1eht9j9mZpYajEKAmq/1S/kCZZLZq1z?=
 =?us-ascii?q?YYkEE32uLNCwxtlkgZ7iRWRY9F+6C1wawsCpfQedYELn3Q1X00QauninmSq+zz?=
 =?us-ascii?q?xpnDAltKuf3CrSw+v8cBoLIHJERG5njV30O4i7k8gaXFS0bwgujBak5Uf6y7Jb?=
 =?us-ascii?q?pahlNGnTXEFIcjPyL2FjVKuwq7WDb9RO6JMurSVYTuC8bUqGRb76phsQyznjEH?=
 =?us-ascii?q?dGxDAnazGqvY30nx5gh2KHL3Zzr33ZddtrxRjF59zcRv9R3jwYSyl+kjTXAlm8?=
 =?us-ascii?q?P9+0/dSbjZvDs+a+V36/WZ1XayXk0YSAtC6j721wHRK/h+yzmsHgEQUi0S70zd?=
 =?us-ascii?q?5qWT/KrBb9ZInmzKC6MeNhfkl1C17w8ct6GodikoQugJEcw2QVhpKQ/XAfi2f8?=
 =?us-ascii?q?Lc1b2b7ibHoKXTMLwMTa4An/1E1jM3KG3YT5VnqGz8tlZtm6ZH4W2y0n48BLDq?=
 =?us-ascii?q?eU8KJLnS9vrlWkqgLRZOB3ni0Bxvs29H4an+YJtRIoziWcAbAdB1NUPCLymBST?=
 =?us-ascii?q?89Cxsr9Xa32xfriq20pzhtShDLCEogFBV3f1YJYiHSls7sphNFLAymH86obheN?=
 =?us-ascii?q?PId9IcqgWUkwvcj+hSMJ8xiv0KhS99NWP8p3IlzfM7jQd13ZG7p4WHL2Rt/KSk?=
 =?us-ascii?q?Ah9XLDH1ZsUT+i3zgqZahMqZw4evHpB5EDURQJToVe6oEC4Vtfn/LAmBCjo8qn?=
 =?us-ascii?q?OGGbbFGQ+f9Vxrr3bOE5CtKnGWK2MVzdRkRBmBOkNfhBoYUyk9np48Dgqq3tDu?=
 =?us-ascii?q?cF9l5jAN4V71shlMxfhtNxbhSWfTvhuoZi03SJiCLxpW8wdC6F3OMcGF6uJzHi?=
 =?us-ascii?q?dY/oCurQCXK2ybYRhIAn8NWkCeG1/jObyu78Ha8+eEHuq+M+fOYbKWpO1eUPeI?=
 =?us-ascii?q?2Iuv0pZ88DaKLMmPJX5iD/s02kdYWXB5GsLZmygASiANliLNadKbqwm4+iFtss?=
 =?us-ascii?q?+/9/HrUhr15YSTE7tSLclv+xeujKeDKeGQhSV5KTVZ1p8Wxn/I0r8f3FEMhCF0?=
 =?us-ascii?q?ajmtCq8NtSrMTKLWh69WAAQXayJ1NMtU8a082hNBNtLcitPwzrR4lOI6C09ZVV?=
 =?us-ascii?q?z9ncGkfdYFI3ymO1PdGkmKNK6KJTnKw8zsZaO8SLtQjPhbthGquDabFVPjMSqH?=
 =?us-ascii?q?lzXzSx+vNuRMhjmBPBNCoIG9bgptCW/7QdL6ax27NcV7giEszbIohnPFK2gcPC?=
 =?us-ascii?q?N4c0NMqL2Q8CxZju9+G2xH8npqM+2ElzyF4OnfL5YcqeFrDThsl+JG/HQ6zKNY?=
 =?us-ascii?q?7SFeS/xznSvSr9hurEmnk+mP0DVnVhVOpy1PhIKKu0ViJKrY+oNBWXbC4BIC82?=
 =?us-ascii?q?GQBw4WqNtiD92885xXn9zOkr/jbTRP6dTZ+eMCCMXObsGKKnwsNVzuAjGHIhEC?=
 =?us-ascii?q?SGuHPGfeikgVuuuT7WGSstA2p9DLnJsQR75BXRRhHOkbEVhiAPQYLZt3Vy9imr?=
 =?us-ascii?q?me2p1brUGipQXcEZ0J9qvMUeifVLC2cG6U?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAABMJBlch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBg2snjHSLHIFoOZdGgXMVGBMBhx0iNgcNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?KCwkIKS+CNiQBgmIDAwECaQoDBgkBARw0A0YOGQWDHYIBBakFii6MPxeBf4FEg?=
 =?us-ascii?q?jGLDgKJIiSBdZVpCZFgGIFdiBmHYSyKHY8qgU0JgX4zGggbFYMngicXjh4+AQE?=
 =?us-ascii?q?xgQUBARyNRAEB?=
X-IPAS-Result: =?us-ascii?q?A0AeAABMJBlch0O0hNFkHAEBAQQBAQcEAQGBUwUBAQsBg2s?=
 =?us-ascii?q?njHSLHIFoOZdGgXMVGBMBhx0iNgcNAQMBAQEBAQECARMBAQEKCwkIKS+CNiQBg?=
 =?us-ascii?q?mIDAwECaQoDBgkBARw0A0YOGQWDHYIBBakFii6MPxeBf4FEgjGLDgKJIiSBdZV?=
 =?us-ascii?q?pCZFgGIFdiBmHYSyKHY8qgU0JgX4zGggbFYMngicXjh4+AQExgQUBARyNRAEB?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="67362744"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 18 Dec 2018 08:50:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727498AbeLRQry (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 11:47:54 -0500
Received: from mx1.redhat.com ([209.132.183.28]:40344 "EHLO mx1.redhat.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726548AbeLRQrv (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 11:47:51 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mx1.redhat.com (Postfix) with ESMTPS id C3F8E58E3F;
        Tue, 18 Dec 2018 16:47:50 +0000 (UTC)
Received: from f28server.default (ovpn-116-118.phx2.redhat.com [10.3.116.118])
        by smtp.corp.redhat.com (Postfix) with ESMTP id 298C765959;
        Tue, 18 Dec 2018 16:47:47 +0000 (UTC)
From: Daniel Bristot de Oliveira <bristot@redhat.com>
To: linux-kernel@vger.kernel.org
Cc: Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Pavel Tatashin <pasha.tatashin@oracle.com>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        "Steven Rostedt (VMware)" <rostedt@goodmis.org>,
        Zhou Chengming <zhouchengming1@huawei.com>,
        Jiri Kosina <jkosina@suse.cz>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        "Peter Zijlstra (Intel)" <peterz@infradead.org>,
        Chris von Recklinghausen <crecklin@redhat.com>,
        Jason Baron <jbaron@akamai.com>, Scott Wood <swood@redhat.com>,
        Marcelo Tosatti <mtosatti@redhat.com>,
        Clark Williams <williams@redhat.com>, x86@kernel.org
Subject: [PATCH V2 9/9] jump_label: Batch up if arch supports it
Date: Tue, 18 Dec 2018 17:46:38 +0100
Message-Id: <3c212982833e3b27f8610c8389413b81ed5fb0e1.1545149539.git.bristot@redhat.com>
In-Reply-To: <cover.1545149539.git.bristot@redhat.com>
References: <cover.1545149539.git.bristot@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16 (mx1.redhat.com [10.5.110.39]); Tue, 18 Dec 2018 16:47:51 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

If the architecture supports the batching of jump label updates, use it!

An easy way to see the benefits of this patch is switching the
schedstats on and off. For instance:

-------------------------- %< ---------------------------- 
#!/bin/bash

while [ true ]; do 
    sysctl -w kernel.sched_schedstats=1
    sleep 2
    sysctl -w kernel.sched_schedstats=0
    sleep 2
done
-------------------------- >% ----------------------------

while watching the IPI count:

-------------------------- %< ---------------------------- 
# watch -n1 "cat /proc/interrupts | grep Function"
-------------------------- >% ----------------------------

With the current mode, it is possible to see +- 168 IPIs each 2 seconds,
while with this patch the number of IPIs goes to 3 each 2 seconds.

Regarding the performance impact of this patch set, I made two measurements:

    The time to update a key (the task that is causing the change)
    The time to run the int3 handler (the side effect on a thread that
                                      hits the code being changed)

The schedstats static key was chosen as the key to being switched on and off.
The reason being is that it is used in more than 56 places, in a hot path. The
change in the schedstats static key will be done with the following command:

while [ true ]; do
    sysctl -w kernel.sched_schedstats=1
    usleep 500000
    sysctl -w kernel.sched_schedstats=0
    usleep 500000
done

In this way, they key will be updated twice per second. To force the hit of the
int3 handler, the system will also run a kernel compilation with two jobs per
CPU. The test machine is a two nodes/24 CPUs box with an Intel Xeon processor
@2.27GHz.

Regarding the update part, on average, the regular kernel takes 57 ms to update
the schedstats key, while the kernel with the batch updates takes just 1.4 ms
on average. Although it seems to be too good to be true, it makes sense: the
schedstats key is used in 56 places, so it was expected that it would take
around 56 times to update the keys with the current implementation, as the
IPIs are the most expensive part of the update.

Regarding the int3 handler, the non-batch handler takes 45 ns on average, while
the batch version takes around 180 ns. At first glance, it seems to be a high
value. But it is not, considering that it is doing 56 updates, rather than one!
It is taking four times more, only. This gain is possible because the patch
uses a binary search in the vector: log2(56)=5.8. So, it was expected to have
an overhead within four times.

(voice of tv propaganda) But, that is not all! As the int3 handler keeps on for
a shorter period (because the update part is on for a shorter time), the number
of hits in the int3 handler decreased by 10%.

The question then is: Is it worth paying the price of "135 ns" more in the int3
handler?

Considering that, in this test case, we are saving the handling of 53 IPIs,
that takes more than these 135 ns, it seems to be a meager price to be paid.
Moreover, the test case was forcing the hit of the int3, in practice, it
does not take that often. While the IPI takes place on all CPUs, hitting
the int3 handler or not!

For instance, in an isolated CPU with a process running in user-space
(nohz_full use-case), the chances of hitting the int3 handler is barely zero,
while there is no way to avoid the IPIs. By bounding the IPIs, we are improving
a lot this scenario.

Signed-off-by: Daniel Bristot de Oliveira <bristot@redhat.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: "H. Peter Anvin" <hpa@zytor.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: Pavel Tatashin <pasha.tatashin@oracle.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: "Steven Rostedt (VMware)" <rostedt@goodmis.org>
Cc: Zhou Chengming <zhouchengming1@huawei.com>
Cc: Jiri Kosina <jkosina@suse.cz>
Cc: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
Cc: Chris von Recklinghausen <crecklin@redhat.com>
Cc: Jason Baron <jbaron@akamai.com>
Cc: Scott Wood <swood@redhat.com>
Cc: Marcelo Tosatti <mtosatti@redhat.com>
Cc: Clark Williams <williams@redhat.com>
Cc: x86@kernel.org
Cc: linux-kernel@vger.kernel.org
---
 include/linux/jump_label.h |  3 +++
 kernel/jump_label.c        | 29 +++++++++++++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/include/linux/jump_label.h b/include/linux/jump_label.h
index c88d903befc0..ed51ef3e1abd 100644
--- a/include/linux/jump_label.h
+++ b/include/linux/jump_label.h
@@ -219,6 +219,9 @@ extern void arch_jump_label_transform(struct jump_entry *entry,
 				      enum jump_label_type type);
 extern void arch_jump_label_transform_static(struct jump_entry *entry,
 					     enum jump_label_type type);
+extern int arch_jump_label_transform_queue(struct jump_entry *entry,
+					    enum jump_label_type type);
+extern void arch_jump_label_transform_apply(void);
 extern int jump_label_text_reserved(void *start, void *end);
 extern void static_key_slow_inc(struct static_key *key);
 extern void static_key_slow_dec(struct static_key *key);
diff --git a/kernel/jump_label.c b/kernel/jump_label.c
index 22093b5f57c9..08ace142af0a 100644
--- a/kernel/jump_label.c
+++ b/kernel/jump_label.c
@@ -409,6 +409,7 @@ bool jump_label_can_update_check(struct jump_entry *entry, bool init)
 	return 0;
 }
 
+#ifndef HAVE_JUMP_LABEL_BATCH
 static void __jump_label_update(struct static_key *key,
 				struct jump_entry *entry,
 				struct jump_entry *stop,
@@ -421,6 +422,34 @@ static void __jump_label_update(struct static_key *key,
 		}
 	}
 }
+#else
+static void __jump_label_update(struct static_key *key,
+				struct jump_entry *entry,
+				struct jump_entry *stop,
+				bool init)
+{
+	for_each_label_entry(key, entry, stop) {
+
+		if (!jump_label_can_update_check(entry, init))
+			continue;
+
+		if (arch_jump_label_transform_queue(entry,
+						    jump_label_type(entry)))
+			continue;
+
+		/*
+		 * Queue's overflow: Apply the current queue, and then
+		 * queue again. If it stills not possible to queue, BUG!
+		 */
+		arch_jump_label_transform_apply();
+		if (!arch_jump_label_transform_queue(entry,
+						     jump_label_type(entry))) {
+			BUG();
+		}
+	}
+	arch_jump_label_transform_apply();
+}
+#endif
 
 void __init jump_label_init(void)
 {
-- 
2.17.1

