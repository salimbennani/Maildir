Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:44:07 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 91E3D5805F0;
	Thu, 20 Dec 2018 16:46:35 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 16:46:35 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AqAJLrxE7tSaejVkUXqm/W51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8i/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCIOhWsZXyqVQVrRumBwShH//vyiZSi3PqwaE2z+YsHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc31O6gIV+C11LfHzTPMb/hL3zn96ZXDfxciof6SR7Jwd9TeyU0rFwLLllWd?=
 =?us-ascii?q?soPlPzaP2eQMt2iX9fZvVeWqi2M+rQx6vzahxsApiobTh4IVzEjJ9SBjz4Y0Id?=
 =?us-ascii?q?20UVR0YcS4H5tQtiGaKZV5Ttk+TGFvvSY20rIGuZimfCQQz5Qn3RHfZvqaeIaL?=
 =?us-ascii?q?+hLuTPidLSt8iX5/Zb6yiQi+/VK9xuD/SsW4yldHoyhdntXSqnwA0wbf58uHR/?=
 =?us-ascii?q?dn4EutxCqD2xrS5+xGJ00/iLDVJIQ7wrEqk5oeqUTDETHymEXxlKKWaEok9fay?=
 =?us-ascii?q?6+j9YbXpuIWcN4lqhQH6KKgunda/AesgPggPWWiU5/i82aX98UHlRLhGlOA6n6?=
 =?us-ascii?q?fHvJzAOMgWpbK1DxVU34sh8xq/Ci2p0NUcnXkJNlJFfxeHgpDtO1HPJvD4EPi+?=
 =?us-ascii?q?j02vkDh13fDGOKPuApHUInjEnrbhe6hy61RHxQotwtBQ+YhUBqsCIP3tQE/xss?=
 =?us-ascii?q?LXDhsjPwyz2ebnB81x1pkCVmKXHq+ZLKTSvEeM5uIuIOmDepUZuTngK/U+4/7u?=
 =?us-ascii?q?jHk5mUISfKWz3JsXbmy4EepiI0mDfXXshdIBG38QvgUiVOzqlEGCUTlLanayRa?=
 =?us-ascii?q?085y07B5ihDYvZRoCtnaaO3CG0HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJ35z9h15+rTlRIo+TxuFcud0XqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZtSJR0yg?=
 =?us-ascii?q?Qtm8BTExT8g+w9kBY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gfOHYHJjVuWm7yqdasG2i7N73mMzWyJsEFcUw5wVKHF?=
 =?us-ascii?q?UGsbZkvXq9T5+0zDQ6WvCbQhLgtO18qCJrFWZd3uiFVMXO3jN8jGY2Kth2ewAg?=
 =?us-ascii?q?6Fya6WY4r0ZWoRxiXdB1ICkwAI43mGMxMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDshqzRxHFa6w9LWC9qBqxB9fKlGZt?=
 =?us-ascii?q?M9+lNH1WPftwxyJZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq5h+vb7DZ217A39eW4KsA8+k4pEj5swGvFUoi9Gtn3sJR03?=
 =?us-ascii?q?ud4JXKEQUTXYjwUkYx6xh1ubXabjMh6IPT0H1mKbO0vSPa29I1GOslzQ6tftdC?=
 =?us-ascii?q?MK+eCAD+CcwbB8i0J+wslFikdRYEPOFU9K4pMMKqbfqG2Ki3POl+mDKql3hI4I?=
 =?us-ascii?q?d40kiU7SpzVvbI34oZw/GfxgaHTTb8g0u7vcDthI9EYiseHmyhxij+BY5df7F9?=
 =?us-ascii?q?cpwPCWizPcK33NJ+h5j2Vn5c9V6jAU4G2cCzdRqTaVz9wRNf1UANrXO7niu4yi?=
 =?us-ascii?q?R+kys1oaqHwCzO3+PieQIHO25KXmVjjU3gIZOpj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkY1CVUKT9oxgZ0yPkBW?=
 =?us-ascii?q?de3yo0dzKpupX4mRx1lmSdIW13rHrYf8Fw2Bje6MbdRf5XwjoJWi14hSPLCVi7?=
 =?us-ascii?q?Otmj5c+UmIvbsuCiS2KhUYVecCnxwoOHrie752xqARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkT2XcAh5WZ53oHkXrp?=
 =?us-ascii?q?PtVd1qLzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1p1u4rQHLbvRnkDYS1+Au6GIEjOETowUi0D+dAr8JEElcPCzskQmI?=
 =?us-ascii?q?7t+koKVWYmavbaa/1E5kkd+9C7GCpxlWWGzldZc6AS9w8sJ/PUrQ0H3074HoYt?=
 =?us-ascii?q?jRYsgVth2JiBfAlOlVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5Tkd2M0ICoGpVhBy8HXJ/1Tf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQAWRjo6m4A2FhuwyMz9?=
 =?us-ascii?q?akt55S0R5l3lqhtK0O1oLALyUmPepAeudzc1R4KTLBtQ7gFe+UjVNdaS4f50Hy?=
 =?us-ascii?q?Fd5pehthCCKnSHZwRUCmEEQkyFB1f+Prm3+NnP6e6YCvClL/vJZ7WOpvdTV/OJ?=
 =?us-ascii?q?xZKpz4tn8CyANsSJPnl+EfI73lBPUmx+G8Tcgz8PUTAYlzrRb86Hoxex4i13od?=
 =?us-ascii?q?6+8PToWwLv5JGDC7hIMdVo9BC5n72DN/OLhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0wZXJM7Ukcn12aB4j/IvD1dFVE?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyXpVxGqMe1WkC6XJgBRuIGjfRZrEmXjSNPmahumMN54lzE2wLs0hm/UOm4YKz?=
 =?us-ascii?q?Rzb0RNrriI5yNCnvp/A3BB7mZiLeScmyeW9e/YKpMXsfttGit1luJa7248y7ta?=
 =?us-ascii?q?9yxEQP11mC3Prt9huV2mk++PyiZ5XxpKsDpEmIWLvUAxcZneo6NJVXfBtDEX5m?=
 =?us-ascii?q?AZEVxevdh/AdjmoYhKx9TPnb61IzBHpYH658wZUvfdLtqKNnVpFRuhTD3ZFg0I?=
 =?us-ascii?q?STq0LUnQgkVclLeZ8XjD/ctykYTlhJdbEuwTb1cyDP5PTx09RNE=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BmAADbNhxch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGCaYECJ4M+P4N7kBlQAQEGgTUUiQ9yjUiBcy0LCAGEPAICgm4iNgcNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQMBAgkXBBkBGx0BAwIJAQEFA?=
 =?us-ascii?q?wILCgMCAiYCAgMfAQUMAQUBHAYTBYMdAYFoAQMIDQUKi06QCDyLGXwWBQEXgnc?=
 =?us-ascii?q?FgTEBAwIMQoI6ChknDV6BNwIBBRJ5izQXeIEHg3Uugx4BAgKBPgEBHoMIglcCk?=
 =?us-ascii?q?FqQYwkNhwSDRYJthCIYgV+FHwWDLIcujkiLNjCBLAyBe3BQMYI7ghsMF4NKhRS?=
 =?us-ascii?q?FTDIzAQGBAwEBiyKCPgEB?=
X-IPAS-Result: =?us-ascii?q?A0BmAADbNhxch0O0hNFkHQEBBQEHBQGBUwYBCwGCaYECJ4M?=
 =?us-ascii?q?+P4N7kBlQAQEGgTUUiQ9yjUiBcy0LCAGEPAICgm4iNgcNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJhAQEBAQMBAgkXBBkBGx0BAwIJAQEFAwILCgMCAiYCAgM?=
 =?us-ascii?q?fAQUMAQUBHAYTBYMdAYFoAQMIDQUKi06QCDyLGXwWBQEXgncFgTEBAwIMQoI6C?=
 =?us-ascii?q?hknDV6BNwIBBRJ5izQXeIEHg3Uugx4BAgKBPgEBHoMIglcCkFqQYwkNhwSDRYJ?=
 =?us-ascii?q?thCIYgV+FHwWDLIcujkiLNjCBLAyBe3BQMYI7ghsMF4NKhRSFTDIzAQGBAwEBi?=
 =?us-ascii?q?yKCPgEB?=
X-IronPort-AV: E=Sophos;i="5.56,379,1539673200"; 
   d="scan'208";a="56057540"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 16:46:33 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388201AbeLUAqa (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 19:46:30 -0500
Received: from mail-ot1-f67.google.com ([209.85.210.67]:33207 "EHLO
        mail-ot1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1732038AbeLUAqa (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 19:46:30 -0500
Received: by mail-ot1-f67.google.com with SMTP id i20so3703355otl.0;
        Thu, 20 Dec 2018 16:46:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=3jpjGwfi+rSF7Gc7fLV7zYp5ruLZVpA2cEJfcBl2cII=;
        b=QQ7q3f8b06inK2seFbjLnx/9mSOpFt3QYEpM2RWt4OkasvWFplrqwrVW8DeLyCyqOz
         mZ/VNmcBRgc/VVh3exL3cyecDvGmmwmmFpeBbAM3fcFIGZJ07Cv49LjR1ROiAHIaQRtq
         JSEgpO+k8jTh7y9IHHvvRoQwfRmfy+w0Z+kFNuTTfxR+3mi2dUSlC45hlft27pzE4Dw4
         Z2UzQN28jKZGbvuf/GFaBBtoqcMLI+50KVv3fOddvyd29+3K9MsYjAdDUHmWOkEcy/Al
         HgNUMPIvPDNS3F4UNd2pAlpGOs/cDvwK6GwVbOLcoaczv2NVT9KTh62939M+nIpCg81/
         eWyA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=3jpjGwfi+rSF7Gc7fLV7zYp5ruLZVpA2cEJfcBl2cII=;
        b=dbbicUtjy7/QiY4PwLeDK19uPDNSb8BwzGRLFiVVl+DeKnID+MdfxbpO4nas2GoUMD
         I+CrbU9MQhgFKrjnDO6/SEuimUGUQGz2mXcmY22MAJU2qLudNVn07Dzt2YnexPueY9er
         pMNU+vAMPbxRChpykTdy+HU9Gtp0V/fJ4O0mxN6ith1kvLIjol4xW461OiO2q3Hz3DLl
         CmHR/bQwf8uVHhzmEl3jYlfLqcm2azrEYHSGtyKXTgGVl9k8csFEpXn4WLzA1O1Qa/SK
         kZe/h8LJSY2obWpVleFVfAbIJ0aCv477AwOu/nWbx9JASdnrc1OPokXbe8pPYdk7nMVi
         dU7g==
X-Gm-Message-State: AJcUukeaNDlr7ahUk+pJeiEglAWKm4pREiobmJSqfVS1/T3FmOeutjMy
        gQBVhJMjwhJ0v/+++nTfuVGwkBCqvrsuEUriHbDSgAY2
X-Google-Smtp-Source: ALg8bN79FcBNRPQ7gnuJzXlTTgZoB05F1brZirVbJ29wXzhHmLSRVqOF2vi+fFueZZG+Q915+HhkzNaS0f+ic6RzFeU=
X-Received: by 2002:a9d:5f06:: with SMTP id f6mr254898oti.258.1545353189048;
 Thu, 20 Dec 2018 16:46:29 -0800 (PST)
MIME-Version: 1.0
References: <1544083089-13000-1-git-send-email-wanpengli@tencent.com> <20181220144345.GB19579@flask>
In-Reply-To: <20181220144345.GB19579@flask>
From: Wanpeng Li <kernellwp@gmail.com>
Date: Fri, 21 Dec 2018 08:46:32 +0800
Message-ID: <CANRm+Cx4HKfXDpCUtkScjQ-wzCBCpx91twBodkqDRD7U1rZBHg@mail.gmail.com>
Subject: Re: [PATCH] KVM: MMU: Introduce single thread to zap collapsible sptes
To: =?UTF-8?B?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>
Cc: LKML <linux-kernel@vger.kernel.org>, kvm <kvm@vger.kernel.org>,
        Paolo Bonzini <pbonzini@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 20 Dec 2018 at 22:43, Radim Kr=C4=8Dm=C3=A1=C5=99 <rkrcmar@redhat.c=
om> wrote:
>
> 2018-12-06 15:58+0800, Wanpeng Li:
> > From: Wanpeng Li <wanpengli@tencent.com>
> >
> > Last year guys from huawei reported that the call of memory_global_dirt=
y_log_start/stop()
> > takes 13s for 4T memory and cause guest freeze too long which increases=
 the unacceptable
> > migration downtime. [1] [2]
> >
> > Guangrong pointed out:
> >
> > | collapsible_sptes zaps 4k mappings to make memory-read happy, it is n=
ot
> > | required by the semanteme of KVM_SET_USER_MEMORY_REGION and it is not
> > | urgent for vCPU's running, it could be done in a separate thread and =
use
> > | lock-break technology.
> >
> > [1] https://lists.gnu.org/archive/html/qemu-devel/2017-04/msg05249.html
> > [2] https://www.mail-archive.com/qemu-devel@nongnu.org/msg449994.html
> >
> > Several TB memory guest is common now after NVDIMM is deployed in cloud=
 environment.
> > This patch utilizes worker thread to zap collapsible sptes in order to =
lazy collapse
> > small sptes into large sptes during roll-back after live migration fail=
s.
> >
> > Cc: Paolo Bonzini <pbonzini@redhat.com>
> > Cc: Radim Kr=C4=8Dm=C3=A1=C5=99 <rkrcmar@redhat.com>
> > Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
> > ---
> > @@ -5679,14 +5679,41 @@ static bool kvm_mmu_zap_collapsible_spte(struct=
 kvm *kvm,
> >       return need_tlb_flush;
> >  }
> >
> > +void zap_collapsible_sptes_fn(struct work_struct *work)
> > +{
> > +     struct kvm_memory_slot *memslot;
> > +     struct kvm_memslots *slots;
> > +     struct delayed_work *dwork =3D to_delayed_work(work);
> > +     struct kvm_arch *ka =3D container_of(dwork, struct kvm_arch,
> > +                                        kvm_mmu_zap_collapsible_sptes_=
work);
> > +     struct kvm *kvm =3D container_of(ka, struct kvm, arch);
> > +     int i;
> > +
> > +     mutex_lock(&kvm->slots_lock);
> > +     for (i =3D 0; i < KVM_ADDRESS_SPACE_NUM; i++) {
> > +             spin_lock(&kvm->mmu_lock);
> > +             slots =3D __kvm_memslots(kvm, i);
> > +             kvm_for_each_memslot(memslot, slots) {
> > +                     slot_handle_leaf(kvm, (struct kvm_memory_slot *)m=
emslot,
> > +                             kvm_mmu_zap_collapsible_spte, true);
> > +                     if (need_resched() || spin_needbreak(&kvm->mmu_lo=
ck))
> > +                             cond_resched_lock(&kvm->mmu_lock);
>
> I think we shouldn't zap all memslots when kvm_mmu_zap_collapsible_sptes
> only wanted to zap a specific one.
> Please add a list of memslots to be zapped; delete from the list here
> and add in kvm_mmu_zap_collapsible_sptes().

Yeah, that's my original plan, however, i observe a lot of races here,
the memslot can disappear/modify underneath before the worker thread
start to zap even if i introduce lock to protect the list. This patch
delays the worker thread by 60s(to assume memory_global_dirty_log_stop
can absolutely complete) to coalesce all the zap requirements after
live migration fails.

Regards,
Wanpeng Li

>
> > +             }
> > +             spin_unlock(&kvm->mmu_lock);
> > +     }
> > +     kvm->arch.zap_in_progress =3D false;
> > +     mutex_unlock(&kvm->slots_lock);
> > +}
> > +
> > +#define KVM_MMU_ZAP_DELAYED (60 * HZ)
> >  void kvm_mmu_zap_collapsible_sptes(struct kvm *kvm,
> >                                  const struct kvm_memory_slot *memslot)
> >  {
> > -     /* FIXME: const-ify all uses of struct kvm_memory_slot.  */
> > -     spin_lock(&kvm->mmu_lock);
> > -     slot_handle_leaf(kvm, (struct kvm_memory_slot *)memslot,
> > -                      kvm_mmu_zap_collapsible_spte, true);
> > -     spin_unlock(&kvm->mmu_lock);
> > +     if (!kvm->arch.zap_in_progress) {
>
> The list can also serve in place of zap_in_progress -- if there were any
> elements in it, then there is no need to schedule the work again.
>
> Thanks.
