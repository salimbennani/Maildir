Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 16:22:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EF38F580261;
	Wed, 19 Dec 2018 22:16:16 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 22:16:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3Ze87h0SY0uTRncDsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSLfjxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelWoJL9p0MMoBalGQmsHfnixiNUinPq36A31fkqHwHc3AwnGtIDqH?=
 =?us-ascii?q?Tbo8/zNKcKT++1yqbIxijFYfNXxDzw74vIfQ47ofGKQ71wdc7RyEc3Fw7egVWQ?=
 =?us-ascii?q?rJbqPzKR1ugXr2eb6O9gWPuphmU6pQ9xpT2vyd0tionPno8Vz0rL9SR9wIosP9?=
 =?us-ascii?q?K4UlJ0Yd6lEJtOqS6WLZd5QsQnQ21wtyY6zKAGtYS8fCgQx5QqwQPUZf+fc4WQ?=
 =?us-ascii?q?/B7vSOKcLS1liH9rZr6znQu+/Eu8xuHmV8S50k5GojRZntTIrHwA1Bze5tKZRv?=
 =?us-ascii?q?dg4kutwzeC2gDV5+pZO047j7DbJIQkwrMolpocr0DDHijulUXog6+ZaF8k9vKr?=
 =?us-ascii?q?6+v5eLXmoIGTN4tuhgH5KKQuldSzAeU+MgcQQ2iW4fqw2KHn8EHjXblHgOM6nr?=
 =?us-ascii?q?PEvJ3ZOcgXvK+0Dg1N3oYm8Rm/DjOm0NoCnXkAKVJIYBaHj4nvO1HTL/H0FPS/?=
 =?us-ascii?q?jEq2kDdt2f/GOqTtApLDL3jFjrjhZ61w61BTyAUt19BT/ZFUBa8bIPL1REDxsM?=
 =?us-ascii?q?bUDhgjMwy72+rnEsly1psCWWKTBa+UKKfSsV6L5u0xOeWNa5IVtS35K/gk4f7u?=
 =?us-ascii?q?kHA4lUUcfamvwZsYdnS4Eu56LEWeZHrmms0BHnsSvgoiUOzqj0WPUT5JaHazQ6?=
 =?us-ascii?q?Iz/DY7BJimDYfeXI+thrOB0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ9TcDtZLj09h15PfflQso+jx2FMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qWQLOZNGJREyi?=
 =?us-ascii?q?QtWnGz4xSN0xzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWribNl+AjNGYHFiUWZmLysdaQHwiHN8mCPzW6NvEFdVA59SqHF?=
 =?us-ascii?q?XXEZZkvLotX1/ELCT7myCbs5NgtN09KNKqxPatfxl1VJWO/jOMjCY2K2g2q/GA?=
 =?us-ascii?q?yHxq2SY4bwe2USxiPdCFManAAV5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4LwrIEuSIhqzJoHFa939PaEcaAqxBmfKVGZd?=
 =?us-ascii?q?M94VFH1W3Cugx5P5ygKb1ih1EEfwR2uUPuywt4CoFancc2q3MqyRJ4KbiE31NZ?=
 =?us-ascii?q?azOYwZfwN6XNJWn24h+uZLDZ21HE3NmN56cA9e43q1PgvAGuCEov6HFn09hT03?=
 =?us-ascii?q?uB6ZTGFgsSUZTtUkkp8xh2va3VYi4454nMz31jLbG0siPe29IuHOYkygugc81D?=
 =?us-ascii?q?P6+eFQ7yE9cVB86hKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvGC3wuISy3zjE28vcDwg4xEYy8dHnC+yST9GIFefKly?=
 =?us-ascii?q?cpsVBme0JM23wM5zh5rsW35e6V6iCEkK2M6veRqOcVP92Rdc2lgQoXyigSG41S?=
 =?us-ascii?q?B7kyk1rqqD2yzD2+TjdBsdNm9LXmVilkrsIY6vgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1VUOume1CaSb39oxwA3yP4BW?=
 =?us-ascii?q?RexzM7dzCsuprnmRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+gVodccS7xwYOCtSu743ZnARm+n/C1h93mHhI20S7919?=
 =?us-ascii?q?l2SyrIqAzwbZXs16S/KehnZFVnBEfg68pmHYFziogwi4sR2XQAhpWV4GAIkWH8?=
 =?us-ascii?q?MdhA3aL+bXwNRSMEwtLP4Qjl3lFjIWyNx47jSnqdxc5hbcGgYmwKwiI989xKCK?=
 =?us-ascii?q?CM4bxBnCt1oUC3oRjfYPdjhTcd1eUh6GQBjO4XogotwT6QArQTHUleICztmA6E?=
 =?us-ascii?q?79G4rKVLemmvdaK821Z5ndCkFLuCuB1TWG7lepc+Gi999tl/MFXJ0HHp64DrYt?=
 =?us-ascii?q?/Qbc8Ith2PkhfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jzilrxRnsGS34CyBJlhHigLUYDsTfKpFjISqPvmOxyPED06tn?=
 =?us-ascii?q?eUB77fERWD50dhqnLFC4qrOG2PJHkF0dViQwGQJE5FjwARQjo6hYQ1FhywyMzi?=
 =?us-ascii?q?bUd55S0R5ljipRtX0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQDWAJXVGEB0n+Pra049nM6fOYBu24L/vBeriOre1eV/GV?=
 =?us-ascii?q?xZOgyIdm/jCMNtmRMXlmFfE0xk1DXXVhEcTDhzoPUzAXlz7Kb8ODpBez5Cx3rs?=
 =?us-ascii?q?O88PTqQg7v5pGPC7xdMdpx4RC2nLyDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF4Lgh3gZWI87UlNP02qR8jv40EFpFUV?=
 =?us-ascii?q?3hmse0Zc0FOW29NVXHBFqVO7SCPzHE38b3YaakQ71KkOpUrwGwuSqcE0L7IjSD?=
 =?us-ascii?q?ljzpWwqzPu1WkC6bPAJRuIemfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42JlLOaenSaZ6ujYKpAOvvpqAiR7jeRa4HshxrtR?=
 =?us-ascii?q?7SFEQuF1mSTIot5vpVGmjveAyj59XBVSrTZLgdHDgUI3HYb80tEUXXfC4QJI7m?=
 =?us-ascii?q?iKDRkOj8VqB8epuK1KzNXL0qXpJ2EGu9HK+INIBNbRANyIPWBnMhfzHjPQSgwf?=
 =?us-ascii?q?Qmj4G3vYghlimfeK+3ua5rw74szvlYAIR7tfS0QdGfYTC0AjF9sHdsQkFgg4mK?=
 =?us-ascii?q?KW2ZZbrUG1qwPcEYAD5sjK?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BDAABkMhtch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgl0MgQIngz4/g3uQGlABAQaBNRSJD446gXMtCwgBhECCbSI2Bw0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAwECCRcEGQEbHQEDAgkBA?=
 =?us-ascii?q?QUDAgsKAwICJgICAx4BAQUMAQUBHAYBEgWDHQGBaAEDCA0FCotckAg8ixl8FgU?=
 =?us-ascii?q?BF4J3BYExAQMCDEKCOQoZJw1egTcCAQUSeYs0F3iBB4N1LoJXRwECAoE+AQEeg?=
 =?us-ascii?q?wiCVwKQWpAwMwkNhwSDRYJtcIMyGIFfiFCHLYlMhHuBEoojMIEsDYF6cIEBgju?=
 =?us-ascii?q?CGwwXg0qFFIVMMjMBAYEDAQGLEwQLF4InAQE?=
X-IPAS-Result: =?us-ascii?q?A0BDAABkMhtch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBgl0?=
 =?us-ascii?q?MgQIngz4/g3uQGlABAQaBNRSJD446gXMtCwgBhECCbSI2Bw0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmEBAQEBAwECCRcEGQEbHQEDAgkBAQUDAgsKAwICJgI?=
 =?us-ascii?q?CAx4BAQUMAQUBHAYBEgWDHQGBaAEDCA0FCotckAg8ixl8FgUBF4J3BYExAQMCD?=
 =?us-ascii?q?EKCOQoZJw1egTcCAQUSeYs0F3iBB4N1LoJXRwECAoE+AQEegwiCVwKQWpAwMwk?=
 =?us-ascii?q?NhwSDRYJtcIMyGIFfiFCHLYlMhHuBEoojMIEsDYF6cIEBgjuCGwwXg0qFFIVMM?=
 =?us-ascii?q?jMBAYEDAQGLEwQLF4InAQE?=
X-IronPort-AV: E=Sophos;i="5.56,376,1539673200"; 
   d="scan'208";a="55922859"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 22:16:14 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730488AbeLTGQL (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 01:16:11 -0500
Received: from mail-ot1-f65.google.com ([209.85.210.65]:42822 "EHLO
        mail-ot1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726604AbeLTGQL (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 01:16:11 -0500
Received: by mail-ot1-f65.google.com with SMTP id v23so528931otk.9;
        Wed, 19 Dec 2018 22:16:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=DX9TonpDXOTAw99zf1iXPkf/nxAZGH5dpGvLKmPc3wM=;
        b=MHqIg6IyTEnxExu70r6JmOd6ECtmJyvXjYCZOZvRCLzvlC3EJO9sbXZwe9VeOF760Z
         xneC0RFFVbm3m0Ycm/vIX4pabNBb9bhURovdkgI4o+zkvbNy1Fbg0fPknnMqpNwZqU2A
         biAI8G8EJ9ZQWxAkl5Hn2F+YruD+8fAXgRi7d4f8kowvCfo8HbF5JuossLpBbEioNNpF
         P49TKkYoC04lK6wn/FnGWc/K9+3I42PZcJfjfKLbI0rH9d+suw9rbB8ZSWrb5hkBRqGS
         nHcicA2NzDDehR5DYqAWEKc3ydquiyarbbzdg38scNsQAwbhnK6JizpI26q+mMo5ts34
         OQsg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=DX9TonpDXOTAw99zf1iXPkf/nxAZGH5dpGvLKmPc3wM=;
        b=jtNf2YdaQRgJX5hl0GVPHmzkVMXbi3b+T7/b5O3VHtl387E5Cu8G1EDyuDtU0PnmI+
         8hr3mCWt1dEi4fY8BaXzZhENDdO1PGgXhUAnlbYfoSgYT2rTBQ6LP1r2qq0pSF4HRQDc
         NtDyCYldzeebX4t6k+tx4Md1brk31o5DZ6DjqJe1iLus2w9fiFiHBjbTEhCiAG71hx+m
         8EU/LWdfnHi8ZsK3hQ8K36zuIUMoMOGlfe+7NIirG8t0Vlm6bugHYA9nxeisPijTAivM
         A6IleoCRThdmt7sLwCWIkYC4m6CbNgw9bBDPjRZdehQLlOa+/EpSvN+ZxkmsqlmhQEAJ
         sqNg==
X-Gm-Message-State: AA+aEWbmCDzv/ZRuvESixvDmDCXgHh8aYYppSmzJj0Dr9YHXVywa6aqP
        DDwwJbCsY3OhJhedY1WI6uRKIZ48so0S0c4yxHfZAg==
X-Google-Smtp-Source: AFSGD/W2TWid6OwR7bCAyD7GY1JfSgFl2rjY8vHa5eZRSlY8HHjn3HWr7lH9QeKc3VB0WJIbT2UYxkKvSu2mmXkXnoY=
X-Received: by 2002:a9d:5f06:: with SMTP id f6mr17730649oti.258.1545286569641;
 Wed, 19 Dec 2018 22:16:09 -0800 (PST)
MIME-Version: 1.0
References: <1544083089-13000-1-git-send-email-wanpengli@tencent.com> <CANRm+CxRDyQvnGSGWubbYymjvwiU5DjRwhUHsCsWdWPfY7nDnw@mail.gmail.com>
In-Reply-To: <CANRm+CxRDyQvnGSGWubbYymjvwiU5DjRwhUHsCsWdWPfY7nDnw@mail.gmail.com>
From: Wanpeng Li <kernellwp@gmail.com>
Date: Thu, 20 Dec 2018 14:16:14 +0800
Message-ID: <CANRm+Czpq2kzF-QH17bt9k=V7p9fFTe-Vr+ij37mewubvMm4GA@mail.gmail.com>
Subject: Re: [PATCH] KVM: MMU: Introduce single thread to zap collapsible sptes
To: LKML <linux-kernel@vger.kernel.org>, kvm <kvm@vger.kernel.org>
Cc: Paolo Bonzini <pbonzini@redhat.com>,
        Radim Krcmar <rkrcmar@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

kindly ping,
On Fri, 14 Dec 2018 at 15:24, Wanpeng Li <kernellwp@gmail.com> wrote:
>
> ping,
> On Thu, 6 Dec 2018 at 15:58, Wanpeng Li <kernellwp@gmail.com> wrote:
> >
> > From: Wanpeng Li <wanpengli@tencent.com>
> >
> > Last year guys from huawei reported that the call of memory_global_dirt=
y_log_start/stop()
> > takes 13s for 4T memory and cause guest freeze too long which increases=
 the unacceptable
> > migration downtime. [1] [2]
> >
> > Guangrong pointed out:
> >
> > | collapsible_sptes zaps 4k mappings to make memory-read happy, it is n=
ot
> > | required by the semanteme of KVM_SET_USER_MEMORY_REGION and it is not
> > | urgent for vCPU's running, it could be done in a separate thread and =
use
> > | lock-break technology.
> >
> > [1] https://lists.gnu.org/archive/html/qemu-devel/2017-04/msg05249.html
> > [2] https://www.mail-archive.com/qemu-devel@nongnu.org/msg449994.html
> >
> > Several TB memory guest is common now after NVDIMM is deployed in cloud=
 environment.
> > This patch utilizes worker thread to zap collapsible sptes in order to =
lazy collapse
> > small sptes into large sptes during roll-back after live migration fail=
s.
> >
> > Cc: Paolo Bonzini <pbonzini@redhat.com>
> > Cc: Radim Kr=C4=8Dm=C3=A1=C5=99 <rkrcmar@redhat.com>
> > Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
> > ---
> >  arch/x86/include/asm/kvm_host.h |  3 +++
> >  arch/x86/kvm/mmu.c              | 37 ++++++++++++++++++++++++++++++++-=
----
> >  arch/x86/kvm/x86.c              |  4 ++++
> >  3 files changed, 39 insertions(+), 5 deletions(-)
> >
> > diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm=
_host.h
> > index fbda5a9..dde32f9 100644
> > --- a/arch/x86/include/asm/kvm_host.h
> > +++ b/arch/x86/include/asm/kvm_host.h
> > @@ -892,6 +892,8 @@ struct kvm_arch {
> >         u64 master_cycle_now;
> >         struct delayed_work kvmclock_update_work;
> >         struct delayed_work kvmclock_sync_work;
> > +       struct delayed_work kvm_mmu_zap_collapsible_sptes_work;
> > +       bool zap_in_progress;
> >
> >         struct kvm_xen_hvm_config xen_hvm_config;
> >
> > @@ -1247,6 +1249,7 @@ void kvm_mmu_zap_all(struct kvm *kvm);
> >  void kvm_mmu_invalidate_mmio_sptes(struct kvm *kvm, struct kvm_memslot=
s *slots);
> >  unsigned int kvm_mmu_calculate_mmu_pages(struct kvm *kvm);
> >  void kvm_mmu_change_mmu_pages(struct kvm *kvm, unsigned int kvm_nr_mmu=
_pages);
> > +void zap_collapsible_sptes_fn(struct work_struct *work);
> >
> >  int load_pdptrs(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu, unsigned l=
ong cr3);
> >  bool pdptrs_changed(struct kvm_vcpu *vcpu);
> > diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
> > index 7c03c0f..fe87dd3 100644
> > --- a/arch/x86/kvm/mmu.c
> > +++ b/arch/x86/kvm/mmu.c
> > @@ -5679,14 +5679,41 @@ static bool kvm_mmu_zap_collapsible_spte(struct=
 kvm *kvm,
> >         return need_tlb_flush;
> >  }
> >
> > +void zap_collapsible_sptes_fn(struct work_struct *work)
> > +{
> > +       struct kvm_memory_slot *memslot;
> > +       struct kvm_memslots *slots;
> > +       struct delayed_work *dwork =3D to_delayed_work(work);
> > +       struct kvm_arch *ka =3D container_of(dwork, struct kvm_arch,
> > +                                          kvm_mmu_zap_collapsible_spte=
s_work);
> > +       struct kvm *kvm =3D container_of(ka, struct kvm, arch);
> > +       int i;
> > +
> > +       mutex_lock(&kvm->slots_lock);
> > +       for (i =3D 0; i < KVM_ADDRESS_SPACE_NUM; i++) {
> > +               spin_lock(&kvm->mmu_lock);
> > +               slots =3D __kvm_memslots(kvm, i);
> > +               kvm_for_each_memslot(memslot, slots) {
> > +                       slot_handle_leaf(kvm, (struct kvm_memory_slot *=
)memslot,
> > +                               kvm_mmu_zap_collapsible_spte, true);
> > +                       if (need_resched() || spin_needbreak(&kvm->mmu_=
lock))
> > +                               cond_resched_lock(&kvm->mmu_lock);
> > +               }
> > +               spin_unlock(&kvm->mmu_lock);
> > +       }
> > +       kvm->arch.zap_in_progress =3D false;
> > +       mutex_unlock(&kvm->slots_lock);
> > +}
> > +
> > +#define KVM_MMU_ZAP_DELAYED (60 * HZ)
> >  void kvm_mmu_zap_collapsible_sptes(struct kvm *kvm,
> >                                    const struct kvm_memory_slot *memslo=
t)
> >  {
> > -       /* FIXME: const-ify all uses of struct kvm_memory_slot.  */
> > -       spin_lock(&kvm->mmu_lock);
> > -       slot_handle_leaf(kvm, (struct kvm_memory_slot *)memslot,
> > -                        kvm_mmu_zap_collapsible_spte, true);
> > -       spin_unlock(&kvm->mmu_lock);
> > +       if (!kvm->arch.zap_in_progress) {
> > +               kvm->arch.zap_in_progress =3D true;
> > +               schedule_delayed_work(&kvm->arch.kvm_mmu_zap_collapsibl=
e_sptes_work,
> > +                       KVM_MMU_ZAP_DELAYED);
> > +       }
> >  }
> >
> >  void kvm_mmu_slot_leaf_clear_dirty(struct kvm *kvm,
> > diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
> > index d029377..c2af289 100644
> > --- a/arch/x86/kvm/x86.c
> > +++ b/arch/x86/kvm/x86.c
> > @@ -9019,6 +9019,9 @@ int kvm_arch_init_vm(struct kvm *kvm, unsigned lo=
ng type)
> >
> >         INIT_DELAYED_WORK(&kvm->arch.kvmclock_update_work, kvmclock_upd=
ate_fn);
> >         INIT_DELAYED_WORK(&kvm->arch.kvmclock_sync_work, kvmclock_sync_=
fn);
> > +       INIT_DELAYED_WORK(&kvm->arch.kvm_mmu_zap_collapsible_sptes_work=
,
> > +                       zap_collapsible_sptes_fn);
> > +       kvm->arch.zap_in_progress =3D false;
> >
> >         kvm_hv_init_vm(kvm);
> >         kvm_page_track_init(kvm);
> > @@ -9064,6 +9067,7 @@ void kvm_arch_sync_events(struct kvm *kvm)
> >  {
> >         cancel_delayed_work_sync(&kvm->arch.kvmclock_sync_work);
> >         cancel_delayed_work_sync(&kvm->arch.kvmclock_update_work);
> > +       cancel_delayed_work_sync(&kvm->arch.kvm_mmu_zap_collapsible_spt=
es_work);
> >         kvm_free_pit(kvm);
> >  }
> >
> > --
> > 2.7.4
> >
