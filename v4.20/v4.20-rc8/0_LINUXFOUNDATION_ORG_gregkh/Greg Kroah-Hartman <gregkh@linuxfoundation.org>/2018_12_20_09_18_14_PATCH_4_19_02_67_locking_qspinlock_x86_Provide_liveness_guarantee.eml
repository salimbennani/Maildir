Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 19:14:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 57C68580522;
	Thu, 20 Dec 2018 01:35:29 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 01:35:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AvjT00hEooH6HQc5CHy1b/Z1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8mzbnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoYfyqFQSohWxHgmsHOHixyRUhnL106A2z/4sHBvE0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKUO611rfHzTreZP1Twzf975LHchA4rf+OR71wa9bRyUw1GAPDk16d?=
 =?us-ascii?q?roPlPymL2eQCsGib7/FtVeaui24htgFwrTavxsAxionPm40a0EzE9SR+wIYzP9?=
 =?us-ascii?q?G4T1R7YdG9HZZWqiqUOYx2QsY4TGFpviY30r4GtoChfCgM1psnwwTTa/udc4iH?=
 =?us-ascii?q?5B/oSeWfIS9giX57ZL6ygwy+/VWux+HiTMW4zVVHojZfntTNtH0Bzx/e58adRv?=
 =?us-ascii?q?Z+/0qtwzWC2gTJ5u1ZPUw5l6zWIIM7zLEqjJocq0HDEzf2mEroiK+WcV0p+van?=
 =?us-ascii?q?6+v5eLXqvJycOJFuigH4LKsuntazAeMiMggBR2Sb+OK826P//UDhXrlGkvk7nr?=
 =?us-ascii?q?PEvJ3UO8gXvLO1DgxJ3oo56huyDS+q0NECknkGKFJFdgiHj4/sO1zWJPD4DPG/?=
 =?us-ascii?q?g0mjkTtyxPDJIKfhApPTIXjHibvherh860hCxwop1t1f+Z1UBa8bIP7pWU/+qs?=
 =?us-ascii?q?bYDhknPAyw2ernD8991owGVWKVHqCZKL/SsUOP5u83J+mMZYwVtyjnJ/kq+v7j?=
 =?us-ascii?q?lns5mV4bfam00pobcnG4HvJ6I0qHZXrgmMsOEWAPvgAmVuzllEWCUSJPZ3a1R6?=
 =?us-ascii?q?885is0CIO6DYjZQYChmryB3DqhEZ1QaWBLEVSMEXbud4WZVPYAciOSIsl9kjMa?=
 =?us-ascii?q?UbitUZMu1RartAXi0bpoMvLU+jEEtZLkzNV6/fbTlRE19Tx3FcidyXuCT2Nvk2?=
 =?us-ascii?q?MMRj822r1/oENnxleC16h4n+JXFdhJ6/xVVQc6MIbWz/ZmBNDqRgLBYtCJRU6l?=
 =?us-ascii?q?Qtq8BzE9VNYxw94UbEZ7FNWvlRTD3yusA78ImL2HHp008qTA33fvI8Zx0WrJ1K?=
 =?us-ascii?q?4kj1M+WMtAKXWmhrJj9wjUH4PGjl+Wl7i0eqgG3C7C7mGDzXGQs0FeVwJwVabF?=
 =?us-ascii?q?XXUbZkbNqdT550XCT6KhCLg9MwtBz9KCJbVOatHzkVpGQ/LjMszEY22tg2ewGQ?=
 =?us-ascii?q?qIxrSUYYX3YWodwjvSBFIEkw8J+3aGLhYxBiG6rmLaDTxuE0/vYkz2/el/rnO7?=
 =?us-ascii?q?UlE7zwWQY0J90Lq1/wYfheaARPMLwrIEpCAhpi1oHFa82tLWDMaApwphfalGfd?=
 =?us-ascii?q?Mx+lBH1Xjdtwx8OJygILtvhlofcwRxokPv2A97CoRGkcg2snwqyBB+Jr6f0FNE?=
 =?us-ascii?q?bzmYx4z/OqXLKmnu+xCic7TZ2lXA39eZ5KgO6O40pE7+vA60DEUi9XZn095L03?=
 =?us-ascii?q?aH4pXKDQwSUY/+U0ot9hh6oa3abTc554/OyXJsNqy0uCfY2901HOsl1gqgf9BH?=
 =?us-ascii?q?PaKECQ/+CdEVC9KvKewqgVepaB0EMftW9K41OcOmavSH1LSqPOZmgDKpk2BH7J?=
 =?us-ascii?q?ph3UKL8ip2UvTI0Iodw/GEwguHUC/xjE2gss/rg49EfywdHm2lxSjiGoFRfKxy?=
 =?us-ascii?q?cZ8XBmi0J82428txh4TqW35e71OjA1IG2Mm0eRuddVD93AtQ1VgJrnyjgye30z?=
 =?us-ascii?q?t0kzQxpKqFwCPO2/jidAYAOmNTRGhijE3gIIiug9ABQUioaRMklB+k5Ub82qha?=
 =?us-ascii?q?q75zL2jVQUdUYSf2K3tuXbe3trqHe8RP8o8nsT1LUOSgZlCXUrz9rAEA0yPgHG?=
 =?us-ascii?q?tewyo3dyqwtZX6nBx6iWSdI2h1rHfCfcFwxBHf5MHTRPJL3zoGQjV4hifTBlSm?=
 =?us-ascii?q?I9ap+tCUnY/Zsu+iT2KhSoFTcS7zwIKAriS74ndmAR++n/C1gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUChZWa53sHnX3z?=
 =?us-ascii?q?MdVGw63+anUNSCUPw97U5gjlxUJiImiIx4L/SnWS3M9ha8OmbWMR3yI399pKB7?=
 =?us-ascii?q?uM7LxYgSt1pUK1rQfQYfh+hDgR0/Uv52ABg+EVpgUt1D6SDa4IHUlXJiHskxWI?=
 =?us-ascii?q?79ajrKRYfmqvcL6w1FZgktClFr2NvgZcWHPhcJc4ASBw9tl/ME7L0HDr9oHkf9?=
 =?us-ascii?q?zQYcgStxKOlRfAkvNVKIkwlvcRgSpnOGT9vWAqyuIhjBxu2426s5aDK2l34K25?=
 =?us-ascii?q?BRtYPCXvZ8wP4jHtkbpensGO0o+0BJphHTELXIbyQfKsDTIfrvDnNweIED0hpX?=
 =?us-ascii?q?aXA7vfHQmD6Eh4q3LDCYykN3aSJHMB19VtWAGdJFBDgAATRDg6nIQ2FgW0y8z6?=
 =?us-ascii?q?akt5+iod5l3lqhtP1+JoMQPwUnzEqQesazc0ToWfLRVM4gFD4UfVLdKR7uZpEy?=
 =?us-ascii?q?5E+Z2hqRSHKnaHaARQEWEJRkuECkjjP7mp+NnA6vWYCfC4L/fUerWOrupeV/iT?=
 =?us-ascii?q?yJKr04tm+SuMN8qVMnljCf07xlRMXXRjF8vFnDUPTjQdlzjRYM6DuBe85ip3o9?=
 =?us-ascii?q?i/8Pv1WQLv5oiPC7pIPdVs4RC2hqiDOPCKhCZkMjZVzZcMxX7OyLgC018ekSBu?=
 =?us-ascii?q?dz+xEbsesS7BVr7fmqhSDxQDcSN8KNNI774g3glKIcPUkM712aVijvErC1ZJT1?=
 =?us-ascii?q?jhmsCyaMwOImG9Mk7HBUmROLSHIz3L39/4YaemRbJMi+VUsgW6uSyHHE/7IjSD?=
 =?us-ascii?q?iz7pWgizMeFNiSGXJgBRtJuhfRZtF2fjSsnrahm6MN9xkD03zqc4hnLMNW4ALz?=
 =?us-ascii?q?d8d1lBoaGX7SNdmv9/AXBO7mJ5LemYnCaU9+nZJYwQsftuAyR0kfpV4XU6y7RP?=
 =?us-ascii?q?6iFES+d4mC/Trt5ovlGnnfODyjthUBpStDlLgJiHslllOaXcpdF8XiPA/RQQ/S?=
 =?us-ascii?q?CTBg4Mqt9NFNLioeZTx8LJmaa1Ly1NoPzO+s5JKNLZJ4qkKn0oMV/JESTICQID?=
 =?us-ascii?q?BWqkL2zQhEx1lPCU622bqYU8ppHwmZ0IDLhBWwpmRbshFk15EYlac99MVTQ+nO?=
 =?us-ascii?q?ve1ZZQ6A=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAA0YRtch0O0hNFbCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYJpgQIng32IGV+LHYIhl0mBcxUYCwgBhy0iNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAwMBAiAECwENAQE3AQUJAQEkAgUhAgIDDEgZB?=
 =?us-ascii?q?YMdAYIBBAEKpmpwfAwngnYBAQWBMAGFdgMFgQuGc4MlgRwXgX+IbRKDLYJXiSk?=
 =?us-ascii?q?kgXeVIQ9LCYcRikgkgV+FH4pejkeLRIFGgg4zGggoCIMnE4IIDBeIXoVAPzIBA?=
 =?us-ascii?q?YEAAwEBIROKX4JNAQE?=
X-IPAS-Result: =?us-ascii?q?A0ANAAA0YRtch0O0hNFbCBwBAQEEAQEHBAEBgVEHAQELAYJ?=
 =?us-ascii?q?pgQIng32IGV+LHYIhl0mBcxUYCwgBhy0iNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAwMBAiAECwENAQE3AQUJAQEkAgUhAgIDDEgZBYMdAYIBBAEKpmp?=
 =?us-ascii?q?wfAwngnYBAQWBMAGFdgMFgQuGc4MlgRwXgX+IbRKDLYJXiSkkgXeVIQ9LCYcRi?=
 =?us-ascii?q?kgkgV+FH4pejkeLRIFGgg4zGggoCIMnE4IIDBeIXoVAPzIBAYEAAwEBIROKX4J?=
 =?us-ascii?q?NAQE?=
X-IronPort-AV: E=Sophos;i="5.56,376,1539673200"; 
   d="scan'208";a="142905448"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 01:35:27 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1733021AbeLTJep (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 04:34:45 -0500
Received: from mail.kernel.org ([198.145.29.99]:54358 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1732675AbeLTJ3P (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 04:29:15 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 65DD320656;
        Thu, 20 Dec 2018 09:29:14 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545298154;
        bh=/u58DKUfUNaLnmRsiqMSgQoS1DZvMnlwSFo7yOfp48k=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=bH5+Qi16zyI/p80qB3R/H8aRvgzlQoXPzBdqBjylIVncv+BFETXSZ0hGDh3X2rQqq
         zSKI+tWBbeOWK3L/bKrXbI0HC9Gi/F+vvtOZroydHR+EZ3YUzF/Biq65yxjMppmYv4
         xEgZKgVIz7xCjUiBTnfwgP/djx+ki5Ad+4ima0KM=
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        stable@vger.kernel.org, Will Deacon <will.deacon@arm.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        "Peter Zijlstra (Intel)" <peterz@infradead.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        andrea.parri@amarulasolutions.com, longman@redhat.com,
        Ingo Molnar <mingo@kernel.org>,
        Sebastian Andrzej Siewior <bigeasy@linutronix.de>,
        Sasha Levin <sashal@kernel.org>
Subject: [PATCH 4.19 02/67] locking/qspinlock, x86: Provide liveness guarantee
Date: Thu, 20 Dec 2018 10:18:14 +0100
Message-Id: <20181220085903.660728348@linuxfoundation.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20181220085903.562090333@linuxfoundation.org>
References: <20181220085903.562090333@linuxfoundation.org>
User-Agent: quilt/0.65
X-stable: review
X-Patchwork-Hint: ignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

4.19-stable review patch.  If anyone has any objections, please let me know.

------------------

commit 7aa54be2976550f17c11a1c3e3630002dea39303 upstream.

On x86 we cannot do fetch_or() with a single instruction and thus end up
using a cmpxchg loop, this reduces determinism. Replace the fetch_or()
with a composite operation: tas-pending + load.

Using two instructions of course opens a window we previously did not
have. Consider the scenario:

	CPU0		CPU1		CPU2

 1)	lock
	  trylock -> (0,0,1)

 2)			lock
			  trylock /* fail */

 3)	unlock -> (0,0,0)

 4)					lock
					  trylock -> (0,0,1)

 5)			  tas-pending -> (0,1,1)
			  load-val <- (0,1,0) from 3

 6)			  clear-pending-set-locked -> (0,0,1)

			  FAIL: _2_ owners

where 5) is our new composite operation. When we consider each part of
the qspinlock state as a separate variable (as we can when
_Q_PENDING_BITS == 8) then the above is entirely possible, because
tas-pending will only RmW the pending byte, so the later load is able
to observe prior tail and lock state (but not earlier than its own
trylock, which operates on the whole word, due to coherence).

To avoid this we need 2 things:

 - the load must come after the tas-pending (obviously, otherwise it
   can trivially observe prior state).

 - the tas-pending must be a full word RmW instruction, it cannot be an XCHGB for
   example, such that we cannot observe other state prior to setting
   pending.

On x86 we can realize this by using "LOCK BTS m32, r32" for
tas-pending followed by a regular load.

Note that observing later state is not a problem:

 - if we fail to observe a later unlock, we'll simply spin-wait for
   that store to become visible.

 - if we observe a later xchg_tail(), there is no difference from that
   xchg_tail() having taken place before the tas-pending.

Suggested-by: Will Deacon <will.deacon@arm.com>
Reported-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Reviewed-by: Will Deacon <will.deacon@arm.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: andrea.parri@amarulasolutions.com
Cc: longman@redhat.com
Fixes: 59fb586b4a07 ("locking/qspinlock: Remove unbounded cmpxchg() loop from locking slowpath")
Link: https://lkml.kernel.org/r/20181003130957.183726335@infradead.org
Signed-off-by: Ingo Molnar <mingo@kernel.org>
[bigeasy: GEN_BINARY_RMWcc macro redo]
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 arch/x86/include/asm/qspinlock.h | 21 +++++++++++++++++++++
 kernel/locking/qspinlock.c       | 17 ++++++++++++++++-
 2 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/arch/x86/include/asm/qspinlock.h b/arch/x86/include/asm/qspinlock.h
index 3e70bed8a978..055c60a05756 100644
--- a/arch/x86/include/asm/qspinlock.h
+++ b/arch/x86/include/asm/qspinlock.h
@@ -6,9 +6,30 @@
 #include <asm/cpufeature.h>
 #include <asm-generic/qspinlock_types.h>
 #include <asm/paravirt.h>
+#include <asm/rmwcc.h>
 
 #define _Q_PENDING_LOOPS	(1 << 9)
 
+#define queued_fetch_set_pending_acquire queued_fetch_set_pending_acquire
+
+static __always_inline bool __queued_RMW_btsl(struct qspinlock *lock)
+{
+	GEN_BINARY_RMWcc(LOCK_PREFIX "btsl", lock->val.counter,
+			 "I", _Q_PENDING_OFFSET, "%0", c);
+}
+
+static __always_inline u32 queued_fetch_set_pending_acquire(struct qspinlock *lock)
+{
+	u32 val = 0;
+
+	if (__queued_RMW_btsl(lock))
+		val |= _Q_PENDING_VAL;
+
+	val |= atomic_read(&lock->val) & ~_Q_PENDING_MASK;
+
+	return val;
+}
+
 #ifdef CONFIG_PARAVIRT_SPINLOCKS
 extern void native_queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);
 extern void __pv_init_lock_hash(void);
diff --git a/kernel/locking/qspinlock.c b/kernel/locking/qspinlock.c
index ec343276f975..edd75e0c7d96 100644
--- a/kernel/locking/qspinlock.c
+++ b/kernel/locking/qspinlock.c
@@ -231,6 +231,20 @@ static __always_inline u32 xchg_tail(struct qspinlock *lock, u32 tail)
 }
 #endif /* _Q_PENDING_BITS == 8 */
 
+/**
+ * queued_fetch_set_pending_acquire - fetch the whole lock value and set pending
+ * @lock : Pointer to queued spinlock structure
+ * Return: The previous lock value
+ *
+ * *,*,* -> *,1,*
+ */
+#ifndef queued_fetch_set_pending_acquire
+static __always_inline u32 queued_fetch_set_pending_acquire(struct qspinlock *lock)
+{
+	return atomic_fetch_or_acquire(_Q_PENDING_VAL, &lock->val);
+}
+#endif
+
 /**
  * set_locked - Set the lock bit and own the lock
  * @lock: Pointer to queued spinlock structure
@@ -329,7 +343,8 @@ void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val)
 	 * 0,0,0 -> 0,0,1 ; trylock
 	 * 0,0,1 -> 0,1,1 ; pending
 	 */
-	val = atomic_fetch_or_acquire(_Q_PENDING_VAL, &lock->val);
+	val = queued_fetch_set_pending_acquire(lock);
+
 	/*
 	 * If we observe any contention; undo and queue.
 	 */
-- 
2.19.1



