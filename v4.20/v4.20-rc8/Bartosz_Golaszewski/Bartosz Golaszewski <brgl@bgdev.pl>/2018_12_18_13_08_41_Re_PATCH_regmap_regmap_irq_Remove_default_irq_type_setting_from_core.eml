Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 21:10:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7C6C158055F;
	Tue, 18 Dec 2018 05:08:57 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 05:08:57 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ay6YLRRVi4/2XVF10HJ7Ka8y/Vv3V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGGv6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohWxHgmsHOHixyRUhn/vx6A2z/gtHR3E0QEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKTO261rPIzSnEb/NN2Db29YnGchclof6WRrJxcNTeyEc0FwPGj1Wb?=
 =?us-ascii?q?tIvoMCiP1uQCt2iW9PFvVe2yhGE5tQF9uCCvxsM1h4TPm4kbxFfE9SBjz4Y0I9?=
 =?us-ascii?q?21UE17bsC+EJtWqS6aM5F6QsQ4Q2Fnvisx174IuYajcSQU1JgqwwTTZ+GJfoSW?=
 =?us-ascii?q?+B7vSeWcLStiiH9ker+znwi+/VSkx+HmVcS50ExGojdEn9TNrHwByhje58aBR/?=
 =?us-ascii?q?Bg5EmuwyyP2BrW6uxcIUA7i67bK5k5z74umZocr17DEjX1mErolq+WcFsr+uyy?=
 =?us-ascii?q?5+TgeLXmqYeQN45yig7gLqQjgtKzDfg8PwQUQmSW9/qw2Kf+8UD6XLlGlPw7n6?=
 =?us-ascii?q?vBvJDfP8sbp6q5AwFP0oYk7hayFzOm0NUenXkaI1NJYRGHgJbzO1HIPv/4Ce6z?=
 =?us-ascii?q?g1OikTdt2f/GJKbsAovCLnfdirftZ7V95FBGyAo1099f44hYCrYbIPL8QkPxrs?=
 =?us-ascii?q?DXDgclMwyoxObqENF91oIdWW2RGKOYP77SvESM5uIuJemMeYAUtCz8K/gj+/7h?=
 =?us-ascii?q?k3s5lUUBcqmu2JsdcGq4Eeh+I0WFfXrshc8MEWcQsQo/UOzlklqCXSRTZ3avRa?=
 =?us-ascii?q?084D47BZmiDYfCQICtnbOA0D26Hp1QemBJFFSMHW30eIWDXvcGcDiSLdN5kjwY?=
 =?us-ascii?q?SbihTJcs1ROptADk0bZnLe3U+isetZLkz9V14+zTlRcv9T17Fcid0meNT31qkW?=
 =?us-ascii?q?MMXTM5wKd/oUllwFeZzad4m+BYFcBU5/5RSAg6Lp7cz+t5C9zoQALOZNWJRU2i?=
 =?us-ascii?q?QtWnBzExU90wz8UPY0Z7B9WtkBTD0zC2DL8SkryBHIY0/b7E33jtO8Z9zG7L1K?=
 =?us-ascii?q?o7gFkgWMdPMWymibR59wjcHIPJl0SZl6C3daUTxiLN9WGDzXaQs0FcSgJ/TaLF?=
 =?us-ascii?q?XXUHbEvMsdv5/l/CT6OpCbk/LwRO09CCJbVQZt3pl1pGQuzjN8rYY262n2ewBh?=
 =?us-ascii?q?OIxreXYYruemUd2jjdCUcenwAS+3aGKRYxBiO7r23CCzxuEErlY1nw/ulmtHO7?=
 =?us-ascii?q?Ukg0whmXYEJ7ybq65AQZhfyGRPMVxbILpiEhpi5wHFa82dLWFtWBqxBgfKVafd?=
 =?us-ascii?q?My/lNH2XjFuAx6O5yqN7piiUIGcwRro0Pu0A16CplBkcgvq3Mq0ApyKKKC3FNd?=
 =?us-ascii?q?bT+Y2orwOrnWKmn08xCicKrW2lDY0NaL9aYD8vU4q1P/vA63Ekou6Wlo095Q03?=
 =?us-ascii?q?GE/JXFEBISUY7tUkYw7xV1vbXabTcy5ozK1XxgK7K7siLf1N0zAuslyRGgf8lE?=
 =?us-ascii?q?PaOAFQ/yFdAaBse0JOwrnVipcgwLPORI+KEoOMOmcuOM2LS3M+Z4gDKmkWNH7Z?=
 =?us-ascii?q?h900KR7SZzVvTE3pcFw/6C2AuHWCzxjFOgssDxhIBFaiseHmu5ySj4GoFRYrd+?=
 =?us-ascii?q?cpoMCWerO8e33Mlxh4bxW35E816uH0kG2M61dhWIdVzywApQ2V4RoXO5gyu4zi?=
 =?us-ascii?q?V4nC0zoaqbwSPB3f7idB0BOmNQQGlijFHsIZW7jtwAXUioaRQpmwWh5Urg26db?=
 =?us-ascii?q?o6F/JXHJQUhUZyj2M31iUqyou7uCYs5D8pMpvT9MUOShZ1CXUbr9oxoc0yP+EG?=
 =?us-ascii?q?pS3jE7dze2uprnmxx2kn6SLHF2rHDBY8F/2Q/f5MDARf5WxjcGRjN3iSPUBli/?=
 =?us-ascii?q?ONml586UmI3AsuC9VmKhUINccS/wwIOEtSu743BqABKlk/CynN3nDRY10Svh29?=
 =?us-ascii?q?Z2UiXIqQ72YpP32KSiLeJnYk5oCUf86sVgHYFyiIkwhJAW2XUBgpWV/HwHkXr8?=
 =?us-ascii?q?MNlB2KL+amYNSiAPw9LP/Afl30hjJGqTx43lTnWd3tdhZ96ib2MVwC097tpGCK?=
 =?us-ascii?q?eJ7LNemyt1rUG1rQbQYfh7gzccxuEi6H8cg+EVpgUtyj+RDawVHUldJSbsjQiH?=
 =?us-ascii?q?78iirKVLY2aiab2w1Et9nd+7Fr2DrB9TWG3lepg8By9/9dtwMEjD0HDo7oHked?=
 =?us-ascii?q?/Qbc8ctxGOkhfAifRVJ4w1lvYQmSVnPmf9t2U/y+EnlRxuwY26vI+fJmVx+6K5?=
 =?us-ascii?q?BwRUNzzvaMMV5zHtlr1enseN0oCrH5VhHCgLXZTyQfKpFjISqeroNwKUHDIgrX?=
 =?us-ascii?q?ebHKLVHRWD50d+s3LPD5erOmmMK3YDytViQASdKFZbgAAJRzg6mp85Fga3xM3u?=
 =?us-ascii?q?akt55zYR5kLmpRtI0O5nKx7/UmLHrgeydjg0UISfLAZR7gxa5UfaK8me4fxoHy?=
 =?us-ascii?q?1C4p2ttg+NKnGYZwRVC2EGQFeECkvnPrmv49nA7ueZCvC/L/vIfbWBt+heW+2U?=
 =?us-ascii?q?ypKo14ts5yyMOdmXPnl+E/073VJOXHB+G8TEgjUPVjYYlyTXY86Aoxe8/CJ3o9?=
 =?us-ascii?q?u78PTqXgLv+ISOB6FTMdVp5xC5n6ODO/SMiyZ+LDZSzokMymPQyLgDwF4SjDlj?=
 =?us-ascii?q?dzmzHrQBti7NT6PQlrVUDx4BbCNzO9VH77gh3glWIsPbjtL11rhljv86EVtFVF?=
 =?us-ascii?q?rhmt23aswOOW2yKFTHBEOTPrScOTLL2933Yb+7SbBIlupUqga/uSyFHE7jJDiD?=
 =?us-ascii?q?kzjpWgurMeFNiiGbIRNftJu8chZrFWjsUtbmZgenP99wiD082ac0iW/SNW4ALT?=
 =?us-ascii?q?h8dFtArqGR7SNdmPlwB3ZN4WZlLeaanSaU9O3YKpcQsft2DSV4jeNa4HImy7RL?=
 =?us-ascii?q?6CFIXuB6mCzXrtR2uVGpjvGPyiZ7UBpJsjtKhJiEvUNnOaXY8JlPQXfF/BIX4m?=
 =?us-ascii?q?WWBBQHvN9lCtzpu6BNxdnDjqPzKDFe893K+csQHdTbKMWCMClpDR28PTfIEApN?=
 =?us-ascii?q?czeqKX3egUFb2KWX/2GJr94ko5nwhJsIR7lzWl1zDPQaD0l4BtsaLdF8WTZywp?=
 =?us-ascii?q?CBi8tdz3OksB7KVo11uZTOTeCfHu7sKX7Nh6NLYzMCzr/1M8ILMtuoiARZdlBm?=
 =?us-ascii?q?kdGSSALrVtdXr3gkN1dsrQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DdAwDW8Bhch0O0hNFkHQEBHwUBBgGBT?=
 =?us-ascii?q?AKCaIECJ4N8lBKCIWiIJ443gSQDSi8LCAGEQIJcIjUIDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkjDII2JAGCYgMDAQIgBBkBATcBBQkBAQoLDwImAgIDHxIBBQEcBhMFg?=
 =?us-ascii?q?x0BgXMNBQqbdDyKKXB8M4J2AQEFgTABhX0DBRJ5izQXPoFBgRGCXQcugwWBfIM?=
 =?us-ascii?q?IgleJPgYEh1uQAwmCYoQtilEYgV2IUIcqjjuLKTATgRMBggx+B2wGgjUSAYIUF?=
 =?us-ascii?q?4NKhRSFQD4zAQGBAwEBjXMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0DdAwDW8Bhch0O0hNFkHQEBHwUBBgGBTAKCaIECJ4N8lBK?=
 =?us-ascii?q?CIWiIJ443gSQDSi8LCAGEQIJcIjUIDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2J?=
 =?us-ascii?q?AGCYgMDAQIgBBkBATcBBQkBAQoLDwImAgIDHxIBBQEcBhMFgx0BgXMNBQqbdDy?=
 =?us-ascii?q?KKXB8M4J2AQEFgTABhX0DBRJ5izQXPoFBgRGCXQcugwWBfIMIgleJPgYEh1uQA?=
 =?us-ascii?q?wmCYoQtilEYgV2IUIcqjjuLKTATgRMBggx+B2wGgjUSAYIUF4NKhRSFQD4zAQG?=
 =?us-ascii?q?BAwEBjXMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="55623733"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 05:08:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726627AbeLRNIx (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 08:08:53 -0500
Received: from mail-it1-f193.google.com ([209.85.166.193]:34897 "EHLO
        mail-it1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726403AbeLRNIx (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 08:08:53 -0500
Received: by mail-it1-f193.google.com with SMTP id p197so4163963itp.0
        for <linux-kernel@vger.kernel.org>; Tue, 18 Dec 2018 05:08:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=bgdev-pl.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=YG/noF5r6WrVPI0SHnz7dCop6MuyGFe2j9giV5trjck=;
        b=AAdnqlM7fYQ8tMx630IQpcXdKfh2sagOr91HKUjzh7uGctzI2Zf317BOQnOv3897St
         VS5nYhhQ79OPMlBnvCCH4GBv5Rwpch8zGBcRyFuG2XVWcdmVqCCwz53dMJxOZhd48hWO
         VlE00UBAsn1oN4rRAUBig3Lmu8M3sb9dJY03L6anwu1ggq0/ZfUPQN++LV1Al+Z9ogay
         DXCZ9VEp/fk3K0wIQbd8v1kCnMjHwQ5ZV3RmnIjyi8NX6xx8EXmhc1EfJWj8aYswbcfg
         pLgVWCvhebYXxlTijrsS6YRvTMxUcPT4xWrYRIsa296nnJbTeb8/WhtlZio+ZxSsJVzL
         fuAw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=YG/noF5r6WrVPI0SHnz7dCop6MuyGFe2j9giV5trjck=;
        b=AdAL6KwDiREDn1M5M96KTk03RLv0ruDfMo7NYrXMnwE6/dhg+D7MjN54EdGqx5I7bO
         LOClqvryX2f/j3V/n70G1tKUUZI5RJXrU3tEmZBJbq5pKF2gBmCdkTVqLj1jtFYkS0FE
         u7X4nc66HNY/Un4eM6CHrCoLLhdlCf+rfL7x2cTME0F13uismnjfrxCZNzMJUaTDDtld
         NGGfLxZXmvK9W1PH4bdHP/S3L2sfFew2OJMZHkE/TBBCs3u7mnRODJrAPJUeFwyn+dwA
         sIjms8hWUQfOSkJ+aPQNl281dyc4vyerRXGAA3c++RlNqRPjyY6P3qKywfZLxasWi1+b
         bwfA==
X-Gm-Message-State: AA+aEWYOVCBb0uTQQfFPTJG5rCRevRxVr8lI4C89yduKAshS89n/FBuE
        hkPiZ+1eJGkCBU2IaQzU9R6154yPl6N9+jhJzAGeAw==
X-Google-Smtp-Source: AFSGD/UJuaU1fUfwc+gZrg9zFpkR3yaPQZnFNErdBmNeVxlRoOPE59bORX/+FHQrXGw/5K/DDkQgd4lZ+prpXDuKvoE=
X-Received: by 2002:a24:f909:: with SMTP id l9mr2668293ith.74.1545138532086;
 Tue, 18 Dec 2018 05:08:52 -0800 (PST)
MIME-Version: 1.0
References: <20181218105813.GA6957@localhost.localdomain>
In-Reply-To: <20181218105813.GA6957@localhost.localdomain>
From: Bartosz Golaszewski <brgl@bgdev.pl>
Date: Tue, 18 Dec 2018 14:08:41 +0100
Message-ID: <CAMRc=MexeOcqNgMr1Vq=T1NTeizP20fj3vx3EwxQNv20Cc6bAw@mail.gmail.com>
Subject: Re: [PATCH] regmap: regmap-irq: Remove default irq type setting from core
To: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
Cc: mazziesaccount@gmail.com, Mark Brown <broonie@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        "Rafael J . Wysocki" <rafael@kernel.org>, ldewangan@nvidia.com,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

wt., 18 gru 2018 o 11:58 Matti Vaittinen
<matti.vaittinen@fi.rohmeurope.com> napisa=C5=82(a):
>
> The common code should not set IRQ type. Read HW defaults to the
> cache at startup instead of forcing type to EDGE_BOTH. If
> default setting is needed this should be done via normal
> mechanisms or by chip specific code if normal mechanisms are not
> suitable for some reason. Common regmap-irq code should not have
> defaults hard-coded but keep the HW/boot defaults untouched.
>
> Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
> ---
> So let's try removing the hard-coded default setting from generic
> regmap-irq code as discussed with Mark here:
> https://lore.kernel.org/lkml/20181217180722.GG27909@sirena.org.uk/
>
> Core code should not care about the default trigger level - such
> settings should be done by code which knows the target
> platform/board.
>
> I was not able to test this change as I have no max77620 which seems to
> be the only user of regmap-irq type-setting in tree as of now.
>
> The patch was created on top of the regulator-next tree, with
> "regmap: irq: handle HW using separate rising/falling edge interrupts"
> from Bartosz Golaszewski cherry-picked. This should still cleanly apply
> on regmap-tree.
>
>  drivers/base/regmap/regmap-irq.c | 22 ++++++++--------------
>  1 file changed, 8 insertions(+), 14 deletions(-)
>
> diff --git a/drivers/base/regmap/regmap-irq.c b/drivers/base/regmap/regma=
p-irq.c
> index 603b1554f81c..8b216b2e2c19 100644
> --- a/drivers/base/regmap/regmap-irq.c
> +++ b/drivers/base/regmap/regmap-irq.c
> @@ -625,26 +625,20 @@ int regmap_add_irq_chip(struct regmap *map, int irq=
, int irq_flags,
>         }
>
>         if (chip->num_type_reg && !chip->type_in_mask) {
> -               for (i =3D 0; i < chip->num_irqs; i++) {
> -                       reg =3D chip->irqs[i].type_reg_offset / map->reg_=
stride;
> -                       d->type_buf_def[reg] |=3D chip->irqs[i].type_risi=
ng_mask |
> -                                       chip->irqs[i].type_falling_mask;
> -               }
>                 for (i =3D 0; i < chip->num_type_reg; ++i) {
>                         if (!d->type_buf_def[i])
>                                 continue;
>
>                         reg =3D chip->type_base +
>                                 (i * map->reg_stride * d->type_reg_stride=
);
> -                       if (chip->type_invert)
> -                               ret =3D regmap_irq_update_bits(d, reg,
> -                                       d->type_buf_def[i], 0xFF);
> -                       else
> -                               ret =3D regmap_irq_update_bits(d, reg,
> -                                       d->type_buf_def[i], 0x0);
> -                       if (ret !=3D 0) {
> -                               dev_err(map->dev,
> -                                       "Failed to set type in 0x%x: %x\n=
",
> +
> +                       ret =3D regmap_read(map, reg, &d->type_buf_def[i]=
);
> +
> +                       if (d->chip->type_invert)
> +                               d->type_buf_def[i] =3D ~d->type_buf_def[i=
];
> +
> +                       if (ret) {
> +                               dev_err(map->dev, "Failed to get type def=
aults at 0x%x: %d\n",
>                                         reg, ret);
>                                 goto err_alloc;
>                         }
> --
> 2.14.3
>
>
> --
> Matti Vaittinen
> ROHM Semiconductors
>
> ~~~ "I don't think so," said Rene Descartes.  Just then, he vanished ~~~

Works with my work-in-progress max77650 driver that uses the new
type_in_mask flag.

Tested-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
