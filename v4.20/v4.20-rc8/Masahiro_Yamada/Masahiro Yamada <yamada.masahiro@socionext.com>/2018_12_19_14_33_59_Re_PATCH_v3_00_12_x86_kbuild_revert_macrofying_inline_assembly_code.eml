Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 22:54:08 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4B595580522;
	Wed, 19 Dec 2018 06:37:53 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga006-1.jf.intel.com with ESMTP; 19 Dec 2018 06:37:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7Y+itBHg04VMSdva+y9ODZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osm7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCIOhWsZXyp0AWrRa8HgSsGP/jxyVUinPqwaE30eIsGhzG0gw6GNIOtW?=
 =?us-ascii?q?zZotLvO6cJS++1zKjIzS/Eb/hL2zjy8o3IfQo8rv6WQLl9dsrQxlMqFwzfk1qf?=
 =?us-ascii?q?s5bpPzaP2eQWqWeb7+tgVfioi2M8sAFxpSSgxsYrionPmI0UxUzE+T9lz4YyIN?=
 =?us-ascii?q?21UUh2asOqHptXsiGVLYp2QsU6TmFrpik60LsGtoC/fCQQz5Qn3RHfZ+SZf4SU?=
 =?us-ascii?q?+B7jT+GRLS93hHJjZbKznRGy8VKvyuD6S8K6005KozJbntXQsn0BzQHf58aZRv?=
 =?us-ascii?q?dn40us2iqD2xrS5+xGOUw4i7bXJpo7zrMzlpcfq1rPEjL0lUnsg6KbeEMp8fWy?=
 =?us-ascii?q?5ev9eLXpvJqcOpd0ig7gNqQundSyAfo3MgcQRWiX4+e826P5/U3/XrpKiuc6kq?=
 =?us-ascii?q?7DsJDVPcgbp6i5DBFJ0os79RqzEzOr3M4FkXQJMl5JYg+Lgov1N13UIf31D++z?=
 =?us-ascii?q?g1G2nzdqw/DGMKfhApLILnXblLfhfLB961NTyQYqztBQ+YhUCrcfL/L3Q0Pxs9?=
 =?us-ascii?q?LZDhknPAyu2OvnFtp92Z0EWW6VAa+WLrnSsVmW6eIrOeWMY5UVuDnlJ/g/+/Hu?=
 =?us-ascii?q?lWM5mUMafaSx2ZsXaXO4Eep8L0SWfHrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1GCkqDEXb0d4qeXPcAciKSItJ7nTwC?=
 =?us-ascii?q?WrisUIsh1RCotA/nxLtrNOvU+isEtZ390Nh5/fHclRY39TZsFcSSz3mNT31onm?=
 =?us-ascii?q?MPXzI23qd/rlJnxleA1qh4hfpYFdtI6vNNUwc6M4PczuNgB9DzXALBYsmGSFK8?=
 =?us-ascii?q?Ttq6BjExS8o7w8USbEZlB9WikhfD0jKwDL8Ol7yLA580/rjG33frJcZw0HLG1K?=
 =?us-ascii?q?gnj1k7TcpDL2ymhqhj9wfNA47FiVmWl6Gvda4Exi7C6H+DzXaSvEFfSANwUr/K?=
 =?us-ascii?q?XXYFakvSrNT2/EXCT7C1BLQjMwtBz9OCK6RQZt3oi1VGWOnsONDEb22tnGewAA?=
 =?us-ascii?q?6CxqmQY4ryZ2UdwCLdBVAZnA8J43aJKxIyBie7rGLYFzxhC1Tvb0To8el9rXO7?=
 =?us-ascii?q?SlQ5zwWLb01nyrq09QQZhf2aS/MPwL0EvD0tpClzHFa4x9jWEcaPpxJ9fKVAZt?=
 =?us-ascii?q?Mw+EpI2njHtwNjJJCgL7pthlgFcwtpuUPjzBF3CoRGkcg3o3Im1gtyKaSE0Fxf?=
 =?us-ascii?q?czOUx4z/OrrSKmPq5hCgd7bW2k3C0NaR4qoP9PU4q1DkvAG1Fkoj829r08VP33?=
 =?us-ascii?q?ub/JXKCAsSUZT+Ukss8xh6prfaYjQy5o/O1H1sN7W0vSHG294zGOQlzROgdc9F?=
 =?us-ascii?q?MKyYDA/yD9EaB8+2JeMwn1imcB0FM/5S9aIuJMymauaJ17StPOZjmzKmk39K4I?=
 =?us-ascii?q?R80kKK6ip9RfTE35cDw/GEwASHUy3wg0umssDygYpEfy0dHnKjySj4A45cfq1z?=
 =?us-ascii?q?fZsRBWiyOcG2x9V+iITrW35X71OjA1IG2Mm0eRuddVD93AtQ1VgJrnyjgye30z?=
 =?us-ascii?q?t0kzQxpKqFwCPO2/jidAYAOmNTXmlijEvjLpKuj98HW0ikdQ4pmwW/5Ub73qRU?=
 =?us-ascii?q?uL5wL23OTkhWZSj2KGdiX7C0trqDZc5P9ZwpvT9WUOS6fVCVVLr9rwEG3CPkGm?=
 =?us-ascii?q?tU3Co7eC2yupXlgxx6j3qQLXZyrHbDecB83wzf5MHaRfNK2joGRS94iSTYB1Sm?=
 =?us-ascii?q?Ptmp+8mUmInHsuykS22hUZhTezHxzYycrCu7+XFqARqnkvCxgNLnCws60Sz819?=
 =?us-ascii?q?VwTiXHthX8Yorq16S8L+1neFJlBFv968p8B4F/nZE8hJAW2XgGmJqV+WALnnv0?=
 =?us-ascii?q?MdVewaj+dmYCRSYXw97J5wjowE1iIWiOx47jVHWdw81hasK+YmMX3CI98s9LBL?=
 =?us-ascii?q?2V7LxCgSt6vF64oRjNbvh6mzcX0eEu52ICg+EVpAotyT2QArMIEklZJyDslwmI?=
 =?us-ascii?q?4Mq4rKVYf2uvdbmw1ExjndGuFr2CowdcWGrndZcmByN/8sJ/MFfU2n3p9o7kYM?=
 =?us-ascii?q?XQbc4UthCMlhfAjutVJ4grmvsEmyVnIn79smM/y+EgkxNux566sZODK2Vs+qK5?=
 =?us-ascii?q?HxFZOif0Z8MV5jHik6JektyK0ICoG5VrAi8LU4fwTfK0DDISsuzqNxqJED05sH?=
 =?us-ascii?q?uaGKDQHQmC6Ed9tHLPEoumN3WWJHkf0NVjSwORJE1ZgAAIQjo6moQ1GRytxMzk?=
 =?us-ascii?q?aE15/Cwe5kbkqhtQzeJlLwLwXX3YpAesdzc4UpyfLAdN4wFG5kfVN9Ge7+1pEy?=
 =?us-ascii?q?FZ+J2hsBKCKmiBawtUCmEJX1SOB0r/Mbm2+dnA7++YC/K8L/TUZLWBt/deW+2U?=
 =?us-ascii?q?xZ610Ytm4jWMNtiJPnZ4FP02wU5DXXF/G8TElDQDUS0XlyTRb8GFoBew4DF4rs?=
 =?us-ascii?q?e68P7zQgLg+ZOPC6dOMdVo4x23gaCDN/OJhCZkMzlY0IkAxWTPyLgZ014fkCVu?=
 =?us-ascii?q?dzirEbQdui/BVqPQmqlLDxEFbyN/LtdH76U53gNVI87Ulsv11qJkjv4yE1pFVU?=
 =?us-ascii?q?LumsCqZcwJImGxLlDHBFyMNLSJOzLL2dz3YbinRL1UjeVUsQCwuDmBH0/iODSD?=
 =?us-ascii?q?iyfmVxS1Pe5QiyGbOQRUuJuhfRZ1FWjjUNXmZwWhP99qljI226M7h3PQOW4YMD?=
 =?us-ascii?q?hxaEdNrryW7SNFjfRzAW1B7nx5LeaanyaV9fXXKpETsfFzGCR7i/pa4Ggmy7tS?=
 =?us-ascii?q?9CxEWP11mC7IotFyuV2pjumPxSRhUBdVrjZLhYSLvVhtOKnD95lAX2rE8wwJ7W?=
 =?us-ascii?q?mKFxsKoN5lAMX1u69M0tjPiL7zKDBa/tPU58QcAc3UKMOBMHU5MBvpGCTbDA0K?=
 =?us-ascii?q?TTOwMWHfhkpdkOyd93GPr5g6rITsl4QKSrNBSFM1EfYaWQxZG4kjJphwFhYjlb?=
 =?us-ascii?q?iSloZc4Hu4ox75R8hAuJ3DEPWIDqO8BiyeiOxhbgABwbLiKswiP4jy10UqPkhz?=
 =?us-ascii?q?mY3GEgzVVMtEoix7aScvp05M935zXnF10EXgPFD+qEQPHOK5y0ZlwjB1Zv4goX?=
 =?us-ascii?q?K1uw86?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAADNVhpch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGCaYECJ4N9lBWCDRRolmGBcy0LCAGHLSI1CA0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmEBAQEBAgEBAiAEGQEBNwEEAQkBAQoLAwoCAiYCAgMfEgEFA?=
 =?us-ascii?q?RwGEwUDE4MHAYF5BwEFCpw8PIopcHwzgnYBAQWBMAGFeAMFgQuKGIEcghaBEYI?=
 =?us-ascii?q?USTWDBRkDhGiCV4kwG4F2hRaFQosdBwKHEIpSGGB+hR+KXIp0g02LMjCBJwGCC?=
 =?us-ascii?q?zMaI4EBBoIBATOCGwwXg0qFFIVOMTIBgQQBAY1gAQE?=
X-IPAS-Result: =?us-ascii?q?A0AeAADNVhpch0O0hNFkHQEBBQEHBQGBUgcBCwGCaYECJ4N?=
 =?us-ascii?q?9lBWCDRRolmGBcy0LCAGHLSI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mEBAQEBAgEBAiAEGQEBNwEEAQkBAQoLAwoCAiYCAgMfEgEFARwGEwUDE4MHAYF?=
 =?us-ascii?q?5BwEFCpw8PIopcHwzgnYBAQWBMAGFeAMFgQuKGIEcghaBEYIUSTWDBRkDhGiCV?=
 =?us-ascii?q?4kwG4F2hRaFQosdBwKHEIpSGGB+hR+KXIp0g02LMjCBJwGCCzMaI4EBBoIBATO?=
 =?us-ascii?q?CGwwXg0qFFIVOMTIBgQQBAY1gAQE?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="44670772"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 06:37:51 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729561AbeLSOes (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 09:34:48 -0500
Received: from conssluserg-01.nifty.com ([210.131.2.80]:37666 "EHLO
        conssluserg-01.nifty.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728689AbeLSOer (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 09:34:47 -0500
Received: from mail-vs1-f43.google.com (mail-vs1-f43.google.com [209.85.217.43]) (authenticated)
        by conssluserg-01.nifty.com with ESMTP id wBJEYa46023267;
        Wed, 19 Dec 2018 23:34:36 +0900
DKIM-Filter: OpenDKIM Filter v2.10.3 conssluserg-01.nifty.com wBJEYa46023267
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nifty.com;
        s=dec2015msa; t=1545230077;
        bh=UeoJeP+KrOhnGZv5MdxTs/f/kZ4bRafHorW8k5oxO+M=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=t4Yuctods5jrCsUpLIdTpOvPunOjJD3CmSyCeCVYDn7IVrbFle1aT9Ioa6XISteq2
         dtekbN2Jn/veyRqhMyZDZ2JZMVDS61LWEgh6JXMDJXsYdlT1pzTjjQO2RUsEj+C3bD
         YPcfLhOQzK+al3dGdVLbxSVqo87X8vR3OIV8kwA3Tf7enusqshiTw7V5TT8vCrsA1d
         OfMtbuV/xEJ5eo+crDu+ns5uBU2E0kuI+TLjhuVl51eFfJKc18LQ+iHevbzCM34enH
         +lGK9VN2xNWWNMrc3q2x+1XMd3GlcaO/DXWnmLSvEuSE1f/xc2THhWXYplLY0LfCOF
         pR9SWyjC6bz7w==
X-Nifty-SrcIP: [209.85.217.43]
Received: by mail-vs1-f43.google.com with SMTP id x64so12371290vsa.5;
        Wed, 19 Dec 2018 06:34:36 -0800 (PST)
X-Gm-Message-State: AA+aEWb5spmoUMQGfGFF84ed3lOBcHPaCUCjpyis8UUX1iYr6aDgCuYJ
        28lWqsr95EA3tkez0V5fcwKi6D+SQqUjVB9ZWig=
X-Google-Smtp-Source: AFSGD/UOGiSkiDli2zyySXzQ+AGY3MTja/MRKAIv7O3w4B63EL2TVlygZU+jPS5j7PhUqNeuQKn+G5eZlpHRk0CIFkY=
X-Received: by 2002:a67:a858:: with SMTP id r85mr10030304vse.215.1545230075286;
 Wed, 19 Dec 2018 06:34:35 -0800 (PST)
MIME-Version: 1.0
References: <1545062607-8599-1-git-send-email-yamada.masahiro@socionext.com> <20181219112028.GA38175@gmail.com>
In-Reply-To: <20181219112028.GA38175@gmail.com>
From: Masahiro Yamada <yamada.masahiro@socionext.com>
Date: Wed, 19 Dec 2018 23:33:59 +0900
X-Gmail-Original-Message-ID: <CAK7LNAQjZP8mYD02+=uvzO135fTB5GyU7_snV7ymFAjMBsep8w@mail.gmail.com>
Message-ID: <CAK7LNAQjZP8mYD02+=uvzO135fTB5GyU7_snV7ymFAjMBsep8w@mail.gmail.com>
Subject: Re: [PATCH v3 00/12] x86, kbuild: revert macrofying inline assembly code
To: Ingo Molnar <mingo@kernel.org>
Cc: X86 ML <x86@kernel.org>, Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        "H . Peter Anvin" <hpa@zytor.com>,
        Richard Biener <rguenther@suse.de>,
        Segher Boessenkool <segher@kernel.crashing.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Juergen Gross <jgross@suse.com>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Kees Cook <keescook@chromium.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Arnd Bergmann <arnd@arndb.de>,
        Andrey Ryabinin <aryabinin@virtuozzo.com>,
        virtualization@lists.linux-foundation.org,
        Luc Van Oostenryck <luc.vanoostenryck@gmail.com>,
        Alok Kataria <akataria@vmware.com>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        Jann Horn <jannh@google.com>,
        linux-arch <linux-arch@vger.kernel.org>,
        Alexey Dobriyan <adobriyan@gmail.com>,
        linux-sparse@vger.kernel.org,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux Kbuild mailing list <linux-kbuild@vger.kernel.org>,
        Yonghong Song <yhs@fb.com>,
        Michal Marek <michal.lkml@markovi.net>,
        Arnaldo Carvalho de Melo <acme@redhat.com>,
        Jan Beulich <JBeulich@suse.com>, Nadav Amit <namit@vmware.com>,
        David Woodhouse <dwmw@amazon.co.uk>,
        Alexei Starovoitov <ast@kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 19, 2018 at 9:44 PM Ingo Molnar <mingo@kernel.org> wrote:
>
>
> * Masahiro Yamada <yamada.masahiro@socionext.com> wrote:
>
> > This series reverts the in-kernel workarounds for inlining issues.
> >
> > The commit description of 77b0bf55bc67 mentioned
> > "We also hope that GCC will eventually get fixed,..."
> >
> > Now, GCC provides a solution.
> >
> > https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html
> > explains the new "asm inline" syntax.
> >
> > The performance issue will be eventually solved.
> >
> > [About Code cleanups]
> >
> > I know Nadam Amit is opposed to the full revert.
> > He also claims his motivation for macrofying was not only
> > performance, but also cleanups.
> >
> > IIUC, the criticism addresses the code duplication between C and ASM.
> >
> > If so, I'd like to suggest a different approach for cleanups.
> > Please see the last 3 patches.
> > IMHO, preprocessor approach is more straight-forward, and readable.
> > Basically, this idea should work because it is what we already do for
> > __ASM_FORM() etc.
> >
> > [Quick Test of "asm inline" of GCC 9]
> >
> > If you want to try "asm inline" feature, the patch is available:
> > https://lore.kernel.org/patchwork/patch/1024590/
> >
> > The number of symbols for arch/x86/configs/x86_64_defconfig:
> >
> >                             nr_symbols
> >   [1]    v4.20-rc7       :   96502
> >   [2]    [1]+full revert :   96705   (+203)
> >   [3]    [2]+"asm inline":   96568   (-137)
> >
> > [3]: apply my patch, then replace "asm" -> "asm_inline"
> >     for _BUG_FLAGS(), refcount_add(), refcount_inc(), refcount_dec(),
> >         annotate_reachable(), annotate_unreachable()
> >
> >
> > Changes in v3:
> >   - Split into per-commit revert (per Nadav Amit)
> >   - Add some cleanups with preprocessor approach
> >
> > Changes in v2:
> >   - Revive clean-ups made by 5bdcd510c2ac (per Peter Zijlstra)
> >   - Fix commit quoting style (per Peter Zijlstra)
> >
> > Masahiro Yamada (12):
> >   Revert "x86/jump-labels: Macrofy inline assembly code to work around
> >     GCC inlining bugs"
> >   Revert "x86/cpufeature: Macrofy inline assembly code to work around
> >     GCC inlining bugs"
> >   Revert "x86/extable: Macrofy inline assembly code to work around GCC
> >     inlining bugs"
> >   Revert "x86/paravirt: Work around GCC inlining bugs when compiling
> >     paravirt ops"
> >   Revert "x86/bug: Macrofy the BUG table section handling, to work
> >     around GCC inlining bugs"
> >   Revert "x86/alternatives: Macrofy lock prefixes to work around GCC
> >     inlining bugs"
> >   Revert "x86/refcount: Work around GCC inlining bug"
> >   Revert "x86/objtool: Use asm macros to work around GCC inlining bugs"
> >   Revert "kbuild/Makefile: Prepare for using macros in inline assembly
> >     code to work around asm() related GCC inlining bugs"
> >   linux/linkage: add ASM() macro to reduce duplication between C/ASM
> >     code
> >   x86/alternatives: consolidate LOCK_PREFIX macro
> >   x86/asm: consolidate ASM_EXTABLE_* macros
> >
> >  Makefile                                  |  9 +--
> >  arch/x86/Makefile                         |  7 ---
> >  arch/x86/include/asm/alternative-asm.h    | 22 +------
> >  arch/x86/include/asm/alternative-common.h | 47 +++++++++++++++
> >  arch/x86/include/asm/alternative.h        | 30 +---------
> >  arch/x86/include/asm/asm.h                | 46 +++++----------
> >  arch/x86/include/asm/bug.h                | 98 +++++++++++++------------------
> >  arch/x86/include/asm/cpufeature.h         | 82 +++++++++++---------------
> >  arch/x86/include/asm/jump_label.h         | 22 +++++--
> >  arch/x86/include/asm/paravirt_types.h     | 56 +++++++++---------
> >  arch/x86/include/asm/refcount.h           | 81 +++++++++++--------------
> >  arch/x86/kernel/macros.S                  | 16 -----
> >  include/asm-generic/bug.h                 |  8 +--
> >  include/linux/compiler.h                  | 56 ++++--------------
> >  include/linux/linkage.h                   |  8 +++
> >  scripts/Kbuild.include                    |  4 +-
> >  scripts/mod/Makefile                      |  2 -
> >  17 files changed, 249 insertions(+), 345 deletions(-)
> >  create mode 100644 arch/x86/include/asm/alternative-common.h
> >  delete mode 100644 arch/x86/kernel/macros.S
>
> I absolutely agree that this needs to be resolved in v4.20.
>
> So I did the 1-9 reverts manually myself as well, because I think the
> first commit should be reverted fully to get as close to the starting
> point as possible (we are late in the cycle) - and came to the attached
> interdiff between your series and mine.
>
> Does this approach look OK to you, or did I miss something?


It looks OK to me.

I thought the diff was a good cleanup part,
but we can deal with it later on,
so I do not mind it.

Thanks!



> Thanks,
>
>         Ingo
>
> =============>
>
>  entry/calling.h          |    2 -
>  include/asm/jump_label.h |   50 ++++++++++++++++++++++++++++++++++-------------
>  2 files changed, 38 insertions(+), 14 deletions(-)
>
> diff --git a/arch/x86/entry/calling.h b/arch/x86/entry/calling.h
> index 25e5a6bda8c3..20d0885b00fb 100644
> --- a/arch/x86/entry/calling.h
> +++ b/arch/x86/entry/calling.h
> @@ -352,7 +352,7 @@ For 32-bit we have the following conventions - kernel is built with
>  .macro CALL_enter_from_user_mode
>  #ifdef CONFIG_CONTEXT_TRACKING
>  #ifdef HAVE_JUMP_LABEL
> -       STATIC_BRANCH_JMP l_yes=.Lafter_call_\@, key=context_tracking_enabled, branch=1
> +       STATIC_JUMP_IF_FALSE .Lafter_call_\@, context_tracking_enabled, def=0
>  #endif
>         call enter_from_user_mode
>  .Lafter_call_\@:
> diff --git a/arch/x86/include/asm/jump_label.h b/arch/x86/include/asm/jump_label.h
> index cf88ebf9a4ca..21efc9d07ed9 100644
> --- a/arch/x86/include/asm/jump_label.h
> +++ b/arch/x86/include/asm/jump_label.h
> @@ -2,6 +2,19 @@
>  #ifndef _ASM_X86_JUMP_LABEL_H
>  #define _ASM_X86_JUMP_LABEL_H
>
> +#ifndef HAVE_JUMP_LABEL
> +/*
> + * For better or for worse, if jump labels (the gcc extension) are missing,
> + * then the entire static branch patching infrastructure is compiled out.
> + * If that happens, the code in here will malfunction.  Raise a compiler
> + * error instead.
> + *
> + * In theory, jump labels and the static branch patching infrastructure
> + * could be decoupled to fix this.
> + */
> +#error asm/jump_label.h included on a non-jump-label kernel
> +#endif
> +
>  #define JUMP_LABEL_NOP_SIZE 5
>
>  #ifdef CONFIG_X86_64
> @@ -53,26 +66,37 @@ static __always_inline bool arch_static_branch_jump(struct static_key *key, bool
>
>  #else  /* __ASSEMBLY__ */
>
> -.macro STATIC_BRANCH_NOP l_yes:req key:req branch:req
> -.Lstatic_branch_nop_\@:
> -       .byte STATIC_KEY_INIT_NOP
> -.Lstatic_branch_no_after_\@:
> +.macro STATIC_JUMP_IF_TRUE target, key, def
> +.Lstatic_jump_\@:
> +       .if \def
> +       /* Equivalent to "jmp.d32 \target" */
> +       .byte           0xe9
> +       .long           \target - .Lstatic_jump_after_\@
> +.Lstatic_jump_after_\@:
> +       .else
> +       .byte           STATIC_KEY_INIT_NOP
> +       .endif
>         .pushsection __jump_table, "aw"
>         _ASM_ALIGN
> -       .long           .Lstatic_branch_nop_\@ - ., \l_yes - .
> -       _ASM_PTR        \key + \branch - .
> +       .long           .Lstatic_jump_\@ - ., \target - .
> +       _ASM_PTR        \key - .
>         .popsection
>  .endm
>
> -.macro STATIC_BRANCH_JMP l_yes:req key:req branch:req
> -.Lstatic_branch_jmp_\@:
> -       .byte 0xe9
> -       .long \l_yes - .Lstatic_branch_jmp_after_\@
> -.Lstatic_branch_jmp_after_\@:
> +.macro STATIC_JUMP_IF_FALSE target, key, def
> +.Lstatic_jump_\@:
> +       .if \def
> +       .byte           STATIC_KEY_INIT_NOP
> +       .else
> +       /* Equivalent to "jmp.d32 \target" */
> +       .byte           0xe9
> +       .long           \target - .Lstatic_jump_after_\@
> +.Lstatic_jump_after_\@:
> +       .endif
>         .pushsection __jump_table, "aw"
>         _ASM_ALIGN
> -       .long           .Lstatic_branch_jmp_\@ - ., \l_yes - .
> -       _ASM_PTR        \key + \branch - .
> +       .long           .Lstatic_jump_\@ - ., \target - .
> +       _ASM_PTR        \key + 1 - .
>         .popsection
>  .endm
>
>


-- 
Best Regards
Masahiro Yamada
