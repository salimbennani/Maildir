Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 16:02:48 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 598EB58049E;
	Sun, 23 Dec 2018 22:39:02 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga004-1.jf.intel.com with ESMTP; 23 Dec 2018 22:39:02 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AqNgejxKRNdRLSMqjzdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUKfj8rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kaKTA5/mHZhM9+gq1Vrx2upQBwzYHVYIGOLPpzfLjQfc8YSGdbQspdSyJMD4O6?=
 =?us-ascii?q?YoASD+QBJ+FYr4zlqlYQrRuxHw6sD/7txT9Vm3T72q070/k9HgHGxgMgGM4CvW?=
 =?us-ascii?q?/UrNXoLqgTX/66zKjSwTrfaPNW3C7w5Y7VeR4iufGBRax8fdbVxEU1Cg/IgEuc?=
 =?us-ascii?q?pZb4Mz6WyugBqWmW4uh4We6yl2IrsRx9rzagy8s2lIXFmJgZxk3A+Ch52Io4Kt?=
 =?us-ascii?q?21RFRlbdOrFJZcrT+WO5ZoTs84Xm1lvDo2x7sbspChZicK0o4oxxvHZvyHbYeI?=
 =?us-ascii?q?5hXjWf6PITd3mn1lYqizhxWs/ki6zO3zSM203ExNripfndnArnEN1xrN5cibUv?=
 =?us-ascii?q?Zx4Fut1DKV2wzO5OxIP1o4mbfYJpI92LI9l5gevVzGHiDsmUX2iKGWdl8j+uit?=
 =?us-ascii?q?8+nnZrTmppmBN457kw3+Mbohmta5AesmNggCRm+b+Oq61LL95030W6tKjvIona?=
 =?us-ascii?q?nDqpzaJtoUprS/AwBL1oYv8RG/Dy2p0NgAh3kIMEpFeA6bj4juI1zOJPH4DfSh?=
 =?us-ascii?q?jFi2nzZr2uvLPrngApXLM3jCn63tfbd7605A1gUzycpT6I5TCrEEOPjzQFP+tM?=
 =?us-ascii?q?TEDh8lNAy52+bnB8981oMCQ22PBbWVMKPPsVCS4OIvLPKBZIsUuDb7Nvgk6OTi?=
 =?us-ascii?q?jX4/mV8BY6ap2YEbZ2y/HvRjO0+Ze2bjgs8dEWcWuQozVPbliEaCUT5UZHa+Rb?=
 =?us-ascii?q?g86Ss5CI+9CYfDR4atgKGO3SuhH51WYHxGBU6IEXvya4qEXPIMYjqIIsB9ijwE?=
 =?us-ascii?q?SaShS4g52BGtrgD6zaBrLu7V+iICs5Lj28N45+nSlRE06Dx1AN6R02CLT2FogG?=
 =?us-ascii?q?wIQyU607x4oUx40l2Dy7R3g+REFdxP4PNESho1OoTCz+NkEdzyWhjOftGSSFm4?=
 =?us-ascii?q?RNWqBjUxTtE0w98KeEt9H9Sijhbe3yulGbMVlrqLBIAq/aLYxXT+O8F9y3Pe3q?=
 =?us-ascii?q?k7k1YmWtdPNXGhhqNn6gfcHZDJnFuDm6aqb6sc2jXN+3mFzWeVuEFYUQhwUbjK?=
 =?us-ascii?q?XHwFZ0vWq8j56V3GT7O0FbsnNQ5Bw9aYKqRWct3pkUlGRPD7NdTCYmKxnmCwBQ?=
 =?us-ascii?q?qIxrKMdobqZ38R3CLHCEgAkgAT+3mGOBM6BiegpWLeETNvGUjuY0Pq7elxtne7?=
 =?us-ascii?q?QlUowAGNak1rz6C19QINhfyAV/MT2aoJtz0lqzpqE1eywdLXB8CbqAp8YapTe9?=
 =?us-ascii?q?U94FRA1WLHrAF9Op2gL6Z/hl8RaQh3vkXu1wlpBYVEi8QlsHQqzA9qI6KCzFxB?=
 =?us-ascii?q?by+Y3Yz3OrDPKmjy4QqjZLLM1lDf0NaZ4KEP6PsjplXnvQGpEFci8np939lU1X?=
 =?us-ascii?q?uc+ovFDA4IXZ3tVUY38gBwp6vGbSkl+4PUyXpsPLGusj/Dx90mHvElxQunf9tF?=
 =?us-ascii?q?NqOLChXyE8wDC8eyMuMqn0WmYQwePOBV8q45JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs32mYFEaSsSH2al0ijkGYhRa7Z2?=
 =?us-ascii?q?fYYKD2euPsK2ys9/h57rR35X6lqjC0ka18+ufBqYd0b90hFI1UQLvXynnjO1zz?=
 =?us-ascii?q?5unDEzraqf3yvOz/75dBUdOW5LR2hijVHyLoiylN0aWEmobw40lBqq/0r6xq5b?=
 =?us-ascii?q?pLhhIGnXW0tHYy/2L2R6WKuqqrWCe9JP6I8vsShPUOWze1eaRqT/oxsb1SPuBG?=
 =?us-ascii?q?9exDE9dzG3tZT1hR16iGSBLHltqHrVY91/xRDa5NbEX/5ewiIGRDVkiTnQHlW8?=
 =?us-ascii?q?PMOm/dSOm5fDr+CxTWShVpJIfCnvzIOAsja75GJwDR2+mfCzhsPoEQwg3SDn0N?=
 =?us-ascii?q?lqUD3CrAzgbYnzy6S6LeVnc1FtBF/96Mp1AJtyk4Uui5ELxXgVmI+V8mEZnmfp?=
 =?us-ascii?q?PtVWwqb+bHsLRT4WzN/Z+gnl2Et/Ln2Xw4L1TGmSwsxkZ9OieGMZxjo979xWCK?=
 =?us-ascii?q?eT9LFEgSx1ol+ioQPQe/d9mCodyeA16H4bmOwJvAstziOAArEdB0VYPCrslwiW?=
 =?us-ascii?q?4NC6tqlYeGGvcb2o3kpkgd+hFK2Coh1bWHvhYZgtByhw7sFiMF7W1H3z95rpeN?=
 =?us-ascii?q?3RbdIVqx2VnA3Mj+lTKJItiPUKgTBrNn76vX0g0+Q7lwBh3YmmvIibLGVg5KC5?=
 =?us-ascii?q?DQRdNjLrfMMf4C3tgbxdnsaL3ICvA5NhFS8QXJbzSfKoETQStenoNgqUET08rG?=
 =?us-ascii?q?ubFqTbHQOF9EhmqHfPGYixN36LPHkZ0cliRB6FKU1fhwAUQSw6noMjGQCs3sDh?=
 =?us-ascii?q?a0B55jYe5lPjrhtMy+RoNwTwU2vFpQeobCs0R4abLBZM8g5C4ELVO9SE7u1vBy?=
 =?us-ascii?q?FY4oGhrAuVJ2ybeQtIDGIJWk+FB1z5Pbmu/97A8+eGCeqkMvvOeq6DqehfV/eO?=
 =?us-ascii?q?2JKu3ZFq/zeKNsWTIHZiC+c31VZEXXB8A87ZgSkASzQLlyLRaM6WvA2z+jBsoc?=
 =?us-ascii?q?Cl7vvqWBjj5Y+OC7ZJNdVv+ha2gbqMNuKKhSZ5LypY2Y0IxXPS1Lcf21sSgTl0?=
 =?us-ascii?q?dzaxCbQAqTLNTKXIl69LDh4bbjl/O9dS460g3glCJ8jbh8jx1r55iP41FlhEWU?=
 =?us-ascii?q?bgmsGvecwFPWW9OEnbC0aMMbSMPSfLzN3vYaOgVb1Qi/1Zth2qtjadFk/jPzKD?=
 =?us-ascii?q?mCHoVhCvK+5Mii6bMQdauIG8dBZtFGfiQMjnah29LN94kzk2zacoiXPNMG5PeQ?=
 =?us-ascii?q?R7JhdPp7Cf4D5bqvZyAWpM6jxiN+bSyAiD6OyNAZYftrNaH2wghv9R4H09k5NV?=
 =?us-ascii?q?8ShbSf0zkyzX+I0962q6m/WCn2I0GCFFrSxG0dqG?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AvAABmfiBch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YJsfycKmAaBYC0UaJZngXYqEwGHMCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I?=
 =?us-ascii?q?6IoJvAQIDAQIkUgYJAQEKGC4DVAYNAQUCAQEBgx2CAgWoQzOFQIRejD+CFoERJ?=
 =?us-ascii?q?4I2NYpgAoEqAY8BNpBpBgMNkVYGGIFgiCyHWopfiEuIRYIOcIFugU6CJxeOKjI?=
 =?us-ascii?q?BATGBBAEBAQ6LCiqBBIEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AvAABmfiBch0O0hNFjHgEGBwaBUQkLAYJsfycKmAaBYC0?=
 =?us-ascii?q?UaJZngXYqEwGHMCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I6IoJvAQIDAQIkU?=
 =?us-ascii?q?gYJAQEKGC4DVAYNAQUCAQEBgx2CAgWoQzOFQIRejD+CFoERJ4I2NYpgAoEqAY8?=
 =?us-ascii?q?BNpBpBgMNkVYGGIFgiCyHWopfiEuIRYIOcIFugU6CJxeOKjIBATGBBAEBAQ6LC?=
 =?us-ascii?q?iqBBIEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,391,1539673200"; 
   d="scan'208";a="45200997"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 23 Dec 2018 22:38:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726691AbeLXGfj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Mon, 24 Dec 2018 01:35:39 -0500
Received: from szxga04-in.huawei.com ([45.249.212.190]:17055 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725933AbeLXGfi (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 24 Dec 2018 01:35:38 -0500
Received: from DGGEMS409-HUB.china.huawei.com (unknown [172.30.72.58])
        by Forcepoint Email with ESMTP id ACD4343990583;
        Mon, 24 Dec 2018 14:35:35 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS409-HUB.china.huawei.com
 (10.3.19.209) with Microsoft SMTP Server id 14.3.408.0; Mon, 24 Dec 2018
 14:35:35 +0800
Subject: Re: [PATCH v3] f2fs: add bio cache for IPU
To: <jaegeuk@kernel.org>
CC: <linux-f2fs-devel@lists.sourceforge.net>,
        <linux-kernel@vger.kernel.org>, <chao@kernel.org>
References: <20181219092956.8257-1-yuchao0@huawei.com>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <dcdaecd0-035b-83c7-76e3-6ca305a049cc@huawei.com>
Date: Mon, 24 Dec 2018 14:35:34 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181219092956.8257-1-yuchao0@huawei.com>
Content-Type: text/plain; charset="windows-1252"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Jaegeuk,

Will kernel still hang with this v3?

Thanks,

On 2018/12/19 17:29, Chao Yu wrote:
> SQLite in Wal mode may trigger sequential IPU write in db-wal file, after
> commit d1b3e72d5490 ("f2fs: submit bio of in-place-update pages"), we
> lost the chance of merging page in inner managed bio cache, result in
> submitting more small-sized IO.
> 
> So let's add temporary bio in writepages() to cache mergeable write IO as
> much as possible.
> 
> Test case:
> 1. xfs_io -f /mnt/f2fs/file -c "pwrite 0 65536" -c "fsync"
> 2. xfs_io -f /mnt/f2fs/file -c "pwrite 0 65536" -c "fsync"
> 
> Before:
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65544, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65552, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65560, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65568, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65576, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65584, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65592, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65600, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65608, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65616, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65624, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65632, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65640, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65648, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65656, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65664, size = 4096
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), NODE, sector = 57352, size = 4096
> 
> After:
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), DATA, sector = 65544, size = 65536
> f2fs_submit_write_bio: dev = (251,0)/(251,0), rw = WRITE(S), NODE, sector = 57368, size = 4096
> 
> Signed-off-by: Chao Yu <yuchao0@huawei.com>
> ---
> v3:
> - introduce f2fs_submit_ipu_bio() to check page Writeback status.
>  fs/f2fs/data.c    | 85 ++++++++++++++++++++++++++++++++++++++++++-----
>  fs/f2fs/f2fs.h    |  3 ++
>  fs/f2fs/segment.c |  5 ++-
>  3 files changed, 84 insertions(+), 9 deletions(-)
> 
> diff --git a/fs/f2fs/data.c b/fs/f2fs/data.c
> index cdfe9a7b856e..e5cd3fd9e215 100644
> --- a/fs/f2fs/data.c
> +++ b/fs/f2fs/data.c
> @@ -341,20 +341,20 @@ static void __submit_merged_bio(struct f2fs_bio_info *io)
>  	io->bio = NULL;
>  }
>  
> -static bool __has_merged_page(struct f2fs_bio_info *io, struct inode *inode,
> +static bool __has_merged_page(struct bio *bio, struct inode *inode,
>  						struct page *page, nid_t ino)
>  {
>  	struct bio_vec *bvec;
>  	struct page *target;
>  	int i;
>  
> -	if (!io->bio)
> +	if (!bio)
>  		return false;
>  
>  	if (!inode && !page && !ino)
>  		return true;
>  
> -	bio_for_each_segment_all(bvec, io->bio, i) {
> +	bio_for_each_segment_all(bvec, bio, i) {
>  
>  		if (bvec->bv_page->mapping)
>  			target = bvec->bv_page;
> @@ -405,7 +405,7 @@ static void __submit_merged_write_cond(struct f2fs_sb_info *sbi,
>  			struct f2fs_bio_info *io = sbi->write_io[btype] + temp;
>  
>  			down_read(&io->io_rwsem);
> -			ret = __has_merged_page(io, inode, page, ino);
> +			ret = __has_merged_page(io->bio, inode, page, ino);
>  			up_read(&io->io_rwsem);
>  		}
>  		if (ret)
> @@ -474,6 +474,59 @@ int f2fs_submit_page_bio(struct f2fs_io_info *fio)
>  	return 0;
>  }
>  
> +int f2fs_merge_page_bio(struct f2fs_io_info *fio)
> +{
> +	struct bio *bio = *fio->bio;
> +	struct page *page = fio->encrypted_page ?
> +			fio->encrypted_page : fio->page;
> +
> +	if (!f2fs_is_valid_blkaddr(fio->sbi, fio->new_blkaddr,
> +			__is_meta_io(fio) ? META_GENERIC : DATA_GENERIC))
> +		return -EFAULT;
> +
> +	trace_f2fs_submit_page_bio(page, fio);
> +	f2fs_trace_ios(fio, 0);
> +
> +	if (bio && (*fio->last_block + 1 != fio->new_blkaddr ||
> +			!__same_bdev(fio->sbi, fio->new_blkaddr, bio))) {
> +		__submit_bio(fio->sbi, bio, fio->type);
> +		bio = NULL;
> +	}
> +alloc_new:
> +	if (!bio) {
> +		bio = __bio_alloc(fio->sbi, fio->new_blkaddr, fio->io_wbc,
> +				BIO_MAX_PAGES, false, fio->type, fio->temp);
> +		*fio->last_block = fio->new_blkaddr;
> +		bio_set_op_attrs(bio, fio->op, fio->op_flags);
> +	}
> +
> +	if (bio_add_page(bio, page, PAGE_SIZE, 0) < PAGE_SIZE) {
> +		__submit_bio(fio->sbi, bio, fio->type);
> +		bio = NULL;
> +		goto alloc_new;
> +	}
> +
> +	if (fio->io_wbc)
> +		wbc_account_io(fio->io_wbc, page, PAGE_SIZE);
> +
> +	*fio->last_block = fio->new_blkaddr;
> +
> +	inc_page_count(fio->sbi, WB_DATA_TYPE(fio->page));
> +
> +	*fio->bio = bio;
> +	return 0;
> +}
> +
> +void f2fs_submit_ipu_bio(struct f2fs_sb_info *sbi, struct bio *bio,
> +							struct page *page)
> +{
> +	if (!__has_merged_page(bio, NULL, page, 0))
> +		return;
> +
> +	if (bio)
> +		__submit_bio(sbi, bio, DATA);
> +}
> +
>  void f2fs_submit_page_write(struct f2fs_io_info *fio)
>  {
>  	struct f2fs_sb_info *sbi = fio->sbi;
> @@ -1903,6 +1956,8 @@ int f2fs_do_write_data_page(struct f2fs_io_info *fio)
>  }
>  
>  static int __write_data_page(struct page *page, bool *submitted,
> +				struct bio **bio,
> +				sector_t *last_block,
>  				struct writeback_control *wbc,
>  				enum iostat_type io_type)
>  {
> @@ -1928,6 +1983,8 @@ static int __write_data_page(struct page *page, bool *submitted,
>  		.need_lock = LOCK_RETRY,
>  		.io_type = io_type,
>  		.io_wbc = wbc,
> +		.bio = bio,
> +		.last_block = last_block,
>  	};
>  
>  	trace_f2fs_writepage(page, DATA);
> @@ -2029,6 +2086,10 @@ static int __write_data_page(struct page *page, bool *submitted,
>  		f2fs_balance_fs(sbi, need_balance_fs);
>  
>  	if (unlikely(f2fs_cp_error(sbi))) {
> +		if (bio && *bio) {
> +			__submit_bio(sbi, *bio, DATA);
> +			*bio = NULL;
> +		}
>  		f2fs_submit_merged_write(sbi, DATA);
>  		submitted = NULL;
>  	}
> @@ -2055,7 +2116,7 @@ static int __write_data_page(struct page *page, bool *submitted,
>  static int f2fs_write_data_page(struct page *page,
>  					struct writeback_control *wbc)
>  {
> -	return __write_data_page(page, NULL, wbc, FS_DATA_IO);
> +	return __write_data_page(page, NULL, NULL, NULL, wbc, FS_DATA_IO);
>  }
>  
>  /*
> @@ -2071,6 +2132,8 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
>  	int done = 0;
>  	struct pagevec pvec;
>  	struct f2fs_sb_info *sbi = F2FS_M_SB(mapping);
> +	struct bio *bio = NULL;
> +	sector_t last_block;
>  	int nr_pages;
>  	pgoff_t uninitialized_var(writeback_index);
>  	pgoff_t index;
> @@ -2147,17 +2210,20 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
>  			}
>  
>  			if (PageWriteback(page)) {
> -				if (wbc->sync_mode != WB_SYNC_NONE)
> +				if (wbc->sync_mode != WB_SYNC_NONE) {
>  					f2fs_wait_on_page_writeback(page,
>  								DATA, true);
> -				else
> +					f2fs_submit_ipu_bio(sbi, bio, page);
> +				} else {
>  					goto continue_unlock;
> +				}
>  			}
>  
>  			if (!clear_page_dirty_for_io(page))
>  				goto continue_unlock;
>  
> -			ret = __write_data_page(page, &submitted, wbc, io_type);
> +			ret = __write_data_page(page, &submitted, &bio,
> +						&last_block, wbc, io_type);
>  			if (unlikely(ret)) {
>  				/*
>  				 * keep nr_to_write, since vfs uses this to
> @@ -2206,6 +2272,9 @@ static int f2fs_write_cache_pages(struct address_space *mapping,
>  	if (nwritten)
>  		f2fs_submit_merged_write_cond(F2FS_M_SB(mapping), mapping->host,
>  								NULL, 0, DATA);
> +	/* submit cached bio of IPU write */
> +	if (bio)
> +		__submit_bio(sbi, bio, DATA);
>  
>  	return ret;
>  }
> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> index 9e56c78fe519..eeede26339a8 100644
> --- a/fs/f2fs/f2fs.h
> +++ b/fs/f2fs/f2fs.h
> @@ -1044,6 +1044,8 @@ struct f2fs_io_info {
>  	bool retry;		/* need to reallocate block address */
>  	enum iostat_type io_type;	/* io type */
>  	struct writeback_control *io_wbc; /* writeback control */
> +	struct bio **bio;		/* bio for ipu */
> +	sector_t *last_block;		/* last block number in bio */
>  	unsigned char version;		/* version of the node */
>  };
>  
> @@ -3105,6 +3107,7 @@ void f2fs_submit_merged_write_cond(struct f2fs_sb_info *sbi,
>  				nid_t ino, enum page_type type);
>  void f2fs_flush_merged_writes(struct f2fs_sb_info *sbi);
>  int f2fs_submit_page_bio(struct f2fs_io_info *fio);
> +int f2fs_merge_page_bio(struct f2fs_io_info *fio);
>  void f2fs_submit_page_write(struct f2fs_io_info *fio);
>  struct block_device *f2fs_target_device(struct f2fs_sb_info *sbi,
>  			block_t blk_addr, struct bio *bio);
> diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
> index 3241e0619275..a361d61b005e 100644
> --- a/fs/f2fs/segment.c
> +++ b/fs/f2fs/segment.c
> @@ -3163,7 +3163,10 @@ int f2fs_inplace_write_data(struct f2fs_io_info *fio)
>  
>  	stat_inc_inplace_blocks(fio->sbi);
>  
> -	err = f2fs_submit_page_bio(fio);
> +	if (fio->bio)
> +		err = f2fs_merge_page_bio(fio);
> +	else
> +		err = f2fs_submit_page_bio(fio);
>  	if (!err)
>  		update_device_state(fio);
>  
> 

