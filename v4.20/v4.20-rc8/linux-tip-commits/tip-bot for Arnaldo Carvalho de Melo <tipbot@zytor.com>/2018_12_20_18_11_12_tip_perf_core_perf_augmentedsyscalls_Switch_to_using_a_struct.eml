Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:40:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9F1455805F0;
	Thu, 20 Dec 2018 10:11:25 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 20 Dec 2018 10:11:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AyO+FlxHleRHXfzRFkRFYDJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75oc64bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjmk8qxlSgLniD?=
 =?us-ascii?q?0fOjA38G/ZidZwgrxGrhymqBNxzJLbb5yONPpmfK7QZs8aSGlbU8pNTSFNHoGx?=
 =?us-ascii?q?Yo0SBOQBJ+ZYqIz9qkMSrRu/HQmgHfjgyjhUhnTr06061P4hGhza0Qw6GdIBqn?=
 =?us-ascii?q?DUo8jyNKwPT+261rPIzSvZYPNS2Tf975XDfQ0/rvqRWrx/b87RyU4yHA7CklWQ?=
 =?us-ascii?q?qJTlMCiS1uQRqGWa7uphVf6oi249sQ1+vj+vxsI1h4TPm4kbxFfE9SBjz4Y0I9?=
 =?us-ascii?q?21UE17bsC+EJtWqS6aM5F6QsQ4Q2Fnvisx174IuYajcSQU1JgqwwTTZ+GJfoSW?=
 =?us-ascii?q?+B7vSeWcLStiiH9ker+znwu+/Eyjx+HmS8W53lRHojBbntXQqHwBzQHf58aGR/?=
 =?us-ascii?q?Z740yvwyyA1xrJ5eFBOU00lbTUK5omwrMoiJoTvlrMHjXslEX1kqCWbEMk9fas?=
 =?us-ascii?q?6+j9ZbXmvJCcO5d1igH4LKsuhtSyDfokPgUKRWSX5Oqx2KP58UHkQ7hGkuc6n6?=
 =?us-ascii?q?jbvZzCIMQUvK+5Awtb0oY57Ba/Ci+r0NAZnXkBMVJEdwuLj4v3NFHUJvD3E/O/?=
 =?us-ascii?q?j02rkDZlwfDJIKfhD47TLnjMjrjhZ6xx601Cxwopy9BQ+ZZUBqsGIPLpVU/9rM?=
 =?us-ascii?q?bYAQMhMwyo3+bnD81w1ocfWWKMHKCVKqzTsUKT6+IrIumMYpIVuTnnJ/gk4f7u?=
 =?us-ascii?q?kWE2mVsHcaa12psXbWiyHu56LEWBfXrsntABHH8KvgUkTezqlEeNUTlJa3ayQq?=
 =?us-ascii?q?Iz/Dc7CI29AIfHR4CthqGB3SihEp1XYGBGFk6DEXPye4qYXPcMbTqYItV9nTwc?=
 =?us-ascii?q?SbihV4gh2Am0uw/hy7pnKenU9jcCtZ351th4/OnTlRA09TxpAMWRyWCNT2donm?=
 =?us-ascii?q?wWQz86xrxwoUt4yl2by6h3n+RYFcBP5/NOSgo6NoTTz+pgB9D2WwLOZNGJSFm9?=
 =?us-ascii?q?T9WiADExSM8xwtAUb0Z8HdWikg7M3y6wD7AJkLyLAYQ+8rjA0HjpO8Z913HG2b?=
 =?us-ascii?q?E8gFY8XMtAK3eqhq5l+AjVHI7GjUOZm6GudaQf2S7N8HyOzW6PvEFeTQ5xXr/J?=
 =?us-ascii?q?XXEZZkvKs9v54lnOQKOpCbQiKgFB09KNKrNWat31ilVLXOrsN87AY22vgWuwBQ?=
 =?us-ascii?q?yHxrWXbIX0fWUQxyHdCEkCkwAO8neKLwk+BiG9o23ACDxiD07gY0Tp8eNmsnO0?=
 =?us-ascii?q?Ulc0zx2Wb01mz7e15h8VhfmbS/MP3rIFuD0tqyluEFa6xdLWD9uApwxufKhHZd?=
 =?us-ascii?q?M94VFH1X/WtgBnP5ygKbxiiUAacwhto0zu0BB3AJ1akcc2tHMq0BZyKaWA3Vxb?=
 =?us-ascii?q?czOXw5/xNaPXK2Xo5x+vdrPZ1UvY0NaV/acP9u81q1HivAGvC0oj/G9r09hT03?=
 =?us-ascii?q?uA+JrKCBAeXo72UkYy7xJ6va3VYjEh54PI0n1hKam1siLY1901HuckyxagcM1Z?=
 =?us-ascii?q?MKOLDwLyF8waB86zKO0lgVSpbxQEPPxM+64wJc+pa/yG2KuzNuZ6gD2mlXhH4J?=
 =?us-ascii?q?x60k+U7Sp8S/LH0Iwfw/6F2QuLTTH8g0m7ssD2gIxLeSsdHm6ixif6Ho5RYaty?=
 =?us-ascii?q?cJ0PCWevJc2329p/i4TsW35e6F6sGVcG1NW1dhqValz3xRdQ2lgPoXy7hSu4yC?=
 =?us-ascii?q?R5kjEorqaF3C3C2f/idAcBOmNQQGlijFHsIZW7jtwAXUioaRQpmwWh5Urg26db?=
 =?us-ascii?q?o6F/JXHJQUhUZyj2M31iUqyou7qAecFP8pAosSZQUOimelCVUL39oxgb0yPlAW?=
 =?us-ascii?q?Rewis2dzWrupX/ghx7h3iRLHd1rHrFZ85wwQ3T68DbRf5UxjAGXjV3iSHLBlig?=
 =?us-ascii?q?ONmk5dWVmI3EsuykVWKhV5tTfDLvzYOBsiu7+GJrDQe+n/C1ht3oDww63TXn2N?=
 =?us-ascii?q?ltUCXCtAz8bZXz16SmLeJneVFlBFzm5Mp7AI1+kpYwi4sW2XgVnZiV+XsHkWHu?=
 =?us-ascii?q?MdRUw67+bXwNRSIVzN7R+gTqxEpjLneRzYLjSnqd2tdhZ8W9Ym4O3yI97sNKB7?=
 =?us-ascii?q?2O4L1KgyR1uUa4ohzLYfdmgDgd0/Qu5WUeg+EIvgot0yqcDqoTHUleISzjiRCI?=
 =?us-ascii?q?48qio6VQYWalaaKw21ZmndC9ELGCpRlRWGr+epcnByNx799wMFTR0H3o8YHkec?=
 =?us-ascii?q?LdbdYSth2SjhfBgPJZKJM3lvoWmyVnPXjxsmEiy+4+lRZux421vJCbK2Vx+6K0?=
 =?us-ascii?q?GgVXOSfyZ8MX5zHhl6JentuN0oCrH5VhHCgLXZTyQfKpFjISqeroNwKUHDIgrX?=
 =?us-ascii?q?ebHKLVHRWD50d+s3LPD5erOmmVJHYDyNVtWgKdKFZDgAwOXzU6g505Fh2sxMP7?=
 =?us-ascii?q?a0d0/TQR5l/+qhtRxeNkLRj/UmHDpAi2bjc4UoSQLB1T7gta/UfaLdSe7v5vHy?=
 =?us-ascii?q?Ff5pCgrAuNKnGCZwRVF24JXFaIB0vkPrmo6tnN6OyYBuu4L/vTbrSCs+1eV/GU?=
 =?us-ascii?q?xZ2x1otq5SqDNsKKPnN6Ff00xlJDXWxlG8TegzgPSzIYlyPOb86YpRew4C53rt?=
 =?us-ascii?q?q48PTkRg3v/5aPC6BJPNVr+hC2h7qDNuGKiCZ4LzZYyo0DxXvSxLcD214Sjjlk?=
 =?us-ascii?q?dyOxHrQYqS7NUKXQl7dNAB4GcCxzLtVH7qIm0glJOM7Wkdf11r9+jv4oBFZJT1?=
 =?us-ascii?q?3hmse1ZcMUJ2GxLk/IBEGONL6ePz3E39n3Yb+gSb1XlOhUqxywuTOBH0D/JDiM?=
 =?us-ascii?q?iznpWA6pMexXiCGbPRpeuJyycxp3CGjjSs7mZQO/MNNtkTI2xrg0jGvQNWEAKT?=
 =?us-ascii?q?h8b19NrrqI4CJYmPp/HWlB7ntjLeacmieZ7/PXKpAZsfZwBiR0luRa4Gk1yrdP?=
 =?us-ascii?q?7SFEQuB1lzXWrtJ0v16mleyPmXJbV09KqzBWlMeXvF0nMqLc85hcQl7a8x8Xq2?=
 =?us-ascii?q?adERIHo51iENK8ga1Izsnzk/fzMD5q4cPI+tFaDM/RbIqBOX8hIAfvFxbXARED?=
 =?us-ascii?q?QDrtMnvQwwRYkfed8VWWo4I8p5yqn4ABDvdfVVooBrYZB15jEdgqPph6RHUnnK?=
 =?us-ascii?q?SdgcpO4mCx6FHYT8BXlorKWvKbHbPkLzPdxbBIfRoBx/X4MIIPO5fT2kp+Z108?=
 =?us-ascii?q?l4PPXwLSWtRWqwViYxUyrUEL92JxCiUv1Eb1Qges5mIPD/mynw5whgYtT/4q8W?=
 =?us-ascii?q?Lw4k9yLF3W7CU3igEYg9PshTyWOBX4Nrm5WYFRQyb5/208NpSzFxp0dQe1gWR2?=
 =?us-ascii?q?JSvDXfRaiL42JjMjsxPVpZYaQa0UdqZDehJFnfw=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAADN2Rtch0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCaYECJ4N9iBlfixsBgiGSTIR9IIFTEwEBGAsIAYcuIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCA0JCCkjDII2IoJsAiAEBQYBRgYJAiQCJgICA20Fgx0BggEFCqdRf?=
 =?us-ascii?q?DMehA8BgQOEcAUTeIs0F4F/gRGHfYMeglcCkFuQYgmHEYpskV0sjhyLHgIEAgQ?=
 =?us-ascii?q?FAhSBRoIOTSMVgW8OCwEMgRKCJxcSiEyFYB4BMgEBCHsBAY1gAQE?=
X-IPAS-Result: =?us-ascii?q?A0AZAADN2Rtch0O0hNFlHQEBBQEHBQGBUQgBCwGCaYECJ4N?=
 =?us-ascii?q?9iBlfixsBgiGSTIR9IIFTEwEBGAsIAYcuIjQJDQEDAQEBAQEBAgETAQEBCA0JC?=
 =?us-ascii?q?CkjDII2IoJsAiAEBQYBRgYJAiQCJgICA20Fgx0BggEFCqdRfDMehA8BgQOEcAU?=
 =?us-ascii?q?TeIs0F4F/gRGHfYMeglcCkFuQYgmHEYpskV0sjhyLHgIEAgQFAhSBRoIOTSMVg?=
 =?us-ascii?q?W8OCwEMgRKCJxcSiEyFYB4BMgEBCHsBAY1gAQE?=
X-IronPort-AV: E=Sophos;i="5.56,378,1539673200"; 
   d="scan'208";a="57216900"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 20 Dec 2018 10:11:23 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388670AbeLTSLU (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Thu, 20 Dec 2018 13:11:20 -0500
Received: from terminus.zytor.com ([198.137.202.136]:36623 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728956AbeLTSLT (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 20 Dec 2018 13:11:19 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wBKIBCo33682001
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Thu, 20 Dec 2018 10:11:12 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wBKIBCCc3681998;
        Thu, 20 Dec 2018 10:11:12 -0800
Date: Thu, 20 Dec 2018 10:11:12 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Arnaldo Carvalho de Melo <tipbot@zytor.com>
Message-ID: <tip-k8mwu04l8es29rje5loq9vg7@git.kernel.org>
Cc: tglx@linutronix.de, jolsa@kernel.org, adrian.hunter@intel.com,
        acme@redhat.com, linux-kernel@vger.kernel.org, namhyung@kernel.org,
        mingo@kernel.org, hpa@zytor.com
Reply-To: hpa@zytor.com, namhyung@kernel.org, mingo@kernel.org,
          linux-kernel@vger.kernel.org, acme@redhat.com,
          adrian.hunter@intel.com, jolsa@kernel.org, tglx@linutronix.de
To: linux-tip-commits@vger.kernel.org
Subject: [tip:perf/core] perf augmented_syscalls: Switch to using a struct
 for the syscalls map values
Git-Commit-ID: 27f2992e7bb12ca28e886e48838ba740d2eb95f4
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00
        autolearn=ham autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  27f2992e7bb12ca28e886e48838ba740d2eb95f4
Gitweb:     https://git.kernel.org/tip/27f2992e7bb12ca28e886e48838ba740d2eb95f4
Author:     Arnaldo Carvalho de Melo <acme@redhat.com>
AuthorDate: Wed, 12 Dec 2018 16:46:13 -0300
Committer:  Arnaldo Carvalho de Melo <acme@redhat.com>
CommitDate: Tue, 18 Dec 2018 12:23:58 -0300

perf augmented_syscalls: Switch to using a struct for the syscalls map values

We'll start adding more perf-syscall stuff, so lets do this prep step so
that the next ones are just about adding more fields.

Run it with the .c file once to cache the .o file:

  # trace --filter-pids 2834,2199 -e openat,augmented_raw_syscalls.c
  LLVM: dumping augmented_raw_syscalls.o
       0.000 ( 0.021 ms): tmux: server/4952 openat(dfd: CWD, filename: /proc/5691/cmdline                         ) = 11
     349.807 ( 0.040 ms): DNS Res~er #39/11082 openat(dfd: CWD, filename: /etc/hosts, flags: CLOEXEC                 ) = 44
    4988.759 ( 0.052 ms): gsd-color/2431 openat(dfd: CWD, filename: /etc/localtime                             ) = 18
    4988.976 ( 0.029 ms): gsd-color/2431 openat(dfd: CWD, filename: /etc/localtime                             ) = 18
  ^C[root@quaco bpf]#

From now on, we can use just the newly built .o file, skipping the
compilation step for a faster startup:

  # trace --filter-pids 2834,2199 -e openat,augmented_raw_syscalls.o
       0.000 ( 0.046 ms): DNS Res~er #39/11088 openat(dfd: CWD, filename: /etc/hosts, flags: CLOEXEC                 ) = 44
    1946.408 ( 0.190 ms): systemd/1 openat(dfd: CWD, filename: /proc/1071/cgroup, flags: CLOEXEC          ) = 20
    1946.792 ( 0.215 ms): systemd/1 openat(dfd: CWD, filename: /proc/954/cgroup, flags: CLOEXEC           ) = 20
  ^C#

Now on to do the same in the builtin-trace.c side of things.

Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-k8mwu04l8es29rje5loq9vg7@git.kernel.org
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/examples/bpf/augmented_raw_syscalls.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/tools/perf/examples/bpf/augmented_raw_syscalls.c b/tools/perf/examples/bpf/augmented_raw_syscalls.c
index bb3dcc4ec256..a91c5874433e 100644
--- a/tools/perf/examples/bpf/augmented_raw_syscalls.c
+++ b/tools/perf/examples/bpf/augmented_raw_syscalls.c
@@ -26,10 +26,14 @@ struct bpf_map SEC("maps") __augmented_syscalls__ = {
 	.max_entries = __NR_CPUS__,
 };
 
+struct syscall {
+	bool	enabled;
+};
+
 struct bpf_map SEC("maps") syscalls = {
 	.type	     = BPF_MAP_TYPE_ARRAY,
 	.key_size    = sizeof(int),
-	.value_size  = sizeof(bool),
+	.value_size  = sizeof(struct syscall),
 	.max_entries = 512,
 };
 
@@ -63,7 +67,7 @@ int sys_enter(struct syscall_enter_args *args)
 		struct syscall_enter_args args;
 		struct augmented_filename filename;
 	} augmented_args;
-	bool *enabled;
+	struct syscall *syscall;
 	unsigned int len = sizeof(augmented_args);
 	const void *filename_arg = NULL;
 
@@ -72,8 +76,8 @@ int sys_enter(struct syscall_enter_args *args)
 
 	probe_read(&augmented_args.args, sizeof(augmented_args.args), args);
 
-	enabled = bpf_map_lookup_elem(&syscalls, &augmented_args.args.syscall_nr);
-	if (enabled == NULL || !*enabled)
+	syscall = bpf_map_lookup_elem(&syscalls, &augmented_args.args.syscall_nr);
+	if (syscall == NULL || !syscall->enabled)
 		return 0;
 	/*
 	 * Yonghong and Edward Cree sayz:
@@ -144,15 +148,15 @@ SEC("raw_syscalls:sys_exit")
 int sys_exit(struct syscall_exit_args *args)
 {
 	struct syscall_exit_args exit_args;
-	bool *enabled;
+	struct syscall *syscall;
 
 	if (pid_filter__has(&pids_filtered, getpid()))
 		return 0;
 
 	probe_read(&exit_args, sizeof(exit_args), args);
 
-	enabled = bpf_map_lookup_elem(&syscalls, &exit_args.syscall_nr);
-	if (enabled == NULL || !*enabled)
+	syscall = bpf_map_lookup_elem(&syscalls, &exit_args.syscall_nr);
+	if (syscall == NULL || !syscall->enabled)
 		return 0;
 
 	return 1;
