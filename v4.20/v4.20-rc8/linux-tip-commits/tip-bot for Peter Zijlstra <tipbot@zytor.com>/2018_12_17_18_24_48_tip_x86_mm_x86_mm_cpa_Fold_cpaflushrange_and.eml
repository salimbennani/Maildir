Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:48:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9EF765805CF;
	Mon, 17 Dec 2018 10:25:26 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 10:25:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXHY1xRbkwrYd5BWBgLKvcHT/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcu7Zh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM3/mHZhM9qjK1ZrhKvuQFxzYnbb4+aKPVxY7jdfcsYSGdaQsZcVDZMDp+m?=
 =?us-ascii?q?YocTDecMO/tToYnnp1sJqBuzHRWsBOL3yjNRnXD22rE62PkvEQHBxgwrAsgAv2?=
 =?us-ascii?q?rIrNrrLqcZTOO6zKjKzTXHdPNWxS3955LVeR0mvfGMXKpwftHWyUkzDA7Ej1WR?=
 =?us-ascii?q?qZDiPzOPzOgCr2+b7+95WO+plmUppQZxoj21ycctjInEnoEVxU7e9SV/3ok1Ic?=
 =?us-ascii?q?e0SElhYd6rFpZbqiKUN5NuT888X21lvDw2xqAItJKlZiQG1ZcqywLFZ/GGcYWE?=
 =?us-ascii?q?+g/vWeKSLDtimX5odrCyiwys/US81OHwTNS43VhLoydDj9LCrGoC1wbJ5ciCUv?=
 =?us-ascii?q?Z9/lmu2TKI1w3L9OFELl47lbDBJ54i3LEwjJwTvlrHHiPsn0X2lqCWel0l+uiu?=
 =?us-ascii?q?9evnfq3rqoGAO4JwkA3yL6ojltKlDeglMQUCQ3KX9OW+2bH7+E32WrRKjvk4kq?=
 =?us-ascii?q?nDt5DaINwWpqq4Aw9Tz4Yi5A+zDzS439QCm3kIMlZFdAuAj4nnPVHBPur4AOyh?=
 =?us-ascii?q?g1Sjjjhr3erKPr7/DZXXKHjMjrPhcax6605Gxwo/1cpf6I5MCrEdPPLzXVf8tN?=
 =?us-ascii?q?jZDh86LQO42enmCMhm24MaWGKPBLKZMazIvV+J4OIvP/eDZIsPtDnhLPgl4ubk?=
 =?us-ascii?q?jWUlll8FYampwZwXZWi4Hvt8IkWZfWDjgtAbHWcKowoxVurqiFKZXD5XZnayWb?=
 =?us-ascii?q?885z4hBIKnC4fDWp6igLib0CinGZ1WY3hMCkqQHnfwa4WER/AMZTqQIs9mjDMI?=
 =?us-ascii?q?T7uhS4gn1RGosw/30L5nLuvS+i0FupPvztl15+vPlR4s8Tx4FdiS02aIT2tshG?=
 =?us-ascii?q?MHWyc23LxjoUx60lqMy7N4g/xfFdxQ/f9JSB01NZzHwux+CtDyXB/Bf9iTRFan?=
 =?us-ascii?q?RNWmHS8+TtYrz9ASZEZ9Hs2ojgrf0CqyH78Vi7uLCYQ38q3G2Xj9PcJ9y3fc26?=
 =?us-ascii?q?kngFkrWc9PNWyghq5i+AnfHY/Jk0OFl6m0caQQxjLC9GCGzWCWpkFXTBZwUbnZ?=
 =?us-ascii?q?XXAYfkbZsM725l3cQLO0CbQoKA1BydWcJatMbdHpiVZGRPLnONnFZ2KxmmGwBQ?=
 =?us-ascii?q?uHx7+WbYrqfXkd0zvZCEQejw8T+nOGPxAkBii9u2LeECBuFVX3bkzx6+Z+tm20?=
 =?us-ascii?q?QlU0zw6QaU1hzKS6+hgOiPyYSvMT2K8EuSg7pzV1Gla9w8zZC96aqwV9e6VcZM?=
 =?us-ascii?q?s34E1b2mLBqwx9IpugIrh+hl4fdgR3uF/u1xV3C4lajcgmtnQqzBB2KaKZ1lNB?=
 =?us-ascii?q?eCiV3ZTxOr3RN2nz8wqja6/Q2lHCztmW/r0D5+g/q1XmpAupDFYt821709lJ1H?=
 =?us-ascii?q?uR/o/FDA4MXpP+TEk29wJ2qKrHYiYg/YzU035sMa6qsjLZ39IpBe0lyguvfttF?=
 =?us-ascii?q?MaOEEhPyHNMeB8S0NOMqnF2pZAoePO9O7K40I9+md/ye1a+rIeZshi6pgX5G4Y?=
 =?us-ascii?q?B9yE2M8SV8R/XM35YExfGYwwSGWy39jFenrsD4h4REaSsOEWq4zCjuHJRRabFq?=
 =?us-ascii?q?fYYXFWeuJNW6xs9/h5HxQXFY7kOsB1Qc1M+vZxWSdV390RRM2ksNpXyohDW3zy?=
 =?us-ascii?q?ZzkzEvtaef2C3Ow+L/dBsIIGJLRW9ijUvyLoiwldwVQE+obw0xnhu/+Un637Rb?=
 =?us-ascii?q?pLh4L2TLQUZIfjL6LmF4Xqurq7qCZdVC6JcpsSVRTeS9bkqWSr/7oxsGzSzjG3?=
 =?us-ascii?q?FSyyw8dzGvop/5hQB1iHqBLHZvq3rUYcNwyg3F5NzfRv5R2SAKRDJihjnUBVi8?=
 =?us-ascii?q?Pt+p8suSl5rYtuC+VmShVoBccCXxzIOAsje76nNuARGlg/+zndjnGxAg0SDnz9?=
 =?us-ascii?q?lqSTnIrBHkb4jrzau6NvhrfktpBF/68Md6HoB+ko0thJAfw3Qah5OV/WYZnmf3?=
 =?us-ascii?q?K9lUxaX+bH8VTz4R39HV+BTl2FFkLn+RxIL2THSdztFhZ9mneGwW3C094ttOCK?=
 =?us-ascii?q?eV6rxEgCR0rkC5rQLXffhygDMdxeEy534dhuEDoBAtwTmFArAOAUlYOjThlxGJ?=
 =?us-ascii?q?79C9tqpbfmiufqar1Epig9+hFqqNrR9GWHb2YZoiGS5w7sNiMFPDynHz64fkeM?=
 =?us-ascii?q?XOYtIXrBGbjxDAj+1NIpIrivUKnTZnOX76vXA91+47ihlu0Yu7vYedLWVt4bm5?=
 =?us-ascii?q?AgVZNjDuY8MT+zftjbtRn8qM3oCvGIlhFSsPXJfyUf2oFzcSv+z9NwmSCD08tm?=
 =?us-ascii?q?ubGb3HEACE8khmqHbPE42xO3GTOXkU1tFiRBibJExCjwEYRjQ6npglFg+0wMzt?=
 =?us-ascii?q?alt25jcU5lTgsBtD1vpoNwXjUmfYvAqoaC07SJ2BIxpN9A1C+13ZMc+D7uJwAi?=
 =?us-ascii?q?FY+IeurBeWJ2yfZgRIC3wJW0OeC1DiOLmu+cfP8+yCCuWiKPvOZK2EqfZCWPeQ?=
 =?us-ascii?q?2ZKvzoxm8i6MN8WII3liFuA71VBFXXxjAMTZnDMPSyMMmiLJbs6bogq8+yJtos?=
 =?us-ascii?q?C+9vTrRBzg5Y+VB7RONtVv/gi8gb2fOO6ImCZ5NTFY24sMxXDWybgf310SiyB0?=
 =?us-ascii?q?ezmuC7QAsiHNQ7zKmq9KFB4WcCdzNMpO76Ih0QhBI8/bitXp1rFmiv45EUtKVV?=
 =?us-ascii?q?vkmsuxf8wFP3m9NE/bBEaMLLmJPyDLzNrtYayiSbxcluFUtxyrtDafEk/jOCmD?=
 =?us-ascii?q?ljbzWxCuN+FMkD+UPBhEtI6hdRZtDHDpTMj6ZR2jLN93kTo2zKUohnPLMG4QKy?=
 =?us-ascii?q?Rzf1lRob2Q8yxYhO5yG2hA7npjMOmFlDyV7+jeKpYKr/RrBj54mP5d4HQ/07FV?=
 =?us-ascii?q?9j1LRORpmCvOqd5ju1GnnfOJyjpiURpOrC5EhYOLvUp4P6XZ+YJNWXLF/BIL8G?=
 =?us-ascii?q?WRBA4Gp9pjCt3zpa9QzsLDm770KDdHoJro+p4YBs7JOIebMWJkOh3sHT/IFyMb?=
 =?us-ascii?q?QjOxc2LSnUpQlLeV7HLGlJUironQn88EUpdSUF04EKNcBkkhVNwaKb9lTy8ji/?=
 =?us-ascii?q?iQi8tMrX6/qgTBAcZXpJbKUtqMDvj1bjWUl79JY10P27y8ZYgaKIC920VkcVR8?=
 =?us-ascii?q?tIDLHVfAG9FLviBlKAQzpQEF7H9kUGQ311nNbgKr/W9WG/mpmBI/lgp5Z6Iq7j?=
 =?us-ascii?q?ioq1I2IFXNjCg9ik88nZPimz/VOCb8MKqqT6lXDSTuvkQ8O5+9RBx6KUWonEFg?=
 =?us-ascii?q?HCzZXahQgr8mfmduzEfAtp9fMfpdS7BYehgWxOHRa/hsmVBBtiKPxkJd4+bBT5?=
 =?us-ascii?q?x4m1gEa5mp+m5Bw0dpa8J9K6vKbJJE0lVKzpCPvCuzyvo4iFsCJl4H93+6aj8U?=
 =?us-ascii?q?v1ZOPb4jcXn7ttdw4BCPzmMQMFMHUOAn96pn?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AxAAC86Bdch0O0hNFjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwEBgmiBAieDfIgZX4sYAYIhjjCJFCCBUxIBARgLCAGHViI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgpIwxCFgGBXSKCZQMDAQIgBAUGAUYGCQEBJAIfBwICA1QZB?=
 =?us-ascii?q?QODGgGCAAUKqDl8Mx6EDwGBA4RyE3iLMxeBf4ERixuCVwKJHiSHCZAHPQoJhw2?=
 =?us-ascii?q?KZYIqjygsiwODA4sLAgQCBAUCFIFGgg5NIxWBbw4LAQyBEgkKghQXEohMhWAeA?=
 =?us-ascii?q?TIBAQh7AQGIBoVpAQE?=
X-IPAS-Result: =?us-ascii?q?A0AxAAC86Bdch0O0hNFjHQEBBQEHBQGBUQgBCwEBgmiBAie?=
 =?us-ascii?q?DfIgZX4sYAYIhjjCJFCCBUxIBARgLCAGHViI0CQ0BAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgpIwxCFgGBXSKCZQMDAQIgBAUGAUYGCQEBJAIfBwICA1QZBQODGgGCAAUKqDl?=
 =?us-ascii?q?8Mx6EDwGBA4RyE3iLMxeBf4ERixuCVwKJHiSHCZAHPQoJhw2KZYIqjygsiwODA?=
 =?us-ascii?q?4sLAgQCBAUCFIFGgg5NIxWBbw4LAQyBEgkKghQXEohMhWAeATIBAQh7AQGIBoV?=
 =?us-ascii?q?pAQE?=
X-IronPort-AV: E=Sophos;i="5.56,366,1539673200"; 
   d="scan'208";a="55515851"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 10:25:24 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2388889AbeLQSZM (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 13:25:12 -0500
Received: from terminus.zytor.com ([198.137.202.136]:54501 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727760AbeLQSZM (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 13:25:12 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wBHIOmc12563266
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Mon, 17 Dec 2018 10:24:49 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wBHIOm4A2563263;
        Mon, 17 Dec 2018 10:24:48 -0800
Date: Mon, 17 Dec 2018 10:24:48 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Peter Zijlstra <tipbot@zytor.com>
Message-ID: <tip-fe0937b24ff5d7b343b9922201e469f9a6009d9d@git.kernel.org>
Cc: peterz@infradead.org, dave.hansen@linux.intel.com,
        torvalds@linux-foundation.org, mingo@kernel.org,
        tglx@linutronix.de, luto@kernel.org, riel@surriel.com,
        bp@alien8.de, linux-kernel@vger.kernel.org, hpa@zytor.com
Reply-To: bp@alien8.de, hpa@zytor.com, linux-kernel@vger.kernel.org,
          dave.hansen@linux.intel.com, torvalds@linux-foundation.org,
          mingo@kernel.org, peterz@infradead.org, riel@surriel.com,
          tglx@linutronix.de, luto@kernel.org
In-Reply-To: <20181203171043.559855600@infradead.org>
References: <20181203171043.559855600@infradead.org>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/mm] x86/mm/cpa: Fold cpa_flush_range() and
 cpa_flush_array() into a single cpa_flush() function
Git-Commit-ID: fe0937b24ff5d7b343b9922201e469f9a6009d9d
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-0.7 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_96_Q autolearn=no autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  fe0937b24ff5d7b343b9922201e469f9a6009d9d
Gitweb:     https://git.kernel.org/tip/fe0937b24ff5d7b343b9922201e469f9a6009d9d
Author:     Peter Zijlstra <peterz@infradead.org>
AuthorDate: Mon, 3 Dec 2018 18:03:51 +0100
Committer:  Ingo Molnar <mingo@kernel.org>
CommitDate: Mon, 17 Dec 2018 18:54:28 +0100

x86/mm/cpa: Fold cpa_flush_range() and cpa_flush_array() into a single cpa_flush() function

Note that the cache flush loop in cpa_flush_*() is identical when we
use __cpa_addr(); further observe that flush_tlb_kernel_range() is a
special case of to the cpa_flush_array() TLB invalidation code.

This then means the two functions are virtually identical. Fold these
two functions into a single cpa_flush() call.

Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Cc: H. Peter Anvin <hpa@zytor.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Rik van Riel <riel@surriel.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Tom.StDenis@amd.com
Cc: dave.hansen@intel.com
Link: http://lkml.kernel.org/r/20181203171043.559855600@infradead.org
Signed-off-by: Ingo Molnar <mingo@kernel.org>
---
 arch/x86/mm/pageattr.c | 92 ++++++++++----------------------------------------
 1 file changed, 18 insertions(+), 74 deletions(-)

diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index 12b69263e501..85ef53b86fa0 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -304,51 +304,7 @@ static void cpa_flush_all(unsigned long cache)
 	on_each_cpu(__cpa_flush_all, (void *) cache, 1);
 }
 
-static bool __inv_flush_all(int cache)
-{
-	BUG_ON(irqs_disabled() && !early_boot_irqs_disabled);
-
-	if (cache && !static_cpu_has(X86_FEATURE_CLFLUSH)) {
-		cpa_flush_all(cache);
-		return true;
-	}
-
-	return false;
-}
-
-static void cpa_flush_range(unsigned long start, int numpages, int cache)
-{
-	unsigned int i, level;
-	unsigned long addr;
-
-	WARN_ON(PAGE_ALIGN(start) != start);
-
-	if (__inv_flush_all(cache))
-		return;
-
-	flush_tlb_kernel_range(start, start + PAGE_SIZE * numpages);
-
-	if (!cache)
-		return;
-
-	/*
-	 * We only need to flush on one CPU,
-	 * clflush is a MESI-coherent instruction that
-	 * will cause all other CPUs to flush the same
-	 * cachelines:
-	 */
-	for (i = 0, addr = start; i < numpages; i++, addr += PAGE_SIZE) {
-		pte_t *pte = lookup_address(addr, &level);
-
-		/*
-		 * Only flush present addresses:
-		 */
-		if (pte && (pte_val(*pte) & _PAGE_PRESENT))
-			clflush_cache_range((void *) addr, PAGE_SIZE);
-	}
-}
-
-void __cpa_flush_array(void *data)
+void __cpa_flush_tlb(void *data)
 {
 	struct cpa_data *cpa = data;
 	unsigned int i;
@@ -357,33 +313,31 @@ void __cpa_flush_array(void *data)
 		__flush_tlb_one_kernel(__cpa_addr(cpa, i));
 }
 
-static void cpa_flush_array(struct cpa_data *cpa, int cache)
+static void cpa_flush(struct cpa_data *data, int cache)
 {
+	struct cpa_data *cpa = data;
 	unsigned int i;
 
-	if (cpa_check_flush_all(cache))
+	BUG_ON(irqs_disabled() && !early_boot_irqs_disabled);
+
+	if (cache && !static_cpu_has(X86_FEATURE_CLFLUSH)) {
+		cpa_flush_all(cache);
 		return;
+	}
 
 	if (cpa->numpages <= tlb_single_page_flush_ceiling)
-		on_each_cpu(__cpa_flush_array, cpa, 1);
+		on_each_cpu(__cpa_flush_tlb, cpa, 1);
 	else
 		flush_tlb_all();
 
 	if (!cache)
 		return;
 
-	/*
-	 * We only need to flush on one CPU,
-	 * clflush is a MESI-coherent instruction that
-	 * will cause all other CPUs to flush the same
-	 * cachelines:
-	 */
 	for (i = 0; i < cpa->numpages; i++) {
 		unsigned long addr = __cpa_addr(cpa, i);
 		unsigned int level;
-		pte_t *pte;
 
-		pte = lookup_address(addr, &level);
+		pte_t *pte = lookup_address(addr, &level);
 
 		/*
 		 * Only flush present addresses:
@@ -1698,7 +1652,6 @@ static int change_page_attr_set_clr(unsigned long *addr, int numpages,
 {
 	struct cpa_data cpa;
 	int ret, cache, checkalias;
-	unsigned long baddr = 0;
 
 	memset(&cpa, 0, sizeof(cpa));
 
@@ -1732,11 +1685,6 @@ static int change_page_attr_set_clr(unsigned long *addr, int numpages,
 			 */
 			WARN_ON_ONCE(1);
 		}
-		/*
-		 * Save address for cache flush. *addr is modified in the call
-		 * to __change_page_attr_set_clr() below.
-		 */
-		baddr = make_addr_canonical_again(*addr);
 	}
 
 	/* Must avoid aliasing mappings in the highmem code */
@@ -1784,11 +1732,7 @@ static int change_page_attr_set_clr(unsigned long *addr, int numpages,
 		goto out;
 	}
 
-	if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY))
-		cpa_flush_array(&cpa, cache);
-	else
-		cpa_flush_range(baddr, numpages, cache);
-
+	cpa_flush(&cpa, cache);
 out:
 	return ret;
 }
@@ -2097,18 +2041,18 @@ static int __set_memory_enc_dec(unsigned long addr, int numpages, bool enc)
 	/*
 	 * Before changing the encryption attribute, we need to flush caches.
 	 */
-	cpa_flush_range(addr, numpages, 1);
+	cpa_flush(&cpa, 1);
 
 	ret = __change_page_attr_set_clr(&cpa, 1);
 
 	/*
-	 * After changing the encryption attribute, we need to flush TLBs
-	 * again in case any speculative TLB caching occurred (but no need
-	 * to flush caches again).  We could just use cpa_flush_all(), but
-	 * in case TLB flushing gets optimized in the cpa_flush_range()
-	 * path use the same logic as above.
+	 * After changing the encryption attribute, we need to flush TLBs again
+	 * in case any speculative TLB caching occurred (but no need to flush
+	 * caches again).  We could just use cpa_flush_all(), but in case TLB
+	 * flushing gets optimized in the cpa_flush() path use the same logic
+	 * as above.
 	 */
-	cpa_flush_range(addr, numpages, 0);
+	cpa_flush(&cpa, 0);
 
 	return ret;
 }
