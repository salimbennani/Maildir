Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:36:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 384A15805F0;
	Tue, 18 Dec 2018 05:19:45 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 05:19:44 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ai5WHTBbGRdbo8xUP7PzPTer/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcu/Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM3/mHZhM9qjK1ZrhKvuQFxzYnbb4+aKPVxY7jdfcsYSGdaQsZcVDZMDp+m?=
 =?us-ascii?q?YocTDecMO/tToYnnp1sJqBuzHRWsBOL3yjNRnXD22rE62PkvEQHBxgwrAswAsH?=
 =?us-ascii?q?TTrNXwLqgSSv2+wq/WwjXFcvxZwyvy6IvIcxs8pvyMQbNwcdLKxkkoCwPIlVSR?=
 =?us-ascii?q?qIz5PzOSzOQBqXSU7+1lVe+2jWMstg9/oj+qxsg2i4nJgJoYylPa+iVjxoY6O9?=
 =?us-ascii?q?m4RFR8Yd6+H5tdsTyROYhuQs46XW1kpCI3xqcbtZO1YiQG0okryh3DZ/CdcoWF?=
 =?us-ascii?q?4ArvWPuVLDp7nn5pZbyyihSo/US+1uHwSNO43EtEoydElNTHq2oD2AbJ6sedT/?=
 =?us-ascii?q?tw5keh1iiL1wDU8uxEP080mrTBK5I7wb4/iIATsULdES/ygkn2i7WWdko89uip?=
 =?us-ascii?q?7eTofKnmq4eCO4NojgzyKLkil8KhDegiLwQDXHSX9f692bDh5UH5Ra9Fjvwykq?=
 =?us-ascii?q?nXqpDaIsEbq7a9Aw9U1IYj9hm+Ay6l0NsGh3kHKkxKeBaeg4juNVDOJu73De2k?=
 =?us-ascii?q?jlSynzdk2erGMqfiAprTNHjDlqnufbJn505b0gozwshT54hIBbEZPPLzRkjxuc?=
 =?us-ascii?q?TcDh84MAy73fzrCdpg1o4FXWKPA6mZML7dsFOS5+IvJfWMa5ERuDrnN/cl4Pvu?=
 =?us-ascii?q?h2cjmVABZampwYcXaHegE/RmOUqZYGbsjc0GEWsQvgo+UfbliFuNUTNIY3ayXq?=
 =?us-ascii?q?Q85iw0CY68DIfDQJytj6KF3CuhApJWYWVGAEiWEXj0b4WER+sMaCWKL89jlTwL?=
 =?us-ascii?q?S6KtS4wm1RGosg/6zKFqLu7V+i0eqJLi28J55+zVlREu6zN0C96R3H2KT2Fxhm?=
 =?us-ascii?q?kIXSM53LhjoUxhzVeOybJ3g+dYFdxU5PNFSB06OoTez+FhD9DyWwTBfsqGSVq8?=
 =?us-ascii?q?Q9WmBy0xQcw1w9MUf0l9HNCihAjZ3yW2G78Vi6CLBJss/6LfxXfxIdxxy3LH1K?=
 =?us-ascii?q?Y7iVkmTdBCNWmnhq556gjSCJTFk0Sfl6a2a6sc2DTB+3uEzWqLpEtYShJ/Ub3Z?=
 =?us-ascii?q?XXADYUvbtcn26VncT7CwE7gnMhFOyciZKqRUbN3lilFGRPTmONTaeG+xn2awBR?=
 =?us-ascii?q?CVxrKDdobqemMd3DnDB0gAiQwc4XGGNQ0mDCe7v23eFCBuFU7oY0707OZxsm27?=
 =?us-ascii?q?QVEuwwGKdUJh0aG19QAThfGHT/MT37QEuDouqjluHVa92c7WBMSEpwZ7YKpcZt?=
 =?us-ascii?q?Y96k9d1W3Frwx9IoCgL6d6i14CcgR3ukTu1wl3CoRAi8QqsGkmzA1oKaKc0VNB?=
 =?us-ascii?q?cTyY0Iv0Or3WLGny4R+uZ7TX2lHYzNaZ5KMP5O4kpFXkuQGjDlAi/Gl/09lJz3?=
 =?us-ascii?q?uc4Y3HAxAWUZ3vXUc46Rh7q6vBbSkg+ozbz3tsMaqzsj/cwN8pAOolyhC9f9ZQ?=
 =?us-ascii?q?Kq+EFQnyE9EECMiqMuAlh1+pbhccNuBI6KE0J9+md+eB2KOzPOdggSiqgnhd7I?=
 =?us-ascii?q?F80kKD7Sx8SuHT0pYBwvGY2BaHVjjmgFegtMD3hZ5LZTUIEmWjzijkAZZbZrdu?=
 =?us-ascii?q?coYTFWeuP8q3y81kh57sR3FX7kSjCE4B2MOzfxqdcUb93QxJ2UsLu3OnnTa3wC?=
 =?us-ascii?q?JukzEuqKqSxyjOw+XkdBoaNW9HXmhijVHwIYeqi9AWRlSnbw8slBG9/0b127Bb?=
 =?us-ascii?q?pLhjL2nUWUpJfyn2I3tiU6eqrbqCfshP5YgssSVWVuS8fF+bRqT8oxsczyPsAW?=
 =?us-ascii?q?9eyConeDGtv5XzhwZ6h36FLHZvsHrZftl9xRXF69zGRv5R3T0GSDNjiTbNBVi8?=
 =?us-ascii?q?PNip/dOKmJfFqe2+U2OhVptOcSjk14+AtS275XF0Dh27hfy8htrnEQ0i2y/hy9?=
 =?us-ascii?q?ZqTTnIrAr7YoTz16W1K+VnclNqBF/97cp3AYV+koo2hJEN1nkWnJSV/XwbkWjt?=
 =?us-ascii?q?NdVXw77xbH0IRTQT2d7a/BDl2FF/LnKO34/5VW+Swsp7a9m6f2MZwCQ9789RBa?=
 =?us-ascii?q?eQ7bxEmzZ1o1WioQLQZ/h9gikSyf805HEGhOEJvRInzj+BDbAKAUlYISvsmgyN?=
 =?us-ascii?q?79C/r6VYfnyjcLau20plgdCuEquCrRpCV3bjdZcvBitw7sR5MFLR33z/8IDkeN?=
 =?us-ascii?q?/Mbd0Nsh2YiQvPj+9QKJgpjPoFmTJnOX7hvX0i0+M7kRtu3ZSgsImGMWpt+r+5?=
 =?us-ascii?q?AgVDNj30fM4T/jDtjaBDnseZxYyvH5NhGikVU5vsV/6nDDUStfH/PQaUDDI8sm?=
 =?us-ascii?q?ubGabYHQKH80hptXXPE5S2N32NIHkZ0M5vRB2cJExZnQAVUy82np8/FgC22sPh?=
 =?us-ascii?q?dF116SwW5l79shFM0P5nNwHjUmfDowelcjU0R4KaLBVI9QFO/VvVPdad7uJuHC?=
 =?us-ascii?q?FY45uhoxaWKmGAYwRIDGcJWlGLBlz5P7mu48XA/PacBuakM/TOZrCOo/REV/iU?=
 =?us-ascii?q?3ZKvzpdm/zGUO8SPOXliEuQ72ldZUnB/AcjZgDIPSyoYly/Wa86bpRG8+jB4r8?=
 =?us-ascii?q?yl8fTrXh7v6pWLC7dILdpv/BW2i7+ZN+GMnCZ5NSpY1pQUyH/I1rcf3V0SiyJv?=
 =?us-ascii?q?dzW3ErQArynNTK3Ola9NEh4bcDh+NM9J76I6wwlMNtTXitLz1r5kkPE1D01JWk?=
 =?us-ascii?q?DmmsGsfcYKOX2yNEvbBEaXM7SLPSfEw9zsbqOmV7JRjP9YtxmxuTuAF0/jPzKD?=
 =?us-ascii?q?lyTmVhy1MOFMij2bMwJauI2nbhltDm3jRsr8ahKnKN93kSE2wbosi3PWNG4cNC?=
 =?us-ascii?q?JwfF9XorKM7SNXnPN/FndF7npkK+mEhimY4/PZKpYQrftkHCB0m/hG73Q9zrtf?=
 =?us-ascii?q?9DtES+BtmCvOst5upEmrk+mVxTphVRpOqzBLi5qKvEViI6rZ8JZAVG3A/BIM62?=
 =?us-ascii?q?WQFhsLq8FkCt3pp6Bf1NzPmLjvJzdF9tKHtfcbUszVLt+XdWYgKV/iHzvRDRce?=
 =?us-ascii?q?ZSCkOHuZhEFHlvyWsHqPocsAp4DoiaYJH6NUUEwdEvIcF1h/G9oDMNF7U3dsna?=
 =?us-ascii?q?Gek+YB4HOsqx+XT8Ico5ODHu6TBLPkbj2ZgL9sYxoO3KO+LIIPO4m90EtnLhF/?=
 =?us-ascii?q?nYLFHGLTUMpLryknaRU75A1x8H97R3Z1/0/jZgqm4247HPu42BUxj082aO03/z?=
 =?us-ascii?q?7q7FofPFfGpCIs1kI2nJGtgzOWaz/3JY+rQJpbTSHm8wAtMpT+Sh0zaQC0kUVv?=
 =?us-ascii?q?NybsTrddybBncCQjghf0sJ9OFPgMC6FJJFcTwveNbvluzlVYqQ2g30ZM4eaDAp?=
 =?us-ascii?q?xn0EMucJixvzdD1hhlYdodO6PdPuxKw0JWi6bIuTWnkqgx2AY2NVcR93nUcykN?=
 =?us-ascii?q?62ISMbxzOyuwu+Zr9USMnCELRGgLUvMx6tZn8E80MOeRh3b80qZJLVyZJf2DKL?=
 =?us-ascii?q?nfsG/Fw53bCmgs318FwhEWtYN91t0uJhKZ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAACb8xhch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGCaYECJ4N8iHiLGQGCIZdGIIFTEwEBGA0GAYccIjUIDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCgsJCCkjDII2IoJlAwMBAiAJBgFGBgkBASQCJgICA1QZBQODGgGCAAUKp?=
 =?us-ascii?q?zqBLx6EDwGBA4R9BRN4izQXgX+MLIJXApBQkFQJhw+KaZFXjjuLEQIEAgQFAhS?=
 =?us-ascii?q?BSAOCCU0jFYFvDgsBDAQGgQgTghQXiF6FYB4BMgEBAQEGewEBjXMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AnAACb8xhch0O0hNFkHQEBBQEHBQGBUgcBCwGCaYECJ4N?=
 =?us-ascii?q?8iHiLGQGCIZdGIIFTEwEBGA0GAYccIjUIDQEDAQEBAQEBAgETAQEBCgsJCCkjD?=
 =?us-ascii?q?II2IoJlAwMBAiAJBgFGBgkBASQCJgICA1QZBQODGgGCAAUKpzqBLx6EDwGBA4R?=
 =?us-ascii?q?9BRN4izQXgX+MLIJXApBQkFQJhw+KaZFXjjuLEQIEAgQFAhSBSAOCCU0jFYFvD?=
 =?us-ascii?q?gsBDAQGgQgTghQXiF6FYB4BMgEBAQEGewEBjXMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="56351369"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 05:19:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726756AbeLRNTT (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 08:19:19 -0500
Received: from terminus.zytor.com ([198.137.202.136]:33419 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726546AbeLRNTR (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 08:19:17 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wBIDIs262842117
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Tue, 18 Dec 2018 05:18:54 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wBIDIrUb2842114;
        Tue, 18 Dec 2018 05:18:53 -0800
Date: Tue, 18 Dec 2018 05:18:53 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Thomas Lendacky <tipbot@zytor.com>
Message-ID: <tip-20c3a2c33e9fdc82e9e8e8d2a6445b3256d20191@git.kernel.org>
Cc: dwmw@amazon.co.uk, tglx@linutronix.de, tim.c.chen@linux.intel.com,
        mingo@kernel.org, Thomas.Lendacky@amd.com, jkosina@suse.cz,
        aarcange@redhat.com, thomas.lendacky@amd.com, hpa@zytor.com,
        linux-kernel@vger.kernel.org, bp@alien8.de, konrad.wilk@oracle.com
Reply-To: tglx@linutronix.de, dwmw@amazon.co.uk,
          tim.c.chen@linux.intel.com, mingo@kernel.org,
          Thomas.Lendacky@amd.com, aarcange@redhat.com, jkosina@suse.cz,
          thomas.lendacky@amd.com, bp@alien8.de, konrad.wilk@oracle.com,
          linux-kernel@vger.kernel.org, hpa@zytor.com
In-Reply-To: <20181213230352.6937.74943.stgit@tlendack-t1.amdoffice.net>
References: <20181213230352.6937.74943.stgit@tlendack-t1.amdoffice.net>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/pti] x86/speculation: Add support for STIBP always-on
 preferred mode
Git-Commit-ID: 20c3a2c33e9fdc82e9e8e8d2a6445b3256d20191
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-2.9 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        T_DATE_IN_FUTURE_96_Q autolearn=ham autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  20c3a2c33e9fdc82e9e8e8d2a6445b3256d20191
Gitweb:     https://git.kernel.org/tip/20c3a2c33e9fdc82e9e8e8d2a6445b3256d20191
Author:     Thomas Lendacky <Thomas.Lendacky@amd.com>
AuthorDate: Thu, 13 Dec 2018 23:03:54 +0000
Committer:  Thomas Gleixner <tglx@linutronix.de>
CommitDate: Tue, 18 Dec 2018 14:13:33 +0100

x86/speculation: Add support for STIBP always-on preferred mode

Different AMD processors may have different implementations of STIBP.
When STIBP is conditionally enabled, some implementations would benefit
from having STIBP always on instead of toggling the STIBP bit through MSR
writes. This preference is advertised through a CPUID feature bit.

When conditional STIBP support is requested at boot and the CPU advertises
STIBP always-on mode as preferred, switch to STIBP "on" support. To show
that this transition has occurred, create a new spectre_v2_user_mitigation
value and a new spectre_v2_user_strings message. The new mitigation value
is used in spectre_v2_user_select_mitigation() to print the new mitigation
message as well as to return a new string from stibp_state().

Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Cc: Jiri Kosina <jkosina@suse.cz>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Cc: David Woodhouse <dwmw@amazon.co.uk>
Link: https://lkml.kernel.org/r/20181213230352.6937.74943.stgit@tlendack-t1.amdoffice.net

---
 arch/x86/include/asm/cpufeatures.h   |  1 +
 arch/x86/include/asm/nospec-branch.h |  1 +
 arch/x86/kernel/cpu/bugs.c           | 28 ++++++++++++++++++++++------
 3 files changed, 24 insertions(+), 6 deletions(-)

diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
index 28c4a502b419..df8e94e2f7be 100644
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@ -284,6 +284,7 @@
 #define X86_FEATURE_AMD_IBPB		(13*32+12) /* "" Indirect Branch Prediction Barrier */
 #define X86_FEATURE_AMD_IBRS		(13*32+14) /* "" Indirect Branch Restricted Speculation */
 #define X86_FEATURE_AMD_STIBP		(13*32+15) /* "" Single Thread Indirect Branch Predictors */
+#define X86_FEATURE_AMD_STIBP_ALWAYS_ON	(13*32+17) /* "" Single Thread Indirect Branch Predictors always-on preferred */
 #define X86_FEATURE_AMD_SSBD		(13*32+24) /* "" Speculative Store Bypass Disable */
 #define X86_FEATURE_VIRT_SSBD		(13*32+25) /* Virtualized Speculative Store Bypass Disable */
 #define X86_FEATURE_AMD_SSB_NO		(13*32+26) /* "" Speculative Store Bypass is fixed in hardware. */
diff --git a/arch/x86/include/asm/nospec-branch.h b/arch/x86/include/asm/nospec-branch.h
index 032b6009baab..dad12b767ba0 100644
--- a/arch/x86/include/asm/nospec-branch.h
+++ b/arch/x86/include/asm/nospec-branch.h
@@ -232,6 +232,7 @@ enum spectre_v2_mitigation {
 enum spectre_v2_user_mitigation {
 	SPECTRE_V2_USER_NONE,
 	SPECTRE_V2_USER_STRICT,
+	SPECTRE_V2_USER_STRICT_PREFERRED,
 	SPECTRE_V2_USER_PRCTL,
 	SPECTRE_V2_USER_SECCOMP,
 };
diff --git a/arch/x86/kernel/cpu/bugs.c b/arch/x86/kernel/cpu/bugs.c
index 58689ac64440..77bf22546ddd 100644
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@ -262,10 +262,11 @@ enum spectre_v2_user_cmd {
 };
 
 static const char * const spectre_v2_user_strings[] = {
-	[SPECTRE_V2_USER_NONE]		= "User space: Vulnerable",
-	[SPECTRE_V2_USER_STRICT]	= "User space: Mitigation: STIBP protection",
-	[SPECTRE_V2_USER_PRCTL]		= "User space: Mitigation: STIBP via prctl",
-	[SPECTRE_V2_USER_SECCOMP]	= "User space: Mitigation: STIBP via seccomp and prctl",
+	[SPECTRE_V2_USER_NONE]			= "User space: Vulnerable",
+	[SPECTRE_V2_USER_STRICT]		= "User space: Mitigation: STIBP protection",
+	[SPECTRE_V2_USER_STRICT_PREFERRED]	= "User space: Mitigation: STIBP always-on protection",
+	[SPECTRE_V2_USER_PRCTL]			= "User space: Mitigation: STIBP via prctl",
+	[SPECTRE_V2_USER_SECCOMP]		= "User space: Mitigation: STIBP via seccomp and prctl",
 };
 
 static const struct {
@@ -355,6 +356,15 @@ spectre_v2_user_select_mitigation(enum spectre_v2_mitigation_cmd v2_cmd)
 		break;
 	}
 
+	/*
+	 * At this point, an STIBP mode other than "off" has been set.
+	 * If STIBP support is not being forced, check if STIBP always-on
+	 * is preferred.
+	 */
+	if (mode != SPECTRE_V2_USER_STRICT &&
+	    boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))
+		mode = SPECTRE_V2_USER_STRICT_PREFERRED;
+
 	/* Initialize Indirect Branch Prediction Barrier */
 	if (boot_cpu_has(X86_FEATURE_IBPB)) {
 		setup_force_cpu_cap(X86_FEATURE_USE_IBPB);
@@ -610,6 +620,7 @@ void arch_smt_update(void)
 	case SPECTRE_V2_USER_NONE:
 		break;
 	case SPECTRE_V2_USER_STRICT:
+	case SPECTRE_V2_USER_STRICT_PREFERRED:
 		update_stibp_strict();
 		break;
 	case SPECTRE_V2_USER_PRCTL:
@@ -812,7 +823,8 @@ static int ib_prctl_set(struct task_struct *task, unsigned long ctrl)
 		 * Indirect branch speculation is always disabled in strict
 		 * mode.
 		 */
-		if (spectre_v2_user == SPECTRE_V2_USER_STRICT)
+		if (spectre_v2_user == SPECTRE_V2_USER_STRICT ||
+		    spectre_v2_user == SPECTRE_V2_USER_STRICT_PREFERRED)
 			return -EPERM;
 		task_clear_spec_ib_disable(task);
 		task_update_spec_tif(task);
@@ -825,7 +837,8 @@ static int ib_prctl_set(struct task_struct *task, unsigned long ctrl)
 		 */
 		if (spectre_v2_user == SPECTRE_V2_USER_NONE)
 			return -EPERM;
-		if (spectre_v2_user == SPECTRE_V2_USER_STRICT)
+		if (spectre_v2_user == SPECTRE_V2_USER_STRICT ||
+		    spectre_v2_user == SPECTRE_V2_USER_STRICT_PREFERRED)
 			return 0;
 		task_set_spec_ib_disable(task);
 		if (ctrl == PR_SPEC_FORCE_DISABLE)
@@ -896,6 +909,7 @@ static int ib_prctl_get(struct task_struct *task)
 			return PR_SPEC_PRCTL | PR_SPEC_DISABLE;
 		return PR_SPEC_PRCTL | PR_SPEC_ENABLE;
 	case SPECTRE_V2_USER_STRICT:
+	case SPECTRE_V2_USER_STRICT_PREFERRED:
 		return PR_SPEC_DISABLE;
 	default:
 		return PR_SPEC_NOT_AFFECTED;
@@ -1089,6 +1103,8 @@ static char *stibp_state(void)
 		return ", STIBP: disabled";
 	case SPECTRE_V2_USER_STRICT:
 		return ", STIBP: forced";
+	case SPECTRE_V2_USER_STRICT_PREFERRED:
+		return ", STIBP: always-on";
 	case SPECTRE_V2_USER_PRCTL:
 	case SPECTRE_V2_USER_SECCOMP:
 		if (static_key_enabled(&switch_to_cond_stibp))
