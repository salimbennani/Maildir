Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  24 Dec 2018 15:56:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 14FC7580522;
	Fri, 21 Dec 2018 18:00:13 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Dec 2018 18:00:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ArfVqaBeR59MeWxX76UbmbHZ/lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc65bRGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QOtgO+CAu3CePz1jNFnGP60bEm3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7ML0dUfuuzKnJ0D7OculW1i3n6IPVdR0ho+uDXalrccrQ0kkvFgXFjlqQ?=
 =?us-ascii?q?qYP+JTOazP4NvnOU7+plT+2vimonpxttrTiow8chk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4kxrEavZO3ZisHxZQ9yxLCavGKcpKE?=
 =?us-ascii?q?7xPjWeuXPDx2nmhqeKiliBa36UWgyvPzVs2z0FtSsCpFncfDtmoX2xzQ9MeHUP?=
 =?us-ascii?q?198Vml2TqV0ADT8O5ELVg1lardNZEh3qY9moQPvUnHBCP6hUv7gLGMekk5+eWk?=
 =?us-ascii?q?9/7rb7Tkq5OEMo97kAD+MqAgmsylBuQ4NxADX2ya+eS6yb3i8lT1QLZUgf0slK?=
 =?us-ascii?q?nWrpTaKd0cpq+3BQ9azJwj5g2hDzepztsYh2MLLFFbdxKdiYjmJVXOLOr/Dfel?=
 =?us-ascii?q?jFSgiC1ryOzePr39HpXNKWDOkLPgfbZ+9UFQ0gUyzc1E6pJQC7EBJu/zW0DruN?=
 =?us-ascii?q?zZCB85LxK7w+L9BNph0YMeXHqFArWFP6PKrV+I+uUvLvGMZIAPuTb9N+Iq5/n0?=
 =?us-ascii?q?gX85hF8SZ6+p3ZQMZXC8H/RmJViZYHX2jtcAF2cKohQxTOjwhFKeVj5TYm64X7?=
 =?us-ascii?q?gg6TEjFIKmEYDDS5i3j7ya3Ce7GZ5WanpcCl+WE3flbIGEW/YKaCKPLc5tiD0E?=
 =?us-ascii?q?Vb69S4A/0RGirhP1y71iLuDM4C0XqYrj1MRp5+3UjRwy9iZ7D8KH32GJTmF7hG?=
 =?us-ascii?q?UIRzAt0aB7oEx9zEqD0Kdij/xZE9xT++1GUgMgOZHAyOx6Dsj4WhjdcdeRVFam?=
 =?us-ascii?q?XtKmDCksQd0r3d8BfVxxG9W4gRDFxCqlHbkVm7uPBJw396Lc22P8J8J8y3bAya?=
 =?us-ascii?q?kggEMqQspJNW26mKF/8xLfCJLOk0Wcj6yqb7gT3DbR9GefymqDpFxXXxRuUarb?=
 =?us-ascii?q?R3wfZlHZrdLi5kzcSb+jErAnMgpHyc6fJapGcNzpjVNaRPj9PNTSeX6+m2C1BR?=
 =?us-ascii?q?yQ3LODcJLqe3kB3CXaEEUEjwET/XOBNQgiBiego3jSDCB0GVLoeUPs9eh+qHW0?=
 =?us-ascii?q?TkIvywGKbkth16e6+xIPhPycTe8T0awAuCs7tzp0G1O91crMC9WcvwphYLlcYd?=
 =?us-ascii?q?Ql7Vhd0WLWqQN8MYKgLqx4nVEebhl4sFno1xV0DYVAj9MnrHcrzAp0NKKZ30lN?=
 =?us-ascii?q?dzKe3ZDsJLLXLnP+8wyoa67TwlveysqZ+r8T6PQkrFXupAGoFlc4/3p7ydVU0n?=
 =?us-ascii?q?uc6Y/MDAodSp/xVkc39x5np7DVeCU95oXU1WFyPqmwqDPNx9UpBO49wBa6Y9hf?=
 =?us-ascii?q?KL+EFBP1E8ACHciuKfAllEKzbh0ZO+Be7qg0MN28d/uHwaKkIPxvnDa7gmtZ+o?=
 =?us-ascii?q?B91USM+jF4Su7J2ZYF3v6Z0hGGVzf6kFeurMT3lZpYajEVG2q10TLkC5JJZq1u?=
 =?us-ascii?q?YYYLDn+jIs22xtlkh5/hQWVY9EOlB14d3M+peBySb0Hy3AFK1EQXp2CnljW8zz?=
 =?us-ascii?q?Bujz4pqa+f1jTUw+v+bBoHJnJLRG56gFfuO4e0ldMaXEuvbwQzjxuq/0X6x6ta?=
 =?us-ascii?q?pKR5MWbTR1xFfyz3L2FkT6uxuaCOY89J6JM0rypXVP6wbkydSr74uxEayT/sH3?=
 =?us-ascii?q?NCxDAncDGnopX4kAZ9iG6HLnZzrXzZdNp0xRfe4tzcWPFQ0iAHRCl+lTnYGFy8?=
 =?us-ascii?q?M8O18tWTkpfJqvq+WH65Vp1PbSnrypuNtCih6m1rGxG/n+2zlcfhEQg1yiL709?=
 =?us-ascii?q?hqVSPVrBfzeIXr1qK6Mf55cUlsHlPz9816GoRmmIsqmJ4QwWQahomS/XcflGfz?=
 =?us-ascii?q?MNZb1rjkYHsDWzEL2MLV7xb/2EJ4MH2J3Y35W26ZwstgYdm6f2wX1jg878BMFK?=
 =?us-ascii?q?eb8rhEkTFprVq/qALbeeJ9kSsFyfsy9H4ahPkEuBYqziWYGLwTHFNXPSrxlxST?=
 =?us-ascii?q?9NC+rb5aZGKucbi2yUp/ksqtDLCEogFARnn5fo0uEjN37sV6KFjMymH86pn4eN?=
 =?us-ascii?q?nMatIergabnA3Hj+hRNZI9jP4KhTd8NGL5vH0lzfM7jBN00ZG7uoiHN3ti/Kaj?=
 =?us-ascii?q?DhFEMT31YtsZ+ivxgqZGgsaWw4evE41jGjoRWZvnU+moHCgOtfj9NAaODT48qm?=
 =?us-ascii?q?qdGbXFBg+S80Nmr3PJE5C2OHCbPngZzdN+RBaDIExTmhwbXDI/npQhDACl2NTh?=
 =?us-ascii?q?cFtl5jAW/lP5qhxMyv9xNxniSGjfoh2kaiwzSJiZIxpb9QVC50bTMcyD4eN/BS?=
 =?us-ascii?q?BY/pu9rAOTLmyXfRhHDWYMWkacHVDsIqGu5cXc8+ifHue+L+XBYbSNqexdVveE?=
 =?us-ascii?q?35Gv0pFh/zaDKMqPJGRiD+Yg10pHXHB5HdnZmjoVRywWkSLNc9CUpBOm9iJrqc?=
 =?us-ascii?q?C/9ezhWBjz6ouXF7tSLdJv9gisjqeeLOGQnjh2KDZC2pMIxH/F07wf3F8UiyFz?=
 =?us-ascii?q?eDihC7UAtSjRTK3Onq9bFQIUayR2NMFQ9aIzwhFNOdLHitPyzrN4kv81C1JfWV?=
 =?us-ascii?q?P9gM2mecwKLH+7NF7cAEaLNbKGJSDEws3tYKO8T6FQg/tQtxGqpTmbFErjNCyZ?=
 =?us-ascii?q?lzb1TxCvLf1MjCaDMR1eoo69dBNtCWnlTN3+axy7MMV4jTs5wbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEyG6l6LznJ5AaoLNPAy1ymKoO/3k8x6oT?=
 =?us-ascii?q?6CBNQvNdiCrWr9h+5Vqhl7/c5CBgVU9soy1Qhcqhp0x4cfHb/4JbWG3F+h0N53?=
 =?us-ascii?q?+ZETwFotJkDpvkvKUGmYuHr776NDoXq4GcxsAbHcWBbZvfaHc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAAAPmh1ch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGDayeDfoN7hB6OCRSJFW+NSoFzLRMBhzAiNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKSMMgjopAYJnAQICAQECIAQZARsdAQMBAQkBAQUFCw8CJgICAx8BEQEFA?=
 =?us-ascii?q?RwGEwWDHYFpAQMNCAWaSTyLGXwWBQEXgncFhDYKGScNXlBnAgYSeYs0F4F/g24?=
 =?us-ascii?q?1hF+DKoJXAolBhx9SkAoKCYIpj0AYgWCFIIpgmhEwgSWCDjMaI4EBgjuCGwwXg?=
 =?us-ascii?q?0qKciAzgQUBAYxBgj4BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AnAAAPmh1ch0O0hNFkHQEBBQEHBQGBUQgBCwGDayeDfoN?=
 =?us-ascii?q?7hB6OCRSJFW+NSoFzLRMBhzAiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjopA?=
 =?us-ascii?q?YJnAQICAQECIAQZARsdAQMBAQkBAQUFCw8CJgICAx8BEQEFARwGEwWDHYFpAQM?=
 =?us-ascii?q?NCAWaSTyLGXwWBQEXgncFhDYKGScNXlBnAgYSeYs0F4F/g241hF+DKoJXAolBh?=
 =?us-ascii?q?x9SkAoKCYIpj0AYgWCFIIpgmhEwgSWCDjMaI4EBgjuCGwwXg0qKciAzgQUBAYx?=
 =?us-ascii?q?Bgj4BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,383,1539673200"; 
   d="scan'208";a="46035017"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Dec 2018 18:00:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1732861AbeLVCAC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Fri, 21 Dec 2018 21:00:02 -0500
Received: from mail-io1-f65.google.com ([209.85.166.65]:36571 "EHLO
        mail-io1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725830AbeLVCAB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 21 Dec 2018 21:00:01 -0500
Received: by mail-io1-f65.google.com with SMTP id m19so5186459ioh.3;
        Fri, 21 Dec 2018 18:00:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=aZt2eyagM4lqMLEpi1b+c4/zgJkxTUDtvq67TbKB9vA=;
        b=I+OLUMN6z+8+P1cLDLfncLEfJnqV1hNMlZ8a2oowX/1qYJojSOnTzPYZ+7UwF0vSSv
         T+fk+p74TATcqe+5c9Y/uhDwYx976YelKyrSAkWN1mjemyT8PI1/2yLee6dNy1lD/68S
         c9s0UAM6zZE3eRIPQw7xomcre0XjabKJSDkpeodpHb9vBiqgXarGuV4pdAiVwg0RyBVt
         G6ODCqspTlp+3pL9qq1bgVXeYGBTPHHVZ4KeX675eTVksRs9s3vh5iHefjMdhvA2E8RZ
         5F92g1LkckujYzjoWYk3qtBnZIPLqaqb4gv1gi7epySfgUsss++4Z9HKd8tPqCzoZHYn
         31lQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=aZt2eyagM4lqMLEpi1b+c4/zgJkxTUDtvq67TbKB9vA=;
        b=pGSsMYpLZCZSfubc3ZTQsYHTImYI7ep3+AP4hltnW5QImjA29BuXqxE9eYr951GhJb
         skKTkRWy9noqxWR3BYKuRE8bVEMBNjhlMk0HYiSFxPgP+dDsmHcqZ713byBWsc6XZEf7
         /RUzxnYMvy3nmQ9YqtVEnNS2k47k9NQn3Y5cbfDU0khViWm4N5/kaHGdBHsPmM690zja
         KmwN+est6TZyZYxNFRdjzb6ftJDb5Cg3MPERMH+7JNdIIzoqum7Fu+ozgUGFznaxntLV
         oHz1zpkOL2zAm4dWGmlRxxEnIdh3Nl/TYDowrbxp72GJT71VvF/6g+YSyi4J+bjXfeRx
         aP8A==
X-Gm-Message-State: AJcUukfZz0xKpZAhit9gKzrpaHdpnYXbor2Z3eUzNMyiqUnv7Rq6mhAj
        Z1N5arQGtYfUAYu1pZAuGhrn9RixDoY4uuK0stQ=
X-Google-Smtp-Source: ALg8bN5lGzM10ohfDS88bSHvblLouIzY9uRTT11D7WM3gsbZ0F2bw4uyrngP8ARoepHJudRu0RIAW1xCoyMmyAoQYz0=
X-Received: by 2002:a6b:a0d:: with SMTP id z13mr3203284ioi.57.1545444000039;
 Fri, 21 Dec 2018 18:00:00 -0800 (PST)
MIME-Version: 1.0
References: <1545327149-22331-1-git-send-email-wendy.liang@xilinx.com> <1545327149-22331-2-git-send-email-wendy.liang@xilinx.com>
In-Reply-To: <1545327149-22331-2-git-send-email-wendy.liang@xilinx.com>
From: Jassi Brar <jassisinghbrar@gmail.com>
Date: Fri, 21 Dec 2018 19:59:48 -0600
Message-ID: <CABb+yY27K8V-Mg_0kvQFvvAGhzdXG+7Zcz9tGDe_1FTStvra3Q@mail.gmail.com>
Subject: Re: [PATH v7 1/2] mailbox: ZynqMP IPI mailbox controller
To: Wendy Liang <wendy.liang@xilinx.com>
Cc: Michal Simek <michal.simek@xilinx.com>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        linux-arm-kernel@lists.infradead.org,
        Devicetree List <devicetree@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 20, 2018 at 11:32 AM Wendy Liang <wendy.liang@xilinx.com> wrote:


> diff --git a/drivers/mailbox/zynqmp-ipi-mailbox.c b/drivers/mailbox/zynqmp-ipi-mailbox.c
> new file mode 100644
> index 0000000..bbddfd5
> --- /dev/null
> +++ b/drivers/mailbox/zynqmp-ipi-mailbox.c
> @@ -0,0 +1,764 @@

......
> +
> +/* IPI SMC Macros */
> +#define IPI_SMC_OPEN_IRQ_MASK          0x00000001UL /* IRQ enable bit in IPI
> +                                                     * open SMC call
> +                                                     */
> +#define IPI_SMC_NOTIFY_BLOCK_MASK      0x00000001UL /* Flag to indicate if
> +                                                     * IPI notification needs
> +                                                     * to be blocking.
> +                                                     */
> +#define IPI_SMC_ENQUIRY_DIRQ_MASK      0x00000001UL /* Flag to indicate if
> +                                                     * notification interrupt
> +                                                     * to be disabled.
> +                                                     */
> +#define IPI_SMC_ACK_EIRQ_MASK          0x00000001UL /* Flag to indicate if
> +                                                     * notification interrupt
> +                                                     * to be enabled.
> +                                                     */
> +
The first two are unused.


> +struct zynqmp_ipi_pdata {
> +       struct device *dev;
> +       int irq;
> +       unsigned int method;
>
'method' doesn't track the HVC option in the driver. Please have a look.

......
> +
> +static void zynqmp_ipi_fw_call(struct zynqmp_ipi_mbox *ipi_mbox,
> +                              unsigned long a0, unsigned long a3,
> +                              unsigned long a4, unsigned long a5,
> +                              unsigned long a6, unsigned long a7,
> +                              struct arm_smccc_res *res)
>
[a4,a7] are always 0, so maybe just drop them?


> +static bool zynqmp_ipi_last_tx_done(struct mbox_chan *chan)
> +{
> +       struct device *dev = chan->mbox->dev;
> +       struct zynqmp_ipi_mbox *ipi_mbox = dev_get_drvdata(dev);
> +       struct zynqmp_ipi_mchan *mchan = chan->con_priv;
> +       int ret;
> +       u64 arg0;
> +       struct arm_smccc_res res;
> +       struct zynqmp_ipi_message *msg;
> +
> +       if (WARN_ON(!ipi_mbox)) {
> +               dev_err(dev, "no platform drv data??\n");
> +               return false;
> +       }
> +
> +       if (mchan->chan_type == IPI_MB_CHNL_TX) {
> +               /* We only need to check if the message been taken
> +                * by the remote in the TX channel
> +                */
> +               arg0 = SMC_IPI_MAILBOX_STATUS_ENQUIRY;
> +               zynqmp_ipi_fw_call(ipi_mbox, arg0, 0, 0, 0, 0, 0, &res);
> +               /* Check the SMC call status, a0 of the result */
> +               ret = (int)(res.a0 & 0xFFFFFFFF);
> +               if (ret < 0 || ret & IPI_MB_STATUS_SEND_PENDING)
> +                       return false;
> +
OK, but ...

> +               msg = mchan->rx_buf;
> +               msg->len = mchan->resp_buf_size;
> +               memcpy_fromio(msg->data, mchan->resp_buf, msg->len);
> +               mbox_chan_received_data(chan, (void *)msg);
>
.... wouldn't this be done from zynqmp_ipi_interrupt()?



> +static int zynqmp_ipi_send_data(struct mbox_chan *chan, void *data)
> +{
  .........
> +               /* Enquire if the mailbox is free to send message */
> +               arg0 = SMC_IPI_MAILBOX_STATUS_ENQUIRY;
> +               timeout = 10;
> +               if (msg && msg->len) {
> +                       timeout = 10;
> +                       do {
> +                               zynqmp_ipi_fw_call(ipi_mbox, arg0,
> +                                                  0, 0, 0, 0, 0, &res);
> +                               ret = res.a0 & 0xFFFFFFFF;
> +                               if (ret >= 0 &&
> +                                   !(ret & IPI_MB_STATUS_SEND_PENDING))
> +                                       break;
> +                               usleep_range(1, 2);
> +                               timeout--;
> +                       } while (timeout);
> +                       if (!timeout) {
> +                               dev_warn(dev, "chan %d sending msg timeout.\n",
> +                                        ipi_mbox->remote_id);
> +                               return -ETIME;
> +                       }
> +                       memcpy_toio(mchan->req_buf, msg->data, msg->len);
> +               }
>
This check should be done in last_tx_done, and not here.
send_data is never called unless last_tx_done returns true.

> +               /* Kick IPI mailbox to send message */
> +               arg0 = SMC_IPI_MAILBOX_NOTIFY;
> +               zynqmp_ipi_fw_call(ipi_mbox, arg0, 0, 0, 0, 0, 0, &res);
> +       } else {
> +               /* Send response message */
> +               if (msg && msg->len > mchan->resp_buf_size) {
> +                       dev_err(dev, "channel %d message length %u > max %lu\n",
> +                               mchan->chan_type, (unsigned int)msg->len,
> +                               mchan->resp_buf_size);
> +                       return -EINVAL;
> +               }
> +               if (msg && msg->len)
> +                       memcpy_toio(mchan->resp_buf, msg->data, msg->len);
>

> +               arg0 = SMC_IPI_MAILBOX_NOTIFY;
> +               arg0 = SMC_IPI_MAILBOX_ACK;
>
This is obviously wrong.

....
> +       mbox->chans = chans;
> +       chans[IPI_MB_CHNL_TX].con_priv = &ipi_mbox->mchans[IPI_MB_CHNL_TX];
> +       chans[IPI_MB_CHNL_RX].con_priv = &ipi_mbox->mchans[IPI_MB_CHNL_RX];
> +       ipi_mbox->mchans[IPI_MB_CHNL_TX].chan_type = IPI_MB_CHNL_TX;
> +       ipi_mbox->mchans[IPI_MB_CHNL_RX].chan_type = IPI_MB_CHNL_RX;
> +       ret = mbox_controller_register(mbox);
>
while at it, you may want to start using
devm_mbox_controller_register() recently added by Thierry.

> +       if (ret)
> +               dev_err(mdev,
> +                       "Failed to register mbox_controller(%d)\n", ret);
> +       else
> +               dev_info(mdev, "Probed ZynqMP IPI Mailbox driver.\n");
>
You may want to also print something instance specific here.


> +static int zynqmp_ipi_probe(struct platform_device *pdev)
> +{
> +       struct device *dev = &pdev->dev;
> +       struct device_node *nc, *np = pdev->dev.of_node;
> +       struct zynqmp_ipi_pdata *pdata;
> +       struct zynqmp_ipi_mbox *mbox;
> +       int i, ret = -EINVAL;
> +
> +       i = 0;
> +       for_each_available_child_of_node(np, nc)
> +               i++;
>
of_get_child_count() ?


Thnx
