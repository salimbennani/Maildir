Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:38:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 566D65805FC
	for <like.xu@linux.intel.com>; Tue, 18 Dec 2018 06:31:25 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 06:31:25 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AwPI3XhRvUlpI/ECrF8Zt5yYyFNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zYBSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/m/XhMJuj6xbrh2uqABizIHWfY+VLPhzcKHScN8HS2dNQtheVzdaD4Og?=
 =?us-ascii?q?c4cCFfYNMfpEo4XjoVYFsBuwBROrBOPq0jJEiHj43awm3OQhCw7JwgggFM8Tvn?=
 =?us-ascii?q?jOsd77KrwSUeGvzKnLzDXDaf1a0ir65YjNaRAhveqBXahufsXMyUkgDR/Fgk+M?=
 =?us-ascii?q?poziOjOYz+IAuHWY4ep4Te+jlXIrpgJrrjSy28shiZPFipwbx13E7yl13YQ4Kc?=
 =?us-ascii?q?WmREJnZdOoCoZcui+EO4dsX88vQG9ltDwkxrAFv5OwYTIEx449xxHFbvyKa4iI?=
 =?us-ascii?q?7QznVOaWOTp4gHNleKmjhxap60Sgxev8VtSu3FZNtCpFncHAtnEL1xPN9siKUu?=
 =?us-ascii?q?Vx8lui1DqVygzf9+JJLVoqmafVK5Mt2KM8m5gLvUTGBCD2mUH2jKGMdkUj/+il?=
 =?us-ascii?q?8/3nbavjpp+BLoN7lx/xMrowlcy7GOg3KQ8OX3Wd+eugyrLj5kr1QLFLjv01jK?=
 =?us-ascii?q?bVqp/bJdkDq669Ag9V1Jsj6hmlAzen1tQYgWcILFZfdB2biIjpPkrDIPb/Dfe5?=
 =?us-ascii?q?jFSslipry+rBPr37DZXBNmLDn6v5fbZh905czxI+zdRe55JXFL4NOv3yWlLqud?=
 =?us-ascii?q?zcDx85NRG0wun9BNV80IMeRXyAAquDPKzOtl+I47FnHu+XeYVAuCrhM+N3oLnq?=
 =?us-ascii?q?jGQlghkbeq+m24ZRb2q3WfFvIkGcaHyrhc8dEGAMpU0nQen3zVGPTzNXNEu0RL?=
 =?us-ascii?q?82szQyCYa6CtXaS4WwxbCMwiq/W4dbf31LEUykF3DueIOZHfAWZ3WJP8VjnzcY?=
 =?us-ascii?q?AKWnUJIrzhq0tQX3mIZge9jU8ysX/aPinIxk5qvB0wMy/Dp7J8Cc1XydCWBygm?=
 =?us-ascii?q?4MATQx2fYsj1Z6zwLJ9Klzg/VVEZRoobt1SQYgNp/ahaQuDsvuchjMcteAVBCt?=
 =?us-ascii?q?RdDwUmJ5dc4439JbOxU1IN6llB2Whyc=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AABpAxlchxHrdtBkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYox0ixqCDZdagXMVGBSHHSI2Bw0BAwEBAQEBAQIBEwEBAQo?=
 =?us-ascii?q?LCQgbDi+CNgUCAxgJglwBAgMBAiQTDAopAwMBAgYBAQoYJggDATkaBhMFgx2CA?=
 =?us-ascii?q?QEEqE4zijSMPxEGgX+BEYMSimACkFCQVAcCApFeAhaJdoRognksmUeBTQ2BenA?=
 =?us-ascii?q?VgyeCJAMXEo4pIzEBAYEFHItggXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A5AABpAxlchxHrdtBkHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYox0ixqCDZdagXMVGBSHHSI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCA?=
 =?us-ascii?q?xgJglwBAgMBAiQTDAopAwMBAgYBAQoYJggDATkaBhMFgx2CAQEEqE4zijSMPxE?=
 =?us-ascii?q?GgX+BEYMSimACkFCQVAcCApFeAhaJdoRognksmUeBTQ2BenAVgyeCJAMXEo4pI?=
 =?us-ascii?q?zEBAYEFHItggXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,368,1539673200"; 
   d="scan'208";a="45441124"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 18 Dec 2018 06:31:07 -0800
Received: from localhost ([::1]:53968 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZGOo-0001qV-RR
	for like.xu@linux.intel.com; Tue, 18 Dec 2018 09:31:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58779)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mst@redhat.com>) id 1gZG9f-0006Vc-6F
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:15:28 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mst@redhat.com>) id 1gZG9X-0004aT-DH
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:15:27 -0500
Received: from mx1.redhat.com ([209.132.183.28]:42302)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mst@redhat.com>) id 1gZG9W-0004Yu-Nx
	for qemu-devel@nongnu.org; Tue, 18 Dec 2018 09:15:19 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 266A8C0AE076;
	Tue, 18 Dec 2018 13:35:41 +0000 (UTC)
Received: from redhat.com (ovpn-120-67.rdu2.redhat.com [10.10.120.67])
	by smtp.corp.redhat.com (Postfix) with SMTP id CDDE467153;
	Tue, 18 Dec 2018 13:35:35 +0000 (UTC)
Date: Tue, 18 Dec 2018 08:35:35 -0500
From: "Michael S. Tsirkin" <mst@redhat.com>
To: Zhang Yi <yi.z.zhang@linux.intel.com>
Message-ID: <20181218082305-mutt-send-email-mst@kernel.org>
References: <cover.1545120100.git.yi.z.zhang@linux.intel.com>
	<62a8796330b86f9f6571e48755d718db11855a6b.1545120100.git.yi.z.zhang@linux.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <62a8796330b86f9f6571e48755d718db11855a6b.1545120100.git.yi.z.zhang@linux.intel.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Tue, 18 Dec 2018 13:35:41 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH V7 2/6] util/mmap-alloc: switch
 qemu_ram_mmap() to 'flags' parameter
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: peter.maydell@linaro.org, ehabkost@redhat.com, crosthwaite.peter@gmail.com,
	richard.henderson@linaro.org, qemu-devel@nongnu.org,
	yu.c.zhang@linux.intel.com, stefanha@redhat.com,
	imammedo@redhat.com, pbonzini@redhat.com, xiaoguangrong.eric@gmail.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Dec 18, 2018 at 04:17:04PM +0800, Zhang Yi wrote:
> As more flag parameters besides the existing 'shared' are going to be
> added to qemu_ram_mmap(), let's switch 'shared' to a 'flags' parameter
> in advance, so as to ease the further additions.
> 
> Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
> Signed-off-by: Zhang Yi <yi.z.zhang@linux.intel.com>

And that's the trouble with patch 1: no type safety.
See below

> ---
>  exec.c                    |  7 ++++---
>  include/qemu/mmap-alloc.h | 19 ++++++++++++++++++-
>  util/mmap-alloc.c         |  8 +++++---
>  util/oslib-posix.c        |  8 +++++++-
>  4 files changed, 34 insertions(+), 8 deletions(-)
> 
> diff --git a/exec.c b/exec.c
> index bb6170d..e92a7da 100644
> --- a/exec.c
> +++ b/exec.c
> @@ -1810,6 +1810,7 @@ static void *file_ram_alloc(RAMBlock *block,
>                              ram_addr_t memory,
>                              int fd,
>                              bool truncate,
> +                            uint32_t flags,
>                              Error **errp)
>  {
>      void *area;
> @@ -1859,8 +1860,7 @@ static void *file_ram_alloc(RAMBlock *block,
>          perror("ftruncate");
>      }
>  
> -    area = qemu_ram_mmap(fd, memory, block->mr->align,
> -                         block->flags & RAM_SHARED);
> +    area = qemu_ram_mmap(fd, memory, block->mr->align, flags);
>      if (area == MAP_FAILED) {
>          error_setg_errno(errp, errno,
>                           "unable to map backing store for guest RAM");
> @@ -2279,7 +2279,8 @@ RAMBlock *qemu_ram_alloc_from_fd(ram_addr_t size, MemoryRegion *mr,
>      new_block->used_length = size;
>      new_block->max_length = size;
>      new_block->flags = ram_flags;
> -    new_block->host = file_ram_alloc(new_block, size, fd, !file_size, errp);
> +    new_block->host = file_ram_alloc(new_block, size, fd, !file_size,
> +            ram_flags, errp);
>      if (!new_block->host) {
>          g_free(new_block);
>          return NULL;
> diff --git a/include/qemu/mmap-alloc.h b/include/qemu/mmap-alloc.h
> index 50385e3..6fe6ed4 100644
> --- a/include/qemu/mmap-alloc.h
> +++ b/include/qemu/mmap-alloc.h
> @@ -7,7 +7,24 @@ size_t qemu_fd_getpagesize(int fd);
>  
>  size_t qemu_mempath_getpagesize(const char *mem_path);
>  
> -void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared);
> +/**
> + * qemu_ram_mmap: mmap the specified file or device.
> + *
> + * Parameters:
> + *  @fd: the file or the device to mmap
> + *  @size: the number of bytes to be mmaped
> + *  @align: if not zero, specify the alignment of the starting mapping address;
> + *          otherwise, the alignment in use will be determined by QEMU.
> + *  @flags: specifies additional properties of the mapping, which can be one or
> + *          bit-or of following values
> + *          - RAM_SHARED: mmap with MAP_SHARED flag
> + *          Other bits are ignored.
> + *

So set it to RAM_SHARED to require a shared mapping ...

> + * Return:
> + *  On success, return a pointer to the mapped area.
> + *  On failure, return MAP_FAILED.
> + */
> +void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags);
>  
>  void qemu_ram_munmap(void *ptr, size_t size);
>  
> diff --git a/util/mmap-alloc.c b/util/mmap-alloc.c
> index fd329ec..8f0a740 100644
> --- a/util/mmap-alloc.c
> +++ b/util/mmap-alloc.c
> @@ -13,6 +13,7 @@
>  #include "qemu/osdep.h"
>  #include "qemu/mmap-alloc.h"
>  #include "qemu/host-utils.h"
> +#include "exec/memory.h"
>  
>  #define HUGETLBFS_MAGIC       0x958458f6
>  
> @@ -75,7 +76,7 @@ size_t qemu_mempath_getpagesize(const char *mem_path)
>      return getpagesize();
>  }
>  
> -void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared)
> +void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
>  {
>      /*
>       * Note: this always allocates at least one extra page of virtual address
> @@ -92,11 +93,12 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, bool shared)
>       * anonymous memory is OK.
>       */
>      int anonfd = fd == -1 || qemu_fd_getpagesize(fd) == getpagesize() ? -1 : fd;
> -    int flags = anonfd == -1 ? MAP_ANONYMOUS : MAP_NORESERVE;
> -    void *ptr = mmap(0, total, PROT_NONE, flags | MAP_PRIVATE, anonfd, 0);
> +    int mmap_flags = anonfd == -1 ? MAP_ANONYMOUS : MAP_NORESERVE;
> +    void *ptr = mmap(0, total, PROT_NONE, mmap_flags | MAP_PRIVATE, anonfd, 0);
>  #else
>      void *ptr = mmap(0, total, PROT_NONE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
>  #endif
> +    bool shared = flags & RAM_SHARED;
>      size_t offset;
>      void *ptr1;
>  
> diff --git a/util/oslib-posix.c b/util/oslib-posix.c
> index fbd0dc8..121c31f 100644
> --- a/util/oslib-posix.c
> +++ b/util/oslib-posix.c
> @@ -203,7 +203,13 @@ void *qemu_memalign(size_t alignment, size_t size)
>  void *qemu_anon_ram_alloc(size_t size, uint64_t *alignment, bool shared)
>  {
>      size_t align = QEMU_VMALLOC_ALIGN;
> -    void *ptr = qemu_ram_mmap(-1, size, align, shared);
> +    uint32_t flags = 0;
> +    void *ptr;
> +
> +    if (shared) {
> +        flags = MAP_SHARED;
> +    }

And here we set it to MAP_SHARED instead.
Not good - was this even tested?

> +    ptr = qemu_ram_mmap(-1, size, align, flags);
>  
>      if (ptr == MAP_FAILED) {
>          return NULL;
> -- 
> 2.7.4


Suggestion:

#ifdef __CHECKER__
#define QEMU_BITWISE __attribute__((bitwise))
#define QEMU_FORCE   __attribute__((force))
#else
#define QEMU_BITWISE
#define QEMU_FORCE
#endif

typedef unsigned QEMU_BITWISE QemuMmapFlags;

#define RAM_SHARED ((QEMU_FORCE QemuMmapFlags) (1 << 1))

And then run checker to detect misuse.

-- 
MST

