Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:40:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D33B758055F
	for <like.xu@linux.intel.com>; Wed, 19 Dec 2018 08:42:57 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga002-1.jf.intel.com with ESMTP; 19 Dec 2018 08:42:57 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AxtJgWBQspx1S4UqPRvBvAEQKZNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa67ZRGGt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+kqFVoByuqBNj3oHbYpybNOJ8c63fct4WWGRMUtpPWCxaGY68?=
 =?us-ascii?q?c5cDAvAdMepEs4XxuV0Dpga+Cwm2A+PvzydFinHx0607z+shERvJ0xIkH9kTrX?=
 =?us-ascii?q?rYtsj+OrkJUeC01qnIzjTDb/VY1Tzg74XIdwshoe2XULJqb8Xe1EkvGBnZjlmK?=
 =?us-ascii?q?tYPlODaV2/0LvmOG7ORgTfqih3A7pwxyuDSj29ogh4rTio4LxF3J9T91zJs3KN?=
 =?us-ascii?q?GgVkJ3fdqpHIFNuyyUKYd6WN4uTmJmtSog1LELupi2dzUQxps93R7QcfmHfpCI?=
 =?us-ascii?q?4h39UOaRJi91hHZkeLKkmxay6lKsyuL6VsmpylpKqTBFktbUunAM0Rzc9NSHR+?=
 =?us-ascii?q?Nj8ku92juDzR3f5vxHLEwui6bWJZ4szqQtmpcRqUjDGzX5mETyjK+YbEUk/e2o?=
 =?us-ascii?q?5vz+Yrr4o5+cKpZ4hRzgPaQwhMO/Bf00PRMJX2iG/+SzyKPs/Vb+TLVOj/02kb?=
 =?us-ascii?q?fWvIrVJMQGvqO5Bw5V0oA+6xewFTum0dIYnWUZI1JBYh6Ik4/pO1TVLfD+Cve/?=
 =?us-ascii?q?hVuskDF2x/zcOb3hGJrNImDZkLj9ZbZ991JcyA0rwNBb5pJUCa8OLOj8W0/sr9?=
 =?us-ascii?q?HYCh45Mwqpw+foEtl914UeWX6RDa+dKq/drViI5ud8a9SKf5If7TbhN+A+tbmp?=
 =?us-ascii?q?iX4ihURbe66v0p0KLneiEbNjKkSdZHPqxdAZDWYNuBF5VeHvlRiOXCBeYyWPWb?=
 =?us-ascii?q?kh7GQ+AYOiEYCRX42onfmN0Tm2GthMa3lbB0uQOXHvcYqCRrELci3FOdJrkDEP?=
 =?us-ascii?q?Se28TZQ83wqlrg7wxulbKb/M9zEVr9Tm3cl56unXvRUz8zVuCIKayW7JB3Bp2G?=
 =?us-ascii?q?hOVT8/2q9XpU1710fF0K5kjvgeHttWo7tEUg4wNpnH08RgBtzyUx6HddCMDB6n?=
 =?us-ascii?q?R9yjBDw9SforztMOalo7ENKnylja0i+3RrMYibGPLJoz9K3awj72Pck5g27M06?=
 =?us-ascii?q?8zjl8natFCOW2vmuh08A2XT5XVnkuQkaajXb4R0C7E6CGIym/K9EpCVxVsUbrM?=
 =?us-ascii?q?XGwSIFPbsdnjzkzHRr6qT78gN08J08+JKqJQZpvpgFNKSe34P9L2Z2O3kn23Qx?=
 =?us-ascii?q?GSyffEfIvjfGoA1SPSEk8CnEYe53eNHQc7Dyal5WnZCW9AD1XqNgnJ8OJ+oX6/?=
 =?us-ascii?q?BnRyhz2Rbldi1rz/skoQnuC0Uf4f3rsY/iwmrmMnTx6Gw9vKBo/Y9EJad6JGbI?=
 =?us-ascii?q?Zl7Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAA1dBpchxHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMIE5gSmMFl+LHYINl12BcxUYBw2HLSI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMYCYJbAQEBAQIBAQI3DAosAgEBAgYBA?=
 =?us-ascii?q?QoYJggDATkaBxIFgx0BgXkIAQSpa4QBAYYujD8RBoF/gRGDEopgApBWkF4HAgK?=
 =?us-ascii?q?HDopSAhaBXogZh2IsiRyBBY81gUaCDnAVgycJgh4XEooJg0tVIzEBAQ92HItNg?=
 =?us-ascii?q?XcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAAA1dBpchxHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMIE5gSmMFl+LHYINl12BcxUYBw2HLSI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgbDiMMgjYFAgMYCYJbAQEBAQIBAQI3DAosAgEBAgYBAQoYJggDATkaBxI?=
 =?us-ascii?q?Fgx0BgXkIAQSpa4QBAYYujD8RBoF/gRGDEopgApBWkF4HAgKHDopSAhaBXogZh?=
 =?us-ascii?q?2IsiRyBBY81gUaCDnAVgycJgh4XEooJg0tVIzEBAQ92HItNgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="58158180"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 19 Dec 2018 08:42:57 -0800
Received: from localhost ([::1]:32978 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gZevv-0003ZS-SZ
	for like.xu@linux.intel.com; Wed, 19 Dec 2018 11:42:55 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:59137)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mst@redhat.com>) id 1gZevW-0003ZL-QC
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 11:42:31 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mst@redhat.com>) id 1gZevT-0002Zn-Na
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 11:42:30 -0500
Received: from mx1.redhat.com ([209.132.183.28]:51234)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mst@redhat.com>) id 1gZevT-0002ZT-FN
	for qemu-devel@nongnu.org; Wed, 19 Dec 2018 11:42:27 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 9ADB23DE;
	Wed, 19 Dec 2018 16:42:26 +0000 (UTC)
Received: from redhat.com (ovpn-120-67.rdu2.redhat.com [10.10.120.67])
	by smtp.corp.redhat.com (Postfix) with SMTP id E644F18237;
	Wed, 19 Dec 2018 16:42:11 +0000 (UTC)
Date: Wed, 19 Dec 2018 11:42:11 -0500
From: "Michael S. Tsirkin" <mst@redhat.com>
To: peter.maydell@linaro.org, yu.c.zhang@linux.intel.com,
	ehabkost@redhat.com, imammedo@redhat.com, qemu-devel@nongnu.org,
	pbonzini@redhat.com, stefanha@redhat.com,
	crosthwaite.peter@gmail.com, richard.henderson@linaro.org,
	xiaoguangrong.eric@gmail.com
Message-ID: <20181219113927-mutt-send-email-mst@kernel.org>
References: <cover.1545120100.git.yi.z.zhang@linux.intel.com>
	<2dda518be27a44e26dc8b45d6e2dc7f46c890926.1545120100.git.yi.z.zhang@linux.intel.com>
	<20181218083603-mutt-send-email-mst@kernel.org>
	<20181219092528.GB35378@tiger-server>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181219092528.GB35378@tiger-server>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Wed, 19 Dec 2018 16:42:26 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH V7 3/6] util/mmap-alloc: support MAP_SYNC
 in qemu_ram_mmap()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Dec 19, 2018 at 05:25:29PM +0800, Yi Zhang wrote:
> On 2018-12-18 at 08:52:09 -0500, Michael S. Tsirkin wrote:
> > On Tue, Dec 18, 2018 at 04:17:12PM +0800, Zhang Yi wrote:
> > > When a file supporting DAX is used as vNVDIMM backend, mmap it with
> > > MAP_SYNC flag in addition can guarantee the persistence of guest write
> > > to the backend file without other QEMU actions (e.g., periodic fsync()
> > > by QEMU).
> > > 
> > > A set of RAM_SYNC flags are added to qemu_ram_mmap():
> > > 
> > > Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
> > > Signed-off-by: Zhang Yi <yi.z.zhang@linux.intel.com>
> > 
> > Should we be reusing RAM_ flags? These are used widely
> > already -are you going to allow RAM_SYNC everywhere
> > where other RAM flags are legal?
> > E.g. memory_region_init_ram_from_file?
> To reuse the RAM_* is much straightforward, just like RAM_SHARE, it is a
> mmmap flag, and we will check the inlegal flags at a easy way.
> 
> assert((ram_flags & ~(RAM_SHARED | RAM_PMEM | RAM_SYNC)) == 0);

Doesn't help if a flag misuse happens to match one of these.

> What do you think, do you have a better choice? Thanks, Micheal.

How about your own flag and static checking with e.g. sparse?

> > 
> > 
> > > ---
> > >  exec.c                    |  2 +-
> > >  include/exec/memory.h     |  3 +++
> > >  include/exec/ram_addr.h   |  1 +
> > >  include/qemu/mmap-alloc.h |  1 +
> > >  include/qemu/osdep.h      | 29 +++++++++++++++++++++++++++++
> > >  util/mmap-alloc.c         | 14 ++++++++++----
> > >  6 files changed, 45 insertions(+), 5 deletions(-)
> > > 
> > > diff --git a/exec.c b/exec.c
> > > index e92a7da..dc4d180 100644
> > > --- a/exec.c
> > > +++ b/exec.c
> > > @@ -2241,7 +2241,7 @@ RAMBlock *qemu_ram_alloc_from_fd(ram_addr_t size, MemoryRegion *mr,
> > >      int64_t file_size;
> > >  
> > >      /* Just support these ram flags by now. */
> > > -    assert((ram_flags & ~(RAM_SHARED | RAM_PMEM)) == 0);
> > > +    assert((ram_flags & ~(RAM_SHARED | RAM_PMEM | RAM_SYNC)) == 0);
> > >  
> > >      if (xen_enabled()) {
> > >          error_setg(errp, "-mem-path not supported with Xen");
> > > diff --git a/include/exec/memory.h b/include/exec/memory.h
> > > index 667466b..33a4e2c 100644
> > > --- a/include/exec/memory.h
> > > +++ b/include/exec/memory.h
> > > @@ -126,6 +126,9 @@ typedef struct IOMMUNotifier IOMMUNotifier;
> > >  /* RAM is a persistent kind memory */
> > >  #define RAM_PMEM (1 << 5)
> > >  
> > > +/* RAM can be mmap by a MAP_SYNC flag */
> > 
> > "RAM is mmap-ed with MAP_SYNC"
> > 
> > > +#define RAM_SYNC (1 << 6)
> > > +
> > >  static inline void iommu_notifier_init(IOMMUNotifier *n, IOMMUNotify fn,
> > >                                         IOMMUNotifierFlag flags,
> > >                                         hwaddr start, hwaddr end,
> > 
> > 
> > 
> > 
> > 
> > > diff --git a/include/exec/ram_addr.h b/include/exec/ram_addr.h
> > > index 9ecd911..d239ce7 100644
> > > --- a/include/exec/ram_addr.h
> > > +++ b/include/exec/ram_addr.h
> > > @@ -87,6 +87,7 @@ long qemu_getrampagesize(void);
> > >   *              or bit-or of following values
> > >   *              - RAM_SHARED: mmap the backing file or device with MAP_SHARED
> > >   *              - RAM_PMEM: the backend @mem_path or @fd is persistent memory
> > > + *              - RAM_SYNC:   mmap with MAP_SYNC flag
> > >   *              Other bits are ignored.
> > >   *  @mem_path or @fd: specify the backing file or device
> > >   *  @errp: pointer to Error*, to store an error if it happens
> > > diff --git a/include/qemu/mmap-alloc.h b/include/qemu/mmap-alloc.h
> > > index 6fe6ed4..1755a8b 100644
> > > --- a/include/qemu/mmap-alloc.h
> > > +++ b/include/qemu/mmap-alloc.h
> > > @@ -18,6 +18,7 @@ size_t qemu_mempath_getpagesize(const char *mem_path);
> > >   *  @flags: specifies additional properties of the mapping, which can be one or
> > >   *          bit-or of following values
> > >   *          - RAM_SHARED: mmap with MAP_SHARED flag
> > > + *          - RAM_SYNC:   mmap with MAP_SYNC flag
> > >   *          Other bits are ignored.
> > >   *
> > >   * Return:
> > > diff --git a/include/qemu/osdep.h b/include/qemu/osdep.h
> > > index 3bf48bc..f94ea68 100644
> > > --- a/include/qemu/osdep.h
> > > +++ b/include/qemu/osdep.h
> > > @@ -410,6 +410,35 @@ void qemu_anon_ram_free(void *ptr, size_t size);
> > >  #  define QEMU_VMALLOC_ALIGN getpagesize()
> > >  #endif
> > >  
> > > +/*
> > > + * MAP_SHARED_VALIDATE and MAP_SYNC are introduced in Linux kernel
> > > + * 4.15, so they may not be defined when compiling on older kernels.
> > 
> > Then you want to import the relevant headers into linux-headers
> > using scripts/update-linux-headers.sh. Pls do not duplicate code.
> Indeed, will update it. 
> > 
> > > + */
> > > +#ifdef CONFIG_LINUX
> > > +
> > > +#include <sys/mman.h>
> > > +
> > > +#ifndef MAP_SHARED_VALIDATE
> > > +#define MAP_SHARED_VALIDATE   0x3
> > > +#endif
> > > +
> > > +#ifndef MAP_SYNC
> > > +#define MAP_SYNC              0x80000
> > > +#endif
> > > +
> > > +/* MAP_SYNC is only available with MAP_SHARED_VALIDATE. */
> > > +#define MAP_SYNC_FLAGS (MAP_SYNC | MAP_SHARED_VALIDATE)
> > 
> > Given mmap flags tend to start with MAP_, adding our own ones
> > unconditionally is not a good idea.
> How about to move the define to other place? 

I'd just open-code, it's not used so widely.

> > 
> > 
> > > +
> > > +#else  /* !CONFIG_LINUX */
> > > +
> > > +#define MAP_SHARED_VALIDATE   0x0
> > > +#define MAP_SYNC              0x0
> > > +
> > > +#define QEMU_HAS_MAP_SYNC     false
> > 
> > Isn't just checking MAP_SYNC enough?
> > 
> > > +#define MAP_SYNC_FLAGS 0
> > > +
> > > +#endif /* CONFIG_LINUX */
> > > +
> > >  #ifdef CONFIG_POSIX
> > >  struct qemu_signalfd_siginfo {
> > >      uint32_t ssi_signo;   /* Signal number */
> > > diff --git a/util/mmap-alloc.c b/util/mmap-alloc.c
> > > index 8f0a740..89ae862 100644
> > > --- a/util/mmap-alloc.c
> > > +++ b/util/mmap-alloc.c
> > > @@ -99,6 +99,8 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
> > >      void *ptr = mmap(0, total, PROT_NONE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
> > >  #endif
> > >      bool shared = flags & RAM_SHARED;
> > > +    bool is_pmem = flags & RAM_PMEM;
> > > +    int mmap_xflags = 0;
> > >      size_t offset;
> > >      void *ptr1;
> > >  
> > > @@ -109,16 +111,20 @@ void *qemu_ram_mmap(int fd, size_t size, size_t align, uint32_t flags)
> > >      assert(is_power_of_2(align));
> > >      /* Always align to host page size */
> > >      assert(align >= getpagesize());
> > > +    if ((flags & RAM_SYNC) && shared && is_pmem) {
> > > +        mmap_xflags |= MAP_SYNC_FLAGS;
> > > +    }
> > >  
> > >      offset = QEMU_ALIGN_UP((uintptr_t)ptr, align) - (uintptr_t)ptr;
> > > + retry_mmap_fd:
> > >      ptr1 = mmap(ptr + offset, size, PROT_READ | PROT_WRITE,
> > >                  MAP_FIXED |
> > >                  (fd == -1 ? MAP_ANONYMOUS : 0) |
> > > -                (shared ? MAP_SHARED : MAP_PRIVATE),
> > > +                (shared ? MAP_SHARED : MAP_PRIVATE) | mmap_xflags,
> > >                  fd, 0);
> > > -    if (ptr1 == MAP_FAILED) {
> > > -        munmap(ptr, total);
> > > -        return MAP_FAILED;
> > > +    if ((ptr1 == MAP_FAILED) && (mmap_xflags & MAP_SYNC_FLAGS)) {
> > > +        mmap_xflags &= ~MAP_SYNC_FLAGS;
> > > +        goto retry_mmap_fd;
> > >      }
> > >  
> > >      if (offset > 0) {
> > > -- 
> > > 2.7.4

