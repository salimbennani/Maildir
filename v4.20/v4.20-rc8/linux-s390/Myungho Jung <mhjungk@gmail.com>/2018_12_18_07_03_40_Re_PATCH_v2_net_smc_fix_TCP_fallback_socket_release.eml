Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 18:08:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B1EBE5805AD;
	Mon, 17 Dec 2018 23:03:50 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 23:03:50 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Anpd12R9Ume3nZ/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+4TIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFCDIOy?=
 =?us-ascii?q?YIQAE/cOMuRWoInmv1sDrwCzBRWwCO711jNEmmX70bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rTrNT1KaESUe+1zKnP0D7Na+5W2THy6IPVdR0hpPGMXbBtccrXxkkvFBjIjlqV?=
 =?us-ascii?q?qYP/PjOV0v4BvHSc7+plTO+ijXMspQJpojW32Msglo3EipgIxl3K6yl12ps5KN?=
 =?us-ascii?q?6kREJhYNOpEoNcuiObOodsX88vQWBltDw0x7EcupO3YC4Hw4k9yRHFcfyIaY2I?=
 =?us-ascii?q?7wrjVOmPJTd4g2poeKywhxms60is0O78Wdeu0FZMsCVFlsPAtncX1xzc8sSHS/?=
 =?us-ascii?q?198Vm92TuXyQzf9uVJLVopmafVNZIt2KM8m5kPvUjZHyL7ml36jKqMeUUl/uio?=
 =?us-ascii?q?5f7nYrLjppKEM490iwf+Mrkhm8CmAuQ3LBIOX26F9uS4zbHj+kP4QLNUgf0sia?=
 =?us-ascii?q?TZrp/aKtoBpqKjAA9azJwj6xChADeiytgYmmMHLF1ddBKdk4fpI03OIOz/Dfqn?=
 =?us-ascii?q?h1SskTRryO7cMrzuH5XANXzDkLbnfbZg5E9Q0gszzdZD551KDrENOu78Wkj0tN?=
 =?us-ascii?q?bAFB82LxS0w/r7CNV6zo4eWXiAAq6FMKzItl+E/OIvI/SWa48TtzbwMPwl5//o?=
 =?us-ascii?q?jX8kll4RZ6ip3Z0LaH+mGvRqOVmWYX3pgt0ZC2cFohI+TPD2iF2FSTNTZXGyUL?=
 =?us-ascii?q?wm6jE4D4KmC4HDRoe2jbyF3Se7GIBWZ29cBlCNF3foa5uLW/MWZC2OJc9hlyQO?=
 =?us-ascii?q?VaK9RI85yRGuqAj6xqJ9IerP+i0YspHj2MJv5+LJlxE/7jh0D8Wb02GQQGB4hG?=
 =?us-ascii?q?IIRzkq3K9hpUxx0EuM0a99g/ZAD9xc++tJUhsmNZ7b1+F6CMr9WgTbcteNSVap?=
 =?us-ascii?q?WNOmAT4qQ9I1wt8OZVt9Gtq4ghDC2SqqH6Eal7iRCJMo9aLc2mD7J9xhxHbeyK?=
 =?us-ascii?q?khk14mT9NSOmK8mK5w6RLfB47TnEWfjKala6Ic0CnJ9GeAyGqOuFpVUApxUaXD?=
 =?us-ascii?q?QHAeaVHardX/5kPeUbCuDa4rPRdGyc6HMqFKcMHmjU1aRPf/P9TTe3++lH2uBR?=
 =?us-ascii?q?mW3L+MbJDle2MG3CrDDkgJiAQT/XeANQgjCSatuWPeDDpyFV3xZ0Pg6/VxqHS+?=
 =?us-ascii?q?TkUs1QGFc1Vh16ap+h4SnfGcV/IT3rcDuCc9qzV1HEyx387MB9qHvQpheKRcYd?=
 =?us-ascii?q?Uy4Fpc0WLZtgp9PoGvLqx4h14edRh3sF3q1xltFopAls0qpmswzAVuMaKYzE9B?=
 =?us-ascii?q?dzSA0J/qPr3YNGbz8w6vaqLMwV7ezcuZ9b0J6PQ7rFXjohqkFk4j83VhztlU3G?=
 =?us-ascii?q?GQ5pTMDAoOT53xVlw7+AR9p7HfeiM9/Z/b1WVwMamotT/Pw9IoBPY/xhm8Zdte?=
 =?us-ascii?q?MaOEGxX0E80VHMWuLO0qm160bhMLJuxS9ag0P9+4ePuCwqKkIOFgnDe+h2Rd/I?=
 =?us-ascii?q?99yl6M9zZ7SuPQxZYFwu2X0RGdVzjhi1etqMb3lp5eZTETB2aw1TLrBIpMaaJs?=
 =?us-ascii?q?Z4YLDmGuLtazxtV/gZ7tRnFZ+ESiB1MAxM+mZx6SY0bh0g1X0EQduWanljegzz?=
 =?us-ascii?q?xojzEpqbKS3SzPw+j4dBsLIHVLRHRkjVr3JYi0jtYaXFWnbgQzlRul41r6yLZf?=
 =?us-ascii?q?pKhlM2bTRkJIdTDsL25+SquwqqaCY8lX5ZMqqypXSue8YVOdSrLnuBsVySDjH2?=
 =?us-ascii?q?hfxDA9aT6qvI70nxh7iGKbMXZyo2DVecB2xRfD+tPcQeRd0SYBRCl9kTPXHESz?=
 =?us-ascii?q?P8G1/dWIkJfOquC/WHimVpFJcynrzIWAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3GoJknYsxnp0Q2WUaiY+T/XoIimrz?=
 =?us-ascii?q?NdRb2aTjbHsCXzILwtjV4BT7101nNH6G24X5VnCFyMt7e9a6en8W2j46781SDa?=
 =?us-ascii?q?eU7b9EkjFvrlu2sw3ReuR9kSkHyfQ19nEame4JtREpziWcBLASAEZZMTbtlxSO?=
 =?us-ascii?q?89CxsqFXaHyzfri30Up0hcqhA62aogFARHb5fY8vHTN37sV6Kl7N0Wf86of5eN?=
 =?us-ascii?q?nLdtITtwaZkxPBj+hTNZIwmeAGhSthOWLho3Ilz/Q3ggBp3ZG/pIKHMXli/Lql?=
 =?us-ascii?q?Ah5EMT34f9gc9SvqjaZag8aaxYSvHoh6FzUPXZvoS++oET0IufTmMQaODCMzqn?=
 =?us-ascii?q?OBFbXDGg+f7V9sr2jTHJCzK3GXOH4ZwM1gRBaHIUxQnhsUUC8mnpIjFQCq2c/h?=
 =?us-ascii?q?cFp/5j8L/V71sR9MyuNuNxniXWbTvgaoajEoSJeBKBpa9B1N50DQMcaG9OJ8Az?=
 =?us-ascii?q?lY/oG9rAyKMmGaZwNIDXwQWkyZHV/jOKOi5cLH8+ieCeqzNP/OYbSIqexDWPaE?=
 =?us-ascii?q?35Ov0o16/zmSMsWDJGVtD/o+2kBbR3B2B9zZmykTSywQjy/Nb9CUpBa/+i10r8?=
 =?us-ascii?q?Cz6vfrWBjo5YuAFbRSK8hv+wutjKeHNu6Qgjt5KDlC2pMNw3/I1KYQ3FoIhy5y?=
 =?us-ascii?q?cDmtFKwKtTTRQ6LIhq9XExkbZjtpO8tV9K08xBdCOM7BhtPx1751lfo1C1ZDVV?=
 =?us-ascii?q?z8lcClf80KI2ehNFzZAEaHLqiJJTrOw8vve6OzVaVQjPlItx23oTubD07jPjGZ?=
 =?us-ascii?q?mzb1TRygLeFMgz+dPBFFvIG9cxBtCXXsTd78ax27NsN3giMywbEumnzKMmscOy?=
 =?us-ascii?q?Bmc0xRtr2Q8T9YgvJnFm1B9HVlK+yEmyef7+bAK5cWseFkAiJ7l+9B5HQ6yr1V?=
 =?us-ascii?q?7DxLRfBvmSvSqMJurE+ikuWV1jVnVx9O+X53g9e2p15/PayR3INJRHCMqA8H92?=
 =?us-ascii?q?yNDTwOpt14GpvusaUWwd/KwvHdMjBHpvfF4M0TB8+cCt+BPzJ1NBrrBTjbDyMK?=
 =?us-ascii?q?SDeqMSfUgEkLw6LazWGcspVv8suko5EJULIOEQVtTv4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAAXmxhch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBAYNqJ4wVX4sagg0UiRKONIFzEwEBGBMBh1s?=
 =?us-ascii?q?iNAkNAQMBAQEBAQECARMBAQEKCwkIKSMMQhYBgV0kAYJhAQEBAQIBAQIkEwYBG?=
 =?us-ascii?q?x0BAwIJAQEFBQ4KCSUDDAUNAhEBBQEiEwWDHYFoAQMNCAWcFTyMFRYFAReCdwW?=
 =?us-ascii?q?ESwoZJw1egTcCBhKLEYEcF4F/gRGDEoJXhWOCJgKQT5AiMAmOLoMlJAyJaYdfj?=
 =?us-ascii?q?0mJfgYCCQcPIYElgg4zGggbFYMnghsLGINKinQfMoEFAQEhiD+FGAEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAAAXmxhch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBAYNqJ4wVX4sagg0UiRKONIFzEwEBGBMBh1siNAkNAQMBAQEBA?=
 =?us-ascii?q?QECARMBAQEKCwkIKSMMQhYBgV0kAYJhAQEBAQIBAQIkEwYBGx0BAwIJAQEFBQ4?=
 =?us-ascii?q?KCSUDDAUNAhEBBQEiEwWDHYFoAQMNCAWcFTyMFRYFAReCdwWESwoZJw1egTcCB?=
 =?us-ascii?q?hKLEYEcF4F/gRGDEoJXhWOCJgKQT5AiMAmOLoMlJAyJaYdfj0mJfgYCCQcPIYE?=
 =?us-ascii?q?lgg4zGggbFYMnghsLGINKinQfMoEFAQEhiD+FGAEB?=
X-IronPort-AV: E=Sophos;i="5.56,367,1539673200"; 
   d="scan'208";a="57300480"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 23:03:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726471AbeLRHDq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 02:03:46 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:43048 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726324AbeLRHDp (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 02:03:45 -0500
Received: by mail-pf1-f196.google.com with SMTP id w73so7668810pfk.10;
        Mon, 17 Dec 2018 23:03:45 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=1eR8kJuUlnry0eT2pQhsogofHopHzJJoOHfQjXxch4U=;
        b=bhCMmV/sNFrSyoekJjv3bzTHQrwM14ERWxvgDEu3DzctmdD5Yz1eU8fh77aMbEUcWZ
         2AaodLP/S9X/Nz+F3Hs8HwmE7LEUi/L37JynAJtCjrA0T+WSG//acbm/DGF13gGVjliq
         HKGj/OyGoqs3V2hHjg8OVoH+juvGP75FyrMO4LWTn2YVkfj7CgXWfdKiTS3sT+xOSnly
         Lg2QhScbW9rCNu480Vlsrl3+mMI8UTFPLMgr8XwB3ar6xygx+cxWyfv9dN7nLBVmspMA
         BvOvZBqJjU/USJnf/Scy8aUL06i9iKYfUMRp7vqOJTPqD+KIF1SsPcggZnn48dvVeFMB
         SzYQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=1eR8kJuUlnry0eT2pQhsogofHopHzJJoOHfQjXxch4U=;
        b=cag/n/EeBS/ZagNsIsx1pS5viFUxTZNbfnQYVXMqA/tKwhagGIipGfUXup7EorIDBA
         aJHpPCijiQ1r7uM13Jj3XKo+dsCPNMQZQ/8mU/JRIStiKPJ4i+xNgdULosmjQlnwqsWa
         RtOS2Xk9J5SBfZ6uxxy2okmikokP+QYuPy4Fcprdfy4HssiFCjmwiAS4f0uRCv7KJyQ4
         i/HerKt9sOaqqbzS4NK2FWWluupXZ7xwgOUkx2t9A/dlGIjrtw3tZ36O609P+2nTlDnj
         uFeqsjTp+WkWY2qlsrknPddPguCE3i7wewSU3oUmsccYAIRbyJVNd0qkdXMmQIswbaTP
         JTHg==
X-Gm-Message-State: AA+aEWa+7efAIaGfoZbahsFCWFksj8rgLPf+GST3L7I5irIe4++RjSYs
        9roEB7z+enaHxJyNIa3DUng=
X-Google-Smtp-Source: AFSGD/WJaPyMcbMGCc1bB5PvOHNbTqWdQTd0QqGCqxHiUMz8Fk0MegrGaNCaiVDop2WtXy2bNrEzUQ==
X-Received: by 2002:a63:eb52:: with SMTP id b18mr14427860pgk.213.1545116624689;
        Mon, 17 Dec 2018 23:03:44 -0800 (PST)
Received: from myunghoj-Precision-5530 (cpe-76-176-3-80.san.res.rr.com. [76.176.3.80])
        by smtp.gmail.com with ESMTPSA id g26sm17614643pfh.61.2018.12.17.23.03.43
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 17 Dec 2018 23:03:43 -0800 (PST)
Date: Mon, 17 Dec 2018 23:03:40 -0800
From: Myungho Jung <mhjungk@gmail.com>
To: Ursula Braun <ubraun@linux.ibm.com>
Cc: "David S. Miller" <davem@davemloft.net>,
        linux-s390@vger.kernel.org, netdev@vger.kernel.org,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH v2] net/smc: fix TCP fallback socket release
Message-ID: <20181218070339.GA20290@myunghoj-Precision-5530>
References: <20181217052122.GA26299@myunghoj-Precision-5530>
 <a9ad19c4-1ef7-4dc9-639e-03b3459457e2@linux.ibm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <a9ad19c4-1ef7-4dc9-639e-03b3459457e2@linux.ibm.com>
User-Agent: Mutt/1.9.4 (2018-02-28)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 17, 2018 at 03:58:58PM +0100, Ursula Braun wrote:
> 

Hi Ursula,

Thank you for your suggestion. I have a question on your comment.

> 
> On 12/17/2018 06:21 AM, Myungho Jung wrote:
> > clcsock can be released while kernel_accept() references it in TCP
> > listen worker. Also, clcsock needs to wake up before released if TCP
> > fallback is used and the clcsock is blocked by accept. Add a lock to
> > safely release clcsock and call kernel_sock_shutdown() to wake up
> > clcsock from accept in smc_release().
> 
> Thanks for your effort to solve this problem. I have some minor
> improvement proposals:
> 
> > 
> > Reported-by: syzbot+0bf2e01269f1274b4b03@syzkaller.appspotmail.com
> > Reported-by: syzbot+e3132895630f957306bc@syzkaller.appspotmail.com
> > Signed-off-by: Myungho Jung <mhjungk@gmail.com>
> > ---
> >  net/smc/af_smc.c | 14 ++++++++++++--
> >  net/smc/smc.h    |  2 ++
> >  2 files changed, 14 insertions(+), 2 deletions(-)
> > 
> > diff --git a/net/smc/af_smc.c b/net/smc/af_smc.c
> > index 5fbaf1901571..5d06fb1bbccf 100644
> > --- a/net/smc/af_smc.c
> > +++ b/net/smc/af_smc.c
> > @@ -147,8 +147,14 @@ static int smc_release(struct socket *sock)
> >  		sk->sk_shutdown |= SHUTDOWN_MASK;
> >  	}
> >  	if (smc->clcsock) {
> > +		if (smc->use_fallback && sk->sk_state == SMC_LISTEN) {
> > +			/* wake up clcsock accept */
> > +			rc = kernel_sock_shutdown(smc->clcsock, SHUT_RDWR);
> > +		}
> 
> This part is not needed, since an SMC socket in state SMC_LISTEN is never
> a use_fallback socket.

In smc_sendmsg(), set use_fallback to true if SMC socket is SMC_INIT
state and the message has MSG_FASTOPEN flag. After this, smc_listen()
would trigger smc_tcp_listen_work(). Is this not an expected scenario?
Then, what is the reason for not skipping smc_sendmsg() in SMC_INIT
state?

> 
> > +		mutex_lock(&smc->clcsock_release_lock);
> >  		sock_release(smc->clcsock);
> >  		smc->clcsock = NULL;
> > +		mutex_unlock(&smc->clcsock_release_lock);
> >  	}
> >  	if (smc->use_fallback) {
> >  		if (sk->sk_state != SMC_LISTEN && sk->sk_state != SMC_INIT)
> > @@ -205,6 +211,7 @@ static struct sock *smc_sock_alloc(struct net *net, struct socket *sock,
> >  	spin_lock_init(&smc->conn.send_lock);
> >  	sk->sk_prot->hash(sk);
> >  	sk_refcnt_debug_inc(sk);
> > +	mutex_init(&smc->clcsock_release_lock);
> >  
> >  	return sk;
> >  }
> > @@ -821,7 +828,7 @@ static int smc_clcsock_accept(struct smc_sock *lsmc, struct smc_sock **new_smc)
> >  	struct socket *new_clcsock = NULL;
> >  	struct sock *lsk = &lsmc->sk;
> >  	struct sock *new_sk;
> > -	int rc;
> > +	int rc = 0;
> 
> Without clcsock the good path should not be executed. Thus I suggest
> to initialize with something negative like -EINVAL.
> 
> >  
> >  	release_sock(lsk);
> >  	new_sk = smc_sock_alloc(sock_net(lsk), NULL, lsk->sk_protocol);
> > @@ -834,7 +841,10 @@ static int smc_clcsock_accept(struct smc_sock *lsmc, struct smc_sock **new_smc)
> >  	}
> >  	*new_smc = smc_sk(new_sk);
> >  
> > -	rc = kernel_accept(lsmc->clcsock, &new_clcsock, 0);
> > +	mutex_lock(&lsmc->clcsock_release_lock);
> > +	if (lsmc->clcsock)
> > +		rc = kernel_accept(lsmc->clcsock, &new_clcsock, 0);
> > +	mutex_unlock(&lsmc->clcsock_release_lock);
> >  	lock_sock(lsk);
> >  	if  (rc < 0)
> >  		lsk->sk_err = -rc;
> > diff --git a/net/smc/smc.h b/net/smc/smc.h
> > index 08786ace6010..9a2795cf5d30 100644
> > --- a/net/smc/smc.h
> > +++ b/net/smc/smc.h
> > @@ -219,6 +219,8 @@ struct smc_sock {				/* smc sock container */
> >  						 * started, waiting for unsent
> >  						 * data to be sent
> >  						 */
> > +	struct mutex            clcsock_release_lock;
> > +						/* protects clcsock */
> 
> I suggest to be more precise: "protects clcsock of a listen socket" 
> 
> >  };
> >  
> >  static inline struct smc_sock *smc_sk(const struct sock *sk)
> > 
> 
