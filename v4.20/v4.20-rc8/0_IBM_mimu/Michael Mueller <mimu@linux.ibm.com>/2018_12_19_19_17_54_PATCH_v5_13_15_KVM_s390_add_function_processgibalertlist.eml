Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:42:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A108B58055F;
	Wed, 19 Dec 2018 11:18:54 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 11:18:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AUeBYpxeuSoDIMwpnzdNn6cb9lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc65bRaN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAe0PMuRWr4f+vFsOtRmzCBKwCO/z0DJEmmX70bEm3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMq9v1NbsdUeCvw6bWyTXIcvRY2Srj54jMdhAuv+uMVq93fMrUyEkvEh7Fg06U?=
 =?us-ascii?q?qYzkOTOVy+sMv3Ka7+V7UOKjkXIoqwZ0ojW2wMonl4rHhpoNx1za6Sl0xJw5Kc?=
 =?us-ascii?q?C2RUJle9KoDZhduz2AO4Z3QM4uW2VltDwnxrAGp5K3ZjUGxIgkyhLFdvCLb5SE?=
 =?us-ascii?q?7xT+X+iLOzh4nmhqeLenihay70egzur8W9Gq0FZFsCVFiMPAtnMT2BzJ7MiIVP?=
 =?us-ascii?q?998l2m2TaV2ADf8uBEIUYqmqrHM5Mt3KI8m54JvUjeECL6hl/6gLKVe0k44OSl?=
 =?us-ascii?q?6ubqbq3jppCGNo90jg/+Mr4pmsy6Gek4NgkOX26G+eWzzbHj/lP2QK9MjvIolq?=
 =?us-ascii?q?nVqZfaJModpqGnGQ9YyZgj6xmhADe8ytgYnmcILEhDeB2Zi4jlIVbOIOr3Dfun?=
 =?us-ascii?q?mVSjjC9rx+zaPr3mGpjNKnnDkLT/crpn5E9c1RE+zdRe55JSF7EAL+j/Wk73tN?=
 =?us-ascii?q?zEEBA5Nxa4zPrgCNV4zokeQ36AAreFMKPOtl+F/uIvLPONZI8Jojn9LOIp5/7z?=
 =?us-ascii?q?jXAjn18dcrKk3Z8WaHC+A/RnLF+VYXvqgtcdD2gKuhAyQ/DtiF2HSTRTfWq9X7?=
 =?us-ascii?q?og5jEnD4KrFZ3MRputgLyG3ye3BIdWaXpECl2XFXfodoOEW+oDaS6II89hlCAE?=
 =?us-ascii?q?WqalS4M7yR6uswr6waJ9LuXI4i0YqY7j1N9t6u3Qjx4y8yZ4D8Cc026XSWF0kX?=
 =?us-ascii?q?gFRzs33KB5vEx8xU2P0al+g/xEC9NT4+lFXRs9NZ7Z1+Z6Ecz9WhrdfteVT1ar?=
 =?us-ascii?q?WsipDisvTt0v2dMOY1xyG9O5jh/d2SqmBLsVl7+OBJww6a/c23nxJ8Bgy3fJzq?=
 =?us-ascii?q?Uhjl8mQtdROm2inKJw6w/TB4vRmUWDi6mqbbgc3DLK9Gqb0GWBpl9YXxBqXaXF?=
 =?us-ascii?q?R38fYFDWosr/5k7ZS7+uCLInMhZOyMKYK6tKbMHpgktCRPv5JNveZGexkX+qBR?=
 =?us-ascii?q?mU3rOMcJbqe2IF0SXBCUgElgcT/WqGNQk+HCuhv3jSDDt0FVLrYkPs9+Z+pWi/?=
 =?us-ascii?q?Tk81yQGKckJg26C0+h4TmfyTVfcT0qgYtycmrjV+BEy90M7OC9qcuwphe71Rbs?=
 =?us-ascii?q?k54FhZ2mPWqQx8Moa7IKB/m1ERaQJ3v0Dp1xVpEYhAlckqrHU3zAt9M66Y0VVB?=
 =?us-ascii?q?dy+G0pD0ILHYNm7y/BW3Ya7Mxl7eyMqW+rsI6Pkgq1TjoRulGVY4/3Rm09layX?=
 =?us-ascii?q?2c5prRAQoWUJLxVFs39hdgq7HbZCk9+53b1Xl2PaaotT/C3sojBPE5xRa4Y9df?=
 =?us-ascii?q?LKSEGRfoE80bG8ehMvYqlEWubh4eOuBd6rQ0P8K/e/SawqGrOPtvkyy8jWRA5o?=
 =?us-ascii?q?BwyUaM9yt6Su7V0JcJ2fCY3g2bVzjiiFetqNz4mYdBZTsKBGqw1TDkBJJNZq11?=
 =?us-ascii?q?ZYsKCWauL9e3x9lknJ7tRnhY+UWnB1MH3s+pZBWTY0b83Q1WyUQYv3inlTGkwD?=
 =?us-ascii?q?xzljEjtrCf0zDWw+T+aBoHPXZGRGt4glf2Ioi0jNcaUFKzbwczlxul5kf6x65F?=
 =?us-ascii?q?q6R5NGTTRUZIfy7rL2BtSKewt7yCY9JR55MsqylYTOO8YVWCQL7nvxQayz/jH3?=
 =?us-ascii?q?dZxD0jdzCloJL5kwZ4iGKcKnZ+t37ZecB2xRfC693QX/9R3jwaRCZmjTnbHESz?=
 =?us-ascii?q?P96s/d+MjZfMrvi+V369Vp1UaSTrzpmPtCqh6W1qHB2whfazmtL8HAg+0C/70c?=
 =?us-ascii?q?RqVCrSoBb9ZInry7q1MeZ9ckZ0A1/87tJwGptinYsomJEQxX8ai42Q/XoGkmf8?=
 =?us-ascii?q?K89X2KzgY3oWWT4E3cTV7xP71015IXKE3Ib5VnSbwst8aNi2eGIW2iQh789UDK?=
 =?us-ascii?q?eY9qBLnSxwolCgtwLefeB9nisByfsp8HMan+YJuA83wiScGL8SG1RYPTf3lxSJ?=
 =?us-ascii?q?9N2+qKRXZGCycbm/zkZ+nNahDK2crQFYQnr2ZpAiHSpo5MVlLF3MyGHz6p3jeN?=
 =?us-ascii?q?TIdt0crBqUkxPdj+RPLJIxi+EHhS5mOWL7oH0kxPQ3jR1o3ZGmooeHL39h876+?=
 =?us-ascii?q?Ah5dLjf1fd8c+inxjaZCmcabx4KvEY9kGjoVR5vkV+6oHCgRtfT6NAaODTs8pW?=
 =?us-ascii?q?2AGbfEGQ+f6UFmr2/AEpyxNnGXImUZwstmRBWHOENfhwUUVi0gnpElDgCq2NDh?=
 =?us-ascii?q?cEBh6zER4V74twJMyv9yOBn5SGvfvwCoajE7SJWEKBpW7wdC51raMMCE7+JzGT?=
 =?us-ascii?q?1Y8YOlrACXNmObYAFIB3kTWkOYH1DjIqWu5d7Y/uiYGOW+LvjOYbaPqeBEVPeI?=
 =?us-ascii?q?35Wv0oR48DaWK8WPJWJvD/k62kpFQHB4FN7VmzQJSywLiS3Na9SXqwu7+i1yts?=
 =?us-ascii?q?q/6ujkWBrz5YuTDLtfKc9g+w2tjqeZKeGRhDx1KTJZ1p4XwX/Iyb4f3EMdii10?=
 =?us-ascii?q?djmtF6gAujDJTK7KhqBXCBsbYTtpNMRU96I8whVNOcnDh9Pp1754i+Q5BEtfWV?=
 =?us-ascii?q?P9msGme8oKLnq5NFPGAkaLKbuHKSfKw8HxfaOzV7lQgP9IuB23vDaRC1XjMSib?=
 =?us-ascii?q?lzn1SxCvNvlBjSGBMxxYvYG9cxBtBnDiTdLmcBK7NtB3gCYywb01gHPKKGEdPS?=
 =?us-ascii?q?J9c0NLsr2f8ydYju9jFGxG63o2ZdWDzgWnyqH9I5cSsP1kSgB1jP4StHckzpNL?=
 =?us-ascii?q?4yxeAv94gi3fqphpuV7wwceVzT8ydRtFqj9GgMquoEhmPajDvs1FWHPZ1BYM63?=
 =?us-ascii?q?iATRUAop1uDdi56PMY8cTGiK+mcGQKyNnT58ZJQpGMcM8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AbAABzmBpch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBZfix2CIYkPiT2EfYFzEwEBGBMBhy0iNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKS+CNiQBgmICAQMBAiRSBgkBAT4SA1QGEwWDHYF1DQMBAacfA?=
 =?us-ascii?q?QEBgWozijKHfoRBF4FAP4ERjXICiSWCGpV1CZFWDBiRWSyZLwIEBgUCEwGBRoI?=
 =?us-ascii?q?OMxoIGxU7gmyCJxeOHnGBBQEBjWABAQ?=
X-IPAS-Result: =?us-ascii?q?A0AbAABzmBpch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBZfix2CIYkPiT2EfYFzEwEBGBMBhy0iNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?S+CNiQBgmICAQMBAiRSBgkBAT4SA1QGEwWDHYF1DQMBAacfAQEBgWozijKHfoR?=
 =?us-ascii?q?BF4FAP4ERjXICiSWCGpV1CZFWDBiRWSyZLwIEBgUCEwGBRoIOMxoIGxU7gmyCJ?=
 =?us-ascii?q?xeOHnGBBQEBjWABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,373,1539673200"; 
   d="scan'208";a="57587145"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 11:18:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728742AbeLSTSv (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 14:18:51 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:56766 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1730488AbeLSTSZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 14:18:25 -0500
Received: from pps.filterd (m0098420.ppops.net [127.0.0.1])
        by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wBJJ526O148828
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 14:18:24 -0500
Received: from e06smtp05.uk.ibm.com (e06smtp05.uk.ibm.com [195.75.94.101])
        by mx0b-001b2d01.pphosted.com with ESMTP id 2pfuu5rnyt-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 14:18:24 -0500
Received: from localhost
        by e06smtp05.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <mimu@linux.ibm.com>;
        Wed, 19 Dec 2018 19:18:22 -0000
Received: from b06cxnps4075.portsmouth.uk.ibm.com (9.149.109.197)
        by e06smtp05.uk.ibm.com (192.168.101.135) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Wed, 19 Dec 2018 19:18:19 -0000
Received: from d06av21.portsmouth.uk.ibm.com (d06av21.portsmouth.uk.ibm.com [9.149.105.232])
        by b06cxnps4075.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wBJJIH5S65077464
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Wed, 19 Dec 2018 19:18:17 GMT
Received: from d06av21.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id B025752050;
        Wed, 19 Dec 2018 19:18:17 +0000 (GMT)
Received: from s38lp84.lnxne.boe (unknown [9.152.108.100])
        by d06av21.portsmouth.uk.ibm.com (Postfix) with ESMTP id 55AC85204E;
        Wed, 19 Dec 2018 19:18:17 +0000 (GMT)
From: Michael Mueller <mimu@linux.ibm.com>
To: KVM Mailing List <kvm@vger.kernel.org>
Cc: Linux-S390 Mailing List <linux-s390@vger.kernel.org>,
        linux-kernel@vger.kernel.org,
        kvm390-list@tuxmaker.boeblingen.de.ibm.com,
        Martin Schwidefsky <schwidefsky@de.ibm.com>,
        Heiko Carstens <heiko.carstens@de.ibm.com>,
        Christian Borntraeger <borntraeger@de.ibm.com>,
        Janosch Frank <frankja@linux.ibm.com>,
        David Hildenbrand <david@redhat.com>,
        Cornelia Huck <cohuck@redhat.com>,
        Halil Pasic <pasic@linux.ibm.com>,
        Pierre Morel <pmorel@linux.ibm.com>,
        Michael Mueller <mimu@linux.ibm.com>
Subject: [PATCH v5 13/15] KVM: s390: add function process_gib_alert_list()
Date: Wed, 19 Dec 2018 20:17:54 +0100
X-Mailer: git-send-email 2.13.4
In-Reply-To: <20181219191756.57973-1-mimu@linux.ibm.com>
References: <20181219191756.57973-1-mimu@linux.ibm.com>
X-TM-AS-GCONF: 00
x-cbid: 18121919-0020-0000-0000-000002F9F032
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18121919-0021-0000-0000-00002149FDDD
Message-Id: <20181219191756.57973-14-mimu@linux.ibm.com>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-12-19_10:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1812190150
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This function processes the Gib Alert List (GAL). It is required
to run when either a gib alert interruption has been received or
a gisa that is in the alert list is cleared or dropped.

The GAL is build up by millicode, when the respective ISC bit is
set in the Interruption Alert Mask (IAM) and an interruption of
that class is observed.

Signed-off-by: Michael Mueller <mimu@linux.ibm.com>
---
 arch/s390/kvm/interrupt.c | 140 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 140 insertions(+)

diff --git a/arch/s390/kvm/interrupt.c b/arch/s390/kvm/interrupt.c
index 48a93f5e5333..03e7ba4f215a 100644
--- a/arch/s390/kvm/interrupt.c
+++ b/arch/s390/kvm/interrupt.c
@@ -2941,6 +2941,146 @@ int kvm_s390_get_irq_state(struct kvm_vcpu *vcpu, __u8 __user *buf, int len)
 	return n;
 }
 
+static int __try_airqs_kick(struct kvm *kvm, u8 ipm)
+{
+	struct kvm_s390_float_interrupt *fi = &kvm->arch.float_int;
+	struct kvm_vcpu *vcpu = NULL, *kick_vcpu[MAX_ISC + 1];
+	int online_vcpus = atomic_read(&kvm->online_vcpus);
+	u8 ioint_mask, isc_mask, kick_mask = 0x00;
+	int vcpu_id, kicked = 0;
+
+	/* Loop over vcpus in WAIT state. */
+	for (vcpu_id = find_first_bit(fi->idle_mask, online_vcpus);
+	     /* Until all pending ISCs have a vcpu open for airqs. */
+	     (~kick_mask & ipm) && vcpu_id < online_vcpus;
+	     vcpu_id = find_next_bit(fi->idle_mask, online_vcpus, vcpu_id)) {
+		vcpu = kvm_get_vcpu(kvm, vcpu_id);
+		if (psw_ioint_disabled(vcpu))
+			continue;
+		ioint_mask = (u8)(vcpu->arch.sie_block->gcr[6] >> 24);
+		for (isc_mask = 0x80; isc_mask; isc_mask >>= 1) {
+			/* ISC pending in IPM ? */
+			if (!(ipm & isc_mask))
+				continue;
+			/* vcpu for this ISC already found ? */
+			if (kick_mask & isc_mask)
+				continue;
+			/* vcpu open for airq of this ISC ? */
+			if (!(ioint_mask & isc_mask))
+				continue;
+			/* use this vcpu (for all ISCs in ioint_mask) */
+			kick_mask |= ioint_mask;
+			kick_vcpu[kicked++] = vcpu;
+		}
+	}
+
+	if (vcpu && ~kick_mask & ipm)
+		VM_EVENT(kvm, 4, "gib alert undeliverable isc mask 0x%02x",
+			 ~kick_mask & ipm);
+
+	for (vcpu_id = 0; vcpu_id < kicked; vcpu_id++)
+		kvm_s390_vcpu_wakeup(kick_vcpu[vcpu_id]);
+
+	return (online_vcpus != 0) ? kicked : -ENODEV;
+}
+
+static void __floating_airqs_kick(struct kvm *kvm)
+{
+	struct kvm_s390_float_interrupt *fi = &kvm->arch.float_int;
+	int online_vcpus, kicked;
+	u8 ipm_t0, ipm;
+
+	/* Get IPM and return if clean, IAM has been restored. */
+	ipm = get_ipm(kvm->arch.gisa, IRQ_FLAG_IAM);
+	if (!ipm)
+		return;
+retry:
+	ipm_t0 = ipm;
+
+	/* Try to kick some vcpus in WAIT state. */
+	kicked = __try_airqs_kick(kvm, ipm);
+	if (kicked < 0)
+		return;
+
+	/* Get IPM and return if clean, IAM has been restored. */
+	ipm = get_ipm(kvm->arch.gisa, IRQ_FLAG_IAM);
+	if (!ipm)
+		return;
+
+	/* Start over, if new ISC bits are pending in IPM. */
+	if ((ipm_t0 ^ ipm) & ~ipm_t0)
+		goto retry;
+
+	/*
+	 * Return as we just kicked at least one vcpu in WAIT state
+	 * open for airqs. The IAM will be restored latest when one
+	 * of them goes into WAIT or STOP state.
+	 */
+	if (kicked > 0)
+		return;
+
+	/*
+	 * No vcpu was kicked either because no vcpu was in WAIT state
+	 * or none of the vcpus in WAIT state are open for airqs.
+	 * Return immediately if no vcpus are in WAIT state.
+	 * There are vcpus in RUN state. They will process the airqs
+	 * if not closed for airqs as well. In that case the system will
+	 * delay airqs until a vcpu decides to take airqs again.
+	 */
+	online_vcpus = atomic_read(&kvm->online_vcpus);
+	if (!bitmap_weight(fi->idle_mask, online_vcpus))
+		return;
+
+	/*
+	 * None of the vcpus in WAIT state take airqs and we might
+	 * have no running vcpus as at least one vcpu is in WAIT state
+	 * and IPM is dirty.
+	 */
+	set_iam(kvm->arch.gisa, kvm->arch.iam);
+}
+
+#define NULL_GISA_ADDR 0x00000000UL
+#define NONE_GISA_ADDR 0x00000001UL
+#define GISA_ADDR_MASK 0xfffff000UL
+
+static void __maybe_unused process_gib_alert_list(void)
+{
+	u32 final, next_alert, origin = 0UL;
+	struct kvm_s390_gisa *gisa;
+	struct kvm *kvm;
+
+	do {
+		/*
+		 * If the NONE_GISA_ADDR is still stored in the alert list
+		 * origin, we will leave the outer loop. No further GISA has
+		 * been added to the alert list by millicode while processing
+		 * the current alert list.
+		 */
+		final = (origin & NONE_GISA_ADDR);
+		/*
+		 * Cut off the alert list and store the NONE_GISA_ADDR in the
+		 * alert list origin to avoid further GAL interruptions.
+		 * A new alert list can be build up by millicode in parallel
+		 * for guests not in the yet cut-off alert list. When in the
+		 * final loop, store the NULL_GISA_ADDR instead. This will re-
+		 * enable GAL interruptions on the host again.
+		 */
+		origin = xchg(&gib->alert_list_origin,
+			      (!final) ? NONE_GISA_ADDR : NULL_GISA_ADDR);
+		/* Loop through the just cut-off alert list. */
+		while (origin & GISA_ADDR_MASK) {
+			gisa = (struct kvm_s390_gisa *)(u64)origin;
+			next_alert = gisa->next_alert;
+			/* Unlink the GISA from the alert list. */
+			gisa->next_alert = origin;
+			kvm = container_of(gisa, struct sie_page2, gisa)->kvm;
+			/* Kick suitable vcpus */
+			__floating_airqs_kick(kvm);
+			origin = next_alert;
+		}
+	} while (!final);
+}
+
 static void nullify_gisa(struct kvm_s390_gisa *gisa)
 {
 	memset(gisa, 0, sizeof(struct kvm_s390_gisa));
-- 
2.13.4

