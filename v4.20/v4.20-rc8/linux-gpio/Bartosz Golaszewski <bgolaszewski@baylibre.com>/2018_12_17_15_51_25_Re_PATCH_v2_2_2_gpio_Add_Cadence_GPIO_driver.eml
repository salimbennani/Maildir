Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  18 Dec 2018 08:46:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 023E05805FC;
	Mon, 17 Dec 2018 07:51:44 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 17 Dec 2018 07:51:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AYaeO5xHL5W0gKDu52bvehZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8S9bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCIOhWsZXyqVQVrRumBwShH//vyiZSi3PqwaE2z+YsHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3oOagIS+C10K7IzS7CbvhL2Dn974zIfQo6ofCNQ71xf9HRyUouFwjYiVif?=
 =?us-ascii?q?soPlPzSR1usXqGia7vRvVOy0i24kqgF8uSOgyd0si4nNh4Ia0UrE+jtjzIkpIt?=
 =?us-ascii?q?24TVd2bNi5G5VTryGXL5V6Tt8mTm1ypSo3xKMKtYSmcCUJ1Jgr3R/SZv6ff4SW?=
 =?us-ascii?q?/h7uUPydLDR4iX5/Zb6yhhS//VK9xuD4V8S51ktBoDBfndnWrH8N0gTe6siZRf?=
 =?us-ascii?q?t5+UeswSiP1w/N5eFeO0w0lrTUK4QnwrEukpofq0PDHjX5mEnuja+WcFsr+vSw?=
 =?us-ascii?q?5uj5frnrooWQO5J6hw3gKKgih8+yDfgiPgUPXWWX4eG826fi/U39TrVKlPo2kq?=
 =?us-ascii?q?zBvZDeJMQboLO5AgBM3oYg9Rm/FTGm38ocnXUeK1JEdhSHgJbzO1zVPvD4Aumw?=
 =?us-ascii?q?g062nDdo2f/GJLvhDYvJLnTZl7fhZ7l951ZGyAUv1dBf+45UCrYZLfL3W0/xt8?=
 =?us-ascii?q?LXAgU2Mgyp2OvnDNR91oUDWWOAGKOZMaXSsUOW6eIrOeWDeIgVuDPlIfg/+/Hu?=
 =?us-ascii?q?lWM5mUMafaSx3ZsYcnG4Huh8LEWee3bsgsoBHn0MvgoxV+HqjFyCUThOZ3e9Ra?=
 =?us-ascii?q?485zc7CJ64AofHXIyinLuB3CKjFJ1Mem9GEkyMEWvvd4icWfcMbzydLtVikjwD?=
 =?us-ascii?q?U7ihTYgh2AqqtA/7zbpnM+XV9jcZtZLlyNh6+enTmQsu+jxzCsSXy3uNQH1snm?=
 =?us-ascii?q?MUWz8227hyrlZmyleD1qh4gOZUFcZJ6PNLSQo6MZ/cz+pnC9H9QA7Bf9GJSEq4?=
 =?us-ascii?q?TdWiGz0+UtUxw9oWaUZnB9qilgzD3zatA7INlLyEHpo0/rjY33jwPcl9zXnG2b?=
 =?us-ascii?q?Ilj1knRMtPKGKnirR+9wjVG47GjUGZm7y2eqQb2S7H7H2DwnaWvEFETA5wVr3I?=
 =?us-ascii?q?Um0FaUvIs9v1/EPCQKWoCbQ8LARBz8mOKq9Jat3siVVLX/PjONXYY2KslGa8Hx?=
 =?us-ascii?q?eIxrWQbIX0f2URxjnSCE8BkwoL53aJKRA+Bju9o2LZFDFhCEjgY13y/uVkqHO0?=
 =?us-ascii?q?VEk0zxqUYE1nzLe1/h8VhfqBS/IcxL4EuSEhqylqE1a5xd7ZF92Apw95dqVGfd?=
 =?us-ascii?q?w9+EtH1X7etwFlIpygLqVihlkCcwR3v0LizQl3Bp9HkcgwqHMqzQxyKa2D3VNF?=
 =?us-ascii?q?djOY243wO7LNJmnz+hCvd7DZ2lXE3NmK/acP7ewyq0//swGxCkoi73Jn3sFP3H?=
 =?us-ascii?q?uY+JrLAxQdUJLrXkks6hh1uqvVYi8+54PTy31hKq20sj7E29I0C+op0Begf9FD?=
 =?us-ascii?q?MKyaEA/+CdEVB8+rKOYygVimcgoEPPxO9K4zJ86nd+aG1LS3M+p6nTOmjX5I4I?=
 =?us-ascii?q?Zy0k+X8yp8S+jI34sKwv2C3wuHUSv8g0mlsszthY9EYjQSFHKlySf4HI5RerFy?=
 =?us-ascii?q?fYETBGe0Is242s9xh4TwVH5f7lKjAU0J2NWoeRaLc1PyxwlQ2lkJrny9niu4yS?=
 =?us-ascii?q?d5kzUorqqZwSzPzP7udBsBOm5XWmZiiU3gLpSzj9AfREKodRQmlAO55UbmwKhW?=
 =?us-ascii?q?vKR+L2jJTUZIZST2NHxiUq2ru7qGYs5P7o4osCpNXOS9Z1CaVqDyox8A3yz/GG?=
 =?us-ascii?q?tewSgxdyu2tZXhgxx6lGWdIW5xrHXDY8FwxhTf5NvGSf5KxDUGRyp4iTjRBlei?=
 =?us-ascii?q?Odmk5tGUl5bFsuCjWGOtTJxTcS/3zYyesCu3/3FlARq6n/qrgN3oDRA60TPn19?=
 =?us-ascii?q?ltTSjJrAzzYo7x26S4MOJneFJlBFv968p8B4F/nZE8hJAW2XgGmJqV+WALnnv0?=
 =?us-ascii?q?MdVewaj+dmYCRSYXw97J5wjowE5jIWiIx47jVnWd39FuZ9+1Ym4N3iI97sZKCL?=
 =?us-ascii?q?qb7bBenCt1pEa4ohzVYfRngjgdzv4u4mYAg+4VoAot0jmdArcKEEldPCzslA6H?=
 =?us-ascii?q?48qwrapJf2avbaa/1FBlkt+/FrGCrRpRWHL4epckAC9x4d9zMFPK0H3v9I7kfM?=
 =?us-ascii?q?PcYs4Uth2Rix3AlfRaKIotlvoWgipqIX79vXogy+IhjB1hx5e6vJWcK2V2/aK0?=
 =?us-ascii?q?GRpYNjzzZ8MO9TDhl6densCK34+xGpVtACkEXJztTfiwCjIdqeznNxqSED07sn?=
 =?us-ascii?q?qUAqDQHQib6Ed7tX7PF42rOmqTJHkYy9ViWRacKFZegAASQDU1gJo5Ghq2y8zm?=
 =?us-ascii?q?dUdz/ioR6ULgqhtQ1uJoMAHyUmXFqwetdDg0U4KTLAZM4gFB+kfVMtGe7uRpEC?=
 =?us-ascii?q?FD5ZChqA2NKmqGZwVHF20JW0qEB0z9Mbmq/9XP7++YBu+mJfvUfbqOsfBeV+uP?=
 =?us-ascii?q?xZ+30opm+CuMNtySPnZ4Cf03wFFDXXd/G8TWgDgPTy0XlyTQb8+Uvhu8+yt3rt?=
 =?us-ascii?q?yh//TvQg7g+YyPC75KO9V15x+2mbuDN/KXhCthKTZXyJIMxXzLyLgexlISiDtu?=
 =?us-ascii?q?dz6iEbsery7NUbnQl7RTDx4abSNzKcRJ47g93glLJc7UlNf12qRkgf4yDldPTU?=
 =?us-ascii?q?bhld2xZcwWP2G9M0vKC1yWNLudPz3E3cH2bbm4Sb1Rl+hUsxywuTCGE07sJDiD?=
 =?us-ascii?q?lj/pVwyxPuFIli2UIBteuISleBZ3FWfjVM7magG8MNJvkT02wLg0imnWOmIGLT?=
 =?us-ascii?q?d8c11CrruL4CNcg/V/HXFB73V/IemFnSaZ8/fXKpIMvfR3BSR0kvpQ4G4mxLtN?=
 =?us-ascii?q?8CFEWPt1lTPSr9F0pVGml+iPyjx/XxtPqjZEnoSLvUp5NKXd95lAX2vE/R0X4W?=
 =?us-ascii?q?WRDRQKu8VqCtn1t69MzdjPkfG7FDAX0dvStegbG8HPYJaFOXwiGRHgFDPSBwZD?=
 =?us-ascii?q?RjmuYzLxnUtYxdub7GGStYpyhZ/okYEcR6BAV119QvkVDUBsB84PP4x0XxsumK?=
 =?us-ascii?q?+fjcQS6Dy1qxyHF5YShYzOSv/HWaanEz2el7QRIkJQmb4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAAAmxRdch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N8lBCCIZdEFIEQA08pEwGEQIMWIjQJDQEDAQEBAQEBAgETAQEBCgsJCCk?=
 =?us-ascii?q?jDII2JAGCYgMDAQIgBBkBATcBBQkBAQoLDwImAgIDHxIBBQEcBhMFgx2CAQWcL?=
 =?us-ascii?q?jyKIHB8M4J2AQEFhxsIEnmLMxeBQD+BEYMShEY7gwiCV4k6hhWBT499CZFaGIF?=
 =?us-ascii?q?diE2HKJlVMIElgg5wgQEGgjWCGwwXg0qKVD4zAYEEAQGNbwEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAAAmxRdch0O0hNFjHgEGBwaBUQkLAYNrJ4N8lBCCIZd?=
 =?us-ascii?q?EFIEQA08pEwGEQIMWIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYgMDA?=
 =?us-ascii?q?QIgBBkBATcBBQkBAQoLDwImAgIDHxIBBQEcBhMFgx2CAQWcLjyKIHB8M4J2AQE?=
 =?us-ascii?q?FhxsIEnmLMxeBQD+BEYMShEY7gwiCV4k6hhWBT499CZFaGIFdiE2HKJlVMIElg?=
 =?us-ascii?q?g5wgQEGgjWCGwwXg0qKVD4zAYEEAQGNbwEB?=
X-IronPort-AV: E=Sophos;i="5.56,365,1539673200"; 
   d="scan'208";a="56675337"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 17 Dec 2018 07:51:41 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2387920AbeLQPvi (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 17 Dec 2018 10:51:38 -0500
Received: from mail-oi1-f196.google.com ([209.85.167.196]:42554 "EHLO
        mail-oi1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727617AbeLQPvh (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 17 Dec 2018 10:51:37 -0500
Received: by mail-oi1-f196.google.com with SMTP id w13so10506713oiw.9
        for <linux-kernel@vger.kernel.org>; Mon, 17 Dec 2018 07:51:36 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=baylibre-com.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=PnjKIRI9nO/ZKMy80vdFqw0K0YWJlvmo7GD0kULdH1Y=;
        b=OarV2RXuX3pTTG+yMZ8+UKon3naDjPx94lf1+5e+AzDhDLk5fm0UPDkYBgDSgzoRGd
         n9J+mdXIe3UFIdQPsvb5iErWb2/Fnzml3hum2frY1CM2Vkfq+xsWLZzNcy9YWYClM2DA
         PD5/IGRDO+sxvl/1jwnCeq5Je2zdZHIEdMYPTsvGm1cWk5lcudwK3OoNFVWgJ/MGyHP0
         E91/sOaiY10coaF23vOxC28FQ49V3CyXPFeTjtL2lizbl8FYHVUrcZZR4RY/4HJR2L9/
         F0818YErKX/RsxXiD1+arrFu4cHTiFlA8zJQt/lVPRH4C8jyryr/VaH6w4YoxScmoFAz
         quvA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=PnjKIRI9nO/ZKMy80vdFqw0K0YWJlvmo7GD0kULdH1Y=;
        b=a+LW8nczW+3B2ikqzn0N4SipHGc9h3Q2M3XbopuB7+zj1RHvktDei7P6WqfiH6ti5W
         AbvVzn2pWljnjeproC7iJeNQOsEcglZDIEil9N8h47deMT9pUSfnTPvY6I2ScwGO9saf
         lGj/UulU4i8BSUC5soFOkEUVKsqw8UN/JHh4n2F/3v6BnN9MwvCE84jmJbfH79GFrNas
         /kc4oQjJFYPTJi/L5dg8chGMoW+369je6fN7MrbX3Nv7huSJik55th8F8NZ62YVIPH/x
         p3j5Rmi4sD6O/r1buJH6uiA71dsq/Qu8IIaEYVjRFdIuLtQpSpuAKguj2S0p+AUNyBN+
         3EqQ==
X-Gm-Message-State: AA+aEWYlWkvqawMrA2KBrWJxVEzXTMTN4+X9fuJSzev1iiOQMYeNgJlS
        yrP+etN9/tNpRf42KO3L0eE5557G6abx9tTfzQW31A==
X-Google-Smtp-Source: AFSGD/WPXoyvlSKxNBXu0uXfAQ2ljnHqiGtGHpp48FTmPTVke+JOlhp1aDqq6JU2IderoCZJu4eEXkT41MVL0EPVuX8=
X-Received: by 2002:aca:b6c3:: with SMTP id g186mr6034817oif.289.1545061896234;
 Mon, 17 Dec 2018 07:51:36 -0800 (PST)
MIME-Version: 1.0
References: <20181217153652.20056-1-jank@cadence.com> <20181217153652.20056-3-jank@cadence.com>
In-Reply-To: <20181217153652.20056-3-jank@cadence.com>
From: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date: Mon, 17 Dec 2018 16:51:25 +0100
Message-ID: <CAMpxmJXrjyK3m4JwgkxwkHjSj-ugb7UzwNrYcBwYjWwj+JBNxw@mail.gmail.com>
Subject: Re: [PATCH v2 2/2] gpio: Add Cadence GPIO driver
To: Jan Kotas <jank@cadence.com>
Cc: Linus Walleij <linus.walleij@linaro.org>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        linux-gpio <linux-gpio@vger.kernel.org>,
        linux-devicetree <devicetree@vger.kernel.org>,
        LKML <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

pon., 17 gru 2018 o 16:37 Jan Kotas <jank@cadence.com> napisa=C5=82(a):
>
> This patch adds a driver for Cadence GPIO controller.
>
> It can be enabled with GPIO_CADENCE Kconfig option.
> It uses generic GPIO infrastructure and works
> as an interrupt controller.
> At the moment it only supports level sensitive irqs.
>
> Signed-off-by: Jan Kotas <jank@cadence.com>
> ---
>  drivers/gpio/Kconfig        |   8 ++
>  drivers/gpio/Makefile       |   1 +
>  drivers/gpio/gpio-cadence.c | 275 ++++++++++++++++++++++++++++++++++++++=
++++++
>  3 files changed, 284 insertions(+)
>  create mode 100644 drivers/gpio/gpio-cadence.c
>
> diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
> index 833a1b51c..8259f8f25 100644
> --- a/drivers/gpio/Kconfig
> +++ b/drivers/gpio/Kconfig
> @@ -160,6 +160,14 @@ config GPIO_BRCMSTB
>         help
>           Say yes here to enable GPIO support for Broadcom STB (BCM7XXX) =
SoCs.
>
> +config GPIO_CADENCE
> +       tristate "Cadence GPIO support"
> +       depends on OF_GPIO
> +       select GPIO_GENERIC
> +       select GPIOLIB_IRQCHIP
> +       help
> +         Say yes here to enable support for Cadence GPIO controller.
> +
>  config GPIO_CLPS711X
>         tristate "CLPS711X GPIO support"
>         depends on ARCH_CLPS711X || COMPILE_TEST
> diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
> index 671c4477c..5fce8634a 100644
> --- a/drivers/gpio/Makefile
> +++ b/drivers/gpio/Makefile
> @@ -37,6 +37,7 @@ obj-$(CONFIG_GPIO_BCM_KONA)   +=3D gpio-bcm-kona.o
>  obj-$(CONFIG_GPIO_BD9571MWV)   +=3D gpio-bd9571mwv.o
>  obj-$(CONFIG_GPIO_BRCMSTB)     +=3D gpio-brcmstb.o
>  obj-$(CONFIG_GPIO_BT8XX)       +=3D gpio-bt8xx.o
> +obj-$(CONFIG_GPIO_CADENCE)     +=3D gpio-cadence.o
>  obj-$(CONFIG_GPIO_CLPS711X)    +=3D gpio-clps711x.o
>  obj-$(CONFIG_GPIO_CS5535)      +=3D gpio-cs5535.o
>  obj-$(CONFIG_GPIO_CRYSTAL_COVE)        +=3D gpio-crystalcove.o
> diff --git a/drivers/gpio/gpio-cadence.c b/drivers/gpio/gpio-cadence.c
> new file mode 100644
> index 000000000..16cc9f50f
> --- /dev/null
> +++ b/drivers/gpio/gpio-cadence.c
> @@ -0,0 +1,275 @@
> +// SPDX-License-Identifier: GPL-2.0
> +
> +/*
> + * Copyright 2017-2018 Cadence
> + *
> + * Authors:
> + *  Jan Kotas <jank@cadence.com>
> + *  Boris Brezillon <boris.brezillon@free-electrons.com>
> + */
> +
> +#include <linux/gpio/driver.h>
> +#include <linux/clk.h>
> +#include <linux/interrupt.h>
> +#include <linux/kernel.h>
> +#include <linux/module.h>
> +#include <linux/platform_device.h>
> +#include <linux/slab.h>
> +
> +#define CDNS_GPIO_BYPASS_MODE          0x00
> +#define CDNS_GPIO_DIRECTION_MODE       0x04
> +#define CDNS_GPIO_OUTPUT_EN            0x08
> +#define CDNS_GPIO_OUTPUT_VALUE         0x0c
> +#define CDNS_GPIO_INPUT_VALUE          0x10
> +#define CDNS_GPIO_IRQ_MASK             0x14
> +#define CDNS_GPIO_IRQ_EN               0x18
> +#define CDNS_GPIO_IRQ_DIS              0x1c
> +#define CDNS_GPIO_IRQ_STATUS           0x20
> +#define CDNS_GPIO_IRQ_TYPE             0x24
> +#define CDNS_GPIO_IRQ_VALUE            0x28
> +#define CDNS_GPIO_IRQ_ANY_EDGE         0x2c
> +
> +struct cdns_gpio_chip {
> +       struct gpio_chip gc;
> +       struct clk *pclk;
> +       void __iomem *regs;
> +       u32 bypass_orig;
> +};
> +
> +static int cdns_gpio_request(struct gpio_chip *chip, unsigned int offset=
)
> +{
> +       struct cdns_gpio_chip *cgpio =3D gpiochip_get_data(chip);
> +
> +       iowrite32(ioread32(cgpio->regs + CDNS_GPIO_BYPASS_MODE) & ~BIT(of=
fset),
> +                 cgpio->regs + CDNS_GPIO_BYPASS_MODE);
> +
> +       return 0;
> +}
> +
> +static void cdns_gpio_free(struct gpio_chip *chip, unsigned int offset)
> +{
> +       struct cdns_gpio_chip *cgpio =3D gpiochip_get_data(chip);
> +
> +       iowrite32(ioread32(cgpio->regs + CDNS_GPIO_BYPASS_MODE) |
> +                 (BIT(offset) & cgpio->bypass_orig),
> +                 cgpio->regs + CDNS_GPIO_BYPASS_MODE);
> +}
> +
> +static void cdns_gpio_irq_mask(struct irq_data *d)
> +{
> +       struct gpio_chip *chip =3D irq_data_get_irq_chip_data(d);
> +       struct cdns_gpio_chip *cgpio =3D gpiochip_get_data(chip);
> +
> +       iowrite32(BIT(d->hwirq), cgpio->regs + CDNS_GPIO_IRQ_DIS);
> +}
> +
> +static void cdns_gpio_irq_unmask(struct irq_data *d)
> +{
> +       struct gpio_chip *chip =3D irq_data_get_irq_chip_data(d);
> +       struct cdns_gpio_chip *cgpio =3D gpiochip_get_data(chip);
> +
> +       iowrite32(BIT(d->hwirq), cgpio->regs + CDNS_GPIO_IRQ_EN);
> +}
> +
> +static int cdns_gpio_irq_set_type(struct irq_data *d, unsigned int type)
> +{
> +       struct gpio_chip *chip =3D irq_data_get_irq_chip_data(d);
> +       struct cdns_gpio_chip *cgpio =3D gpiochip_get_data(chip);
> +       u32 int_value =3D ioread32(cgpio->regs + CDNS_GPIO_IRQ_VALUE);
> +       u32 int_type =3D ioread32(cgpio->regs + CDNS_GPIO_IRQ_TYPE);
> +       u32 mask =3D BIT(d->hwirq);
> +
> +       int_value &=3D ~mask;
> +       int_type &=3D ~mask;
> +
> +       /*
> +        * The GPIO controller doesn't have an ACK register.
> +        * All interrupt statuses are cleared on a status register read.
> +        * Don't support edge interrupts for now.
> +        */
> +
> +       if (type =3D=3D IRQ_TYPE_LEVEL_HIGH) {
> +               int_type |=3D mask;
> +               int_value |=3D mask;
> +       } else if (type =3D=3D IRQ_TYPE_LEVEL_LOW) {
> +               int_type |=3D mask;
> +       } else {
> +               return -EINVAL;
> +       }
> +
> +       iowrite32(int_value, cgpio->regs + CDNS_GPIO_IRQ_VALUE);
> +       iowrite32(int_type, cgpio->regs + CDNS_GPIO_IRQ_TYPE);
> +
> +       return 0;
> +}
> +
> +static void cdns_gpio_irq_handler(struct irq_desc *desc)
> +{
> +       struct gpio_chip *chip =3D irq_desc_get_handler_data(desc);
> +       struct cdns_gpio_chip *cgpio =3D gpiochip_get_data(chip);
> +       struct irq_chip *irqchip =3D irq_desc_get_chip(desc);
> +       unsigned long status;
> +       int hwirq;
> +
> +       chained_irq_enter(irqchip, desc);
> +
> +       status =3D ioread32(cgpio->regs + CDNS_GPIO_IRQ_STATUS) &
> +               ~ioread32(cgpio->regs + CDNS_GPIO_IRQ_MASK);
> +
> +       for_each_set_bit(hwirq, &status, chip->ngpio)
> +               generic_handle_irq(irq_find_mapping(chip->irq.domain, hwi=
rq));
> +
> +       chained_irq_exit(irqchip, desc);
> +}
> +
> +static struct irq_chip cdns_gpio_irqchip =3D {
> +       .name           =3D "cdns-gpio",
> +       .irq_mask       =3D cdns_gpio_irq_mask,
> +       .irq_unmask     =3D cdns_gpio_irq_unmask,
> +       .irq_set_type   =3D cdns_gpio_irq_set_type
> +};
> +
> +static int cdns_gpio_probe(struct platform_device *pdev)
> +{
> +       struct cdns_gpio_chip *cgpio;
> +       struct resource *res;
> +       int ret, irq;
> +       u32 dir_prev;
> +       u32 num_gpios =3D 32;
> +
> +       cgpio =3D devm_kzalloc(&pdev->dev, sizeof(*cgpio), GFP_KERNEL);
> +       if (!cgpio)
> +               return -ENOMEM;
> +
> +       res =3D platform_get_resource(pdev, IORESOURCE_MEM, 0);
> +       cgpio->regs =3D devm_ioremap_resource(&pdev->dev, res);
> +       if (IS_ERR(cgpio->regs))
> +               return PTR_ERR(cgpio->regs);
> +
> +       of_property_read_u32(pdev->dev.of_node, "ngpios", &num_gpios);
> +
> +       if (num_gpios > 32) {
> +               dev_err(&pdev->dev, "ngpios must be less or equal 32\n");
> +               return -EINVAL;
> +       }
> +
> +       /*
> +        * Set all pins as inputs by default, otherwise:
> +        * gpiochip_lock_as_irq:
> +        * tried to flag a GPIO set as output for IRQ
> +        * Generic GPIO driver stores the direction value internally,
> +        * so it needs to be changed before bgpio_init() is called.
> +        */
> +       dir_prev =3D ioread32(cgpio->regs + CDNS_GPIO_DIRECTION_MODE);
> +       iowrite32(GENMASK(num_gpios - 1, 0),
> +                 cgpio->regs + CDNS_GPIO_DIRECTION_MODE);
> +
> +       ret =3D bgpio_init(&cgpio->gc, &pdev->dev, 4,
> +                        cgpio->regs + CDNS_GPIO_INPUT_VALUE,
> +                        cgpio->regs + CDNS_GPIO_OUTPUT_VALUE,
> +                        NULL,
> +                        NULL,
> +                        cgpio->regs + CDNS_GPIO_DIRECTION_MODE,
> +                        BGPIOF_READ_OUTPUT_REG_SET);
> +       if (ret) {
> +               dev_err(&pdev->dev, "Failed to register generic gpio, %d\=
n",
> +                       ret);
> +               goto err_revert_dir;
> +       }
> +
> +       cgpio->gc.label =3D dev_name(&pdev->dev);
> +       cgpio->gc.ngpio =3D num_gpios;
> +       cgpio->gc.parent =3D &pdev->dev;
> +       cgpio->gc.base =3D -1;
> +       cgpio->gc.owner =3D THIS_MODULE;
> +       cgpio->gc.request =3D cdns_gpio_request;
> +       cgpio->gc.free =3D cdns_gpio_free;
> +
> +       cgpio->pclk =3D devm_clk_get(&pdev->dev, NULL);
> +       if (IS_ERR(cgpio->pclk)) {
> +               ret =3D PTR_ERR(cgpio->pclk);
> +               dev_err(&pdev->dev,
> +                       "Failed to retrieve peripheral clock, %d\n", ret)=
;
> +               goto err_revert_dir;
> +       }
> +
> +       ret =3D clk_prepare_enable(cgpio->pclk);
> +       if (ret) {
> +               dev_err(&pdev->dev,
> +                       "Failed to enable the peripheral clock, %d\n", re=
t);
> +               goto err_revert_dir;
> +       }
> +
> +       ret =3D devm_gpiochip_add_data(&pdev->dev, &cgpio->gc, cgpio);
> +       if (ret < 0) {
> +               dev_err(&pdev->dev, "Could not register gpiochip, %d\n", =
ret);
> +               goto err_disable_clk;
> +       }
> +
> +       /*
> +        * irq_chip support
> +        */
> +       irq =3D platform_get_irq(pdev, 0);
> +       if (irq >=3D 0) {
> +               ret =3D gpiochip_irqchip_add(&cgpio->gc, &cdns_gpio_irqch=
ip,
> +                                          0, handle_level_irq,
> +                                          IRQ_TYPE_NONE);
> +               if (ret) {
> +                       dev_err(&pdev->dev, "Could not add irqchip, %d\n"=
,
> +                               ret);
> +                       goto err_disable_clk;
> +               }
> +               gpiochip_set_chained_irqchip(&cgpio->gc, &cdns_gpio_irqch=
ip,
> +                                            irq, cdns_gpio_irq_handler);
> +       }
> +
> +       cgpio->bypass_orig =3D ioread32(cgpio->regs + CDNS_GPIO_BYPASS_MO=
DE);
> +
> +       /*
> +        * Enable gpio outputs, ignored for input direction
> +        */
> +       iowrite32(GENMASK(num_gpios - 1, 0),
> +                 cgpio->regs + CDNS_GPIO_OUTPUT_EN);
> +       iowrite32(0, cgpio->regs + CDNS_GPIO_BYPASS_MODE);
> +
> +       platform_set_drvdata(pdev, cgpio);
> +       return 0;
> +
> +err_disable_clk:
> +       clk_disable_unprepare(cgpio->pclk);
> +
> +err_revert_dir:
> +       iowrite32(dir_prev, cgpio->regs + CDNS_GPIO_DIRECTION_MODE);
> +
> +       return ret;
> +}
> +
> +static int cdns_gpio_remove(struct platform_device *pdev)
> +{
> +       struct cdns_gpio_chip *cgpio =3D platform_get_drvdata(pdev);
> +
> +       iowrite32(cgpio->bypass_orig, cgpio->regs + CDNS_GPIO_BYPASS_MODE=
);
> +       clk_disable_unprepare(cgpio->pclk);
> +
> +       return 0;
> +}
> +
> +static const struct of_device_id cdns_of_ids[] =3D {
> +       { .compatible =3D "cdns,gpio-r1p02" },
> +       { /* sentinel */ },
> +};
> +
> +static struct platform_driver cdns_gpio_driver =3D {
> +       .driver =3D {
> +               .name =3D "cdns-gpio",
> +               .of_match_table =3D cdns_of_ids,
> +       },
> +       .probe =3D cdns_gpio_probe,
> +       .remove =3D cdns_gpio_remove,
> +};
> +module_platform_driver(cdns_gpio_driver);
> +
> +MODULE_AUTHOR("Jan Kotas <jank@cadence.com>");
> +MODULE_DESCRIPTION("Cadence GPIO driver");
> +MODULE_LICENSE("GPL v2");
> +MODULE_ALIAS("platform:cdns-gpio");
> --
> 2.15.0
>

The driver looks good but is there any particular reason not to use
regmap for register IO?

Bart
