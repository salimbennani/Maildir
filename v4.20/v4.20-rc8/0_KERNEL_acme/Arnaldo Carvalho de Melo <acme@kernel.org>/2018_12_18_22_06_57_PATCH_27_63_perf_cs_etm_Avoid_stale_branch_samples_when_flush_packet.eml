Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:44:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E81155805FC;
	Tue, 18 Dec 2018 14:10:30 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 14:10:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3bQG1ROt+1szCUp4jGUl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn7r8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRsZfWTJcDI2y?=
 =?us-ascii?q?bIUBCOgOPehXoIfyvFsOtRmzCBKwCO7s0DJEmmX70bEm3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMsNj1LqESXvqxzKbVyjXIcu1b1i3n6IjWaB8hpfGMXbVtesXM10YkCgTLgUuU?=
 =?us-ascii?q?qYziIjiY0f4CvHSe7+V+Tu+viHAoqxt3ojexwscgkI7Jhpgayl3d8yhy3Yg7Jd?=
 =?us-ascii?q?q9SEFhYN6kFoNdtyKEOItsRMMtXWVotDw9yr0ctp62ejUBxpc/xxPHdfCLb4yF?=
 =?us-ascii?q?7gj+WOufPzt0nm9pdbGjixqo8EWtyPXwWtS33VtOtCZIncXAumoQ2xDP98SLUO?=
 =?us-ascii?q?Zx80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWSoD?=
 =?us-ascii?q?QjnjEGbbgUVH2KWX93uaqbA5p4LqlZ5ITaVUAg8bDPQfX21/GtUGLJA/dTo+j7?=
 =?us-ascii?q?efjMlA6Xf2iRTVQ40Ot5vCW9qRDO/pJTLfiqNLMUhbiYjkJJgeY9Wok3dpbUN3?=
 =?us-ascii?q?ycGTQxLd?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAABUbxlch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgVqBD4ECFBOYEYINFJdGFIFfFRgNBgGHHSI2Bw0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgpIwyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGAcfEgMlHhEGDAcFg?=
 =?us-ascii?q?lJLAYFzDQIDCqYfgWwzgnYBAQWBMAGFeAiHfoMlgRwXgX+DdYR4BAESAYV+iSR?=
 =?us-ascii?q?MgU2VaQmHD4YwhBUMGIIqjy2LN4MEiziBTQiBDnFNMAiDJwkKggiJAYVZJjIBA?=
 =?us-ascii?q?YEDAQGLEw8XgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AdAABUbxlch0O0hNFjHAEBAQQBAQcEAQGBUwUBAQsBgVq?=
 =?us-ascii?q?BD4ECFBOYEYINFJdGFIFfFRgNBgGHHSI2Bw0BAwEBAQEBAQIBEwEBAQoLCQgpI?=
 =?us-ascii?q?wyCNiQBgmIDAwECJAsBDQEBNwEFCQEBGAcfEgMlHhEGDAcFglJLAYFzDQIDCqY?=
 =?us-ascii?q?fgWwzgnYBAQWBMAGFeAiHfoMlgRwXgX+DdYR4BAESAYV+iSRMgU2VaQmHD4Ywh?=
 =?us-ascii?q?BUMGIIqjy2LN4MEiziBTQiBDnFNMAiDJwkKggiJAYVZJjIBAYEDAQGLEw8Xgic?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="56901337"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 14:10:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728049AbeLRWKV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 17:10:21 -0500
Received: from mail.kernel.org ([198.145.29.99]:38784 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726962AbeLRWKU (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 17:10:20 -0500
Received: from quaco.ghostprotocols.net (unknown [189.40.101.1])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 7E462218A2;
        Tue, 18 Dec 2018 22:10:14 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545171019;
        bh=dsy2YhwR2nlv+p5/mn/YuJE3yOKcsU29OQ88s+1DFDU=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=fFKnYZ3JN1bjXAUhFB788+4ZJO3vDbmCk519n9yd/4PobrnbVRldeDe0EOPKSTyJx
         MQMHSfpnnr0j5HMxSAtHFSTq0tHJPRKjBTVOFnMT5ZNrZxC5AlqzxtH30xWV0zPJt8
         p885XvKcnP4Mlu5s8qlYzkO4wDojUkgJo3EXl5WA=
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Ingo Molnar <mingo@kernel.org>
Cc: Clark Williams <williams@redhat.com>, linux-kernel@vger.kernel.org,
        linux-perf-users@vger.kernel.org, Leo Yan <leo.yan@linaro.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Jiri Olsa <jolsa@redhat.com>,
        Mike Leach <mike.leach@linaro.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Robert Walker <robert.walker@arm.com>,
        coresight@lists.linaro.org, linux-arm-kernel@lists.infradead.org,
        Arnaldo Carvalho de Melo <acme@redhat.com>
Subject: [PATCH 27/63] perf cs-etm: Avoid stale branch samples when flush packet
Date: Tue, 18 Dec 2018 19:06:57 -0300
Message-Id: <20181218220733.15839-28-acme@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181218220733.15839-1-acme@kernel.org>
References: <20181218220733.15839-1-acme@kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Leo Yan <leo.yan@linaro.org>

At the end of trace buffer handling, function cs_etm__flush() is invoked
to flush any remaining branch stack entries.  As a side effect, it also
generates branch sample, because the 'etmq->packet' doesn't contains any
new coming packet but point to one stale packet after packets swapping,
so it wrongly makes synthesize branch samples with stale packet info.

We could review below detailed flow which causes issue:

  Packet1: start_addr=0xffff000008b1fbf0 end_addr=0xffff000008b1fbfc
  Packet2: start_addr=0xffff000008b1fb5c end_addr=0xffff000008b1fb6c

  step 1: cs_etm__sample():
	sample: ip=(0xffff000008b1fbfc-4) addr=0xffff000008b1fb5c

  step 2: flush packet in cs_etm__run_decoder():
	cs_etm__run_decoder()
	  `-> err = cs_etm__flush(etmq, false);
	sample: ip=(0xffff000008b1fb6c-4) addr=0xffff000008b1fbf0

Packet1 and packet2 are two continuous packets, when packet2 is the new
coming packet, cs_etm__sample() generates branch sample for these two
packets and use [packet1::end_addr - 4 => packet2::start_addr] as branch
jump flow, thus we can see the first generated branch sample in step 1.
At the end of cs_etm__sample() it swaps packets so 'etm->prev_packet'=
packet2 and 'etm->packet'=packet1, so far it's okay for branch sample.

If packet2 is the last one packet in trace buffer, even there have no
any new coming packet, cs_etm__run_decoder() invokes cs_etm__flush() to
flush branch stack entries as expected, but it also generates branch
samples by taking 'etm->packet' as a new coming packet, thus the branch
jump flow is as [packet2::end_addr - 4 =>  packet1::start_addr]; this
is the second sample which is generated in step 2.  So actually the
second sample is a stale sample and we should not generate it.

This patch introduces a new function cs_etm__end_block(), at the end of
trace block this function is invoked to only flush branch stack entries
and thus can avoid to generate branch sample for stale packet.

Signed-off-by: Leo Yan <leo.yan@linaro.org>
Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Jiri Olsa <jolsa@redhat.com>
Cc: Mike Leach <mike.leach@linaro.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Robert Walker <robert.walker@arm.com>
Cc: coresight@lists.linaro.org
Cc: linux-arm-kernel@lists.infradead.org
Link: http://lkml.kernel.org/r/1544513908-16805-3-git-send-email-leo.yan@linaro.org
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/util/cs-etm.c | 35 ++++++++++++++++++++++++++++++++++-
 1 file changed, 34 insertions(+), 1 deletion(-)

diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index 789707bc4e9e..ffc4fe5c0b7e 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -1055,6 +1055,39 @@ static int cs_etm__flush(struct cs_etm_queue *etmq)
 	return err;
 }
 
+static int cs_etm__end_block(struct cs_etm_queue *etmq)
+{
+	int err;
+
+	/*
+	 * It has no new packet coming and 'etmq->packet' contains the stale
+	 * packet which was set at the previous time with packets swapping;
+	 * so skip to generate branch sample to avoid stale packet.
+	 *
+	 * For this case only flush branch stack and generate a last branch
+	 * event for the branches left in the circular buffer at the end of
+	 * the trace.
+	 */
+	if (etmq->etm->synth_opts.last_branch &&
+	    etmq->prev_packet->sample_type == CS_ETM_RANGE) {
+		/*
+		 * Use the address of the end of the last reported execution
+		 * range.
+		 */
+		u64 addr = cs_etm__last_executed_instr(etmq->prev_packet);
+
+		err = cs_etm__synth_instruction_sample(
+			etmq, addr,
+			etmq->period_instructions);
+		if (err)
+			return err;
+
+		etmq->period_instructions = 0;
+	}
+
+	return 0;
+}
+
 static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
 {
 	struct cs_etm_auxtrace *etm = etmq->etm;
@@ -1137,7 +1170,7 @@ static int cs_etm__run_decoder(struct cs_etm_queue *etmq)
 
 		if (err == 0)
 			/* Flush any remaining branch stack entries */
-			err = cs_etm__flush(etmq);
+			err = cs_etm__end_block(etmq);
 	}
 
 	return err;
-- 
2.19.2

