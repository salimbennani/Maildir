Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 08:44:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0369C58055F;
	Tue, 18 Dec 2018 14:10:10 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 18 Dec 2018 14:10:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A4Rt4dxwE30U65wvXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8WIvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWpPUNhMWSJPAY2y?=
 =?us-ascii?q?aIkAD+QOMuhXtIn9v1kDoACiCQSvHu7j1iVFimPq0aA8zu8vERvG3AslH98WrH?=
 =?us-ascii?q?nUttP1O70WUe+oy6nD0CvOYOlM2Tfj8ofIdhAhofaRVr1tb8Xa1E4hGB3BjlWX?=
 =?us-ascii?q?tIfoOCma2fgIs2eF9OdgVvygi3Qhqw5vpjij3MAsipPGho8MzF3P6Ct3wIEwJd?=
 =?us-ascii?q?KiSU57Z8apEJhOuCGAMYt5XMciT3tvuCYgxb0Lv4OwcisSyJk/2RLTd/iKf5KV?=
 =?us-ascii?q?7h/tSuqdOyp0iXF5dL6lhhu/81CsxvD/W8SwylpHoTZJnsPRunwRyhDf8NWLR/?=
 =?us-ascii?q?1g9Um7wzmPzRrc6uRcLEA0i6XbL5khz6Yulpocr0vDBDX6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/7gYrX8qZ+QL450igfgPaQygsGzH/g0PwwUU2SG9+mwyqfv8VD6TblWlPE7k6?=
 =?us-ascii?q?vUvIjfJcsBp665BwFV0pwk6xa6Fzqm1NUYnX8aLFNKYR6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mlOskTltx//YJL3sGYvNLnfdn7f7Z7p96FBTyBA1zd9B45JYELYBIOj8WkPprt?=
 =?us-ascii?q?zXEgc5MxCow+bgENh90oIeWWGRDaODP6LSrESF5uYuI+mKeY8UtyzxK/kj5/7y?=
 =?us-ascii?q?k3A5nUURcrWu3ZsScHq4BOhpI12FYXrwhdcMCWcKsRA/TOz2klKCViRfZ3avX6?=
 =?us-ascii?q?0m4DE7B5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szROutAjkxLZ9LerU/SsYtZTk1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwggLp7cz+t6C9PoVgLbZNiJSk2r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzK?=
 =?us-ascii?q?ohgEMgQsdVMW2mh7Rw9w7cB4PSl0WZlqCqdbkT3SLX9WeDy3aOs19cUAJqTarF?=
 =?us-ascii?q?WnUfbFPMrdvl/kPCU6OuCbM/PwRc08GCNLVFZsfpjVpcQvfjI8rRY2S2l2e0Bh?=
 =?us-ascii?q?aIw7eMYZHue2Uc2iXdFUcFnxoS/XaAKQgxGCOhr3jCAzxpEFLle1ns/vVmqHOn?=
 =?us-ascii?q?Uk80yBmHYFB72Lqr5BEZn/ycROkV3rIfpighrS55HFK839LQFtqBqBBtfKRaYd?=
 =?us-ascii?q?Mh/lhH0XjVuBB6PpylN6pinEIRcxxrv0Py0BV6EplAkckvrHMt0ApyKaKZ3Eld?=
 =?us-ascii?q?dz+C2pDwILnXKmj0/BCgcKPW3lDe0NCL+qYA8vg4qlPjvB23GUom6Xloz95V03?=
 =?us-ascii?q?6E7JXQEAUSSY7xUlow9xVivb7aZjcy5ozK2nxsK6W7qSLC1M8zC+sjyRageMlf?=
 =?us-ascii?q?PbiAFA/zFc0aGsevJPYrm1ivchILIuRS+LQoMMOhcvuMwLSrM/p4nDK6kWRH55?=
 =?us-ascii?q?hw00KR9yZmVuHExZcEw/GC0QuBWDfxl1OhssHxmYBZajAeBGu/yS74BIFPYq1+?=
 =?us-ascii?q?Z5oECWCrI8ev3NVxm4btW2JE9F6kH14Gws6pdgaIYFznwAJQ0l4boXq5liuizj?=
 =?us-ascii?q?x4ii0mobCb3CPT3evibh0HOmhQSWlmjFfsJ5W0jt8AUEipaQgpiAWq5ULgy6dH?=
 =?us-ascii?q?o6R/KnHZQV1UcCjuM2FiTqywu6KCYs5O8p8psT9bUP+hYVCcUbP9pxoa0yX+H2?=
 =?us-ascii?q?pR3jw7djequonnkBx+km6SMHFzrH/Bc8Fq2Rjf/MDcReJW3jceRil3kyPXBlu/?=
 =?us-ascii?q?P9mu59mUjI3MsuO9V2KgUJ1cby/rwJiEtCu6421qHBK+k+qymt3hDQg1zyv728?=
 =?us-ascii?q?N2WiXPqRb2epPr2LiiMeJ7YkloA0fx6spgFYF5iIcwhpAQ2X4Bi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sV2i0n7sBGEq?=
 =?us-ascii?q?eU7KFekitzrVq1tgbRYfl7njcAxvoi8n8ag+cVuAUzyiWRGKwdHU5dPSb0jRSH?=
 =?us-ascii?q?88i+rLlLZGaoabWw0Ut+ndO7A72YrABTRm35eos8Ei9q9cpwLkjM0HLo54Hged?=
 =?us-ascii?q?nQa88TtxKOnxfBiehVNIw+lv4QiSV7PmL9uGUvy/Qnghx2wZG6oI+HJn1x/KK+?=
 =?us-ascii?q?Bx5ULDz0aNkV+jHwlqZehceW0purHpVgHDULQZTpQeipEDIUqfToKQKOHCcgpX?=
 =?us-ascii?q?ecHLrVBRWf51t+r3LTD5CrMGmaK2IDwtVlQBmdOVZTgAQJXDghmp45FwaqxNHu?=
 =?us-ascii?q?cUtj5zAR4EL4pQVIyu5yKxb/VWLfrh+yajgoUJifMAZW7gZa6kfXK8Oe6/x8Hz?=
 =?us-ascii?q?pC8p29tgCNKXGbZwdVDWEPQEOEHEvuPr2v5dnG7uiZCfCyL/rIYbWSt+NeU+2E?=
 =?us-ascii?q?yo6o0otj5zyMLNmAPmF+D/0n3UpORXB4G8PEmzUWViwYjSTNY9SApBe7/C13od?=
 =?us-ascii?q?uy8PDqWALp+IuOBKFeMdRp+xCqn6iDM/Scizp+KTZdzpkM32PHyKAD3F4OjCFj?=
 =?us-ascii?q?bzmtHqoBtS7OT6LQm7VbDx0BayN0O8tH8bg83hRWOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgepOqh2/oiybHFHjPziZ?=
 =?us-ascii?q?kznpVguiMeVNjCGdIRxft5uxchdrCWj/Ut3mbge3P8NwjT0z2bc0nG/FNXYAMT?=
 =?us-ascii?q?hgdENAtqGQ7SJdgvllB2NN9GZqLemalCaf9OTYLpcWsf12AiV7je5a4XI6y6dL?=
 =?us-ascii?q?4yFAXvB6hCzSrtt2qVG8juaP0iZnUAZJqjtThIOEp0NiOaDY9plGQXnF/RIN4n?=
 =?us-ascii?q?+WCxQFvNZlDtzvu6ZNytnAjq7zKTFC887K8ssYHcTbNMWHMH9yeSbuTR/SAwxN?=
 =?us-ascii?q?aDmvM2jFzxhYkfed8VWWo4I8p5yqn4ABHOx1TlswQ9oADE1hENtKC55tQDogkb?=
 =?us-ascii?q?nTgMNAwHe6q1GFTc5fs7jEW+iUDPGpLyyW2+oXLyAUyK/1eNxAfrbw3FZvPxwj?=
 =?us-ascii?q?xNzH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAC8bxlch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGCaYECFBOYEYINFJJJhH2BcxUYCwgBhx0iNgcNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEKCwkIKSMMgjYkAYJiAwMBAiQLAQ0BATcBBQkBARgHHxIDV?=
 =?us-ascii?q?AYMBwWDHQGBcw0CAwqmIIFsM4J2AQEFhykIh36DJYEcF4F/gRGHXIYWiz2VaQm?=
 =?us-ascii?q?HD4pFDBiRVyyOD4s4gU0IgX9NMAiDJwmCEgkDF4hehVkmMgEBgQMBAYsTgk0BA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0ADAAC8bxlch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGCaYECFBOYEYINFJJJhH2BcxUYCwgBhx0iNgcNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEKCwkIKSMMgjYkAYJiAwMBAiQLAQ0BATcBBQkBARgHHxIDVAYMBwWDHQGBcw0?=
 =?us-ascii?q?CAwqmIIFsM4J2AQEFhykIh36DJYEcF4F/gRGHXIYWiz2VaQmHD4pFDBiRVyyOD?=
 =?us-ascii?q?4s4gU0IgX9NMAiDJwmCEgkDF4hehVkmMgEBgQMBAYsTgk0BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,370,1539673200"; 
   d="scan'208";a="142660581"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 18 Dec 2018 14:10:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728014AbeLRWJt (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 18 Dec 2018 17:09:49 -0500
Received: from mail.kernel.org ([198.145.29.99]:38098 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726962AbeLRWJs (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 18 Dec 2018 17:09:48 -0500
Received: from quaco.ghostprotocols.net (unknown [189.40.101.1])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 804D1217D9;
        Tue, 18 Dec 2018 22:09:44 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1545170987;
        bh=aRijuydFcdIGUnfO31WU1EqXSS/PRyvCf3K/WgnL9IQ=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=MpQMZvhS+AtNTY8sOLNH+Pem4M+IEop/1lJkvZWlOdMxDGQzGAJmHdxNyOeMACGaH
         0eQyheGrCNNsFXFB5fJbOoARvGIoO43fKh2r1qedCmkSk2cxFJefP1IfJaimeZc+KF
         k6E02nAIs7umMsLBH9MGi6rUrFYBSq2acGuMRVz0=
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Ingo Molnar <mingo@kernel.org>
Cc: Clark Williams <williams@redhat.com>, linux-kernel@vger.kernel.org,
        linux-perf-users@vger.kernel.org,
        Arnaldo Carvalho de Melo <acme@redhat.com>,
        Adrian Hunter <adrian.hunter@intel.com>,
        Jiri Olsa <jolsa@kernel.org>,
        Namhyung Kim <namhyung@kernel.org>,
        Wang Nan <wangnan0@huawei.com>
Subject: [PATCH 22/63] perf trace: Implement syscall filtering in augmented_syscalls
Date: Tue, 18 Dec 2018 19:06:52 -0300
Message-Id: <20181218220733.15839-23-acme@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181218220733.15839-1-acme@kernel.org>
References: <20181218220733.15839-1-acme@kernel.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Arnaldo Carvalho de Melo <acme@redhat.com>

Just another map, this time an BPF_MAP_TYPE_ARRAY, stating with
one bool per syscall, stating if it should be filtered or not.

So, with a pre-built augmented_raw_syscalls.o file, we use:

  # perf trace -e open*,augmented_raw_syscalls.o
     0.000 ( 0.016 ms): DNS Res~er #37/29652 openat(dfd: CWD, filename: /etc/hosts, flags: CLOEXEC                 ) = 138
   187.039 ( 0.048 ms): gsd-housekeepi/2436 openat(dfd: CWD, filename: /etc/fstab, flags: CLOEXEC                 ) = 11
   187.348 ( 0.041 ms): gsd-housekeepi/2436 openat(dfd: CWD, filename: /proc/self/mountinfo, flags: CLOEXEC       ) = 11
   188.793 ( 0.036 ms): gsd-housekeepi/2436 openat(dfd: CWD, filename: /proc/self/mountinfo, flags: CLOEXEC       ) = 11
   189.803 ( 0.029 ms): gsd-housekeepi/2436 openat(dfd: CWD, filename: /proc/self/mountinfo, flags: CLOEXEC       ) = 11
   190.774 ( 0.027 ms): gsd-housekeepi/2436 openat(dfd: CWD, filename: /proc/self/mountinfo, flags: CLOEXEC       ) = 11
   284.620 ( 0.149 ms): DataStorage/3076 openat(dfd: CWD, filename: /home/acme/.mozilla/firefox/ina67tev.default/SiteSecurityServiceState.txt, flags: CREAT|TRUNC|WRONLY, mode: IRUGO|IWUSR|IWGRP) = 167
  ^C#

What is it that this gsd-housekeeping thingy needs to open
/proc/self/mountinfo four times periodically? :-)

This map will be extended to tell per-syscall parameters, i.e. how many
bytes to copy per arg, using the function signature to get the types and
then the size of those types, via BTF.

Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Wang Nan <wangnan0@huawei.com>
Link: https://lkml.kernel.org/n/tip-cy222g9ucvnym3raqvxp0hpg@git.kernel.org
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/builtin-trace.c                    | 66 +++++++++++++++++++
 .../examples/bpf/augmented_raw_syscalls.c     | 26 +++++++-
 2 files changed, 91 insertions(+), 1 deletion(-)

diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index f9eb5bc4fefb..de81918c7ad4 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -76,6 +76,7 @@ struct trace {
 	struct {
 		int		max;
 		struct syscall  *table;
+		struct bpf_map  *map;
 		struct {
 			struct perf_evsel *sys_enter,
 					  *sys_exit,
@@ -2578,8 +2579,64 @@ static int trace__set_ev_qualifier_tp_filter(struct trace *trace)
 	goto out;
 }
 
+#ifdef HAVE_LIBBPF_SUPPORT
+static int trace__set_ev_qualifier_bpf_filter(struct trace *trace)
+{
+	int fd = bpf_map__fd(trace->syscalls.map);
+	bool value = !trace->not_ev_qualifier;
+	int err = 0;
+	size_t i;
+
+	for (i = 0; i < trace->ev_qualifier_ids.nr; ++i) {
+		int key = trace->ev_qualifier_ids.entries[i];
+
+		err = bpf_map_update_elem(fd, &key, &value, BPF_EXIST);
+		if (err)
+			break;
+	}
+
+	return err;
+}
+
+static int __trace__init_syscalls_bpf_map(struct trace *trace, bool enabled)
+{
+	int fd = bpf_map__fd(trace->syscalls.map);
+	int err = 0, key;
+
+	for (key = 0; key < trace->sctbl->syscalls.nr_entries; ++key) {
+		err = bpf_map_update_elem(fd, &key, &enabled, BPF_ANY);
+		if (err)
+			break;
+	}
+
+	return err;
+}
+
+static int trace__init_syscalls_bpf_map(struct trace *trace)
+{
+	bool enabled = true;
+
+	if (trace->ev_qualifier_ids.nr)
+		enabled = trace->not_ev_qualifier;
+
+	return __trace__init_syscalls_bpf_map(trace, enabled);
+}
+#else
+static int trace__set_ev_qualifier_bpf_filter(struct trace *trace __maybe_unused)
+{
+	return 0;
+}
+
+static int trace__init_syscalls_bpf_map(struct trace *trace __maybe_unused)
+{
+	return 0;
+}
+#endif // HAVE_LIBBPF_SUPPORT
+
 static int trace__set_ev_qualifier_filter(struct trace *trace)
 {
+	if (trace->syscalls.map)
+		return trace__set_ev_qualifier_bpf_filter(trace);
 	return trace__set_ev_qualifier_tp_filter(trace);
 }
 
@@ -2822,6 +2879,9 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 	if (err < 0)
 		goto out_error_mem;
 
+	if (trace->syscalls.map)
+		trace__init_syscalls_bpf_map(trace);
+
 	if (trace->ev_qualifier_ids.nr > 0) {
 		err = trace__set_ev_qualifier_filter(trace);
 		if (err < 0)
@@ -3449,6 +3509,11 @@ static void trace__set_bpf_map_filtered_pids(struct trace *trace)
 	trace->filter_pids.map = bpf__find_map_by_name("pids_filtered");
 }
 
+static void trace__set_bpf_map_syscalls(struct trace *trace)
+{
+	trace->syscalls.map = bpf__find_map_by_name("syscalls");
+}
+
 int cmd_trace(int argc, const char **argv)
 {
 	const char *trace_usage[] = {
@@ -3589,6 +3654,7 @@ int cmd_trace(int argc, const char **argv)
 	if (evsel) {
 		trace.syscalls.events.augmented = evsel;
 		trace__set_bpf_map_filtered_pids(&trace);
+		trace__set_bpf_map_syscalls(&trace);
 	}
 
 	err = bpf__setup_stdout(trace.evlist);
diff --git a/tools/perf/examples/bpf/augmented_raw_syscalls.c b/tools/perf/examples/bpf/augmented_raw_syscalls.c
index 74ce7574073d..bb3dcc4ec256 100644
--- a/tools/perf/examples/bpf/augmented_raw_syscalls.c
+++ b/tools/perf/examples/bpf/augmented_raw_syscalls.c
@@ -26,6 +26,13 @@ struct bpf_map SEC("maps") __augmented_syscalls__ = {
 	.max_entries = __NR_CPUS__,
 };
 
+struct bpf_map SEC("maps") syscalls = {
+	.type	     = BPF_MAP_TYPE_ARRAY,
+	.key_size    = sizeof(int),
+	.value_size  = sizeof(bool),
+	.max_entries = 512,
+};
+
 struct syscall_enter_args {
 	unsigned long long common_tp_fields;
 	long		   syscall_nr;
@@ -56,6 +63,7 @@ int sys_enter(struct syscall_enter_args *args)
 		struct syscall_enter_args args;
 		struct augmented_filename filename;
 	} augmented_args;
+	bool *enabled;
 	unsigned int len = sizeof(augmented_args);
 	const void *filename_arg = NULL;
 
@@ -63,6 +71,10 @@ int sys_enter(struct syscall_enter_args *args)
 		return 0;
 
 	probe_read(&augmented_args.args, sizeof(augmented_args.args), args);
+
+	enabled = bpf_map_lookup_elem(&syscalls, &augmented_args.args.syscall_nr);
+	if (enabled == NULL || !*enabled)
+		return 0;
 	/*
 	 * Yonghong and Edward Cree sayz:
 	 *
@@ -131,7 +143,19 @@ int sys_enter(struct syscall_enter_args *args)
 SEC("raw_syscalls:sys_exit")
 int sys_exit(struct syscall_exit_args *args)
 {
-	return !pid_filter__has(&pids_filtered, getpid());
+	struct syscall_exit_args exit_args;
+	bool *enabled;
+
+	if (pid_filter__has(&pids_filtered, getpid()))
+		return 0;
+
+	probe_read(&exit_args, sizeof(exit_args), args);
+
+	enabled = bpf_map_lookup_elem(&syscalls, &exit_args.syscall_nr);
+	if (enabled == NULL || !*enabled)
+		return 0;
+
+	return 1;
 }
 
 license(GPL);
-- 
2.19.2

