Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:34:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DFC4C580522;
	Wed, 19 Dec 2018 04:34:13 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 04:34:13 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABIvr3hdfe2wnXmtNaAfqw+X5lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc68ZxGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUPE+QPM+VWr4b/plsBsRSwCga3BOP3yDJFnWP23bQg3ug9DQ3KwBEsEtQTu3?=
 =?us-ascii?q?rUttX1M6ISXPi7wKnK1zrDau1Z2Szg44jRcxAuu/eMVq9+cMXLz0kvGB7OglGM?=
 =?us-ascii?q?pIz/OjOey/oDvHaH4OpgU+KvjGonqwZ+ojmv28whlInJhoMTyl/e8Cl1zps+KN?=
 =?us-ascii?q?q6SEFhZN6rDoBQuzuDN4t3WMwiRXtkuSggxb0Atp62ZzIFyI4ixxLFd/OHdI2I?=
 =?us-ascii?q?7wvlWe2MLzl4g3dld6i+hxa06UWg0+z8WdOy0FpQoCtKiN/Mtn8L2hfO6caHUu?=
 =?us-ascii?q?Nw8lm91TuLzQzf9+9JLV4umabGKJMt3qQ8m5sRvEjbAyP6hUv7gLWIekgg4OSl?=
 =?us-ascii?q?6Ofqbq/kq5OEOY97lALzPrgrl8G6HOg3LwYOX2ae9Omz2rDu8kP5TbBKg/Ayjq?=
 =?us-ascii?q?XUsJXXKMsbq6GkGABY1Jso5QylADe8ytsYmGEKLFJbdxKDiIjkI0/OIP/mAvel?=
 =?us-ascii?q?mViskylkx+rAPrL/BpXBNH/DkK3ufbpl6k5czhQ8zcxH6p5KFr0MJOj/VlL/ud?=
 =?us-ascii?q?DGFBM1Lg+5z/r9BNh81I4SQWePDbWYMKPWv1+I/OUvI+yUaY8RuTb9LeUl5vH3?=
 =?us-ascii?q?gX86h1AdZ6+p0oUTaHyhGfRnLUOZbmT2gtoaD2cKsRQxTPbwhF2BTzFTfXCyUL?=
 =?us-ascii?q?w45j0hD4KmF4jDSpi3gLOdxCe7AoFWZmdeB1CIEHfodJuLV+0DaSKPOcJhlj0E?=
 =?us-ascii?q?Vb68S44uzx2utQn6y6Z5IerQ4CEXqZXj1N1t7e3JiR4y7SB0D9ia02yVT2F7hG?=
 =?us-ascii?q?IIRyMs06B4u0B9ykqD3rJ+g/xXDtFT4/JJUgEnNZ/T1eB6CtbyWh7fcdeNUlqp?=
 =?us-ascii?q?XtKmATQpRNIr39AOe1p9G8mljh3b3SqqBKEam6aIBJwz9KLc2X/xKt15y3bH0q?=
 =?us-ascii?q?khklYnTtFONW2gmq5w6QzTC5TVnEWekqagbb4c0zLV9Gef0WqOu1lVXxRrUaXF?=
 =?us-ascii?q?WnAfZVHarc7j6UPAVLKuDbUnMg1cyc+NMKdKa9vpjUlYS/fnItjRf2Wxm2KoDx?=
 =?us-ascii?q?aS2ryMdJbqe3ka3CjFC0gLiQYT8WyCNQg/HCihpW3eASdqFVLuZUPs7OZ/pGm6?=
 =?us-ascii?q?Tk8y0wGFcUlh26Cp9R4SgPyWU+kT0a4cuCc9tzV0G06w0M/MBNqeuQVtZqVcbs?=
 =?us-ascii?q?k74Fdcy23ZsQtxPpijL6Bngl4TaAB3v0Lo1xVqBYRMi8kqrHU2zAVsLaKUyk9O?=
 =?us-ascii?q?dzSd3ZroIL3YNnHy/Ayza67RwlzRzcyZ+rkR5/giq1XspgepFlE8/HVhyNRV13?=
 =?us-ascii?q?qc5pPXDAsdS57xU0A39wRkqLHeeCUy+4TU1Xh0O6murjDCw84pBPciyhu4Y9df?=
 =?us-ascii?q?MaaEFAjuE80aB8miMvAql0KubhIeOOBS9ag0P8y9evuC2a6rOvtgnT28gWRG5o?=
 =?us-ascii?q?B9zlyD9y5mRuHU2JYFxumS3hGbWDfkkFehrsf3lJheajEWAGW+xjbrBY5LaqJp?=
 =?us-ascii?q?YIYEFH2hI8u0xtV5mZ7gQHpY9F+lB1Mb186lYxuSb1rh3QJO0UQbu2ComSy9zz?=
 =?us-ascii?q?ZsiTEmsrKf3DDSw+TlbBcGOnNLSHN+glv2IIm0j8oVXE6nbwUykBul5ED6x7VU?=
 =?us-ascii?q?pahlLmnTR1tIcDbyL214TqSwsb+CadZV6Jw0qSVXTPi8YVeCR77nohsVzznsH3?=
 =?us-ascii?q?FDyzA8bT2qvIv2nwZ7iG6EMHl8tn7ZdtxuyhfF49zcQ+Vc3j4HRCl+lDnWCUKw?=
 =?us-ascii?q?P9iv/dWIiZjDtvqyWH6mVp1WaSPr15+PtDOn5W12Bh2yh/Cymtz9HQk6yyP7zM?=
 =?us-ascii?q?RqVSPToRb4Y4nr0bm6MO19cklpAl/899R1GoVknoQsg5EQ3GAQho+J8nofjWfz?=
 =?us-ascii?q?LdJb1Lr8bHUXXz4LwN3V4A//1E14NH2JxIH5VnSbwsR/Ydm3eWcW2iM778BXB6?=
 =?us-ascii?q?aY9r1EnS1polWmqQLde+RynjAYyfE28n4Vn/kJuBYxziWaGr0THVNXPSv2mxSK?=
 =?us-ascii?q?7tC+qr5aZGKucbi2yUp/ksqtDLCEogFARnn5fo0uEjN37sV6KFjMymH86pn4eN?=
 =?us-ascii?q?nMatIerh6UnA3Bj+RPKJIxi+AFhSxoOW/muX0lyug7jQFh3J2gvYiHLXlt87y9?=
 =?us-ascii?q?AhJCKjL1YMYT8Cn3jalChsaWw5yvHpJ5FzUOXZvoTuinHCgctPv5LAaODCMzqm?=
 =?us-ascii?q?2AFrXBBw+f51xrr3bOE5CtKnGWK2MVzdRkRBmBOkNfhBoYUyk9np48Dgqq3tDu?=
 =?us-ascii?q?cF9l5jAN4V71sgdMyuVtNxXlU2bQvgGoaiovSJiELRpb9QVC50bTMcyD4eN/BS?=
 =?us-ascii?q?BY/pu9rAOTLmyXfRhHDWYMWkacHVDsIqGu5cXc8+ifHuexNOHBYbKKqexDTfuI?=
 =?us-ascii?q?wY+v35Bi/zaNMMWPI3ZjA+c62kpFQXB2BcDZly8TRCwQkiLHd9Sbqwuk+i1rss?=
 =?us-ascii?q?C/9+zmWAD16ouKFbRSKs9j+wysjaeAKu6Qhzt5KTBC2ZMX3nLIzLkf3FgPiyBh?=
 =?us-ascii?q?bTWtELIAtTLTQ6LUgKNYExkbayZrPstS8608xhVNOdLcit7t1r94ieM1C05YVV?=
 =?us-ascii?q?P7nMGlf9cKI2a7NFPIH0uLMLWGJTvWw8D4e6+8SLtQjPlKuB20ozqUD0jjPjGb?=
 =?us-ascii?q?nTnzSx+vKf1MjD2cPBFGuIGybBdtCWvgTNLncBG7M8V3jTo5wbIqnHPKKHUcPC?=
 =?us-ascii?q?N4c0NMqL2Q8CxZju9+G2xH8npqM+2ElzyF4OnfL5YcqeFrDThsl+JG/HQ6zKNY?=
 =?us-ascii?q?4ztZRPNugivdsN5vr0uikumO0TdnVBtOqjBWhIOEp0liOKPZ9oVeVnbA5h4C8W?=
 =?us-ascii?q?KQCxESrdt/FtLvo7xQysTIlK/rNDdC8tfU8dEACMTONM2HMGQuMRzyFT7QDQsF?=
 =?us-ascii?q?SyOrNG7Fi0xclvGS6mOarpwgppfwn5oOT6dRVEYpGfMCFkRlANsCLY93Xzw+l7?=
 =?us-ascii?q?6bic8I5XymoxjQRMVVpJbHVv2JDPXrKTaZi6REZhQSzbP5K4QTKpP020h4ZlZm?=
 =?us-ascii?q?m4TKHhmYYdcYhix/bxJ8jFhB+WU2GkkyxUP4LC+w7HYOPfeum1g9jQ4oMso38z?=
 =?us-ascii?q?K5qVU+I1fR7DIxmU95htzjjnjRWST0ZJu9VoFQDC7zuFl5GZP6RQ80J0Xmn0Vh?=
 =?us-ascii?q?OSyCXrNYif1/fGZkoAbGvN1EHvsKHv4MWwMZ2fzCP6Zg6l9bsCjygBYfveY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BsAACcORpch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGBMFBpcwQLFBMKhzoDkAFKKYE/OWiJc4dxhH0UgRADRRsBGAMQAYcrIjU?=
 =?us-ascii?q?IDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBAQFOA?=
 =?us-ascii?q?y8lAgQOBQWDHQGBaQMUAQECApxNAooTgWwzgnYBAQWFCBiCCgiMP1UlgRyBETO?=
 =?us-ascii?q?CKoR7BBCGBoknGoIAhF+BCZANBwICgxmDdYpGJIIrjy4smS8CBAIEBQINAQEFg?=
 =?us-ascii?q?UcBggxwUIJsCYISDBeDSogtgiZyAYEEAQEhinKBLgGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0BsAACcORpch0O0hNFkHQEBBQEHBQGBUgcBCwGBMFBpcwQ?=
 =?us-ascii?q?LFBMKhzoDkAFKKYE/OWiJc4dxhH0UgRADRRsBGAMQAYcrIjUIDQEDAQEBAQEBA?=
 =?us-ascii?q?gETAQEBCA0JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBAQFOAy8lAgQOBQWDHQG?=
 =?us-ascii?q?BaQMUAQECApxNAooTgWwzgnYBAQWFCBiCCgiMP1UlgRyBETOCKoR7BBCGBoknG?=
 =?us-ascii?q?oIAhF+BCZANBwICgxmDdYpGJIIrjy4smS8CBAIEBQINAQEFgUcBggxwUIJsCYI?=
 =?us-ascii?q?SDBeDSogtgiZyAYEEAQEhinKBLgGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="55790428"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 04:34:11 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729598AbeLSMeI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 07:34:08 -0500
Received: from mail-eopbgr140082.outbound.protection.outlook.com ([40.107.14.82]:12039
        "EHLO EUR01-VE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1729530AbeLSMeI (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 07:34:08 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=QgTnsx5wNy7x/lg0C4+3t07mFKRvzbuZGOAdbQdFojQ=;
 b=pru0tpHqYhmWpaZjufNpoqQJvp/1ZjI+Kpey+avdmBqQ1OS1+TGHbf2AVrUWPkmoGFu2Qv6VO+lsaExYEbd6sMd2qgXMo118j+Jxfep1g1xEKJW2baTEj38a9pkkb9QULy6DzJMmgCtusujdUyGhtp2qvJkIH77qyBcaGnFEbXo=
Received: from AM0PR08MB4483.eurprd08.prod.outlook.com (20.179.35.149) by
 AM0PR08MB3924.eurprd08.prod.outlook.com (20.178.118.142) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1425.19; Wed, 19 Dec 2018 12:34:00 +0000
Received: from AM0PR08MB4483.eurprd08.prod.outlook.com
 ([fe80::1dff:434f:5905:45db]) by AM0PR08MB4483.eurprd08.prod.outlook.com
 ([fe80::1dff:434f:5905:45db%5]) with mapi id 15.20.1446.018; Wed, 19 Dec 2018
 12:34:00 +0000
From: "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
To: Liviu Dudau <Liviu.Dudau@arm.com>
CC: "Jonathan Chai (Arm Technology China)" <Jonathan.Chai@arm.com>,
        Brian Starkey <Brian.Starkey@arm.com>,
        "Julien Yin (Arm Technology China)" <Julien.Yin@arm.com>,
        "thomas Sun (Arm Technology China)" <thomas.Sun@arm.com>,
        Alexandru-Cosmin Gheorghe <Alexandru-Cosmin.Gheorghe@arm.com>,
        "Lowry Li (Arm Technology China)" <Lowry.Li@arm.com>,
        Ayan Halder <Ayan.Halder@arm.com>,
        "Tiannan Zhu (Arm Technology China)" <Tiannan.Zhu@arm.com>,
        "Jin Gao (Arm Technology China)" <Jin.Gao@arm.com>,
        "Yiqi Kang (Arm Technology China)" <Yiqi.Kang@arm.com>,
        nd <nd@arm.com>, "malidp@foss.arm.com" <malidp@foss.arm.com>,
        "maarten.lankhorst@linux.intel.com" 
        <maarten.lankhorst@linux.intel.com>,
        "maxime.ripard@bootlin.com" <maxime.ripard@bootlin.com>,
        "sean@poorly.run" <sean@poorly.run>,
        "corbet@lwn.net" <corbet@lwn.net>,
        "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>,
        "rdunlap@infradead.org" <rdunlap@infradead.org>,
        "mchehab+samsung@kernel.org" <mchehab+samsung@kernel.org>,
        "davem@davemloft.net" <davem@davemloft.net>,
        "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>,
        "akpm@linux-foundation.org" <akpm@linux-foundation.org>,
        "nicolas.ferre@microchip.com" <nicolas.ferre@microchip.com>,
        "arnd@arndb.de" <arnd@arndb.de>,
        "robh+dt@kernel.org" <robh+dt@kernel.org>,
        Mark Rutland <Mark.Rutland@arm.com>,
        "devicetree@vger.kernel.org" <devicetree@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "dri-devel@lists.freedesktop.org" <dri-devel@lists.freedesktop.org>,
        "airlied@linux.ie" <airlied@linux.ie>,
        "yamada.masahiro@socionext.com" <yamada.masahiro@socionext.com>,
        "james qian wang (Arm Technology China)" <james.qian.wang@arm.com>
Subject: [PATCH v2 5/9] drm/komeda: Add komeda_format_caps for format handling
Thread-Topic: [PATCH v2 5/9] drm/komeda: Add komeda_format_caps for format
 handling
Thread-Index: AQHUl5cd0lvRAn06vk2dc4z9aMFStA==
Date: Wed, 19 Dec 2018 12:33:59 +0000
Message-ID: <20181219123147.16090-6-james.qian.wang@arm.com>
References: <20181219123147.16090-1-james.qian.wang@arm.com>
In-Reply-To: <20181219123147.16090-1-james.qian.wang@arm.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [113.29.88.7]
x-clientproxiedby: SYBPR01CA0132.ausprd01.prod.outlook.com
 (2603:10c6:10:5::24) To AM0PR08MB4483.eurprd08.prod.outlook.com
 (2603:10a6:208:145::21)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=james.qian.wang@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR08MB3924;6:y8Bik0S1VdCRmUT6YpcMNlT8VuBsGyesicKFxpXC9jjmrRWdwTCuwdu82id5fQMaMCgEwOgymbRIRbTJRJJzTy/t27zTPXKoOl7ZhNR2W/EfThe2/TMljipuf4R2uMGRjwxtGxGk9F5EwNMSuxexIieiTVfL/SQOco4Y9p7Kolfer4gbGnjsKdT7+kqF8rXnIDC+v848Bcm5/+n4WfEIyV0JD0dtRfkIE1j/69mxqs/O67TO25s6BLQuG/qKTUruUXO0Iz8fRqf3YdtVYEsIl8c9BeLVdJ4dRxS/o8vnn8rgZDEbIoUnQiQp4mmsnJiB8EVY1J4wsWPOQzD8jEYFKGbcAXyq5xvI68diyxsVuKomANfJcZzahn4FrXQpom9GilB6HfOUXD50iK48H8brRaAvvPmG828l6N7lNBBA6i7kZgFGscen07lnfSupPjwO/q1tTOxeHhOGD3fIzI3Irg==;5:y9I1bRFUXW+avhV9AYUUeZoD+7qXbualxNUQRqOi0c3TJio5Mc9Mh8GzO8wNPDw1RayyBFUx3T0z4db65D0E9O0hUOhI5BAvSv3SjD5FutzfOsl3HZpoR4uIDxGA3/3cBKIp29ZKKBUAGACzQfiDq1WKxkVzwx7I9L5r8VBenc4=;7:EaxPgT1aNZkZem08ytHCg5zP68cBB5Df5UCFIYLoVPMABvnTj8QAoFGgGYoN+0U7GJsvtUMQPMTyycMjCNTFMcdJs2rW8CCwdx6Fot2agISw4rAEcLQ9nG8GYhmKtzKUvZ9bicOEhYtheO2Q03fZIw==
x-ms-office365-filtering-correlation-id: 6d7c391b-b3ee-4d9e-136c-08d665ae4041
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(7168020)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:AM0PR08MB3924;
x-ms-traffictypediagnostic: AM0PR08MB3924:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM0PR08MB3924E140D281508F5A83975FB3BE0@AM0PR08MB3924.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(3230021)(999002)(6040522)(2401047)(8121501046)(5005006)(3002001)(10201501046)(93006095)(93001095)(3231475)(944501520)(52105112)(6055026)(148016)(149066)(150057)(6041310)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123558120)(20161123564045)(20161123562045)(201708071742011)(7699051)(76991095);SRVR:AM0PR08MB3924;BCL:0;PCL:0;RULEID:;SRVR:AM0PR08MB3924;
x-forefront-prvs: 0891BC3F3D
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(136003)(396003)(346002)(39860400002)(366004)(376002)(199004)(189003)(316002)(8936002)(103116003)(37006003)(1076003)(71190400001)(81166006)(81156014)(11346002)(446003)(97736004)(36756003)(54906003)(4744004)(256004)(2616005)(486006)(6636002)(99286004)(71200400001)(476003)(575784001)(86362001)(14444005)(8676002)(106356001)(105586002)(5660300001)(3846002)(7416002)(6116002)(14454004)(68736007)(6512007)(2906002)(4326008)(25786009)(6486002)(76176011)(52116002)(53936002)(186003)(55236004)(102836004)(26005)(6862004)(6436002)(305945005)(478600001)(6506007)(66066001)(386003)(7736002)(21314003);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR08MB3924;H:AM0PR08MB4483.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: LpbATgaMZjqhVaEQmXjbOlRq4MhK7B4b7ETZ/5U/A2XUB6BioZsslB2NO6scGIIkUPTtO0pmxyhVcHOPCCNkQNdzWg3COzQmazCExUTidomuhQTNdNVTGl1JMwrcdH6za3V/xRDdIV6+0qlcByXKZSSpa7G3vrFAA8WKpHvJFo3UqtY3reIpuzUvO3Xr/XPkE6to93PCyqbe/uxgTlNEwcefXaR/DKa4EBKnGPod0OSi9/SEEwCN8iiIZmjh8voVDt9Az9W1MSqSViMnSCFnqJmzZKUOAht60eDRMZcqnmCqkJnBvChSv9z8zFJkaRKb
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 6d7c391b-b3ee-4d9e-136c-08d665ae4041
X-MS-Exchange-CrossTenant-originalarrivaltime: 19 Dec 2018 12:33:59.9777
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR08MB3924
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

komeda_format_caps is for describing ARM display specific features and
limitations of a specific format, and format_caps will be linked into
&komeda_framebuffer like a extension of &drm_format_info.
And komed_format_caps_table will be initialized before the enum_resources,
since the layer features description depend on this format_caps table, so
we'd better initialize the table first.

Signed-off-by: James (Qian) Wang <james.qian.wang@arm.com>
---
 drivers/gpu/drm/arm/display/komeda/Makefile   |  1 +
 .../gpu/drm/arm/display/komeda/d71/d71_dev.c  | 78 ++++++++++++++++
 .../gpu/drm/arm/display/komeda/komeda_dev.c   |  2 +
 .../gpu/drm/arm/display/komeda/komeda_dev.h   | 11 ++-
 .../arm/display/komeda/komeda_format_caps.c   | 75 ++++++++++++++++
 .../arm/display/komeda/komeda_format_caps.h   | 89 +++++++++++++++++++
 .../drm/arm/display/komeda/komeda_pipeline.h  |  1 +
 7 files changed, 256 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c
 create mode 100644 drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h

diff --git a/drivers/gpu/drm/arm/display/komeda/Makefile b/drivers/gpu/drm/=
arm/display/komeda/Makefile
index 4efcce0cdce8..c86602131dbc 100644
--- a/drivers/gpu/drm/arm/display/komeda/Makefile
+++ b/drivers/gpu/drm/arm/display/komeda/Makefile
@@ -7,6 +7,7 @@ ccflags-y :=3D \
 komeda-y :=3D \
 	komeda_drv.o \
 	komeda_dev.o \
+	komeda_format_caps.o \
 	komeda_pipeline.o
=20
 komeda-y +=3D \
diff --git a/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c b/drivers/gpu=
/drm/arm/display/komeda/d71/d71_dev.c
index af3dabb499cd..2d22be54ef48 100644
--- a/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
+++ b/drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c
@@ -13,7 +13,85 @@ static int d71_enum_resources(struct komeda_dev *mdev)
 	return -1;
 }
=20
+#define __HW_ID(__group, __format) \
+	(((__group & 0x7) << 3) | (__format & 0x7))
+
+#define RICH		KOMEDA_FMT_RICH_LAYER
+#define SIMPLE		KOMEDA_FMT_SIMPLE_LAYER
+#define RICH_SIMPLE	KOMEDA_FMT_RICH_LAYER | KOMEDA_FMT_SIMPLE_LAYER
+#define RICH_WB		KOMEDA_FMT_RICH_LAYER | KOMEDA_FMT_WB_LAYER
+#define RICH_SIMPLE_WB	RICH_SIMPLE | KOMEDA_FMT_WB_LAYER
+
+#define Rot_0		DRM_MODE_ROTATE_0
+#define Flip_H_V	DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y | Rot_0
+#define Rot_ALL_H_V	DRM_MODE_ROTATE_MASK | Flip_H_V
+
+#define LYT_NM		BIT(AFBC_FORMAT_MOD_BLOCK_SIZE_16x16)
+#define LYT_WB		BIT(AFBC_FORMAT_MOD_BLOCK_SIZE_32x8)
+#define LYT_NM_WB	LYT_NM | LYT_WB
+
+#define AFB_TH		AFBC(_TILED | _SPARSE)
+#define AFB_TH_SC_YTR	AFBC(_TILED | _SC | _SPARSE | _YTR)
+#define AFB_TH_SC_YTR_BS AFBC(_TILED | _SC | _SPARSE | _YTR | _SPLIT)
+
+static struct komeda_format_caps d71_format_caps_table[] =3D {
+	/*   HW_ID    |        fourcc        | tile_sz |   layer_types |   rots  =
  | afbc_layouts | afbc_features */
+	/* ABGR_2101010*/
+	{__HW_ID(0, 0),	DRM_FORMAT_ARGB2101010,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	{__HW_ID(0, 1),	DRM_FORMAT_ABGR2101010,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	{__HW_ID(0, 1),	DRM_FORMAT_ABGR2101010,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_=
NM_WB, AFB_TH_SC_YTR_BS}, /* afbc */
+	{__HW_ID(0, 2),	DRM_FORMAT_RGBA1010102,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	{__HW_ID(0, 3),	DRM_FORMAT_BGRA1010102,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, =
0},
+	/* ABGR_8888*/
+	{__HW_ID(1, 0),	DRM_FORMAT_ARGB8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(1, 1),	DRM_FORMAT_ABGR8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(1, 1),	DRM_FORMAT_ABGR8888,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_=
WB, AFB_TH_SC_YTR_BS}, /* afbc */
+	{__HW_ID(1, 2),	DRM_FORMAT_RGBA8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(1, 3),	DRM_FORMAT_BGRA8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	/* XBGB_8888 */
+	{__HW_ID(2, 0),	DRM_FORMAT_XRGB8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(2, 1),	DRM_FORMAT_XBGR8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(2, 2),	DRM_FORMAT_RGBX8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	{__HW_ID(2, 3),	DRM_FORMAT_BGRX8888,	1,	RICH_SIMPLE_WB,	Flip_H_V,		0, 0},
+	/* BGR_888 */ /* none-afbc RGB888 doesn't support rotation and flip */
+	{__HW_ID(3, 0),	DRM_FORMAT_RGB888,	1,	RICH_SIMPLE_WB,	Rot_0,			0, 0},
+	{__HW_ID(3, 1),	DRM_FORMAT_BGR888,	1,	RICH_SIMPLE_WB,	Rot_0,			0, 0},
+	{__HW_ID(3, 1),	DRM_FORMAT_BGR888,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_WB=
, AFB_TH_SC_YTR_BS}, /* afbc */
+	/* BGR 16bpp */
+	{__HW_ID(4, 0),	DRM_FORMAT_RGBA5551,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 1),	DRM_FORMAT_ABGR1555,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 1),	DRM_FORMAT_ABGR1555,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_=
WB, AFB_TH_SC_YTR}, /* afbc */
+	{__HW_ID(4, 2),	DRM_FORMAT_RGB565,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 3),	DRM_FORMAT_BGR565,	1,	RICH_SIMPLE,	Flip_H_V,		0, 0},
+	{__HW_ID(4, 3),	DRM_FORMAT_BGR565,	1,	RICH_SIMPLE,	Rot_ALL_H_V,	LYT_NM_WB=
, AFB_TH_SC_YTR}, /* afbc */
+	{__HW_ID(4, 4), DRM_FORMAT_R8,		1,	SIMPLE,		Rot_0,			0, 0},
+	/* YUV 444/422/420 8bit  */
+	{__HW_ID(5, 0),	0 /*XYUV8888*/,		1,	0,		0,			0, 0},
+	/* XYUV unsupported*/
+	{__HW_ID(5, 1),	DRM_FORMAT_YUYV,	1,	RICH,		Rot_ALL_H_V,	LYT_NM, AFB_TH}, =
/* afbc */
+	{__HW_ID(5, 2),	DRM_FORMAT_YUYV,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(5, 3),	DRM_FORMAT_UYVY,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(5, 4),	0, /*X0L0 */		2,		0,			0, 0}, /* Y0L0 unsupported */
+	{__HW_ID(5, 6),	DRM_FORMAT_NV12,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(5, 6),	0/*DRM_FORMAT_YUV420_8BIT*/,	1,	RICH,	Rot_ALL_H_V,	LYT_NM=
, AFB_TH}, /* afbc */
+	{__HW_ID(5, 7),	DRM_FORMAT_YUV420,	1,	RICH,		Flip_H_V,		0, 0},
+	/* YUV 10bit*/
+	{__HW_ID(6, 0),	0,/*XVYU2101010*/	1,	0,		0,			0, 0},/* VYV30 unsupported =
*/
+	{__HW_ID(6, 6),	0/*DRM_FORMAT_X0L2*/,	2,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(6, 7),	0/*DRM_FORMAT_P010*/,	1,	RICH,		Flip_H_V,		0, 0},
+	{__HW_ID(6, 7),	0/*DRM_FORMAT_YUV420_10BIT*/,1,	RICH,	Rot_ALL_H_V,	LYT_NM=
, AFB_TH},
+};
+
+static void d71_init_fmt_tbl(struct komeda_dev *mdev)
+{
+	struct komeda_format_caps_table *table =3D &mdev->fmt_tbl;
+
+	table->format_caps =3D d71_format_caps_table;
+	table->n_formats =3D ARRAY_SIZE(d71_format_caps_table);
+}
+
 static struct komeda_dev_funcs d71_chip_funcs =3D {
+	.init_format_table =3D d71_init_fmt_tbl,
 	.enum_resources	=3D d71_enum_resources,
 	.cleanup	=3D NULL,
 };
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_dev.c b/drivers/gpu/=
drm/arm/display/komeda/komeda_dev.c
index 214ef75e0e24..fd52d85b0d12 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_dev.c
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_dev.c
@@ -136,6 +136,8 @@ struct komeda_dev *komeda_dev_create(struct device *dev=
)
 		 MALIDP_CORE_ID_MAJOR(mdev->chip.core_id),
 		 MALIDP_CORE_ID_MINOR(mdev->chip.core_id));
=20
+	mdev->funcs->init_format_table(mdev);
+
 	err =3D mdev->funcs->enum_resources(mdev);
 	if (err) {
 		DRM_ERROR("enumerate display resource failed.\n");
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h b/drivers/gpu/=
drm/arm/display/komeda/komeda_dev.h
index 4a27a44e2ec6..555510be66f1 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_dev.h
@@ -11,6 +11,7 @@
 #include <linux/interrupt.h>
 #include "komeda_pipeline.h"
 #include "malidp_product.h"
+#include "komeda_format_caps.h"
=20
 /* malidp device id */
 enum {
@@ -44,6 +45,13 @@ struct komeda_dev;
  * Supplied by chip level and returned by the chip entry function xxx_iden=
tify,
  */
 struct komeda_dev_funcs {
+	/**
+	 * @init_format_table:
+	 *
+	 * initialize &komeda_dev->format_table, this function should be called
+	 * before the &enum_resource
+	 */
+	void (*init_format_table)(struct komeda_dev *mdev);
 	/**
 	 * @enum_resources:
 	 *
@@ -66,7 +74,8 @@ struct komeda_dev {
 	u32 __iomem   *reg_base;
=20
 	struct komeda_chip_info chip;
-
+	/** @fmt_tbl: initialized by &komeda_dev_funcs->init_format_table */
+	struct komeda_format_caps_table fmt_tbl;
 	/** @pclk: APB clock for register access */
 	struct clk *pclk;
 	/** @mck: HW main engine clk */
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c b/driv=
ers/gpu/drm/arm/display/komeda/komeda_format_caps.c
new file mode 100644
index 000000000000..38aeb7d30048
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c
@@ -0,0 +1,75 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+
+#include <linux/slab.h>
+#include "komeda_format_caps.h"
+#include "malidp_utils.h"
+
+const struct komeda_format_caps *
+komeda_get_format_caps(struct komeda_format_caps_table *table,
+		       u32 fourcc, u64 modifier)
+{
+	const struct komeda_format_caps *caps;
+	u64 afbc_features =3D modifier & ~(AFBC_FORMAT_MOD_BLOCK_SIZE_MASK);
+	u32 afbc_layout =3D modifier & AFBC_FORMAT_MOD_BLOCK_SIZE_MASK;
+	int id;
+
+	for(id =3D 0; id < table->n_formats; id++) {
+		caps =3D &table->format_caps[id];
+
+		if(fourcc !=3D caps->fourcc)
+			continue;
+
+		if ((modifier =3D=3D 0ULL) && (caps->supported_afbc_layouts =3D=3D 0))
+			return caps;
+
+		if ((has_bits(afbc_features, caps->supported_afbc_features)) &&
+		    (has_bit(afbc_layout, caps->supported_afbc_layouts)))
+			return caps;
+	}
+
+	return NULL;
+}
+
+u32 *komeda_get_layer_fourcc_list(struct komeda_format_caps_table *table,
+				  u32 layer_type, u32 *n_fmts)
+{
+	const struct komeda_format_caps *cap;
+	u32 *fmts;
+	int i, j, n =3D 0;
+
+	fmts =3D kzalloc(sizeof(u32) * table->n_formats, GFP_KERNEL);
+	if (fmts =3D=3D NULL)
+		return NULL;
+
+	for (i =3D 0; i < table->n_formats; i++) {
+		cap =3D &table->format_caps[i];
+		if (!(layer_type & cap->supported_layer_types) ||
+		     (cap->fourcc =3D=3D 0))
+			continue;
+
+		/* one fourcc may has two caps items in table (afbc/none-afbc),
+		 * so check the existing list to avoid adding a duplicated one.
+		 */
+		for (j =3D n - 1; j >=3D 0; j--)
+			if (fmts[j] =3D=3D cap->fourcc)
+				break;
+
+		if (j < 0)
+			fmts[n++] =3D cap->fourcc;
+	}
+
+	if (n_fmts !=3D NULL)
+		*n_fmts =3D n;
+
+	return fmts;
+}
+
+void komeda_put_fourcc_list(u32 *fourcc_list)
+{
+	kfree(fourcc_list);
+}
\ No newline at end of file
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h b/driv=
ers/gpu/drm/arm/display/komeda/komeda_format_caps.h
new file mode 100644
index 000000000000..fe7ebaf60687
--- /dev/null
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h
@@ -0,0 +1,89 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
+ * Author: James.Qian.Wang <james.qian.wang@arm.com>
+ *
+ */
+
+#ifndef _KOMEDA_FORMAT_CAPS_H_
+#define _KOMEDA_FORMAT_CAPS_H_
+
+#include <linux/types.h>
+#include <uapi/drm/drm_fourcc.h>
+#include <drm/drm_fourcc.h>
+
+#define AFBC(x)		DRM_FORMAT_MOD_ARM_AFBC(x)
+
+/* afbc layerout */
+#define AFBC_16x16(x)	AFBC(AFBC_FORMAT_MOD_BLOCK_SIZE_16x16 | (x))
+#define AFBC_32x8(x)	AFBC(AFBC_FORMAT_MOD_BLOCK_SIZE_32x8 | (x))
+
+/* afbc features */
+#define _YTR		AFBC_FORMAT_MOD_YTR
+#define _SPLIT		AFBC_FORMAT_MOD_SPLIT
+#define _SPARSE		AFBC_FORMAT_MOD_SPARSE
+#define _CBR		AFBC_FORMAT_MOD_CBR
+#define _TILED		AFBC_FORMAT_MOD_TILED
+#define _SC		AFBC_FORMAT_MOD_SC
+
+/* layer_type */
+#define KOMEDA_FMT_RICH_LAYER		BIT(0)
+#define KOMEDA_FMT_SIMPLE_LAYER		BIT(1)
+#define KOMEDA_FMT_WB_LAYER		BIT(2)
+
+#define AFBC_TH_LAYOUT_ALIGNMENT	8
+#define AFBC_HEADER_SIZE 		16
+#define AFBC_SUPERBLK_ALIGNMENT		128
+#define AFBC_SUPERBLK_PIXELS		256
+#define AFBC_BODY_START_ALIGNMENT	1024
+#define AFBC_TH_BODY_START_ALIGNMENT	4096
+
+/**
+ * struct komeda_format_caps
+ *
+ * komeda_format_caps is for describing ARM display specific features and
+ * limitations for a specific format, and format_caps will be linked into
+ * &komeda_framebuffer like a extension of &drm_format_info.
+ *
+ * NOTE: one fourcc may has two different format_caps items for fourcc and
+ * fourcc+modifier
+ *
+ * @hw_id: hw format id, hw specific value.
+ * @fourcc: drm fourcc format.
+ * @tile_size: format tiled size, used by ARM format X0L0/X0L2
+ * @supported_layer_types: indicate which layer supports this format
+ * @supported_rots: allowed rotations for this format
+ * @supported_afbc_layouts: supported afbc layerout
+ * @supported_afbc_features: supported afbc features
+ */
+struct komeda_format_caps {
+	u32 hw_id;
+	u32 fourcc;
+	u32 tile_size;
+	u32 supported_layer_types;
+	u32 supported_rots;
+	u32 supported_afbc_layouts;
+	u64 supported_afbc_features;
+};
+
+/**
+ * struct komeda_format_caps_table - format_caps mananger
+ *
+ * @n_formats: the size of format_caps list.
+ * @format_caps: format_caps list.
+ */
+struct komeda_format_caps_table {
+	u32 n_formats;
+	const struct komeda_format_caps *format_caps;
+};
+
+const struct komeda_format_caps *
+komeda_get_format_caps(struct komeda_format_caps_table *table,
+		       u32 fourcc, u64 modifier);
+
+u32 *komeda_get_layer_fourcc_list(struct komeda_format_caps_table *table,
+				  u32 layer_type, u32 *n_fmts);
+
+void komeda_put_fourcc_list(u32 *fourcc_list);
+
+#endif
diff --git a/drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h b/drivers=
/gpu/drm/arm/display/komeda/komeda_pipeline.h
index e097d4fcb2c5..ead897720e1a 100644
--- a/drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h
+++ b/drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h
@@ -210,6 +210,7 @@ static inline u16 component_changed_inputs(struct komed=
a_component_state *st)
 struct komeda_layer {
 	struct komeda_component base;
 	/* layer specific features and caps */
+	int layer_type; /* RICH, SIMPLE or WB */
 };
=20
 struct komeda_layer_state {
--=20
2.17.1

