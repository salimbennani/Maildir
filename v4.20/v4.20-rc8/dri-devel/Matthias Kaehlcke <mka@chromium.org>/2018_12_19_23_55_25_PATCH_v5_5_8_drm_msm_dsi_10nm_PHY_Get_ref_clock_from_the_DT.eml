Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  20 Dec 2018 08:44:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 02E2A580522;
	Wed, 19 Dec 2018 15:55:57 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 19 Dec 2018 15:55:57 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AAPNPkBcaze316HJPJkcQ+ObklGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc68ZBGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQAogC+BRGuCe701jNFhWX70bEg3ug9DQ3L2hErEdIUsH?=
 =?us-ascii?q?TTqdX4LKAcXvqpzKnUzTXDbulZ2Szg44bNaB8uv/GMXbZsfsrS10YkCgTIjlCT?=
 =?us-ascii?q?qYP/JD6ayuQNs3Kc7+plVOKvlmsnpxt2oji1ycchk4/EjZ8WxFDc7Sh13po5KN?=
 =?us-ascii?q?miREJmb9OoDoFcuzyZOodqWM8vQmNltD4kxrAHp5K3YC0HxIknyhHDbvGLbZSE?=
 =?us-ascii?q?7gzmWeqMJDp1hnJod6i6ihu8/0ity/PzW8yq3FpXsyVIl93Bu34P2hHc7MWMV+?=
 =?us-ascii?q?Fz8V272TmV0gDe8uFELl4wlarcM5Mh3LEwmYQJsUjZHS/5hl/2jKmIeUUg4OSo?=
 =?us-ascii?q?7P7nYrr+qp+dMY97lB3+P7wwlsCjBek0KBUCUmaF9eimybHu/lH1TK9Lg/A0iq?=
 =?us-ascii?q?XZtYrVJcUfpq63GQ9V1YMj5g67Dzen1tQYgHYGIEtGeB2ZlYjpPU/BIPThAfe4?=
 =?us-ascii?q?jVWslilkx+rdM73/DZXCMGLDnK3ifblj8U5czhQ8zdRF65JTELEBL+r/WlXtu9?=
 =?us-ascii?q?zAEh85Lwu0zv7jCNV81YMRR3iDA6CEMK7JtV+I5+QvI/SDZYMPuTb9LeQl6ODq?=
 =?us-ascii?q?jXMjhVAdeqyp14MNaH+kBvRmP1mZYX30j9cBC2gKvxY+Q/btiFGYUT5Temy9X6?=
 =?us-ascii?q?Qz5jwgDIKmDIHDRp2igbCb3Se7GIFWaX5CClyWDXjocICEUe8WaC2OOs9hjiAE?=
 =?us-ascii?q?Vb+5RoA7zhGutAj6y7l9IurO4CIYt4nu1Nx05+3ViBEz+iZ4D8Wb02GRUW50mn?=
 =?us-ascii?q?kESCMx3KB6uUZ90EuM0bBkg/xEEtxe//BJXR08NZLGy+x6Csr9WgTOftqSTFam?=
 =?us-ascii?q?Q9OmASw+T94rwt8OZVp9FMumjhzZwyWqBLoVnaSRBJMo6qLcw2TxJ8Flxnnbzq?=
 =?us-ascii?q?YhkUcpTtFPNWK8gK5/7BbcB4jOn0WdlKaqcKAc0TXJ9GeCy2qOoU5ZXBRxUaXD?=
 =?us-ascii?q?QXAQeE/Woc7l6UPFSr+kEa4nPRdZyc6eNqtKbcXkgkhcS/f9JtvSeWKxlH22BR?=
 =?us-ascii?q?aT2LyMapHne2Ec3CXbFUgFnBof/XeANQgiGCihp3jSAyBpFVLqe0ns6/VxqGun?=
 =?us-ascii?q?Tk8oyAGHd1Fh17uw+h4SmfycS/MS0qgYuCs7rDV0BlK939PQC9qPvAdheKRcYd?=
 =?us-ascii?q?Ug4FZIz27Ztgp9PoC+IKBmnFIRbwN3v0b23RVtFopAidQqrG8tzAdqM62Y1E1O?=
 =?us-ascii?q?djyG0pHwILHYMXTy8w21ZK7Q2VHe18iW97wL6PQ5rVXjoQ6oGlAj83Vhz9lazX?=
 =?us-ascii?q?+c6o/WAwoVVJL7Slw3+ARip7HGfik94JvZ1H1xMaWurjDOwdMoBOs/xRamcNdS?=
 =?us-ascii?q?K6eEFA70E80HCMmiMu0qm161bh0aOOBe7rI7P8Sjd/Gewq6kIP5gnC66jWRA+I?=
 =?us-ascii?q?19yEOM+DZmRe7SwpkFxOuU3g2ZWDfmjVetq9z4lppAZT4PAGW/0y/kBIhKa612?=
 =?us-ascii?q?fIYLD3quIsKtytV/gZ7tR2BX9Fq5C1wa38+pfAKYb0bh0g1IyUQXvXunlDO4zj?=
 =?us-ascii?q?x1iT0orrCT3DfTw+TkbxcHPm9LRG9/jVbjO4S0jtYaXFS2YAgtjheq+UH6x61D?=
 =?us-ascii?q?rqRlM2bTWVtIfzTxL2x6UKu/rKCCY81M6JMvqylXS/6zYVOZSr78pRsVzSXjEn?=
 =?us-ascii?q?BaxDA6cTGqp5r4kwZ7iGKbMHZ8sn7ZddtsyhfY4dzWXeRR0SYeRClklTnXAUCx?=
 =?us-ascii?q?Ptmz8tWTjZvDsOG+V2S6W51XcCnry56AtSSh6W1rBx2/g+68mtn9HQcm1i/70s?=
 =?us-ascii?q?FgVT/Uoxbkfonry6O6PPpkfkZyBV/w8cp6GpxknYs2i5EdwnwahpST/Xoanmb/?=
 =?us-ascii?q?K9Rb2aTibHUTQT4H2cLa4A/g2Ed7NHKG25r5VmmBwstmf9S6Z2IW2iEn4MxQBq?=
 =?us-ascii?q?ab8qdEnTdrrVqitg3ef+J9njgGxPsq6X4ahfwJuQU3wiWcBLASAVdXPSj2mxuU?=
 =?us-ascii?q?6NC+qb1dZHyzfrioyEp+gdehAameogFbXXb1YJYjEjV27sViK1LMy3zz55rgeN?=
 =?us-ascii?q?nRa9ITqxKVnw3Bj+hTNJI+iP4KiTB7NmL6uH0v0/Q7ggB23ZGmoIiHLH1g87mj?=
 =?us-ascii?q?DR5fMj31etkf+jXwjatFmsaW3oavHohuGzkRXZvoS+6oHywWtfj9KwmOFzg8oG?=
 =?us-ascii?q?+BGbXDBQ+f9Ftmr3XXHpCpLX6XIWcWzc54SBmBPkBfgx0UXDYnnp4/DA+q39fs?=
 =?us-ascii?q?cEN45jAX+175pQFAyuNuNxnjTGjfoB2kZSszSJiaNBBW9B1N51/JMcyC6eJ+By?=
 =?us-ascii?q?FZ/pq8rAyUN2yUfQJIAXsSWkyDAVDjMaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TZlCsOSywUlCLNbtSXpBSm+i1woc?=
 =?us-ascii?q?Cw7u7rWB/05YaUD7tSMNNv+w25gKuZNu6Qgjp5Jihc1p8W2XDIz70f1kYIiy5y?=
 =?us-ascii?q?bzmtDagAtSnVQa3Kh69YFAQbZD1zNcdS66I83xJAOcraitPzy755geQ5C1ZDVV?=
 =?us-ascii?q?z9hM6pYdYGLH26NFPCHEyLLqiJJSXXw8HrZqOxUaFQjORRtxGqpTmXCVPsPjSd?=
 =?us-ascii?q?mDnvTB2vNeBMjCeGPB1Roo29cxBtCXT9Q9LicBG0LNh3jTguy70umnzKLXIcMS?=
 =?us-ascii?q?R7c05Vrryf9yVYgvB+G2xH9nVkLOmElDyf7+nXMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1T12tWInwBgWlJlrj9Rh8rfp0JoNa7d/4NDcXnB9RMJq2?=
 =?us-ascii?q?6XDkJO7/dsFNzj84lR0NzOmeqnITZY99PZ8eMYBs7JOISGPSxleSDuEnb0AREf?=
 =?us-ascii?q?TDikfTXFgEZd0/2O3n6YtJ43rt7rgpVYDvd+XUY2XskHFkBsGtBKdJJ+RDBii6?=
 =?us-ascii?q?OHiMcO6VK3thyXT8Jf6NSPf/SeEL3AMjGClvEQbh0E0PX3N4MILaX/2kprcF48?=
 =?us-ascii?q?m57FTQ6YcdlToyEpRBUzv0MFpHR3UGw/nUj/bRyryHsSE/eumVgxkAQoMso38z?=
 =?us-ascii?q?K5xl4rOlrLrTB4s0A8mdHugj3ZJDvyJY+7XZtRDivpsg42KJytEFU9VhG7gUEx?=
 =?us-ascii?q?bGSMfLlWlbY1MDkz0AI=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BTAAAu2Rpch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwEBgS+COyeaM4kPjjqBcxMBARgTAYctIjUIDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkvQhYBgV0kAYJiAwMBAiQLAUYGCQEBUAMxAQUBHAYBEgWDHYF1DQEEnC08j?=
 =?us-ascii?q?BUzii8Sh2yEQReBQD+DdYsOAok/ggCEGX5RkA0JkVYkiXeHYolIkBMCBAIEBQI?=
 =?us-ascii?q?FDyGBJgGCDE0wCIMngicXjj4fMoEFAQGHd4VpAQE?=
X-IPAS-Result: =?us-ascii?q?A0BTAAAu2Rpch0O0hNFkHQEBBQEHBQGBUgcBCwEBgS+COye?=
 =?us-ascii?q?aM4kPjjqBcxMBARgTAYctIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvQhYBgV0kA?=
 =?us-ascii?q?YJiAwMBAiQLAUYGCQEBUAMxAQUBHAYBEgWDHYF1DQEEnC08jBUzii8Sh2yEQRe?=
 =?us-ascii?q?BQD+DdYsOAok/ggCEGX5RkA0JkVYkiXeHYolIkBMCBAIEBQIFDyGBJgGCDE0wC?=
 =?us-ascii?q?IMngicXjj4fMoEFAQGHd4VpAQE?=
X-IronPort-AV: E=Sophos;i="5.56,374,1539673200"; 
   d="scan'208";a="55892065"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 15:55:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730239AbeLSXzz (ORCPT <rfc822;like.xu@linux.intel.com>
        + 22 others); Wed, 19 Dec 2018 18:55:55 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:46267 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730198AbeLSXzw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 18:55:52 -0500
Received: by mail-pf1-f194.google.com with SMTP id c73so10571141pfe.13
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 15:55:51 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=p5K4NvmVx0V9ywsxNEseAiIwc2ZzmksvTJE0cDO3q/A=;
        b=T+bVWI7TKYseNjSkG6SSy84RMUYyM1fik2xIGdgNutvb2f60gQeGsQpJ7GBRflRt6N
         6jHkL3LP2gBxncCNFXFU1HVWh+DkT1geMKWVW9Hmu2u2vMUWJYrOwyopMk+TXxoyY48K
         7f8mqCEkUYgJlpmPovp20XHOmUgN+bWLvhMPirJPDlyMLoBsV3V7SsyFoWYYMHODj3bf
         vJQpg7ZbPaQ66MbmfJ0qYOlBLDtc/ntlBOH9ebknw1ru33HRDqTi0Hc6D9NDy2X6FJTf
         HFvkP6uNsQhMaQb4mlLMb/EjGvqmzv8tw6eYt0OIlGSwcokFl7Jpwv4I9XtO2lnnQ6Md
         4/Jg==
X-Gm-Message-State: AA+aEWYzR74WYjDi80HL90pOoi9V+qP6dvvgSIlsMoTERP1O/seT8P4A
        iLovazpLuaKGEhv9fx7OgQWPlA==
X-Google-Smtp-Source: AFSGD/X4erWd9DM/LxqLQgTOwPVBkpbQ7T4WHluHtTLkhiCJcFzQ3Unc16V7hMhR3nlJ9egv8NyFnQ==
X-Received: by 2002:a63:b105:: with SMTP id r5mr21293316pgf.442.1545263750805;
        Wed, 19 Dec 2018 15:55:50 -0800 (PST)
Received: from mka.mtv.corp.google.com ([2620:15c:202:1:75a:3f6e:21d:9374])
        by smtp.gmail.com with ESMTPSA id t67sm37045048pfd.90.2018.12.19.15.55.48
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 15:55:49 -0800 (PST)
From: Matthias Kaehlcke <mka@chromium.org>
To: Rob Clark <robdclark@gmail.com>, David Airlie <airlied@linux.ie>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        Andy Gross <andy.gross@linaro.org>,
        David Brown <david.brown@linaro.org>
Cc: linux-arm-msm@vger.kernel.org, dri-devel@lists.freedesktop.org,
        freedreno@lists.freedesktop.org, devicetree@vger.kernel.org,
        linux-kernel@vger.kernel.org,
        Archit Taneja <architt@codeaurora.org>,
        Sean Paul <seanpaul@chromium.org>,
        Rajesh Yadav <ryadav@codeaurora.org>,
        Douglas Anderson <dianders@chromium.org>,
        Stephen Boyd <swboyd@chromium.org>,
        Jeykumar Sankaran <jsanka@codeaurora.org>,
        Matthias Kaehlcke <mka@chromium.org>
Subject: [PATCH v5 5/8] drm/msm/dsi: 10nm PHY: Get ref clock from the DT
Date: Wed, 19 Dec 2018 15:55:25 -0800
Message-Id: <20181219235528.114830-6-mka@chromium.org>
X-Mailer: git-send-email 2.20.1.415.g653613c723-goog
In-Reply-To: <20181219235528.114830-1-mka@chromium.org>
References: <20181219235528.114830-1-mka@chromium.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Get the ref clock of the PHY from the device tree instead of
hardcoding its name and rate.

Note: This change could break old out-of-tree DTS files that
use the 10nm PHY

Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
Reviewed-by: Douglas Anderson <dianders@chromium.org>
---
Changes in v5:
- pass the ref clock name to _register() instead of storing a point
  to the clk object in the PLL data structure

Changes in v4:
- none

Changes in v3:
- fixed check for EPROBE_DEFER
- added note to commit message about breaking old DTS files
- added 'Reviewed-by: Douglas Anderson <dianders@chromium.org>' tag

Changes in v2:
- remove anonymous array in clk_init_data assignment
- log error code if devm_clk_get() fails
- don't log devm_clk_get() failures for -EPROBE_DEFER
- updated commit message
---
 drivers/gpu/drm/msm/dsi/pll/dsi_pll_10nm.c | 20 +++++++++++++++++---
 1 file changed, 17 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/msm/dsi/pll/dsi_pll_10nm.c b/drivers/gpu/drm/msm/dsi/pll/dsi_pll_10nm.c
index 4c03f0b7343ed..adbe5395f4f38 100644
--- a/drivers/gpu/drm/msm/dsi/pll/dsi_pll_10nm.c
+++ b/drivers/gpu/drm/msm/dsi/pll/dsi_pll_10nm.c
@@ -625,12 +625,14 @@ static void dsi_pll_10nm_destroy(struct msm_dsi_pll *pll)
  * state to follow the master PLL's divider/mux state. Therefore, we don't
  * require special clock ops that also configure the slave PLL registers
  */
-static int pll_10nm_register(struct dsi_pll_10nm *pll_10nm)
+static int pll_10nm_register(struct dsi_pll_10nm *pll_10nm,
+			     const char *ref_clk_name)
 {
 	char clk_name[32], parent[32], vco_name[32];
 	char parent2[32], parent3[32], parent4[32];
+
 	struct clk_init_data vco_init = {
-		.parent_names = (const char *[]){ "xo" },
+		.parent_names = &ref_clk_name,
 		.num_parents = 1,
 		.name = vco_name,
 		.flags = CLK_IGNORE_UNUSED,
@@ -771,6 +773,8 @@ struct msm_dsi_pll *msm_dsi_pll_10nm_init(struct platform_device *pdev, int id)
 {
 	struct dsi_pll_10nm *pll_10nm;
 	struct msm_dsi_pll *pll;
+	struct clk *vco_ref_clk;
+	const char *vco_ref_clk_name;
 	int ret;
 
 	if (!pdev)
@@ -786,6 +790,16 @@ struct msm_dsi_pll *msm_dsi_pll_10nm_init(struct platform_device *pdev, int id)
 	pll_10nm->id = id;
 	pll_10nm_list[id] = pll_10nm;
 
+	vco_ref_clk = devm_clk_get(&pdev->dev, "ref");
+	if (IS_ERR(vco_ref_clk)) {
+		ret = PTR_ERR(vco_ref_clk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "couldn't get 'ref' clock: %d\n",
+				ret);
+		return ERR_PTR(ret);
+	}
+	vco_ref_clk_name = __clk_get_name(vco_ref_clk);
+
 	pll_10nm->phy_cmn_mmio = msm_ioremap(pdev, "dsi_phy", "DSI_PHY");
 	if (IS_ERR_OR_NULL(pll_10nm->phy_cmn_mmio)) {
 		dev_err(&pdev->dev, "failed to map CMN PHY base\n");
@@ -811,7 +825,7 @@ struct msm_dsi_pll *msm_dsi_pll_10nm_init(struct platform_device *pdev, int id)
 
 	pll_10nm->vco_delay = 1;
 
-	ret = pll_10nm_register(pll_10nm);
+	ret = pll_10nm_register(pll_10nm, vco_ref_clk_name);
 	if (ret) {
 		dev_err(&pdev->dev, "failed to register PLL: %d\n", ret);
 		return ERR_PTR(ret);
-- 
2.20.1.415.g653613c723-goog

