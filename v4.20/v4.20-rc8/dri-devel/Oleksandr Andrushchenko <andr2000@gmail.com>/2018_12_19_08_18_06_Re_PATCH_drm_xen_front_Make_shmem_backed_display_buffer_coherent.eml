Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by i7-8700 with POP3-SSL;
  19 Dec 2018 21:31:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D6C265805F0;
	Wed, 19 Dec 2018 00:18:15 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga002-1.fm.intel.com with ESMTP; 19 Dec 2018 00:18:15 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ATwkfXRKdz1RAqigN79mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULf/5rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsVtRuzBxKhBP/sxzJSmnP6waM33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvsMKcdT+O1zLLSwjXFcvxWwyr25ZTOch88u/GMQKlwccrNxkkvCQzFiFaQ?=
 =?us-ascii?q?qYv4ND6SzOsNtXWU7/B+We6zl2Irtxp8ojeqxsg2i4nJgpgZxUzD9SV82Ys4I8?=
 =?us-ascii?q?CzRkB8Yd6hCpRQtieaOpN4QsM4XW5npjs1xaMduZ64YCgKz4wnywTYa/ydfIiE?=
 =?us-ascii?q?+hfjW/yQITd8nX5qYqi/iAqy8Uih1O3zSNO430pNripAlNTHq3MD1wTL58SZVv?=
 =?us-ascii?q?dw+l2t1SuB2gzN8O1IPEM5mbbBJ5MgwLM8jpkevETZEiPohkn7grWaelgr9+S1?=
 =?us-ascii?q?8ejqYLrrq5mBPIFukA7+KL4hmsmnDOQ4LAcOW2+b9Pyi1L3s40L5Wq9Gjv4ona?=
 =?us-ascii?q?nDtpDVO8AbqrS+Aw9P3YYv8xe/DzG439QEhXQLMk5JdRadg4T0NVzCPur0Aeq8?=
 =?us-ascii?q?jliwijtmxvLLMqXkAprXL3jDlLnhfax6605Z0AczydFf55RJCrAOOf7zWVH+tM?=
 =?us-ascii?q?beDhAnNwy42uHnCdt71owAQ2KCGbGZMKzMvl+S/O4vIPeDZJUTuDnjL/gp/fnu?=
 =?us-ascii?q?jWU2mVMFZ6mmwYMXaGykHvRhO0iZZXvsgtQfHmsQsQs+UffniFmDUT5VenazUL?=
 =?us-ascii?q?gw5jA9CIK6E4jDQpqhj6CG3Ce+BpdWfHxJCkiQEXf0cIWJQ/cMZziTIs99iDME?=
 =?us-ascii?q?UqKtS4881R60sg/6xKFqLu7V+i0eqJLi28J55+zVlREu6zN0C96R3H2KT2Fxhm?=
 =?us-ascii?q?kIXSM53LhjoUxhzVeOyap4g/tGGtBJ5PNJVQE6NZjbz+FhD9DyWwTBfsqGSVq8?=
 =?us-ascii?q?Q9WmBy0xQcw1w9MUf0l9HNCihAjZ3yW2G78Vi6CLBJss/63GxHjxJ8F9y3Xc2K?=
 =?us-ascii?q?k7lVYmQNBCNWmnhq556gjSCJTFk0Sfl6a2a6sc2DTB+3uEzWqLpEtYShJ/Ub3Z?=
 =?us-ascii?q?XXADYUvbtdf56VnET7O0DbQnMxFOyciNKqZRbt3pjFNGROrsOdjEYmKxnXuwCg?=
 =?us-ascii?q?iMxr+WcIXqfGAd1j3HCEcYiwAT4WqGNQ8mCyi8uW3eEiJhGUjvY0z29+l+s220?=
 =?us-ascii?q?TkkzwwGObE1h0r619wURhfydTfMTw70FtD0gqzVyAFaywdbWB8CcqApmeaVWec?=
 =?us-ascii?q?k970tf1WLFqwx9OYStIL14iV4AbQt7pUPu2A9xCoVbj8cqqmgnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDlYi83Ri09lSz3?=
 =?us-ascii?q?uc5pXLABAOUZ7rVUY37Rx6p7DcYiky/I7U0XxsMa+psj7Nwd4pBe0lygq+cNdb?=
 =?us-ascii?q?Kq+LCAjyE8gCDci0NOMqg0Spbg4DPO1K7qE0O92pdvSY16+rJupvhy+mgnld74?=
 =?us-ascii?q?B70UKM8DR8R/XM35YExfGYwwSGWy39jFenrsD4h4REaSsOEWq4zCjuHJRRabFq?=
 =?us-ascii?q?fYYXFWeuJNW6x9Vjh5L3R3FU7l+iB1Mc18+vdhqfdFj93QxW1UQKrn2rgyq4zz?=
 =?us-ascii?q?pokz43qqqTxjDBw+PndBAfIG5EWHFijUvwIYizl90aRkmoYBQzmxu/+En6wLJX?=
 =?us-ascii?q?pKJhIGnJQEdEZjT5IHtmUqStqLWCeclP6JUzvCVTUeS8Z02aS7Hnrxsb1SPjA3?=
 =?us-ascii?q?VRxDQhez62vZX5mgRwiHiBI3ZrsHrZZcZwyA/f5dzdX/JQ3iAKRDJliTnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj1d?=
 =?us-ascii?q?llTz/IrBX/Yonszai6KvhofkprBF/97cp1BId+n5A0hJER33gam5qU8WAGkWf1?=
 =?us-ascii?q?LdVUx6b+YGARSj4Mxt7f+BLl11F7LnKV24L5UW2Qw8t7aNm9eG8W2CM978ZRBa?=
 =?us-ascii?q?eQ7bxEmzZ1o1WioQLQZ/h9gikSyf805HEGhOEJvRInzj+BDbAKAUlYISvsmgyL?=
 =?us-ascii?q?79+kraVbfmavcaWq20p4ktCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKgCtnOWHnsnE/xe80kwdu3Y2ks4idMGpi4ri5?=
 =?us-ascii?q?AhFDOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLDHQ+Y7UdqtXPOHIqtN3GKP3kZ1tRiSQKZJExehgAUQTo7koQ4FgCs2Mzu?=
 =?us-ascii?q?bkN56ioN6V7/rxtG0vhoOAXnUmfDuAeobS85R4OFIxpR6gFC+l3ZMciD7u9oGy?=
 =?us-ascii?q?FY/5uhrBGCK2CBZgRIC30JVVKAB1z5Irau4tzA+fCCBuWiN/vOfamOqetGWveK?=
 =?us-ascii?q?352v15Vp/y2WOsWTJHViDOA72kleXXB/AcvZgC4CSygWlyLLcs6aqw2w+ixxrs?=
 =?us-ascii?q?Cj7vvrXBjj6peIC7tXKd9v4Qy5gb+fN+6MgyZ0MTZZ1pQRxX/R1bgQxlgShzt1?=
 =?us-ascii?q?dzmqF7QAujXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO2G9O03GBEaIN7SGJCfHw8LtYaO7Rr1fkv9UtwCruTuAF0/jPzKD?=
 =?us-ascii?q?lyTmVhy1MOFMij2bMwJauI2nbhltDm3jRsr8ahKnKN93kSE2wbosi3zQKG4TKi?=
 =?us-ascii?q?J8fF1Nr7GK6SNYg+5yG2hA7npjMOmFlDyV7+jeKpYKr/RrBj54mP5d4HQ/07FV?=
 =?us-ascii?q?9j1LRORpmCvOqd5ju02mkuiKyjZ9TBVCsCpEhIKVskVkIqjZ8phAWXDZ/BMC92?=
 =?us-ascii?q?mQChIKp8d7Bd3roaxf1t/PlKfrIjdY793U5dccB9TTKM+fMHsuKxzpGDvVDAsD?=
 =?us-ascii?q?VTGqNGHfiFZbkPGd7XCVqpk6qp7xmJsBULNbVVo1Fu8EBURhBtANPJB3XjZ32Y?=
 =?us-ascii?q?Kc2egP/3O6oi7tXlVcuJ3cHqaUBu/mLDixkaNDYR0F2vX/N4tFcsXr1konZlRk?=
 =?us-ascii?q?kYDiH0vLQcsLsiBndhUzokhG7D55VGJ3k0bkbB69pXweD/i5mjYohQZkJ+cg7j?=
 =?us-ascii?q?Hh5xEwPFWO7CcqkQw9lMvohRiVcSXtN+G+R4xbByfvtFQ2KtX8WQkxJQG7m01p?=
 =?us-ascii?q?MHHaSq5NgqFIdGZ3hQuaspxKXbZeQrdDewQ43uyMarMj1lEY4i+g305co+zeFY?=
 =?us-ascii?q?FlihApYLartXtL3w8lZ9kwdoLKI68c6VxdhbmHuCOynsk3zBUDPEYG8G6UeylA?=
 =?us-ascii?q?7EUOOqN8f3Lw1uNp4A2G3TBEfT5fBLIRvvt2+xZlaKy7xCX63usGcxjpOg=3D?=
 =?us-ascii?q?=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABp/Rlch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYJdDIECJ4N9g3uEHot8UgaBCC0UiG4hCGqNR4FzEwEBGA0?=
 =?us-ascii?q?GAYcpIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2JAGCYQEBAQECAQEBASAEC?=
 =?us-ascii?q?wEFCAEbEgsBAwIJAQEFAwILCgMCAiYCAgMgBAEMAQUBHAYBDAYCAQEBgx0BgWg?=
 =?us-ascii?q?BAwgFCAQBCopikAg8ixl8FgUBF4J3BYJEgXwKGScNXlBnAgEFEnmKGIEcgQ+BB?=
 =?us-ascii?q?4ERJ4I9LoMeAQICgT4BAQqDHIJXAoEqAQEBiBGHZ4RvixoBBgIBgVYFhTSGMYQ?=
 =?us-ascii?q?bBhiJdhGHT4lHhHiLFgIEAgQFAgUPIYElgg5wUDFtgU6CGwwXg0qFFIVBPjIBA?=
 =?us-ascii?q?QGBAgEBixQOF4InAQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAABp/Rlch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYJdDIECJ4N9g3uEHot8UgaBCC0UiG4hCGqNR4FzEwEBGA0GAYcpIjQJDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCgsJCCkjDII2JAGCYQEBAQECAQEBASAECwEFCAEbEgsBAwI?=
 =?us-ascii?q?JAQEFAwILCgMCAiYCAgMgBAEMAQUBHAYBDAYCAQEBgx0BgWgBAwgFCAQBCopik?=
 =?us-ascii?q?Ag8ixl8FgUBF4J3BYJEgXwKGScNXlBnAgEFEnmKGIEcgQ+BB4ERJ4I9LoMeAQI?=
 =?us-ascii?q?CgT4BAQqDHIJXAoEqAQEBiBGHZ4RvixoBBgIBgVYFhTSGMYQbBhiJdhGHT4lHh?=
 =?us-ascii?q?HiLFgIEAgQFAgUPIYElgg5wUDFtgU6CGwwXg0qFFIVBPjIBAQGBAgEBixQOF4I?=
 =?us-ascii?q?nAQE?=
X-IronPort-AV: E=Sophos;i="5.56,372,1539673200"; 
   d="scan'208";a="44628815"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 19 Dec 2018 00:18:13 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728249AbeLSISK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 19 Dec 2018 03:18:10 -0500
Received: from mail-lf1-f68.google.com ([209.85.167.68]:45723 "EHLO
        mail-lf1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727718AbeLSISK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 19 Dec 2018 03:18:10 -0500
Received: by mail-lf1-f68.google.com with SMTP id b20so14321530lfa.12
        for <linux-kernel@vger.kernel.org>; Wed, 19 Dec 2018 00:18:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-transfer-encoding:content-language;
        bh=Tu5r+uwolqSb6+VisE9xWgwnB0IroyHo+e5GupPAIuQ=;
        b=u2wv7n0vwjZm6tAJBMgPlXpEfz6T/FYwe8vcOZcma/A6tVy0KIPB/lWMjBhrbnH+PN
         650MIoxvi6bzgTXG6OISvl5y2UqoHOLCxJTe5OUy8BwgBycA7Fhv9qUO0CFU6p/Sdpwx
         6Ojgg7J2VUTR2sylMM8gtX0QaVU7EOBKIrtmIurOPRmj3WdH6rYreODNQdHyiJdTmNLg
         TOKhpyBxsJ+dSfx3glVb3hFrI3wOtr3CoxnJRrMgOAS+klILI3U2i4Qqd7ZIgimrhhSE
         dAa8NbEGjxuXwrsMKdeouZE/3BorZKY6GzbA0s29dm+G7BXCNypckZSxnBBqqFxJhqma
         gfxA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:cc:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-transfer-encoding
         :content-language;
        bh=Tu5r+uwolqSb6+VisE9xWgwnB0IroyHo+e5GupPAIuQ=;
        b=ICHz+rSKzIdp2CxtIAe8Hucrbh85HjY3PopewqiPxTrv98gwWl4as2Irf4VucV+vrT
         OjklofVRGF0Hu+xy5EzEKXaeT2Wdw6DXBfpJCUbCK9VTUubQZ4LjLW+DZuqnMYl4qaf9
         sATpVbjC9vHsufsVC0FR3fNVLNG9Z/FA4o8nugyQ6mkv7njUv1g6huKkfPYrgtyyR9+8
         aZotk3PKgBFmJtDaDLNTvOcdINVc+sEnjW4RfeRQL0x9GDjofoKm00RNsoci0NRZasfK
         7g6kFxhKjCeQXe1DITk2GnBeB1QrWvtHZCfHqsVLC89+8TmuS6tk760c9kqFyzPtIxp+
         /K4w==
X-Gm-Message-State: AA+aEWbhIFcQ6fVt2b/cGD+9QDDE4KySWCCf2jhEKx+6jBwXZEimxvRv
        DCfiOuxRgOSNNyypbomjh5Q=
X-Google-Smtp-Source: AFSGD/U/PNKC7ZvABJbK4Qeh/qpw8qciE0t+c5mJs60iyC2A7NvnMpg+kMEjeFTfC7FV7Fg4zkd2QQ==
X-Received: by 2002:a19:54d7:: with SMTP id b84mr11190242lfl.131.1545207487818;
        Wed, 19 Dec 2018 00:18:07 -0800 (PST)
Received: from [10.17.182.20] (ll-74.141.223.85.sovam.net.ua. [85.223.141.74])
        by smtp.gmail.com with ESMTPSA id v64sm3669787lfa.48.2018.12.19.00.18.06
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 19 Dec 2018 00:18:07 -0800 (PST)
Subject: Re: [PATCH] drm/xen-front: Make shmem backed display buffer coherent
To: =?UTF-8?Q?Noralf_Tr=c3=b8nnes?= <noralf@tronnes.org>,
        xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org,
        dri-devel@lists.freedesktop.org, daniel.vetter@intel.com,
        jgross@suse.com, boris.ostrovsky@oracle.com
Cc: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
References: <20181127103252.20994-1-andr2000@gmail.com>
 <17640791-5306-f7e4-8588-dd39c14e975b@tronnes.org>
From: Oleksandr Andrushchenko <andr2000@gmail.com>
Message-ID: <c5fa494c-2ead-e190-6e8c-43478275f789@gmail.com>
Date: Wed, 19 Dec 2018 10:18:06 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.2.1
MIME-Version: 1.0
In-Reply-To: <17640791-5306-f7e4-8588-dd39c14e975b@tronnes.org>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: en-US
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 12/18/18 9:20 PM, Noralf Trønnes wrote:
>
> Den 27.11.2018 11.32, skrev Oleksandr Andrushchenko:
>> From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
>>
>> When GEM backing storage is allocated with drm_gem_get_pages
>> the backing pages may be cached, thus making it possible that
>> the backend sees only partial content of the buffer which may
>> lead to screen artifacts. Make sure that the frontend's
>> memory is coherent and the backend always sees correct display
>> buffer content.
>>
>> Fixes: c575b7eeb89f ("drm/xen-front: Add support for Xen PV display 
>> frontend")
>>
>> Signed-off-by: Oleksandr Andrushchenko 
>> <oleksandr_andrushchenko@epam.com>
>> ---
>>   drivers/gpu/drm/xen/xen_drm_front_gem.c | 62 +++++++++++++++++++------
>>   1 file changed, 48 insertions(+), 14 deletions(-)
>>
>> diff --git a/drivers/gpu/drm/xen/xen_drm_front_gem.c 
>> b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>> index 47ff019d3aef..c592735e49d2 100644
>> --- a/drivers/gpu/drm/xen/xen_drm_front_gem.c
>> +++ b/drivers/gpu/drm/xen/xen_drm_front_gem.c
>> @@ -33,8 +33,11 @@ struct xen_gem_object {
>>       /* set for buffers allocated by the backend */
>>       bool be_alloc;
>>   -    /* this is for imported PRIME buffer */
>> -    struct sg_table *sgt_imported;
>> +    /*
>> +     * this is for imported PRIME buffer or the one allocated via
>> +     * drm_gem_get_pages.
>> +     */
>> +    struct sg_table *sgt;
>>   };
>>     static inline struct xen_gem_object *
>> @@ -77,10 +80,21 @@ static struct xen_gem_object 
>> *gem_create_obj(struct drm_device *dev,
>>       return xen_obj;
>>   }
>>   +struct sg_table *xen_drm_front_gem_get_sg_table(struct 
>> drm_gem_object *gem_obj)
>> +{
>> +    struct xen_gem_object *xen_obj = to_xen_gem_obj(gem_obj);
>> +
>> +    if (!xen_obj->pages)
>> +        return ERR_PTR(-ENOMEM);
>> +
>> +    return drm_prime_pages_to_sg(xen_obj->pages, xen_obj->num_pages);
>> +}
>> +
>>   static struct xen_gem_object *gem_create(struct drm_device *dev, 
>> size_t size)
>>   {
>>       struct xen_drm_front_drm_info *drm_info = dev->dev_private;
>>       struct xen_gem_object *xen_obj;
>> +    struct address_space *mapping;
>>       int ret;
>>         size = round_up(size, PAGE_SIZE);
>> @@ -113,10 +127,14 @@ static struct xen_gem_object *gem_create(struct 
>> drm_device *dev, size_t size)
>>           xen_obj->be_alloc = true;
>>           return xen_obj;
>>       }
>> +
>>       /*
>>        * need to allocate backing pages now, so we can share those
>>        * with the backend
>>        */
>
>
> Let's see if I understand what you're doing:
>
> Here you say that the pages should be DMA accessible for devices that can
> only see 4GB.

Yes, your understanding is correct. As we are a para-virtualized device we

do not have strict requirements for 32-bit DMA. But, via dma-buf export,

the buffer we create can be used by real HW, e.g. one can pass-through

real HW devices into a guest domain and they can import our buffer (yes,

they can be IOMMU backed and other conditions may apply).

So, this is why we are limiting to DMA32 here, just to allow more possible

use-cases

>
>> +    mapping = xen_obj->base.filp->f_mapping;
>> +    mapping_set_gfp_mask(mapping, GFP_USER | __GFP_DMA32);
>> +
>>       xen_obj->num_pages = DIV_ROUND_UP(size, PAGE_SIZE);
>>       xen_obj->pages = drm_gem_get_pages(&xen_obj->base);
>>       if (IS_ERR_OR_NULL(xen_obj->pages)) {
>> @@ -125,8 +143,27 @@ static struct xen_gem_object *gem_create(struct 
>> drm_device *dev, size_t size)
>>           goto fail;
>>       }
>>   +    xen_obj->sgt = xen_drm_front_gem_get_sg_table(&xen_obj->base);
>> +    if (IS_ERR_OR_NULL(xen_obj->sgt)){
>> +        ret = PTR_ERR(xen_obj->sgt);
>> +        xen_obj->sgt = NULL;
>> +        goto fail_put_pages;
>> +    }
>> +
>> +    if (!dma_map_sg(dev->dev, xen_obj->sgt->sgl, xen_obj->sgt->nents,
>> +            DMA_BIDIRECTIONAL)) {
>
>
> Are you using the DMA streaming API as a way to flush the caches?
Yes
> Does this mean that GFP_USER isn't making the buffer coherent?

No, it didn't help. I had a question [1] if there are any other better way

to achieve the same, but didn't have any response yet. So, I implemented

it via DMA API which helped.

>
> Noralf.
>
>> +        ret = -EFAULT;
>> +        goto fail_free_sgt;
>> +    }
>> +
>>       return xen_obj;
>>   +fail_free_sgt:
>> +    sg_free_table(xen_obj->sgt);
>> +    xen_obj->sgt = NULL;
>> +fail_put_pages:
>> +    drm_gem_put_pages(&xen_obj->base, xen_obj->pages, true, false);
>> +    xen_obj->pages = NULL;
>>   fail:
>>       DRM_ERROR("Failed to allocate buffer with size %zu\n", size);
>>       return ERR_PTR(ret);
>> @@ -149,7 +186,7 @@ void 
>> xen_drm_front_gem_free_object_unlocked(struct drm_gem_object *gem_obj)
>>       struct xen_gem_object *xen_obj = to_xen_gem_obj(gem_obj);
>>         if (xen_obj->base.import_attach) {
>> -        drm_prime_gem_destroy(&xen_obj->base, xen_obj->sgt_imported);
>> +        drm_prime_gem_destroy(&xen_obj->base, xen_obj->sgt);
>>           gem_free_pages_array(xen_obj);
>>       } else {
>>           if (xen_obj->pages) {
>> @@ -158,6 +195,13 @@ void 
>> xen_drm_front_gem_free_object_unlocked(struct drm_gem_object *gem_obj)
>>                               xen_obj->pages);
>>                   gem_free_pages_array(xen_obj);
>>               } else {
>> +                if (xen_obj->sgt) {
>> +                    dma_unmap_sg(xen_obj->base.dev->dev,
>> +                             xen_obj->sgt->sgl,
>> +                             xen_obj->sgt->nents,
>> +                             DMA_BIDIRECTIONAL);
>> +                    sg_free_table(xen_obj->sgt);
>> +                }
>>                   drm_gem_put_pages(&xen_obj->base,
>>                             xen_obj->pages, true, false);
>>               }
>> @@ -174,16 +218,6 @@ struct page **xen_drm_front_gem_get_pages(struct 
>> drm_gem_object *gem_obj)
>>       return xen_obj->pages;
>>   }
>>   -struct sg_table *xen_drm_front_gem_get_sg_table(struct 
>> drm_gem_object *gem_obj)
>> -{
>> -    struct xen_gem_object *xen_obj = to_xen_gem_obj(gem_obj);
>> -
>> -    if (!xen_obj->pages)
>> -        return ERR_PTR(-ENOMEM);
>> -
>> -    return drm_prime_pages_to_sg(xen_obj->pages, xen_obj->num_pages);
>> -}
>> -
>>   struct drm_gem_object *
>>   xen_drm_front_gem_import_sg_table(struct drm_device *dev,
>>                     struct dma_buf_attachment *attach,
>> @@ -203,7 +237,7 @@ xen_drm_front_gem_import_sg_table(struct 
>> drm_device *dev,
>>       if (ret < 0)
>>           return ERR_PTR(ret);
>>   -    xen_obj->sgt_imported = sgt;
>> +    xen_obj->sgt = sgt;
>>         ret = drm_prime_sg_to_page_addr_arrays(sgt, xen_obj->pages,
>>                              NULL, xen_obj->num_pages);
> _______________________________________________
> dri-devel mailing list
> dri-devel@lists.freedesktop.org
> https://lists.freedesktop.org/mailman/listinfo/dri-devel

Thank you,

Oleksandr

[1] 
https://www.mail-archive.com/xen-devel@lists.xenproject.org/msg31745.html

