Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:49:39 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 76DFF5803E4;
	Fri,  7 Dec 2018 06:13:32 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 06:13:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AyHZAfR+wK17yh/9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1esUIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfVzBPDI2/?=
 =?us-ascii?q?YYsPDvYOM+lXoInmv1sDrwCzBRW1BO711jNEmmP60bM83u88EQ/GxgsgH9cWvX?=
 =?us-ascii?q?rTrdX1Mr0dUfuox6fK1zrDde5W2Sv96YjVdBAgoeuDXbRtesfWzEkvFgXFgU+L?=
 =?us-ascii?q?qYD/PzOazP4Ns3WH7+tgSOKvjW4mpBt3ojW03cctio/JhoUNylDf9SR525w5Ks?=
 =?us-ascii?q?G/SE5+eNOpFoZbuSKCN4ZuXM8uX2VltDwnxrAIp5K3ZjUGxZc7yxLFavGKcZCE?=
 =?us-ascii?q?7g//WOqLPDt0mXNodKi9ihqu60Ss1+PxWtes3FZEsCVIkcXAu3UI2hHR7sWIVv?=
 =?us-ascii?q?Vw80Kh1DuP2QDf9ORJLV06labFN5Isx749mYEdsUnMGCL9hV/4g7WMdko+/+il?=
 =?us-ascii?q?8+Tnbavipp+bL4J0lA7+Pbo0msClAuQ3LBIOX26F9uS4zrHj+lf5QLpSgv03lK?=
 =?us-ascii?q?nWrozaKNwFqqKlBwJZyJsv5hihAzu8zdgVnmULIEhEdR+Fl4TpPkvBIPH8Dfex?=
 =?us-ascii?q?mVSslzJryujCPr3gBJXNM3fCnK7ifblj8U5czhQ8zdRG65JTBLABJuz8WlXqud?=
 =?us-ascii?q?zGAR82LRa0z/zkCNpjzIMeX3yAAquDPKPVq1+I6fojI/OQa48NpDb9N/8l6ubq?=
 =?us-ascii?q?jX84ml8SY7Ol3JQKaH2jGvRmIkOZYWfjg9sbEGcKuBY+Q/LuiFGYTTFTYHOyVb?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyBxii7H4FWaXpBClyWEXfoap+LW/EDaC+JJs9hkzoE?=
 =?us-ascii?q?VaWuSoM71BGushP6xKRjLubO5iIYspfj3sBv5+LPjREy6SB0D8OF3mGPSGF7gH?=
 =?us-ascii?q?kERzwx3KB5p0x9zUyO0ax5g/xeCNxS6OlFUgY8NZ7A0eN6D8r+VR7GfteMUFym?=
 =?us-ascii?q?WMmpASktTtItxN8De1xyG86ijhDE3CqmGaUVmKaJBJEv9qLc3n7xJ9tyynrc1a?=
 =?us-ascii?q?khiUUmTdVLNWG8mqF/8A3TDZbTk0qFj6aqabgc3CnV+WeA12WOultUUApxUarf?=
 =?us-ascii?q?W3AfaVDbrdD45kPEUr+vBq4rMgpHyc6eNKRKbsflgklBRPfmIN7eeX6+m3+sBR?=
 =?us-ascii?q?aUwbOBdJfldH8D3CrDEkQEkxoc/XCdNQcgACetpGbeDD9rFVLreE7s9eh+qHWm?=
 =?us-ascii?q?Tk471Q2Kbkth16ar9R4Rn/CTV/QT3rccsic7tzp0BEq9387RC9eYugVuZrtcbs?=
 =?us-ascii?q?0n7FdHz23ZsRd9MYKmL615gl4ecgJ3v17h1hltC4VAl9Qqo20uzAZoNa2Y11ZB?=
 =?us-ascii?q?fSuC3Z/sIr3XNnXy/Be3Zq7K21He1dGW+rsP6PU4sVnjoBulFk0483Vj0tlV1X?=
 =?us-ascii?q?Sc647ODAoTV5LxT0k2+wJ7p7Hcfiky+YfU2WdwPqmztz/Iw8gpC/c9yha8Y9df?=
 =?us-ascii?q?N7uJGxX2E8IECMmhNuwrl0KyYRIZIe9d7qg0P8Chd/uYw6OrOOdgnDS7jWVI+o?=
 =?us-ascii?q?x900SM9zZiRe7MxZoK3/aY3g6fXTfmkFihqtz3mZxDZTwKHmu/1DLoC5JLaqxz?=
 =?us-ascii?q?fYYEE2GuI8Ksy9V6hp7tXWNY9VG5C1MH3s+pZQSdb1jn0QJM0kQXpGStmTGkwD?=
 =?us-ascii?q?xsjzEpsq2f0TTUw+TjaBUIIHRLS3RljVv2J4i7kcoaXEmxYwc1jhSl4Vv1yLZB?=
 =?us-ascii?q?pKR4KWneWkNIfynwL2F/Xaq8rLuCY8hT6Jw2tSVbSvizYVefSrTluRsVzzvjH3?=
 =?us-ascii?q?dCxDA8bzyrupT5kwZ6iW6HN3ZzsXzZdNp0xRfe4tzcWPFQ0iAHRCl+lTnYGFy8?=
 =?us-ascii?q?M8O18tWTkpfJqvq+WH65Vp1PbSnrypuNtCmh6m1wAh2/nPezlsf8EQcg0i/71N?=
 =?us-ascii?q?hqVSPWoxb6eYTr06W6MeR6fkhnHlP86sx6Gp1gnYs0np0fxX8ahpCN93odjWjz?=
 =?us-ascii?q?Kclb2b75bHcVRT8E2dnV7BLn2E1iKHKE3Ib5VnSbwst8aNi2eGIW2iQh789UDK?=
 =?us-ascii?q?eY9qBLnSxwolCgtwLefeB9nisByfsp8HMagPsGuAs3wiWdH7AdB09YPSP3mhSM?=
 =?us-ascii?q?7tC+qrhXZWm1fbix0kp+gc6uDLWYrg5AX3b5f48oHTVs4cVnLFLMzHrz55nheN?=
 =?us-ascii?q?nRbtIcrAeYkhnegOhONJI+iOAKijF5NmLnsn0o0Oo7jR1o3ZGns4mLMWRt/KSl?=
 =?us-ascii?q?AhFGMj35fd8c+jbojaxGhMaZw5ivHol9GjUMRJboUfWoEDcIufXmLQmOFiA8qm?=
 =?us-ascii?q?yAGbreBgKf7EZmr3TSE5GkLX2XJX8Zzcl8SxmZPkBQnAcUXDAilJ4jCg+q3NDh?=
 =?us-ascii?q?cFt+5j0J/VH3sBxMyuZ1NxXlVmffuRylajM1SJiZMRpX4RtO50bTMcyC8O1zGz?=
 =?us-ascii?q?tU8YGmrAyIMmabfRhHDXkVWkyYAFDuJruu6sPF8+eGHeqyNefOba+NqexDVPeI?=
 =?us-ascii?q?2JSv3ZF9/zuXMsWPP39iD+A020ZZXHB5HdjZlCsLSyANiy3NaMubrg+m+iJrts?=
 =?us-ascii?q?C/7OjrWAX36IqPDLtSLMxv+w2sjqeFLeKQnyF5KTBX1p4XwX/Iyb4f3EMdii10?=
 =?us-ascii?q?djmtF6gAujDJTK7KhqBXCBsbYTtpNMRU96I8whVNOcnDh9P1yLF4j/01C1REVV?=
 =?us-ascii?q?D7mcGpf8sKI26jO1PdGUaLL6+LJTnKw8HxfKO9RqdcjORStx2spzmbF1XvMSiE?=
 =?us-ascii?q?lznsTxqvK/1DjDmHPBxCv4GwagxiCXX4Q9L8dBK6MMV7jTk3wbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmuJG4XQ6zqFZ?=
 =?us-ascii?q?4z1eSPNpmCvdsNhurkqikumOzDpnTRVPpixKhIKNoUVtJ6HZ+oNcVnbD+RIH9X?=
 =?us-ascii?q?+QBAgSp9t5Ft3vvLhdy9jVm6L1LTdC8tTU8tMdBsjUMs2HNnUhPAHtGD7VCgsF?=
 =?us-ascii?q?UDGqOXveh0xbjPGd6HmVooImpZjrnZpdAoNcAXA8ELsxA159EdoeLY0/Cj8tl/?=
 =?us-ascii?q?iQhdQQ6HyioQP5Q99TtZTKEPmVBKOrYBOYi7BfLzsB267kPJkVJ4T9kxhna19z?=
 =?us-ascii?q?h8LKElDNQcFQpDxoaCcvsUNK6GNvVSs43EezOS2353pGMP+ylwV+qgJkfPg86T?=
 =?us-ascii?q?H96lF/cl/LoiIr1kk4g8j5kC2XYTf3BLyhW4ZOEDvv8UM2N8WoEE5OcQSukBk8?=
 =?us-ascii?q?Z3//TLVLgu4lLDgzhQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAAYfwpch0O0hNFbCBsBAQEBAwEBA?=
 =?us-ascii?q?QcDAQEBgVEGAQEBCwGBMCqCERUSCowJX4sxgg0UlzsUgXMrAYRAgxwiNAkNAQM?=
 =?us-ascii?q?BAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIkEwYBATcBBQkBAQEBCBgeE?=
 =?us-ascii?q?AMvJQIEAQ0KAwwHgwaCAgEEpB+BbDOCdgEBBYcoCIsDgRyBVz+BV4IXNYRcDhe?=
 =?us-ascii?q?DNYImiRWCFJVABwKCIQSPPoFchRaHToJ4iRCBBY8GgUaCDXCDPIIbDBd/AQeCQ?=
 =?us-ascii?q?4pTQAExgQUBAYkhgR8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAAAYfwpch0O0hNFbCBsBAQEBAwEBAQcDAQEBgVEGAQE?=
 =?us-ascii?q?BCwGBMCqCERUSCowJX4sxgg0UlzsUgXMrAYRAgxwiNAkNAQMBAQEBAQECARMBA?=
 =?us-ascii?q?QEIDQkIKSMMgjYkAYJiAQIDAQIkEwYBATcBBQkBAQEBCBgeEAMvJQIEAQ0KAww?=
 =?us-ascii?q?HgwaCAgEEpB+BbDOCdgEBBYcoCIsDgRyBVz+BV4IXNYRcDheDNYImiRWCFJVAB?=
 =?us-ascii?q?wKCIQSPPoFchRaHToJ4iRCBBY8GgUaCDXCDPIIbDBd/AQeCQ4pTQAExgQUBAYk?=
 =?us-ascii?q?hgR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="44010662"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 07 Dec 2018 06:13:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726101AbeLGONY (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 09:13:24 -0500
Received: from us01smtprelay-2.synopsys.com ([198.182.47.9]:35150 "EHLO
        smtprelay.synopsys.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725997AbeLGONY (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 09:13:24 -0500
Received: from mailhost.synopsys.com (mailhost3.synopsys.com [10.12.238.238])
        by smtprelay.synopsys.com (Postfix) with ESMTP id 6851624E13C0;
        Fri,  7 Dec 2018 06:13:23 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=synopsys.com; s=mail;
        t=1544192003; bh=JSoVBMWnMdQaWxmnKUhcX3ITWtV7lfhqXb2Q9ItMQXI=;
        h=From:To:CC:Subject:Date:References:From;
        b=fg4ZnXgyY1T+22cS6nj/LZCeIAyf0zdKZs+cGntmKXStVnOSs7VX/ebMo3vQRYfRO
         ahowO3f1GkrJjIyyUXW9umCT7x5kmzARFumMkY+LhMF/AwVaDan6z/sf+UJstQtaUz
         8/Da9fDMb1f9CuKk+gMDWORajZ7PdPtVNF8y8wD+Hs73qx5AWGwh1Yo7MvZL1pIud6
         9bg4jdIHeIuOI7rcNWzXdiN6ah9KhVPWhtbSOMUpqypf2l23mC7JdwHY/wTwzmNGHz
         YUd0EOH72Q/YSUYbX52CGxgnvMkpf0fTRQSBSh7R2YBkH6kiYF5qy04nvh2fj/9UAs
         tqRmxTKq8PlZQ==
Received: from us01wehtc1.internal.synopsys.com (us01wehtc1-vip.internal.synopsys.com [10.12.239.236])
        by mailhost.synopsys.com (Postfix) with ESMTP id DFE793BC3;
        Fri,  7 Dec 2018 06:13:22 -0800 (PST)
Received: from AM04WEHTCB.internal.synopsys.com (10.116.16.192) by
 us01wehtc1.internal.synopsys.com (10.12.239.231) with Microsoft SMTP Server
 (TLS) id 14.3.408.0; Fri, 7 Dec 2018 06:13:22 -0800
Received: from AM04WEMBXA.internal.synopsys.com ([fe80::79c3:55f2:1f20:5bf4])
 by am04wehtcb.internal.synopsys.com ([::1]) with mapi id 14.03.0415.000; Fri,
 7 Dec 2018 18:13:19 +0400
From: Minas Harutyunyan <minas.harutyunyan@synopsys.com>
To: Dan Carpenter <dan.carpenter@oracle.com>,
        Minas Harutyunyan <minas.harutyunyan@synopsys.com>
CC: Marek Szyprowski <m.szyprowski@samsung.com>,
        Maynard CABIENTE <maynard.cabiente@raritan.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "linux-usb@vger.kernel.org" <linux-usb@vger.kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Felipe Balbi <felipe.balbi@linux.intel.com>,
        Geert Uytterhoeven <geert@linux-m68k.org>,
        Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
Subject: Re: [PATCH] usb: dwc2: Revert "usb: dwc2: Disable all EP's on
 disconnect"
Thread-Topic: [PATCH] usb: dwc2: Revert "usb: dwc2: Disable all EP's on
 disconnect"
Thread-Index: AQHUgbE8ouTBXi+nzkarEEkfP9zP5Q==
Date: Fri, 7 Dec 2018 14:13:18 +0000
Message-ID: <410670D7E743164D87FA6160E7907A56013A7B4E2E@am04wembxa.internal.synopsys.com>
References: <CGME20181121154518eucas1p2cc7ffd4d071ff420c747e1d0c387ee5d@eucas1p2.samsung.com>
 <20181121154504.13052-1-m.szyprowski@samsung.com>
 <410670D7E743164D87FA6160E7907A56013A7AA1EE@am04wembxa.internal.synopsys.com>
 <20181123144307.GC2970@unbuntlaptop>
 <410670D7E743164D87FA6160E7907A56013A7B19C2@am04wembxa.internal.synopsys.com>
 <20181204132913.GH3073@unbuntlaptop>
 <410670D7E743164D87FA6160E7907A56013A7B2847@am04wembxa.internal.synopsys.com>
 <20181207101532.GR3073@unbuntlaptop>
 <410670D7E743164D87FA6160E7907A56013A7B4AAF@am04wembxa.internal.synopsys.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.116.70.132]
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Dan,=0A=
=0A=
On 12/7/2018 3:20 PM, Minas Harutyunyan wrote:=0A=
> Hi Dan,=0A=
> =0A=
> On 12/7/2018 2:16 PM, Dan Carpenter wrote:=0A=
>> On Wed, Dec 05, 2018 at 12:52:22PM +0000, Minas Harutyunyan wrote:=0A=
>>> Hi,=0A=
>>>=0A=
>>> On 12/4/2018 5:29 PM, Dan Carpenter wrote:=0A=
>>>> On Tue, Dec 04, 2018 at 12:34:08PM +0000, Minas Harutyunyan wrote:=0A=
>>>>> @@ -3185,12 +3183,13 @@ void dwc2_hsotg_disconnect(struct dwc2_hsotg =
*hsotg)=0A=
>>>>>             hsotg->connected =3D 0;=0A=
>>>>>             hsotg->test_mode =3D 0;=0A=
>>>>>=0A=
>>>>> -       /* all endpoints should be shutdown */=0A=
>>>>>             for (ep =3D 0; ep < hsotg->num_of_eps; ep++) {=0A=
>>>>>                     if (hsotg->eps_in[ep])=0A=
>>>>> -                       dwc2_hsotg_ep_disable(&hsotg->eps_in[ep]->ep)=
;=0A=
>>>>> +                       kill_all_requests(hsotg, hsotg->eps_in[ep],=
=0A=
>>>>> +                                                         -ESHUTDOWN)=
;=0A=
>>>>>                     if (hsotg->eps_out[ep])=0A=
>>>>> -                       dwc2_hsotg_ep_disable(&hsotg->eps_out[ep]->ep=
);=0A=
>>>>> +                       kill_all_requests(hsotg, hsotg->eps_out[ep],=
=0A=
>>>>> +                                                         -ESHUTDOWN)=
;=0A=
>>>>=0A=
>>>>=0A=
>>>> Should this part be in a separate patch?=0A=
>>>>=0A=
>>>> I'm not trying to be rhetorical at all.  I literally don't know the=0A=
>>>> code very well.  Hopefully the full commit message will explain it.=0A=
>>>>=0A=
>>>=0A=
>>> Actually, this fragment of patch revert changes from V2 and keep=0A=
>>> untouched dwc2_hsotg_disconnect() function.=0A=
>>>=0A=
>>=0A=
>> To me it feels like there are two issues.  The first is this change, and=
=0A=
>> the second is fixing the lockdep warning.=0A=
>>=0A=
>>=0A=
>>>>>             }=0A=
>>>>>=0A=
>>>>>             call_gadget(hsotg, disconnect);=0A=
>>>>> @@ -3234,6 +3233,8 @@ static void dwc2_hsotg_irq_fifoempty(struct=0A=
>>>>> dwc2_hsotg *hsotg, bool periodic)=0A=
>>>>>                             GINTSTS_PTXFEMP |  \=0A=
>>>>>                             GINTSTS_RXFLVL)=0A=
>>>>>=0A=
>>>>> +static int dwc2_hsotg_ep_disable(struct usb_ep *ep);=0A=
>>>>> +=0A=
>>>>>      /**=0A=
>>>>>       * dwc2_hsotg_core_init - issue softreset to the core=0A=
>>>>>       * @hsotg: The device state=0A=
>>>>> @@ -3258,12 +3259,14 @@ void dwc2_hsotg_core_init_disconnected(struct=
=0A=
>>>>> dwc2_hsotg *hsotg,=0A=
>>>>>                             return;=0A=
>>>>>             } else {=0A=
>>>>>                     /* all endpoints should be shutdown */=0A=
>>>>> +               spin_unlock(&hsotg->lock);=0A=
>>>>>                     for (ep =3D 1; ep < hsotg->num_of_eps; ep++) {=0A=
>>>>>                             if (hsotg->eps_in[ep])=0A=
>>>>>     =0A=
>>>>> dwc2_hsotg_ep_disable(&hsotg->eps_in[ep]->ep);=0A=
>>>>>                             if (hsotg->eps_out[ep])=0A=
>>>>>     =0A=
>>>>> dwc2_hsotg_ep_disable(&hsotg->eps_out[ep]->ep);=0A=
>>>>>                     }=0A=
>>>>> +               spin_lock(&hsotg->lock);=0A=
>>>>>             }=0A=
>>>>>=0A=
>>>>>             /*=0A=
>>>>=0A=
>>>> The idea here is that this is the only caller which is holding the=0A=
>>>> lock and we drop it here and take it again inside dwc2_hsotg_ep_disabl=
e().=0A=
>>>> I don't know the code very well and can't totally swear that this=0A=
>>>> doesn't introduce a small race condition...=0A=
>>>>=0A=
>>> Above fragment of patch allow to keep untouched dwc2_hsotg_ep_disble()=
=0A=
>>> function also, without changing spin_lock/_unlock stuff inside function=
.=0A=
>>>=0A=
>>> My approach here minimally update code to add any races. Just in=0A=
>>> dwc2_hsotg_core_init_disconnected() function on USB reset interrupt=0A=
>>> perform disabling all EP's. Because on USB reset interrupt, called from=
 interrupt=0A=
>>> handler with acquired lock and dwc2_hsotg_ep_disble() function (without=
=0A=
>>> changes) acquire lock, just need to unlock lock to avoid any troubles.=
=0A=
>>>=0A=
>>=0A=
>> Yes.  I understand that.  I just don't like it.=0A=
>>=0A=
>> Although your patch is more "minimal" in that it touches fewer lines of=
=0A=
>> code it's actually more complicated because we have to verify that it's=
=0A=
>> safe to drop the lock.=0A=
>>=0A=
>>=0A=
>>>> Another option would be to introduce a new function which takes the lo=
ck=0A=
>>>> and change all the other callers instead.  To me that would be easier =
to=0A=
>>>> review...  See below for how it might look:=0A=
>>>>=0A=
>>>> regards,=0A=
>>>> dan carpenter=0A=
>>>>=0A=
>>>> diff --git a/drivers/usb/dwc2/gadget.c b/drivers/usb/dwc2/gadget.c=0A=
>>>> index 94f3ba995580..b17a5dbefd5f 100644=0A=
>>>> --- a/drivers/usb/dwc2/gadget.c=0A=
>>>> +++ b/drivers/usb/dwc2/gadget.c=0A=
>>>> @@ -3166,6 +3166,7 @@ static void kill_all_requests(struct dwc2_hsotg =
*hsotg,=0A=
>>>>     }=0A=
>>>>     =0A=
>>>>     static int dwc2_hsotg_ep_disable(struct usb_ep *ep);=0A=
>>>> +static int dwc2_hsotg_ep_disable_lock(struct usb_ep *ep);=0A=
>>>>     =0A=
>>>>     /**=0A=
>>>>      * dwc2_hsotg_disconnect - disconnect service=0A=
>>>> @@ -3188,9 +3189,9 @@ void dwc2_hsotg_disconnect(struct dwc2_hsotg *hs=
otg)=0A=
>>>>     	/* all endpoints should be shutdown */=0A=
>>>>     	for (ep =3D 0; ep < hsotg->num_of_eps; ep++) {=0A=
>>>>     		if (hsotg->eps_in[ep])=0A=
>>>> -			dwc2_hsotg_ep_disable(&hsotg->eps_in[ep]->ep);=0A=
>>>> +			dwc2_hsotg_ep_disable_lock(&hsotg->eps_in[ep]->ep);=0A=
>>>>     		if (hsotg->eps_out[ep])=0A=
>>>> -			dwc2_hsotg_ep_disable(&hsotg->eps_out[ep]->ep);=0A=
>>>> +			dwc2_hsotg_ep_disable_lock(&hsotg->eps_out[ep]->ep);=0A=
>>>>     	}=0A=
>>>>     =0A=
>>>>     	call_gadget(hsotg, disconnect);=0A=
>>>> @@ -4069,10 +4070,8 @@ static int dwc2_hsotg_ep_disable(struct usb_ep =
*ep)=0A=
>>>>     	struct dwc2_hsotg *hsotg =3D hs_ep->parent;=0A=
>>>>     	int dir_in =3D hs_ep->dir_in;=0A=
>>>>     	int index =3D hs_ep->index;=0A=
>>>> -	unsigned long flags;=0A=
>>>>     	u32 epctrl_reg;=0A=
>>>>     	u32 ctrl;=0A=
>>>> -	int locked;=0A=
>>>>     =0A=
>>>>     	dev_dbg(hsotg->dev, "%s(ep %p)\n", __func__, ep);=0A=
>>>>     =0A=
>>>> @@ -4088,10 +4087,6 @@ static int dwc2_hsotg_ep_disable(struct usb_ep =
*ep)=0A=
>>>>     =0A=
>>>>     	epctrl_reg =3D dir_in ? DIEPCTL(index) : DOEPCTL(index);=0A=
>>>>     =0A=
>>>> -	locked =3D spin_is_locked(&hsotg->lock);=0A=
>>>> -	if (!locked)=0A=
>>>> -		spin_lock_irqsave(&hsotg->lock, flags);=0A=
>>>> -=0A=
>>>>     	ctrl =3D dwc2_readl(hsotg, epctrl_reg);=0A=
>>>>     =0A=
>>>>     	if (ctrl & DXEPCTL_EPENA)=0A=
>>>> @@ -4114,12 +4109,23 @@ static int dwc2_hsotg_ep_disable(struct usb_ep=
 *ep)=0A=
>>>>     	hs_ep->fifo_index =3D 0;=0A=
>>>>     	hs_ep->fifo_size =3D 0;=0A=
>>>>     =0A=
>>>> -	if (!locked)=0A=
>>>> -		spin_unlock_irqrestore(&hsotg->lock, flags);=0A=
>>>> -=0A=
>>>>     	return 0;=0A=
>>>>     }=0A=
>>>>     =0A=
>>>> +static int dwc2_hsotg_ep_disable_lock(struct usb_ep *ep)=0A=
>>>> +{=0A=
>>>> +	struct dwc2_hsotg_ep *hs_ep =3D our_ep(ep);=0A=
>>>> +	struct dwc2_hsotg *hsotg =3D hs_ep->parent;=0A=
>>>> +	unsigned long flags;=0A=
>>>> +	int ret;=0A=
>>>> +=0A=
>>>> +	spin_lock_irqsave(&hsotg->lock, flags);=0A=
>>>> +	ret =3D dwc2_hsotg_ep_disable(ep);=0A=
>>>> +	spin_unlock_irqrestore(&hsotg->lock, flags);=0A=
>>>> +=0A=
>>>> +	return ret;=0A=
>>>> +}=0A=
>>>> +=0A=
>>>>     /**=0A=
>>>>      * on_list - check request is on the given endpoint=0A=
>>>>      * @ep: The endpoint to check.=0A=
>>>> @@ -4267,7 +4273,7 @@ static int dwc2_hsotg_ep_sethalt_lock(struct usb=
_ep *ep, int value)=0A=
>>>>     =0A=
>>>>     static const struct usb_ep_ops dwc2_hsotg_ep_ops =3D {=0A=
>>>>     	.enable		=3D dwc2_hsotg_ep_enable,=0A=
>>>> -	.disable	=3D dwc2_hsotg_ep_disable,=0A=
>>>> +	.disable	=3D dwc2_hsotg_ep_disable_lock,=0A=
>>>>     	.alloc_request	=3D dwc2_hsotg_ep_alloc_request,=0A=
>>>>     	.free_request	=3D dwc2_hsotg_ep_free_request,=0A=
>>>>     	.queue		=3D dwc2_hsotg_ep_queue_lock,=0A=
>>>> @@ -4407,9 +4413,9 @@ static int dwc2_hsotg_udc_stop(struct usb_gadget=
 *gadget)=0A=
>>>>     	/* all endpoints should be shutdown */=0A=
>>>>     	for (ep =3D 1; ep < hsotg->num_of_eps; ep++) {=0A=
>>>>     		if (hsotg->eps_in[ep])=0A=
>>>> -			dwc2_hsotg_ep_disable(&hsotg->eps_in[ep]->ep);=0A=
>>>> +			dwc2_hsotg_ep_disable_lock(&hsotg->eps_in[ep]->ep);=0A=
>>>>     		if (hsotg->eps_out[ep])=0A=
>>>> -			dwc2_hsotg_ep_disable(&hsotg->eps_out[ep]->ep);=0A=
>>>> +			dwc2_hsotg_ep_disable_lock(&hsotg->eps_out[ep]->ep);=0A=
>>>>     	}=0A=
>>>>     =0A=
>>>>     	spin_lock_irqsave(&hsotg->lock, flags);=0A=
>>>> @@ -4857,9 +4863,9 @@ int dwc2_hsotg_suspend(struct dwc2_hsotg *hsotg)=
=0A=
>>>>     =0A=
>>>>     		for (ep =3D 0; ep < hsotg->num_of_eps; ep++) {=0A=
>>>>     			if (hsotg->eps_in[ep])=0A=
>>>> -				dwc2_hsotg_ep_disable(&hsotg->eps_in[ep]->ep);=0A=
>>>> +				dwc2_hsotg_ep_disable_lock(&hsotg->eps_in[ep]->ep);=0A=
>>>>     			if (hsotg->eps_out[ep])=0A=
>>>> -				dwc2_hsotg_ep_disable(&hsotg->eps_out[ep]->ep);=0A=
>>>> +				dwc2_hsotg_ep_disable_lock(&hsotg->eps_out[ep]->ep);=0A=
>>>>     		}=0A=
>>>>     	}=0A=
>>>>     =0A=
>>>>=0A=
>>>=0A=
>>> Your code doesn't take care about fifo_map warnings from=0A=
>>> dwc2_hsotg_init_fifo() function. Before calling dwc2_hsotg_init_fifo()=
=0A=
>>> from dwc2_hsotg_core_init_disconnected() function all Ep's should=0A=
>>> disabled and fifo bitmap should be cleared.=0A=
>>>=0A=
>>=0A=
>> Correct.  I am only trying to fix the locking.  I hope you can fix the=
=0A=
>> rest in a separate patch.=0A=
>>=0A=
> Yeah. I'll try deeper investigate driver locking flow and fix it later.=
=0A=
> Actually, I like your idea with introducing dwc2_hsotg_ep_disable_lock()=
=0A=
> function. Maybe you yourself will submit new patch for safe locking=0A=
> fixes? But please just after my patch will applied :-)=0A=
> Currently there are 2-3 high priority issues reported by community and I=
=0A=
> should find solutions/fixes.=0A=
> Thank you very much for your time and useful feedback.=0A=
> =0A=
> Thanks,=0A=
> Minas=0A=
> =0A=
> =0A=
>> regards,=0A=
>> dan carpenter=0A=
>>=0A=
>>=0A=
> =0A=
> =0A=
=0A=
My patch doesn't pass sparse checking: "warning: context imbalance in =0A=
'dwc2_hsotg_core_init_disconnected' - unexpected unlock". Sparse persist!=
=0A=
So, I need to re-work patch. Can I use your idea with =0A=
dwc2_hsotg_ep_disable_lock() function to prepare new one?=0A=
=0A=
Thanks,=0A=
Minas=0A=
