Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:52:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 77344580375;
	Thu,  6 Dec 2018 12:07:39 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 12:07:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AOdfibRG6UpluhRv3+sFHNJ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75osy/bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWSJPAp2y?=
 =?us-ascii?q?YZYMAeoPMulXs5TyqFkAohulHQmhBvjiyiNUinLswaE2z/4sHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOaoPVuC11qjIzS7Hb/xMxzf29ZLGfQ49ofGPWrJwb9faxE40GAPdlVif?=
 =?us-ascii?q?s4jlPzKL2eQLsGWX9fdvWvy2hmMhtgp/oSCvy98yhoXVgo8Z0E3I+CtnzIovON?=
 =?us-ascii?q?G1S1J3bcSlHZZSry2WKZd6Tt8sTmxtpik11rgLtYCgcycW1psqwh3Sa/Kbf4SU?=
 =?us-ascii?q?5x/uVOacLDV2iX9gdrKyhBS//Ealx+D8VcS50FRHoy9Kn9TNtX0CzRre4dWdRP?=
 =?us-ascii?q?Rn5EeuwzOP2hjT6u5aJUA0krLWK4AuwrEujJofq0fDETHsmEXwkqCWcl8o+u+y?=
 =?us-ascii?q?6+Toernmp5mcOJFoigzmLKgihsiyDf4lPgUAQWSX4/mw2b7/8UHjQbhHjOU6kq?=
 =?us-ascii?q?zDv5DbIcQbqLS5AwhQ0os77xa/DjGm0MkXnHUeL1JKZgiHj473NFHKOfz4Cvm+?=
 =?us-ascii?q?g1Kynzdx3P3GILLhDYvXLnTZk7fuY6x960hCxwo319xf4IhUCr4ZLPLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsx+bnCdZ92Z0EVWOAH6+UK6fSsV6O5uIyLOiAfo4VuDDhK/c74/7i?=
 =?us-ascii?q?l2M2mVgYfaOxx5sYdGi4Huh6I0WeeXfsgs0OEWYWvgUkS+zmkl2CUSNJaHa0UK?=
 =?us-ascii?q?Ix/TU7CIOgDYfeSYGhmr2B3CGnHpJIYmBKEEyDEXDtd4+cQfcDdDqSItN9kjwD?=
 =?us-ascii?q?TbWhSYgh2g+0uA/5zLpnKOzU+ioDuJLn1dh14fDTlB4o+Tx1CcSdz3+CT2Vukm?=
 =?us-ascii?q?wUQD822bh1oVZhxVebzah4n/tYGMRJ6PNSUgc6Mp3cw/ZgC9/oWALMZdOJSFeg?=
 =?us-ascii?q?QtW7DjA9VNMxw9kSY0ljH9WulAzM3y2vA7UNjbyEGIQ08r7A33j2P8t9yGzJ1K?=
 =?us-ascii?q?87g1kiQ8tAL2umhqFk+gjXBo7JlViZlqmweaQd2i7N6HmMzW6UsE5EVw5wVL3P?=
 =?us-ascii?q?XWoDaUvOsdT5+kTCQqezBrs9LAtO19SOKqtQZd3vllVJWvHjNNPaY2KynmewAQ?=
 =?us-ascii?q?2FxreNbIrsZmUc0z/RCEkCkwAP43mGMRIyCTumo2LbFDZuD07gY1vw8elir3O2?=
 =?us-ascii?q?VlI7wBuUb0J/zba1+gQahfqHS/wN2LIJoyMhqzRyHFag0NPaEduApwx9fKpCZd?=
 =?us-ascii?q?Mx+ktI1WXctwZlJJyvM7hihkICcwRwp07uyxR3CoBHkcg2rHMrzBB+Kb6C3FNG?=
 =?us-ascii?q?bTOY2ZHwOrvYKmTp+BCvaqjW2kzR0dqM+6cP7ug4pEvnvA2zCkUi9HBn2cFP03?=
 =?us-ascii?q?SA/pXKEBYSUZXpX0kt8xh1ub7bbTc95o/OznJsLLS7vSXE29IqA+sl1A2tf9Ne?=
 =?us-ascii?q?MKOCCQ/zHNcWB8moKOw2hVepaggIM/xV9K4xJ8mmbeeJ2La3POZ8mzKrlWRG4J?=
 =?us-ascii?q?1n3k2Q7SZ9S+7I0IwDw/GXxQaHUzb8jFG8ssH4g4xEZDcSHnahxijgHoJeeqpy?=
 =?us-ascii?q?fYMTA2e0P8K33sl+h4LqW3NA7l6jBk8J19WzeRWPaFzxxwtQ2loNoXymgCe30y?=
 =?us-ascii?q?Z7kzU0oaWBxizOxOLieQEDOm5KQmlikFjtLZK1j9AcQEincQwpmAG56kb9wqhR?=
 =?us-ascii?q?vL5/IHXLQUdUYyj2KHlvU6uxtraYY89D8ogosThRUOmnZVCaS7j9owYV0i/5Hm?=
 =?us-ascii?q?tewiw7eC+uupnjgxN6j2edJm5prHXFYcFw2Qvf5NvESP5TxDUGXip4iTrQBlSm?=
 =?us-ascii?q?JNmm59aUl5TCsuC4SW2hUIZecS3qzYOGqSu66ndmARy5n/CvhNLnFRI23jP819?=
 =?us-ascii?q?lvTS/ItgrzYpH316SmNuJqZklpC0X768ZgGIF+k40wiYoU2XgbgJWV4HUGnX3y?=
 =?us-ascii?q?MdVdxaLxcn4NSSQXzN7S5QjvwFdjIW6Rx4LlSnWdxdNsZ9qgbWMXwC49791KB7?=
 =?us-ascii?q?2S7LxLhiZ1plu4rQTMYflyhDsdyP0u6GIEjOENogYi0iKdArUKF0lCISPsjwiI?=
 =?us-ascii?q?78y5rKhPYWavcLuw21BkkdGvEr6CuR1cV2jjepg5AyBw9Mp/PUnI0H3y7IHkZd?=
 =?us-ascii?q?bRYcgSth2SjxfPkexVJIgtmfoNgCptIXj9smE9y+4nkRxu2om3vJSAK2Vo5q64?=
 =?us-ascii?q?AwRXNjvoZ8MI4THtjL1TnsKX34CpA5VgFS8HXJruTfK0Dj0Sse7rOBqJED05sn?=
 =?us-ascii?q?2bA6bQHReD6Ed6qHLCC4ukOGuQJHkd0NVuXh2dJFFEjQAQXTU6mIM5Fw+wyMzg?=
 =?us-ascii?q?dkd5+i4e5lriphRQzeJoMgH1Un3Dqwewdjc0VJ+fIQJU7g5Y4kfaL9ee4vhvHy?=
 =?us-ascii?q?1C/Z2hsQ+NKnGdZwtSFmEEQUiEB1HlPrmz6tjM6emYBuyiL/TQZbWCs/BRV/CN?=
 =?us-ascii?q?xZi3yItp4y6MNtmTPnllF/A62k1DXW1gG8TEgToPTTYblznKb86dqxex4Sl3rs?=
 =?us-ascii?q?G58PT2VwPj/4qPC71OMdpx/xC6m7uMN+mVhCxhMzZXyosMxWPUyLgYxFMSiz9h?=
 =?us-ascii?q?dziuEbQDtC7BVqHQmrVQDx4UdSxzLtZI77kn0wlJOM7bjM7117Figv40DVdFSU?=
 =?us-ascii?q?LumsWzacMWJGG9MUvNBFyXO7SeOT3L38b3bLumRr1Nl+pUrQO/uDaBH0/nPzSO?=
 =?us-ascii?q?jD3pVxGpMeFRgyCXJh1euIehchlzDWjvVs7pahq+MNVvlz053aU0hm/WNW4bKT?=
 =?us-ascii?q?V8b0JNrriK4SxEmPlwB2xB4WRjLeSfnyaZ7u/YKosZsPdxAyR0kf5a72o+y7dP?=
 =?us-ascii?q?8C5EQ/l1kjPIrtFyu1GmjvWPyj1/XRtOsDlLgoeLvURkOarB95hAWWzL/BQC7W?=
 =?us-ascii?q?iLDxQKpt1lCsDguqxKy9jPkr7zJylG897O4cQcAM3Ue4q7Ny8aPBDgAyLVBQ1N?=
 =?us-ascii?q?ZDinL3PShQRmkfyN93qP5swwq5fhkYEfYrtaUkEpDPQcC1QjENFUc7ltWTZxu7?=
 =?us-ascii?q?mBjdUM7GT2lBTNR8JE9sTNTtqbBfTiLmbfgbQSNEhA+q/xMYlGbt6z4EdlcFQv?=
 =?us-ascii?q?2d2SQ0c=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACAgAlch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGBMII7J4N6iBlfiy+CDRSSQYR5gXEWGBMBh1ciNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBASwLAQQBC?=
 =?us-ascii?q?QEBChgCAgUhAgIDDAVJEwWDHIF6CAEDAaVacHwzgnYBAQWHIQiBC4l4gRwXgUA?=
 =?us-ascii?q?/gRGDEogFMYImiRMkgW+KSIpzCYEViSaHACOBXIgRK4ceLJhggUaCDTMaCBwUg?=
 =?us-ascii?q?yeCGwwXEoNriiE/MoEEAQEBh20CJAQDgiABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAACAgAlch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGBMII7J4N6iBlfiy+CDRSSQYR5gXEWGBMBh1ciNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIgBBkBASwLAQQBCQEBChgCAgUhAgI?=
 =?us-ascii?q?DDAVJEwWDHIF6CAEDAaVacHwzgnYBAQWHIQiBC4l4gRwXgUA/gRGDEogFMYImi?=
 =?us-ascii?q?RMkgW+KSIpzCYEViSaHACOBXIgRK4ceLJhggUaCDTMaCBwUgyeCGwwXEoNriiE?=
 =?us-ascii?q?/MoEEAQEBh20CJAQDgiABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="141101350"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 12:07:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725967AbeLFUHb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 15:07:31 -0500
Received: from mail.skyhub.de ([5.9.137.197]:58704 "EHLO mail.skyhub.de"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725927AbeLFUHb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 15:07:31 -0500
Received: from zn.tnic (p200300EC2BCE8F005573F8735857468A.dip0.t-ipconnect.de [IPv6:2003:ec:2bce:8f00:5573:f873:5857:468a])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id 725181EC0BAD;
        Thu,  6 Dec 2018 21:07:29 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=alien8.de; s=dkim;
        t=1544126849;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:in-reply-to:in-reply-to:  references:references;
        bh=vKDO1AONLDvHL6i7cURw2F4Xjrieo7pmPPnlSoIwetA=;
        b=l3E1w3G7ejtXkjvHnSED+VhnE4LweEbHoPrShyGasASEBSYfA0F5LVMp63Nyzx8R5TgH7E
        RXQyaHlBZtxDWgOvaBfhNXwcsgv5clO+DoA3jrAYq5LIFYDQdgosucjteIi8FHQfMtcieX
        OZ+ZUfOFGNqobPKTh6MmXxby7NCkbC0=
Date: Thu, 6 Dec 2018 21:07:22 +0100
From: Borislav Petkov <bp@alien8.de>
To: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org,
        Andy Lutomirski <luto@kernel.org>,
        Paolo Bonzini <pbonzini@redhat.com>,
        Radim =?utf-8?B?S3LEjW3DocWZ?= <rkrcmar@redhat.com>,
        kvm@vger.kernel.org, "Jason A. Donenfeld" <Jason@zx2c4.com>,
        Rik van Riel <riel@surriel.com>,
        Dave Hansen <dave.hansen@linux.intel.com>
Subject: Re: [PATCH 08/29] x86/fpu: Remove fpu->initialized usage in
 __fpu__restore_sig()
Message-ID: <20181206200722.GF3986@zn.tnic>
References: <20181128222035.2996-1-bigeasy@linutronix.de>
 <20181128222035.2996-9-bigeasy@linutronix.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20181128222035.2996-9-bigeasy@linutronix.de>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 11:20:14PM +0100, Sebastian Andrzej Siewior wrote:
> This is a preparation for the removal of the ->initialized member in the
> fpu struct.
> __fpu__restore_sig() is deactivating the FPU via fpu__drop() and then
> setting manually ->initialized followed by fpu__restore(). The result is
> that it is possible to manipulate fpu->state and the state of registers
> won't be saved/restored on a context switch which would overwrite
> fpu->state.
> 
> Don't access the fpu->state while the content is read from user space
> and examined / sanitized. Use a temporary kmalloc() buffer for the
> preparation of the FPU registers and once the state is considered okay,
> load it. Should something go wrong, return with an error and without
> altering the original FPU registers.
> 
> The removal of "fpu__initialize()" is a nop because fpu->initialized is
> already set for the user task.
> 
> Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
> ---
>  arch/x86/include/asm/fpu/signal.h |  2 +-
>  arch/x86/kernel/fpu/regset.c      |  5 ++--
>  arch/x86/kernel/fpu/signal.c      | 41 ++++++++++++-------------------
>  3 files changed, 19 insertions(+), 29 deletions(-)

...

> diff --git a/arch/x86/kernel/fpu/signal.c b/arch/x86/kernel/fpu/signal.c
> index d99a8ee9e185e..9c35598697b94 100644
> --- a/arch/x86/kernel/fpu/signal.c
> +++ b/arch/x86/kernel/fpu/signal.c
> @@ -207,11 +207,11 @@ int copy_fpstate_to_sigframe(void __user *buf, void __user *buf_fx, int size)
>  }
>  
>  static inline void
> -sanitize_restored_xstate(struct task_struct *tsk,
> +sanitize_restored_xstate(union fpregs_state *state,
>  			 struct user_i387_ia32_struct *ia32_env,
>  			 u64 xfeatures, int fx_only)
>  {
> -	struct xregs_state *xsave = &tsk->thread.fpu.state.xsave;
> +	struct xregs_state *xsave = &state->xsave;
>  	struct xstate_header *header = &xsave->header;
>  
>  	if (use_xsave()) {
> @@ -238,7 +238,7 @@ sanitize_restored_xstate(struct task_struct *tsk,
>  		 */
>  		xsave->i387.mxcsr &= mxcsr_feature_mask;
>  
> -		convert_to_fxsr(tsk, ia32_env);
> +		convert_to_fxsr(&state->fxsave, ia32_env);
>  	}
>  }
>  
> @@ -284,8 +284,6 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
>  	if (!access_ok(VERIFY_READ, buf, size))
>  		return -EACCES;
>  
> -	fpu__initialize(fpu);
> -
>  	if (!static_cpu_has(X86_FEATURE_FPU))
>  		return fpregs_soft_set(current, NULL,
>  				       0, sizeof(struct user_i387_ia32_struct),
> @@ -314,41 +312,34 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
>  		 * thread's fpu state, reconstruct fxstate from the fsave
>  		 * header. Validate and sanitize the copied state.
>  		 */
> +		union fpregs_state *state;
> +		void *tmp;
>  		struct user_i387_ia32_struct env;
>  		int err = 0;

Sort those in reverse xmas order pls.

Otherwise looks ok.

-- 
Regards/Gruss,
    Boris.

Good mailing practices for 400: avoid top-posting and trim the reply.
