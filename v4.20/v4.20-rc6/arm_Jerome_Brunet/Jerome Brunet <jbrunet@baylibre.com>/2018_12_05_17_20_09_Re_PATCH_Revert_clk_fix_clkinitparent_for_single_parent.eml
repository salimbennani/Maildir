Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:56:28 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 20850580375;
	Wed,  5 Dec 2018 09:20:23 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 09:20:22 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AY98HixLG2WrGwI1hYNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/X7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZXchfSixPDJ2y?=
 =?us-ascii?q?YYQNAeoOIehXoIbyqVsVtRuzBxKhBP/txzJSmnP6wbc33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvxKqgSS+e1zKzWwj7ecv5Wwyr96I7WfRA9vPqBWrBwftHLyUkyEQPKkEmQ?=
 =?us-ascii?q?pJf+MDyP1uUNt2mb4PF6Ve2xkWIotwZxoj22y8oql4LHiIUVylXe+iV4xoY4Pd?=
 =?us-ascii?q?64R1BhYd6iDpRQszuWN4xsQsMtRWxjpSU0yqUetJKlYCQHzI4rywPRZvCZaYSE?=
 =?us-ascii?q?/xHuWPqLLTp5hn9pYKyziAyu/US9z+DzSMe53VlPoyVbjNbDrXEA2hnc58WGTv?=
 =?us-ascii?q?Zx4kKs1SuT2w3S8e5JJFs7mrDFJJMvx7M9mIcfvlreESLzmkj7jK6belgi9+O1?=
 =?us-ascii?q?8eroeK/mqYWZN4JsigHxLKAumsunDOQmPQgBQXKb9f6/1LL95035RqtFjvksnq?=
 =?us-ascii?q?neqpDaKtwXpq+/AwBLzoYu8wizAyui3dgCgHUKIkxJdAiag4XqJ13COvH1APWn?=
 =?us-ascii?q?j1SpijhrxvTGPrP7ApXKK3jOiLPhfbd7605Bxws/1NNf6IxOCrEHPv3zXlb9tN?=
 =?us-ascii?q?vWDx8/LQO02f3qCMty1owAQ2KDGKyZP73IsV+O+O0vJ/OAZIgPuDbyM/Ql/eLh?=
 =?us-ascii?q?jWclmV8BeqmkxZ8XaHG7Hvt4OUmYbmfsj8wFEWcLuAo+UePrhEeDUT5Ve3a9Qa?=
 =?us-ascii?q?Y86isnB4KhCIfJXpqtj6CZ3CenAp1WYXhLClCWHnfpa4WLQfAMZDiSIs98iDME?=
 =?us-ascii?q?U7ehRpQl1RGvsg/61rVmIvDV+i0eqZLsytx16/fPmhE18Dx+F96d3H2VT2Fogm?=
 =?us-ascii?q?MIQCc73KJ4oUNj0FuD0q94g/peFdxU/P5JVgY6NZjBz+11EdzyWwTBfsuXR1ai?=
 =?us-ascii?q?WNmpHTYxTtcpyd8Uf0l9A8mijgzE3yeyGbAVjLyLBJs38q7GxXj+PcR9xm3C1K?=
 =?us-ascii?q?kgiVkmX8ROOXenhq556wjcGYrJn1+FmKatcKQWxDTN+3ubzWqSoEFYVxZ9Uabf?=
 =?us-ascii?q?UnAZfEfWqdX56VnET7+hErknNgpBycifKqpFcNHpjFNGROv9N9TaeW6+h2CwBR?=
 =?us-ascii?q?OQzLOWcIXqY3kd3DnaCEUcjg8c52iGOhYkCiehuW3eCiduGkzpY0/r9el+q3a7?=
 =?us-ascii?q?TksvwgGObk1h0ae1+xEPifydTfMTwqwLuCM7pzpoG1a92srcC8CcqAp5YKVcfd?=
 =?us-ascii?q?Q97U9a2m3DqQxyIIasL6B4iV4YaAR4oUXu2g5zCoVBl8gqsXwrwBBzKaKezFNO?=
 =?us-ascii?q?aTeY0YrsNb3QL2n45AqvZLLO2lHCzNaW/b8C6Og5q1XmuwGpCkoi8nV939lJyX?=
 =?us-ascii?q?ec4Y/KDA4TUZL3XUY67Bx6p7DcYikg6ILYz3xsMa+osjDc39IlHvcqyhGlf91H?=
 =?us-ascii?q?KqOLCBfyE9EGB8ipMOElgVypYQwLPe9M9K84Jdipd+ab16GxOuZgnzWmjXpc7Y?=
 =?us-ascii?q?B500KM8Td8S+HS05YExfGYwhWIVzPmgFi9tcD3nJhOZSsOEWqn1SjkGIlRa7Vy?=
 =?us-ascii?q?fIYWE2uhP9e7x9R+h5H3XX5Y+0WuB1cH2M+vZBqTYEbx3QxW1UQLv3OnnTG0wC?=
 =?us-ascii?q?BzkzEstqCfxjDBw/z+dBobPW5GXHNijVbwLoeuldAVQU+oYxIvlBS7/0b6xrFX?=
 =?us-ascii?q?q7hlIGnXXEhHYTL2L2ZkUqarsrqCYshP6I4nsClNUeS8Z0yaRaD5oxcAzyzjGG?=
 =?us-ascii?q?5ezighdz62opX5gwB6iGWFIXdzrXrVY8FxyQ3E5NzBQ/5cxT4GRCh+iTnKCVmw?=
 =?us-ascii?q?Jdip/dOIl5jdtuCyTX6uVppWcSPz14OPqDO75XF2AR24h/2zmMfoERI50S/40N?=
 =?us-ascii?q?lmTz7Iowz/Yono1qS6N/xofk9zCV/46sp6HJx+k4QqiJER33gamoua/X4dnWjv?=
 =?us-ascii?q?NtVb3Lr0bGARSj4T397V/A/l1VVjL32TwIL1THedwspnZ9ShZmMW2yQ9791FCa?=
 =?us-ascii?q?uO7bxEmzd1rUS8rQ7Lffd9mTIdw+M06HEGm+EJpBYtziKFD7ARB0ZYPDbglxSV?=
 =?us-ascii?q?79+kqqVXa32icbyx1Ep4gNCgA6uOogBaWHblZJgiGTV84dl4MFLJyHfz8J3reM?=
 =?us-ascii?q?HMbdIPsR2ZixLAj+lWKJ0rjPYLizRoOXnhvXI70e40lgJh3Yu1vIWcL2Vt/aS5?=
 =?us-ascii?q?AgNXNzHvZsMT/C3tgrhansqMw4+vGZBhEC0RXJT0VfKoDC4StfP/OgaSFz08r2?=
 =?us-ascii?q?2XGLvFEg+Z9UdmtGnPE5GwOnGTJXkZy8hiRRaHKExehgAUQCs1npojGg+2w8zh?=
 =?us-ascii?q?dV9z5ioN6V7gthtM1uVoOgHkXWjFoweobio0RIKbLBpL9QxC40bVMcqD7uN8BS?=
 =?us-ascii?q?1Y/5uhrBCTJWyffQhHEWYJWkmcDVD5Irau/cXA8/SfBuemLfvBe7COpvJFV/uS?=
 =?us-ascii?q?2ZKjyIhm/yuPNsWSOHltFeY711FHXXB4HcTZhjoORzYWlyLLc86UuhO89jdroc?=
 =?us-ascii?q?C49fThQBjv6peXC7tOLdVv/Ai7gKeEN+6NnSZ5NCxX1pUWyX/Tz7gf2lEShjpq?=
 =?us-ascii?q?dzmsF7QAqCHMQLjRmq9REx4UdSdzONFU4KI72wlHIdTbhc/t1r5kkv41DE9IVV?=
 =?us-ascii?q?z/lcGoZswKIGC9OEnEBEaRM7SGKiPEw9vqYaOnUrBQiORUtxutuTeUCUPjPzKD?=
 =?us-ascii?q?lyX3WBCrK+1DkCabPBlGsoGnbhltEXTjTM7hahCjKtB3kCY5wacqiXLKL2IcNT?=
 =?us-ascii?q?l8flhJrr2R6yNYn/p+F3ZA7npjMemLhSKZ4/PEJZYRtPthGj50mP5C4HQm17tV?=
 =?us-ascii?q?6zlJROB0mCvXtNJhv0uqnfWPyjV5VhpDsTJLhIONvUV/NqTV7JhAWXDY/B0T6W?=
 =?us-ascii?q?WcEQgFp9xgCtf3oaBf1sDPlL7vKDdF69/V/dETB87RKMKGNnouKRvoGD7OAwsD?=
 =?us-ascii?q?Qj6mLmXfh01bkPGP+XyZtJk6qp7wmJUQTr9XTkA6FvQfChctINtXG4t6RjMpl/?=
 =?us-ascii?q?axi98ErS6lph7ASO1Zs4rBW/bUBu/gfnLRqLhPZxIFxfvEMJ4KK4Dnx0EqPlxm?=
 =?us-ascii?q?gZ7TBkfMQd1lqCRwag4+ukgL+397GD4dwUXgPyGg+ngWGLaehAMwhxc2NeYn7i?=
 =?us-ascii?q?rq7ksfLFPboCo6ikR3ktLg12PCOAXtJbu9CNkFQxH/sFI8Z9aiG154?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BYAACtBwhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBAYEvgTmBAieDeZQngg0Ukj+EeRSBEANMEgEBGAsIAYFLgnWDEyI?=
 =?us-ascii?q?1CA0BAwEBAQEBAQIBEwEBAQgNCQgpIwxCAQEBAwkCgWMkAYJhAQEBAQIBAQIgB?=
 =?us-ascii?q?BkBATcBBAEJAQEKDgoCAiYCAgMxAQUBHAYBEgUWgwYBgXkIAQQKmjQ8ih1wfDO?=
 =?us-ascii?q?CdgEBBYEwAYEThGADBRJ5iXeBHBeBQD+BEYEXfX6EajCCa4JXjzdGkFsJhwOKV?=
 =?us-ascii?q?4FbhRSCcTaHGSyIXYEDg2aIGoJLBgIJBw8hgSYBggszGggbFYJzATMTggiDbYU?=
 =?us-ascii?q?UhUA/MgEBgQMBAYFsMYg/AQE?=
X-IPAS-Result: =?us-ascii?q?A0BYAACtBwhch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBAYE?=
 =?us-ascii?q?vgTmBAieDeZQngg0Ukj+EeRSBEANMEgEBGAsIAYFLgnWDEyI1CA0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwxCAQEBAwkCgWMkAYJhAQEBAQIBAQIgBBkBATcBBAEJAQE?=
 =?us-ascii?q?KDgoCAiYCAgMxAQUBHAYBEgUWgwYBgXkIAQQKmjQ8ih1wfDOCdgEBBYEwAYETh?=
 =?us-ascii?q?GADBRJ5iXeBHBeBQD+BEYEXfX6EajCCa4JXjzdGkFsJhwOKV4FbhRSCcTaHGSy?=
 =?us-ascii?q?IXYEDg2aIGoJLBgIJBw8hgSYBggszGggbFYJzATMTggiDbYUUhUA/MgEBgQMBA?=
 =?us-ascii?q?YFsMYg/AQE?=
X-IronPort-AV: E=Sophos;i="5.56,318,1539673200"; 
   d="scan'208";a="140904836"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 09:20:21 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728047AbeLERUQ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 12:20:16 -0500
Received: from mail-wm1-f67.google.com ([209.85.128.67]:40786 "EHLO
        mail-wm1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727429AbeLERUQ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 12:20:16 -0500
Received: by mail-wm1-f67.google.com with SMTP id q26so13671462wmf.5
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 09:20:14 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=baylibre-com.20150623.gappssmtp.com; s=20150623;
        h=message-id:subject:from:to:cc:date:in-reply-to:references
         :user-agent:mime-version:content-transfer-encoding;
        bh=kSDKmnuhTvRq15iHCVs7D1Z4an+N9JmJDABs89PeBu0=;
        b=OPeT1ZD7Wfrq8uB5ruEt0+gE8Q/0XQphweib66ELpYQYcakvHYo2cxE0y1O5SmYfN9
         Wlf4kUJSeLj1mISESsiCxTqb3D70+z+uJGAkg1qj1aHcAU9hhO06X+hPbobLzUhvyzEd
         /2fvJMqUCspAqDY+kDJcIbj02Ad+npnBnr8sBikjGhP6FOK9RA9e0oU2/gTUiQjXuZpT
         wkcNDjNQ5RwJeB7uqTu5ZIIc+fZ7FM/0eZ2KAprjEcRUO5ZvDShoggAuS3/PCXEyYuRj
         RusswkbzFWBmCCe+yC5aQvSvmObBSYO9wmjdAZJ+2LmmZCsfVSdSy1dCRcwKkZQ2qDNz
         DsMA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:message-id:subject:from:to:cc:date:in-reply-to
         :references:user-agent:mime-version:content-transfer-encoding;
        bh=kSDKmnuhTvRq15iHCVs7D1Z4an+N9JmJDABs89PeBu0=;
        b=e65/u4cVzxz77nwpXWvUnrg1ZZwZioBB2J/TwSwj8ns702dtbIlf5hWqH6HOYVYSA6
         eUlUYeuFV9yhbQksiIbLKqVCnZJF3XxfBSe69fxji5G7fGsvNhEhhrp26BcPUCPEWHi6
         bHyRrkhy9A1y80O7pkTPuyEuoLvZmYZ8RL9Fon/XNUEwN024vdQWgJlTBXenXJwd07Qm
         ay3PkEQJKZzlW2laEytT5xP4LF9o/dqqpA0BvnlICdO39DAqERL5XIA6lgZn5ErqKbqK
         96c30QQOYuI0tSj6g5iAa9kGZPAykX8MToEtCkbYvWC6KievuH4Zt0tCrvSjtm5wex1y
         ZzJg==
X-Gm-Message-State: AA+aEWZ/07K+Gr8tLXucKmvMtVjYfKt0IpQiUAMaq/UlGaMta/vpXIko
        fSc1aXHIxS7CDNfJQIn5d44/phtZYmo=
X-Google-Smtp-Source: AFSGD/UD2Rk8ipYPEVCk4wqIqNQfcjTgWQ6XB61aEEiuZS5suxdahOB00fUsZPnoxvtSssBrBXIVNA==
X-Received: by 2002:a1c:c10f:: with SMTP id r15mr10272020wmf.27.1544030413621;
        Wed, 05 Dec 2018 09:20:13 -0800 (PST)
Received: from boomer.baylibre.com ([2a01:e34:eeb6:4690:106b:bae3:31ed:7561])
        by smtp.gmail.com with ESMTPSA id y185sm10107903wmg.34.2018.12.05.09.20.11
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 05 Dec 2018 09:20:12 -0800 (PST)
Message-ID: <98e430d7a96fa6b4f0225e57820a4a677108a052.camel@baylibre.com>
Subject: Re: [PATCH] Revert "clk: fix __clk_init_parent() for single parent
 clocks"
From: Jerome Brunet <jbrunet@baylibre.com>
To: Stephen Boyd <sboyd@kernel.org>,
        Michael Turquette <mturquette@baylibre.com>
Cc: linux-clk@vger.kernel.org, linux-kernel@vger.kernel.org,
        Masahiro Yamada <yamada.masahiro@socionext.com>
Date: Wed, 05 Dec 2018 18:20:09 +0100
In-Reply-To: <154399647605.88331.115722031910044874@swboyd.mtv.corp.google.com>
References: <20181204163257.32085-1-jbrunet@baylibre.com>
         <154394675320.88331.12449582989130694425@swboyd.mtv.corp.google.com>
         <807f2924b67239f61c6d93de7f7b124f8a1f195a.camel@baylibre.com>
         <154399647605.88331.115722031910044874@swboyd.mtv.corp.google.com>
Content-Type: text/plain; charset="UTF-8"
User-Agent: Evolution 3.30.2 (3.30.2-2.fc29) 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 2018-12-04 at 23:54 -0800, Stephen Boyd wrote:
> Quoting Jerome Brunet (2018-12-04 11:51:17)
> > On Tue, 2018-12-04 at 10:05 -0800, Stephen Boyd wrote:
> > > Quoting Jerome Brunet (2018-12-04 08:32:57)
> > > > This reverts commit 2430a94d1e719b7b4af2a65b781a4c036eb22e64.
> > > > 
> > > > From the original commit message:
> > > >   It turned out a problem because there are some single-parent clocks
> > > >   that implement .get_parent() callback and return non-zero index.
> > > >   The SOCFPGA clock is the case; the commit broke the SOCFPGA boards.
> > > > 
> > > > It is wrong for a clock to return an index >= num_parents. CCF checks
> > > > for this condition in clk_core_get_parent_by_index(). This function
> > > > sets
> > > > the parent to NULL if index is incoherent, which seems like the only
> > > > sane choice.
> > > > 
> > > > commit 2430a94d1e71 ("clk: fix __clk_init_parent() for single parent
> > > > clocks")
> > > > appears to be a work around installed in the core framework for a
> > > > problem
> > > > that is platform specific, and should probably be fixed in the
> > > > platform
> > > > code.
> > > 
> > > Ouch. I see that I even pointed that out in 2016 but never got a reply
> > > or a fix patch[1].
> > > 
> > > > Further more, it introduces a problem in a corner case of the mux
> > > > clock.
> > > > Take mux with multiple parents, but only one is known, the rest being
> > > > undocumented. The register reset has one of unknown parent set.
> > > > 
> > > > Before commit 2430a94d1e71 ("clk: fix __clk_init_parent() for single
> > > > parent clocks"):
> > > >  * get_parent() is called, register is read and give an unknown index.
> > > >    -> the mux is orphaned.
> > > >  * a call to set_rate() will reparent the mux to the only known
> > > > parent.
> > > > 
> > > > With commit 2430a94d1e71 ("clk: fix __clk_init_parent() for single
> > > > parent
> > > > clocks"):
> > > >  * the register is never read.
> > > >  * parent is wrongly assumed to be the only known one.
> > > >    As a consequence, all the calculation deriving from the mux will be
> > > >    wrong
> > > >  * Since we believe the only know parent to be set, set_parent() won't
> > > >    ever be called and the register won't be set with the correct
> > > > value.
> > > 
> > > Isn't this the broken bad case all over again? Why register a clk as a
> > > mux and then only say it has one parent?
> > 
> > I understand it is a bit odd but as I explained it is a corner case.
> > 
> > We are really trying to drive a mux here, applying a values will change
> > the
> > clock signal we get. Documentation being what it is, we only know one the
> > parent. The other parent could anything or maybe not connected at all, who
> > know. That is not the important part actually
> > 
> > If such mux was already set to the known entry by default, it would be OK
> > to
> > ignore it. But if it is not, then we CCF to realise that and change the
> > setting accordingly.
> > 
> > This the case of the 'ao_cts_cec' clock in the following patch:
> > https://lore.kernel.org/patchwork/patch/1021028/
> > 
> > by default the value in the register is 0, but the only one that makes
> > sense
> > for us is 1.
> 
> Ok. Thanks for the explanation. What do you do to fix this problem in
> the 'ao_cts_cec' clk implementation?

IMO, there is nothing to fix, the implementation is correct. 

>  Sounds like you just rely on
> clk_set_rate() to fix this all up for you when the consumer changes the
> rate?

To setup the rate as the customer expect, yes.

> 
> If we have something that is default parented to something we're not
> telling the framework about for some reason then one solution would be
> to have some init code reparent the clk in hardware before registering
> it with the framework. Basically "fix up" the clk tree in hardware to be
> consistent with what software can reason about. 

Should we really ? Something the framework does not know about is not
necessarily something wrong.

It would best if we could model the tree completly, but most of the time, we
just approximate it the best we can.

The framework just knows how to setup rates, it has no idea what rate needs to
be set or when - And I think it is best if does not make any assumption about
that.

Pushing it a bit, this unknown parent might important to the boot sequence.
How would you know when it is safe to change the setting ?
What would change it to ? It Seems obvious when there is only one known
parent, but what if there two ? which one do you pick ? Is it really the role
of CCF to make this kind of choice ? 

> 
> This also reminds me of some audio clks I've seen before where the
> default parent is some external pin and it can be reparented to an
> internal clk with clk_set_rate/parent. In that case, I think we forced
> the parent over to the internal clk before registering so that it would
> always get parented properly in the framework. Right now, this is going
> to cause problems for plans to probe defer clk_get() on orphan clks.

clk_get() on orphaned clock should probably return an error if it is not the
case already ? or 0 maybe ?

> 
> Maybe this could work better if we allowed
> 'assigned-clock-parents/rates' to reparent clks regardless of orphan
> status and/or had some flag that could be set on clks to indicate that
> we're OK if clk_get() is called on it when it's an orphan because this
> isn't a problem?

Not sure I understand your point here.

> 
> Or we can make the defer on orphan code only defer if the clk has a
> single parent and it's an orphan and return the clk if there is at least
> one parent of the clk that has been registered and isn't marked as an
> orphan. That would need to be recursively applied, so I guess we would
> update our orphan marking code to indicate that clk_get() on the clk
> should probe defer or not instead of indicating the clk's orphan status.
> Doing this would also side-step the problem Rockchip was having where
> certain parents never appeared but the clk was parented to it in
> hardware, essentially blocking the clk from ever being touched by
> consumers.

... and now you lost me completly :)

> 
> On the other hand, not having the clk there causes us to do a global
> search of the clk name space each time we look for parents by the
> "unknown" index, which in the Rockchip case was quite often because the
> clk was changing between two other parents with a third one that never
> got registered. So it may be better to just register an "unknown" clk as
> a root clk with a rate of 0 that you can then hook everything up to that
> is hardware reset to this unknown input. That way nothing is orphaned
> and everyone is happy. We could do this for the audio case I talked
> about earlier too so when the external pin is left unconnected we could
> register some 'unconnected' clk and parent the audio clk to it.

We have sometimes a few orphans in the amlogic clock tree, it does not seems
to a problem.

I don't really understand the benefit of having a fake clock that would adopt
all the orphan ? You guess there is problem I'm not aware of ...

> 
> > > > Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
> > > > ---
> > > 
> > > Is this related to the other patch you sent? Can you send series for
> > > related patches please?
> > > 
> > > [1] https://lkml.kernel.org/r/20160209181833.GA24167@codeaurora.org
> > 
> > Actually I was intially doing a series, and stopped when my cover letter
> > started with "those are two unrelated patches ..." ;)
> > 
> > I found these things while debugging the same thing but there is no deps
> > between them.
> > 
> 
> Ok.


