Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:15:04 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 709D75800CB;
	Mon, 10 Dec 2018 00:59:24 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 10 Dec 2018 00:59:23 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A2S5jsxcBx+PXuhFZWDhwzquVlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+bRSN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRPDI28?=
 =?us-ascii?q?cYUBEukPPehXoIbhulQBrxWxBRK0BO7t0TJImmP60Lcm3+g9CwzKwgotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fXP61zKnSzDXDdO9W2TDz6IjGbB8hu+yHU7xqfsrVzUkkCgTIgUmQ?=
 =?us-ascii?q?qYz/PjOVzfgNs2+V7+puS+2vkXQrpBxrrTirwschkZPGhpgQylze6Sp5x4M1KM?=
 =?us-ascii?q?S+RUVmYtCkCINduz+GO4ZyWM8uXm9ltDggxrEbupO3YDIGxZUlyhLHdfCLboqF?=
 =?us-ascii?q?7gj+WOuePTt0nm9pdK6iixqo80Ws1uvxXdSu3llQtCpKiNzMu2gN1xPN7siHTe?=
 =?us-ascii?q?Nw/lmu2TmRzQDf8OJELl4ulardNZEhxqQ8lp0JsUTMBiP2mUP2g7GKdkg85OSk?=
 =?us-ascii?q?9+Dqbq/7qpKSKYN4kBzyP6cylsClAOk1MBACX22B9uS90L3j81f5QLJPjvAulq?=
 =?us-ascii?q?nZsZbaJdkUp6KgAA9azJwj6xChADeiydgYmncGLFRbdxKdlIXpJV7OL+7iDful?=
 =?us-ascii?q?gFSjji1rx/bYMb3lGJnNKWLDkLj5cbZn90Fc0BYzzcxY559MDrEBIfHzVVHruN?=
 =?us-ascii?q?3XEx80KAi0w+fhCNVg2YISQ2OPAqmFMKzMtV+E/P4gI+6JZIUNojbyN+Al5+Ly?=
 =?us-ascii?q?jX8+gVIdfbOm3ZoLaH+iGfRqOUWZYWf2jdcHHmcHpQ4+TO3siF2fXj9ffXeyX6?=
 =?us-ascii?q?Qg5j4lDIKqF5vMRoeogLaZxie0AoVWZnxaClCLCXrodYKEVOkWZCKRJc9hlDoE?=
 =?us-ascii?q?Vb+6Ro8l1BGushL6yrV9IurV/C0YqYzs1Nxv6+LPkhEy8CR+D96B3GGVU2F0gm?=
 =?us-ascii?q?QISics06BkoUx9zVSD3bJig/NCF9xe/PdJUgY8NZ7BwO12EdHyWgTdftiXTFaq?=
 =?us-ascii?q?WMmpATY0Ttgp2d8Bf159G8m+jhDExyeqAKUal7qRCJww86LTxX7xJ8lmxnbC1a?=
 =?us-ascii?q?khiUQmQ8RVOW2ngK5/6xbcB4rTn0qFkKaqcLwW3DTR+2eb0WqOoEZYXRZtXqrf?=
 =?us-ascii?q?Q3AQeFHardTj6UPEVL+hF7InPgxFyc6BL6tKbsbkjVFHRPflJdTfbHi9m2a2BR?=
 =?us-ascii?q?aU2LyMaJDmdHka3CXYEEIEiRwc/W6aNQgiASesu3/RAyZwFV3xeU/s8fNxqHWg?=
 =?us-ascii?q?TkAqyQGHdElh17uz+h4Iiv2QUfIT3rQYuCg/rzV4Bkqy39XTC9CYvQpuYL1cYc?=
 =?us-ascii?q?8h4FdAzW/Zqw19PpmnL6B+hl4fcx57v1/02xVwEIVAlckqrHUlzAdpLaKY0VVB?=
 =?us-ascii?q?dy6X3JzqO73XLHXy8w6ra6LMxl7e19OW8L8V6Psks1XjoB2pFk06/np919lazX?=
 =?us-ascii?q?Sd6YvKDQYISp3xT1s4+AJ8p7HZZSk9+ZjZ1XltMamyrz/D1MglBOojyha8Ydhf?=
 =?us-ascii?q?NLmIGxP1E80fH8KuMvAlm0C1bhIYO+Bf7K41P968e/SawqKqPeZgkyigjWRI+4?=
 =?us-ascii?q?191kOM9yxhSu/HxZoFwveY3heZWDf4lluursf3mYVcbzEIAmW/0TTkBJJWZqBq?=
 =?us-ascii?q?Z4YLCHuhLNetxtpjgJ7hQXhY+0C5B1MHwcOmZQCdb1jg0gJOz0QXpnqnlDC8zz?=
 =?us-ascii?q?x1lTEps6We0DbPw+TkaBoIJGpLSHN+glfrJIi+l8oaU1Swbwg1iBul4l73xqha?=
 =?us-ascii?q?pKhlL2jfW1xIfzXwL2x5Vquwt7yCY9NA6Z8ysCVXVvi8bk6eSrLnvxQa1CbjFX?=
 =?us-ascii?q?NExD8nbzGqpon5nxtihWKfNnlztnnZecJ3xRvF/9zTX/1R3jkHRCl+lzbXAEOx?=
 =?us-ascii?q?P92o/dWSipfCvfqyV2OnVp1PbybryZmMuze85W1vGRe/hey8msX7EQgm1i/2z9?=
 =?us-ascii?q?lrWj/PrBrmYInr1qK6PPljfklpAl/89sV7Fpt/kos2mJEfx3waio+J8noAlGf5?=
 =?us-ascii?q?Kc9b1r7mbHoRWT4LxMbY4Av/101iNH6Jx5/5WW+bwstufNS6ZmIW2iQg78FFEq?=
 =?us-ascii?q?uU7bpEnTdrrVq8tw7eff99njIFw/s09HEam/0JuBYqziiFB7ASHEpYMjb2mxWG?=
 =?us-ascii?q?8d++t7lXa3i1cberykV+h9+hAaqGogFdXnb5Z5gjETVx7sV5LFLDznnz5pv4d9?=
 =?us-ascii?q?nXaNIZrgeUnAvYj+hJNJIxkeIHhTZgOWL4p3EkyvQ0jRpz3ZGhp4iHKn5g/Ka4?=
 =?us-ascii?q?Ah5eKz30aNkf+jDrjaZCgMmW25qjEYlmGjUORJHoV+6nECoOtfT7MAaDCCYzpW?=
 =?us-ascii?q?2cGbrbAA+T8kNmr2/UHpCvNnGXImQZzNp4SBmcIkxfnB4bXDEgkpElEQCqwdTr?=
 =?us-ascii?q?cF1l6TAJ+l74thxMx/pqNxblV2fQuhyoZi0oSJSFLxpW8wJC51rTMcOE9eJ+BC?=
 =?us-ascii?q?VY/pynrAyQJW2XfQVIDWcVWkOaA1DvJKWh5d7F8+KAHOqxM+POYamSqexZT/qJ?=
 =?us-ascii?q?xZWv0pZ//zaRLMqPOGNuD+Y82kpFUnB0AMDZmzQJSywKmCPBdc+bpBGg+iJpqs?=
 =?us-ascii?q?Cz6ujkWAXq5YGXEbtdLc1v+wyqgaeEL+OQhDh2KTdb1pMPxH/E0rsf3EQViyFh?=
 =?us-ascii?q?aTatC6kAtTXWQaLUm69XCQMbaixpOMtJ6aI8whdCOcrBhtzp0b54i+Y/C01ZWl?=
 =?us-ascii?q?z5hsGpecsKLnmnO1PaH0mLLqqJJD3Rz8HzYKOxUrlQjORStx2ttjeXCU7jPjKf?=
 =?us-ascii?q?lzb3UxCjK/1DjCaePBZGooGybg5tCXT/TNLhchC7LN53jTgszbIonH/FKW4cPi?=
 =?us-ascii?q?Z6c05Wqr2Q7CVYguhwGmBb73plK/WElDid7+XCNpkWtv5rCDxul+1G+HQ616dV?=
 =?us-ascii?q?7CZcSf11giTSqNtuo1CgkuaXyztnUABBqjBEhI+QuUViOKPZ9oRPWHre/RIN63?=
 =?us-ascii?q?mQBAoOp9d/FtLvvKVQmZDzk/fINSVf8NOc3oMkANXQL9mKeC46LAj0Gz+SFAwY?=
 =?us-ascii?q?STmwOEnWnUkbm/aXoC67tJ8//7PsgpsVVrhVWlEvXt8TDkAtSNcCOpZsQjQqn7?=
 =?us-ascii?q?OBysIB4X6WpQPUAs5du8aUBbqpHfzzJWPB3vF/bBwSzOa9dNxLOw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABDKg5ch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBAYNqFBOME1+LLoINFGiWVYFzLBMBh2oiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKS9CAQ4BgWQkAYJiAQIDAQIkEzoFBgkBAQoYC?=
 =?us-ascii?q?SUDDAVJEwWDHIICBAGlYTOKH4whgVc/gRGCXTWINoImAok5hgSGN4sBBwKCIQS?=
 =?us-ascii?q?PHyORPSyaSoIOTSODPJBcPgEBMYEFAQGDJYkkAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAABDKg5ch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBAYNqFBOME1+LLoINFGiWVYFzLBMBh2oiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKS9CAQ4BgWQkAYJiAQIDAQIkEzoFBgkBAQoYCSUDDAVJEwWDHII?=
 =?us-ascii?q?CBAGlYTOKH4whgVc/gRGCXTWINoImAok5hgSGN4sBBwKCIQSPHyORPSyaSoIOT?=
 =?us-ascii?q?SODPJBcPgEBMYEFAQGDJYkkAQE?=
X-IronPort-AV: E=Sophos;i="5.56,337,1539673200"; 
   d="scan'208";a="43396542"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 10 Dec 2018 00:59:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726756AbeLJI4T (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 03:56:19 -0500
Received: from usa-sjc-mx-foss1.foss.arm.com ([217.140.101.70]:48808 "EHLO
        foss.arm.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726531AbeLJI4T (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 03:56:19 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 4013B1596;
        Mon, 10 Dec 2018 00:56:18 -0800 (PST)
Received: from localhost (e113682-lin.copenhagen.arm.com [10.32.144.41])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id CCFAE3F575;
        Mon, 10 Dec 2018 00:56:17 -0800 (PST)
Date: Mon, 10 Dec 2018 09:56:16 +0100
From: Christoffer Dall <christoffer.dall@arm.com>
To: Suzuki K Poulose <suzuki.poulose@arm.com>
Cc: Anshuman Khandual <anshuman.khandual@arm.com>,
        kvmarm@lists.cs.columbia.edu, marc.zyngier@arm.com,
        will.deacon@arm.com, linux-kernel@vger.kernel.org,
        punitagrawal@gmail.com, linux-arm-kernel@lists.infradead.org
Subject: Re: [PATCH v9 1/8] KVM: arm/arm64: Share common code in
 user_mem_abort()
Message-ID: <20181210085616.GB30263@e113682-lin.lund.arm.com>
References: <20181031175745.18650-1-punit.agrawal@arm.com>
 <20181031175745.18650-2-punit.agrawal@arm.com>
 <ad4b316a-054f-24d9-d32d-8fbe7972b5ad@arm.com>
 <8fd34e5f-7d75-4de2-3fee-d6d70805685c@arm.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <8fd34e5f-7d75-4de2-3fee-d6d70805685c@arm.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 03, 2018 at 01:37:37PM +0000, Suzuki K Poulose wrote:
> Hi Anshuman,
> 
> On 03/12/2018 12:11, Anshuman Khandual wrote:
> >
> >
> >On 10/31/2018 11:27 PM, Punit Agrawal wrote:
> >>The code for operations such as marking the pfn as dirty, and
> >>dcache/icache maintenance during stage 2 fault handling is duplicated
> >>between normal pages and PMD hugepages.
> >>
> >>Instead of creating another copy of the operations when we introduce
> >>PUD hugepages, let's share them across the different pagesizes.
> >>
> >>Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
> >>Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
> >>Cc: Christoffer Dall <christoffer.dall@arm.com>
> >>Cc: Marc Zyngier <marc.zyngier@arm.com>
> >>---
> >>  virt/kvm/arm/mmu.c | 49 ++++++++++++++++++++++++++++------------------
> >>  1 file changed, 30 insertions(+), 19 deletions(-)
> >>
> >>diff --git a/virt/kvm/arm/mmu.c b/virt/kvm/arm/mmu.c
> >>index 5eca48bdb1a6..59595207c5e1 100644
> >>--- a/virt/kvm/arm/mmu.c
> >>+++ b/virt/kvm/arm/mmu.c
> >>@@ -1475,7 +1475,7 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
> >>  			  unsigned long fault_status)
> >>  {
> >>  	int ret;
> >>-	bool write_fault, exec_fault, writable, hugetlb = false, force_pte = false;
> >>+	bool write_fault, exec_fault, writable, force_pte = false;
> >>  	unsigned long mmu_seq;
> >>  	gfn_t gfn = fault_ipa >> PAGE_SHIFT;
> >>  	struct kvm *kvm = vcpu->kvm;
> >>@@ -1484,7 +1484,7 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
> >>  	kvm_pfn_t pfn;
> >>  	pgprot_t mem_type = PAGE_S2;
> >>  	bool logging_active = memslot_is_logging(memslot);
> >>-	unsigned long flags = 0;
> >>+	unsigned long vma_pagesize, flags = 0;
> >
> >A small nit s/vma_pagesize/pagesize. Why call it VMA ? Its implicit.
> 
> May be we could call it mapsize. pagesize is confusing.
> 

I'm ok with mapsize.  I see the vma_pagesize name coming from the fact
that this is initially set to the return value from vma_kernel_pagesize.

I have not problems with either vma_pagesize or mapsize.

> >
> >>  	write_fault = kvm_is_write_fault(vcpu);
> >>  	exec_fault = kvm_vcpu_trap_is_iabt(vcpu);
> >>@@ -1504,10 +1504,16 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
> >>  		return -EFAULT;
> >>  	}
> >>-	if (vma_kernel_pagesize(vma) == PMD_SIZE && !logging_active) {
> >>-		hugetlb = true;
> >>+	vma_pagesize = vma_kernel_pagesize(vma);
> >>+	if (vma_pagesize == PMD_SIZE && !logging_active) {
> >>  		gfn = (fault_ipa & PMD_MASK) >> PAGE_SHIFT;
> >>  	} else {
> >>+		/*
> >>+		 * Fallback to PTE if it's not one of the Stage 2
> >>+		 * supported hugepage sizes
> >>+		 */
> >>+		vma_pagesize = PAGE_SIZE;
> >
> >This seems redundant and should be dropped. vma_kernel_pagesize() here either
> >calls hugetlb_vm_op_pagesize (via hugetlb_vm_ops->pagesize) or simply returns
> >PAGE_SIZE. The vm_ops path is taken if the QEMU VMA covering any given HVA is
> >backed either by HugeTLB pages or simply normal pages. vma_pagesize would
> >either has a value of PMD_SIZE (HugeTLB hstate based) or PAGE_SIZE. Hence if
> >its not PMD_SIZE it must be PAGE_SIZE which should not be assigned again.
> 
> We may want to force using the PTE mappings when logging_active (e.g, migration
> ?) to prevent keep tracking of huge pages. So the check is still valid.
> 
> 

Agreed, and let's not try additionally change the logic and flow with
this patch.

> >
> >>+
> >>  		/*
> >>  		 * Pages belonging to memslots that don't have the same
> >>  		 * alignment for userspace and IPA cannot be mapped using
> >>@@ -1573,23 +1579,33 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
> >>  	if (mmu_notifier_retry(kvm, mmu_seq))
> >>  		goto out_unlock;
> >>-	if (!hugetlb && !force_pte)
> >>-		hugetlb = transparent_hugepage_adjust(&pfn, &fault_ipa);
> >>+	if (vma_pagesize == PAGE_SIZE && !force_pte) {
> >>+		/*
> >>+		 * Only PMD_SIZE transparent hugepages(THP) are
> >>+		 * currently supported. This code will need to be
> >>+		 * updated to support other THP sizes.
> >>+		 */
> >
> >This comment belongs to transparent_hugepage_adjust() but not here.
> 
> I think this is relevant here than in thp_adjust, unless we rename
> the function below to something generic, handle_hugepage_adjust().
> 

Agreed.

> >>+		if (transparent_hugepage_adjust(&pfn, &fault_ipa))
> >>+			vma_pagesize = PMD_SIZE;
> >
> >IIUC transparent_hugepage_adjust() is only getting called here. Instead of
> >returning 'true' when it is able to detect a huge page backing and doing
> >an adjustment there after, it should rather return THP size (PMD_SIZE) to
> >accommodate probable multi size THP support in future .
> 
> That makes sense.
> 

That's fine.

> >
> >>+	}
> >>+
> >>+	if (writable)
> >>+		kvm_set_pfn_dirty(pfn);
> >>-	if (hugetlb) {
> >>+	if (fault_status != FSC_PERM)
> >>+		clean_dcache_guest_page(pfn, vma_pagesize);
> >>+
> >>+	if (exec_fault)
> >>+		invalidate_icache_guest_page(pfn, vma_pagesize);
> >>+
> >>+	if (vma_pagesize == PMD_SIZE) {
> >>  		pmd_t new_pmd = pfn_pmd(pfn, mem_type);
> >>  		new_pmd = pmd_mkhuge(new_pmd);
> >>-		if (writable) {
> >>+		if (writable)
> >>  			new_pmd = kvm_s2pmd_mkwrite(new_pmd);
> >>-			kvm_set_pfn_dirty(pfn);
> >>-		}
> >>-
> >>-		if (fault_status != FSC_PERM)
> >>-			clean_dcache_guest_page(pfn, PMD_SIZE);
> >>  		if (exec_fault) {
> >>  			new_pmd = kvm_s2pmd_mkexec(new_pmd);
> >>-			invalidate_icache_guest_page(pfn, PMD_SIZE);
> >>  		} else if (fault_status == FSC_PERM) {
> >>  			/* Preserve execute if XN was already cleared */
> >>  			if (stage2_is_exec(kvm, fault_ipa))
> >>@@ -1602,16 +1618,11 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
> >>  		if (writable) {
> >>  			new_pte = kvm_s2pte_mkwrite(new_pte);
> >>-			kvm_set_pfn_dirty(pfn);
> >>  			mark_page_dirty(kvm, gfn);
> >>  		}
> >>-		if (fault_status != FSC_PERM)
> >>-			clean_dcache_guest_page(pfn, PAGE_SIZE);
> >>-
> >>  		if (exec_fault) {
> >>  			new_pte = kvm_s2pte_mkexec(new_pte);
> >>-			invalidate_icache_guest_page(pfn, PAGE_SIZE);
> >>  		} else if (fault_status == FSC_PERM) {
> >>  			/* Preserve execute if XN was already cleared */
> >>  			if (stage2_is_exec(kvm, fault_ipa))
> >>
> >
> >kvm_set_pfn_dirty, clean_dcache_guest_page, invalidate_icache_guest_page
> >can all be safely moved before setting the page table entries either as
> >PMD or PTE.
> 
> I think this is what we do currently. So I assume this is fine.
> 
Agreed, I don't understand the comment raised by Anshuman here.


Thanks,

    Christoffer
