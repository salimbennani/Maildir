Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:56:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2318458014B
	for <like.xu@linux.intel.com>; Mon,  3 Dec 2018 10:02:23 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 10:02:22 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A0fSItBEValF6RE6V4DpGt51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yoM2wAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfDI2y?=
 =?us-ascii?q?bIkAD+QOMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0KEmyuQsCx3K0BA8E94Stn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTGyi/MbvxL0jnh9ofIcwwhoPCRVr93dMrR01cgFwLZjlSR?=
 =?us-ascii?q?soHlJS2a2fkNs2eB8+psT/6gi2kiqwxopDWk28kiio7Mho0Py1DE8z10wIkzJd?=
 =?us-ascii?q?2lUkJ7ZsSkEJRWuiqHNIV2WtsvT390tCs50LEKpIO3cSsQxJg5yRPSa+aLf5WK?=
 =?us-ascii?q?7x77SuqdPTN1iGh4dL+xmRq+61Wsx+7yW8WuzlpHrSxImcTWuH8XzRzc8M2HR+?=
 =?us-ascii?q?N9/ki/3TaP0Bje6uVFIUAviarbMIQtwrE2lpoOq0jDGTX2mErugK+XcEUr5PSo?=
 =?us-ascii?q?5vz5brn6pZKQLZJ4hhz9P6g0hMCyD+Q1PhITU2WZ4ei80afs/Uz9QLVElP02la?=
 =?us-ascii?q?zZvYjDJcsFo665HhZZ3Zs95BahETim1M0UkmIALFJYfhKIk5bmO0rJLPD8DPe/?=
 =?us-ascii?q?gEqjnC1kxvDbJrDhBpTNLn7ekLbuZ7p96khcyBYtwtBb/Z5bFrYBIPfoV0/3s9?=
 =?us-ascii?q?zYCBA5Mwqpw+r9D9V9zIweVXqVAqCFKKPSrUOI5uU3LumIZY8VuyjyJ+Iq5v7z?=
 =?us-ascii?q?lnI5nV4dfa+03ZoYcny4H/JmI1mHbnromNsODWAKvg9tBNHsk0CIBD5Pe26pDe?=
 =?us-ascii?q?V74jAgFJngC4DFSYawxrub02C+F5xSY2lATVeUDXbvcZ7DQvoJdWeeL9Fslm85?=
 =?us-ascii?q?U6O8Qdok3BCqqAio0rdiM6/Y9zMVsdf52cFo6vbPvRc18zNyEoKayW7aVHx+nG?=
 =?us-ascii?q?4DW2or2rtiq1d20FaJ3PtEhKlBGNlOovlNVQw5HZjbyeN8Fpb1QA2SUM2OTQOD?=
 =?us-ascii?q?S8XuOzwwUsB5l9oUbkdhCf24gxzD1jbsCLgQwe/YTKco+77RiiCib/12zGzLge?=
 =?us-ascii?q?x41wEr?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BUAgBQbgVchxHrdtBjHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExKoEPgSmMcIstmWmBYhEYBw2BS4Y+IjgSAQMBAQEBAQECARMBAQEKCwkIGw4?=
 =?us-ascii?q?jDII2BQIDGgEGglwDAwECQwopAwMBAgYBAUgIAwFTGQUEgk1LAYIBAQSnVoVAh?=
 =?us-ascii?q?GSMHBeBQD+FboFICwSBJIYWAokeCIdUjwBGCYoyhn8LGIFbiAA2hxWQRIgpgV2?=
 =?us-ascii?q?Bdk0jFYMnCYIbGn8BCIdWhUBAMYEHHIhEgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BUAgBQbgVchxHrdtBjHQEBBQEHBQGBZYExKoEPgSmMcIs?=
 =?us-ascii?q?tmWmBYhEYBw2BS4Y+IjgSAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGg?=
 =?us-ascii?q?lwDAwECQwopAwMBAgYBAUgIAwFTGQUEgk1LAYIBAQSnVoVAhGSMHBeBQD+FboF?=
 =?us-ascii?q?ICwSBJIYWAokeCIdUjwBGCYoyhn8LGIFbiAA2hxWQRIgpgV2Bdk0jFYMnCYIbG?=
 =?us-ascii?q?n8BCIdWhUBAMYEHHIhEgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="53626257"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 03 Dec 2018 10:02:21 -0800
Received: from localhost ([::1]:51290 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTsY0-0000Ee-Ju
	for like.xu@linux.intel.com; Mon, 03 Dec 2018 13:02:20 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45092)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gTsOg-0006RW-IN
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 12:52:43 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mreitz@redhat.com>) id 1gTsOf-0007WI-16
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 12:52:42 -0500
Received: from mx1.redhat.com ([209.132.183.28]:39466)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <mreitz@redhat.com>)
	id 1gTsOZ-0007Ru-Rk; Mon, 03 Dec 2018 12:52:36 -0500
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
	[10.5.11.22])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id D5EA030820C3;
	Mon,  3 Dec 2018 17:52:34 +0000 (UTC)
Received: from localhost (unknown [10.36.118.45])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 27119103BAB6;
	Mon,  3 Dec 2018 17:52:30 +0000 (UTC)
From: Max Reitz <mreitz@redhat.com>
To: qemu-block@nongnu.org
Date: Mon,  3 Dec 2018 18:52:11 +0100
Message-Id: <20181203175211.8230-7-mreitz@redhat.com>
In-Reply-To: <20181203175211.8230-1-mreitz@redhat.com>
References: <20181203175211.8230-1-mreitz@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.47]);
	Mon, 03 Dec 2018 17:52:34 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH for-next 6/6] iotests: Test qemu-img convert
 --salvage
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Markus Armbruster <armbru@redhat.com>,
	qemu-devel@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

This test converts a simple image to another, but blkdebug injects
block_status and read faults at some offsets.  The resulting image
should be the same as the input image, except that sectors that could
not be read have to be 0.

Signed-off-by: Max Reitz <mreitz@redhat.com>
---
 tests/qemu-iotests/236     | 164 +++++++++++++++++++++++++++++++++++++
 tests/qemu-iotests/236.out |  43 ++++++++++
 tests/qemu-iotests/group   |   1 +
 3 files changed, 208 insertions(+)
 create mode 100755 tests/qemu-iotests/236
 create mode 100644 tests/qemu-iotests/236.out

diff --git a/tests/qemu-iotests/236 b/tests/qemu-iotests/236
new file mode 100755
index 0000000000..02b032ebb5
--- /dev/null
+++ b/tests/qemu-iotests/236
@@ -0,0 +1,164 @@
+#!/bin/bash
+#
+# Test qemu-img convert --salvage
+#
+# Copyright (C) 2018 Red Hat, Inc.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+# creator
+owner=3Dmreitz@redhat.com
+
+seq=3D$(basename $0)
+echo "QA output created by $seq"
+
+here=3D$PWD
+status=3D1	# failure is the default!
+
+_cleanup()
+{
+    _cleanup_test_img
+}
+trap "_cleanup; exit \$status" 0 1 2 3 15
+
+# get standard environment, filters and checks
+. ./common.rc
+. ./common.filter
+. ./common.qemu
+
+_supported_fmt generic
+_supported_proto file
+_supported_os Linux
+
+
+TEST_IMG=3D"$TEST_IMG.orig" _make_test_img 64M
+
+$QEMU_IO -c 'write -P 42 0 64M' "$TEST_IMG.orig" | _filter_qemu_io
+
+
+sector_size=3D512
+
+# Offsets on which to fail block-status.  Keep in ascending order so
+# the indexing done by _filter_offsets will appear in ascending order
+# in the output as well.
+status_fail_offsets=3D"$((16 * 1024 * 1024 + 8192))
+                     $((33 * 1024 * 1024 + 512))"
+
+# Offsets on which to fail reads.  Keep in ascending order for the
+# same reason.
+# Element 1 is shared with $status_fail_offsets on purpose.
+# Elements 2 and later test what happens when a continuous range of
+# sectors is inaccessible.
+read_fail_offsets=3D"$((32 * 1024 * 1024 - 65536))
+                   $((33 * 1024 * 1024 + 512))
+                   $(seq $((34 * 1024 * 1024)) $sector_size \
+                         $((34 * 1024 * 1024 + 4096 - $sector_size)))"
+
+
+# blkdebug must be above the format layer so it can intercept all
+# block-status events
+source_img=3D"json:{'driver': 'blkdebug',
+                  'image': {
+                      'driver': '$IMGFMT',
+                      'file': {
+                          'driver': 'file',
+                          'filename': '$TEST_IMG.orig'
+                      }
+                  },
+                  'inject-error': ["
+
+for ofs in $status_fail_offsets
+do
+    source_img+=3D"{ 'event': 'none',
+                   'iotype': 'block-status',
+                   'errno': 5,
+                   'sector': $((ofs / sector_size)) },"
+done
+
+for ofs in $read_fail_offsets
+do
+    source_img+=3D"{ 'event': 'none',
+                   'iotype': 'read',
+                   'errno': 5,
+                   'sector': $((ofs / sector_size)) },"
+done
+
+# Remove the trailing comma and terminate @inject-error and json:{}
+source_img=3D"${source_img%,} ] }"
+
+
+echo
+
+
+_filter_offsets() {
+    filters=3D
+
+    index=3D0
+    for ofs in $2
+    do
+        filters+=3D" -e s/$(printf "$1" $ofs)/status_fail_offset_$index/=
"
+        index=3D$((index + 1))
+    done
+
+    index=3D0
+    for ofs in $3
+    do
+        filters+=3D" -e s/$(printf "$1" $ofs)/read_fail_offset_$index/"
+        index=3D$((index + 1))
+    done
+
+    sed $filters
+}
+
+# While determining the number of allocated sectors in the input
+# image, we should see one block status warning per element of
+# $status_fail_offsets.
+#
+# Then, the image is read.  Since the block status is queried in
+# basically the same way, the same warnings as in the previous step
+# should reappear.  Interleaved with those we should see a read
+# warning per element of $read_fail_offsets.
+# Note that $read_fail_offsets and $status_fail_offsets share an
+# element (read_fail_offset_1 =3D=3D status_fail_offset_1), so
+# "status_fail_offset_1" in the output is the same as
+# "read_fail_offset_1".
+$QEMU_IMG convert --salvage "$source_img" "$TEST_IMG" 2>&1 \
+    | sed -e 's/json:{.*}/SOURCE_IMG/' \
+    | _filter_offsets '%#x' "$status_fail_offsets" "$read_fail_offsets"
+
+echo
+
+# The offsets where the block status could not be determined should
+# have been treated as containing data and thus should be correct in
+# the output image.
+# The offsets where reading failed altogether should be 0.  Make them
+# 0 in the input image, too, so we can compare both images.
+for ofs in $read_fail_offsets
+do
+    $QEMU_IO -c "write -z $ofs $sector_size" "$TEST_IMG.orig" \
+        | _filter_qemu_io \
+        | _filter_offsets '%i' '' "$read_fail_offsets"
+done
+
+echo
+
+# These should be equal now.
+$QEMU_IMG compare "$TEST_IMG.orig" "$TEST_IMG"
+
+
+# success, all done
+echo "*** done"
+rm -f $seq.full
+status=3D0
diff --git a/tests/qemu-iotests/236.out b/tests/qemu-iotests/236.out
new file mode 100644
index 0000000000..df240685ab
--- /dev/null
+++ b/tests/qemu-iotests/236.out
@@ -0,0 +1,43 @@
+QA output created by 236
+Formatting 'TEST_DIR/t.IMGFMT.orig', fmt=3DIMGFMT size=3D67108864
+wrote 67108864/67108864 bytes at offset 0
+64 MiB, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+
+qemu-img: warning: Failed to inquire block status of SOURCE_IMG at offse=
t status_fail_offset_0: Input/output error
+qemu-img: warning: Failed to inquire block status of SOURCE_IMG at offse=
t status_fail_offset_1: Input/output error
+qemu-img: warning: Failed to inquire block status of SOURCE_IMG at offse=
t status_fail_offset_0: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_0 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to inquire block status of SOURCE_IMG at offse=
t status_fail_offset_1: Input/output error
+qemu-img: warning: Failed to read offset status_fail_offset_1 from SOURC=
E_IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_2 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_3 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_4 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_5 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_6 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_7 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_8 from SOURCE_=
IMG: Input/output error
+qemu-img: warning: Failed to read offset read_fail_offset_9 from SOURCE_=
IMG: Input/output error
+
+wrote 512/512 bytes at offset read_fail_offset_0
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_1
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_2
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_3
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_4
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_5
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_6
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_7
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_8
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+wrote 512/512 bytes at offset read_fail_offset_9
+512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)
+
+Images are identical.
+*** done
diff --git a/tests/qemu-iotests/group b/tests/qemu-iotests/group
index 61a6d98ebd..f6b245917a 100644
--- a/tests/qemu-iotests/group
+++ b/tests/qemu-iotests/group
@@ -233,3 +233,4 @@
 233 auto quick
 234 auto quick migration
 235 auto quick
+236 auto quick
--=20
2.19.2


