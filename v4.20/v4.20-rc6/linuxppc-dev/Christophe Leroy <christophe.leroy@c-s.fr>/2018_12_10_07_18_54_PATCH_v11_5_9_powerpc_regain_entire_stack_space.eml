Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:14:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A80BD5804A8;
	Sun,  9 Dec 2018 23:22:32 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 09 Dec 2018 23:22:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A9uwmthw3pmAycTnXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e8eL/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWlPUcRfVyJBH42y?=
 =?us-ascii?q?cYUBD/EZPetatITxu0cCoAGiCQWwGO/j1jlFjWL2060g1OQhFBnL0RIgH9IUsX?=
 =?us-ascii?q?TUt8n1NKAKUeC10qbD0DPNYO1M2Tf66InDbxcsru2MXbJqcMrR0lUvFwTdjlWQ?=
 =?us-ascii?q?t4PpJTeV2foXs2ic7+ttTv6gh3c8qw1rrDiv3N4hh4/UjYwbzVDE8D92wIczJd?=
 =?us-ascii?q?CgRkN3f8SoEIBLuCycKoB4QdsiTnl2tComzrAKo4O3cSYUxJg92hLSaOCLf5KJ?=
 =?us-ascii?q?7x/hTOqcJTl1iGh4dL+9nRq+70atx+zmWsS6zFpHqDdOnMPWuXAXzRPT79CKSv?=
 =?us-ascii?q?tj8Uel3jaCzx7T6u5aLkAuj6bbKIAuwqQ2lpUNtUTPBCj2mF/5jKOOd0Uk/Pan?=
 =?us-ascii?q?6/j/b7n4upORM5V4hhzwP6gwgMCzHOc1PhQUU2Wa++mwzLjj8lf4QLVOgP02iK?=
 =?us-ascii?q?7ZsJXCKMQfp665BRJV04k65xa8ETimytIYkmcDLF5cfxKGgY7pNE/UIP3jE/e/?=
 =?us-ascii?q?jEqjkC1xy/DFILLhGJPNIWbHkLv7erZ98UFcxBIpzd9D/5JUFq0BIPXrV0/1td?=
 =?us-ascii?q?zYDQE2Pxa7wub6E9h90oIeWWSSAq6WKq/SsFmI5v4xLOmIfoMapDH9K/097f70?=
 =?us-ascii?q?kXA5gUMdfbWu3ZYPaHC3BPVmI1mDbnrrmNsBEXoKsRA4TOzlk1CCVT9TZ3CvX6?=
 =?us-ascii?q?Mz/D07CYSmDZvdSYCpmrCOwCC7HphObGBcFl+MCWvod5mDW/oUaiKSJdFuniYH?=
 =?us-ascii?q?VbimTY8h0xauuRT+y7pmKOrU5yIZuYji1Nhz++3cixUy+SZoAMSa1mGHV3t0kX?=
 =?us-ascii?q?8QRz8qwKB/plRwxU2Y0ah4hPxYFsZf5+lTXQc4LpPcy+16C9bvWgPOZNuJSVCm?=
 =?us-ascii?q?Qsm4DjE1VN4+39gOY0NlEdW4kh/DxzaqA6MSl7GTB5w76KTc02L1J8Z80XnG0q?=
 =?us-ascii?q?YhgkIiQstOM22mm6F++xLSB47Pj0WWiaKqeb4A0y7K8WeJ1XCOs11AUA5sTaXF?=
 =?us-ascii?q?WmgSaVbMotTn+EzOVb+uBq4hMgta18GCLKxGatnqjVVDQPfuI9DeY2O3m2etCh?=
 =?us-ascii?q?eE3LKMbIz2e2oD2CXRElQLkwcW/XyeLwgxGj+ho37CDDxpDV/gflnj8fdgp3+h?=
 =?us-ascii?q?Tk871QeKb1Z/2Lqz4RMVgf2cS/UO3rMLoishqjN0HEqj0NLSEdaPuw1hfKBEa9?=
 =?us-ascii?q?Mn/FhHzX7ZtxB6PpG4M6Bih1secwNrv0Pu1xR7EJlAndItrHMwyApyKKSY0Fxa?=
 =?us-ascii?q?ejOc3JDwPKDXK2bo8BCuba7Wxk/R0NKM9qgT7/Q4rk3pvBu1GUo673Vnz95V3m?=
 =?us-ascii?q?OG6ZXOEgUTXoz+U0Yt+xdhurHVfzMy54XX1X1rL6m5qTvC29MvBOs4xResZdZf?=
 =?us-ascii?q?MKWYFADsF80WHdShKOsvm1KxdBILIPhS9LIoP8Ohb/aH2LOrMPx8kz68jGVH4J?=
 =?us-ascii?q?py0kSD9ydnTu7I3pAFw+yX3wedVjf8ikuhvd7zmYxeeT4SGW+/wzD+BIFNfq1y?=
 =?us-ascii?q?YZoLCWC2Ls2tx9Vxm4TiW2RF+16kHV8G3tGmeQCTb1DkwQJfz0AXrmG5liuiyD?=
 =?us-ascii?q?x0lSokrq6e3CzI3uTjewALOm9NRGl+k1jsJZK4gMwdXEitdwIpjgeq5V7mx6hH?=
 =?us-ascii?q?o6RyN2nSQUZScyn2NW1iSbawtryZbs5L6ZMotzhXUeumbVCbTL79vwUV0yf5E2?=
 =?us-ascii?q?RCwzA7cimguo/lkBxilGKdMHFzoWLbec5q3xff59/cRflL0jodXiZ4ijrXBlm6?=
 =?us-ascii?q?P9a3+9WZjJPDsuG4V2K8WZxfayjrzYWctCSl4W1mGwGwn/e2mtf/Cwg1zTf718?=
 =?us-ascii?q?V2VSXPtBv9YpPk16OgPeJlf0loAkTx6857GoF4j4sxi4sc2XkchpWJ43UHlX3/?=
 =?us-ascii?q?Pslc2aL7dHANXyIEw8bJ4Aj5301uNnGJyJj4VnmHwsthesO1YmUZ2i8m68BKCa?=
 =?us-ascii?q?GU7KFLnCdvo1q4qx7RbuZ5njsH1fQu73saifkTuAUx1iWdHqwSHU5AMCzplhSI?=
 =?us-ascii?q?7MqxoL9ZZWmxariwyFRxncq6A76cuAFcV230epMjHS9288V+P0jA0Hz16oH4Zt?=
 =?us-ascii?q?bQacgfuQGTkxfFl+JVMo4+luIWhSp7PmLwpWEly+k+jRB03JC1po6HK3h2/KKi?=
 =?us-ascii?q?Ax5VLTn1Z8IV+jHwgqdShMeW34azHpp/HjUHRofnTfWtEDgKr/ToKx6OECEgqn?=
 =?us-ascii?q?ecAbfQBhWQ6EBir3LSCZyrM2yXKWIdzdVjQhmdOUNejBoVXDU8gp42CASqyNb9?=
 =?us-ascii?q?f0d+4zAb/kT4pQdUyuJ0Kxn/VX/SpAWyZTcxVpefNwBa7h1Y60fWLMye7f9zHy?=
 =?us-ascii?q?dC8Z26twGNLm2bZwJVDWAGQECEBlbjPqWw6tnE6eSXGu2+L/7Wa7WUteNeT+uI?=
 =?us-ascii?q?xY6o0oZ+/zeMMdiPPmB/D/Ih3EpPR2t5G8PfmzUAUCEXkyPNb8iGpBaz4CF3r8?=
 =?us-ascii?q?a/8Oj1VwLr/4eAF7xSMdB38RCsnaiDL/KQhDp+KTtA1pMD237IyLsc3F4TkS1u?=
 =?us-ascii?q?dCOtEbMPtSHTVqLQh7RXAgUfayNyMstI8q090hNMOc7dltP6yLp4guQpBFdCUF?=
 =?us-ascii?q?zrgtupatASI2GhKFPHA16GO66bJTLQ2cH4f6O9RadUjOVVrBCwvTebE0n+PjWM?=
 =?us-ascii?q?jTXpVhavMf1SgyGfJhBRpIa9chN1A2j5UN3mcgG7MMNwjTAu3b00h3bKOXQAPj?=
 =?us-ascii?q?Rmb0xNrqOf7SVDj/V7GmxB6GdlLOaelyaY6enYNogZsf9xDitokOJa5Wwwy6FJ?=
 =?us-ascii?q?4yFcWPx1hCzSo8Zuol68lOmPzztnUBxWpTdKhIKEp0NiOarC+5lEWHbE+g8N7G?=
 =?us-ascii?q?qKBxQLodtlFsPgu6RKxtfTk6LzLWQKz9WB18YaBcHRKcTPEHc7KxfvAzXUCQoJ?=
 =?us-ascii?q?UXb/P2zZh2ReneuU+3nTpYIzsZjtnpVITaVUAhh9LvoHDgxAFdcBLY1tVyhsxa?=
 =?us-ascii?q?aSkcoV/lKlpRzbTYNdpJ+RErq3AP7vITudxZRAYxYSxLr+ZdAWLoDT1khmZ0N/?=
 =?us-ascii?q?lYKMGkaWVM0b8QN7aQphi0VX8WNiSXUz1grBZxmq8TdHHv6unwUqjRN+bKIp+S?=
 =?us-ascii?q?3r8n88Y0GMqjFmwxp5osnsnT3EKG25F6y3R4wDTnOs70U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DVAQD7Eg5ch0O0hNFjHgEGBwaBZYNsJ?=
 =?us-ascii?q?4xyiy6BaDmZMykTAYdkIjgSAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmIDAwE?=
 =?us-ascii?q?CJFIGCQEBGDgDKSsGARIFgxyCAgQBpWozhUGEXowhgVc/gREzhzqGAQKJFSAEl?=
 =?us-ascii?q?zwHAoEPgRIEj0KRPYkikTQ3gXdNJ4M4gicXjh0/AQExgQUBAYl9ASQHgiABAQ?=
X-IPAS-Result: =?us-ascii?q?A0DVAQD7Eg5ch0O0hNFjHgEGBwaBZYNsJ4xyiy6BaDmZMyk?=
 =?us-ascii?q?TAYdkIjgSAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmIDAwECJFIGCQEBGDgDK?=
 =?us-ascii?q?SsGARIFgxyCAgQBpWozhUGEXowhgVc/gREzhzqGAQKJFSAElzwHAoEPgRIEj0K?=
 =?us-ascii?q?RPYkikTQ3gXdNJ4M4gicXjh0/AQExgQUBAYl9ASQHgiABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,337,1539673200"; 
   d="scan'208";a="44258721"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 09 Dec 2018 23:22:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726761AbeLJHT0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 10 Dec 2018 02:19:26 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:26096 "EHLO pegase1.c-s.fr"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726651AbeLJHS5 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 10 Dec 2018 02:18:57 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
        by localhost (Postfix) with ESMTP id 43CvZQ48Rlz9v6Kp;
        Mon, 10 Dec 2018 08:18:54 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
        by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new, port 10024)
        with ESMTP id G7WNLj9AxEvY; Mon, 10 Dec 2018 08:18:54 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
        by pegase1.c-s.fr (Postfix) with ESMTP id 43CvZQ3BxHz9v6Kg;
        Mon, 10 Dec 2018 08:18:54 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id D34738B79A;
        Mon, 10 Dec 2018 08:18:54 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
        by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new, port 10023)
        with ESMTP id mAcBdxQdCL0r; Mon, 10 Dec 2018 08:18:54 +0100 (CET)
Received: from po14163vm.idsi0.si.c-s.fr (po15451.idsi0.si.c-s.fr [172.25.231.2])
        by messagerie.si.c-s.fr (Postfix) with ESMTP id AB6298B74C;
        Mon, 10 Dec 2018 08:18:54 +0100 (CET)
Received: by po14163vm.idsi0.si.c-s.fr (Postfix, from userid 0)
        id 97B59716E9; Mon, 10 Dec 2018 07:18:54 +0000 (UTC)
Message-Id: <aa71519136be89840d3e0565b872b0e78f779a6d.1544426182.git.christophe.leroy@c-s.fr>
In-Reply-To: <cover.1544426182.git.christophe.leroy@c-s.fr>
References: <cover.1544426182.git.christophe.leroy@c-s.fr>
From: Christophe Leroy <christophe.leroy@c-s.fr>
Subject: [PATCH v11 5/9] powerpc: regain entire stack space
To: Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Michael Ellerman <mpe@ellerman.id.au>
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Mon, 10 Dec 2018 07:18:54 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

thread_info is not anymore in the stack, so the entire stack
can now be used.

There is also no risk anymore of corrupting task_cpu(p) with a
stack overflow so the patch removes the test.

When doing this, an explicit test for NULL stack pointer is
needed in validate_sp() as it is not anymore implicitely covered
by the sizeof(thread_info) gap.

In the meantime, with the previous patch all pointers to the stacks
are not anymore pointers to thread_info so this patch changes them
to void*

Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
---
 arch/powerpc/include/asm/irq.h       | 10 +++++-----
 arch/powerpc/include/asm/processor.h |  3 +--
 arch/powerpc/kernel/asm-offsets.c    |  1 -
 arch/powerpc/kernel/entry_32.S       | 14 ++++----------
 arch/powerpc/kernel/irq.c            | 19 +++++++++----------
 arch/powerpc/kernel/misc_32.S        |  6 ++----
 arch/powerpc/kernel/process.c        | 32 +++++++++++++-------------------
 arch/powerpc/kernel/setup_64.c       |  8 ++++----
 8 files changed, 38 insertions(+), 55 deletions(-)

diff --git a/arch/powerpc/include/asm/irq.h b/arch/powerpc/include/asm/irq.h
index 2efbae8d93be..966ddd4d2414 100644
--- a/arch/powerpc/include/asm/irq.h
+++ b/arch/powerpc/include/asm/irq.h
@@ -48,9 +48,9 @@ struct pt_regs;
  * Per-cpu stacks for handling critical, debug and machine check
  * level interrupts.
  */
-extern struct thread_info *critirq_ctx[NR_CPUS];
-extern struct thread_info *dbgirq_ctx[NR_CPUS];
-extern struct thread_info *mcheckirq_ctx[NR_CPUS];
+extern void *critirq_ctx[NR_CPUS];
+extern void *dbgirq_ctx[NR_CPUS];
+extern void *mcheckirq_ctx[NR_CPUS];
 extern void exc_lvl_ctx_init(void);
 #else
 #define exc_lvl_ctx_init()
@@ -59,8 +59,8 @@ extern void exc_lvl_ctx_init(void);
 /*
  * Per-cpu stacks for handling hard and soft interrupts.
  */
-extern struct thread_info *hardirq_ctx[NR_CPUS];
-extern struct thread_info *softirq_ctx[NR_CPUS];
+extern void *hardirq_ctx[NR_CPUS];
+extern void *softirq_ctx[NR_CPUS];
 
 extern void irq_ctx_init(void);
 void call_do_softirq(void *sp);
diff --git a/arch/powerpc/include/asm/processor.h b/arch/powerpc/include/asm/processor.h
index 15acb282a876..8179b64871ed 100644
--- a/arch/powerpc/include/asm/processor.h
+++ b/arch/powerpc/include/asm/processor.h
@@ -325,8 +325,7 @@ struct thread_struct {
 #define ARCH_MIN_TASKALIGN 16
 
 #define INIT_SP		(sizeof(init_stack) + (unsigned long) &init_stack)
-#define INIT_SP_LIMIT \
-	(_ALIGN_UP(sizeof(struct thread_info), 16) + (unsigned long)&init_stack)
+#define INIT_SP_LIMIT	((unsigned long)&init_stack)
 
 #ifdef CONFIG_SPE
 #define SPEFSCR_INIT \
diff --git a/arch/powerpc/kernel/asm-offsets.c b/arch/powerpc/kernel/asm-offsets.c
index 1fb52206c106..94ac190a0b16 100644
--- a/arch/powerpc/kernel/asm-offsets.c
+++ b/arch/powerpc/kernel/asm-offsets.c
@@ -92,7 +92,6 @@ int main(void)
 	DEFINE(SIGSEGV, SIGSEGV);
 	DEFINE(NMI_MASK, NMI_MASK);
 #else
-	DEFINE(THREAD_INFO_GAP, _ALIGN_UP(sizeof(struct thread_info), 16));
 	OFFSET(KSP_LIMIT, thread_struct, ksp_limit);
 #endif /* CONFIG_PPC64 */
 	OFFSET(TASK_STACK, task_struct, stack);
diff --git a/arch/powerpc/kernel/entry_32.S b/arch/powerpc/kernel/entry_32.S
index 1f5a76283bd4..b547bd4168d8 100644
--- a/arch/powerpc/kernel/entry_32.S
+++ b/arch/powerpc/kernel/entry_32.S
@@ -97,14 +97,11 @@ crit_transfer_to_handler:
 	mfspr	r0,SPRN_SRR1
 	stw	r0,_SRR1(r11)
 
-	/* set the stack limit to the current stack
-	 * and set the limit to protect the thread_info
-	 * struct
-	 */
+	/* set the stack limit to the current stack */
 	mfspr	r8,SPRN_SPRG_THREAD
 	lwz	r0,KSP_LIMIT(r8)
 	stw	r0,SAVED_KSP_LIMIT(r11)
-	rlwimi	r0,r1,0,0,(31-THREAD_SHIFT)
+	rlwinm	r0,r1,0,0,(31 - THREAD_SHIFT)
 	stw	r0,KSP_LIMIT(r8)
 	/* fall through */
 #endif
@@ -121,14 +118,11 @@ crit_transfer_to_handler:
 	mfspr	r0,SPRN_SRR1
 	stw	r0,crit_srr1@l(0)
 
-	/* set the stack limit to the current stack
-	 * and set the limit to protect the thread_info
-	 * struct
-	 */
+	/* set the stack limit to the current stack */
 	mfspr	r8,SPRN_SPRG_THREAD
 	lwz	r0,KSP_LIMIT(r8)
 	stw	r0,saved_ksp_limit@l(0)
-	rlwimi	r0,r1,0,0,(31-THREAD_SHIFT)
+	rlwinm	r0,r1,0,0,(31 - THREAD_SHIFT)
 	stw	r0,KSP_LIMIT(r8)
 	/* fall through */
 #endif
diff --git a/arch/powerpc/kernel/irq.c b/arch/powerpc/kernel/irq.c
index 3fdb6b6973cf..62cfccf4af89 100644
--- a/arch/powerpc/kernel/irq.c
+++ b/arch/powerpc/kernel/irq.c
@@ -618,9 +618,8 @@ static inline void check_stack_overflow(void)
 	sp = current_stack_pointer() & (THREAD_SIZE-1);
 
 	/* check for stack overflow: is there less than 2KB free? */
-	if (unlikely(sp < (sizeof(struct thread_info) + 2048))) {
-		pr_err("do_IRQ: stack overflow: %ld\n",
-			sp - sizeof(struct thread_info));
+	if (unlikely(sp < 2048)) {
+		pr_err("do_IRQ: stack overflow: %ld\n", sp);
 		dump_stack();
 	}
 #endif
@@ -660,7 +659,7 @@ void __do_irq(struct pt_regs *regs)
 void do_IRQ(struct pt_regs *regs)
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
-	struct thread_info *curtp, *irqtp, *sirqtp;
+	void *curtp, *irqtp, *sirqtp;
 
 	/* Switch to the irq stack to handle this */
 	curtp = (void *)(current_stack_pointer() & ~(THREAD_SIZE - 1));
@@ -690,9 +689,9 @@ void __init init_IRQ(void)
 }
 
 #if defined(CONFIG_BOOKE) || defined(CONFIG_40x)
-struct thread_info   *critirq_ctx[NR_CPUS] __read_mostly;
-struct thread_info    *dbgirq_ctx[NR_CPUS] __read_mostly;
-struct thread_info *mcheckirq_ctx[NR_CPUS] __read_mostly;
+void   *critirq_ctx[NR_CPUS] __read_mostly;
+void    *dbgirq_ctx[NR_CPUS] __read_mostly;
+void *mcheckirq_ctx[NR_CPUS] __read_mostly;
 
 void exc_lvl_ctx_init(void)
 {
@@ -718,8 +717,8 @@ void exc_lvl_ctx_init(void)
 }
 #endif
 
-struct thread_info *softirq_ctx[NR_CPUS] __read_mostly;
-struct thread_info *hardirq_ctx[NR_CPUS] __read_mostly;
+void *softirq_ctx[NR_CPUS] __read_mostly;
+void *hardirq_ctx[NR_CPUS] __read_mostly;
 
 void irq_ctx_init(void)
 {
@@ -733,7 +732,7 @@ void irq_ctx_init(void)
 
 void do_softirq_own_stack(void)
 {
-	struct thread_info *irqtp;
+	void *irqtp;
 
 	irqtp = softirq_ctx[smp_processor_id()];
 	call_do_softirq(irqtp);
diff --git a/arch/powerpc/kernel/misc_32.S b/arch/powerpc/kernel/misc_32.S
index b37b50fde828..6f6127c3760c 100644
--- a/arch/powerpc/kernel/misc_32.S
+++ b/arch/powerpc/kernel/misc_32.S
@@ -46,11 +46,10 @@ _GLOBAL(call_do_softirq)
 	mflr	r0
 	stw	r0,4(r1)
 	lwz	r10,THREAD+KSP_LIMIT(r2)
-	addi	r11,r3,THREAD_INFO_GAP
+	stw	r3, THREAD+KSP_LIMIT(r2)
 	stwu	r1,THREAD_SIZE-STACK_FRAME_OVERHEAD(r3)
 	mr	r1,r3
 	stw	r10,8(r1)
-	stw	r11,THREAD+KSP_LIMIT(r2)
 	bl	__do_softirq
 	lwz	r10,8(r1)
 	lwz	r1,0(r1)
@@ -66,11 +65,10 @@ _GLOBAL(call_do_irq)
 	mflr	r0
 	stw	r0,4(r1)
 	lwz	r10,THREAD+KSP_LIMIT(r2)
-	addi	r11,r4,THREAD_INFO_GAP
+	stw	r4, THREAD+KSP_LIMIT(r2)
 	stwu	r1,THREAD_SIZE-STACK_FRAME_OVERHEAD(r4)
 	mr	r1,r4
 	stw	r10,8(r1)
-	stw	r11,THREAD+KSP_LIMIT(r2)
 	bl	__do_irq
 	lwz	r10,8(r1)
 	lwz	r1,0(r1)
diff --git a/arch/powerpc/kernel/process.c b/arch/powerpc/kernel/process.c
index 6a43d8395553..b9ab0467987f 100644
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@ -1691,8 +1691,7 @@ int copy_thread(unsigned long clone_flags, unsigned long usp,
 	sp -= STACK_FRAME_OVERHEAD;
 	p->thread.ksp = sp;
 #ifdef CONFIG_PPC32
-	p->thread.ksp_limit = (unsigned long)task_stack_page(p) +
-				_ALIGN_UP(sizeof(struct thread_info), 16);
+	p->thread.ksp_limit = (unsigned long)end_of_stack(p);
 #endif
 #ifdef CONFIG_HAVE_HW_BREAKPOINT
 	p->thread.ptrace_bps[0] = NULL;
@@ -1995,21 +1994,14 @@ static inline int valid_irq_stack(unsigned long sp, struct task_struct *p,
 	unsigned long stack_page;
 	unsigned long cpu = task_cpu(p);
 
-	/*
-	 * Avoid crashing if the stack has overflowed and corrupted
-	 * task_cpu(p), which is in the thread_info struct.
-	 */
-	if (cpu < NR_CPUS && cpu_possible(cpu)) {
-		stack_page = (unsigned long) hardirq_ctx[cpu];
-		if (sp >= stack_page + sizeof(struct thread_struct)
-		    && sp <= stack_page + THREAD_SIZE - nbytes)
-			return 1;
-
-		stack_page = (unsigned long) softirq_ctx[cpu];
-		if (sp >= stack_page + sizeof(struct thread_struct)
-		    && sp <= stack_page + THREAD_SIZE - nbytes)
-			return 1;
-	}
+	stack_page = (unsigned long)hardirq_ctx[cpu];
+	if (sp >= stack_page && sp <= stack_page + THREAD_SIZE - nbytes)
+		return 1;
+
+	stack_page = (unsigned long)softirq_ctx[cpu];
+	if (sp >= stack_page && sp <= stack_page + THREAD_SIZE - nbytes)
+		return 1;
+
 	return 0;
 }
 
@@ -2018,8 +2010,10 @@ int validate_sp(unsigned long sp, struct task_struct *p,
 {
 	unsigned long stack_page = (unsigned long)task_stack_page(p);
 
-	if (sp >= stack_page + sizeof(struct thread_struct)
-	    && sp <= stack_page + THREAD_SIZE - nbytes)
+	if (sp < THREAD_SIZE)
+		return 0;
+
+	if (sp >= stack_page && sp <= stack_page + THREAD_SIZE - nbytes)
 		return 1;
 
 	return valid_irq_stack(sp, p, nbytes);
diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c
index d2bc5e4dc1ba..0b227d0891ec 100644
--- a/arch/powerpc/kernel/setup_64.c
+++ b/arch/powerpc/kernel/setup_64.c
@@ -718,22 +718,22 @@ void __init emergency_stack_init(void)
 	limit = min(ppc64_bolted_size(), ppc64_rma_size);
 
 	for_each_possible_cpu(i) {
-		struct thread_info *ti;
+		void *ti;
 
 		ti = alloc_stack(limit, i);
 		memset(ti, 0, THREAD_SIZE);
-		paca_ptrs[i]->emergency_sp = (void *)ti + THREAD_SIZE;
+		paca_ptrs[i]->emergency_sp = ti + THREAD_SIZE;
 
 #ifdef CONFIG_PPC_BOOK3S_64
 		/* emergency stack for NMI exception handling. */
 		ti = alloc_stack(limit, i);
 		memset(ti, 0, THREAD_SIZE);
-		paca_ptrs[i]->nmi_emergency_sp = (void *)ti + THREAD_SIZE;
+		paca_ptrs[i]->nmi_emergency_sp = ti + THREAD_SIZE;
 
 		/* emergency stack for machine check exception handling. */
 		ti = alloc_stack(limit, i);
 		memset(ti, 0, THREAD_SIZE);
-		paca_ptrs[i]->mc_emergency_sp = (void *)ti + THREAD_SIZE;
+		paca_ptrs[i]->mc_emergency_sp = ti + THREAD_SIZE;
 #endif
 	}
 }
-- 
2.13.3

