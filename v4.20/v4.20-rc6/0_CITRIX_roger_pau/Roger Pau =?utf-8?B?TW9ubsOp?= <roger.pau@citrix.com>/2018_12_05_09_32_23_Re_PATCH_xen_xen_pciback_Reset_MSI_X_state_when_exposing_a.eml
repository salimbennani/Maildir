Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:47:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 950F25804F9;
	Wed,  5 Dec 2018 01:33:14 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga008-1.jf.intel.com with ESMTP; 05 Dec 2018 01:33:14 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AHYqdghbC/V8q6HMnpjXOaDL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm8ZB7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQctQGS2RBQMtdTjVND56m?=
 =?us-ascii?q?YIQSE+QOIfhYoJTyqlATqRezBRWgCObpxzRVhHH5wLc63vwvHw/GwgIuAtEAsH?=
 =?us-ascii?q?rbo9rpKagdU+66zLLQzTjBdP5WxSvx5ZLUfhw9u/yAQ7R9etfRx0k1EAPFi02d?=
 =?us-ascii?q?p5DiPzOayOsNqXWQ4fB6WuKylmUprAZxoj6pxsA2l4LEgZgVylfL9Spn2oY5P8?=
 =?us-ascii?q?W4R1RmYdO/DJRQtj2aN5F3QsItWW1npCE6yrgftJO9YSMExpMnxxvFZPyGdYiF?=
 =?us-ascii?q?+h3iW/iXITdgnnJlf7C/iAiu/ki80OH8UdO00FlSoitKjNbMsGoB1xvJ6siITP?=
 =?us-ascii?q?Z240Sv2S6X2gzN9u1JJVo4mbfVJpI/2LI8i5kevVjZEiL3mkj6lLKae0Yk9+Sy?=
 =?us-ascii?q?9ejqYq/qq56cOoNulA3zPaIjkdGlD+siKAgBRW2b9Py81LL9+U35R61HjuM5kq?=
 =?us-ascii?q?bHqpDWP8cbqbCjAw9TzIkj7wyzDzC80NQXhXUHLVRFdwybj4XxJV3CPPT1Ae2i?=
 =?us-ascii?q?j1mijjtn3e3KM779DpnXL3XOkq/tfbNn5E5dzAozw8pf55VRCrwZJPLzW0nxtM?=
 =?us-ascii?q?HXDxMgMAy73fznCNNj2YMaQG6PBaGYMKXMvl+S/e8vPeaMa5EPuDrnKPgq+eTu?=
 =?us-ascii?q?jXknll8ZZ6Wp2oEXaH+gEvR8P0qZeWbsgssGEWoSugo+Te/qh0OYXT9cena/RK?=
 =?us-ascii?q?Y85jA9CIK7AobPXIGtgLqd3CilGp1afHxJCleJEX3wbYWLR+8MaD6OIs9mijEE?=
 =?us-ascii?q?VaKuS4491R60sw/20bpnLvfO9S0eupLuz9x15+zVlREv+j14FcWd02eRT25qmm?=
 =?us-ascii?q?MEXSM53Kd6oUZl0FeMzbB4g+BEFdxU//5JUAA6OoDGw+x5DNDyXATBftCSRVai?=
 =?us-ascii?q?Q9WmBywxT90rz98PZUZ9B8utjhTZ0yW2BL8VkqSBBIYo/aLEw3jxO8F9xm7c26?=
 =?us-ascii?q?k6j1kmRchPOXe8hqFl9QjeHIrJk0Sfl6a3eqUQxi/N9GGfzWWQuEFUShJ/UaLA?=
 =?us-ascii?q?XXoHfEvZscz55l/eT7+pEbknMRFOyciYJqtOa93ml1NGRPj4NdTaYmKxnXqwBB?=
 =?us-ascii?q?mSyrONaorqZ3sS3CHHBEcYlAAT+G6MNRIiCSe5v2LeEDtuGErybEz27+lxtmm3?=
 =?us-ascii?q?Tk8uwAGMdE1uyby19hkRhfyfTvMT2qkJuCMgqzVyAVa80MjaC9uGpwp9YqpcZc?=
 =?us-ascii?q?kx70tA1WLcrwZ9JICvL7h+hl4CdAR6p17h2A9pCopei8QqrGklzAxpKa2G1lNM?=
 =?us-ascii?q?bDeY3ZH2Or3KJWj+5hGva6jK2l7A1Naa4LsA6PM9q1/7pgGmClIi82l709lSy3?=
 =?us-ascii?q?ac+pTKDA8VUZLtUkY29wJ2p63Abik6/YPU0XxsMa+7sjLZ39IpBe0lyguvfttF?=
 =?us-ascii?q?MaOEEhPyHNMeB8S0NOMqnF2pZAoePO9O7K40I9+md/ye1aGxOOZvgj2ngnpH4Y?=
 =?us-ascii?q?xnyU2M6jdzRfTO35YGxPGYwBCKVzP9jFenr8D2lppIZTAUHmqj1yfkAJRdabF1?=
 =?us-ascii?q?fYYOEW2uOdG4xs1ih57xXH5V7F6iB04c1MC1YxaTblz90hdW1UQYunGnnSq4zz?=
 =?us-ascii?q?ppkzAmtKaf3SrOw/j8exoDIGJEWG5ijVL0K4iuk98aRFSobxQulBa9/0b6xrRU?=
 =?us-ascii?q?q75lL2bORkdEZS72IH94Uquxr7aNf9RA6Jc1vipJSuS8ZlaaR6X5oxsb1SPjAm?=
 =?us-ascii?q?RfyCo6dzGsppX2gRh6hHiBI3Z0qXrTYdtwygvH5NzAWf5R2SILRSl5iTXNBlmw?=
 =?us-ascii?q?JcKp/ciSl5rYtuC+VmShVoBccCXxzIOAsje76nNuARGlg/+zndjnGxAg0SDnz9?=
 =?us-ascii?q?lqSTnIrBHkb4npzau6K+FnfkpvBFPm8Mp1AIJ+kogxhJEWx3cagI6Y/X4GkWf1?=
 =?us-ascii?q?LNVa1rjybHsLRT4X3dHV5BLp11FkLnKM34j5TGmSwtN9Z9mmZWMbwiI84NpNCK?=
 =?us-ascii?q?uO7rxEnC11r0G8rQLQZ/h9gzgcxeEv6H4cn+EGpg4twj+BDbAVGElSJTbsmAiQ?=
 =?us-ascii?q?79CisKVXY36icbuq20p/h9yhDKyCrRtaWHb2YZoiGS5w7sNiMFPDynHz64fkeM?=
 =?us-ascii?q?XOYtIXrBGbjxDAj+1NIpIrivUKnTZnOX76vXA9zu47jB9u0ougsImJNWpt5765?=
 =?us-ascii?q?DQBCNjLuecwT4D7tgL1ansaX2YCvA5pgFi8KXJvuUfKnDjYSue77OAaJFT02sm?=
 =?us-ascii?q?2bFqbHHQ+D9EdmqGrCE4ysN3GSPnUYzM9tRB+AJExEmwAUXS43npo4FgCs2czg?=
 =?us-ascii?q?f1115jEX5l7ktBRMzvhkOAX4UmfavA2ocCs7SICDLBpK6QFP/1zaPtaZ7uJ3Ai?=
 =?us-ascii?q?FU5JmhrBGWJ2yfZgRIC3wJW0OeC1DiOLmu+cfP8+yCCuWiKPvOZK2EqfZCWPeQ?=
 =?us-ascii?q?2ZKvzoxm8i6ONsqVO3ltEeY71lBfXXxjGMTZhjYPSzERly3XdM6WvxO8+ixxrs?=
 =?us-ascii?q?Ci//XnQgPv5Y2TC7RMNdVj4Qy5gaCGN+SIniZ2NS5Y1o8QxX/P0LUe3FkSizx3?=
 =?us-ascii?q?dzmwC7sAszTBTLnXmq9RAB4WcCdzNMpO76Ih0QhBI8/bitXp1rFmiv45EUtKVV?=
 =?us-ascii?q?vkmsuxf8wFP3m9NE/bBEaMLLmGJSPEw8D0YaO/SL1cluZUtwe3uTaUDUDjJCmD?=
 =?us-ascii?q?lyLyWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltXob2N9ixYmOtwGmxb4nphLOmJgCKZ7+jeKpYLvvpnGCV0l+RG4Hskz7tZ?=
 =?us-ascii?q?9j1LRPtwmCHKtN5hv0mmkvWTyjpgSBdOtjdLhIeRsUp+I6nW6plAVmjC/B8W6W?=
 =?us-ascii?q?WQChIKp8ZqC9H1uqBQzMTPm7z3KDtY793U+s4cDdDOKM2bKHohLQbpGDnMAQoF?=
 =?us-ascii?q?VzGrM2Tfh01bkP6K93yVroI1qp7jmJcVTr9bVVo1Fu4VC0h/HdwCJot3US0gkb?=
 =?us-ascii?q?KBkMEI4n++/1HtQ5BxvpnAHt2bBr27IzaQiv9LbhwgwLXkIIBVPYr+jR9McF5/?=
 =?us-ascii?q?yb7NFEfKFehEv2VEaQkyIQ0Z6n9xQ3d1w0v4Qgis/GUSBbi/mRtg2Vg2Wvgk6D?=
 =?us-ascii?q?q5uwR/HVHNviZl1RRplA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAADmmQdch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwEBgVmBD4ECJ4h+jyKCDRSJdIQFiVOBXywLCAGHTiI?=
 =?us-ascii?q?3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpIwxCAQwBgWYkgmMBAgMBAiQTPwYJAQEKG?=
 =?us-ascii?q?AkTAhADDBkvBg4FBYMcAYIBBAEKpX0zhC0BAwIMQoQdgQkFjB6BVz+BEIJlLoM?=
 =?us-ascii?q?eAQICgUeFcgKJKYF5hBOBTI9VBwKHA4YhhBMjCoFRiDuHGYJ+inSMaIF3Mz2DC?=
 =?us-ascii?q?AEBMoM9AQ6HUIVAPjMBgQQBAYUHhhYBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAADmmQdch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwEBgVmBD4ECJ4h+jyKCDRSJdIQFiVOBXywLCAGHTiI3Bg0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpIwxCAQwBgWYkgmMBAgMBAiQTPwYJAQEKGAkTAhADDBkvBg4?=
 =?us-ascii?q?FBYMcAYIBBAEKpX0zhC0BAwIMQoQdgQkFjB6BVz+BEIJlLoMeAQICgUeFcgKJK?=
 =?us-ascii?q?YF5hBOBTI9VBwKHA4YhhBMjCoFRiDuHGYJ+inSMaIF3Mz2DCAEBMoM9AQ6HUIV?=
 =?us-ascii?q?APjMBgQQBAYUHhhYBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="56161706"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 01:33:12 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727552AbeLEJdJ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 04:33:09 -0500
Received: from smtp.eu.citrix.com ([185.25.65.24]:9887 "EHLO
        SMTP.EU.CITRIX.COM" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726102AbeLEJdJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 04:33:09 -0500
X-IronPort-AV: E=Sophos;i="5.56,317,1539648000"; 
   d="scan'208";a="82813116"
Date: Wed, 5 Dec 2018 10:32:23 +0100
From: Roger Pau =?utf-8?B?TW9ubsOp?= <roger.pau@citrix.com>
To: Chao Gao <chao.gao@intel.com>
CC: <linux-kernel@vger.kernel.org>,
        Boris Ostrovsky <boris.ostrovsky@oracle.com>,
        Juergen Gross <jgross@suse.com>,
        Stefano Stabellini <sstabellini@kernel.org>,
        Jia-Ju Bai <baijiaju1990@gmail.com>,
        <xen-devel@lists.xenproject.org>, Jan Beulich <jbeulich@suse.com>
Subject: Re: [PATCH] xen: xen-pciback: Reset MSI-X state when exposing a
 device
Message-ID: <20181205093223.dncg4nq4dh6xmrhk@mac>
References: <1543976357-1053-1-git-send-email-chao.gao@intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <1543976357-1053-1-git-send-email-chao.gao@intel.com>
User-Agent: NeoMutt/20180716
X-ClientProxiedBy: AMSPEX02CAS02.citrite.net (10.69.22.113) To
 AMSPEX02CL02.citrite.net (10.69.22.126)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 05, 2018 at 10:19:17AM +0800, Chao Gao wrote:
> I find some pass-thru devices don't work any more across guest reboot.
> Assigning it to another guest also meets the same issue. And the only
> way to make it work again is un-binding and binding it to pciback.
> Someone reported this issue one year ago [1]. More detail also can be
> found in [2].
> 
> The root-cause is Xen's internal MSI-X state isn't reset properly
> during reboot or re-assignment. In the above case, Xen set maskall bit
> to mask all MSI interrupts after it detected a potential security
> issue. Even after device reset, Xen didn't reset its internal maskall
> bit. As a result, maskall bit would be set again in next write to
> MSI-X message control register.
> 
> Given that PHYSDEVOPS_prepare_msix() also triggers Xen resetting MSI-X
> internal state of a device, we employ it to fix this issue rather than
> introducing another dedicated sub-hypercall.
> 
> Note that PHYSDEVOPS_release_msix() will fail if the mapping between
> the device's msix and pirq has been created. This limitation prevents
> us calling this function when detaching a device from a guest during
> guest shutdown. Thus it is called right before calling
> PHYSDEVOPS_prepare_msix().

s/PHYSDEVOPS/PHYSDEVOP/ (no final S). And then I would also drop the
() at the end of the hypercall name since it's not a function.

I'm also wondering why the release can't be done when the device is
detached from the guest (or the guest has been shut down). This makes
me worry about the raciness of the attach/detach procedure: if there's
a state where pciback assumes the device has been detached from the
guest, but there are still pirqs bound, an attempt to attach to
another guest in such state will fail.

> [1]: https://lists.xenproject.org/archives/html/xen-devel/2017-09/
>      msg02520.html
> [2]: https://lists.xen.org/archives/html/xen-devel/2018-11/msg01616.html
> 
> Signed-off-by: Chao Gao <chao.gao@intel.com>
> ---
>  drivers/xen/xen-pciback/pci_stub.c | 49 ++++++++++++++++++++++++++++++++++++++
>  drivers/xen/xen-pciback/pciback.h  |  1 +
>  drivers/xen/xen-pciback/xenbus.c   | 10 ++++++++
>  3 files changed, 60 insertions(+)
> 
> diff --git a/drivers/xen/xen-pciback/pci_stub.c b/drivers/xen/xen-pciback/pci_stub.c
> index 59661db..f8623d0 100644
> --- a/drivers/xen/xen-pciback/pci_stub.c
> +++ b/drivers/xen/xen-pciback/pci_stub.c
> @@ -87,6 +87,55 @@ static struct pcistub_device *pcistub_device_alloc(struct pci_dev *dev)
>  	return psdev;
>  }
>  
> +/*
> + * Reset Xen internal MSI-X state by invoking PHYSDEVOP_{release, prepare}_msix.
> + */
> +int pcistub_msix_reset(struct pci_dev *dev)
> +{
> +#ifdef CONFIG_PCI_MSI
> +	if (dev->msix_cap) {
> +		struct physdev_pci_device ppdev = {
> +			.seg = pci_domain_nr(dev->bus),
> +			.bus = dev->bus->number,
> +			.devfn = dev->devfn
> +		};
> +		int err;
> +		u16 val;
> +
> +		/*
> +		 * Do a write first to flush Xen's internal state to hardware
> +		 * such that the following read can infer whether MSI-X maskall
> +		 * bit is set by Xen.
> +		 */
> +		pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &val);
> +		pci_write_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, val);
> +
> +		pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &val);
> +		if (!(val & PCI_MSIX_FLAGS_MASKALL))
> +			return 0;

I would just perform a reset regardless of the maskall value, which
would also allow you to skip the read/write dance that you do above.

ATM we are only concerned about the maskall bit, but there's no reason
why prepare/release couldn't do more stuff in the future.

> +
> +		pr_info("Reset MSI-X state for device %04x:%02x:%02x.%d\n",
> +			ppdev.seg, ppdev.bus, PCI_SLOT(ppdev.devfn),
> +			PCI_FUNC(ppdev.devfn));
> +
> +		err = HYPERVISOR_physdev_op(PHYSDEVOP_release_msix, &ppdev);
> +		if (err) {
> +			dev_warn(&dev->dev, "MSI-X release failed (%d)\n",
> +				 err);

This is a warn, while the message below is an err, any reason for
the difference in log level?

> +			return err;
> +		}
> +
> +		err = HYPERVISOR_physdev_op(PHYSDEVOP_prepare_msix, &ppdev);
> +		if (err) {
> +			dev_err(&dev->dev, "MSI-X preparation failed (%d)\n",
> +				err);
> +			return err;

Thanks, Roger.
