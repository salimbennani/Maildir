Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:41:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 70FDB58014B;
	Tue,  4 Dec 2018 08:31:24 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 08:31:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AQ47mzhIqT33F6m4GzdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/z6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsPthu+HQuhCfjzyjJKnHL6wbE23uohHAzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtMKkSVuC1zK/VxjvCdfxWwy396YjVeR0mo/GMWrJwcczLxUkgDQzFlE+Q?=
 =?us-ascii?q?qIz+MjOVy+QCqWaa4PRhVe61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886Xm1kpDw2xqMatZKlZiQG1ooryh/FZ/GIboSE?=
 =?us-ascii?q?+h3uWeaLLTtmi39ofKiziwiv/US+0OHwS8253EtMoyFYiNfDrGoN2AbW6sWfSv?=
 =?us-ascii?q?ty4EOh2TGX2gDN5eFLP1o0mbDYK5E/2L4wkIQcsUDZEi/xgkX2g7eadkQi+ue2?=
 =?us-ascii?q?9+TqeqvqqoOYOoNulw3zPLoiltaiDek7LgQCRWmW9Oak2L3m50L5QbFKjvMskq?=
 =?us-ascii?q?netZDXPcAbpq+/Aw9I3Ycv8hW/ACm80NQeg3YHKEtJeBWJjojvJV7OOuv1Demw?=
 =?us-ascii?q?g1uyijdn3fPGMaP7ApXLMHfDlK3tfbFn605T0AYz18xQ54pICrEdJ/L+QkvxtN?=
 =?us-ascii?q?3bDhAnKQC1zPvnBc551oMfX2KPH6CYPLnTsV+O+uIgPe2MaJUJtzb6Lvgv/+Tu?=
 =?us-ascii?q?gmMhmV8BYamp2oMaaHCiEfRnP0WWe33sjs0BEWcXpAU+SuPqhUaGUT5SYXayQq?=
 =?us-ascii?q?096is6CIKgEYfMWIStjKad0ye8G51cfnpGBUyUEXf0a4WEXO8BaCCVIsB/iDAE?=
 =?us-ascii?q?Vr+hS4kn1RGprwL6z7tnLuzJ+iwXr57j1d515/HNmhE27zB7E8Od02SVRWFugm?=
 =?us-ascii?q?wIXyM23Lx4oUFl0FiDyqh4g/tbFdBJ/fNGSAU6OIXYz+x7DdDyRw3Acs2ISFag?=
 =?us-ascii?q?XtWpHzUxQsgtzN8JZkZ3A8+igQzb3yq2H78VkKSGBJ8u/aLaxXTxI8d9xGzA1K?=
 =?us-ascii?q?kulFQmRspPNWu7hq9w7QTTBojJk1mHmKaub6gTwCnN9GKbx2qUoE5YSBJwUbnC?=
 =?us-ascii?q?XX0He0TZt8r56V3YQ7+uE7snNBBBxtCEKqdNbt3pjlBGRPP4NdTaYmKxnXqwBB?=
 =?us-ascii?q?mSyrONaorqZ3sS3CHHBEcYlAAT+G6MNRIiCSe5v2LeEDtuGErybEz27+lxtmm3?=
 =?us-ascii?q?Tk8uwAGMdE1uyby19wURhfydTfMTw70FtD0gqzVyAFaywdbWB8CcqApmeaVWec?=
 =?us-ascii?q?k970tf1WLFqwx9OYStL7xjhl4bdAR3o0Pu1hVtBoVci8Qqq2kqzA5zKaKe31NM?=
 =?us-ascii?q?bDeY3ZH2Or3KJWj+5hGva6jK2l7A1Naa4LsA6PM9q1/7pgGmClIi82l709lSy3?=
 =?us-ascii?q?aT/JHKAxQdUJ3vUkc77QN1p6zHbSYn4YPU1npsMbevvz/G2tIpAvYlyxm6c9de?=
 =?us-ascii?q?NqOECBH9E8kAC8eyL+wqnkCjbggYM+BK6K40I8SmeuOG2a62JupvgCiqjGVH4I?=
 =?us-ascii?q?9n1EKM+DFxSurJ35YD3vGZ0RGLVzb6jFe9rM/3nZpIai0VHmq60SLkHpJeZrVu?=
 =?us-ascii?q?fYYXDmejO9e3xtRiiJH3QX5X6VmjC0kA2MC3YxqSbkXx0hFK2kQTvHOohzG4zz?=
 =?us-ascii?q?tykzwyqqqf3SrOw/ntdRYdO25LQnVigknoIYSuk98aW02oZRAzlBS5/Ub627Rb?=
 =?us-ascii?q?pKNnImjTQEdEZSj3I3t5UqutsLqPeMpP6JIusSVKX+Wwe1GaSrjhoxQE1yPvBX?=
 =?us-ascii?q?dRxDc+dzuyoJX2gwR6iH6BLHZ0tHfZe9t/xQ3c5NzfQv5dxCEGSzN7iTnUB1i8?=
 =?us-ascii?q?Ocem/dOPmpfHs+C+UX+hV5JJfSnqy4OAqDW05WlwDRKjmPCzn8XtERIm3i/jy9?=
 =?us-ascii?q?lqSSLIoQ78Y4bx0KS2K+BnfkhuBFLn78p6G4d+kpY/hZ0K2HgagImV8mQDkWvp?=
 =?us-ascii?q?Ldpb3qf+ZmIXRTEX297V/BTl2Ep7I3KK3Y35V2+Rwst8Z9agZGMW1Tkw78RLCK?=
 =?us-ascii?q?eS8bxFkjF5olu+rQLNf/d9mi0Rxucp6H4fm+sJohYizj2BArAOGklVJSnslxWL?=
 =?us-ascii?q?79+ktqlWanigcaOs1EVgh9CuF6+NohtTWHvifpciHClw7thwMV7W0X3z7J3kd8?=
 =?us-ascii?q?fUbd4JqhKUlBLAhfBPKJ0tjvoKmTZnOWXlsH05zO47iAZi3JCgs4iBNmVt57m5?=
 =?us-ascii?q?Ah9DOz3xZsMT/CztjKlEksaX2YCvAotuGjERUJT0SvKoFSoYte77OAaWDD08tn?=
 =?us-ascii?q?CbFKLEEgCF70dmq2/PH4qvN3GKP3QZydRiRB+AJE1QmgwUXTM6noInGQCu3sDu?=
 =?us-ascii?q?bEB55jUJ7F7ithRM0v5oNwX4UmrHpgencDI0R4aELBZM8gFO/UTVMdGd7uJuGS?=
 =?us-ascii?q?FX5IahoReJKmyaYQRIEG4IVlaFB1DlIrmh+93A//KECeq5KvvEea+OpvBGV/eU?=
 =?us-ascii?q?2ZKv1ZNr/jaLNsWSJ3liEuc02kxZUXBiHMTZnToPRjcTlyLMac6buRi99jd2rs?=
 =?us-ascii?q?C57PTkRgbv6ZGTBLtVNNVl4wq2jrubN+6MmCZ5Li5V1pMSyn/Jy7gf318Shztt?=
 =?us-ascii?q?dzm3FrQAujDCTLjNmq9MFBMbbyJzNM1V76MzxAVNOMjbis/r2b58lPI6F1BFVV?=
 =?us-ascii?q?n5kMGzecMKO329NE/ABEuTLruGOCbEw9vpbqK8U7FQiORUuga0uTaaFU/jIzuC?=
 =?us-ascii?q?myPoVxCpLeFDkiWbMAZCt4G6dxZnEXLjQ87+ah2nLN93iiU7waE1hnPPL2ITLS?=
 =?us-ascii?q?JwfF9NrrKO6yNVmfF/G21H7np4IuiIgSeZ7+/EKpkItftnGDh7l+Vf4H4i0bta?=
 =?us-ascii?q?8DlEROBpmCvVttNvo0upku+KyjpmVhpBsjdKhIKRskVkNqXU7Z1AWXfC/BIQ4m?=
 =?us-ascii?q?ScERUKp915CtLxv6Bc0MTAlKX2KGQKz9WBx8wWBs6cDd+dKHoweU7zHzTVCk0A?=
 =?us-ascii?q?UCSzNXD3jlZY1vqV8yvR5sw6oZjEnIESDLNWAg8bDPQfX2ZiHNpKD55tRCJsxb?=
 =?us-ascii?q?ycjMhO6nOktgj5RNhToZ3GEPmVBKO8e36ikbBYak5QkvvDJoMJO9i+ghQ6Zw?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AZAACWqwZch0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCbH8nCowIjW8tFJc1FIFfLBMBh0wiNAkNAQMBAQEBAQECARMBAQEIDQk?=
 =?us-ascii?q?IKS+CNiQBgmEBAQEBAgEBAjU0CgMFAQkBAQoYLgNUBgEMAQUCAQEBgxyBeggFp?=
 =?us-ascii?q?jWFQIRwjB6BVz+BESeCa4RbDoVzAosghFiQUQcCgiAEjxcGGIlrhzssiFqJCIg?=
 =?us-ascii?q?vgg0zGiODPIInF44dPwEBMYEEAQEBDogIgS2BHwEB?=
X-IPAS-Result: =?us-ascii?q?A0AZAACWqwZch0O0hNFkHQEBBQEHBQGBUQgBCwGCbH8nCow?=
 =?us-ascii?q?IjW8tFJc1FIFfLBMBh0wiNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmEBA?=
 =?us-ascii?q?QEBAgEBAjU0CgMFAQkBAQoYLgNUBgEMAQUCAQEBgxyBeggFpjWFQIRwjB6BVz+?=
 =?us-ascii?q?BESeCa4RbDoVzAosghFiQUQcCgiAEjxcGGIlrhzssiFqJCIgvgg0zGiODPIInF?=
 =?us-ascii?q?44dPwEBMYEEAQEBDogIgS2BHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="54474943"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 08:31:22 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727212AbeLDQbP (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 11:31:15 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:15638 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726226AbeLDQbP (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 11:31:15 -0500
Received: from DGGEMS408-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 0D3CE8A5A2971;
        Wed,  5 Dec 2018 00:30:59 +0800 (CST)
Received: from [127.0.0.1] (10.202.226.41) by DGGEMS408-HUB.china.huawei.com
 (10.3.19.208) with Microsoft SMTP Server id 14.3.408.0; Wed, 5 Dec 2018
 00:30:52 +0800
Subject: Re: [PATCH 3/4] dma-debug: Dynamically expand the dma_debug_entry
 pool
To: Robin Murphy <robin.murphy@arm.com>, <hch@lst.de>
References: <cover.1543856576.git.robin.murphy@arm.com>
 <f99ea022be92a99339404867bc925f4fbd2ee6c4.1543856576.git.robin.murphy@arm.com>
 <a45fce07-3663-2a55-5b97-336002f21cdb@huawei.com>
 <70336fdc-abe8-2cea-8d8c-170b4863d884@arm.com>
CC: <m.szyprowski@samsung.com>, <iommu@lists.linux-foundation.org>,
        <linux-kernel@vger.kernel.org>, <cai@gmx.us>,
        <salil.mehta@huawei.com>
From: John Garry <john.garry@huawei.com>
Message-ID: <58fb3579-d101-db2b-c63a-609ddd651932@huawei.com>
Date: Tue, 4 Dec 2018 16:30:47 +0000
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101
 Thunderbird/45.3.0
MIME-Version: 1.0
In-Reply-To: <70336fdc-abe8-2cea-8d8c-170b4863d884@arm.com>
Content-Type: text/plain; charset="windows-1252"; format=flowed
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.202.226.41]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 04/12/2018 13:11, Robin Murphy wrote:
> Hi John,
>
> On 03/12/2018 18:23, John Garry wrote:
>> On 03/12/2018 17:28, Robin Murphy wrote:
>>> Certain drivers such as large multi-queue network adapters can use pools
>>> of mapped DMA buffers larger than the default dma_debug_entry pool of
>>> 65536 entries, with the result that merely probing such a device can
>>> cause DMA debug to disable itself during boot unless explicitly given an
>>> appropriate "dma_debug_entries=..." option.
>>>
>>> Developers trying to debug some other driver on such a system may not be
>>> immediately aware of this, and at worst it can hide bugs if they fail to
>>> realise that dma-debug has already disabled itself unexpectedly by the
>>> time the code of interest gets to run. Even once they do realise, it can
>>> be a bit of a pain to emprirically determine a suitable number of
>>> preallocated entries to configure without massively over-allocating.
>>>
>>> There's really no need for such a static limit, though, since we can
>>> quite easily expand the pool at runtime in those rare cases that the
>>> preallocated entries are insufficient, which is arguably the least
>>> surprising and most useful behaviour.
>>
>> Hi Robin,
>>
>> Do you have an idea on shrinking the pool again when the culprit
>> driver is removed, i.e. we have so many unused debug entries now
>> available?
>
> I honestly don't believe it's worth the complication. This is a
> development feature with significant overheads already, so there's not
> an awful lot to gain by trying to optimise memory usage. If a system can
> ever load a driver that makes hundreds of thousands of simultaneous
> mappings, it can almost certainly spare 20-odd megabytes of RAM for the
> corresponding debug entries in perpetuity. Sure, it does mean you'd need
> to reboot to recover memory from a major leak, but that's mostly true of
> the current behaviour too, and rebooting during driver development is
> hardly an unacceptable inconvenience.
>

ok, I just thought that it would not be too difficult to implement this 
on the dma entry free path.

> In fact, having got this far in, what I'd quite like to do is to get rid
> of dma_debug_resize_entries() such that we never need to free things at
> all, since then we could allocate whole pages as blocks of entries to
> save on masses of individual slab allocations.
>

On a related topic, is it possible for the user to learn the total 
entries created at a given point in time? If not, could we add a file in 
the debugfs folder for this?

Thanks,
John

> Robin.
>
>>
>> Thanks,
>> John
>>
>>>
>>> Signed-off-by: Robin Murphy <robin.murphy@arm.com>
>>> ---
>>>  kernel/dma/debug.c | 18 +++++++++++++++---
>>>  1 file changed, 15 insertions(+), 3 deletions(-)
>>>
>>> diff --git a/kernel/dma/debug.c b/kernel/dma/debug.c
>>> index de5db800dbfc..46cc075aec99 100644
>>> --- a/kernel/dma/debug.c
>>> +++ b/kernel/dma/debug.c
>>> @@ -47,6 +47,9 @@
>>>  #ifndef PREALLOC_DMA_DEBUG_ENTRIES
>>>  #define PREALLOC_DMA_DEBUG_ENTRIES (1 << 16)
>>>  #endif
>>> +/* If the pool runs out, try this many times to allocate this many
>>> new entries */
>>> +#define DMA_DEBUG_DYNAMIC_ENTRIES 256
>>> +#define DMA_DEBUG_DYNAMIC_RETRIES 2
>>>
>>>  enum {
>>>      dma_debug_single,
>>> @@ -702,12 +705,21 @@ static struct dma_debug_entry
>>> *dma_entry_alloc(void)
>>>  {
>>>      struct dma_debug_entry *entry;
>>>      unsigned long flags;
>>> +    int retry_count;
>>>
>>> -    spin_lock_irqsave(&free_entries_lock, flags);
>>> +    for (retry_count = 0; ; retry_count++) {
>>> +        spin_lock_irqsave(&free_entries_lock, flags);
>>> +
>>> +        if (num_free_entries > 0)
>>> +            break;
>>>
>>> -    if (list_empty(&free_entries)) {
>>> -        global_disable = true;
>>>          spin_unlock_irqrestore(&free_entries_lock, flags);
>>> +
>>> +        if (retry_count < DMA_DEBUG_DYNAMIC_RETRIES &&
>>> +            !prealloc_memory(DMA_DEBUG_DYNAMIC_ENTRIES))
>>> +            continue;
>>> +
>>> +        global_disable = true;
>>>          pr_err("debugging out of memory - disabling\n");
>>>          return NULL;
>>>      }
>>>
>>
>>
>
> .
>


