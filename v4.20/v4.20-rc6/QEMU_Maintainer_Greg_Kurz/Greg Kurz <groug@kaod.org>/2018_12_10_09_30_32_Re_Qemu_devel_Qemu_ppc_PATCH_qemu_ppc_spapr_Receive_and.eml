Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:15:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 79B7958028E
	for <like.xu@linux.intel.com>; Mon, 10 Dec 2018 01:30:57 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga004-1.fm.intel.com with ESMTP; 10 Dec 2018 01:30:57 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AKbg93x2fGl2S3A+tsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMfK/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCAIy8?=
 =?us-ascii?q?YYwBAOUdMuhFt4nwpVkAoBSjCQSiGO/g1CRIi2T53aEmyeksCxvL0BA+E98IrX?=
 =?us-ascii?q?/arM/1NKAXUe2tzafI1yvMb/xL0jn49YjIaBEgquyLULJ/a8rRzlQvFwzeg1WT?=
 =?us-ascii?q?s4PlOC6a2v4Ks2iB4OptTOSigHMppQF2pzig3MYsio/Ri4Iay1DE6SV5wJsuKt?=
 =?us-ascii?q?GiVEF7ZtukHZ1NvC+ZL4t7Wt0uT31rtSog17EKpJ22cDIUxJkpxxPTceGLfoqQ?=
 =?us-ascii?q?7h/gSuqdOyl0iXJrdb6lmRq+7UutxvfiWsS701tHqDdOnMPWuXAXzRPT79CKSv?=
 =?us-ascii?q?tj8Uel3jaCzwTT6uBfIUAojqrXMZEhwrgtlpYJtkTDBCD2lF33jK+QaEok5vCl?=
 =?us-ascii?q?5/r7brjlvJOQKpJ4hwLkPqgwlMGyAf40PhUMUmSD/OSzzrzj/Un3QLVQif02l7?=
 =?us-ascii?q?HUsInEKsQeu661GhJa3Zg96xmhCzeqyc8XnX4aLFJDZB2IkZPpN1bKIPD5Dvew?=
 =?us-ascii?q?nU6gkTh2x/3eOr3hA5PNLmXMkbv7fLZ97VJcxxQ3zdxF+51UDbQBLen1Wk/2st?=
 =?us-ascii?q?zYARk5MxGuz+bgEtV92ZsSWXiTDa+BLKPSrViI6/orI+mNZ48apizxKvc45/P1?=
 =?us-ascii?q?iX85mFkdfbSm3JcNaXC4GOhmLFudYXb2ntgBFmIK7UIDSvf3ggiCTSJLfCT1GK?=
 =?us-ascii?q?Y9/S0gToShC4jFW8aqmrPG2S66GphfYCdBEkyNFnHzMJyJXupJZC+ML8syrzof?=
 =?us-ascii?q?SLL0ToYg0Q2p5hb3zqciIufK9yldr5/6ydVu+8XVkhc98yEyCN6ShHqQRWN5lX?=
 =?us-ascii?q?9dWjktwapkqlZ8wFrQ7a8tr/VGFNAbyPJDSQA8fcrQxvJ7B/j9WwjaedHPREyh?=
 =?us-ascii?q?Wt+rCCt3T953ysJYMGhnHND3oQrO0GKJHqUH3+iEHpsp/Yrf1n/9YcFnxCCVh+?=
 =?us-ascii?q?Eak1A6T54XZiWdjall+l2WXtaRng=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AWAACUMQ5cmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCBOYEpjBNfiy5SBoE1iSCOMRSBXwINBRgLCYQ7A4MsIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAiQfCikDA?=
 =?us-ascii?q?gEBAgYBAQoSBgkTCggDAQsuDA4GEwWDHAGBdAUIAQMBCqVnM4QtAYViCgWCbYk?=
 =?us-ascii?q?0F3iBB4ERghR+gx4CgUqFcgKgdQmHCIo8CxiORYJ4gwKLE4sbgUaCDjMaCCgIg?=
 =?us-ascii?q?yeCJxcSgziKVHGBBAOKUoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AWAACUMQ5cmBHrdtBjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?BOYEpjBNfiy5SBoE1iSCOMRSBXwINBRgLCYQ7A4MsIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBAQEICwsGGw4jDII2BQIDGgEGglsBAQEBAgEBAiQfCikDAgEBAgYBAQoSBgk?=
 =?us-ascii?q?TCggDAQsuDA4GEwWDHAGBdAUIAQMBCqVnM4QtAYViCgWCbYk0F3iBB4ERghR+g?=
 =?us-ascii?q?x4CgUqFcgKgdQmHCIo8CxiORYJ4gwKLE4sbgUaCDjMaCCgIgyeCJxcSgziKVHG?=
 =?us-ascii?q?BBAOKUoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,337,1539673200"; 
   d="scan'208";a="56795070"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 10 Dec 2018 01:30:56 -0800
Received: from localhost ([::1]:59881 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWHtv-0006HG-7O
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 04:30:55 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:50742)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gWHtm-0006Gw-8s
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 04:30:47 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <groug@kaod.org>) id 1gWHtj-0003Oc-3Q
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 04:30:46 -0500
Received: from 12.mo1.mail-out.ovh.net ([87.98.162.229]:55463)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <groug@kaod.org>) id 1gWHti-0003N2-RF
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 04:30:43 -0500
Received: from player762.ha.ovh.net (unknown [10.109.160.244])
	by mo1.mail-out.ovh.net (Postfix) with ESMTP id 64E09149843
	for <qemu-devel@nongnu.org>; Mon, 10 Dec 2018 10:30:40 +0100 (CET)
Received: from kaod.org (lns-bzn-46-82-253-208-248.adsl.proxad.net
	[82.253.208.248]) (Authenticated sender: groug@kaod.org)
	by player762.ha.ovh.net (Postfix) with ESMTPSA id AF066AB2202;
	Mon, 10 Dec 2018 09:30:33 +0000 (UTC)
Date: Mon, 10 Dec 2018 10:30:32 +0100
From: Greg Kurz <groug@kaod.org>
To: David Gibson <david@gibson.dropbear.id.au>
Message-ID: <20181210103032.088de905@bahia.lab.toulouse-stg.fr.ibm.com>
In-Reply-To: <20181210062043.GS4261@umbus.fritz.box>
References: <20181108014406.29818-1-aik@ozlabs.ru>
	<20181111191047.7af39551@bahia.lan>
	<efc67974-4118-7877-6f8d-ce0a09cb9999@ozlabs.ru>
	<20181210062043.GS4261@umbus.fritz.box>
X-Mailer: Claws Mail 3.16.0 (GTK+ 2.24.32; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha256;
	boundary="Sig_/LvNoeFKPQqQ3D_vZy.3hsyN";
	protocol="application/pgp-signature"
X-Ovh-Tracer-Id: 3620894101827262950
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudeghedgtdefucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuqfggjfdpvefjgfevmfevgfenuceurghilhhouhhtmecuhedttdenucesvcftvggtihhpihgvnhhtshculddquddttddm
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 87.98.162.229
Subject: Re: [Qemu-devel] [Qemu-ppc] [PATCH qemu] ppc/spapr: Receive and
 store device tree blob from SLOF
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Alexey Kardashevskiy <aik@ozlabs.ru>, qemu-ppc@nongnu.org,
	qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

--Sig_/LvNoeFKPQqQ3D_vZy.3hsyN
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

On Mon, 10 Dec 2018 17:20:43 +1100
David Gibson <david@gibson.dropbear.id.au> wrote:

> On Mon, Nov 12, 2018 at 03:12:26PM +1100, Alexey Kardashevskiy wrote:
> >=20
> >=20
> > On 12/11/2018 05:10, Greg Kurz wrote: =20
> > > Hi Alexey,
> > >=20
> > > Just a few remarks. See below.
> > >=20
> > > On Thu,  8 Nov 2018 12:44:06 +1100
> > > Alexey Kardashevskiy <aik@ozlabs.ru> wrote:
> > >  =20
> > >> SLOF receives a device tree and updates it with various properties
> > >> before switching to the guest kernel and QEMU is not aware of any ch=
anges
> > >> made by SLOF. Since there is no real RTAS (QEMU implements it), it m=
akes
> > >> sense to pass the SLOF final device tree to QEMU to let it implement
> > >> RTAS related tasks better, such as PCI host bus adapter hotplug.
> > >>
> > >> Specifially, now QEMU can find out the actual XICS phandle (for PHB
> > >> hotplug) and the RTAS linux,rtas-entry/base properties (for firmware
> > >> assisted NMI - FWNMI).
> > >>
> > >> This stores the initial DT blob in the sPAPR machine and replaces it
> > >> in the KVMPPC_H_UPDATE_DT (new private hypercall) handler.
> > >>
> > >> This adds an @update_dt_enabled machine property to allow backward
> > >> migration.
> > >>
> > >> SLOF already has a hypercall since
> > >> https://github.com/aik/SLOF/commit/e6fc84652c9c0073f9183
> > >>
> > >> Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
> > >> ---
> > >>  include/hw/ppc/spapr.h |  7 ++++++-
> > >>  hw/ppc/spapr.c         | 29 ++++++++++++++++++++++++++++-
> > >>  hw/ppc/spapr_hcall.c   | 32 ++++++++++++++++++++++++++++++++
> > >>  hw/ppc/trace-events    |  2 ++
> > >>  4 files changed, 68 insertions(+), 2 deletions(-)
> > >>
> > >> diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
> > >> index ad4d7cfd97..f5dcaf44cb 100644
> > >> --- a/include/hw/ppc/spapr.h
> > >> +++ b/include/hw/ppc/spapr.h
> > >> @@ -100,6 +100,7 @@ struct sPAPRMachineClass {
> > >> =20
> > >>      /*< public >*/
> > >>      bool dr_lmb_enabled;       /* enable dynamic-reconfig/hotplug o=
f LMBs */
> > >> +    bool update_dt_enabled;    /* enable KVMPPC_H_UPDATE_DT */
> > >>      bool use_ohci_by_default;  /* use USB-OHCI instead of XHCI */
> > >>      bool pre_2_10_has_unused_icps;
> > >>      bool legacy_irq_allocation;
> > >> @@ -136,6 +137,9 @@ struct sPAPRMachineState {
> > >>      int vrma_adjust;
> > >>      ssize_t rtas_size;
> > >>      void *rtas_blob;
> > >> +    uint32_t fdt_size;
> > >> +    uint32_t fdt_initial_size; =20
> > >=20
> > > I don't quite see the purpose of fdt_initial_size... it seems to be o=
nly
> > > used to print a trace. =20
> >=20
> >=20
> > Ah, lost in rebase. The purpose was to test if the new device tree has
> > not grown too much.
> >=20
> >=20
> >  =20
> > >  =20
> > >> +    void *fdt_blob;
> > >>      long kernel_size;
> > >>      bool kernel_le;
> > >>      uint32_t initrd_base;
> > >> @@ -462,7 +466,8 @@ struct sPAPRMachineState {
> > >>  #define KVMPPC_H_LOGICAL_MEMOP  (KVMPPC_HCALL_BASE + 0x1)
> > >>  /* Client Architecture support */
> > >>  #define KVMPPC_H_CAS            (KVMPPC_HCALL_BASE + 0x2)
> > >> -#define KVMPPC_HCALL_MAX        KVMPPC_H_CAS
> > >> +#define KVMPPC_H_UPDATE_DT      (KVMPPC_HCALL_BASE + 0x3)
> > >> +#define KVMPPC_HCALL_MAX        KVMPPC_H_UPDATE_DT
> > >> =20
> > >>  typedef struct sPAPRDeviceTreeUpdateHeader {
> > >>      uint32_t version_id;
> > >> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
> > >> index c08130facb..5e2d4d211c 100644
> > >> --- a/hw/ppc/spapr.c
> > >> +++ b/hw/ppc/spapr.c
> > >> @@ -1633,7 +1633,10 @@ static void spapr_machine_reset(void)
> > >>      /* Load the fdt */
> > >>      qemu_fdt_dumpdtb(fdt, fdt_totalsize(fdt));
> > >>      cpu_physical_memory_write(fdt_addr, fdt, fdt_totalsize(fdt));
> > >> -    g_free(fdt);
> > >> +    g_free(spapr->fdt_blob);
> > >> +    spapr->fdt_size =3D fdt_totalsize(fdt);
> > >> +    spapr->fdt_initial_size =3D spapr->fdt_size;
> > >> +    spapr->fdt_blob =3D fdt; =20
> > >=20
> > > Hmm... It looks weird to store state in a reset handler. I'd rather z=
eroe
> > > both fdt_blob and fdt_size here. =20
> >=20
> > The device tree is built from the reset handler and the idea is that we
> > want to always have some tree in the machine. =20
>=20
> Yes, I think the approach here is fine.  Otherwise when we want to
> look up the current fdt state in RTAS calls or whatever we'd always
> have to do
> 	if (fdt_blob)
> 		look up that
> 	else
> 		look up qemu created fdt.
>=20

No. We only have one fdt blob: the initial one, I'd rather
call reset time one, or the updated one.

> Incidentally 'fdt' and 'fdt_blob' names do a terrible job of
> distinguishing what the difference is.  Renaming fdt to fdt_initial
> (to match fdt_initial_size) and fdt_blob to fdt should make that
> clearer.
>=20

As mentioned earlier in this thread, spapr->fdt_initial_size is only used
for tracing if the received fdt blob fails fdt_check_full()...

$ git grep -H fdt_initial_size
hw/ppc/spapr.c:    spapr->fdt_initial_size =3D spapr->fdt_size;
hw/ppc/spapr.c:        VMSTATE_UINT32(fdt_initial_size, sPAPRMachineState),
hw/ppc/spapr_hcall.c:        trace_spapr_update_dt_failed(spapr->fdt_initia=
l_size, cb,
include/hw/ppc/spapr.h:    uint32_t fdt_initial_size;

Not sure it is helpful, and anyway, it is expected to be the same in source
and destination, so why put it in the migration stream ?

The only case where we want to migrate something is when h_update_dt() has
succeeded, ie, the guest passed a valid DT blob. This implies that its
size isn't 0, otherwise fdt_check_full() would return -FDT_ERR_TRUNCATED.

I would suggest rather to:

- completely drop spapr->fdt_initial_size
- clear spapr->fdt_size at machine reset
- migrate if spapr->fdt_size is not zero

Also, I've just realized another problem... nothing prevents a malicious
guest to pass an insanely great size to h_update_dt, which would cause
g_malloc0() to abort... The passed size should be checked against
FDT_MAX_SIZE.

Cheers,

--
Greg

--Sig_/LvNoeFKPQqQ3D_vZy.3hsyN
Content-Type: application/pgp-signature
Content-Description: OpenPGP digital signature

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEtIKLr5QxQM7yo0kQcdTV5YIvc9YFAlwOMjgACgkQcdTV5YIv
c9YfwA/+NHFaL1lJE1eF+/WnXWMb9PBTsLrEhD3BQ+71Qnd86R+bO2mI9J3ShEum
Pzl2ena+LDFolT3WLUKplOiakZMt+LX2/R1WF9CFSdEudpEXpz8EwMbMn89/M0mS
9C7aOcBnyB1yhELt5hUQWd2i4S/RUzQODfUT4GaoptLHdOoYo877P52k+Tt4K+fK
iwyQgQYosUrWEt+pGfP0Q9+tbsq4gZ4zerHT1zX1jk5T++1O9GXpGuLlI8vwZf1T
TR3ngpse0QycFdz1CTKe8mdN8AtPsJVCXVmcP/kNIph7vqCbRDA25n2FtrxzXdwf
1GrjxeS/cAyG2JwG8257m1Nbr4UmzNqEsQ7Y9iML60ij06JNnTHK4pSq54eC9W8T
yKiMIasM6tRjWO7gDv+AYQCrTWESWng3jnOHSMsv+uTmiHh/npp25Q0b7kPB5Fif
Iv90o+ueVqzPn1BDBBD/WaZ5PEnsm96nnVDj6DPdYEC3McVz109RUokIRPfClSAO
r/VvMh6b+G/JedcC78Q7BP+YPW0E4PIhl0hLqI4lybGu47NaXs6eOrDMnRXqKjfD
k1oUQRpLUx4+LpbzZn/whsWVDUqNt+Q2uLyPTQoHlML4gEN8Snl3TWmY2jp25K3X
NQB5ESD2y+CAhk6beA1/e2ppE3XenA5u2HiGuVSM85DxMuxsyEw=
=Iwwy
-----END PGP SIGNATURE-----

--Sig_/LvNoeFKPQqQ3D_vZy.3hsyN--

