Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:45:26 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 13F0858014B;
	Tue,  4 Dec 2018 14:48:49 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 14:48:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AUcJNdRLX+/FiQmOAuNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvj/rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQsleWDFPDIO+?=
 =?us-ascii?q?YIUBAOQPPuhYoZf6qVsVtRuzBxKhBP/2yj9NmnP23bE23uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvtLqgdTPq6zLfVxjjfavNW2Cv945XPfxAnu/6DQKh/cdTLxUY1EgPFj0mQ?=
 =?us-ascii?q?pJfqPzOQzOsNsmyb4/B8WuKojm4qsgd8qSWsyMc0koTFmJ4Zx1Te+Slkzos5O8?=
 =?us-ascii?q?e0RFN4bNK4CpddtiOXO5NoTs8+QGxkoiI3xqActZKlZiQG1ZIqzAPFZfOdaYiH?=
 =?us-ascii?q?+BfjWf6RIThmgHJlf6qyhwi98Ue+0O3wTMq030hQripDjNbMsmoB1xvJ6siIUv?=
 =?us-ascii?q?d9/0Gh1iiT1w3L9O1IPUQ5mbDGJ5Mv3LI8jIcfvEffEiPsmUj7jreadkA+9eip?=
 =?us-ascii?q?7+TnbK/mppiZN4JsjgH+M6IumtGwAOghMQgBQXKb+eKi273n5EH5R7tLjvsona?=
 =?us-ascii?q?nDq53aO8sbqbCjAwNP0YYs9Qy/DzG439Qch3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDhUhKQy73/7nCMlh1oMZQW+PArWWMKLOsVCS4eIjOemMZJIPtzb7JPgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEEW0SpAoxUPTqiEGeUT5Uf3uyXa?=
 =?us-ascii?q?U86S8hBIKlCofDQIatgLua0Se/H51WYH1GC1+WHXfpcYWER+kDaCaILsB9lTwE?=
 =?us-ascii?q?UKCrS5U92hG2qA/6171nI/LO9S0DtZLj09t16/fJlR4o9zx5FMCd02CLT2FpkW?=
 =?us-ascii?q?IEXT423KZjoUNjzlePy7R3g/tdFdZL/fNGTh86NYLAz+x9E93yWRjOftGTRFai?=
 =?us-ascii?q?Q9WpGzcxTt0qzt8KYkZ9Hciijx/Z0yqrBb8Vi6KEBJgu/q3A2HjxIt53y2za26?=
 =?us-ascii?q?k5k1kmXsxPOHW7iaFl6QjcGZTFk0WDmKasbqQTwijN+GCHzWqNuUFYVBV9UaHE?=
 =?us-ascii?q?XXAZe0vXos715kLET7+yF7snNhFNxtKFKqtPctfpl0lJRO//ONTCZGK8g3q/Cg?=
 =?us-ascii?q?yWxrySdobqe38S3CPGCEcalQAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4TwrMEuCImqzVoHFa838jaC8aaqwpmZqVcZd?=
 =?us-ascii?q?I94FFI1W/Cswx9P5qgL71th1IEcgR3uV/u2AtzColajccqq3YqxhJoKa2EyFNB?=
 =?us-ascii?q?ay+Y3ZfoN7LNLmn94h+uZLDW213Ey9mW57oA5+4+q1XguwGpCFEv83Fm09lTzn?=
 =?us-ascii?q?ud6Y/GDAsUUZLtTEk38wJ2qK3dYik4/4nUz2FjMbGosj/e3NIkHOskygu6c9hD?=
 =?us-ascii?q?Kq+FFQ/yHNccB8ihM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sd2fGY3xeIWC3mjFi8tcD7g4ZEai8IHmq+0CTrGJReZqlv?=
 =?us-ascii?q?cokVE2euJMu3y856h57sXX5Y6VGiC0kH2M+vZRqdcVj90RdM2kQQpHytgTG4wC?=
 =?us-ascii?q?BskzE1sqqf2zTDwuTjdBYdOm9HXnJijUrqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCVVSuu8e1OaSr36oxcAyCPsBW?=
 =?us-ascii?q?hexDM6dzGspJr5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2KgWYdUcSXxz4OAtS276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzkogqi5ERw3QahoiV8mABkWf8?=
 =?us-ascii?q?Kthb3aP+bHwQRT8E2dLV4Q7l2FF9IXKN3Y72SnKdws55bdmgfmwWwj4979xNCK?=
 =?us-ascii?q?qM6bxEnCh1rUCioQPff/d9hSsdxuU06HEBne4JogUtwz6ZArATG0lYICPtmw6J?=
 =?us-ascii?q?79C4sKVYemKvfaKs20p5mNCrFKuCrR1EWHblZpciGjd97tl4MFLJynHy65vreN?=
 =?us-ascii?q?/NbdIIrR2UkgzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4irigrxZnsaSwoCjBJFhGigQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGfJENFhQAbQi46koQlFgywx8zh?=
 =?us-ascii?q?bUR55i0X5lHisRtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlJDWYJWlGdB1D+JLau48PM8/OfBuq4IPvDerGOqe1YV/eV?=
 =?us-ascii?q?ypOjyIpm/zCQNsqROnluFeE02k1GXXphAcTWhy0PSzALlyLKd8ObpAmz+ix0rs?=
 =?us-ascii?q?C88fTnQgHv5ZGIC7tdL9pv4Q22gbyYOu6UhSZ5LytY15wWyX/JzrgfwEAdiyV0?=
 =?us-ascii?q?ezaxFrQAsDbHTLjMla9PEx4bdyRzOdNS4KIhxQZNI9DUi9Pv2r58j/44EFNFVV?=
 =?us-ascii?q?3nmsG0as0GOWC9NFXbBEmVMLSKPyHEw8byYamkU71fkP1UtwGsuTacC0LjIjWD?=
 =?us-ascii?q?lzzzWx+zK+1DkCGbMwJYuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43tlN+aEnSOZ7+jeKpkOsPprAj57l+RV4Hkhz7tV?=
 =?us-ascii?q?7SdEROF6mSfIr95upU2mnfeLyjZ9TBVOrTNL18q3uhBLP6nIvr1dRXHB/QgW7m?=
 =?us-ascii?q?TYXxAXu9xNCdD1va1UjN/Vm/SgBi1F9ofy9McVGYD9LcObeC4nOBbgBnjdCQoZ?=
 =?us-ascii?q?ZTGuPGDbwUdalafBpTWuspEmp820y9I1QbhBWQlwT6tCBw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BdAACbAwdch0O0hNFkHQEBBQEHBQGBV?=
 =?us-ascii?q?AUBCwGDayeDeZQngg0UiQ6OO4FfEgEBGBMBhECDDCI3Bg0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAdARsdAQMBAQkBAQUFCwMKAgImAgIDH?=
 =?us-ascii?q?gIRAQUBHAYTBRaDBoFpAQMNCAWZbTyLDYESBQEXgncFhEQKGScNXYE3AgYSeYs?=
 =?us-ascii?q?TgVc/gREnH4IeLoJXghMXgwQxgiYCiyCFD49sLgcCgiAEi2+DLhiBW4gAECaHF?=
 =?us-ascii?q?YoJhHGGeYJdAgQCBAUCBQ8hgTuBdzMaI1AqAQaCOz6BXQwXg0qKdB8yAYEEAQG?=
 =?us-ascii?q?KXAUBAQ?=
X-IPAS-Result: =?us-ascii?q?A0BdAACbAwdch0O0hNFkHQEBBQEHBQGBVAUBCwGDayeDeZQ?=
 =?us-ascii?q?ngg0UiQ6OO4FfEgEBGBMBhECDDCI3Bg0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCN?=
 =?us-ascii?q?iQBgmEBAQEBAgEBAiAdARsdAQMBAQkBAQUFCwMKAgImAgIDHgIRAQUBHAYTBRa?=
 =?us-ascii?q?DBoFpAQMNCAWZbTyLDYESBQEXgncFhEQKGScNXYE3AgYSeYsTgVc/gREnH4IeL?=
 =?us-ascii?q?oJXghMXgwQxgiYCiyCFD49sLgcCgiAEi2+DLhiBW4gAECaHFYoJhHGGeYJdAgQ?=
 =?us-ascii?q?CBAUCBQ8hgTuBdzMaI1AqAQaCOz6BXQwXg0qKdB8yAYEEAQGKXAUBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,316,1539673200"; 
   d="scan'208";a="54932403"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 14:48:47 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726303AbeLDWso (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 17:48:44 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:32923 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725904AbeLDWso (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 17:48:44 -0500
Received: by mail-pl1-f194.google.com with SMTP id z23so9030347plo.0;
        Tue, 04 Dec 2018 14:48:43 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=VTvZVqQimxTmbuXQK5L7tIUCwiWSTRq7isVfprnSZIg=;
        b=FcXz/e1ciuCkmRxun7ocOwEMff+jX0BBn9XshuGzd2HZbIqkkIQne3ztL/co8kRbQg
         hAQxj9t/3oLbUNvZ1DDI9L2uibLO1MYvurdAP7NEmsI5S3Wawl1HpkboFjELfdYppn1P
         Dq0J4+Mc0rMv3wYHP/O0GwIMLedGEloJ9j895xEsGOFQztqyBT6pbXCYDxt/B5MUPlk7
         kPiOOQBdr9SuH9fm5VI8BuGo1/+EMBAfeno1a/rgCy0+Mo/djIhWqXLIqTlc5qPxlhx1
         b431VbKse96UsS+AswkBDNG1yEYIa9jiBXz4axqHyh+BTtn5mEsgGil9SnFah3mmOJGy
         uX8g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:subject:from:in-reply-to:date:cc
         :content-transfer-encoding:message-id:references:to;
        bh=VTvZVqQimxTmbuXQK5L7tIUCwiWSTRq7isVfprnSZIg=;
        b=UdxvF2Y5SWHQF9/+pj++XKcDYYBtIwoDMna3x80++ydc8yNWLGrwTbJPjljXkYGetg
         gbfrB7Cxrk361Ux1u+94HqHxfqUNeCPdZTJQ+svx347GdYImGccC40e3Eec+BFtXux3i
         Qk+n7DFDvLSS1+LloDI/LpWtLJoLR5NYEiA9tixkmkLU9w7Fq22ycuZO16j5XYfj/tNV
         gbje2mM3c5q4iharwsF307SnCuTJP1R11VTDEsBsknJ6PUHElGMEohCkdx36ZMVxNh/8
         Qwan90ieCNIaCvQlh2hpVgfNTYwF5EsXpcZ5s7Pnz0p8REZw86ZNtfrNnSNmKvSRr+34
         5iQw==
X-Gm-Message-State: AA+aEWYKbqDoZ7vZhAt5Q6mUJFyMTQQAWFbNlbeUpY4BchBKdmhXgFYN
        rgvabnfQz34z8MxRp8TtxhA=
X-Google-Smtp-Source: AFSGD/WwoDHQTtB6fjCbn4RtQxMLgTFFGK2BkqHNxzo6FSXKXvDyPK4Necxgva/po/ssV3E1tSZS5A==
X-Received: by 2002:a17:902:714c:: with SMTP id u12mr21574780plm.234.1543963723038;
        Tue, 04 Dec 2018 14:48:43 -0800 (PST)
Received: from [10.2.19.70] ([208.91.2.1])
        by smtp.gmail.com with ESMTPSA id v70sm32180583pfa.152.2018.12.04.14.48.40
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 14:48:42 -0800 (PST)
Content-Type: text/plain;
        charset=utf-8
Mime-Version: 1.0 (Mac OS X Mail 12.1 \(3445.101.1\))
Subject: Re: [PATCH 1/2] vmalloc: New flag for flush before releasing pages
From: Nadav Amit <nadav.amit@gmail.com>
In-Reply-To: <CALCETrXLrsKDBzDkN7sc9HYPWe9aV3NQzf4vMvM+FD8j6aA6AQ@mail.gmail.com>
Date: Tue, 4 Dec 2018 14:48:40 -0800
Cc: Rick Edgecombe <rick.p.edgecombe@intel.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Will Deacon <will.deacon@arm.com>,
        Linux-MM <linux-mm@kvack.org>,
        LKML <linux-kernel@vger.kernel.org>,
        Kernel Hardening <kernel-hardening@lists.openwall.com>,
        "Naveen N . Rao" <naveen.n.rao@linux.vnet.ibm.com>,
        Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>,
        "David S. Miller" <davem@davemloft.net>,
        Masami Hiramatsu <mhiramat@kernel.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Ingo Molnar <mingo@redhat.com>,
        Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>, jeyu@kernel.org,
        Network Development <netdev@vger.kernel.org>,
        Ard Biesheuvel <ard.biesheuvel@linaro.org>,
        Jann Horn <jannh@google.com>,
        Kristen Carlson Accardi <kristen@linux.intel.com>,
        Dave Hansen <dave.hansen@intel.com>,
        "Dock, Deneen T" <deneen.t.dock@intel.com>,
        Peter Zijlstra <peterz@infradead.org>
Content-Transfer-Encoding: quoted-printable
Message-Id: <20CC2F71-308D-42E2-8C54-F64D7CC3863F@gmail.com>
References: <20181128000754.18056-1-rick.p.edgecombe@intel.com>
 <20181128000754.18056-2-rick.p.edgecombe@intel.com>
 <4883FED1-D0EC-41B0-A90F-1A697756D41D@gmail.com>
 <CALCETrXvddt148fncMJqpjK98uatiK-44knYFWU0-ytf8X+iog@mail.gmail.com>
 <08141F66-F3E6-4CC5-AF91-1ED5F101A54C@gmail.com>
 <CALCETrXLrsKDBzDkN7sc9HYPWe9aV3NQzf4vMvM+FD8j6aA6AQ@mail.gmail.com>
To: Andy Lutomirski <luto@kernel.org>
X-Mailer: Apple Mail (2.3445.101.1)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

> On Dec 4, 2018, at 11:48 AM, Andy Lutomirski <luto@kernel.org> wrote:
>=20
> On Tue, Dec 4, 2018 at 11:45 AM Nadav Amit <nadav.amit@gmail.com> =
wrote:
>>> On Dec 4, 2018, at 10:56 AM, Andy Lutomirski <luto@kernel.org> =
wrote:
>>>=20
>>> On Mon, Dec 3, 2018 at 5:43 PM Nadav Amit <nadav.amit@gmail.com> =
wrote:
>>>>> On Nov 27, 2018, at 4:07 PM, Rick Edgecombe =
<rick.p.edgecombe@intel.com> wrote:
>>>>>=20
>>>>> Since vfree will lazily flush the TLB, but not lazily free the =
underlying pages,
>>>>> it often leaves stale TLB entries to freed pages that could get =
re-used. This is
>>>>> undesirable for cases where the memory being freed has special =
permissions such
>>>>> as executable.
>>>>=20
>>>> So I am trying to finish my patch-set for preventing transient W+X =
mappings
>>>> from taking space, by handling kprobes & ftrace that I missed =
(thanks again for
>>>> pointing it out).
>>>>=20
>>>> But all of the sudden, I don=E2=80=99t understand why we have the =
problem that this
>>>> (your) patch-set deals with at all. We already change the mappings =
to make
>>>> the memory writable before freeing the memory, so why can=E2=80=99t =
we make it
>>>> non-executable at the same time? Actually, why do we make the =
module memory,
>>>> including its data executable before freeing it???
>>>=20
>>> All the code you're looking at is IMO a very awkward and possibly
>>> incorrect of doing what's actually necessary: putting the direct map
>>> the way it wants to be.
>>>=20
>>> Can't we shove this entirely mess into vunmap?  Have a flag (as part
>>> of vmalloc like in Rick's patch or as a flag passed to a vfree =
variant
>>> directly) that makes the vunmap code that frees the underlying pages
>>> also reset their permissions?
>>>=20
>>> Right now, we muck with set_memory_rw() and set_memory_nx(), which
>>> both have very awkward (and inconsistent with each other!) semantics
>>> when called on vmalloc memory.  And they have their own flushes, =
which
>>> is inefficient.  Maybe the right solution is for vunmap to remove =
the
>>> vmap area PTEs, call into a function like set_memory_rw() that =
resets
>>> the direct maps to their default permissions *without* flushing, and
>>> then to do a single flush for everything.  Or, even better, to cause
>>> the change_page_attr code to do the flush and also to flush the vmap
>>> area all at once so that very small free operations can flush single
>>> pages instead of flushing globally.
>>=20
>> Thanks for the explanation. I read it just after I realized that =
indeed the
>> whole purpose of this code is to get cpa_process_alias()
>> update the corresponding direct mapping.
>>=20
>> This thing (pageattr.c) indeed seems over-engineered and very =
unintuitive.
>> Right now I have a list of patch-sets that I owe, so I don=E2=80=99t =
have the time
>> to deal with it.
>>=20
>> But, I still think that disable_ro_nx() should not call =
set_memory_x().
>> IIUC, this breaks W+X of the direct-mapping which correspond with the =
module
>> memory. Does it ever stop being W+X?? I=E2=80=99ll have another look.
>=20
> Dunno.  I did once chase down a bug where some memory got freed while
> it was still read-only, and the results were hilarious and hard to
> debug, since the explosion happened long after the buggy code
> finished.

This piece of code causes me pain and misery.

So, it turns out that the direct map is *not* changed if you just change
the NX-bit. See change_page_attr_set_clr():

        /* No alias checking for _NX bit modifications */
        checkalias =3D (pgprot_val(mask_set) | pgprot_val(mask_clr)) !=3D =
_PAGE_NX;

How many levels of abstraction are broken in the way? What would happen
if somebody tries to change the NX-bit and some other bit in the PTE?
Luckily, I don=E2=80=99t think someone does=E2=80=A6 at least for now.

So, again, I think the change I proposed makes sense. nios2 does not =
have
set_memory_x() and it will not be affected.

[ I can add a comment, although I don=E2=80=99t have know if nios2 has =
an NX bit,
and I don=E2=80=99t find any code that defines PTEs. Actually where is =
pte_present()
of nios2 being defined? Whatever. ]

