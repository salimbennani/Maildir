Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:41:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2DAC15804C1
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 22:39:53 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 22:39:53 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AytPTwxEMs1D5Ewvjlu+yX51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7ypcSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfDI2y?=
 =?us-ascii?q?bIwBAOgPPehFt4nwpVkAoBSjCQSiGO/g1CRIi2Tq0aEmyektDRvL0BA8E98IrX?=
 =?us-ascii?q?/arM/1NKAXUe2t0qbIyTLDb/NX2Tf49ofIaQssof6JXb1qcMrRzVMjGB/CjlWV?=
 =?us-ascii?q?r4HuIjCb1vwVvmSF8+ZtVvijh3M6pwxyuDSj2Mkhh4nTio4IyF3I7Th1zJs0KN?=
 =?us-ascii?q?GiVkJ2btypHIFNuy2HKYd6WN4uTmF2tCs817YIo4S0fDIQx5Qi3xPfa+KIc4yP?=
 =?us-ascii?q?4h/7UOaRICx4hG5+eL6liBay91Wgxvf7Vsmu31ZGtitFkt/SuXARzxHf9NSLR/?=
 =?us-ascii?q?hn8ku8xDqC1Brf5v9KLE00j6bXNpwszqY1lpUJsETDGiH2mF/xjK+Tbkgk4/an?=
 =?us-ascii?q?6+H6Yrn/u5CTKZF0hR/6Mqg3gcO/Bvk4Mg4SUGeF4uSw07nj/Uz6QLpUlPE3nb?=
 =?us-ascii?q?TZvYjeJcQaoK65HgBU3pwi6xa5EzepztAYkWMbI1JCfRKKlI7pO1bIIPD3C/e/?=
 =?us-ascii?q?nk6gkDBxx/DJJrHhGInCLmDfkLf9erZw80pcyAswzd9B/Z5VBawBLen3Wk/wst?=
 =?us-ascii?q?zYExA4Pxa1w+bhFNVyyIceVXiTDa+eNaOB+WKO/f8ldumQeJcO6nG6L/k+++Wo?=
 =?us-ascii?q?i3g/llkAO66z0twSYXG8G/1gZEKBfXvrhMxGCGoPo08yQfLnjA6/VyVObSO3Vq?=
 =?us-ascii?q?M4+jZpEY+jEMLPS56ghPmb0T6mE4ZKTmZBDF+KDDHvbYrTQOoGai+ZPpp8lCcZ?=
 =?us-ascii?q?X6OqUY4r2EKSs1r/0KZPNOfY+iQE85nk0Zw94uTJnhg0+SZ5ScCAyWyEUkluk2?=
 =?us-ascii?q?8ITiNw16d68mJnzVLW3Kx/g/1dGMd76PZAUwN8PpnZnL8yMMz7Rg+UJoTBc12h?=
 =?us-ascii?q?WNjzRGhpFt8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAADuwghchxHrdtBkHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJijBNfiy6CDYkjbo08gXMSAQEYFIdVIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCBsOIwyCNgUCAxoBBoJcAwMBAiQZAQUKDB0BAgECAQIGAQEFGikIAwEfE?=
 =?us-ascii?q?QEFARwHEgWDHIFpAQMUAQEEmh08jAkWBQEXgncFhEAKGScNXROBJAIGEoddgWu?=
 =?us-ascii?q?BKIEcF4F/gRGNbgKJKocHUYQCi1UJkTcLGIlgh1CJC49QAgQCBAUCBQ8hgSWCD?=
 =?us-ascii?q?XCDPIIbDBcSgziKYGWBB4hlgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AmAADuwghchxHrdtBkHQEBBQEHBQGBUQgBCwGBMIJijBN?=
 =?us-ascii?q?fiy6CDYkjbo08gXMSAQEYFIdVIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJcAwMBAiQZAQUKDB0BAgECAQIGAQEFGikIAwEfEQEFARwHEgWDHIF?=
 =?us-ascii?q?pAQMUAQEEmh08jAkWBQEXgncFhEAKGScNXROBJAIGEoddgWuBKIEcF4F/gRGNb?=
 =?us-ascii?q?gKJKocHUYQCi1UJkTcLGIlgh1CJC49QAgQCBAUCBQ8hgSWCDXCDPIIbDBcSgzi?=
 =?us-ascii?q?KYGWBB4hlgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,321,1539673200"; 
   d="scan'208";a="55143440"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 22:39:52 -0800
Received: from localhost ([::1]:39099 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUnKB-0003hZ-CX
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 01:39:51 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:52805)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gUnHJ-0001Sr-82
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 01:36:54 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <elohimes@gmail.com>) id 1gUnHB-0003Os-LM
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 01:36:51 -0500
Received: from mail-pg1-x544.google.com ([2607:f8b0:4864:20::544]:46198)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <elohimes@gmail.com>) id 1gUnH9-0003MD-Hw
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 01:36:45 -0500
Received: by mail-pg1-x544.google.com with SMTP id w7so10179284pgp.13
	for <qemu-devel@nongnu.org>; Wed, 05 Dec 2018 22:36:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=R8PT06pUE8dn1kFgVY/VcsbF2I2WIcg1CFzPd6hORKs=;
	b=HYDg3s0ott3FOOANmNqmUBMkE4p7+F9fKma7LNDwrgsz5EncOYFMnvlxNTKE8xxrEu
	4m0pvH+NNDCz0iTdmmfCMb3XUZVmVGZgAH/NdMFK8DklQVFzXJNIF/KEYBlYDBt1+i3N
	qHZhzSMdMCsT1flNfEsIT8/afoqiSbNbGKQ1oosMCRH2scTRyQcxTrcj9heoxAjQYvLE
	Xul9wQ/KeIHKiDdAVkj5f1MLGHRT57h1CAIVO+V1RlM4Kk+Ls6t5HgEWIEWQMWWgDshW
	8Mdfu2KOaug2EAd0mxlBbM0RJ+WbtsNU+wKa6pGPHQd5nrlnHY2FViktc7wZRcERVkf8
	oTtw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=R8PT06pUE8dn1kFgVY/VcsbF2I2WIcg1CFzPd6hORKs=;
	b=Sunuft/FOFda1PVXFr1bZwtVWyxTRHuaY8fw+GRsKfxYv37F5xURTAfoIRPs2Dzfh9
	8g7dIc0vRI3FUN8AN2MIrnM+7JwICP8GvP9NG6GKVzq5baCHo3wZ0rWfB0QIj+I0TTTU
	MIfWE42kyJ/YyDkuUUGQ3o0kJCOyxZfVHXDzXrRwpFJbNQPEdLIKz3QIIgRnbjCW6RIi
	9+eP26O+mmDE//PMKsSHOuzfTmEBMejDRLyl25UBStMTZ9DWa4ofN4ZKt5lIuBgX+WpQ
	/D0DixkGCpng/mt5+B4NY6Ton2S5GSyKSuVDRiVkwKtcOAsNLHl9S1Xb51MjOTO/Xbnc
	WZDA==
X-Gm-Message-State: AA+aEWZNVpwbJteOuO5n4wHdhVZvvfEQmDj0Q5bi/YSsqsCdEsGoXdUk
	+4Vf7WWNKEM6469zxsYZMTM=
X-Google-Smtp-Source: AFSGD/VqmpF44YSesIdOVq/5P84B04IiibEwdBKJzlhNlDw/G3Wysms8Vo/wBg8lfphhlpPor6i/2A==
X-Received: by 2002:a63:6ecf:: with SMTP id j198mr23484012pgc.3.1544078201664; 
	Wed, 05 Dec 2018 22:36:41 -0800 (PST)
Received: from yongji-Ubuntu.internal.baidu.com ([116.247.112.152])
	by smtp.gmail.com with ESMTPSA id
	x186sm26175249pfb.59.2018.12.05.22.36.38
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 05 Dec 2018 22:36:41 -0800 (PST)
From: elohimes@gmail.com
X-Google-Original-From: xieyongji@baidu.com
To: mst@redhat.com,
	marcandre.lureau@redhat.com
Date: Thu,  6 Dec 2018 14:35:48 +0800
Message-Id: <20181206063552.6701-3-xieyongji@baidu.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181206063552.6701-1-xieyongji@baidu.com>
References: <20181206063552.6701-1-xieyongji@baidu.com>
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 2607:f8b0:4864:20::544
Subject: [Qemu-devel] [PATCH for-4.0 2/6] vhost-user: Add shared memory to
 record inflight I/O
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: nixun@baidu.com, qemu-devel@nongnu.org, lilin24@baidu.com,
	zhangyu31@baidu.com, chaiwen@baidu.com, Xie Yongji <xieyongji@baidu.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: Xie Yongji <xieyongji@baidu.com>

This introduces a new message VHOST_USER_SET_VRING_INFLIGHT
to support offering shared memory to backend to record
its inflight I/O.

With this new message, the backend is able to restart without
missing I/O which would cause I/O hung for block device.

Signed-off-by: Xie Yongji <xieyongji@baidu.com>
Signed-off-by: Chai Wen <chaiwen@baidu.com>
Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
---
 hw/virtio/vhost-user.c            | 69 +++++++++++++++++++++++++++++++
 hw/virtio/vhost.c                 |  8 ++++
 include/hw/virtio/vhost-backend.h |  4 ++
 include/hw/virtio/vhost-user.h    |  8 ++++
 4 files changed, 89 insertions(+)

diff --git a/hw/virtio/vhost-user.c b/hw/virtio/vhost-user.c
index e09bed0e4a..4c0e64891d 100644
--- a/hw/virtio/vhost-user.c
+++ b/hw/virtio/vhost-user.c
@@ -19,6 +19,7 @@
 #include "sysemu/kvm.h"
 #include "qemu/error-report.h"
 #include "qemu/sockets.h"
+#include "qemu/memfd.h"
 #include "sysemu/cryptodev.h"
 #include "migration/migration.h"
 #include "migration/postcopy-ram.h"
@@ -52,6 +53,7 @@ enum VhostUserProtocolFeature {
     VHOST_USER_PROTOCOL_F_CONFIG = 9,
     VHOST_USER_PROTOCOL_F_SLAVE_SEND_FD = 10,
     VHOST_USER_PROTOCOL_F_HOST_NOTIFIER = 11,
+    VHOST_USER_PROTOCOL_F_INFLIGHT_SHMFD = 12,
     VHOST_USER_PROTOCOL_F_MAX
 };
 
@@ -89,6 +91,7 @@ typedef enum VhostUserRequest {
     VHOST_USER_POSTCOPY_ADVISE  = 28,
     VHOST_USER_POSTCOPY_LISTEN  = 29,
     VHOST_USER_POSTCOPY_END     = 30,
+    VHOST_USER_SET_VRING_INFLIGHT = 31,
     VHOST_USER_MAX
 } VhostUserRequest;
 
@@ -147,6 +150,11 @@ typedef struct VhostUserVringArea {
     uint64_t offset;
 } VhostUserVringArea;
 
+typedef struct VhostUserVringInflight {
+    uint32_t size;
+    uint32_t idx;
+} VhostUserVringInflight;
+
 typedef struct {
     VhostUserRequest request;
 
@@ -169,6 +177,7 @@ typedef union {
         VhostUserConfig config;
         VhostUserCryptoSession session;
         VhostUserVringArea area;
+        VhostUserVringInflight inflight;
 } VhostUserPayload;
 
 typedef struct VhostUserMsg {
@@ -1739,6 +1748,58 @@ static bool vhost_user_mem_section_filter(struct vhost_dev *dev,
     return result;
 }
 
+static int vhost_user_set_vring_inflight(struct vhost_dev *dev, int idx)
+{
+    struct vhost_user *u = dev->opaque;
+
+    if (!virtio_has_feature(dev->protocol_features,
+                            VHOST_USER_PROTOCOL_F_INFLIGHT_SHMFD)) {
+        return 0;
+    }
+
+    if (!u->user->inflight[idx].addr) {
+        Error *err = NULL;
+
+        u->user->inflight[idx].size = qemu_real_host_page_size;
+        u->user->inflight[idx].addr = qemu_memfd_alloc("vhost-inflight",
+                                      u->user->inflight[idx].size,
+                                      F_SEAL_GROW | F_SEAL_SHRINK | F_SEAL_SEAL,
+                                      &u->user->inflight[idx].fd, &err);
+        if (err) {
+            error_report_err(err);
+            u->user->inflight[idx].addr = NULL;
+            return -1;
+        }
+    }
+
+    VhostUserMsg msg = {
+        .hdr.request = VHOST_USER_SET_VRING_INFLIGHT,
+        .hdr.flags = VHOST_USER_VERSION,
+        .payload.inflight.size = u->user->inflight[idx].size,
+        .payload.inflight.idx = idx,
+        .hdr.size = sizeof(msg.payload.inflight),
+    };
+
+    if (vhost_user_write(dev, &msg, &u->user->inflight[idx].fd, 1) < 0) {
+        return -1;
+    }
+
+    return 0;
+}
+
+void vhost_user_inflight_reset(VhostUserState *user)
+{
+    int i;
+
+    for (i = 0; i < VIRTIO_QUEUE_MAX; i++) {
+        if (!user->inflight[i].addr) {
+            continue;
+        }
+
+        memset(user->inflight[i].addr, 0, user->inflight[i].size);
+    }
+}
+
 VhostUserState *vhost_user_init(void)
 {
     VhostUserState *user = g_new0(struct VhostUserState, 1);
@@ -1756,6 +1817,13 @@ void vhost_user_cleanup(VhostUserState *user)
             munmap(user->notifier[i].addr, qemu_real_host_page_size);
             user->notifier[i].addr = NULL;
         }
+
+        if (user->inflight[i].addr) {
+            munmap(user->inflight[i].addr, user->inflight[i].size);
+            user->inflight[i].addr = NULL;
+            close(user->inflight[i].fd);
+            user->inflight[i].fd = -1;
+        }
     }
 }
 
@@ -1790,4 +1858,5 @@ const VhostOps user_ops = {
         .vhost_crypto_create_session = vhost_user_crypto_create_session,
         .vhost_crypto_close_session = vhost_user_crypto_close_session,
         .vhost_backend_mem_section_filter = vhost_user_mem_section_filter,
+        .vhost_set_vring_inflight = vhost_user_set_vring_inflight,
 };
diff --git a/hw/virtio/vhost.c b/hw/virtio/vhost.c
index 569c4053ea..2ca7b4e841 100644
--- a/hw/virtio/vhost.c
+++ b/hw/virtio/vhost.c
@@ -973,6 +973,14 @@ static int vhost_virtqueue_start(struct vhost_dev *dev,
         return -errno;
     }
 
+    if (dev->vhost_ops->vhost_set_vring_inflight) {
+        r = dev->vhost_ops->vhost_set_vring_inflight(dev, vhost_vq_index);
+        if (r) {
+            VHOST_OPS_DEBUG("vhost_set_vring_inflight failed");
+            return -errno;
+        }
+    }
+
     state.num = virtio_queue_get_last_avail_idx(vdev, idx);
     r = dev->vhost_ops->vhost_set_vring_base(dev, &state);
     if (r) {
diff --git a/include/hw/virtio/vhost-backend.h b/include/hw/virtio/vhost-backend.h
index 81283ec50f..8110e09089 100644
--- a/include/hw/virtio/vhost-backend.h
+++ b/include/hw/virtio/vhost-backend.h
@@ -104,6 +104,9 @@ typedef int (*vhost_crypto_close_session_op)(struct vhost_dev *dev,
 typedef bool (*vhost_backend_mem_section_filter_op)(struct vhost_dev *dev,
                                                 MemoryRegionSection *section);
 
+typedef int (*vhost_set_vring_inflight_op)(struct vhost_dev *dev,
+                                           int idx);
+
 typedef struct VhostOps {
     VhostBackendType backend_type;
     vhost_backend_init vhost_backend_init;
@@ -142,6 +145,7 @@ typedef struct VhostOps {
     vhost_crypto_create_session_op vhost_crypto_create_session;
     vhost_crypto_close_session_op vhost_crypto_close_session;
     vhost_backend_mem_section_filter_op vhost_backend_mem_section_filter;
+    vhost_set_vring_inflight_op vhost_set_vring_inflight;
 } VhostOps;
 
 extern const VhostOps user_ops;
diff --git a/include/hw/virtio/vhost-user.h b/include/hw/virtio/vhost-user.h
index fd660393a0..ff13433153 100644
--- a/include/hw/virtio/vhost-user.h
+++ b/include/hw/virtio/vhost-user.h
@@ -17,11 +17,19 @@ typedef struct VhostUserHostNotifier {
     bool set;
 } VhostUserHostNotifier;
 
+typedef struct VhostUserInflight {
+    void *addr;
+    uint32_t size;
+    int fd;
+} VhostUserInflight;
+
 typedef struct VhostUserState {
     CharBackend *chr;
     VhostUserHostNotifier notifier[VIRTIO_QUEUE_MAX];
+    VhostUserInflight inflight[VIRTIO_QUEUE_MAX];
 } VhostUserState;
 
+void vhost_user_inflight_reset(VhostUserState *user);
 VhostUserState *vhost_user_init(void);
 void vhost_user_cleanup(VhostUserState *user);
 
-- 
2.17.1


