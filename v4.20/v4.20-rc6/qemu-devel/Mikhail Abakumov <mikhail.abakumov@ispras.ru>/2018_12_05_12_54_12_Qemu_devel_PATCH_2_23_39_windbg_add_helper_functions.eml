Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:52:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D3F5D580433
	for <like.xu@linux.intel.com>; Wed,  5 Dec 2018 05:12:15 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga001-1.jf.intel.com with ESMTP; 05 Dec 2018 05:12:15 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AfQM4YxHXzPTuy/7wMeXmOZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ7yosywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VDK/5KlpVRDokj?=
 =?us-ascii?q?8KOT4n/m/ZicJ/jqxbrxyuqBNjzIDafZmVOfh8cK7SYN8XS3ZNUdhKVyFaHoOx?=
 =?us-ascii?q?bZECA/YdMetCrYTwoUYFoxukBQmrAePi0jhGhn713a06yeshEAXG1xE8Et0Vqn?=
 =?us-ascii?q?vUr8j1NKIVUeCr0aLFyjDDb/JV2Tf98ofIcxQhreuWUr1ra8XRylQvFwbCjlWO?=
 =?us-ascii?q?soHlPiiV1vwXs2eB9OpsT/ivi3M+pgx3vzOhxd8sh5HXio4JyV3I7zh1zJs2KN?=
 =?us-ascii?q?GiVkJ2b96pHIFNuyyYL4d7QcMvT3t1tCs11LEKo4O3cDUIxZg92RLTdf2Kfo6V?=
 =?us-ascii?q?6Rz5TumROy13hHd9dbK/mRmy9U+gx/X4Vsm1y1ZKsjFFnsPDtnALyhzf8M+HSu?=
 =?us-ascii?q?Fy/ku52DaP0R7c6v1cLEwqiabWKIQtzqMtmpcQq0jPACH7lUXsgKOLdEgo4u2o?=
 =?us-ascii?q?5P7mYrXiqJ+cLYh0igTmP6Q3hMO/BPk4PhETUGeF5+Szyrnj8VTiT7VNk/02lL?=
 =?us-ascii?q?XWv47BJcgcoq65AgxV3Zg55xewEjeryNAYnXgBLFJYdxOLlYnpO1fSIP/mCfez?=
 =?us-ascii?q?mUijkDBux/3dOL3hBZPNLnfFkLf8Z7p97FRcyAUrwdBF+51UEq0BIO70WkLpsN?=
 =?us-ascii?q?zYDxw5PBKuz+foFdVwzYceWWOJAq+EP6Leq16I5uQzI+aSYI8ZoiryK/8g562m?=
 =?us-ascii?q?sHkihFVIfbW1xYBFLze8H+96OAOfZnzjhMpHFn0F+Q83TejvgVvFViZPZnG0RO?=
 =?us-ascii?q?Ul6zQmTY6rE4rHFb2rm6GLiSKyH5lKYTJfB1WRVHvlaYiAHu0BcT+fOdNJlDsC?=
 =?us-ascii?q?Wr68DYg72ka1qQX4xrF7e/fS4TASrpn51dJ4tNHUwAg/8CExA8mD3mWlSWZykW?=
 =?us-ascii?q?UVATgs0/NRu0t4n3KC0qhxgvgQPNZa5O5MVRlyYZvdzOxzCtS0UwjIfcqMT0iO?=
 =?us-ascii?q?Q86+GzgqCMgslYxdK31hEsmv20iQlxGhBKUYwuSG?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BpAABqzgdchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBKYN5iHiLL4FogSGRI4UtgXMUGAMRhDsDgxQiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIGw4jDII2BQIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQG?=
 =?us-ascii?q?QWDHAGCAQEDAaRvfDOKK4ELixOBVz+BEDSCKoUQgyqCVwKPezOQKAcCgiAEhCI?=
 =?us-ascii?q?9ileKSoZlmH6BRoINTTKBAQhWgU4Jgh4Xg2CKQG+BB4hRVYF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0BpAABqzgdchxHrdtBkHgEGBwaBUQkLAYEwgTmBKYN5iHi?=
 =?us-ascii?q?LL4FogSGRI4UtgXMUGAMRhDsDgxQiNAkNAQMBAQEBAQECARMBAQEKCwkIGw4jD?=
 =?us-ascii?q?II2BQIDGAmCXAMDAQIgBB8KKQMDAQIGAQEkAiIEAgIDAUMQGQWDHAGCAQEDAaR?=
 =?us-ascii?q?vfDOKK4ELixOBVz+BEDSCKoUQgyqCVwKPezOQKAcCgiAEhCI9ileKSoZlmH6BR?=
 =?us-ascii?q?oINTTKBAQhWgU4Jgh4Xg2CKQG+BB4hRVYF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="42835068"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 05 Dec 2018 05:12:12 -0800
Received: from localhost ([::1]:34149 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUWyJ-0006WU-89
	for like.xu@linux.intel.com; Wed, 05 Dec 2018 08:12:11 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:34243)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWgx-0002dY-Sl
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:16 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWgw-0006Yi-Tj
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:15 -0500
Received: from mail.ispras.ru ([83.149.199.45]:50512)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUWgw-0006YU-G5
	for qemu-devel@nongnu.org; Wed, 05 Dec 2018 07:54:14 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id AF367540082;
	Wed,  5 Dec 2018 15:54:13 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Wed, 05 Dec 2018 15:54:12 +0300
Message-ID: <154401445205.8440.15265963166925713090.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
References: <154401431697.8440.845616703562380651.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH 2 23/39] windbg: add helper functions
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add helper functions for serialization and deserialization kernel structures to
byte buffer.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 target/i386/windbgstub.c |  123 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 123 insertions(+)

diff --git a/target/i386/windbgstub.c b/target/i386/windbgstub.c
index 5d47d5c9e9..e2ed2b3105 100644
--- a/target/i386/windbgstub.c
+++ b/target/i386/windbgstub.c
@@ -280,6 +280,129 @@ static InitedAddr kdDebuggerDataBlock;
 static InitedAddr kdVersion;
 #endif /* TARGET_I386 */
 
+__attribute__ ((unused)) /* unused yet */
+static void windbg_set_dr(CPUState *cs, int index, target_ulong value)
+{
+    X86CPU *cpu = X86_CPU(cs);
+    CPUX86State *env = &cpu->env;
+
+    switch (index) {
+    case 0 ... 3:
+        env->dr[index] = value;
+        return;
+    case 6:
+        env->dr[6] = value | DR6_FIXED_1;
+        return;
+    case 7:
+        cpu_x86_update_dr7(env, value);
+        return;
+    }
+}
+
+/* copy from gdbstub.c */
+__attribute__ ((unused)) /* unused yet */
+static void windbg_set_sr(CPUState *cs, int sreg, uint16_t selector)
+{
+    X86CPU *cpu = X86_CPU(cs);
+    CPUX86State *env = &cpu->env;
+
+    if (selector != env->segs[sreg].selector) {
+#if defined(CONFIG_USER_ONLY)
+        cpu_x86_load_seg(env, sreg, selector);
+#else
+        unsigned int limit, flags;
+        target_ulong base;
+
+        if (!(env->cr[0] & CR0_PE_MASK) || (env->eflags & VM_MASK)) {
+            int dpl = (env->eflags & VM_MASK) ? 3 : 0;
+            base = selector << 4;
+            limit = 0xffff;
+            flags = DESC_P_MASK | DESC_S_MASK | DESC_W_MASK |
+                    DESC_A_MASK | (dpl << DESC_DPL_SHIFT);
+        } else {
+            if (!cpu_x86_get_descr_debug(env, selector, &base, &limit,
+                                         &flags)) {
+                return;
+            }
+        }
+        cpu_x86_load_seg_cache(env, sreg, selector, base, limit, flags);
+#endif
+    }
+}
+
+#define rwuw_p(ptr, var, is_read)                                              \
+    do {                                                                       \
+        if (is_read) {                                                         \
+            var = lduw_p(ptr);                                                 \
+        } else {                                                               \
+            stw_p(ptr, var);                                                   \
+        }                                                                      \
+    } while (0)
+
+#define rwl_p(ptr, var, is_read)                                               \
+    do {                                                                       \
+        if (is_read) {                                                         \
+            var = ldl_p(ptr);                                                  \
+        } else {                                                               \
+            stl_p(ptr, var);                                                   \
+        }                                                                      \
+    } while (0)
+
+#define rwtul_p(ptr, var, is_read)                                             \
+    do {                                                                       \
+        if (is_read) {                                                         \
+            var = ldtul_p(ptr);                                                \
+        } else {                                                               \
+            sttul_p(ptr, var);                                                 \
+        }                                                                      \
+    } while (0)
+
+#define RW_DR(ptr, cs, dr_index, is_read)                                      \
+    do {                                                                       \
+        if (is_read) {                                                         \
+            windbg_set_dr(cs, dr_index, ldtul_p(ptr));                         \
+        } else {                                                               \
+            sttul_p(ptr, X86_CPU(cs)->env.dr[dr_index]);                       \
+        }                                                                      \
+    } while (0)
+
+#define RW_SR(ptr, cs, sr_index, is_read)                                      \
+    do {                                                                       \
+        if (is_read) {                                                         \
+            windbg_set_sr(cs, sr_index, lduw_p(ptr));                          \
+        } else {                                                               \
+            stw_p(ptr, X86_CPU(cs)->env.segs[R_CS].selector);                  \
+        }                                                                      \
+    } while (0)
+
+#define RW_CR(ptr, cs, cr_index, is_read)                                      \
+    do {                                                                       \
+        if (is_read) {                                                         \
+            cpu_x86_update_cr##cr_index(env, (int32_t) ldtul_p(ptr));          \
+        } else {                                                               \
+            sttul_p(ptr, (target_ulong) X86_CPU(cs)->env.cr[cr_index]);        \
+        }                                                                      \
+    } while (0)
+
+#define CASE_FIELD(stct, field, field_size, block)                             \
+    case offsetof(stct, field):                                                \
+        field_size = sizeof_field(stct, field);                                \
+        block;                                                                 \
+        break;
+
+#define CASE_FIELD_X32_64(stct, field_x32, field_x64, field_size, block) \
+    CASE_FIELD(stct, TARGET_SAFE(field_x32, field_x64), field_size, block)
+
+#ifdef TARGET_X86_64
+#define CASE_FIELD_X32(stct, field, field_size, block)
+#define CASE_FIELD_X64(stct, field, field_size, block) \
+    CASE_FIELD(stct, field, field_size, block)
+#else  /* TARGET_I386 */
+#define CASE_FIELD_X64(stct, field, field_size, block)
+#define CASE_FIELD_X32(stct, field, field_size, block) \
+    CASE_FIELD(stct, field, field_size, block)
+#endif /* TARGET_I386 */
+
 static bool find_KPCR(CPUState *cs)
 {
     X86CPU *cpu = X86_CPU(cs);


