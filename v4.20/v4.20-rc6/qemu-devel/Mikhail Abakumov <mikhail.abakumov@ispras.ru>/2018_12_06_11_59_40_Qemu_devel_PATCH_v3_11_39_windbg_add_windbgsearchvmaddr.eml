Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:06 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 710ED58042F
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:13:46 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 04:13:46 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A4hQo9RVgYoBbUpYgF0NDxbGtI0zV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYbRGHt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/XlMJ+gqFVrxCvpxNxzIHbfI6bOudmfq7ff90XSndNU8hNWyNfGYOx?=
 =?us-ascii?q?dJcPAugbMOpEs4XwvVkDoB2jDgesHuPvzTpIi2fx06070OQhERvJ3A0kH9kTrH?=
 =?us-ascii?q?nbt8/6NKQPUeCwy6nI0yjIYvRT2Tf864jIcgouofCIXb5qa8Xe0lMgFwDYjlWV?=
 =?us-ascii?q?rozlISiY1uUWs2iD9epvT/mvh3Q9qwFsuzWiwNonhIrRho8N1FzI6SZ0zJwoKd?=
 =?us-ascii?q?GlS0N3e8CoHZVQui2AKod7QNsuTmJotSog17ELtoC3cDIXxJg6xRPTceKLf5aJ?=
 =?us-ascii?q?7x/lSe2fOy13hGh/d7K6nxuy8Vavyun7VsSs1FZKrzFFksXXtnwX2BzT7NWHRu?=
 =?us-ascii?q?F6/ke71jaDzwHT6udaLkAojafXNYItz70qmpYOrEjOHTX6lFv4gaKWbEko5+ql?=
 =?us-ascii?q?5/ziYrr8p5+cM4F0ihv5MqQrgsG/GPo3Mg0TX2SC5OuzyqPj8lP9QLlTlfI2lb?=
 =?us-ascii?q?TZsJbGKssFva61BAtV0ocg6xmhFTun38kYkGEDLFJEfhKHkofoN0vPIPD+Efew?=
 =?us-ascii?q?nVCsnC13yPDBO73sGZPNLn/FkLfue7Z99lRQyA0pzdBQ/55UEK0OIOrvWk/ts9?=
 =?us-ascii?q?zVFhs5Mw23w+n5Etl82Z4eVHmLAq+YNqPSrFCJ6vguI+mKeI8apjL9J+I56P7p?=
 =?us-ascii?q?iH9q0WIbZrSjiJsLdGijTLMhJ0SCfWGqhNAHHmEX+A0kQ6vvgVyGVDdVIHGqQ6?=
 =?us-ascii?q?M74Cp8EY+jEMLPS56ghO+82jymFMhTb2FCFlfeCHrtasCIVukBbGeIL9Z8nycY?=
 =?us-ascii?q?fb6mTYAnyFeprgCt0KdtLOff5ngFs4n+3sN+/ezZmEIO8mltAsGAlm2AUWxwtm?=
 =?us-ascii?q?UPQTAwweZ4u0Mu5E2E1P1dgv9YHN1Xr9pDWwQnMJnCh7h/CtPyUwPFON6DQVW7?=
 =?us-ascii?q?R9K4KTAqVsg42JkUfhAuSJ2Zkhnf0n/yUPcunLuRCcls/w=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ArAADFEQlchxHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgmKDeoh4jRaSeoR5gXMUGBSEOwODGCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQg?=
 =?us-ascii?q?bDi+CNgUCAxgJglwDAwECICMKKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICAQMBp?=
 =?us-ascii?q?UaBL4orgQuLE4FXP4FEimSCVwKPfTOQLwcCgiAEhCOLF4pLhmosmF+BRoINTTK?=
 =?us-ascii?q?BAQhWgU6CJxeOIG+BB4hwgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ArAADFEQlchxHrdtBkHgEGBwaBUQkLAYEwgmKDeoh4jRa?=
 =?us-ascii?q?SeoR5gXMUGBSEOwODGCI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDi+CNgUCAxgJg?=
 =?us-ascii?q?lwDAwECICMKKQMDAQIGAQEkAiIEAgIDAUMQGQWDHIICAQMBpUaBL4orgQuLE4F?=
 =?us-ascii?q?XP4FEimSCVwKPfTOQLwcCgiAEhCOLF4pLhmosmF+BRoINTTKBAQhWgU6CJxeOI?=
 =?us-ascii?q?G+BB4hwgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55174857"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:13:44 -0800
Received: from localhost ([::1]:40384 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUsXH-0000Az-Sj
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:13:43 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41477)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsJq-00082h-95
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:59:54 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsJm-0004hx-9Q
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:59:50 -0500
Received: from mail.ispras.ru ([83.149.199.45]:59912)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <mikhail.abakumov@ispras.ru>) id 1gUsJl-0004hi-S0
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 06:59:46 -0500
Received: from Misha-PC.lan02.inno (unknown [85.142.117.226])
	by mail.ispras.ru (Postfix) with ESMTPSA id 1427E540089;
	Thu,  6 Dec 2018 14:59:45 +0300 (MSK)
From: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
To: qemu-devel@nongnu.org
Date: Thu, 06 Dec 2018 14:59:40 +0300
Message-ID: <154409758028.5432.10253854347982820034.stgit@Misha-PC.lan02.inno>
In-Reply-To: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
References: <154409751316.5432.3325938832238028060.stgit@Misha-PC.lan02.inno>
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 3.x [fuzzy]
X-Received-From: 83.149.199.45
Subject: [Qemu-devel] [PATCH v3 11/39] windbg: add windbg_search_vmaddr
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: sw@weilnetz.de, lprosek@redhat.com, dovgaluk@ispras.ru,
	rkagan@virtuozzo.com, pbonzini@redhat.com, den@openvz.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add function to search in virtual memory.
Implemented Boyer-Moore search algorithm.

Signed-off-by: Mikhail Abakumov <mikhail.abakumov@ispras.ru>
Signed-off-by: Pavel Dovgalyuk <dovgaluk@ispras.ru>
---
 include/exec/windbgstub-utils.h |    4 +
 windbgstub-utils.c              |  120 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 124 insertions(+)

diff --git a/include/exec/windbgstub-utils.h b/include/exec/windbgstub-utils.h
index e076227b39..2760684cfb 100644
--- a/include/exec/windbgstub-utils.h
+++ b/include/exec/windbgstub-utils.h
@@ -59,4 +59,8 @@ const char *kd_pkt_type_name(int id);
 bool windbg_on_load(void);
 void windbg_on_reset(void);
 
+InitedAddr windbg_search_vmaddr(CPUState *cs, target_ulong start,
+                                target_ulong finish, const uint8_t *pattern,
+                                int pLen);
+
 #endif /* WINDBGSTUB_UTILS_H */
diff --git a/windbgstub-utils.c b/windbgstub-utils.c
index 968e5cb2dd..6c5a86f667 100644
--- a/windbgstub-utils.c
+++ b/windbgstub-utils.c
@@ -80,6 +80,126 @@ static const char *kd_packet_type_names[] = {
     "PACKET_TYPE_MAX",
 };
 
+static void prep_bmbc(const uint8_t *pattern, int pLen, int bmBc[])
+{
+    int i;
+
+    for (i = 0; i < 256; ++i) {
+        bmBc[i] = pLen;
+    }
+    for (i = 0; i < pLen - 1; ++i) {
+        bmBc[pattern[i]] = pLen - i - 1;
+    }
+}
+
+static void prep_suffixes(const uint8_t *pattern, int pLen, int *suff)
+{
+    int f, g, i;
+
+    suff[pLen - 1] = pLen;
+    f = 0;
+    g = pLen - 1;
+    for (i = pLen - 2; i >= 0; --i) {
+        if (i > g && suff[i + pLen - 1 - f] < i - g) {
+            suff[i] = suff[i + pLen - 1 - f];
+        } else {
+            if (i < g) {
+                g = i;
+            }
+            f = i;
+            while (g >= 0 && pattern[g] == pattern[g + pLen - 1 - f]) {
+                --g;
+            }
+            suff[i] = f - g;
+        }
+    }
+}
+
+static void prep_bmgs(const uint8_t *pattern, int pLen, int bmGs[])
+{
+    int i, j, suff[pLen];
+
+    prep_suffixes(pattern, pLen, suff);
+
+    for (i = 0; i < pLen; ++i) {
+        bmGs[i] = pLen;
+    }
+
+    j = 0;
+    for (i = pLen - 1; i >= 0; --i) {
+        if (suff[i] == i + 1) {
+            for (; j < pLen - 1 - i; ++j) {
+                if (bmGs[j] == pLen) {
+                    bmGs[j] = pLen - 1 - i;
+                }
+            }
+        }
+    }
+
+    for (i = 0; i <= pLen - 2; ++i) {
+        bmGs[pLen - 1 - suff[i]] = pLen - 1 - i;
+    }
+}
+
+static int search_boyermoore(const uint8_t *data, int dLen,
+                             const uint8_t *pattern, int pLen, int bmGs[],
+                             int bmBc[])
+{
+    int i;
+    int j = 0;
+    while (j <= dLen - pLen) {
+        i = pLen - 1;
+        while (i >= 0 && pattern[i] == data[i + j]) {
+            --i;
+        }
+        if (i < 0) {
+            return j;
+        } else {
+            j += MAX(bmGs[i], bmBc[data[i + j]] - pLen + 1 + i);
+        }
+    }
+    return -1;
+}
+
+InitedAddr windbg_search_vmaddr(CPUState *cs, target_ulong start,
+                                target_ulong finish, const uint8_t *pattern,
+                                int pLen)
+{
+    InitedAddr ret = {
+        .addr = 0,
+        .is_init = false,
+    };
+    int bmGs[pLen], bmBc[256];
+    int find;
+    target_ulong offset = start;
+    target_ulong step = MIN(MAX(finish - start, 0x10000), pLen * 2);
+
+    if (finish <= start || pLen > finish - start) {
+        return ret;
+    }
+
+    uint8_t *buf = g_new(uint8_t, step);
+
+    prep_bmgs(pattern, pLen, bmGs);
+    prep_bmbc(pattern, pLen, bmBc);
+
+    while (offset < finish) {
+        step = MIN(step, finish - offset);
+        if (cpu_memory_rw_debug(cs, offset, buf, step, 0) == 0) {
+            find = search_boyermoore(buf, step, pattern, pLen, bmGs, bmBc);
+            if (find >= 0) {
+                ret.addr = offset + find;
+                ret.is_init = true;
+                break;
+            }
+        }
+        offset += step - pLen;
+    }
+
+    g_free(buf);
+    return ret;
+}
+
 const char *kd_api_name(int id)
 {
     return (id >= DbgKdMinimumManipulate && id < DbgKdMaximumManipulate)


