Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:45:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B561A580443
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 04:45:21 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga007-1.jf.intel.com with ESMTP; 06 Dec 2018 04:45:21 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Av1FeuBDf0PYxtcL02CAFUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP37rsSwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfAIy8?=
 =?us-ascii?q?YYQAAe0PM+hboIfyu0YArQO8CAeuC+7j1zFFimPo0q0hyOkhDQPL0BA8E98UrH?=
 =?us-ascii?q?jYsNP4P7oSX+Cvy6nIyC3OYPFL2Tfn6InDbxUvofaQXbJ3b8ra1E4iFgPYjlWK?=
 =?us-ascii?q?qY3pJjCV1uMRs2ic8eptTuKuhHQhqw5svDeuyd4gipXXiY0Pz1DI7z95wJssKN?=
 =?us-ascii?q?C+VUV1YsakHYNOuy2GNIZ6WN4uT3xrtSog1LELt562cDIXxJkl3xLTdeaIf5SW?=
 =?us-ascii?q?7h/mVeueOjR1iXd5dL+6mhq961asxfD5W8Sx3ltGsjdJn9/RvX4XzRPT8NKISv?=
 =?us-ascii?q?5l80ehxzmP0wfT5/lAIUA1jqrbN4UhzqQ/lpoVrETPBCj2mF/5jKOOd0Uk/Pan?=
 =?us-ascii?q?6/j/b7n4upORNJV4hhzjPqktgMCzH+o1PwgUU2SG++mwzLjj8lf4QLVOgP02iK?=
 =?us-ascii?q?7ZsJXCKMQCuKG5BhJV3p8+5BmhETepztAYkWAcI1JCZRKHiZTmNE/VIPz/Cfe/?=
 =?us-ascii?q?glesnylxy/HJI73sGpHNLnnFkLf8crdx8U9cyAwvzd9B45JYEK0OIPX2WkLqst?=
 =?us-ascii?q?zYCRk5MwOyw+b6Etl90ZkeWW2XDq+DLKzSqUOI5v4oI+SUYI8VuTX9JOY/6//h?=
 =?us-ascii?q?kH80glsdfaiv3ZsKZ3G0BPVmI0OFYXXyhtcNC3sFvg07TL+itVuZTDQGZ2quR7?=
 =?us-ascii?q?luoXY/CZm6FsHFQYaihqHH2z20WZhfZ2RDA1bLFm/0doKCQLAVZSePZ8NsjDEA?=
 =?us-ascii?q?BoWnUJIrgBSntQvmzOh+I+/JvyEVq5/nkcJ4/vDejg0a8ztyAMKAlWaXQDZvg2?=
 =?us-ascii?q?kKSjQqib15ulF30VyZ0KJ10MBfQJZe4/RJUwI3LrbTyuV7D5b5XQeLNoOETFGm?=
 =?us-ascii?q?Q9CrGhk+S9swx5kFZEMrX53oixnZ1COsD6UY0biWHpE974rG0nTxLto7wHHDnu?=
 =?us-ascii?q?F1ilA8ScJJOXerwKpi7QXaGqbTnkmZnrrsfqMZimqFvmKY0UKUsU1YWRI2WqLA?=
 =?us-ascii?q?FzhLY1DKhc706kPLU/mlDrFxYSVbzsvXG7ZQe5XKiklBWr+3KcnEcieynHu3Gz?=
 =?us-ascii?q?6Zz7WAYZqvZ2gU2WPHFR5XwEgo4X+aOF1mVW+aqGXEAWkrTAq3bg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AhAACEGQlcmBHrdtBkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwKiaCEoV6ToYqjTyJEo48FIFiERgUhECDFiI0CQ0BAwEBAQEBAQIBEwEBAQE?=
 =?us-ascii?q?BCAsLBhsOIwyCNgUCAxoBBoJbAQEBAQIBAQIkGQEBBAopAQICAQECBgEBChUpC?=
 =?us-ascii?q?AMBHTYGARIFglFLgWoDDQgBAwGkYYFsM4J2AQEFhQQNghQIh2+DE4EcgVc/gRF?=
 =?us-ascii?q?GgkyCV4ITMIVCiS2BeYRZM1OPLi4JgiAEgSqKSoNGikuGaokOhXmKBIFGgg0zG?=
 =?us-ascii?q?jKDLYIbDBcSiU+EP2+BAgUhE4g8gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AhAACEGQlcmBHrdtBkHgEGBwaBUQkLAYEwKiaCEoV6ToY?=
 =?us-ascii?q?qjTyJEo48FIFiERgUhECDFiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOIwyCN?=
 =?us-ascii?q?gUCAxoBBoJbAQEBAQIBAQIkGQEBBAopAQICAQECBgEBChUpCAMBHTYGARIFglF?=
 =?us-ascii?q?LgWoDDQgBAwGkYYFsM4J2AQEFhQQNghQIh2+DE4EcgVc/gRFGgkyCV4ITMIVCi?=
 =?us-ascii?q?S2BeYRZM1OPLi4JgiAEgSqKSoNGikuGaokOhXmKBIFGgg0zGjKDLYIbDBcSiU+?=
 =?us-ascii?q?EP2+BAgUhE4g8gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="42996794"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 04:44:47 -0800
Received: from localhost ([::1]:40588 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUt1K-0001Um-Rn
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 07:44:46 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47555)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <yury-kotov@yandex-team.ru>) id 1gUsgO-0000y7-5M
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:23:12 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <yury-kotov@yandex-team.ru>) id 1gUsfA-0007JC-V2
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:21:57 -0500
Received: from forwardcorp1o.cmail.yandex.net ([37.9.109.47]:52480)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <yury-kotov@yandex-team.ru>)
	id 1gUsf9-0007II-VB
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 07:21:52 -0500
Received: from mxbackcorp1o.mail.yandex.net (mxbackcorp1o.mail.yandex.net
	[IPv6:2a02:6b8:0:1a2d::301])
	by forwardcorp1o.cmail.yandex.net (Yandex) with ESMTP id 5AA562177F;
	Thu,  6 Dec 2018 15:21:49 +0300 (MSK)
Received: from localhost (localhost [::1])
	by mxbackcorp1o.mail.yandex.net (nwsmtp/Yandex) with ESMTP id
	S2vihradbi-Ln0Wutxg; Thu, 06 Dec 2018 15:21:49 +0300
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yandex-team.ru;
	s=default; 
	t=1544098909; bh=4nHiMTk/Wb4WYK/GVFE4wOxiBgv7JluaqFzgiVJjSL0=;
	h=From:To:Cc:In-Reply-To:References:Subject:Date:Message-Id;
	b=wlvl7rbPGtCAfsJwPEkMLyr9GzgdQcHNCGyJbBFGD+BIzaNOaj5x3ok4qwct/nO8K
	IvMDKcHf5gu/ZLbFurNG170C+tEtwZIDVg/fg8dLCAyhC69/Nqo8YHtjYNCQkUzT3b
	w0LEneTc/+jcr6sik9d4MCaLGDJ9LqJ3gIjOIj3w=
Authentication-Results: mxbackcorp1o.mail.yandex.net;
	dkim=pass header.i=@yandex-team.ru
X-Yandex-Sender-Uid: 1120000000071945
Received: by sas1-fc7737ec834f.qloud-c.yandex.net with HTTP;
	Thu, 06 Dec 2018 15:21:49 +0300
From: Yury Kotov <yury-kotov@yandex-team.ru>
To: "elohimes@gmail.com" <elohimes@gmail.com>,
	"marcandre.lureau@redhat.com" <marcandre.lureau@redhat.com>,
	"mst@redhat.com" <mst@redhat.com>
In-Reply-To: <20181206063552.6701-6-xieyongji@baidu.com>
References: <20181206063552.6701-1-xieyongji@baidu.com>
	<20181206063552.6701-6-xieyongji@baidu.com>
MIME-Version: 1.0
X-Mailer: Yamail [ http://yandex.ru ] 5.0
Date: Thu, 06 Dec 2018 15:21:49 +0300
Message-Id: <932521544098909@sas1-fc7737ec834f.qloud-c.yandex.net>
Content-Transfer-Encoding: 7bit
Content-Type: text/plain
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 37.9.109.47
Subject: Re: [Qemu-devel] [PATCH for-4.0 5/6] vhost-user-blk: Add support
 for reconnecting backend
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: "nixun@baidu.com" <nixun@baidu.com>,
	"qemu-devel@nongnu.org" <qemu-devel@nongnu.org>,
	"lilin24@baidu.com" <lilin24@baidu.com>,
	"zhangyu31@baidu.com" <zhangyu31@baidu.com>,
	"chaiwen@baidu.com" <chaiwen@baidu.com>, Xie Yongji <xieyongji@baidu.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

06.12.2018, 09:38, "elohimes@gmail.com" <elohimes@gmail.com>:
> From: Xie Yongji <xieyongji@baidu.com>
>
> Since the new message VHOST_USER_SET_VRING_INFLIGHT,
> the backend is able to restart safely. This patch
> allow qemu to reconnect the backend after connection
> closed.
>
> Signed-off-by: Xie Yongji <xieyongji@baidu.com>
> Signed-off-by: Ni Xun <nixun@baidu.com>
> Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
> ---
>  hw/block/vhost-user-blk.c | 169 +++++++++++++++++++++++++++--
>  include/hw/virtio/vhost-user-blk.h | 4 +
>  2 files changed, 161 insertions(+), 12 deletions(-)
>
> diff --git a/hw/block/vhost-user-blk.c b/hw/block/vhost-user-blk.c
> index 1451940845..663e91bcf6 100644
> --- a/hw/block/vhost-user-blk.c
> +++ b/hw/block/vhost-user-blk.c
> @@ -101,7 +101,7 @@ const VhostDevConfigOps blk_ops = {
>      .vhost_dev_config_notifier = vhost_user_blk_handle_config_change,
>  };
>
> -static void vhost_user_blk_start(VirtIODevice *vdev)
> +static int vhost_user_blk_start(VirtIODevice *vdev)
>  {
>      VHostUserBlk *s = VHOST_USER_BLK(vdev);
>      BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(vdev)));
> @@ -110,13 +110,13 @@ static void vhost_user_blk_start(VirtIODevice *vdev)
>
>      if (!k->set_guest_notifiers) {
>          error_report("binding does not support guest notifiers");
> - return;
> + return -ENOSYS;
>      }
>
>      ret = vhost_dev_enable_notifiers(&s->dev, vdev);
>      if (ret < 0) {
>          error_report("Error enabling host notifiers: %d", -ret);
> - return;
> + return ret;
>      }
>
>      ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, true);
> @@ -140,12 +140,13 @@ static void vhost_user_blk_start(VirtIODevice *vdev)
>          vhost_virtqueue_mask(&s->dev, vdev, i, false);
>      }
>
> - return;
> + return ret;
>
>  err_guest_notifiers:
>      k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
>  err_host_notifiers:
>      vhost_dev_disable_notifiers(&s->dev, vdev);
> + return ret;
>  }
>
>  static void vhost_user_blk_stop(VirtIODevice *vdev)
> @@ -164,7 +165,6 @@ static void vhost_user_blk_stop(VirtIODevice *vdev)
>      ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
>      if (ret < 0) {
>          error_report("vhost guest notifier cleanup failed: %d", ret);
> - return;
>      }
>
>      vhost_dev_disable_notifiers(&s->dev, vdev);
> @@ -174,21 +174,39 @@ static void vhost_user_blk_set_status(VirtIODevice *vdev, uint8_t status)
>  {
>      VHostUserBlk *s = VHOST_USER_BLK(vdev);
>      bool should_start = status & VIRTIO_CONFIG_S_DRIVER_OK;
> + int ret;
>
>      if (!vdev->vm_running) {
>          should_start = false;
>      }
>
> - if (s->dev.started == should_start) {
> + if (s->should_start == should_start) {
> + return;
> + }
> +
> + if (!s->connected || s->dev.started == should_start) {
> + s->should_start = should_start;
>          return;
>      }
>
>      if (should_start) {
> - vhost_user_blk_start(vdev);
> + s->should_start = true;
> + /* make sure we ignore fake guest kick by
> + * vhost_dev_enable_notifiers() */
> + barrier();
> + ret = vhost_user_blk_start(vdev);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost start failed: %s",
> + strerror(-ret));
> + qemu_chr_fe_disconnect(&s->chardev);
> + }
>      } else {
>          vhost_user_blk_stop(vdev);
> + /* make sure we ignore fake guest kick by
> + * vhost_dev_disable_notifiers() */
> + barrier();
> + s->should_start = false;
>      }
> -
>  }
>
>  static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
> @@ -218,13 +236,22 @@ static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,
>  static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
>  {
>      VHostUserBlk *s = VHOST_USER_BLK(vdev);
> - int i;
> + int i, ret;
>
>      if (!(virtio_host_has_feature(vdev, VIRTIO_F_VERSION_1) &&
>          !virtio_vdev_has_feature(vdev, VIRTIO_F_VERSION_1))) {

This condition looks complicated. Is it correct? I'm not sure but may be
the second '!' is odd. Sorry, I know that it isn't part of this patch, but it
looks like this cond was added in one of your old patches.

>          return;
>      }
>
> + if (s->should_start) {
> + return;
> + }
> + s->should_start = true;
> +
> + if (!s->connected) {
> + return;
> + }
> +
>      if (s->dev.started) {
>          return;
>      }
> @@ -232,7 +259,13 @@ static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
>      /* Some guests kick before setting VIRTIO_CONFIG_S_DRIVER_OK so start
>       * vhost here instead of waiting for .set_status().
>       */
> - vhost_user_blk_start(vdev);
> + ret = vhost_user_blk_start(vdev);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost start failed: %s",
> + strerror(-ret));
> + qemu_chr_fe_disconnect(&s->chardev);
> + return;
> + }
>
>      /* Kick right away to begin processing requests already in vring */
>      for (i = 0; i < s->dev.nvqs; i++) {
> @@ -245,6 +278,106 @@ static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)
>      }
>  }
>
> +static void vhost_user_blk_reset(VirtIODevice *vdev)
> +{
> + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> +
> + if (s->vhost_user) {
> + vhost_user_inflight_reset(s->vhost_user);
> + }
> +}
> +
> +static int vhost_user_blk_connect(DeviceState *dev)
> +{
> + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> + int ret = 0;
> +
> + if (s->connected) {
> + return 0;
> + }
> + s->connected = true;
> +
> + s->dev.nvqs = s->num_queues;
> + s->dev.vqs = s->vqs;
> + s->dev.vq_index = 0;
> + s->dev.backend_features = 0;
> +
> + vhost_dev_set_config_notifier(&s->dev, &blk_ops);
> +
> + ret = vhost_dev_init(&s->dev, s->vhost_user, VHOST_BACKEND_TYPE_USER, 0);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost initialization failed: %s",
> + strerror(-ret));
> + return ret;
> + }
> +
> + if (s->should_start && !s->dev.started) {

It seems that `!s->dev.started` is always true here because
vhost_dev_init sets dev.started = 0 on success.

> + ret = vhost_user_blk_start(vdev);
> + if (ret < 0) {
> + error_report("vhost-user-blk: vhost start failed: %s",
> + strerror(-ret));
> + return ret;
> + }
> + }
> +
> + return 0;
> +}
> +
> +static void vhost_user_blk_disconnect(DeviceState *dev)
> +{
> + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> +
> + if (!s->connected) {
> + return;
> + }
> + s->connected = false;
> +
> + if (s->dev.started) {
> + vhost_user_blk_stop(vdev);
> + }
> +
> + vhost_dev_cleanup(&s->dev);
> +}
> +
> +static gboolean vhost_user_blk_watch(GIOChannel *chan, GIOCondition cond,
> + void *opaque)
> +{
> + DeviceState *dev = opaque;
> + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> +
> + qemu_chr_fe_disconnect(&s->chardev);
> +
> + return true;
> +}
> +
> +static void vhost_user_blk_event(void *opaque, int event)
> +{
> + DeviceState *dev = opaque;
> + VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> + VHostUserBlk *s = VHOST_USER_BLK(vdev);
> +
> + switch (event) {
> + case CHR_EVENT_OPENED:
> + if (vhost_user_blk_connect(dev) < 0) {
> + qemu_chr_fe_disconnect(&s->chardev);
> + return;
> + }
> + s->watch = qemu_chr_fe_add_watch(&s->chardev, G_IO_HUP,
> + vhost_user_blk_watch, dev);
> + break;
> + case CHR_EVENT_CLOSED:
> + vhost_user_blk_disconnect(dev);
> + if (s->watch) {
> + g_source_remove(s->watch);
> + s->watch = 0;
> + }
> + break;
> + }
> +}
> +
>  static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
>  {
>      VirtIODevice *vdev = VIRTIO_DEVICE(dev);
> @@ -284,8 +417,13 @@ static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
>                           vhost_user_blk_handle_output);
>      }
>
> + s->vqs = g_new(struct vhost_virtqueue, s->num_queues);
> + s->watch = 0;
> + s->should_start = false;
> + s->connected = true;
> +
>      s->dev.nvqs = s->num_queues;
> - s->dev.vqs = g_new(struct vhost_virtqueue, s->dev.nvqs);
> + s->dev.vqs = s->vqs;
>      s->dev.vq_index = 0;
>      s->dev.backend_features = 0;
>
> @@ -309,6 +447,9 @@ static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)
>          s->blkcfg.num_queues = s->num_queues;
>      }
>
> + qemu_chr_fe_set_handlers(&s->chardev, NULL, NULL, vhost_user_blk_event,
> + NULL, (void *)dev, NULL, true);
> +
>      return;
>
>  vhost_err:
> @@ -328,8 +469,11 @@ static void vhost_user_blk_device_unrealize(DeviceState *dev, Error **errp)
>      VHostUserBlk *s = VHOST_USER_BLK(dev);
>
>      vhost_user_blk_set_status(vdev, 0);
> + qemu_chr_fe_set_handlers(&s->chardev, NULL, NULL, NULL,
> + NULL, NULL, NULL, false);
>      vhost_dev_cleanup(&s->dev);
> - g_free(s->dev.vqs);
> +
> + g_free(s->vqs);
>      virtio_cleanup(vdev);
>
>      if (s->vhost_user) {
> @@ -379,6 +523,7 @@ static void vhost_user_blk_class_init(ObjectClass *klass, void *data)
>      vdc->set_config = vhost_user_blk_set_config;
>      vdc->get_features = vhost_user_blk_get_features;
>      vdc->set_status = vhost_user_blk_set_status;
> + vdc->reset = vhost_user_blk_reset;
>  }
>
>  static const TypeInfo vhost_user_blk_info = {
> diff --git a/include/hw/virtio/vhost-user-blk.h b/include/hw/virtio/vhost-user-blk.h
> index d52944aeeb..560bb21459 100644
> --- a/include/hw/virtio/vhost-user-blk.h
> +++ b/include/hw/virtio/vhost-user-blk.h
> @@ -37,6 +37,10 @@ typedef struct VHostUserBlk {
>      uint32_t config_wce;
>      struct vhost_dev dev;
>      VhostUserState *vhost_user;
> + struct vhost_virtqueue *vqs;
> + guint watch;
> + bool should_start;
> + bool connected;
>  } VHostUserBlk;
>
>  #endif
> --
> 2.17.1

Regards,
Yury

