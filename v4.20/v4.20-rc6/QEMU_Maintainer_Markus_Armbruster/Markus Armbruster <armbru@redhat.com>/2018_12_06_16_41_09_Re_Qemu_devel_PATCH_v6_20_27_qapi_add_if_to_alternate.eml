Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 86D84580375
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 08:43:23 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 08:43:23 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AEuesrRQ048DAuHzJWf2zOK9Pl9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa6zbReN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?YYsBAegOM+VWoIbyu1QAogawBRGuCe3txTJEm3H70bEk3OQ6CgzGwBUgEsgSvH?=
 =?us-ascii?q?jIttj4NqEfWv21wqnSyjXDautb1zDn54jScRAhvOqMVq9sfMrLzEkgDBnFjkiL?=
 =?us-ascii?q?qYz5ITyVzPkGvm+B4Op6UOKgkHQnqxxqrzi12Mgjl4nJiZgJylze6Sp5x4M1KM?=
 =?us-ascii?q?S+RUVmYtCkCINduz+GO4Z1WM8uXnxktSUgxrEYt5O2fDIGxIklyhLHdfCLb4yF?=
 =?us-ascii?q?7gj+WOufPzt0nm9pdbGxihqo70StyevxXdSu3llQtCpKiNzMu2gN1xPN7siHTe?=
 =?us-ascii?q?Nw/kOg2TaUywDT8ftIIU8ylarGMZIhxaQwlpULvUTCGC/5hln2gbeIekk4+eWk?=
 =?us-ascii?q?8fnrbqjlq5OGKYN5hAHzPr4zlsG9Geg4NxIBX2mf+eSyzr3j+kj5Ta1TjvIol6?=
 =?us-ascii?q?nZrYnWKtkFqa6nHQBV1p8v5A24Dze71tQXgWcILElCdBKDjojpOE/BLOr3DPei?=
 =?us-ascii?q?m1mslDZrx/bbPrzuGJnNL37DkKv/crZ58UJT1A0zzdVE6pJSDbEBJv3zWknstN?=
 =?us-ascii?q?DCCR85KQO0z/79CNphzoMeRX6PAqiBPaPWsF+I5fwgL/ODZY8Iozv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX+/yuoHCnoA6woiUPTx2hrFVT9Ie230Wa?=
 =?us-ascii?q?U66TcmToW8AsDGT4GphbWHmyCjApxRYHsBE12JDDLkepuJX6QxbjmPKJpkmz0A?=
 =?us-ascii?q?Sb/zUoIkyFSiuRH3z/99I/PJ9zYEnZTk0tdz+qvUjx5l7iF+DcmWzzSQSXpplH?=
 =?us-ascii?q?gDXT480fNDphlYw02IlIF+j+bZXfhO/f5AT09uMJfGxOV8B8r/HAbcZNqAVX68?=
 =?us-ascii?q?T9mmCC13RdU0lYwgeUF4TvCrlBPexGKDGbofjaGQGJEuuvbVxX37PdtV0XvK1K?=
 =?us-ascii?q?A9yVIhR50cZiWdmqdj+l2LVMbymEKDmvPvLPxE0Q=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAACFUAlcmBHrdtBjHgEGBwaBUwcLA?=
 =?us-ascii?q?YEwgTmBFhODeoh4iy+CDYkgji6BcxQYAxGEQIMXIjYHDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BAQEICwsGGw4jDII2BQIDGgEGglwBAgIBAQIgBB8KKQMCAQECBgEBChoCBR0EA?=
 =?us-ascii?q?gIDAQsBBBgxEwWDHAGBdAUIAQSmDHwziimBC4sUF4F/gRGDEoUBgwSCVwKPN5E?=
 =?us-ascii?q?oCYcEikIYgimHOYdUmQyBTQWCAXAVO4JsCYtkhG9AMYEHHIgngXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AtAACFUAlcmBHrdtBjHgEGBwaBUwcLAYEwgTmBFhODeoh?=
 =?us-ascii?q?4iy+CDYkgji6BcxQYAxGEQIMXIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGGw4jD?=
 =?us-ascii?q?II2BQIDGgEGglwBAgIBAQIgBB8KKQMCAQECBgEBChoCBR0EAgIDAQsBBBgxEwW?=
 =?us-ascii?q?DHAGBdAUIAQSmDHwziimBC4sUF4F/gRGDEoUBgwSCVwKPN5EoCYcEikIYgimHO?=
 =?us-ascii?q?YdUmQyBTQWCAXAVO4JsCYtkhG9AMYEHHIgngXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="54124384"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 08:43:22 -0800
Received: from localhost ([::1]:41897 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUwkD-0001Ok-2u
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 11:43:21 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:45846)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUwiP-0000II-4N
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:41:30 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <armbru@redhat.com>) id 1gUwiL-0000Rs-VB
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:41:29 -0500
Received: from mx1.redhat.com ([209.132.183.28]:51360)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <armbru@redhat.com>) id 1gUwiL-0000MY-IR
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 11:41:25 -0500
Received: from smtp.corp.redhat.com (int-mx06.intmail.prod.int.phx2.redhat.com
	[10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 3A8C231256BF
	for <qemu-devel@nongnu.org>; Thu,  6 Dec 2018 16:41:14 +0000 (UTC)
Received: from blackfin.pond.sub.org (ovpn-116-56.ams2.redhat.com
	[10.36.116.56])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 0C1B95C730;
	Thu,  6 Dec 2018 16:41:11 +0000 (UTC)
Received: by blackfin.pond.sub.org (Postfix, from userid 1000)
	id 940C4113860E; Thu,  6 Dec 2018 17:41:09 +0100 (CET)
From: Markus Armbruster <armbru@redhat.com>
To: =?utf-8?Q?Marc-Andr=C3=A9?= Lureau <marcandre.lureau@redhat.com>
References: <20180706105753.26700-1-marcandre.lureau@redhat.com>
	<20180706105753.26700-21-marcandre.lureau@redhat.com>
Date: Thu, 06 Dec 2018 17:41:09 +0100
In-Reply-To: <20180706105753.26700-21-marcandre.lureau@redhat.com>
	(=?utf-8?Q?=22Marc-Andr=C3=A9?= Lureau"'s message of "Fri, 6 Jul 2018
	12:57:46 +0200")
Message-ID: <87woom8v6i.fsf@dusky.pond.sub.org>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/26.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.46]);
	Thu, 06 Dec 2018 16:41:14 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v6 20/27] qapi: add 'if' to alternate
 members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> writes:

> Add 'if' key to alternate members:
>
> { 'alternate': 'TestIfAlternate', 'data':
>   { 'alt': { 'type': 'TestStruct', 'if': 'COND' } } }
>
> Generated code is not changed by this patch but with "qapi: add #if
> conditions to generated code".
>
> Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
> ---
>  scripts/qapi/common.py                  | 10 +++++-----
>  tests/qapi-schema/qapi-schema-test.json |  6 +++++-
>  tests/qapi-schema/qapi-schema-test.out  |  9 ++++++++-
>  3 files changed, 18 insertions(+), 7 deletions(-)
>
> diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
> index e1bd9a22ba..b3b64a60bf 100644
> --- a/scripts/qapi/common.py
> +++ b/scripts/qapi/common.py
> @@ -843,7 +843,7 @@ def check_alternate(expr, info):
>      for (key, value) in members.items():
>          check_name(info, "Member of alternate '%s'" % name, key)
>          source =3D "member '%s' of alternate '%s'" % (key, name)
> -        check_known_keys(info, source, value, ['type'], [])
> +        check_known_keys(info, source, value, ['type'], ['if'])
>          typ =3D value['type']
>=20=20
>          # Ensure alternates have no type conflicts.
> @@ -1774,8 +1774,8 @@ class QAPISchema(object):
>                                                self._make_members(data, i=
nfo),
>                                                None))
>=20=20
> -    def _make_variant(self, case, typ):
> -        return QAPISchemaObjectTypeVariant(case, typ)
> +    def _make_variant(self, case, typ, ifcond):
> +        return QAPISchemaObjectTypeVariant(case, typ, ifcond)
>=20=20
>      def _make_simple_variant(self, case, typ, ifcond, info):
>          if isinstance(typ, list):
> @@ -1798,7 +1798,7 @@ class QAPISchema(object):
>                  name, info, doc, ifcond,
>                  'base', self._make_members(base, info))
>          if tag_name:
> -            variants =3D [self._make_variant(key, value['type'])
> +            variants =3D [self._make_variant(key, value['type'], value.g=
et('if'))
>                          for (key, value) in data.items()]
>              members =3D []
>          else:
> @@ -1819,7 +1819,7 @@ class QAPISchema(object):
>          name =3D expr['alternate']
>          data =3D expr['data']
>          ifcond =3D expr.get('if')
> -        variants =3D [self._make_variant(key, value['type'])
> +        variants =3D [self._make_variant(key, value['type'], value.get('=
if'))
>                      for (key, value) in data.items()]
>          tag_member =3D QAPISchemaObjectTypeMember('type', 'QType', False)
>          self._def_entity(
> diff --git a/tests/qapi-schema/qapi-schema-test.json b/tests/qapi-schema/=
qapi-schema-test.json
> index 6d3c6c0b53..df3edf9d89 100644
> --- a/tests/qapi-schema/qapi-schema-test.json
> +++ b/tests/qapi-schema/qapi-schema-test.json
> @@ -216,9 +216,13 @@
>  { 'command': 'TestIfUnionCmd', 'data': { 'union_cmd_arg': 'TestIfUnion' =
},
>    'if': 'defined(TEST_IF_UNION)' }
>=20=20
> -{ 'alternate': 'TestIfAlternate', 'data': { 'foo': 'int', 'bar': 'TestSt=
ruct' },
> +{ 'alternate': 'TestIfAlternate', 'data':
> +  { 'foo': 'int', 'alt_bar': { 'type': 'TestStruct', 'if': 'defined(TEST=
_IF_ALT_BAR)'} },

Let's break the long line betwen the members.

Why rename member 'bar' to 'alt_bar'?

>    'if': 'defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)' }
>=20=20
> +{ 'command': 'TestIfAlternateCmd', 'data': { 'alt_cmd_arg': 'TestIfAlter=
nate' },

Another long line.  And I'm feeling dense again: why does this change
belong to this patch?

> +  'if': 'defined(TEST_IF_ALT)' }
> +
>  { 'command': 'TestIfCmd', 'data':
>    { 'foo': 'TestIfStruct',
>      'bar': { 'type': 'TestIfEnum', 'if': 'defined(TEST_IF_CMD_BAR)' } },
> diff --git a/tests/qapi-schema/qapi-schema-test.out b/tests/qapi-schema/q=
api-schema-test.out
> index ac1069cf1f..cdbd5b87cc 100644
> --- a/tests/qapi-schema/qapi-schema-test.out
> +++ b/tests/qapi-schema/qapi-schema-test.out
> @@ -297,8 +297,15 @@ command TestIfUnionCmd q_obj_TestIfUnionCmd-arg -> N=
one
>  alternate TestIfAlternate
>      tag type
>      case foo: int
> -    case bar: TestStruct
> +    case alt_bar: TestStruct
> +        if ['defined(TEST_IF_ALT_BAR)']
>      if ['defined(TEST_IF_ALT) && defined(TEST_IF_STRUCT)']
> +object q_obj_TestIfAlternateCmd-arg
> +    member alt_cmd_arg: TestIfAlternate optional=3DFalse
> +    if ['defined(TEST_IF_ALT)']
> +command TestIfAlternateCmd q_obj_TestIfAlternateCmd-arg -> None
> +   gen=3DTrue success_response=3DTrue boxed=3DFalse oob=3DFalse preconfi=
g=3DFalse
> +    if ['defined(TEST_IF_ALT)']
>  object q_obj_TestIfCmd-arg
>      member foo: TestIfStruct optional=3DFalse
>      member bar: TestIfEnum optional=3DFalse

