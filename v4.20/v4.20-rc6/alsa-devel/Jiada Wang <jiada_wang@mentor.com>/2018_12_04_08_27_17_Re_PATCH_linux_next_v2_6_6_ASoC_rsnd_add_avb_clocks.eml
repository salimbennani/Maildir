Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:30:31 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8E97C580117;
	Tue,  4 Dec 2018 00:31:17 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 00:31:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A43gFixLB22tgGgiKo9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/r7rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsVtRuzBxKhBP/sxzJSmnP6waM33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvxNacdS/26w7PVxjrDdfxW3zj945XPfxAjoPGDR69/ftDJxkghDQzFiFqQ?=
 =?us-ascii?q?pJfgPzyL0OQNr2+b7/B6We2zjG4nrhh8rz6yzckvkonEnpwZxkzA+Clj3Yo4K8?=
 =?us-ascii?q?O0RFRmbdOnDJdcrSCXOoluTs8/TGxlujw2x7MJtJKheCUG1Y4rywPZZveaaYaH?=
 =?us-ascii?q?+AjjW/yUITpghHJqZra/hxGq/Ei+xe3zSNO03ExJriVbiNnMsG4C1xjJ5siAUP?=
 =?us-ascii?q?t98V+t2TeJ1w/N9uFJOV44mbbfJpI737I9mIQfvV7eEiL1hEn6lq6be0c89uit?=
 =?us-ascii?q?8evnY7HmppGGN49zjwHzKqAums25AeQlPQkCRmub9vqm1L3l40L5RKxGjvo4k6?=
 =?us-ascii?q?nfrp/aP98WprC2AwBLyIYv8RW/ACm80NQeg3YHKEhJeBWdj4jmI13OOuz3De+j?=
 =?us-ascii?q?g1Swlzdm3/TGPrziAprTNHTCn6rhcK15605dzgoz0N9e64hVCrEHPPL8REvxuM?=
 =?us-ascii?q?bEAR8+Ngy+2/znB8ll1oMCRWKPBbeUMKPIvl+J+uIgOe6MaJUVuDbgMfcl4fHu?=
 =?us-ascii?q?gGQ9mV8ce6mpwJQWZGq5HvRgP0WWf37sjs0dHmcNuwo0VPbqh0GaUT5Pe3ayWL?=
 =?us-ascii?q?ox5jM8CI24F4vDRYetgLqH3Ce8BZBWYmFGClaREXbnbYmEWvEMaD6MLc9liDAL?=
 =?us-ascii?q?Sb+hS4o53xG0qAD606ZnLvbT+iAAr53jz9h15+rQlR0o7zx7Fcad3nqJT2F1mG?=
 =?us-ascii?q?MIWjA30Lp+oUx71leMz6x4j+ZEGtxU4vNDSh06OoLEz+xmF9DyXRrMftSTR1ag?=
 =?us-ascii?q?WNmmBTAxQcg3w98BeEt9H9Sijhbe3yulGbMVlrqLBIAq/aLYxXT+O8F9y3Pe3q?=
 =?us-ascii?q?k7k1YmWtdPNXGhhqNn6gfcHZDJnFuDm6aqb6sc2jXN+3mFzWaJuEFYUwtwUaHe?=
 =?us-ascii?q?UHAbZ0vWq8n550zYQ7+vD7QnLhVOycqYJqRWbd3piE1MRO3/N9TGf2Kxh2CwCA?=
 =?us-ascii?q?6VybyWcorlZX8R3CXHB0gCiAAc43CGOBM6BiegpWLeETNvGUjuY0Pq7elxtne7?=
 =?us-ascii?q?QlUowAGNak1rz6C19QINhfyAV/MT2aoJuDsgqzVxG1a9w9LWCtqaqwp9ZqlcZs?=
 =?us-ascii?q?k94FNG1WLfuAxwJZigL6Fkhl4DfAV7pULu1xNrCopelcgmtm8lzA13KaiAylNO?=
 =?us-ascii?q?ayuY3YzsOr3QMmT95hSvZLDZ217A0Nea4LwA6OklpFr5ugGpFU0i82t83tlR0n?=
 =?us-ascii?q?uc4IjKDQUIXZLwVEY36wZ1p7XAbiYh4IPU0GVmMbOovT/ax9IpGOwlxw6gftdC?=
 =?us-ascii?q?Kq+LCBX+EswaB8e0LuwqlEOkbhYFPOBU6a41MNmqd/qA2K63IulgmCiqgnhA4I?=
 =?us-ascii?q?B4ykiM7TZzSvbU35YZxPGVxhGHVzbgg1i7qMD4hIdEaSsUHmWh0yjkBZddabFo?=
 =?us-ascii?q?coYPFGihPde3xtJ4h5P2X35Y9VijB04J2cOzeBqSaUD90hNU1UgNvXOnni64xS?=
 =?us-ascii?q?Rukz41tqqfwDDOw+P6eRsHO25HXmljgU33IYipidAXR0yobwkvlBu46kf23alb?=
 =?us-ascii?q?pKJjL2bNRUdEZTT5L2ZnUqGorLqNf9ZP6I80sSVQSOm8Y0qVSqT+oxsZ1CPvBX?=
 =?us-ascii?q?Beyyo4dzGpu5X5mQJ1iGSGIXZ3rXrZf9xwxBjF6NzdQ/5RwiQJRC1ihTbLAVi8?=
 =?us-ascii?q?OsGj/c+ImJfbruC+S2WhW4VTcCbxyoOMrim75WxsARCkm/Czm9vnERU10CPh1t?=
 =?us-ascii?q?lqUznIowj4YoXxy6u6NudndFFyBFDg88p6Bp1+kowoiZETw3cah4+Z/XoakWjp?=
 =?us-ascii?q?N9Vb1rnzbH4MRT4N3t7U7xLp2ExlLnKV2Y35Um+RzddmZ9m/emkWwD4y79hWCK?=
 =?us-ascii?q?eI67xJhS51olu7rQ3Le/R8kCkSyeAy6HEEmeEGoxQizj+SAr0JGUlYPCrslwmH?=
 =?us-ascii?q?7tykraVXYnqvfqa01EZkgd+hC7SCqBlGWHnlYpciATNw7sJnPVLQ133z75voed?=
 =?us-ascii?q?jKYtIVqx2UiAzAj+lOJZI1l/oKgzdnOG3nsX0kze47kQJh3ZWgsIebLGVt+bqz?=
 =?us-ascii?q?AgREOT3te8MT5jbtgL5FkcmM2ICvGohhFi8PXJv1Vv+oFDMStfL6NweBCjE8q3?=
 =?us-ascii?q?GbGabBEg+b8ktps3XPE5WzPXGNOHYZ1cliRAWaJEFHggAbRjA6kYAiFgyw2Mzt?=
 =?us-ascii?q?akR55i0S5l7lrBtD0PloOgL7Umfeogeodzg1RIKeLBpQ8gFN+UPVPdaC4eJ0Gi?=
 =?us-ascii?q?FS5oehoxCVKmyHewRICnkEW0yDB1D+J7mu+MPP8+6CCuqlKPvOZ7qOpPdaV/eJ?=
 =?us-ascii?q?w5Kvz4Rn8yyNNsWJInltEfk71lBfUnB+HsTTgy8PRDAPlyLRc86bow+x+i1poc?=
 =?us-ascii?q?C+8/TrWwPv6ZGMC7tINtVv9A65gb2eN+6Lnyt5LTdY1pURxX7H0rQf3VgSiz1w?=
 =?us-ascii?q?eDmpC7gPqSnNTKfIkK9NExEbcz9zNNdP768kxAZNJNXUisnr2b94lPI1D1ZFWE?=
 =?us-ascii?q?flmsGoY8wKPm68OEnGBEaNKLSJOznLz9vrbqO7TL1alP9UuAGouTaHD0/jOSyO?=
 =?us-ascii?q?lyXoVxCqK+1DkDuXMwBeuI6jdBZgEmzjTNPgah2mP957lzw2wbsohnzUMW4QKy?=
 =?us-ascii?q?Rzc0RIrreI9yNXnu1/G3Bd7npiNeSFmzyW7+/dKpYXt/tkGiV1l+JA73Q8xLtY?=
 =?us-ascii?q?9yVERP1zmCvPod9iuVCmku+TyjV5VBpCsCpEhIWOvRYqBaKMyJ1JVXfB/QhF32?=
 =?us-ascii?q?yIDBARpNp0Qonxv6lcy93OjpXhIS9F98nX/No0AsXSNMWddnEmNEytUGreFgwC?=
 =?us-ascii?q?Sz+mHWLSnUpQlLeV7HLD6tBuspX2lYomUrJBWUxzHeFMTgwxAN0dKZZfRS4/nP?=
 =?us-ascii?q?iQi8teoTLqrwTXRcNdpJGBU/WIAPDoNDHfgqlsfRYOzKjxNsIYMYitiGJ4bVwv?=
 =?us-ascii?q?voXDF0OYYtlLrWU1bA49rEx673F4QUU21kT5bRnr63gWQ63n1iUqgxdzNLx+vA?=
 =?us-ascii?q?zn5E06cx+T/HM9?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAABsOgZch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwEBgmgDfxQTg3mIGYwOgWglFJc1FIFiERgDEAGIDiI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwxCAQ4BgWQkAYJhAQEBAQMBAiAECwEFQ?=
 =?us-ascii?q?QYJAQEKFQMCAiYCAgNEEAYBDAEFAgEBAYMcAYIBBaQefDOEAgGBPYRygQuLEYI?=
 =?us-ascii?q?WgREnDIJfhEYjgxyCVwKPMHyQGgkFghkBBAOEXIo3BgIWgVtNhESCf4c7iQSBA?=
 =?us-ascii?q?4gChmmBRoINMxojgzwJgh4XiBuFSwFFMjEBgQQBAYEDigABAQ?=
X-IPAS-Result: =?us-ascii?q?A0ADAABsOgZch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwEBgmgDfxQTg3mIGYwOgWglFJc1FIFiERgDEAGIDiI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQoLCQgpIwxCAQ4BgWQkAYJhAQEBAQMBAiAECwEFQQYJAQEKFQMCAiY?=
 =?us-ascii?q?CAgNEEAYBDAEFAgEBAYMcAYIBBaQefDOEAgGBPYRygQuLEYIWgREnDIJfhEYjg?=
 =?us-ascii?q?xyCVwKPMHyQGgkFghkBBAOEXIo3BgIWgVtNhESCf4c7iQSBA4gChmmBRoINMxo?=
 =?us-ascii?q?jgzwJgh4XiBuFSwFFMjEBgQQBAYEDigABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="53716528"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 00:31:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726157AbeLDI2L (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 03:28:11 -0500
Received: from relay1.mentorg.com ([192.94.38.131]:39586 "EHLO
        relay1.mentorg.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725983AbeLDI2L (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 03:28:11 -0500
Received: from svr-orw-mbx-03.mgc.mentorg.com ([147.34.90.203])
        by relay1.mentorg.com with esmtps (TLSv1.2:ECDHE-RSA-AES256-SHA384:256)
        id 1gU638-0006sj-ST from Jiada_Wang@mentor.com ; Tue, 04 Dec 2018 00:27:22 -0800
Received: from [172.30.112.76] (147.34.91.1) by svr-orw-mbx-03.mgc.mentorg.com
 (147.34.90.203) with Microsoft SMTP Server (TLS) id 15.0.1320.4; Tue, 4 Dec
 2018 00:27:19 -0800
Subject: Re: [PATCH linux-next v2 6/6] ASoC: rsnd: add avb clocks
To: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>,
        <broonie@kernel.org>, <perex@perex.cz>, <tiwai@suse.com>,
        <kuninori.morimoto.gx@renesas.com>
CC: <alsa-devel@alsa-project.org>, <linux-kernel@vger.kernel.org>
References: <20181203112427.18324-1-jiada_wang@mentor.com>
 <e42bdbde-0d1a-eb1f-58af-ef4cf468ac38@mentor.com>
From: Jiada Wang <jiada_wang@mentor.com>
Message-ID: <92855669-0970-e6d6-fee6-2a0b97f6082b@mentor.com>
Date: Tue, 4 Dec 2018 17:27:17 +0900
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <e42bdbde-0d1a-eb1f-58af-ef4cf468ac38@mentor.com>
Content-Type: text/plain; charset="utf-8"; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: en-US
X-ClientProxiedBy: svr-orw-mbx-02.mgc.mentorg.com (147.34.90.202) To
 svr-orw-mbx-03.mgc.mentorg.com (147.34.90.203)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Vladimir

Thanks for your comments
I will address your findings in next version

Thanks,
Jiada

On 2018/12/03 21:53, Vladimir Zapolskiy wrote:
> Hi Jiada,
>
> On 12/03/2018 01:24 PM, jiada_wang@mentor.com wrote:
>> From: Jiada Wang <jiada_wang@mentor.com>
>>
>> There are AVB Counter Clocks in ADG, each clock has 12bits integral
>> and 8 bits fractional dividers which operates with S0D1Ï• clock.
>>
>> This patch registers 8 AVB Counter Clocks when clock-cells of
>> rcar_sound node is 2,
>>
>> Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
>> ---
>>   sound/soc/sh/rcar/adg.c  | 306 +++++++++++++++++++++++++++++++++++++--
>>   sound/soc/sh/rcar/gen.c  |   9 ++
>>   sound/soc/sh/rcar/rsnd.h |   9 ++
>>   3 files changed, 315 insertions(+), 9 deletions(-)
>>
>> diff --git a/sound/soc/sh/rcar/adg.c b/sound/soc/sh/rcar/adg.c
>> index 6768a66588eb..2c03d420ae76 100644
>> --- a/sound/soc/sh/rcar/adg.c
>> +++ b/sound/soc/sh/rcar/adg.c
>> @@ -5,6 +5,8 @@
>>   //  Copyright (C) 2013  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
>>   
>>   #include <linux/clk-provider.h>
>> +#include <linux/of_address.h>
>> +#include <dt-bindings/clock/renesas-adg.h>
> Drop the inclusion of the header above, see my comment to patch 5/6.
>
>>   #include "rsnd.h"
>>   
>>   #define CLKA	0
>> @@ -21,13 +23,33 @@
>>   
>>   #define BRRx_MASK(x) (0x3FF & x)
>>   
>> +#define ADG_CLK_NAME		"adg"
>> +#define AVB_CLK_NAME		"avb"
> Can you please remove two macro above and replace their usage by values in
> clk_register_avb() function?
>
> Also I don't think that it is good to hardcode parent clock name here,
> likely you should get it in runtime, see __clk_get_name().
>
>> +#define AVB_CLK_NUM		8
>> +#define AVB_CLK_NAME_SIZE	10
> The one macro above also can be removed in my opinion.
>
>> +#define AVB_MAX_RATE		25000000
>> +#define AVB_DIV_EN_COM		BIT(31)
>> +#define AVB_DIV_MASK		0x3ffff
>> +#define AVB_MAX_DIV		0x3ffc0
>> +
>>   static struct rsnd_mod_ops adg_ops = {
>>   	.name = "adg",
>>   };
>>   
>> +struct clk_avb {
>> +	struct clk_hw hw;
>> +	unsigned int idx;
>> +	struct rsnd_mod *mod;
>> +	/* lock reg access */
>> +	spinlock_t *lock;
>> +};
>> +
>> +#define to_clk_avb(_hw) container_of(_hw, struct clk_avb, hw)
>> +
>>   struct rsnd_adg {
>>   	struct clk *clk[CLKMAX];
>>   	struct clk *clkout[CLKOUTMAX];
>> +	struct clk *clkavb[AVB_CLK_NUM];
>>   	struct clk_onecell_data onecell;
>>   	struct rsnd_mod mod;
>>   	u32 flags;
>> @@ -37,6 +59,7 @@ struct rsnd_adg {
>>   
>>   	int rbga_rate_for_441khz; /* RBGA */
>>   	int rbgb_rate_for_48khz;  /* RBGB */
>> +	spinlock_t avb_lock;
>>   };
>>   
>>   #define LRCLK_ASYNC	(1 << 0)
>> @@ -408,6 +431,239 @@ void rsnd_adg_clk_control(struct rsnd_priv *priv, int enable)
>>   	}
>>   }
>>   
>> +static struct clk *rsnd_adg_clk_src_twocell_get(struct of_phandle_args *clkspec,
>> +						void *data)
>> +{
>> +	unsigned int clkidx = clkspec->args[1];
>> +	struct rsnd_adg *adg = data;
>> +	const char *type;
>> +	struct clk *clk;
>> +
>> +	switch (clkspec->args[0]) {
>> +	case ADG_FIX:
>> +		type = "fixed";
> Apparently you need 'type' local variable just to print an error message.
>
> Please remove the variable and update format strings accordingly.
>
>> +		if (clkidx >= CLKOUTMAX) {
>> +			pr_err("Invalid %s clock index %u\n", type,
>> +			       clkidx);
>> +			return ERR_PTR(-EINVAL);
>> +		}
>> +		clk = adg->clkout[clkidx];
>> +		break;
>> +	case ADG_AVB:
>> +		type = "avb";
>> +		if (clkidx >= AVB_CLK_NUM) {
>> +			pr_err("Invalid %s clock index %u\n", type,
>> +			       clkidx);
>> +			return ERR_PTR(-EINVAL);
>> +		}
>> +		clk = adg->clkavb[clkidx];
>> +		break;
>> +	default:
>> +		pr_err("Invalid ADG clock type %u\n", clkspec->args[0]);
>> +		return ERR_PTR(-EINVAL);
>> +	}
>> +
>> +	return clk;
>> +}
>> +
>> +static void clk_avb_div_write(struct rsnd_mod *mod, u32 data, int idx)
> unsigned int idx to match a type of 'struct clk_avb' field.
>
>> +{
>> +	switch (idx) {
>> +	case 0:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV0, data);
>> +		break;
>> +	case 1:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV1, data);
>> +		break;
>> +	case 2:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV2, data);
>> +		break;
>> +	case 3:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV3, data);
>> +		break;
>> +	case 4:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV4, data);
>> +		break;
>> +	case 5:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV5, data);
>> +		break;
>> +	case 6:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV6, data);
>> +		break;
>> +	case 7:
>> +		rsnd_mod_write(mod, AVB_CLK_DIV7, data);
>> +		break;
>> +	}
>> +}
>> +
>> +static u32 clk_avb_div_read(struct rsnd_mod *mod, int idx)
> unsigned int idx to match a type of 'struct clk_avb' field.
>
>> +{
>> +	u32 val = 0;
>> +
>> +	switch (idx) {
>> +	case 0:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV0);
>> +		break;
>> +	case 1:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV1);
>> +		break;
>> +	case 2:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV2);
>> +		break;
>> +	case 3:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV3);
>> +		break;
>> +	case 4:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV4);
>> +		break;
>> +	case 5:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV5);
>> +		break;
>> +	case 6:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV6);
>> +		break;
>> +	case 7:
>> +		val = rsnd_mod_read(mod, AVB_CLK_DIV7);
>> +		break;
>> +	}
>> +
>> +	return val;
>> +}
> Apparently the macro nature of rsnd_mod_read() and rsnd_mod_write()
> does not allow to define a helper mapping function from index into
> RSND_REG_AVB_CLK_DIVx, okay...
>
>> +
>> +static int clk_avb_is_enabled(struct clk_hw *hw)
>> +{
>> +	struct clk_avb *avb = to_clk_avb(hw);
>> +
>> +	return rsnd_mod_read(avb->mod, AVB_CLK_CONFIG) & BIT(avb->idx);
>> +}
>> +
>> +static int clk_avb_enabledisable(struct clk_hw *hw, int enable)
>> +{
>> +	struct clk_avb *avb = to_clk_avb(hw);
>> +	u32 val;
>> +
>> +	spin_lock(avb->lock);
>> +
>> +	val = rsnd_mod_read(avb->mod, AVB_CLK_CONFIG);
>> +	if (enable)
>> +		val |= BIT(avb->idx);
>> +	else
>> +		val &= ~BIT(avb->idx);
>> +	rsnd_mod_write(avb->mod, AVB_CLK_CONFIG,  val);
>> +
>> +	spin_unlock(avb->lock);
>> +
>> +	return 0;
>> +}
>> +
>> +static int clk_avb_enable(struct clk_hw *hw)
>> +{
>> +	return clk_avb_enabledisable(hw, 1);
>> +}
>> +
>> +static void clk_avb_disable(struct clk_hw *hw)
>> +{
>> +	clk_avb_enabledisable(hw, 0);
>> +}
>> +
>> +static unsigned long clk_avb_recalc_rate(struct clk_hw *hw,
>> +					 unsigned long parent_rate)
>> +{
>> +	struct clk_avb *avb = to_clk_avb(hw);
>> +	u32 div;
>> +
>> +	div = clk_avb_div_read(avb->mod, avb->idx) & AVB_DIV_MASK;
>> +	if (!div)
>> +		return parent_rate;
>> +
>> +	return parent_rate * 32 / div;
>> +}
>> +
>> +static unsigned int clk_avb_calc_div(unsigned long rate,
>> +				     unsigned long parent_rate)
>> +{
>> +	unsigned int div;
>> +
>> +	if (!rate)
>> +		rate = 1;
>> +
>> +	if (rate > AVB_MAX_RATE)
>> +		rate = AVB_MAX_RATE;
>> +
>> +	div = DIV_ROUND_CLOSEST(parent_rate * 32, rate);
>> +
>> +	if (div > AVB_MAX_DIV)
>> +		div = AVB_MAX_DIV;
>> +
>> +	return div;
>> +}
>> +
>> +static long clk_avb_round_rate(struct clk_hw *hw, unsigned long rate,
>> +			       unsigned long *parent_rate)
>> +{
>> +	unsigned int div = clk_avb_calc_div(rate, *parent_rate);
>> +
>> +	return (*parent_rate * 32) / div;
>> +}
>> +
>> +static int clk_avb_set_rate(struct clk_hw *hw, unsigned long rate,
>> +			    unsigned long parent_rate)
>> +{
>> +	struct clk_avb *avb = to_clk_avb(hw);
>> +	unsigned int div = clk_avb_calc_div(rate, parent_rate);
>> +	u32 val;
>> +
>> +	val = clk_avb_div_read(avb->mod, avb->idx) & ~AVB_DIV_MASK;
>> +	clk_avb_div_write(avb->mod, val | div, avb->idx);
>> +
>> +	return 0;
>> +}
>> +
>> +static const struct clk_ops clk_avb_ops = {
>> +	.enable = clk_avb_enable,
>> +	.disable = clk_avb_disable,
>> +	.is_enabled = clk_avb_is_enabled,
>> +	.recalc_rate = clk_avb_recalc_rate,
>> +	.round_rate = clk_avb_round_rate,
>> +	.set_rate = clk_avb_set_rate,
>> +};
>> +
>> +static struct clk *clk_register_avb(struct device *dev, struct rsnd_mod *mod,
>> +				    unsigned int id, spinlock_t *lock)
>> +{
>> +	struct clk_init_data init;
>> +	struct clk_avb *avb;
>> +	struct clk *clk;
>> +	char name[AVB_CLK_NAME_SIZE];
>> +	const char *parent_name = ADG_CLK_NAME;
>> +
>> +	avb = devm_kzalloc(dev, sizeof(*avb), GFP_KERNEL);
>> +	if (!avb)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	snprintf(name, AVB_CLK_NAME_SIZE, "%s%u", AVB_CLK_NAME, id);
>> +
>> +	avb->idx = id;
>> +	avb->lock = lock;
>> +	avb->mod = mod;
>> +
>> +	/* Register the clock. */
>> +	init.name = name;
>> +	init.ops = &clk_avb_ops;
>> +	init.flags = CLK_IS_BASIC;
>> +	init.parent_names = &parent_name;
>> +	init.num_parents = 1;
>> +
>> +	avb->hw.init = &init;
>> +
>> +	/* init DIV to a valid state */
>> +	clk_avb_div_write(avb->mod, avb->idx, AVB_MAX_DIV);
>> +
>> +	clk = devm_clk_register(dev, &avb->hw);
>> +
>> +	return clk;
>> +}
>> +
>>   static void rsnd_adg_get_clkin(struct rsnd_priv *priv,
>>   			       struct rsnd_adg *adg)
>>   {
>> @@ -436,6 +692,7 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
>>   	unsigned long req_48kHz_rate, req_441kHz_rate;
>>   	int i, req_size;
>>   	const char *parent_clk_name = NULL;
>> +	struct rsnd_mod *mod = rsnd_mod_get(adg);
>>   	static const char * const clkout_name[] = {
>>   		[CLKOUT]  = "audio_clkout",
>>   		[CLKOUT1] = "audio_clkout1",
>> @@ -540,21 +797,23 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
>>   	 */
>>   
>>   	of_property_read_u32(np, "#clock-cells", &count);
>> -	/*
>> -	 * for clkout
>> -	 */
>> -	if (!count) {
>> +
>> +	switch (count) {
>> +	case 0:
>> +		/*
>> +		 * for clkout
>> +		 */
>>   		clk = clk_register_fixed_rate(dev, clkout_name[CLKOUT],
>>   					      parent_clk_name, 0, req_rate[0]);
>>   		if (!IS_ERR(clk)) {
>>   			adg->clkout[CLKOUT] = clk;
>>   			of_clk_add_provider(np, of_clk_src_simple_get, clk);
>>   		}
>> -	}
>> -	/*
>> -	 * for clkout0/1/2/3
>> -	 */
>> -	else {
>> +		break;
>> +	case 1:
>> +		/*
>> +		 * for clkout0/1/2/3
>> +		 */
>>   		for (i = 0; i < CLKOUTMAX; i++) {
>>   			clk = clk_register_fixed_rate(dev, clkout_name[i],
>>   						      parent_clk_name, 0,
>> @@ -566,6 +825,33 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
>>   		adg->onecell.clk_num	= CLKOUTMAX;
>>   		of_clk_add_provider(np, of_clk_src_onecell_get,
>>   				    &adg->onecell);
>> +		break;
>> +	case 2:
>> +		/*
>> +		 * for clkout0/1/2/3 and avb clocks
>> +		 */
>> +		for (i = 0; i < CLKOUTMAX; i++) {
>> +			clk = clk_register_fixed_rate(dev, clkout_name[i],
>> +						      parent_clk_name, 0,
>> +						      req_rate[0]);
>> +			if (!IS_ERR(clk))
>> +				adg->clkout[i] = clk;
>> +		}
>> +
>> +		for (i = 0; i < AVB_CLK_NUM; i++) {
>> +			clk = clk_register_avb(dev, mod, i, &adg->avb_lock);
>> +			if (!IS_ERR(clk))
>> +				adg->clkavb[i] = clk;
>> +		}
>> +
>> +		of_clk_add_provider(np, rsnd_adg_clk_src_twocell_get, adg);
>> +
>> +		rsnd_mod_write(mod, AVB_CLK_CONFIG, AVB_DIV_EN_COM);
>> +
>> +		break;
>> +	default:
>> +		dev_err(dev, "Invalid clock-cell %d\n", count);
>> +		break;
>>   	}
>>   
>>   rsnd_adg_get_clkout_end:
>> @@ -612,6 +898,8 @@ int rsnd_adg_probe(struct rsnd_priv *priv)
>>   	if (!adg)
>>   		return -ENOMEM;
>>   
>> +	spin_lock_init(&adg->avb_lock);
>> +
>>   	ret = rsnd_mod_init(priv, &adg->mod, &adg_ops,
>>   		      NULL, 0, 0);
>>   	if (ret)
> --
> Best wishes,
> Vladimir

