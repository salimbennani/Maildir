Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:41:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B90C258014B;
	Tue,  4 Dec 2018 08:43:52 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 04 Dec 2018 08:43:52 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A2kO3BxAPOpfQRBNLDSvDUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/oMiwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95fWSJBHI2y?=
 =?us-ascii?q?cogBD+QOMulEsobypVUBrQCmBQSuH+7v1iNEi2Xq0aEmyektDwfL1xEgEdIUt3?=
 =?us-ascii?q?TUqc34OqgPXuCo1qbI1yjMb/RL0jjy8ofIdg4uofeQXbJxd8ra1E4iGB3YgVWN?=
 =?us-ascii?q?soPqITKU1voXvGif9OdgWuevhHQmqwF1uDSg2sAsiozQi48T11vK9j15zZ4rKd?=
 =?us-ascii?q?GkTEN3e8OoHZVOuy2AKod7Qd8uT3tptSs40rELuJ62cDIXxJg6yRPTceKLfoeG?=
 =?us-ascii?q?7x75SeqcLzh1iXR4c7ylnRmy61KvyujkW8m0zllKqi1Fn8HStnACyRPT8NKLSv?=
 =?us-ascii?q?hj8Ue73zaAyQTT5vtDIUAumqrXM58hwrgumZoPqUnPADP6lUHsgKOLeEgo5PKk?=
 =?us-ascii?q?5/nkb7n6vJORNo15hhn7Mqs0m8y/Beo4MhIJX2ie4em80Lzj/UvkQLRFl/E2kb?=
 =?us-ascii?q?fWsIrcJcsFoq61GghV04gl6xmhFTery8oYnXYZI1JfYh6HjJbmO0vIIP/mCfez?=
 =?us-ascii?q?mVOskC1kx/zeJL3uHo3NLmTfkLfmZbt9709cyAktwtxF6JNUF6oMIPbyWk/3qd?=
 =?us-ascii?q?zZAQU1Mw2yw+b7Ftp90pkSVn6IAq+cKKnSq0OH5vozI+mQY48YoDb9JOIk5/7y?=
 =?us-ascii?q?l3A5nkURfam03ZQNbnC4Ee9rI0GYYXrqn9cAHn0Gvgs4TOz2llKCVSRfaGq1X6?=
 =?us-ascii?q?I5/js7Ep6pDZ/fRoCxh7yMxCW7HppIaWxcCVCMFnHod4ODW/oXbCKSI8lhkiEL?=
 =?us-ascii?q?VLS7So8h0w2uuxH+y7Z9MuXU/SgYv4r51Ndp/+3TiQ0y9TtsAsuHyGGNT2Z0nm?=
 =?us-ascii?q?ASSz8sxq9/o1dwylOC0ah+nvxZGsZf5/JPUgcmK5Hcy/Z2BMz1WgLEZt2JUkqp?=
 =?us-ascii?q?Qs26ATEtSdI829wObFx7G9m4ihDD3jClA7kal7GQAJw086Tc32X+JspnynbG0r?=
 =?us-ascii?q?UhgEciQsdVKWKmgat//RDJB4HVi0WZi7qqdaME0SHQ7miD03SBsFtYUAFqV6XF?=
 =?us-ascii?q?Rm4QZk3RodT95UPCSruuBK8jMgtAz86CN6RLZsfojVVAWPfsJtDeb3itlGe3AB?=
 =?us-ascii?q?aC3qmMY5bye2UBwCXdD1AJnB0J8naYKwcyHCehrHjYDDx1C13vZVjh8e1/qHO9?=
 =?us-ascii?q?U081wBuGb0xn17qp5BEVgeaQRO8U3rIBoC0hsSl7HE6h39LKDNqNvxZhfKRZYd?=
 =?us-ascii?q?M6/FdH1WLYuxZhPpC6KKBinFoecwVxv0PhzBh3DoRAkc43rHIl1gZyKKSY0E9f?=
 =?us-ascii?q?eDOcx5z/JrrXKmzq9hC1d6HWwk3e0MqR+qoX8vs4r0vsvQ63GUsi6XloyMRV3G?=
 =?us-ascii?q?aG6ZXMDwoSVozxX10z9xh7obHafyY865nV1X1qLam7rDvC18g1C+sizxaqZ81f?=
 =?us-ascii?q?P7+cFA/uD80aANCjKew3m1Szch0IJuFT9K4uMMOgePuLw6qrPOdmnDK7gmVL+o?=
 =?us-ascii?q?F90kSQ9yViTu7ExYoKw/ad3gGfTTfzkE+hstzrmYBDfTwSBGu/xjT+C45Le6Jy?=
 =?us-ascii?q?epwHCWGwLM2tx9VynoLiVGRc9FG+GVwGwsipeRyJYlz53A1Q01kXoHO9lSu5yT?=
 =?us-ascii?q?x0jy8mrq6F0CPSxOTicQINOnRXS2l6kVfsPY+0gsgaXUipdQQolAGp5V3nx6hd?=
 =?us-ascii?q?v6l/K2jTQUFVfyn5NW1iU62wtqacbM5L8p8nrSJXUOGka1CAVrH9uwca0z/kH2?=
 =?us-ascii?q?ZGxjA0bSuqupb6nxx9km6dN2x8rHnaecFxwxfQ+trcSOVV3joHQil4lDbWCkK9?=
 =?us-ascii?q?P9mv4dWbiZPDvvqiWGKmU51ZaTPrwp+YtCun+W1qBgWynvCpld3gCwQ60y7719?=
 =?us-ascii?q?9xWCXMrRb8ZJTr1qugPeJmeEloGEHz685gFo5ilYswgYka2WIGiZWN4XoHjWDz?=
 =?us-ascii?q?PM1Y2a3kbXoBXz4Lw8PP7wjj101uNXaJx4P/VnWAzcptfdi6YmUK2i0j68BGEr?=
 =?us-ascii?q?ub7LtBnSFtuFq3sRrRYeRhnjca0fYu7X8ag+ITtwY3wCSSHKsSHVVGMiz2jBuH?=
 =?us-ascii?q?8cq+rKpMaWarcLiw0ld+nN+7ALGDpAFcRGj2epM4ESBs6cV/NUrG0Gfv5YH8ZN?=
 =?us-ascii?q?nQcdUTuwWIkxfHiuhZMpMwmeAMhSp6ImL9pnwlxvU/jRxv25G6oYeGJ39s/KK/?=
 =?us-ascii?q?Hh5XKDn1a9kP9THqiKZUhtyW0Jy3HpV9BjULW4PlQumyHzIVsfTnKhyCEDkhqn?=
 =?us-ascii?q?qAHbrfHAmf6Fpprn7VEpCrMW2XK2cdzdl4WBadI0lfihgOXDomhp45ChyqxMv5?=
 =?us-ascii?q?fUd7/D8R40D3qgBWxuJ0LRX/UXrfpAS1ajcyUpefNwFb7gVD50fTLMyf4fh/Hy?=
 =?us-ascii?q?Be/p29sgONLnaXaBhPDWEMQkaEHUzsPqGy5dnc9OiVHuq/L/zTYbWXtOxRTfGI?=
 =?us-ascii?q?yYi00oth+TaMOd6CPn1jD/09x0pCUmp1G8XfmzUTVSMXkzjBYNKcpBe54id3tN?=
 =?us-ascii?q?yw8Oz3WALz4ouCE7tSPstu+xC1gqeDNvSchCVjKTZf2ZMD22XIyKUE3FMJjyFu?=
 =?us-ascii?q?dj+tEakPtCLXTaLQnLNXAAAfay9pKMRI6Kc81BFXOcHHktP1yqJ4jvktBlhfSF?=
 =?us-ascii?q?zugdupatIKIm2nMFPHBV2GNLCHJT3N3sH2brmwSbxWjOVIqRKwvSyXHFPkPjSG?=
 =?us-ascii?q?jzPpTQygMflQjCGHOxxToJ29chdoCWT5UN3qcAG0MN9pgj0w2rA0gnLKNWgBMT?=
 =?us-ascii?q?lzaU9Nr7uQ7T9GjfV7AWBO8n1lLeyckSaD8+bYMooWsedsAilsl+NV+nI6y75U?=
 =?us-ascii?q?7CFCXPN0mSvSocRoo1GpieSPzjtnUBxTqjdEno6LvENiObnH+ZlEQ3rL4BUN7W?=
 =?us-ascii?q?DDQygN8vJgC8GnmL1bytXVlau7fD5H8s6S/tYXB8XOKcuvNHsnOADuXjnOA11W?=
 =?us-ascii?q?YySsMDTyi1FUiv2VvkOcqpU8tpnq0M4DRqJRWU4rH/cyBUFsHdhEK5ByCGB32Y?=
 =?us-ascii?q?WHhdIFsCLt5CLaQ99X69WeDqqf?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADrrQZch0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgl2BDieMEl+MAAEBBoE1FIkLjiqBdg8BARg?=
 =?us-ascii?q?TAYdMIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGA?=
 =?us-ascii?q?RsdAQMCCQEBBQUYCSUDDAUNAhEBBQEiEwWDHIFpAQMIBQgFmUM8jAkWBQEXgnc?=
 =?us-ascii?q?FgQGDQQoZJw1dgTcCBhKKcIEcF3iBB4MlfoJXhV+CJgKLIIUPj2wuCYZDh1CDI?=
 =?us-ascii?q?yOBW4gANocVjnqJVgIEAgQFAgUPIYElgg1NI4M8ghsMF4NKinQfMoEEAQEBO4o?=
 =?us-ascii?q?nAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADrrQZch0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgl2BDieMEl+MAAEBBoE1FIkLjiqBdg8BARgTAYdMIjQJDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQECAQECJBMGARsdAQMCCQEBBQU?=
 =?us-ascii?q?YCSUDDAUNAhEBBQEiEwWDHIFpAQMIBQgFmUM8jAkWBQEXgncFgQGDQQoZJw1dg?=
 =?us-ascii?q?TcCBhKKcIEcF3iBB4MlfoJXhV+CJgKLIIUPj2wuCYZDh1CDIyOBW4gANocVjnq?=
 =?us-ascii?q?JVgIEAgQFAgUPIYElgg1NI4M8ghsMF4NKinQfMoEEAQEBO4onAQE?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="56039990"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 08:43:50 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726988AbeLDQnq (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 11:43:46 -0500
Received: from mail-pg1-f195.google.com ([209.85.215.195]:42355 "EHLO
        mail-pg1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726367AbeLDQnq (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 11:43:46 -0500
Received: by mail-pg1-f195.google.com with SMTP id d72so7617631pga.9;
        Tue, 04 Dec 2018 08:43:44 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=QdeSoYpb9hxllSt0+nwb/LOe3PlAFmE0/ta+dumOWag=;
        b=tbSZFz5BgXhFPiaF/yqvZ3D5PBpaC8HznQqmqBejvgq7e0VVBpxf6PRyKFX56tx81s
         9w0xbhkuznOFCkTy/re73FwjObPmKj21ZfjckGjQjYXcejWoj7m/j5ycKadjcDvBd8AV
         nkAC8ACCr4r/5LJGSpdeNOk+ulgCqVUnpvk9f5xbao8tZTkw9NYTri0tMyFLaBGuV7P/
         TnF721jpBYa/xnTaZ8OJG5KiBK2NvRRsUr1QuKbKJkxwWLYG5PO8KnLRCcqBYbCtP31B
         22Ghntr/EdsiMddqjFCsn7ggPOoG4CFaVqW46wjw0rH/4wx9NpxXe3olb6eSx13rUfAp
         Or4Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=QdeSoYpb9hxllSt0+nwb/LOe3PlAFmE0/ta+dumOWag=;
        b=kXq4Ocb8x0kjaqtWIXDJzcwHv6zQlhiD/yyYP1i6eyG7oc9nct6qEdHWUcHDwkCnzm
         MMSlaQwg2GGmle5GcOgwyDsF655wGoeBugYVopXtss1o3Ay1jHN1u4DjsgvtQ+3INuMC
         nLh4Tpd/tg6np7Wch8o9lrTNqmaqyyNuXA1D/RI1j7EwprZwPAtCpxgFU2vXeR7M6b9z
         JC3FFk7b4VbT9JHuuTfrCbX1M99M68nqKpLm4MTRYIMqBW4EaPQKSf3NDkvOkdIiVaAN
         ZIhNVG33DAvZgzcQxBuxAJsDwwUiRXy94XUt1tX0Db59aiUCdw+6gMCoFGImGbnM6qar
         aeWg==
X-Gm-Message-State: AA+aEWa2T5q69K4ejQcAqoCUJXBXjPSk6h1XTAutxetO5CaW69J5jN0J
        LhTIGzi6Ei7E39kvXcEB6Ps=
X-Google-Smtp-Source: AFSGD/Vmlfuuqo8/5wcVhvSRyiuDUaJLTDW3rO8795cinKnB5/BcOkpt8MBC/ulOKxyPR+tP14aoOQ==
X-Received: by 2002:a62:61c3:: with SMTP id v186mr9424898pfb.55.1543941824457;
        Tue, 04 Dec 2018 08:43:44 -0800 (PST)
Received: from localhost.localdomain (65-113-243-134.dia.static.qwest.net. [65.113.243.134])
        by smtp.gmail.com with ESMTPSA id d129sm27178143pfc.31.2018.12.04.08.43.43
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 08:43:43 -0800 (PST)
Date: Tue, 4 Dec 2018 08:43:42 -0800
From: Eduardo Valentin <edubezval@gmail.com>
To: Amit Kucheria <amit.kucheria@linaro.org>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        linux-arm-msm <linux-arm-msm@vger.kernel.org>,
        Bjorn Andersson <bjorn.andersson@linaro.org>,
        Andy Gross <andy.gross@linaro.org>, vkoul@kernel.org,
        Khasim Syed Mohammed <khasim.mohammed@linaro.org>,
        Zhang Rui <rui.zhang@intel.com>,
        Daniel Lezcano <daniel.lezcano@linaro.org>
Subject: Re: [PATCH v3 2/4] drivers: thermal: tsens: Add generic support for
 TSENS v1 IP
Message-ID: <20181204164340.GA3146@localhost.localdomain>
References: <cover.1543335819.git.amit.kucheria@linaro.org>
 <578f79ce10c51bbb7bd6f44395e10a3369a050f4.1543335819.git.amit.kucheria@linaro.org>
 <20181129165606.GE2688@localhost.localdomain>
 <CAP245DXT7L_HnfeVNcY0ko3JP-kDnNuhaZPy664Z-sAm4SUVXg@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAP245DXT7L_HnfeVNcY0ko3JP-kDnNuhaZPy664Z-sAm4SUVXg@mail.gmail.com>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Dec 04, 2018 at 04:54:21PM +0530, Amit Kucheria wrote:
> On Thu, Nov 29, 2018 at 10:26 PM Eduardo Valentin <edubezval@gmail.com> wrote:
> >
> > On Tue, Nov 27, 2018 at 09:59:05PM +0530, Amit Kucheria wrote:
> 
> <snip>
> 
> > > +     qfprom_cdata = (u32 *)qfprom_read(tmdev->dev, "calib");
> > > +     if (IS_ERR(qfprom_cdata))
> > > +             return PTR_ERR(qfprom_cdata);
> > > +
> > > +     mode = (qfprom_cdata[4] & CAL_SEL_MASK) >> CAL_SEL_SHIFT;
> > > +     dev_dbg(tmdev->dev, "calibration mode is %d\n", mode);
> > > +
> > > +     switch (mode) {
> > > +     case TWO_PT_CALIB:
> > > +             base1 = (qfprom_cdata[4] & BASE1_MASK) >> BASE1_SHIFT;
> > > +             p2[0] = (qfprom_cdata[0] & S0_P2_MASK) >> S0_P2_SHIFT;
> > > +             p2[1] = (qfprom_cdata[0] & S1_P2_MASK) >> S1_P2_SHIFT;
> > > +             /* This value is split over two registers, 2 bits and 4 bits */
> > > +             lsb   = (qfprom_cdata[0] & S2_P2_MASK_1_0) >> S2_P2_SHIFT_1_0;
> > > +             msb   = (qfprom_cdata[1] & S2_P2_MASK_5_2) >> S2_P2_SHIFT_5_2;
> > > +             p2[2] = msb << 2 | lsb;
> > > +             p2[3] = (qfprom_cdata[1] & S3_P2_MASK) >> S3_P2_SHIFT;
> > > +             p2[4] = (qfprom_cdata[1] & S4_P2_MASK) >> S4_P2_SHIFT;
> > > +             p2[5] = (qfprom_cdata[2] & S5_P2_MASK) >> S5_P2_SHIFT;
> > > +             p2[6] = (qfprom_cdata[2] & S6_P2_MASK) >> S6_P2_SHIFT;
> > > +             /* This value is split over two registers, 2 bits and 4 bits */
> > > +             lsb   = (qfprom_cdata[2] & S7_P2_MASK_1_0) >> S7_P2_SHIFT_1_0;
> > > +             msb   = (qfprom_cdata[3] & S7_P2_MASK_5_2) >> S7_P2_SHIFT_5_2;
> > > +             p2[7] = msb << 2 | lsb;
> > > +             p2[8] = (qfprom_cdata[3] & S8_P2_MASK) >> S8_P2_SHIFT;
> > > +             p2[9] = (qfprom_cdata[3] & S9_P2_MASK) >> S9_P2_SHIFT;
> > > +             for (i = 0; i < tmdev->num_sensors; i++)
> > > +                     p2[i] = ((base1 + p2[i]) << 2);
> > > +             /* Fall through */
> > > +     case ONE_PT_CALIB2:
> > > +             base0 = (qfprom_cdata[4] & BASE0_MASK) >> BASE0_SHIFT;
> > > +             p1[0] = (qfprom_cdata[0] & S0_P1_MASK) >> S0_P1_SHIFT;
> > > +             p1[1] = (qfprom_cdata[0] & S1_P1_MASK) >> S1_P1_SHIFT;
> > > +             p1[2] = (qfprom_cdata[0] & S2_P1_MASK) >> S2_P1_SHIFT;
> > > +             p1[3] = (qfprom_cdata[1] & S3_P1_MASK) >> S3_P1_SHIFT;
> > > +             p1[4] = (qfprom_cdata[1] & S4_P1_MASK) >> S4_P1_SHIFT;
> > > +             p1[5] = (qfprom_cdata[2] & S5_P1_MASK) >> S5_P1_SHIFT;
> > > +             p1[6] = (qfprom_cdata[2] & S6_P1_MASK) >> S6_P1_SHIFT;
> > > +             p1[7] = (qfprom_cdata[2] & S7_P1_MASK) >> S7_P1_SHIFT;
> > > +             p1[8] = (qfprom_cdata[3] & S8_P1_MASK) >> S8_P1_SHIFT;
> > > +             p1[9] = (qfprom_cdata[3] & S9_P1_MASK) >> S9_P1_SHIFT;
> > > +             for (i = 0; i < tmdev->num_sensors; i++)
> > > +                     p1[i] = (((base0) + p1[i]) << 2);
> > > +             break;
> > > +     default:
> > > +             for (i = 0; i < tmdev->num_sensors; i++) {
> > > +                     p1[i] = 500;
> > > +                     p2[i] = 780;
> > ... Wouldn't be nice to know what 500 or 780 stands for here?
> 
> Indeed, however I haven't found a suitable explanations in the
> downstream trees or documentation yet. tsens-8974.c and tsens-8916.c
> seem to have similar magic numbers.
> 

Well, it does not need to be exactly like it is in downstream, does it?
:-)

> > Why these defaults? Do we expect to have further patches to keep
> > updating these?
> 
> No we don't expect them to change. I wish I had a better answer, but
> honestly I don't. I'll keep looking for a explanation to replace these
> magic numbers.
> 

Yeah, I see, the problem that I have is that these are slope and
offsets, and these constants change from chip version/rev, essentially
due to sensor location, process, etc, so hardcoding in the probe seams
to be asking for future patching.

> > > +             }
> > > +             break;
> > > +     }
> > > +
> > > +     compute_intercept_slope(tmdev, p1, p2, mode);
> > > +
> > > +     return 0;
> > > +}
> > > +
> > > +#define STATUS_OFFSET                0x44
> > > +#define LAST_TEMP_MASK               0x3ff
> > > +#define STATUS_VALID_BIT     BIT(14)
> > > +
> > > +static int get_temp_tsens_v1(struct tsens_device *tmdev, int id, int *temp)
> > > +{
> > > +     struct tsens_sensor *s = &tmdev->sensor[id];
> > > +     u32 code;
> > > +     unsigned int status_reg;
> > > +     u32 last_temp = 0, last_temp2 = 0, last_temp3 = 0;
> > > +     int ret;
> > > +
> > > +     status_reg = tmdev->tm_offset + STATUS_OFFSET + s->hw_id * 4;
> > > +     ret = regmap_read(tmdev->tm_map, status_reg, &code);
> > > +     if (ret)
> > > +             return ret;
> > > +     last_temp = code & LAST_TEMP_MASK;
> > > +     if (code & STATUS_VALID_BIT)
> > > +             goto done;
> > > +
> > > +     /* Try a second time */
> > > +     ret = regmap_read(tmdev->tm_map, status_reg, &code);
> > > +     if (ret)
> > > +             return ret;
> > > +     if (code & STATUS_VALID_BIT) {
> > > +             last_temp = code & LAST_TEMP_MASK;
> > > +             goto done;
> > > +     } else {
> > > +             last_temp2 = code & LAST_TEMP_MASK;
> > > +     }
> > > +
> > > +     /* Try a third/last time */
> > > +     ret = regmap_read(tmdev->tm_map, status_reg, &code);
> > > +     if (ret)
> > > +             return ret;
> > > +     if (code & STATUS_VALID_BIT) {
> > > +             last_temp = code & LAST_TEMP_MASK;
> > > +             goto done;
> > > +     } else {
> > > +             last_temp3 = code & LAST_TEMP_MASK;
> > > +     }
> > > +
> > > +     if (last_temp == last_temp2)
> > > +             last_temp = last_temp2;
> > > +     else if (last_temp2 == last_temp3)
> > > +             last_temp = last_temp3;
> > > +done:
> > > +     /* Convert temperature from ADC code to milliCelsius */
> > > +     *temp = code_to_degc(last_temp, s) * 1000;
> >
> > This three strikes/read approach seams awkward. Is this a broken
> > sensor or are you missing the programming steps? Maybe you need to
> > either wait for a IRQ on temp ready, or maybe you need simply wait
> > some amount of cycles before the sensor is ready with new temp/ADC
> > conversion, no?
> 
> This "algorithm" for reading data is specified in the Tsens IP HW
> documentation almost word for word. The status_reg contains both the
> VALID_BIT and the temperature, so we don't know if this is valid data
> until we read the register. I'll be posting IRQ support soon.
> 
> Again, this algorithm is used for tsens-v2.c and tsens-8916.c so I
> haven't tried to clean this up, yet. I have an experimental branch to
> hide IP-specific register changes behind the regmap interface. This
> should get rid of copies of these functions across the various files
> but that isn't yet ready to post yet.
> 
> > Also, the goto's dont really help, as we dont really have any
> > resource to rollback here..
> 
> Agreed. :-) This function could be made much clearer.
> 
> If I fix this, should I fix it in the other files right away, or can
> we wait a bit more to clean this up as part of the move to regmap? I
> think it'd be logically simpier to clean this up in a separate series
> than introducing changes to the known working function as part of new
> machine enablement.
> 
> Thanks for the review.
> 
> Regards,
> Amit
> 
> > > +
> > > +     return 0;
> > > +}
> > > +
> > > +static const struct tsens_ops ops_generic_v1 = {
> > > +     .init           = init_common,
> > > +     .calibrate      = calibrate_v1,
> > > +     .get_temp       = get_temp_tsens_v1,
> > > +};
> > > +
> > > +const struct tsens_data data_tsens_v1 = {
> > > +     .ops            = &ops_generic_v1,
> > > +     .reg_offsets    = { [SROT_CTRL_OFFSET] = 0x4 },
> > > +};
> > > diff --git a/drivers/thermal/qcom/tsens.c b/drivers/thermal/qcom/tsens.c
> > > index f1ec9bbe4717..d0cc0c09894a 100644
> > > --- a/drivers/thermal/qcom/tsens.c
> > > +++ b/drivers/thermal/qcom/tsens.c
> > > @@ -63,6 +63,9 @@ static const struct of_device_id tsens_table[] = {
> > >       }, {
> > >               .compatible = "qcom,msm8996-tsens",
> > >               .data = &data_8996,
> > > +     }, {
> > > +             .compatible = "qcom,tsens-v1",
> > > +             .data = &data_tsens_v1,
> > >       }, {
> > >               .compatible = "qcom,tsens-v2",
> > >               .data = &data_tsens_v2,
> > > diff --git a/drivers/thermal/qcom/tsens.h b/drivers/thermal/qcom/tsens.h
> > > index 7b7feee5dc46..f8dc96c42b94 100644
> > > --- a/drivers/thermal/qcom/tsens.h
> > > +++ b/drivers/thermal/qcom/tsens.h
> > > @@ -90,9 +90,10 @@ char *qfprom_read(struct device *, const char *);
> > >  void compute_intercept_slope(struct tsens_device *, u32 *, u32 *, u32);
> > >  int init_common(struct tsens_device *);
> > >  int get_temp_common(struct tsens_device *, int, int *);
> > > +int code_to_degc(u32 adc_code, const struct tsens_sensor *s);
> > >
> > >  /* TSENS v1 targets */
> > > -extern const struct tsens_data data_8916, data_8974, data_8960;
> > > +extern const struct tsens_data data_8916, data_8974, data_8960, data_tsens_v1;
> > >  /* TSENS v2 targets */
> > >  extern const struct tsens_data data_8996, data_tsens_v2;
> > >
> > > --
> > > 2.17.1
> > >
