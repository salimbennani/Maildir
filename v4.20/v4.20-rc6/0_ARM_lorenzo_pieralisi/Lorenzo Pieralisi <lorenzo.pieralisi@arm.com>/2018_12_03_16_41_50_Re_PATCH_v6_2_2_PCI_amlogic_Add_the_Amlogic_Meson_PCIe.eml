Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:55:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D1CD7580375;
	Mon,  3 Dec 2018 08:48:03 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 08:48:03 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AtomRiBICG5rjAw4Q59mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/78rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModvzM6cSS/66zK/JzDXEcvhYwzb955bSch87pfGMXKlwccvMwkQoEwPFiU+Q?=
 =?us-ascii?q?ppLjPzKU0eQBqXCb7+t+WuK1kWEnrwBxoiOuxso3kIbJnIcVxkrY+iV+xYY4PN?=
 =?us-ascii?q?u1Q1N4b968CJZcqT2WOo9sTs8/TWxkpjw2xqAFtJKnZiQHyZYqywbBZ/CacYWE?=
 =?us-ascii?q?+A/vWemNLTtimX5pZK+ziwyw/ES8zOD3S9O630xQriVfl9nBrnAN2ALX6siAUv?=
 =?us-ascii?q?Z94Eih1iiV1wzJ6eFLP1o0lazFJJ4l2LIwkYATsUvbEi/3nkX5krOWe1069uS0?=
 =?us-ascii?q?7+nreKjqq5GCO4Nulw3zMbgilta+DOk6KgQOWnKU+eW41L3t5035R7BKg+Uykq?=
 =?us-ascii?q?nYtpDaOMsaqre6AwBLyIYj7QiwDzO/3NQfk3gHKkxKeAicgoj3NFHBPur4Ae28?=
 =?us-ascii?q?g1uyijdrwe7JPrn7DpXKNHjDn6/tfaxh5E5E1Aoz0ddf6opQCrEAI/L8RFX9td?=
 =?us-ascii?q?PFDhIiNwy0wuDnCMhy148EWGKPBLOZP73WsVOS+u0vJOyMbpcPuDnhM/gl++Lu?=
 =?us-ascii?q?jXghlF8dZ6ap3IcXZ2q/Hvh8I0WZfGDjgtEOEWoRugo+TerqiECNUDJJZnayWb?=
 =?us-ascii?q?486S8/CI68EYjDQYWtiqSb3CinBp1WenxGCleUHHfqcIWLRe0AaCGVIs9nlDwE?=
 =?us-ascii?q?UqOsS4sg1RGoqQ/7xKBrLuvS+i0Eq53j0MJ56PHUlRE37TZ0FdiS03mRT2FomW?=
 =?us-ascii?q?MFXyU53Lt/oUx6yVePy7J4jOZaFdFI4/NJUwE6NYPTzuBgCtDyXB7BccmNSFq8?=
 =?us-ascii?q?XtqmBjQxRMorw9ASe0Z9B8mijhfb0iqpGbAVkaaHBJg18q3G2XjxKN1wy3LH1K?=
 =?us-ascii?q?knklknTdFDNWyghq5j6QfTA5TFnFmel6avba4cxjLC9H+fzWqSu0FVSBN/Xr/b?=
 =?us-ascii?q?XX8BfEfWrc725kXZT7CwD7QrNQ9Byc2HKqtOcdDpiVRGRPH+ONXReW6xmmGwBQ?=
 =?us-ascii?q?qWybOIdoblZ2Id3CDFAkgejw8T5WqGNRQ5Biq5vm3RFiJuGkz1b0Ps6+Z+rmi7?=
 =?us-ascii?q?QVEyzwyRa01h1ry1+gMahPCGSvMT2K4EtzklqzluAFm92NfWAcKapwV9ZKVcfc?=
 =?us-ascii?q?894FBf2GLFtgx9O5ugL7xihl8eaQh3o1ni1xJtCoVEkMgqqnwqwRF2KaKZ1lNB?=
 =?us-ascii?q?ajyZ0YrxOr3RNmn94hSvZ7TK1VHZ1dac4r0P5+ggq1X/oAGpEVIv/G9j09ZL3H?=
 =?us-ascii?q?qT+JXLABAJXpLsT0k47R56p7LdYikj/I7U0XxsMa+psj7Nwd4pBe0lygq+cNdb?=
 =?us-ascii?q?Kq+LCAjyE8gCDci0NOMqg0Spbg4DPO1K9K80ItmqeOec1K+qPOZvhjSmjWtc7Y?=
 =?us-ascii?q?B500KM8Td8S+HS05YExfGYwhWIVzPmgFi9tcD3nJhOZSsOEWqn1SjkGIlRa7Vo?=
 =?us-ascii?q?fYYKFWihOde3ych5h5L3XX5X6kSjB1If1MC1YxWSa0Hy0hNK1UQQp3yqgi+4zz?=
 =?us-ascii?q?1ykzE0oauTxi3Ow+L+dBUZPm5HXnVtjVDpIYKsldAVQFCobxQ1lBui/Uv7x6lb?=
 =?us-ascii?q?qL5/LmXJWkdIYi72InpmUquxsLqCfsFO5IkpsSVRTOSzf1SaRqThrBsd1iPpB3?=
 =?us-ascii?q?FeyywjdzG2ppX5mAR3iGCHI3Zpr3rZesZwyQ3E5NPGRv5R3TsGRC9mhjnRHVW8?=
 =?us-ascii?q?O9ip/dOJl5bMqOy+VmShVoFNfinv14+PqCy75WhyCx2lg/+zgsHnERQ90SLj19?=
 =?us-ascii?q?hlTyLIoAz+Yonq0aS3KuZnfkhuBF/h5Mt2AIB+ko0shJ4O3XgWnIma/X0CkW3r?=
 =?us-ascii?q?K9VUxbr+bGYRRT4M29PV4xLq2Ex5InKJ2oL2THOdwsR6atm+Y2MW3D897s9QBK?=
 =?us-ascii?q?eV6rxEgTV6ol6ioQ3NZvh9my8XyeEy534Cn+EJpA0twz2YArATHklXJzbglhqW?=
 =?us-ascii?q?4NClsKVYenyvfqOu20pkktCsF7WCogBaWHbkdZYuBy5w7sNjMF3S1H3/8J3reN?=
 =?us-ascii?q?7VbdgLrB2bjw/Aj/RJKJI2jvcKmS1nOWfnsXwk0eE7iwFu3YqhvIiGMGht+KO5?=
 =?us-ascii?q?AhhFNjz6fc8T+zftjbpAkcaSxYygApJhGjATVpvyUf2oCC4StejgNwuWCzIzsH?=
 =?us-ascii?q?CbGb7CHQOF7EdmsmnCE5SqN3GROXkYws9uRBibJExDng8UWC82kYI+FgCv3Mbh?=
 =?us-ascii?q?alt25igN5l7krRtB0uBoOAP6UmjBvwekcCs0RIKcLBpL7QFC+kHVPtaF7u9oGy?=
 =?us-ascii?q?FY/5uhrBGCK2CBZgRIC30JVVKAB1z5Irau4tzA+fCCBuWiN/vOfamOqetGWvaI?=
 =?us-ascii?q?wpKvz5Jm/yuWOcWJJHViFPo72kxMXX1iH8TZmjMPSzEYli7Xbs6bogu89TNzrs?=
 =?us-ascii?q?yl7PvrXwfv75OVC7ROKdVv5wy2gaCbOu6Qmil5KDVY1pANxXPSy7gfxlkSiy5w?=
 =?us-ascii?q?eDm3DLQArjXATKbRmq9REh4aZDl/NMpO76IgwAZNPdTXhc/y1r59lvQ1EUtKVU?=
 =?us-ascii?q?T9msG1YswHO3uyNE7cC0aRKruHJSfHw8X2Ya6nTb1QjeNUtwC/uDqBEk/jOCiD?=
 =?us-ascii?q?mCftVxy1Le5MiySbNgREuI6hahZtFXTjTNX+Zx2nMd93iCc6zqEuinzWNW4TLz?=
 =?us-ascii?q?58flhJrr2R6yNYn/p+F3ZA7npjMemLhSKZ4/PEJZYRtPthGj50mP5C4HQm17tV?=
 =?us-ascii?q?6zlJRfxvlyvUq95uolemnfGOyzpnShVOrDlLiZmPvUVjP6XZ65ZBVWzF/BIL8W?=
 =?us-ascii?q?WfFRAKq8F5Bd3ovqADguTIwYL6LjVD/prw/M1UU8jdLsCGPTwlMBzBETvQCwQE?=
 =?us-ascii?q?RnigMmSJwwR3kvaI8DW1o5w1o5H30M4ESrJfW1U8DdsVDUNqGNFEK5ByCGAKi7?=
 =?us-ascii?q?me2eoP/3e4vh6ZfMRXpJnDV+mTSaHrLyyUi6tDIQMJzKnxKYUIN6XywUkkYV5/?=
 =?us-ascii?q?yteZU3HMVMxA93UyJjQ/p19ApT0nFjU+?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADzXQVch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2uMOIwMgg0UlzQUgh4BgUuGPiI0CQ0BAwE?=
 =?us-ascii?q?BAQEBAQIBEwEBAQoLCQgpL4I2JAGCYgMDAQIkEy0SBgkBAQohJQMMBUkBF4Mcg?=
 =?us-ascii?q?gIEAaZ0M4ohjByBVz+EI4Rqg0yCJgKJJoF5hA+BTI9GBwKCHwSPDiORJokEkS+?=
 =?us-ascii?q?CDU0jgz2CJheOHT8BAYE2AQGKVwEB?=
X-IPAS-Result: =?us-ascii?q?A0ABAADzXQVch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2uMOIwMgg0UlzQUgh4BgUuGPiI0CQ0BAwEBAQEBAQIBEwEBA?=
 =?us-ascii?q?QoLCQgpL4I2JAGCYgMDAQIkEy0SBgkBAQohJQMMBUkBF4McggIEAaZ0M4ohjBy?=
 =?us-ascii?q?BVz+EI4Rqg0yCJgKJJoF5hA+BTI9GBwKCHwSPDiORJokEkS+CDU0jgz2CJheOH?=
 =?us-ascii?q?T8BAYE2AQGKVwEB?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="140544300"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 08:48:01 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726856AbeLCQmE (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 11:42:04 -0500
Received: from foss.arm.com ([217.140.101.70]:41584 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726662AbeLCQmD (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 11:42:03 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id A8EB31682;
        Mon,  3 Dec 2018 08:41:58 -0800 (PST)
Received: from e107981-ln.cambridge.arm.com (e107981-ln.cambridge.arm.com [10.1.197.40])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 6ED583F59C;
        Mon,  3 Dec 2018 08:41:55 -0800 (PST)
Date: Mon, 3 Dec 2018 16:41:50 +0000
From: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
To: Hanjie Lin <hanjie.lin@amlogic.com>,
        Bjorn Helgaas <bhelgaas@google.com>
Cc: Yue Wang <yue.wang@amlogic.com>,
        Kevin Hilman <khilman@baylibre.com>,
        Carlo Caione <carlo@caione.org>,
        Jerome Brunet <jbrunet@baylibre.com>,
        Rob Herring <robh@kernel.org>,
        Gustavo Pimentel <gustavo.pimentel@synopsys.com>,
        Shawn Lin <shawn.lin@rock-chips.com>,
        Philippe Ombredanne <pombredanne@nexb.com>,
        Cyrille Pitchen <cyrille.pitchen@free-electrons.com>,
        linux-kernel@vger.kernel.org, linux-pci@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org,
        linux-amlogic@lists.infradead.org,
        Yixun Lan <yixun.lan@amlogic.com>,
        Liang Yang <liang.yang@amlogic.com>,
        Jianxin Pan <jianxin.pan@amlogic.com>,
        Qiufang Dai <qiufang.dai@amlogic.com>,
        Jian Hu <jian.hu@amlogic.com>
Subject: Re: [PATCH v6 2/2] PCI: amlogic: Add the Amlogic Meson PCIe
 controller driver
Message-ID: <20181203164150.GA11855@e107981-ln.cambridge.arm.com>
References: <1542876836-191355-1-git-send-email-hanjie.lin@amlogic.com>
 <1542876836-191355-3-git-send-email-hanjie.lin@amlogic.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1542876836-191355-3-git-send-email-hanjie.lin@amlogic.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 22, 2018 at 04:53:54PM +0800, Hanjie Lin wrote:

[...]

> +static int meson_pcie_rd_own_conf(struct pcie_port *pp, int where, int size,
> +				  u32 *val)
> +{
> +	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
> +
> +	/*
> +	 * there is a bug of MESON AXG pcie controller that software can not
> +	 * programe PCI_CLASS_DEVICE register, so we must return a fake right
> +	 * value to ensure driver could probe successfully.
> +	 */
> +	if (where == PCI_CLASS_REVISION) {
> +		*val = readl(pci->dbi_base + PCI_CLASS_REVISION);
> +		/* keep revision id */
> +		*val &= PCI_CLASS_REVISION_MASK;
> +		*val |= PCI_CLASS_BRIDGE_PCI << 16;
> +		return PCIBIOS_SUCCESSFUL;
> +	}

As I said before, this looks broken. If this code (or other drivers with
the same broken assumptions, eg dwc/pcie-qcom.c) carries out a, say,
byte sized config access of eg PCI_CLASS_DEVICE you will get junk out of
it according to your comment above.

I would like to pick Bjorn's brain on this to see what we can really do
to fix this (and other) drivers.

Thanks,
Lorenzo

> +	return dw_pcie_read(pci->dbi_base + where, size, val);
> +}
> +
> +static int meson_pcie_wr_own_conf(struct pcie_port *pp, int where,
> +				  int size, u32 val)
> +{
> +	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
> +
> +	return dw_pcie_write(pci->dbi_base + where, size, val);
> +}
> +
> +static int meson_pcie_link_up(struct dw_pcie *pci)
> +{
> +	struct meson_pcie *mp = to_meson_pcie(pci);
> +	struct device *dev = pci->dev;
> +	u32 smlh_up = 0;
> +	u32 ltssm_up = 0;
> +	u32 rdlh_up = 0;
> +	u32 speed_okay = 0;
> +	u32 cnt = 0;
> +	u32 state12, state17;
> +
> +	while (smlh_up == 0 || rdlh_up == 0 || ltssm_up == 0 ||
> +	       speed_okay == 0) {
> +		udelay(20);
> +
> +		state12 = meson_cfg_readl(mp, PCIE_CFG_STATUS12);
> +		state17 = meson_cfg_readl(mp, PCIE_CFG_STATUS17);
> +		smlh_up = IS_SMLH_LINK_UP(state12);
> +		rdlh_up = IS_RDLH_LINK_UP(state12);
> +		ltssm_up = IS_LTSSM_UP(state12);
> +
> +		if (PM_CURRENT_STATE(state17) < PCIE_GEN3)
> +			speed_okay = 1;
> +
> +		if (smlh_up)
> +			dev_dbg(dev, "smlh_link_up is on\n");
> +		if (rdlh_up)
> +			dev_dbg(dev, "rdlh_link_up is on\n");
> +		if (ltssm_up)
> +			dev_dbg(dev, "ltssm_up is on\n");
> +		if (speed_okay)
> +			dev_dbg(dev, "speed_okay\n");
> +
> +		cnt++;
> +
> +		if (cnt >= WAIT_LINKUP_TIMEOUT) {
> +			dev_err(dev, "Error: Wait linkup timeout.\n");
> +			return 0;
> +		}
> +	}
> +
> +	return 1;
> +}
> +
> +static int meson_pcie_host_init(struct pcie_port *pp)
> +{
> +	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
> +	struct meson_pcie *mp = to_meson_pcie(pci);
> +	int ret;
> +
> +	ret = meson_pcie_establish_link(mp);
> +	if (ret)
> +		return ret;
> +
> +	meson_pcie_enable_interrupts(mp);
> +
> +	return 0;
> +}
> +
> +static const struct dw_pcie_host_ops meson_pcie_host_ops = {
> +	.rd_own_conf = meson_pcie_rd_own_conf,
> +	.wr_own_conf = meson_pcie_wr_own_conf,
> +	.host_init = meson_pcie_host_init,
> +};
> +
> +static int meson_add_pcie_port(struct meson_pcie *mp,
> +			       struct platform_device *pdev)
> +{
> +	struct dw_pcie *pci = &mp->pci;
> +	struct pcie_port *pp = &pci->pp;
> +	struct device *dev = &pdev->dev;
> +	int ret;
> +
> +	if (IS_ENABLED(CONFIG_PCI_MSI)) {
> +		pp->msi_irq = platform_get_irq(pdev, 0);
> +		if (pp->msi_irq < 0) {
> +			dev_err(dev, "failed to get msi irq\n");
> +			return pp->msi_irq;
> +		}
> +	}
> +
> +	pp->ops = &meson_pcie_host_ops;
> +	pci->dbi_base = mp->mem_res.elbi_base;
> +
> +	ret = dw_pcie_host_init(pp);
> +	if (ret) {
> +		dev_err(dev, "failed to initialize host\n");
> +		return ret;
> +	}
> +
> +	return 0;
> +}
> +
> +static const struct dw_pcie_ops dw_pcie_ops = {
> +	.link_up = meson_pcie_link_up,
> +};
> +
> +static int meson_pcie_probe(struct platform_device *pdev)
> +{
> +	struct device *dev = &pdev->dev;
> +	struct dw_pcie *pci;
> +	struct meson_pcie *mp;
> +	int ret;
> +
> +	mp = devm_kzalloc(dev, sizeof(*mp), GFP_KERNEL);
> +	if (!mp)
> +		return -ENOMEM;
> +
> +	pci = &mp->pci;
> +	pci->dev = dev;
> +	pci->ops = &dw_pcie_ops;
> +
> +	mp->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
> +	if (IS_ERR(mp->reset_gpio)) {
> +		dev_err(dev, "Get reset gpio failed\n");
> +		return PTR_ERR(mp->reset_gpio);
> +	}
> +
> +	ret = meson_pcie_get_resets(mp);
> +	if (ret) {
> +		dev_err(dev, "Get reset resource failed, %d\n", ret);
> +		return ret;
> +	}
> +
> +	ret = meson_pcie_get_mems(pdev, mp);
> +	if (ret) {
> +		dev_err(dev, "Get memory resource failed, %d\n", ret);
> +		return ret;
> +	}
> +
> +	meson_pcie_power_on(mp);
> +	meson_pcie_reset(mp);
> +
> +	ret = meson_pcie_probe_clocks(mp);
> +	if (ret) {
> +		dev_err(dev, "Init clock resources failed, %d\n", ret);
> +		return ret;
> +	}
> +
> +	platform_set_drvdata(pdev, mp);
> +
> +	ret = meson_add_pcie_port(mp, pdev);
> +	if (ret < 0) {
> +		dev_err(dev, "Add PCIE port failed, %d\n", ret);
> +		return ret;
> +	}
> +
> +	return 0;
> +}
> +
> +static const struct of_device_id meson_pcie_of_match[] = {
> +	{
> +		.compatible = "amlogic,axg-pcie",
> +	},
> +	{},
> +};
> +
> +static struct platform_driver meson_pcie_driver = {
> +	.probe = meson_pcie_probe,
> +	.driver = {
> +		.name = "meson-pcie",
> +		.of_match_table = meson_pcie_of_match,
> +	},
> +};
> +
> +builtin_platform_driver(meson_pcie_driver);
> -- 
> 2.7.4
> 
