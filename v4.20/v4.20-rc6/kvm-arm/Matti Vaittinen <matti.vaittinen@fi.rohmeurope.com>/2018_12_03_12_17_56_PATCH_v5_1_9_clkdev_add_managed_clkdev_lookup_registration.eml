Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 03 Dec 2018 20:26:40 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A7B30580117;
	Mon,  3 Dec 2018 04:18:18 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 04:18:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ana4+SBLVvAVozl37t9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvX6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0yRD+s7bpkSAXwhS?=
 =?us-ascii?q?kJNzA37nzZhM9+jK1UvB2uuh5wzIDPYIGNNvdzZb/dcc8ASGZdQspcTTJND4Wh?=
 =?us-ascii?q?ZIUPFeoBOuNYopH6qVQUsRu+GQisD/7gxTBSh3/2wbE60+UnEQ7Y2gwrAtUDsH?=
 =?us-ascii?q?HOo9XpKKcSUPq5zLfSwjXCc/NWxTb96I7WfRAnuvyMU7NwfdDLyUkoFwPFi0uf?=
 =?us-ascii?q?qZH/PzOSzuQCrXKX4PZnVeKqkmMqrRx6rDu3xso0lIXFmoYYxkrZ+Sh33oo5P8?=
 =?us-ascii?q?C0RU1nbdK+EZZdtTmWO5VrTs4sWW1kpiY3x70ctZKmfyUHyY4ryhHeZvGBboOG?=
 =?us-ascii?q?+AjsVPyLLjd9nH9leKywhxK18UW41O38Wde70ExQoipGjNbMrHYN2ALX6sSdTf?=
 =?us-ascii?q?t95Eih1S6O1wDV9O5EPVg5mbTHJ5Ml2LI8i5QevVrZEiPrm0j6kLWae0Qm9+Sw?=
 =?us-ascii?q?7uToeLTmppuSN49ujQH+N7wjmsi+AeQ+LwgPUHGX+eei2735+032XrFKguQxkq?=
 =?us-ascii?q?jXtpDVO94bq7WnAw9azIkj8QyzDzS439QCm3kIMlZFdAiAj4jzNFHCOOr4Auun?=
 =?us-ascii?q?g1SwjDdrwOjLPrngApXOMHfPirjgfatm5k5YyQozy81f5p1OBrEAJvLzRlH+tN?=
 =?us-ascii?q?jCAhAlNAy0xv7tCM9h2YMGRWKPHqiZPbvSsVCS5+IvP/ODZIgPtDb9Nvgq/fju?=
 =?us-ascii?q?jXAilF8ZfKmp24YXaX+iEvRnJUWZfWTjgtMbHWgWuQo+SfTgiEeeXj5Le3ayQ6?=
 =?us-ascii?q?U86yk5CIKhE4jPXIOtgLuH3Ce9GZ1bfWRGClGKEXf1eISIQfYMaCSOIsB/ljwI?=
 =?us-ascii?q?T6SuS4gk1Ru2rg/116JnLvbI+i0frZ/szsN15+3UlREx7zB0Fd6S02OWQmFwn2?=
 =?us-ascii?q?MIQSI23a9lrUx8zFeDzbZ3g/hCGdNP4PNJVx8wNYTAwOxiF9DyRgXBc8+KSFm8?=
 =?us-ascii?q?RNWqGzUxTtMrzN8IbEZwANGijhHF3yq3DL4Zjb2LBJoo8q3C23j9Pdpyy3HD1K?=
 =?us-ascii?q?M5lVkpXtNPNXG6hq547wXcGpTGk1uHmKqwdaQTxijN9HydwmqIu01YVA1wUaDB?=
 =?us-ascii?q?XX0EYkvWrNL55l7NTrO0CLQnNBdBxtCGKqdQdtLpilBGTu/5ONvCe2Kxh3uwBR?=
 =?us-ascii?q?GQy7yRdoXqZXsS0D/dCEcelQAT5miJNQ4lCyelomLeCiFuFF31b0Pt9+l+tG20?=
 =?us-ascii?q?Tksuww6WaE1h0qK/+gQJivyEV/MTwrUEtT89qzV1GVa92M7WC9qApgZ7YKVQe9?=
 =?us-ascii?q?Q94E1D1WLYsQx9MYetL6Rjhl4YbgR2sFni1xRxCoVcj8cqqGkmwxZ1KaKdyFlB?=
 =?us-ascii?q?bS+X3YjsOr3LLWn/5Aqga6rI1VDRztmX+r0D5+8lq1r+pg6pEEki83J509RO13?=
 =?us-ascii?q?uc55PKDBcdUJ7rU0Y38QR6qK/eYiUn+4zU0nhsO7GusjDew9IpGPclyhG4ctZf?=
 =?us-ascii?q?LaOIDhP9H9cbBsiuMuMqnVepYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVy39jFi9qM/3g51LZTYIEmq51yfkHo9RarRu?=
 =?us-ascii?q?cokRDWehPtO4xs95h57rQHNY8F+jB1Ub2M6mYxaSblr93RFO2kQTu3CohSy4zz?=
 =?us-ascii?q?lsmTEzsqWfxDDOw/jldBcfOm9LRXNujFf2LYivktAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVKaRaTnoxsZ0CPjGH?=
 =?us-ascii?q?FSxCsheDGpuZX5nhp6h3ybLHtoqHrZeMdwxQrQ5dDGRP5R2CYGSzd8iTXNGle8?=
 =?us-ascii?q?ONyp982Ol5jfquC+S36hVppLfCjr14yAszG35W9rAR25hP2zntznEQ4n0S70zd?=
 =?us-ascii?q?VqVCPIrAribYnvzai1LeVnfkxwDl/m98V6Ap1+kpc3hJwI2ngVnJSV8WAHkWfu?=
 =?us-ascii?q?K9pb363+YWEJRT4Kxd7V/Qfk1FdiLnKP24L2SHGdztF9aNm9Z2Mcwjg94NxSCK?=
 =?us-ascii?q?eI8LxEmjN4ol+5rQLSe/dxhDkcxuU16H4Gne4JohEiwTuHArAdBkRYOS3slxKV?=
 =?us-ascii?q?79GxtqlXZWCvcaSu20p6h9yuELaCogREUnbjZpgiBTNw7tl4MF/UzH3z7YTkdM?=
 =?us-ascii?q?PRbN0JsB2UjgzAj/NUKJ8qkvoKhCxnOX/yvHE/yu47iwBu0o++vISdN2pt+6e5?=
 =?us-ascii?q?CAZCNjLpf8MT5i3tjaFGk8mNxY+vGZFhGigRUJvsUPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0UXi81npsnGQCx3sDh?=
 =?us-ascii?q?bF115jMM5l77txtMzPhnNwLkX2fbpQeobCo0SZeFIBpX6AFC+1naMciE4u1vGC?=
 =?us-ascii?q?FY+4WrrBaRJWyDewRIEWYJV1SEBlDkI7mu/MTA/PKeBuakNPvOZrOOqeNFWveM?=
 =?us-ascii?q?xJKv1JZm/jmWOsWOOHliE+M02k5ZUX9lHMTZni0FSzYLmCLVc86buBC89zV3rs?=
 =?us-ascii?q?+h8fTrWwHv5YqVB7tRK9Vv/B+2jrmZN+6NnyZ0MjJY1pIKxX/Vx7kTxl8Siydy?=
 =?us-ascii?q?dzazFbQMrzLCTKXVmqVPFR4UdztzNNdU76I7xgRCI9Pbhcjv1rFmjv85EVNFVV?=
 =?us-ascii?q?36l8GtZMwKJXy9NVzdCEaKMrSGOSPEw8XtbaygTr1Qif1etwestjaDD0/jIjOD?=
 =?us-ascii?q?miH1VxCuNOFAlj2UMAZCt4G9bBltD3PuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgyaY4PPeKpYTsPtrBDx7luNa4HsgzbtV?=
 =?us-ascii?q?4zpJRPh0mCvUs95vrEuqkuiJyjp7ThVOrixHi56MvUVnau3l8cxFUGTW/R8W5G?=
 =?us-ascii?q?6bDAkMu/NqD9Tuv+Zbzd2L3Kf6NCtDtczd/NcABs7ZLuqJMTw7NhrsFSPOCxMI?=
 =?us-ascii?q?CzWsMDLxnUtYxdSb6mGU5qYzq4TwmZwDTPcPUVUpCvJcFE1kAMADJppxdj0l16?=
 =?us-ascii?q?ScjMsF+GC5tBSXT8Jf6MOUHsmOCOnifW7KxYJPYAEFlOv1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAABeHgVch0O0hNFiHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgVqCERUSjBGNcjmXNIFzEgEBGBMBiAMiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEKCwkIKS+CNiKCZQMDAQI3PwYJAQFQAxEgAQUBIxIFgxyCAgQBmTQ8jDyDf?=
 =?us-ascii?q?YYhEowKgVc/gREzhDOJCAKJLYYBkRIHAoIfBIQeixOJW4dLiQSPQgYCCQcPIYE?=
 =?us-ascii?q?lgg1NI4M8gicXfwECjR0+MgGBAwEBATuKMQEB?=
X-IPAS-Result: =?us-ascii?q?A0ARAABeHgVch0O0hNFiHAEBAQQBAQcEAQGBUQcBAQsBgVq?=
 =?us-ascii?q?CERUSjBGNcjmXNIFzEgEBGBMBiAMiNAkNAQMBAQEBAQECARMBAQEKCwkIKS+CN?=
 =?us-ascii?q?iKCZQMDAQI3PwYJAQFQAxEgAQUBIxIFgxyCAgQBmTQ8jDyDfYYhEowKgVc/gRE?=
 =?us-ascii?q?zhDOJCAKJLYYBkRIHAoIfBIQeixOJW4dLiQSPQgYCCQcPIYElgg1NI4M8gicXf?=
 =?us-ascii?q?wECjR0+MgGBAwEBATuKMQEB?=
X-IronPort-AV: E=Sophos;i="5.56,310,1539673200"; 
   d="scan'208";a="54655572"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 04:18:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726464AbeLCMTC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 07:19:02 -0500
Received: from mail-lf1-f67.google.com ([209.85.167.67]:44933 "EHLO
        mail-lf1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725883AbeLCMTC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 07:19:02 -0500
Received: by mail-lf1-f67.google.com with SMTP id z13so8930503lfe.11;
        Mon, 03 Dec 2018 04:18:10 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=w4m1/JlFXy+H6P73gFddGHjsLcAn5Y4uuyOJoCi2r3k=;
        b=Yae7cjavEyHhFJU47kA2zT/6wwXgDqgWFaHqkottpOFUxTrrxBc3BCQS3UGqnV+nMP
         XUMSd2TXRfuhKJSwbWtH32QnZRuv6ec2iu9rLM6rttZtezuGOAuB13A7mnSCBkSNu2VY
         zVxJbP0ozVIWg6VvhxuAHfM1IPDzMhUBMuUwj2iF9V/ljthRaJa+kMM+80E4GRTf+CK4
         PtozjEUWF4QxPzkbmQPc79zmFMo+sghJQjivOdDmJsUxZFTtRTkQ7mW/siE+fgBBfAqS
         86ZgNbJSnIHQ5nhaDFVFLAG5QW/DmSMrqe7Shnf4CnJygjPkpRT++tfNdnnXx9hliIro
         liCQ==
X-Gm-Message-State: AA+aEWai+uNshWITdO+j+KYN3uIoap9NzTep5dVYyUN3kHmGCqu6v/zu
        mPfqLgJl51D0NQOFJIzN/MMnmfbUgU0=
X-Google-Smtp-Source: AFSGD/V6mHObKB5mLcnDnizgBwluhXfpreZyoRlZwRkMqfQpXL5Va39sEJChpyXc+e39jdqTbdDaIQ==
X-Received: by 2002:a19:6719:: with SMTP id b25mr8361226lfc.38.1543839489901;
        Mon, 03 Dec 2018 04:18:09 -0800 (PST)
Received: from localhost.localdomain ([213.255.186.46])
        by smtp.gmail.com with ESMTPSA id r29-v6sm2382781ljd.44.2018.12.03.04.18.08
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 04:18:09 -0800 (PST)
Date: Mon, 3 Dec 2018 14:17:56 +0200
From: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
To: mazziesaccount@gmail.com, matti.vaittinen@fi.rohmeurope.com
Cc: mturquette@baylibre.com, sboyd@kernel.org, cw00.choi@samsung.com,
        krzk@kernel.org, b.zolnierkie@samsung.com, linux@armlinux.org.uk,
        andy.gross@linaro.org, david.brown@linaro.org, pavel@ucw.cz,
        andrew.smirnov@gmail.com, lee.jones@linaro.org,
        pombredanne@nexb.com, sjhuang@iluvatar.ai, akshu.agrawal@amd.com,
        djkurtz@chromium.org, rafael.j.wysocki@intel.com,
        linux-doc@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-clk@vger.kernel.org, linux-arm-kernel@lists.infradead.org
Subject: [PATCH v5 1/9] clkdev: add managed clkdev lookup registration
Message-ID: <b6c5c110c482ff6a6b2378ab3518bd31c6233872.1543837442.git.matti.vaittinen@fi.rohmeurope.com>
References: <cover.1543837442.git.matti.vaittinen@fi.rohmeurope.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <cover.1543837442.git.matti.vaittinen@fi.rohmeurope.com>
User-Agent: Mutt/1.9.2 (2017-12-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Clkdev registration lacks of managed registration functions and it
seems few drivers do not drop clkdev lookups at exit. Add
devm_clk_hw_register_clkdev and devm_clk_release_clkdev to ease lookup
releasing at exit.

Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
---
 Documentation/driver-model/devres.txt |   1 +
 drivers/clk/clkdev.c                  | 122 ++++++++++++++++++++++++++--------
 include/linux/clkdev.h                |   4 ++
 3 files changed, 101 insertions(+), 26 deletions(-)

diff --git a/Documentation/driver-model/devres.txt b/Documentation/driver-model/devres.txt
index 43681ca0837f..dbf14326243b 100644
--- a/Documentation/driver-model/devres.txt
+++ b/Documentation/driver-model/devres.txt
@@ -238,6 +238,7 @@ CLOCK
   devm_clk_put()
   devm_clk_hw_register()
   devm_of_clk_add_hw_provider()
+  devm_clk_hw_register_clkdev()
 
 DMA
   dmaenginem_async_device_register()
diff --git a/drivers/clk/clkdev.c b/drivers/clk/clkdev.c
index 9ab3db8b3988..68a1e55a60d2 100644
--- a/drivers/clk/clkdev.c
+++ b/drivers/clk/clkdev.c
@@ -401,6 +401,25 @@ static struct clk_lookup *__clk_register_clkdev(struct clk_hw *hw,
 	return cl;
 }
 
+static int do_clk_register_clkdev(struct clk_hw *hw,
+	struct clk_lookup **cl, const char *con_id, const char *dev_id)
+{
+
+	if (IS_ERR(hw))
+		return PTR_ERR(hw);
+	/*
+	 * Since dev_id can be NULL, and NULL is handled specially, we must
+	 * pass it as either a NULL format string, or with "%s".
+	 */
+	if (dev_id)
+		*cl = __clk_register_clkdev(hw, con_id, "%s",
+					   dev_id);
+	else
+		*cl = __clk_register_clkdev(hw, con_id, NULL);
+
+	return *cl ? 0 : -ENOMEM;
+}
+
 /**
  * clk_register_clkdev - register one clock lookup for a struct clk
  * @clk: struct clk to associate with all clk_lookups
@@ -420,20 +439,10 @@ int clk_register_clkdev(struct clk *clk, const char *con_id,
 {
 	struct clk_lookup *cl;
 
-	if (IS_ERR(clk))
-		return PTR_ERR(clk);
-
-	/*
-	 * Since dev_id can be NULL, and NULL is handled specially, we must
-	 * pass it as either a NULL format string, or with "%s".
-	 */
-	if (dev_id)
-		cl = __clk_register_clkdev(__clk_get_hw(clk), con_id, "%s",
-					   dev_id);
-	else
-		cl = __clk_register_clkdev(__clk_get_hw(clk), con_id, NULL);
-
-	return cl ? 0 : -ENOMEM;
+	if (!IS_ERR(clk))
+		return do_clk_register_clkdev(__clk_get_hw(clk), &cl, con_id,
+					      dev_id);
+	return PTR_ERR(clk);
 }
 EXPORT_SYMBOL(clk_register_clkdev);
 
@@ -456,18 +465,79 @@ int clk_hw_register_clkdev(struct clk_hw *hw, const char *con_id,
 {
 	struct clk_lookup *cl;
 
-	if (IS_ERR(hw))
-		return PTR_ERR(hw);
+	return do_clk_register_clkdev(hw, &cl, con_id, dev_id);
+}
+EXPORT_SYMBOL(clk_hw_register_clkdev);
 
-	/*
-	 * Since dev_id can be NULL, and NULL is handled specially, we must
-	 * pass it as either a NULL format string, or with "%s".
-	 */
-	if (dev_id)
-		cl = __clk_register_clkdev(hw, con_id, "%s", dev_id);
-	else
-		cl = __clk_register_clkdev(hw, con_id, NULL);
+static void devm_clkdev_release(struct device *dev, void *res)
+{
+	clkdev_drop(*(struct clk_lookup **)res);
+}
 
-	return cl ? 0 : -ENOMEM;
+static int devm_clk_match_clkdev(struct device *dev, void *res, void *data)
+{
+	struct clk_lookup **l = res;
+
+	if (!l || !*l) {
+		WARN_ON(!l || !*l);
+		return 0;
+	}
+	return *l == data;
 }
-EXPORT_SYMBOL(clk_hw_register_clkdev);
+
+/**
+ * devm_clk_release_clkdev - Resource managed clkdev lookup release
+ * @dev: device this lookup is bound
+ * @con_id: connection ID string on device
+ * @dev_id: format string describing device name
+ *
+ * Drop the clkdev lookup created with devm_clk_hw_register_clkdev.
+ * Normally this function will not need to be called and the resource
+ * management code will ensure that the resource is freed.
+ */
+void devm_clk_release_clkdev(struct device *dev, const char *con_id,
+			     const char *dev_id)
+{
+	struct clk_lookup *cl;
+	int rval;
+
+	cl = clk_find(dev_id, con_id);
+	WARN_ON(!cl);
+	rval = devres_release(dev, devm_clkdev_release,
+			      devm_clk_match_clkdev, cl);
+	WARN_ON(rval);
+}
+EXPORT_SYMBOL(devm_clk_release_clkdev);
+
+/**
+ * devm_clk_hw_register_clkdev - managed clk lookup registration for clk_hw
+ * @dev: device this lookup is bound
+ * @hw: struct clk_hw to associate with all clk_lookups
+ * @con_id: connection ID string on device
+ * @dev_id: format string describing device name
+ *
+ * con_id or dev_id may be NULL as a wildcard, just as in the rest of
+ * clkdev.
+ *
+ * To make things easier for mass registration, we detect error clk_hws
+ * from a previous clk_hw_register_*() call, and return the error code for
+ * those.  This is to permit this function to be called immediately
+ * after clk_hw_register_*().
+ */
+int devm_clk_hw_register_clkdev(struct device *dev, struct clk_hw *hw,
+				const char *con_id, const char *dev_id)
+{
+	int rval = -ENOMEM;
+	struct clk_lookup **cl;
+
+	cl = devres_alloc(devm_clkdev_release, sizeof(*cl), GFP_KERNEL);
+	if (cl) {
+		rval = do_clk_register_clkdev(hw, cl, con_id, dev_id);
+		if (!rval)
+			devres_add(dev, cl);
+		else
+			devres_free(cl);
+	}
+	return rval;
+}
+EXPORT_SYMBOL(devm_clk_hw_register_clkdev);
diff --git a/include/linux/clkdev.h b/include/linux/clkdev.h
index 4890ff033220..ccb32af5848b 100644
--- a/include/linux/clkdev.h
+++ b/include/linux/clkdev.h
@@ -52,4 +52,8 @@ int clk_add_alias(const char *, const char *, const char *, struct device *);
 int clk_register_clkdev(struct clk *, const char *, const char *);
 int clk_hw_register_clkdev(struct clk_hw *, const char *, const char *);
 
+int devm_clk_hw_register_clkdev(struct device *dev, struct clk_hw *hw,
+				const char *con_id, const char *dev_id);
+void devm_clk_release_clkdev(struct device *dev, const char *con_id,
+			     const char *dev_id);
 #endif
-- 
2.14.3


-- 
Matti Vaittinen
ROHM Semiconductors

~~~ "I don't think so," said Rene Descartes.  Just then, he vanished ~~~
