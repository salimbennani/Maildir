Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:17:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 60EFA5804F9;
	Thu,  6 Dec 2018 18:24:38 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 06 Dec 2018 18:24:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AFisIuRN5t3r23OyhWlwl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPn6p8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bIUADeQBM+FXoIbhqFUOtgO+CAu3CePzyDJFnGP6068m3+g/FwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7M70dUfuvw6nNzDXIcvFY2Tbn6IfSdxAuu+2MXaltccHMzkQvEgPFjlSK?=
 =?us-ascii?q?qYP/OjOazPgNvnOY7+V+T+KvjXAoqwVrrjio3McshZDEi4QIwV7K8iV5xZw6Jd?=
 =?us-ascii?q?y+SENjYt6rDoFQtyeEOItyWM8iRHtouCk8x7YbupC7ZDAHxIo7yxPbcfCLboaF?=
 =?us-ascii?q?7gz5WOqMIjp0mGhpdbO9ihqq70Ss1/HwWtOp3FtFsyZJiMfAu38C2hDJ98SKTv?=
 =?us-ascii?q?Vw80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWTAZ?=
 =?us-ascii?q?QCCmMynlgFdBnf2OvimPqYMmp5TwsJUJTbNeVUdzEekVXBdLBtsHdbJ+RTohkP?=
 =?us-ascii?q?a7jdQB4HOitwSZEMBav4rOU/uOKfbiMjCUif9DfRRekuCwFpgaKoCugx8qUVJ9?=
 =?us-ascii?q?homfXhOIBd0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAACb2Alch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBgVqBD4ECJ4xyizGCDRSJDIUhhBSEeYFzFBg?=
 =?us-ascii?q?NBgGHVyI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiQTB?=
 =?us-ascii?q?gEBNwEEAQkBAQoRAwECAS4DORMIBhMFglFLAYF0BQcBBQqlLIFsM4J2AQEFgTA?=
 =?us-ascii?q?BhXkIIophgRwXgUA/hCOKXIktCoYCRjVRhGmKcwmHBIo3CxiCKY8NLIpTgnuLE?=
 =?us-ascii?q?oFHAYILTTAIgycJCoIIDBcSiEyFTjEyAQEBfwMBAQMBHRMLAYl8AQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAACb2Alch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBgVqBD4ECJ4xyizGCDRSJDIUhhBSEeYFzFBgNBgGHVyI1CA0BA?=
 =?us-ascii?q?wEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiQTBgEBNwEEAQkBAQo?=
 =?us-ascii?q?RAwECAS4DORMIBhMFglFLAYF0BQcBBQqlLIFsM4J2AQEFgTABhXkIIophgRwXg?=
 =?us-ascii?q?UA/hCOKXIktCoYCRjVRhGmKcwmHBIo3CxiCKY8NLIpTgnuLEoFHAYILTTAIgyc?=
 =?us-ascii?q?JCoIIDBcSiEyFTjEyAQEBfwMBAQMBHRMLAYl8AQE?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="56472624"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 18:22:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725995AbeLGCWd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 21:22:33 -0500
Received: from mail.kernel.org ([198.145.29.99]:58326 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725939AbeLGCWd (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 21:22:33 -0500
Received: from devnote (NE2965lan1.rev.em-net.ne.jp [210.141.244.193])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 64C0A2083D;
        Fri,  7 Dec 2018 02:22:31 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544149352;
        bh=wsR8xlCQ/MuoVh9wNLdj3jzIywHShzJCHzZoePq7/tc=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=2YRQ/EPabpVU/2rdnTahEeRbaJmB6VbY3haBLRNl5ZrTVVgAjehBmsEgskROQhXql
         GShGW30eTF0Gp/VqZaw+V5IHA540KBWo+5h9LhqJelZckFMTMmAHgH7+8TFf3lxNi6
         9QYz1BzYr3xJiLKv/GJBGfvyDwEIJqDPak4oAziM=
Date: Fri, 7 Dec 2018 11:22:29 +0900
From: Masami Hiramatsu <mhiramat@kernel.org>
To: Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org, Ingo Molnar <mingo@kernel.org>,
        Tom Zanussi <tom.zanussi@linux.intel.com>,
        Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
Subject: Re: [PATCH v2 10/12] tracing: Remove orphaned
 trace_add/remove_event_call functions
Message-Id: <20181207112229.ee3f875b46d54d99fbd47c9f@kernel.org>
In-Reply-To: <20181204135120.02361a89@vmware.local.home>
References: <154140838606.17322.15294184388075458777.stgit@devbox>
        <154140866955.17322.2081425494660638846.stgit@devbox>
        <20181204135120.02361a89@vmware.local.home>
X-Mailer: Sylpheed 3.5.0 (GTK+ 2.24.30; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 4 Dec 2018 13:51:20 -0500
Steven Rostedt <rostedt@goodmis.org> wrote:

> On Mon,  5 Nov 2018 18:04:29 +0900
> Masami Hiramatsu <mhiramat@kernel.org> wrote:
> 
> > Remove trace_add_event_call() and trace_remove_event_call()
> > functions since those are not used anymore.
> > 
> > Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
> 
> Hi Masami,
> 
> I've applied the series locally (need to test it) except for this
> patch. Honestly, I hate the "_nolock" name, and it makes no sense when
> 
>  1) they still grab locks
>  2) there's no version without "_nolock"

Agreed.

> 
> I added this patch in its place:

That looks good to me too. I thought to add similar patch, but just waited
for the comment.

Acked-by: Masami Hiramatsu <mhiramat@kernel.org>

Thank you!

> 
> -- Steve
> 
> From: "Steven Rostedt (VMware)" <rostedt@goodmis.org>
> Date: Tue, 4 Dec 2018 13:35:45 -0500
> Subject: [PATCH] tracing: Consolidate trace_add/remove_event_call back to the
>  nolock functions
> 
> The trace_add/remove_event_call_nolock() functions were added to allow
> the tace_add/remove_event_call() code be called when the event_mutex
> lock was already taken. Now that all callers are done within the
> event_mutex, there's no reason to have two different interfaces.
> 
> Remove the current wrapper trace_add/remove_event_call()s and rename the
> _nolock versions back to the original names.
> 
> Link: http://lkml.kernel.org/r/154140866955.17322.2081425494660638846.stgit@devbox
> 
> Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
> ---
>  include/linux/trace_events.h     |  2 --
>  kernel/trace/trace_events.c      | 30 ++++--------------------------
>  kernel/trace/trace_events_hist.c |  6 +++---
>  kernel/trace/trace_kprobe.c      |  4 ++--
>  kernel/trace/trace_uprobe.c      |  4 ++--
>  5 files changed, 11 insertions(+), 35 deletions(-)
> 
> diff --git a/include/linux/trace_events.h b/include/linux/trace_events.h
> index 3aa05593a53f..4130a5497d40 100644
> --- a/include/linux/trace_events.h
> +++ b/include/linux/trace_events.h
> @@ -529,8 +529,6 @@ extern int trace_event_raw_init(struct trace_event_call *call);
>  extern int trace_define_field(struct trace_event_call *call, const char *type,
>  			      const char *name, int offset, int size,
>  			      int is_signed, int filter_type);
> -extern int trace_add_event_call_nolock(struct trace_event_call *call);
> -extern int trace_remove_event_call_nolock(struct trace_event_call *call);
>  extern int trace_add_event_call(struct trace_event_call *call);
>  extern int trace_remove_event_call(struct trace_event_call *call);
>  extern int trace_event_get_offsets(struct trace_event_call *call);
> diff --git a/kernel/trace/trace_events.c b/kernel/trace/trace_events.c
> index a3b157f689ee..bd0162c0467c 100644
> --- a/kernel/trace/trace_events.c
> +++ b/kernel/trace/trace_events.c
> @@ -2305,7 +2305,8 @@ __trace_early_add_new_event(struct trace_event_call *call,
>  struct ftrace_module_file_ops;
>  static void __add_event_to_tracers(struct trace_event_call *call);
>  
> -int trace_add_event_call_nolock(struct trace_event_call *call)
> +/* Add an additional event_call dynamically */
> +int trace_add_event_call(struct trace_event_call *call)
>  {
>  	int ret;
>  	lockdep_assert_held(&event_mutex);
> @@ -2320,17 +2321,6 @@ int trace_add_event_call_nolock(struct trace_event_call *call)
>  	return ret;
>  }
>  
> -/* Add an additional event_call dynamically */
> -int trace_add_event_call(struct trace_event_call *call)
> -{
> -	int ret;
> -
> -	mutex_lock(&event_mutex);
> -	ret = trace_add_event_call_nolock(call);
> -	mutex_unlock(&event_mutex);
> -	return ret;
> -}
> -
>  /*
>   * Must be called under locking of trace_types_lock, event_mutex and
>   * trace_event_sem.
> @@ -2376,8 +2366,8 @@ static int probe_remove_event_call(struct trace_event_call *call)
>  	return 0;
>  }
>  
> -/* no event_mutex version */
> -int trace_remove_event_call_nolock(struct trace_event_call *call)
> +/* Remove an event_call */
> +int trace_remove_event_call(struct trace_event_call *call)
>  {
>  	int ret;
>  
> @@ -2392,18 +2382,6 @@ int trace_remove_event_call_nolock(struct trace_event_call *call)
>  	return ret;
>  }
>  
> -/* Remove an event_call */
> -int trace_remove_event_call(struct trace_event_call *call)
> -{
> -	int ret;
> -
> -	mutex_lock(&event_mutex);
> -	ret = trace_remove_event_call_nolock(call);
> -	mutex_unlock(&event_mutex);
> -
> -	return ret;
> -}
> -
>  #define for_each_event(event, start, end)			\
>  	for (event = start;					\
>  	     (unsigned long)event < (unsigned long)end;		\
> diff --git a/kernel/trace/trace_events_hist.c b/kernel/trace/trace_events_hist.c
> index 21e4954375a1..82e72c48a5a9 100644
> --- a/kernel/trace/trace_events_hist.c
> +++ b/kernel/trace/trace_events_hist.c
> @@ -960,7 +960,7 @@ static int register_synth_event(struct synth_event *event)
>  	call->data = event;
>  	call->tp = event->tp;
>  
> -	ret = trace_add_event_call_nolock(call);
> +	ret = trace_add_event_call(call);
>  	if (ret) {
>  		pr_warn("Failed to register synthetic event: %s\n",
>  			trace_event_name(call));
> @@ -969,7 +969,7 @@ static int register_synth_event(struct synth_event *event)
>  
>  	ret = set_synth_event_print_fmt(call);
>  	if (ret < 0) {
> -		trace_remove_event_call_nolock(call);
> +		trace_remove_event_call(call);
>  		goto err;
>  	}
>   out:
> @@ -984,7 +984,7 @@ static int unregister_synth_event(struct synth_event *event)
>  	struct trace_event_call *call = &event->call;
>  	int ret;
>  
> -	ret = trace_remove_event_call_nolock(call);
> +	ret = trace_remove_event_call(call);
>  
>  	return ret;
>  }
> diff --git a/kernel/trace/trace_kprobe.c b/kernel/trace/trace_kprobe.c
> index bdf8c2ad5152..0e0f7b8024fb 100644
> --- a/kernel/trace/trace_kprobe.c
> +++ b/kernel/trace/trace_kprobe.c
> @@ -1353,7 +1353,7 @@ static int register_kprobe_event(struct trace_kprobe *tk)
>  		kfree(call->print_fmt);
>  		return -ENODEV;
>  	}
> -	ret = trace_add_event_call_nolock(call);
> +	ret = trace_add_event_call(call);
>  	if (ret) {
>  		pr_info("Failed to register kprobe event: %s\n",
>  			trace_event_name(call));
> @@ -1368,7 +1368,7 @@ static int unregister_kprobe_event(struct trace_kprobe *tk)
>  	int ret;
>  
>  	/* tp->event is unregistered in trace_remove_event_call() */
> -	ret = trace_remove_event_call_nolock(&tk->tp.call);
> +	ret = trace_remove_event_call(&tk->tp.call);
>  	if (!ret)
>  		kfree(tk->tp.call.print_fmt);
>  	return ret;
> diff --git a/kernel/trace/trace_uprobe.c b/kernel/trace/trace_uprobe.c
> index 4a7b21c891f3..e335576b9411 100644
> --- a/kernel/trace/trace_uprobe.c
> +++ b/kernel/trace/trace_uprobe.c
> @@ -1320,7 +1320,7 @@ static int register_uprobe_event(struct trace_uprobe *tu)
>  		return -ENODEV;
>  	}
>  
> -	ret = trace_add_event_call_nolock(call);
> +	ret = trace_add_event_call(call);
>  
>  	if (ret) {
>  		pr_info("Failed to register uprobe event: %s\n",
> @@ -1337,7 +1337,7 @@ static int unregister_uprobe_event(struct trace_uprobe *tu)
>  	int ret;
>  
>  	/* tu->event is unregistered in trace_remove_event_call() */
> -	ret = trace_remove_event_call_nolock(&tu->tp.call);
> +	ret = trace_remove_event_call(&tu->tp.call);
>  	if (ret)
>  		return ret;
>  	kfree(tu->tp.call.print_fmt);
> -- 
> 2.19.2
> 


-- 
Masami Hiramatsu <mhiramat@kernel.org>
