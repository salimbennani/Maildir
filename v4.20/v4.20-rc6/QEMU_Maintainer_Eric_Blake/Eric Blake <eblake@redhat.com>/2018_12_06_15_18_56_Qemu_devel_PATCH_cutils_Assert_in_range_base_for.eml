Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:49:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D5D3C58042F
	for <like.xu@linux.intel.com>; Thu,  6 Dec 2018 07:28:25 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 07:28:25 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A3WZuPRCkUmxsYUZIDG6IUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPTypMbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/m/UhMJtlKJWohCvqhNiz4PafI2aKuF+c7jBcd8GX2dNQtpdWzBdDo66?=
 =?us-ascii?q?coABD/ABPeFdr4TlqFUOtxq+ChWxD+7yzj9HnHz20rMn2OkmDw7JxwggEMgNsH?=
 =?us-ascii?q?vKt9j1LrkdXv21zKbS0TXPde9Z2TD46IXRdB0qvPKCXapofMbP1UUiFBnJgkiN?=
 =?us-ascii?q?pYHmJT+ZyOoAvmiB4+Z9V++jk3Arpx11rzS128shhJfFipgIxl3H+yh12pg5KN?=
 =?us-ascii?q?6+RUVme9CrCoFQuDufN4ZuQsMtXWVouCEix70CuJ67ZzQKyI89yx7QbfyHbpKE?=
 =?us-ascii?q?4hX5VOaeOTt4hXRld6yjhxuq70Ss1u7xWtOp3FpXrSdJiMfAu34N2hDJ98SKSO?=
 =?us-ascii?q?Nx/kK71jaO0wDT5PtEIUcxlafDMp4u3LswlocKvUveACD2hlv5jKuPeko//eio?=
 =?us-ascii?q?9uLnban4qZ+HMIN0jgD+MqcwlcClDuU4LxADX2ya+eS6yb3i8lf1QLRMjv0qjK?=
 =?us-ascii?q?bZtIrWKtgcpq68GAJV1IEj6xCwDzegzdQUh34HLEhKeB6flYjmJ0nOIOzkDfe4?=
 =?us-ascii?q?m1mslDZrx/PYMbH7DZTNM2POkLPgfbZ79k5dxxA/zdFZ55JIFL4BJOj/VVP2tN?=
 =?us-ascii?q?zdXVcENRepybPnFMllzdFZHmaOGbOCdqXVt1CO+6QoOebLYYYUvDP0Lb8i/+Lv?=
 =?us-ascii?q?inki3kYQeLTs0ZYJZXTrI/J9Pk/MZHPthssGQ34Huxd7QOH0hVnHSzNKenupQ4?=
 =?us-ascii?q?o64Tc0Dp/gCp3MEZuwir6M1zvuA5tNe2pdAUqNG3q7S4LRQvoJdWeeL9FslhQC?=
 =?us-ascii?q?Ur6uTZJn0guh5yHgzL8yA/DV8WUysZvg2ZAh6ufXnBI/3SZ5A8SUzyeGSGQizT?=
 =?us-ascii?q?BAfCM/wK0q+R818VyEy6Ut2/E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B1AAB/PwlcmBHrdtBkHgEGBwaBVAYLA?=
 =?us-ascii?q?YEwgmKMcosvm0wWGBSHVyI3Bg0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQI?=
 =?us-ascii?q?DGAmCXwQCQwopAwMBAgYCSAgDAWwFgxyCAgEEpySFQIRojB8XgUA/iXGFDgKJK?=
 =?us-ascii?q?4cIUI9cCZE7CxiJYodUmQyBXIF3MxoIGxWDJxOCPY4qIjGBBxyIJ4F3AQE?=
X-IPAS-Result: =?us-ascii?q?A0B1AAB/PwlcmBHrdtBkHgEGBwaBVAYLAYEwgmKMcosvm0w?=
 =?us-ascii?q?WGBSHVyI3Bg0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL4I2BQIDGAmCXwQCQwopA?=
 =?us-ascii?q?wMBAgYCSAgDAWwFgxyCAgEEpySFQIRojB8XgUA/iXGFDgKJK4cIUI9cCZE7Cxi?=
 =?us-ascii?q?JYodUmQyBXIF3MxoIGxWDJxOCPY4qIjGBBxyIJ4F3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,322,1539673200"; 
   d="scan'208";a="55199564"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 06 Dec 2018 07:28:25 -0800
Received: from localhost ([::1]:41433 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gUvZg-0000Kr-8j
	for like.xu@linux.intel.com; Thu, 06 Dec 2018 10:28:24 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47332)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gUvWj-0006CZ-J6
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 10:25:25 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <eblake@redhat.com>) id 1gUvQd-0007fQ-Kn
	for qemu-devel@nongnu.org; Thu, 06 Dec 2018 10:19:07 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44980)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <eblake@redhat.com>)
	id 1gUvQd-0007em-D2; Thu, 06 Dec 2018 10:19:03 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7B9C69B302;
	Thu,  6 Dec 2018 15:19:02 +0000 (UTC)
Received: from red.redhat.com (ovpn-125-104.rdu2.redhat.com [10.10.125.104])
	by smtp.corp.redhat.com (Postfix) with ESMTP id D64387F1A7;
	Thu,  6 Dec 2018 15:19:00 +0000 (UTC)
From: Eric Blake <eblake@redhat.com>
To: qemu-devel@nongnu.org
Date: Thu,  6 Dec 2018 09:18:56 -0600
Message-Id: <20181206151856.77503-1-eblake@redhat.com>
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.39]);
	Thu, 06 Dec 2018 15:19:02 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH] cutils: Assert in-range base for
 string-to-integer conversions
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-trivial@nongnu.org, vsementsov@virtuozzo.com, armbru@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

POSIX states that the value of endptr is unspecified if strtol()
fails with EINVAL due to an invalid base argument.  Since none of
the callers to check_strtox_error() initialized endptr, we could
end up propagating uninitialized data back to a caller on error.
However, passing an out-of-range base is already a sign of poor
programming, so let's just assert that base is in range, at which
point check_strtox_error() can be tightened to assert that it is
receiving an initialized ep that points somewhere within the
caller's original string, regardless of whether strto*() succeeded
or failed with ERANGE.

Reported-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Signed-off-by: Eric Blake <eblake@redhat.com>
---

Also tested that this does not negatively impact David's pending
additions of qemu_strtod{,_finite}().  Thus:
Based-on: <20181121164421.20780-1-david@redhat.com>

 util/cutils.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/util/cutils.c b/util/cutils.c
index 91930d1bbeb..e098debdc0c 100644
--- a/util/cutils.c
+++ b/util/cutils.c
@@ -278,6 +278,7 @@ int qemu_strtosz_metric(const char *nptr, const char **end, uint64_t *result)
 static int check_strtox_error(const char *nptr, char *ep,
                               const char **endptr, int libc_errno)
 {
+    assert(ep >= nptr);
     if (endptr) {
         *endptr = ep;
     }
@@ -325,6 +326,7 @@ int qemu_strtoi(const char *nptr, const char **endptr, int base,
     char *ep;
     long long lresult;

+    assert((unsigned) base <= 36 && base != 1);
     if (!nptr) {
         if (endptr) {
             *endptr = nptr;
@@ -377,6 +379,7 @@ int qemu_strtoui(const char *nptr, const char **endptr, int base,
     char *ep;
     long long lresult;

+    assert((unsigned) base <= 36 && base != 1);
     if (!nptr) {
         if (endptr) {
             *endptr = nptr;
@@ -433,6 +436,7 @@ int qemu_strtol(const char *nptr, const char **endptr, int base,
 {
     char *ep;

+    assert((unsigned) base <= 36 && base != 1);
     if (!nptr) {
         if (endptr) {
             *endptr = nptr;
@@ -475,6 +479,7 @@ int qemu_strtoul(const char *nptr, const char **endptr, int base,
 {
     char *ep;

+    assert((unsigned) base <= 36 && base != 1);
     if (!nptr) {
         if (endptr) {
             *endptr = nptr;
@@ -502,6 +507,7 @@ int qemu_strtoi64(const char *nptr, const char **endptr, int base,
 {
     char *ep;

+    assert((unsigned) base <= 36 && base != 1);
     if (!nptr) {
         if (endptr) {
             *endptr = nptr;
@@ -525,6 +531,7 @@ int qemu_strtou64(const char *nptr, const char **endptr, int base,
 {
     char *ep;

+    assert((unsigned) base <= 36 && base != 1);
     if (!nptr) {
         if (endptr) {
             *endptr = nptr;
@@ -657,6 +664,7 @@ int parse_uint(const char *s, unsigned long long *value, char **endptr,
     char *endp = (char *)s;
     unsigned long long val = 0;

+    assert((unsigned) base <= 36 && base != 1);
     if (!s) {
         r = -EINVAL;
         goto out;
-- 
2.17.2


