Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 16:18:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8E0A3580375;
	Thu,  6 Dec 2018 22:30:59 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 22:30:59 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AkNglEBcF8lk7XKwBhKJG6eI3lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc68ZBaN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNwdWWRPXthcWzVYDo2+?=
 =?us-ascii?q?coQPFfMNM/tFr4nmv1sBswexBRW1COPrzT9JiGL90ak63ugkFwzJ2xAuEdIQvX?=
 =?us-ascii?q?jNtdn7NrodUfqswKfV0DXDdOtW1inh54jUbxstpe+AUa51fcfX1EIhFR7Kjk+I?=
 =?us-ascii?q?pILlIT2by+oDvWuc4eViW+KgiWAnqxppojWt3coglpXFi5gJxl3e6Sl13IA4Ls?=
 =?us-ascii?q?C4Rk5hZt6kFYNduCCbN4twX8gsRWZouCA1yrYbvpO7eDUKx4gmxxHBbfyLaYeJ?=
 =?us-ascii?q?4hPlVOuKLjd4gWhqeLO7hxqo7Uegzej8W9Cy3V1XrSRFisHBum4R2xHX8MSLV/?=
 =?us-ascii?q?Vw8lm71TqS1A3f9vtILEE2mKbDNZIt3ro9moAOvUnNACP6glj6gayVe0k++eWk?=
 =?us-ascii?q?9+Lqaaj8qJCGLY97kAT+P7wumsOhBeQ4NRADX3aU+euizr3v5075T6tQjv0wjK?=
 =?us-ascii?q?bZtIrWJcMBpq62GwNV04Aj5AijDzq+ztgUgX0KIEhYdB+JkYTlIUzCLfPkAful?=
 =?us-ascii?q?glmhki9nx/XcMb3gBpXNIGLDkLDkfbtl705cyQwzzc1Q5p5NCbEOPujzWknvu9?=
 =?us-ascii?q?zcFxM5NAK1w+D5B9VnzY4eR22PDbGDMK/Isl+H+PgvI++Sa48Rojr9LOIl5/H2?=
 =?us-ascii?q?gX8jhVAdZbWp3YcQaH2gGvRmIkaZbmT2jtYODGcHpQ4+TO3siF2fXj9ffXeyX6?=
 =?us-ascii?q?Qg5j4lDIKqF5vMRoeogLaZxie0AoVWZnxaClCLCXrod5+LW/YQaC2IJc9tiDwE?=
 =?us-ascii?q?VaW7RI8n2hGjrwv6y7thLurJ9SwUr5Pj1N5p5+LNkRE+7yB7D8OY02uVVWF7gn?=
 =?us-ascii?q?sIRyMq3KB4uUF9yFCD3rZij/xbEtxT4fVJUgAhOJ7Yzux6Dc3yWw3bcteITlam?=
 =?us-ascii?q?XsupATUrQt0txN8OZl53G8++gRDbwyqqH7gVmqSRC5wv8qLc2HvxK9xny3nc1q?=
 =?us-ascii?q?kslF0mQspJNW27ia9z7QnTB4jVk0qHk6amb7gT3CnI9G2b12qBoFlYUBJsUaXC?=
 =?us-ascii?q?RX0fZVHZrdLj6kPGTr+hE7InMgRaxM6GK6tKbMDpjFpcSPfiPtTef3y+m2OqCR?=
 =?us-ascii?q?mUwbOMaZLge38B0yXFFEgEjwcT8G6bOgckGCeuvXjSDDx0GlLpeEPj7+9+pHS/?=
 =?us-ascii?q?Tk83ygGKa1Zs1760+h4TmPydROkf3rMCuCc9tTp0GEyx0M7RC9qFvwBhZrlTYc?=
 =?us-ascii?q?sh4Fdb0mLUrxFyMYa+L698nFIecx54v0X11xppDIVNiswqrHIszApvJqOUylJB?=
 =?us-ascii?q?dzWE3Z/uPr3bMHX9/Beqa6TOwFHRzM6W+rsT6PQ/s1jjoACpFk8l83V709lU02?=
 =?us-ascii?q?GQ5onQAAoVS5LxVkc39x51p7zBZik95oXU1WBjMKWusz/C3c4pC/Uhyhq6Y9hf?=
 =?us-ascii?q?N6aEHhfoE8IGH8iuNPAqm1+xYx0eOOBd6qE1MN2mdvecw6GrIftvkyigjWRE54?=
 =?us-ascii?q?B9zFmB9y59Su7OwpYEzOuU3gqBVzfgklihttr7lpxDZTEXBmC/0zTrBJZNZq1u?=
 =?us-ascii?q?eoYGEWevI9CtytpinZLsWn5Y+0SlB1MJw8KpfRuSb1rg3Qxfz0gXoHqnmTemwD?=
 =?us-ascii?q?xwiT0msq2f3CnWyeT4aBUHInJLRHVljVr0O4i0jswVU1Kybwc0kxup/0D6yLZB?=
 =?us-ascii?q?pKR+NmXcXV1HfyzrIG58SKuwsbyCbtVL6JMptyVXTeu9bUqbSr77vxsVzSfjE3?=
 =?us-ascii?q?FCyzA8cjGgoo/5kABiiGKBMHZzq2LUeMFxxRvF5N3QX+VR3icARCRjjTnXB168?=
 =?us-ascii?q?P8Sm/NmOlpfDtPy+WHylVpFJbSbryoaAvjOh5WJ2GR2/g+yzmtr/HAg4yyD7zd?=
 =?us-ascii?q?pqVSbPrBrmeYnkzae6MeFmfkluGlD87dF3GoV/kos2mZER1mIWhpST/Xobj2jz?=
 =?us-ascii?q?Nc9X1r75bHoIXTQL2cLa4BD52E1/KXKE34L4WW+awsd7Zdm6Y2UW1zk578BLDq?=
 =?us-ascii?q?eU8bNFkTF0olq+sQLef/x9ki0Bxvsp7X4Qm/sJtxY1ziWBHrASGlFVPS/2mBSJ?=
 =?us-ascii?q?9dy+rLhXa3ypcbi/z0d+mdGhDLefogBTQnr5e5EiHTNu4cV7Kl7DzHrz6oT8ct?=
 =?us-ascii?q?nKcd0TrgGUkwvHj+VNLZIxl/kKijB9NWPzo3Il0PI7ggJ03Z6hooeHMWpt8bm9?=
 =?us-ascii?q?Ah5ZMD31eswS9ivsjaZYgsaZwYSvEo99FTUMWZviVeioHy4KtfT7KwaOFyUxqm?=
 =?us-ascii?q?ucGbraBwOe6V1pr3TSE5CwLHGXJWIUzdFjRBmbOUxejxoYXDQ8np4lCA+qwNbt?=
 =?us-ascii?q?f1t+5jAU/lT4sAdDyvp0NxnjVWfSvBynZS0zSJibMRpa9AVC51rOPMya7+JzGT?=
 =?us-ascii?q?xY/5K7oAyMLGybexpHDWUTVkOYAFDjO6Gk5cPc/OiAGuq+M/zObK2MqeNEUveH?=
 =?us-ascii?q?24mv3pF6/zqWNcWPI3piD+A92kVZRnB0AMDZmzQJSywKmCPBdc+bpBGg+iJpqs?=
 =?us-ascii?q?Cz6ujkWAXq5YGXEbtdLc1v+wyqgaeEL+ORhCF5KStB1pMR33DIzqIT3EUViyFo?=
 =?us-ascii?q?eDmgCrAAtS/LTKLNla5bFR8bayVvNMRW66IwxBVCOcneitntzL53kuY1C0tZVV?=
 =?us-ascii?q?zmgsypZdIFI2C+NFPEBUaHLreGJSfMw8H4f6y8U6BQjP5Puh20uDabFVLjPzuZ?=
 =?us-ascii?q?mznoURCvLf9DjCWBMBNCv4G9dw5nCXL/Q9L+dh27LNh3gCUszr0pnXzKL3ATMD?=
 =?us-ascii?q?hmf0NJr72d9idYgvR5G2xc4XtpN+iEmyCF7+bGLpYaq+dkAiNxl+hC+nQ116NV?=
 =?us-ascii?q?7D1YRPxygCbSst9uo1S8nuaT0DZoTBpOpShNhI+QuUViOKPZ9oRPWHre/RIN63?=
 =?us-ascii?q?mQBAoOp9d/FtLvvKVQwMDVlK3vMDdC787U/cwECsnUMs2HNn8hMRvvGDHMDQoF?=
 =?us-ascii?q?TSSkNWfQh0FGlPGS93uVroU1q5T2mZoOTKNbW0IxFv8AFktlG9kCc99LWWYgkL?=
 =?us-ascii?q?iGnIsL6GC4oR35WspXpNbEW+iUDPGpLyyWyfFCagcXxqn7ZYgeKMWv3UF+ZlRk?=
 =?us-ascii?q?tJrFFlCWXt1XpCBlKAgurxMJuHx/SHAjnlnudhuF/nAeD7i3kwQwhw84Zv4ipx?=
 =?us-ascii?q?n25FJiFlvM7A83lkZ5zdH4ijGcdnjhLaGYUoRfCi6yvE80ZMCoCz1pZBG/yBQ3?=
 =?us-ascii?q?fAzPQKhc2v4/KG0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAABREgpch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYNrJ4wTjXg5iQ+JMoR6gXMSAQEYEwGHWSI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiSCYwMDAQIkGQEbHQEDAgkBAQUQOwMeAhEBBQEcB?=
 =?us-ascii?q?gESBYMcgWkBAxUFmhI8jAkWBQEXgncFhEEKGScNXYE3AgYSh16DE4EcghaBETO?=
 =?us-ascii?q?FNogFAok2gW+FD5AALgcCjhyDLhiJYodULIhjhX+JZQIEAgQFAgUPIYElgg1NI?=
 =?us-ascii?q?4EBgjuCGwkDFxKDOIhSgg4zMoECAwEBIROKCwEB?=
X-IPAS-Result: =?us-ascii?q?A0AEAABREgpch0O0hNFjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYNrJ4wTjXg5iQ+JMoR6gXMSAQEYEwGHWSI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiSCYwMDAQIkGQEbHQEDAgkBAQUQOwMeAhEBBQEcBgESBYMcgWkBAxU?=
 =?us-ascii?q?FmhI8jAkWBQEXgncFhEEKGScNXYE3AgYSh16DE4EcghaBETOFNogFAok2gW+FD?=
 =?us-ascii?q?5AALgcCjhyDLhiJYodULIhjhX+JZQIEAgQFAgUPIYElgg1NI4EBgjuCGwkDFxK?=
 =?us-ascii?q?DOIhSgg4zMoECAwEBIROKCwEB?=
X-IronPort-AV: E=Sophos;i="5.56,324,1539673200"; 
   d="scan'208";a="54936033"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 22:30:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726078AbeLGGax (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 7 Dec 2018 01:30:53 -0500
Received: from mail-pg1-f194.google.com ([209.85.215.194]:37131 "EHLO
        mail-pg1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725978AbeLGGax (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Dec 2018 01:30:53 -0500
Received: by mail-pg1-f194.google.com with SMTP id 80so1270458pge.4;
        Thu, 06 Dec 2018 22:30:52 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :in-reply-to:references;
        bh=IBqTyM54Tq10KxOqmHTX1iqosn8Fy5yMO6MBzN5sdao=;
        b=TjNvKDTg+yWV/bjny9Uceh9Tdqa/IH3OIyk2Nd65/VYhKJsojNbxVbmHnBk5P7s4Iw
         eVmVHZ/UIpQTJonA7NN1NVlmVCD3DidWgaLmA5lQXm+masoXl6Xe52mNjQTqqt5j5SgN
         SQQYzs0ibshmVutjm4LCHCCYIwhmtGlHxPr/1Voz5eaqPqFI/gJ8jXKDOckZE9P1IeYp
         FNB3tQiYIubfTD1q08PkdEhXfD9sfoJyARufL061XgbIBT8oASTm+3c0lm8VNSWu3il/
         sCdzaG0Vb7N1lfj/PQZ+UOTkQ6bYi4mxtF70RZLiaFnvOFRvZiCM/eeVB0BkrKz3gUA9
         6e5Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:in-reply-to:references;
        bh=IBqTyM54Tq10KxOqmHTX1iqosn8Fy5yMO6MBzN5sdao=;
        b=stWTezFUQpnWxQY995nWl60/EJ9cqDr7oJ059s9rfjlEMWhtkEc/hVA6cggcRmTU9H
         3cob5sWpsdbHfK3mU2q4Wq5WTeirPKDmfh/gNszFNBvXduenS1TLbT82leGvGVf6Vjsf
         trUnGFwNo+5NVoa6Rn2j/GYR/uF2Lob/9ChkuuNJreOvFx0nIXUghRsrmdk/CqGpubNZ
         ufAIkqEHtPzIazWZnUlXp+uM9m8UvzIhDRiGEfCmQmxdIum+XTaspDs1BBNuOiCycOsy
         T6Ui2QdMd95D0uCVu6/essDmyRKQXwSaOAHsm5onXmBR4qtT0p4KxBwgExelcG10Fpwi
         4g5A==
X-Gm-Message-State: AA+aEWZgAFfqxhVnkdmssxHyDxbIYhDKj4Hh7o9ptm+5uANaFGI3N3q7
        cU4CyFW4WgTtcfUdJMFuIor3WmEDWCQ=
X-Google-Smtp-Source: AFSGD/Ue5biVt5LzEzmCoSVjd5s1EGMP9I0OnyrAA45V6TEdzlGsgqqifBRtU7yl/Grm1nlV8lYecw==
X-Received: by 2002:a63:7f4f:: with SMTP id p15mr909226pgn.296.1544164252017;
        Thu, 06 Dec 2018 22:30:52 -0800 (PST)
Received: from localhost ([209.132.188.80])
        by smtp.gmail.com with ESMTPSA id o7sm2982928pfb.34.2018.12.06.22.30.50
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 06 Dec 2018 22:30:51 -0800 (PST)
From: Xin Long <lucien.xin@gmail.com>
To: linux-kernel@vger.kernel.org, network dev <netdev@vger.kernel.org>,
        linux-sctp@vger.kernel.org
Cc: davem@davemloft.net,
        Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>,
        Neil Horman <nhorman@tuxdriver.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        David Rientjes <rientjes@google.com>,
        Eric Paris <eparis@redhat.com>,
        Konstantin Khorenko <khorenko@virtuozzo.com>
Subject: [PATCHv2 net 1/3] flex_array: make FLEX_ARRAY_BASE_SIZE the same value of FLEX_ARRAY_PART_SIZE
Date: Fri,  7 Dec 2018 14:30:33 +0800
Message-Id: <a4474a5886807d13146dc67e2d214b7ba3029d32.1544163962.git.lucien.xin@gmail.com>
X-Mailer: git-send-email 2.1.0
In-Reply-To: <cover.1544163962.git.lucien.xin@gmail.com>
References: <cover.1544163962.git.lucien.xin@gmail.com>
In-Reply-To: <cover.1544163962.git.lucien.xin@gmail.com>
References: <cover.1544163962.git.lucien.xin@gmail.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch is to separate the base data memory from struct flex_array and
save it into a page. With this change, total_nr_elements of a flex_array
can grow or shrink without having the old element's memory changed when
the new size of the flex_arry crosses FLEX_ARRAY_BASE_SIZE, which will
be added in the next patch.

Suggested-by: Neil Horman <nhorman@tuxdriver.com>
Signed-off-by: Xin Long <lucien.xin@gmail.com>
Acked-by: Neil Horman <nhorman@tuxdriver.com>
---
 include/linux/flex_array.h | 29 +++++++++--------------------
 lib/flex_array.c           | 15 ++++++++++++---
 2 files changed, 21 insertions(+), 23 deletions(-)

diff --git a/include/linux/flex_array.h b/include/linux/flex_array.h
index b94fa61..29ad65f 100644
--- a/include/linux/flex_array.h
+++ b/include/linux/flex_array.h
@@ -7,9 +7,10 @@
 #include <asm/page.h>
 
 #define FLEX_ARRAY_PART_SIZE PAGE_SIZE
-#define FLEX_ARRAY_BASE_SIZE PAGE_SIZE
+#define FLEX_ARRAY_BASE_SIZE FLEX_ARRAY_PART_SIZE
 
 struct flex_array_part;
+struct flex_array_part_p;
 
 /*
  * This is meant to replace cases where an array-like
@@ -19,29 +20,17 @@ struct flex_array_part;
  */
 
 struct flex_array {
-	union {
-		struct {
-			int element_size;
-			int total_nr_elements;
-			int elems_per_part;
-			struct reciprocal_value reciprocal_elems;
-			struct flex_array_part *parts[];
-		};
-		/*
-		 * This little trick makes sure that
-		 * sizeof(flex_array) == PAGE_SIZE
-		 */
-		char padding[FLEX_ARRAY_BASE_SIZE];
-	};
+	int element_size;
+	int total_nr_elements;
+	int elems_per_part;
+	struct reciprocal_value reciprocal_elems;
+	struct flex_array_part_p *part_p;
+#define parts part_p->p_part
 };
 
-/* Number of bytes left in base struct flex_array, excluding metadata */
-#define FLEX_ARRAY_BASE_BYTES_LEFT					\
-	(FLEX_ARRAY_BASE_SIZE - offsetof(struct flex_array, parts))
-
 /* Number of pointers in base to struct flex_array_part pages */
 #define FLEX_ARRAY_NR_BASE_PTRS						\
-	(FLEX_ARRAY_BASE_BYTES_LEFT / sizeof(struct flex_array_part *))
+	(FLEX_ARRAY_BASE_SIZE / sizeof(struct flex_array_part *))
 
 /* Number of elements of size that fit in struct flex_array_part */
 #define FLEX_ARRAY_ELEMENTS_PER_PART(size)				\
diff --git a/lib/flex_array.c b/lib/flex_array.c
index 2eed22f..8c0b9b6 100644
--- a/lib/flex_array.c
+++ b/lib/flex_array.c
@@ -30,6 +30,10 @@ struct flex_array_part {
 	char elements[FLEX_ARRAY_PART_SIZE];
 };
 
+struct flex_array_part_p {
+	struct flex_array_part *p_part[FLEX_ARRAY_NR_BASE_PTRS];
+};
+
 /*
  * If a user requests an allocation which is small
  * enough, we may simply use the space in the
@@ -39,7 +43,7 @@ struct flex_array_part {
 static inline int elements_fit_in_base(struct flex_array *fa)
 {
 	int data_size = fa->element_size * fa->total_nr_elements;
-	if (data_size <= FLEX_ARRAY_BASE_BYTES_LEFT)
+	if (data_size <= FLEX_ARRAY_BASE_SIZE)
 		return 1;
 	return 0;
 }
@@ -105,13 +109,17 @@ struct flex_array *flex_array_alloc(int element_size, unsigned int total,
 	ret = kzalloc(sizeof(struct flex_array), flags);
 	if (!ret)
 		return NULL;
+	ret->part_p = kzalloc(sizeof(struct flex_array_part_p), flags);
+	if (!ret->part_p) {
+		kfree(ret);
+		return NULL;
+	}
 	ret->element_size = element_size;
 	ret->total_nr_elements = total;
 	ret->elems_per_part = elems_per_part;
 	ret->reciprocal_elems = reciprocal_elems;
 	if (elements_fit_in_base(ret) && !(flags & __GFP_ZERO))
-		memset(&ret->parts[0], FLEX_ARRAY_FREE,
-						FLEX_ARRAY_BASE_BYTES_LEFT);
+		memset(&ret->parts[0], FLEX_ARRAY_FREE, FLEX_ARRAY_BASE_SIZE);
 	return ret;
 }
 EXPORT_SYMBOL(flex_array_alloc);
@@ -148,6 +156,7 @@ EXPORT_SYMBOL(flex_array_free_parts);
 void flex_array_free(struct flex_array *fa)
 {
 	flex_array_free_parts(fa);
+	kfree(fa->part_p);
 	kfree(fa);
 }
 EXPORT_SYMBOL(flex_array_free);
-- 
2.1.0

