Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 21:01:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B30D35804C1
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 02:54:08 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 02:54:08 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqzHNVR2gwC5mG7wUsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMTI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCDIOz?=
 =?us-ascii?q?YJcAAPcDMulWsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0mz+gsCx3K0BA6Et4Qtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTGyCvMb+1X2Tf79YPHchchofWCXbltdsfRykcuFwTBjlWe?=
 =?us-ascii?q?soHlJS2a2fkNs2eB8+psT/6gi2kiqwxopDWk28QiipHRi44L1lzJ9j91zJsoKd?=
 =?us-ascii?q?C7UkJ3f9CpHZtKuy2HNYZ6Wt0uT31stSog17ELt4C3cDIXxJkkyRPTceKLfouO?=
 =?us-ascii?q?7xn+TuieOy14i2hgeL+nhxa970ygyurkW8mw0VZKtTZFksLWunAC0RzT99KLSv?=
 =?us-ascii?q?xn/keuwTqP1gbT5f9YIU0si6bXN50szqQtmpYOsknPBDH6lUv2gaOMa0kp+PCk?=
 =?us-ascii?q?6+H9bbXnop+cOZV0igb7Mqk2g8ywH+E4MhUXU2eG5+u8yqPs/UngTLpRif02j6?=
 =?us-ascii?q?/Zv4zEKsQAoaK5Bw5V0oU95BqlADamzcwVnX0GLFJDZRKGgJLlO1DIIPDkE/i/?=
 =?us-ascii?q?h06gnytsx/DDJbDhBJLNLn7MkLfnYLZx8UlcyBA8zdxH/ZJbFqkBIO7vWk/2rN?=
 =?us-ascii?q?HYCh45Mw+qzOr9B9R9y5gTWWaOAq+fLaPTvkWE5uMpI+mQeoAVvCzxJOQi5/7r?=
 =?us-ascii?q?3jcEn0QAd/ypwYcPcyL/WfBnOFmCJ3zrhNgHDCENpAV5SeXrjFiLV3lUf2qzWK?=
 =?us-ascii?q?QnoSg2DZ/jAYrdS4T+vbqawS3uG5RXYnxBWEmBFGqte4iaVvNJci+LP8J6jhQC?=
 =?us-ascii?q?Ur6uTZJn0guh4xTnwbhqJfaB5ysDqJj438J07eCAqRZn0DVuDNmGm0iXSmtug3?=
 =?us-ascii?q?gUSiV+iKllpEZn13+Z3KR4iuAeHttWsaBnSAA/YL3R0e18Q+/1XgyJKtSWT1Ko?=
 =?us-ascii?q?as+rDTE4UpQ6xNpYMBU1IMmrkh2Wh3niOLQSjbHeQcVsqq8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AEAAD3TwpcmBHrdtBjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUQYBAQELAYEwgk8TjBNfizGCDZdPgXYRGBSHWiI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQEBCAsLBhsOL4I2BQIDGgEGglwDAwECNwwKKQMDAQIGAQEKDgcMHQgDA?=
 =?us-ascii?q?QsFSRMFgxyCAgEEpjSKL4g1g2oXgUA/gRGDEog2giYCiTeGBIY1incJkUALGIF?=
 =?us-ascii?q?ciAc2hCeCeCyHSZEmgUaCDTMaCBsVgyeCJAMXjh5AMYEHHIgtgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AEAAD3TwpcmBHrdtBjGwEBAQEDAQEBBwMBAQGBUQYBAQE?=
 =?us-ascii?q?LAYEwgk8TjBNfizGCDZdPgXYRGBSHWiI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLB?=
 =?us-ascii?q?hsOL4I2BQIDGgEGglwDAwECNwwKKQMDAQIGAQEKDgcMHQgDAQsFSRMFgxyCAgE?=
 =?us-ascii?q?EpjSKL4g1g2oXgUA/gRGDEog2giYCiTeGBIY1incJkUALGIFciAc2hCeCeCyHS?=
 =?us-ascii?q?ZEmgUaCDTMaCBsVgyeCJAMXjh5AMYEHHIgtgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="65773780"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 07 Dec 2018 02:54:07 -0800
Received: from localhost ([::1]:45340 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVDlm-0003BX-Os
	for like.xu@linux.intel.com; Fri, 07 Dec 2018 05:54:06 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:37085)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gVDlM-00032J-8n
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 05:53:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gVDlK-0005wH-KC
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 05:53:40 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44595)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gVDlF-0005tG-9t; Fri, 07 Dec 2018 05:53:33 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id A99943001943;
	Fri,  7 Dec 2018 10:53:32 +0000 (UTC)
Received: from linux.fritz.box (ovpn-117-248.ams2.redhat.com [10.36.117.248])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 6B93016D31;
	Fri,  7 Dec 2018 10:53:31 +0000 (UTC)
Date: Fri, 7 Dec 2018 11:53:29 +0100
From: Kevin Wolf <kwolf@redhat.com>
To: Markus Armbruster <armbru@redhat.com>
Message-ID: <20181207105329.GB5119@linux.fritz.box>
References: <20181206151304.8388-1-kwolf@redhat.com>
	<20181206151304.8388-3-kwolf@redhat.com>
	<87o99x3j8e.fsf@dusky.pond.sub.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <87o99x3j8e.fsf@dusky.pond.sub.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.40]);
	Fri, 07 Dec 2018 10:53:32 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v3 2/4] vmdk: Implement .bdrv_co_create
 callback
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org, qemu-block@nongnu.org, mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Am 07.12.2018 um 08:10 hat Markus Armbruster geschrieben:
> This is a reasonably careful review of the QAPI-related parts, but more
> of an eye-over for the remainder.
> 
> Kevin Wolf <kwolf@redhat.com> writes:
> 
> > From: Fam Zheng <famz@redhat.com>
> >
> > This makes VMDK support blockdev-create. The implementation reuses the
> > image creation code in vmdk_co_create_opts which now acceptes a callback
> > pointer to "retrieve" BlockBackend pointers from the caller. This way we
> > separate the logic between file/extent acquisition and initialization.
> >
> > The QAPI command parameters are mostly the same as the old create_opts
> > except the dropped legacy @compat6 switch, which is redundant with
> > @hwversion.
> >
> > Signed-off-by: Fam Zheng <famz@redhat.com>
> > Signed-off-by: Kevin Wolf <kwolf@redhat.com>
> > ---
> >  qapi/block-core.json  |  70 +++++++
> >  qapi/qapi-schema.json |   1 +
> >  block/vmdk.c          | 452 ++++++++++++++++++++++++++++++------------
> >  3 files changed, 396 insertions(+), 127 deletions(-)
> >
> > diff --git a/qapi/block-core.json b/qapi/block-core.json
> > index d4fe710836..4778f88dd8 100644
> > --- a/qapi/block-core.json
> > +++ b/qapi/block-core.json
> > @@ -4021,6 +4021,75 @@
> >              'size':             'size',
> >              '*cluster-size' :   'size' } }
> >  
> > +##
> > +# @BlockdevVmdkSubformat:
> > +#
> > +# Subformat options for VMDK images
> > +#
> > +# @monolithicSparse:     Single file image with sparse cluster allocation
> > +#
> > +# @monolithicFlat:       Single flat data image and a descriptor file
> > +#
> > +# @twoGbMaxExtentSparse: Data is split into 2GB (per virtual LBA) sparse extent
> > +#                        files, in addition to a descriptor file
> > +#
> > +# @twoGbMaxExtentFlat:   Data is split into 2GB (per virtual LBA) flat extent
> > +#                        files, in addition to a descriptor file
> > +#
> > +# @streamOptimized:      Single file image sparse cluster allocation, optimized
> > +#                        for streaming over network.
> > +#
> > +# Since: 4.0
> > +##
> > +{ 'enum': 'BlockdevVmdkSubformat',
> > +  'data': [ 'monolithicSparse', 'monolithicFlat', 'twoGbMaxExtentSparse',
> > +            'twoGbMaxExtentFlat', 'streamOptimized'] }
> 
> Don't conform to the QAPI rules on names "to match VMDK spec spellings"
> (see qapi-schema.json below).  We discussed this in review of v1.
> 
> PRO: matches the VMDK spec (whatever that's worth), keeps the code
> simple.
> 
> CON: the non-conforming names become part of the stable QMP interface,
> in the argument of command blockdev-create.
> 
> I don't like the CON, but I'm willing to tolerate it in the name of
> simplicity.

I don't really have a opinion here. It seems this is what you had agreed
on in v1 and it still feels acceptable (even if not perfect) to you, so
I'll stick with it.

> > +
> > +##
> > +# @BlockdevVmdkAdapterType:
> > +#
> > +# Adapter type info for VMDK images
> > +#
> > +# Since: 4.0
> > +##
> > +{ 'enum': 'BlockdevVmdkAdapterType',
> > +  'data': [ 'ide', 'buslogic', 'lsilogic', 'legacyesx'] }
> 
> May I have hyphens in the composite nouns?  Hmm, might be the way they
> are to match VMDK spec spellings or for backward compatibility.  I guess
> we'll see below.

These are literal values to be written into the VMDK descriptor files,
so they have to use this spelling. If we want to have a different
spelling in QMP, then we'll have to translate internally.

I guess this is the same argument as for BlockdevVmdkSubformat above.
For consistency, we should use the spec spellings in both cases or not
at all.

> > +
> > +##
> > +# @BlockdevCreateOptionsVmdk:
> > +#
> > +# Driver specific image creation options for VMDK.
> > +#
> > +# @file         Where to store the new image file. This refers to the image
> > +#               file for monolithcSparse and streamOptimized format, or the
> > +#               descriptor file for other formats.
> > +# @size         Size of the virtual disk in bytes
> > +# @extents      Where to store the data extents. Required for monolithcflat,
> > +#               twoGbMaxExtentSparse and twoGbMaxExtentFlat formats. For
> > +#               monolithicflat, only one entry is required; for
> 
> monolithicFlat
> 
> > +#               twoGbMaxExtent* formats, the number of entries required is
> > +#               calculated as extent_number = virtual_size / 2GB.
> 
> Is it okay to supply more entries than required, or do I have to supply
> exactly the right number?

If I understand the code correctly, additional extents are silently
ignored.

> > +# @subformat    The subformat of the VMDK image. Default: "monolithicsparse".
> 
> monolithicSparse
> 
> > +# @backing-file The path of backing file. Default: no backing file is used.
> > +# @adapter-type The adapter type used to fill in the descriptor. Default: ide.
> > +# @hwversion    Hardware version. The meaningful options are "4" or "6".
> > +#               Defaulted to "4".
> 
> Default: "4"

Fixed all the spelling changes.

> > +# @zeroed-grain Whether to enable zeroed-grain feature for sparse subformats.
> > +#               Default: false.
> > +#
> > +# Since: 4.0
> > +##
> > +{ 'struct': 'BlockdevCreateOptionsVmdk',
> > +  'data': { 'file':             'BlockdevRef',
> > +            'size':             'size',
> > +            '*extents':          ['BlockdevRef'],
> > +            '*subformat':       'BlockdevVmdkSubformat',
> > +            '*backing-file':    'str',
> > +            '*adapter-type':    'BlockdevVmdkAdapterType',
> > +            '*hwversion':       'str',
> > +            '*zeroed-grain':    'bool' } }
> 
> @zeroed-grain is undocumented.

It's right there at the beginning of the quote after your last comment?

> > +
> > +
> >  ##
> >  # @SheepdogRedundancyType:
> >  #
> > @@ -4215,6 +4284,7 @@
> >        'ssh':            'BlockdevCreateOptionsSsh',
> >        'vdi':            'BlockdevCreateOptionsVdi',
> >        'vhdx':           'BlockdevCreateOptionsVhdx',
> > +      'vmdk':           'BlockdevCreateOptionsVmdk',
> >        'vpc':            'BlockdevCreateOptionsVpc'
> >    } }
> >  
> > diff --git a/qapi/qapi-schema.json b/qapi/qapi-schema.json
> > index 65b6dc2f6f..78e8bcd561 100644
> > --- a/qapi/qapi-schema.json
> > +++ b/qapi/qapi-schema.json
> > @@ -66,6 +66,7 @@
> >          'ACPISlotType',         # DIMM, visible through query-acpi-ospm-status
> >          'CpuInfoMIPS',          # PC, visible through query-cpu
> >          'CpuInfoTricore',       # PC, visible through query-cpu
> > +        'BlockdevVmdkSubformat',# all members, to match VMDK spec spellings
> >          'QapiErrorClass',       # all members, visible through errors
> >          'UuidInfo',             # UUID, visible through query-uuid
> >          'X86CPURegister32',     # all members, visible indirectly through qom-get
> > diff --git a/block/vmdk.c b/block/vmdk.c
> > index 32fc2c84b3..16f86457d7 100644
> > --- a/block/vmdk.c
> > +++ b/block/vmdk.c
> > @@ -1932,33 +1932,56 @@ static int filename_decompose(const char *filename, char *path, char *prefix,
> >      return VMDK_OK;
> >  }
> >  
> > -static int coroutine_fn vmdk_co_create_opts(const char *filename, QemuOpts *opts,
> > -                                            Error **errp)
> > +/*
> > + * idx == 0: get or create the descriptor file (also the image file if in a
> > + *           non-split format.
> > + * idx >= 1: get the n-th extent if in a split subformat
> > + */
> > +typedef BlockBackend *(*vmdk_create_extent_fn)(int64_t size,
> > +                                               int idx,
> > +                                               bool flat,
> > +                                               bool split,
> > +                                               bool compress,
> > +                                               bool zeroed_grain,
> > +                                               void *opaque,
> > +                                               Error **errp);
> > +
> > +static void vmdk_desc_add_extent(GString *desc,
> > +                                 const char *extent_line_fmt,
> > +                                 int64_t size, const char *filename)
> > +{
> > +    char *basename = g_path_get_basename(filename);
> 
> I like a blank line between declarations and statements.

Matter of taste. But okay, I already changed this function, so I'll give
you this one.

> > +    g_string_append_printf(desc, extent_line_fmt,
> > +                           DIV_ROUND_UP(size, BDRV_SECTOR_SIZE), basename);
> > +
> > +    g_free(basename);
> > +}
> > +
> > +static int coroutine_fn vmdk_co_do_create(int64_t size,
> > +                                          BlockdevVmdkSubformat subformat,
> > +                                          BlockdevVmdkAdapterType adapter_type,
> > +                                          const char *backing_file,
> > +                                          const char *hw_version,
> > +                                          bool compat6,
> > +                                          bool zeroed_grain,
> > +                                          vmdk_create_extent_fn extent_fn,
> > +                                          void *opaque,
> > +                                          Error **errp)
> >  {
> > -    int idx = 0;
> > -    BlockBackend *new_blk = NULL;
> > +    int extent_idx;
> > +    BlockBackend *blk = NULL;
> >      Error *local_err = NULL;
> >      char *desc = NULL;
> > -    int64_t total_size = 0, filesize;
> > -    char *adapter_type = NULL;
> > -    char *backing_file = NULL;
> > -    char *hw_version = NULL;
> > -    char *fmt = NULL;
> >      int ret = 0;
> >      bool flat, split, compress;
> >      GString *ext_desc_lines;
> > -    char *path = g_malloc0(PATH_MAX);
> > -    char *prefix = g_malloc0(PATH_MAX);
> > -    char *postfix = g_malloc0(PATH_MAX);
> > -    char *desc_line = g_malloc0(BUF_SIZE);
> > -    char *ext_filename = g_malloc0(PATH_MAX);
> > -    char *desc_filename = g_malloc0(PATH_MAX);
> >      const int64_t split_size = 0x80000000;  /* VMDK has constant split size */
> > -    const char *desc_extent_line;
> > +    int64_t extent_size;
> > +    int64_t created_size = 0;
> > +    const char *extent_line_fmt;
> >      char *parent_desc_line = g_malloc0(BUF_SIZE);
> >      uint32_t parent_cid = 0xffffffff;
> >      uint32_t number_heads = 16;
> > -    bool zeroed_grain = false;
> >      uint32_t desc_offset = 0, desc_len;
> >      const char desc_template[] =
> >          "# Disk DescriptorFile\n"
> > @@ -1982,71 +2005,35 @@ static int coroutine_fn vmdk_co_create_opts(const char *filename, QemuOpts *opts
> >  
> >      ext_desc_lines = g_string_new(NULL);
> >  
> > -    if (filename_decompose(filename, path, prefix, postfix, PATH_MAX, errp)) {
> > -        ret = -EINVAL;
> > -        goto exit;
> > -    }
> >      /* Read out options */
> > -    total_size = ROUND_UP(qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, 0),
> > -                          BDRV_SECTOR_SIZE);
> > -    adapter_type = qemu_opt_get_del(opts, BLOCK_OPT_ADAPTER_TYPE);
> > -    backing_file = qemu_opt_get_del(opts, BLOCK_OPT_BACKING_FILE);
> > -    hw_version = qemu_opt_get_del(opts, BLOCK_OPT_HWVERSION);
> > -    if (qemu_opt_get_bool_del(opts, BLOCK_OPT_COMPAT6, false)) {
> > -        if (strcmp(hw_version, "undefined")) {
> > +    if (compat6) {
> > +        if (hw_version) {
> >              error_setg(errp,
> >                         "compat6 cannot be enabled with hwversion set");
> >              ret = -EINVAL;
> >              goto exit;
> >          }
> > -        g_free(hw_version);
> > -        hw_version = g_strdup("6");
> > -    }
> > -    if (strcmp(hw_version, "undefined") == 0) {
> > -        g_free(hw_version);
> > -        hw_version = g_strdup("4");
> > +        hw_version = "6";
> >      }
> > -    fmt = qemu_opt_get_del(opts, BLOCK_OPT_SUBFMT);
> > -    if (qemu_opt_get_bool_del(opts, BLOCK_OPT_ZEROED_GRAIN, false)) {
> > -        zeroed_grain = true;
> > +    if (!hw_version) {
> > +        hw_version = "4";
> >      }
> >  
> > -    if (!adapter_type) {
> > -        adapter_type = g_strdup("ide");
> > -    } else if (strcmp(adapter_type, "ide") &&
> > -               strcmp(adapter_type, "buslogic") &&
> > -               strcmp(adapter_type, "lsilogic") &&
> > -               strcmp(adapter_type, "legacyESX")) {
> > -        error_setg(errp, "Unknown adapter type: '%s'", adapter_type);
> > -        ret = -EINVAL;
> > -        goto exit;
> > -    }
> 
> Old code recognizes "legacyESX".  New code recognizes "legacyesx".  Bug
> or feature?

Good catch!

Who knows? But it's not advertised as a feature in the commit message,
and I can only see the spelling "legacyESX" in the spec, so I'll change
the QAPI definition to "legacyESX". Leaving things as they were should
be safe.

Fam also made the value case insensitive when parsing QemuOpts in
vmdk_co_create_opts() to compensate for the change. I think this can
also go away then?

Kevin

