Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:50:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C5F6B5803E4
	for <like.xu@linux.intel.com>; Fri,  7 Dec 2018 06:54:48 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 07 Dec 2018 06:54:48 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AeclDWxDGYAp2/TiWSEPeUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSPX+rsbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2/?=
 =?us-ascii?q?YYsAAPYOMvtaoIbzulUOtRmzCwujCe/yxDJEmmH53bYh3uQ9DQ3LxhAsE84UvX?=
 =?us-ascii?q?jKqtj+KaccUfqyzKnN1TjNau1Z2Sn86IjObxsuofaMXbZ+ccHMzkQvFA3EjlKU?=
 =?us-ascii?q?qYzrJD6VzPoCvHWb7+V6SeKjkXIoqwZ0ojW2wMonl4rHhpoNx1za6Sl0w5w5Kc?=
 =?us-ascii?q?ClREN4e9KoDpVduiGAO4drQM4uW39ktDo+x7EcpJK2cjYGxI46yxPcZfGLaZaE?=
 =?us-ascii?q?7xHlWe2MOzl3nmhld6i6hxuq8Uiv1On8Vs6s3VZOrypFicXMtmsX2xzc7MiHV+?=
 =?us-ascii?q?Fx/kC72TaAzwzT6+dELl4olafDNZIt3r09moAOvUjeHSL6glv6gaGWe0k+5+Sl?=
 =?us-ascii?q?6fzrYrD8qZ+dM490hBv+MqMrmsGnGOQ3LA0OX3WC9euhyrLj41P2QLFTgvItla?=
 =?us-ascii?q?nZrZbaKtgFqa6iBANV1ocj6xWhADu839UYgGEKLFZEeBKBkojoNEvCIPH+Dfej?=
 =?us-ascii?q?nVuslC1nyOzBPr3kGZjNKH/DkLHufbZ79k5Q0g0zzcpQ555MELEOPOrzWlPttN?=
 =?us-ascii?q?zfFhI5Nw20w+X5B9ln2YIeRHmCAquYMKPUrF+J6fgjI+iKZI8Jpjn9L+Ip6OLp?=
 =?us-ascii?q?jX88yhcge7K0184XdGygBaYhZEGYemb3xNEGF2gMo0w5VuOtjVSDVTtaYTG1R7?=
 =?us-ascii?q?494TcgT5urCJqGSo2zjbjS4SGgA5cDY2lHDkyLQ27lcpjBV/oSZSbXOMJ4jzEf?=
 =?us-ascii?q?SZCnTIku0wzosxX1nKF6JOjZ8TFNqJT4ydJu7PfSnxxhyTshKs2H0HyWB0hum2?=
 =?us-ascii?q?kSWiQq0bo39UVnz12ZzIBijvBYHMAV7PRMBFQUL5nZms93FdH0Ej3GetnBHFW5?=
 =?us-ascii?q?RdGoKSs8QtI435kFZEMrSIbqtQzKwyf/W+xdrLeMHpFht/uEh3U=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AOAAANiQpcmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTAqgiUTjBNfizGDCZZTgXMUGBSHXSI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQEBCAsLBhsOL4I2BQIDGgEGglwDAwECNwwKKQMDAQIGAQEKDhMdCAMBCwVJE?=
 =?us-ascii?q?wWDHIICAQSmVYosiDWDaheBQD+BEYJdNYpcAqBnCZFACxiJY4dVmRuBRoINMxo?=
 =?us-ascii?q?IGxU7gmyDPQECjRxAMYEHHIgtgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AOAAANiQpcmBHrdtBjHAEBAQQBAQcEAQGBUQcBAQsBgTA?=
 =?us-ascii?q?qgiUTjBNfizGDCZZTgXMUGBSHXSI0CQ0BAwEBAQEBAQIBEwEBAQEBCAsLBhsOL?=
 =?us-ascii?q?4I2BQIDGgEGglwDAwECNwwKKQMDAQIGAQEKDhMdCAMBCwVJEwWDHIICAQSmVYo?=
 =?us-ascii?q?siDWDaheBQD+BEYJdNYpcAqBnCZFACxiJY4dVmRuBRoINMxoIGxU7gmyDPQECj?=
 =?us-ascii?q?RxAMYEHHIgtgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,326,1539673200"; 
   d="scan'208";a="54980662"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 07 Dec 2018 06:54:47 -0800
Received: from localhost ([::1]:46597 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gVHWg-0008Pr-QT
	for like.xu@linux.intel.com; Fri, 07 Dec 2018 09:54:46 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:46723)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gVHWQ-0008Ny-1a
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 09:54:31 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <kwolf@redhat.com>) id 1gVHWO-0001eX-HQ
	for qemu-devel@nongnu.org; Fri, 07 Dec 2018 09:54:29 -0500
Received: from mx1.redhat.com ([209.132.183.28]:43656)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <kwolf@redhat.com>)
	id 1gVHWH-000123-HH; Fri, 07 Dec 2018 09:54:21 -0500
Received: from smtp.corp.redhat.com (int-mx03.intmail.prod.int.phx2.redhat.com
	[10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7CA6D30821C3;
	Fri,  7 Dec 2018 14:54:20 +0000 (UTC)
Received: from linux.fritz.box (ovpn-117-248.ams2.redhat.com [10.36.117.248])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 688CE60851;
	Fri,  7 Dec 2018 14:54:19 +0000 (UTC)
Date: Fri, 7 Dec 2018 15:54:17 +0100
From: Kevin Wolf <kwolf@redhat.com>
To: Markus Armbruster <armbru@redhat.com>
Message-ID: <20181207145417.GG5119@linux.fritz.box>
References: <20181207115343.6747-1-kwolf@redhat.com>
	<20181207115343.6747-6-kwolf@redhat.com>
	<87k1klwkft.fsf@dusky.pond.sub.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <87k1klwkft.fsf@dusky.pond.sub.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.47]);
	Fri, 07 Dec 2018 14:54:20 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v4 5/5] vmdk: Reject excess extents in
 blockdev-create
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-devel@nongnu.org, qemu-block@nongnu.org, mreitz@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Am 07.12.2018 um 14:11 hat Markus Armbruster geschrieben:
> Kevin Wolf <kwolf@redhat.com> writes:
> 
> > Clarify that the number of extents provided in BlockdevCreateOptionsVmdk
> > must match the number of extents that will actually be used. Providing
> > more extents will result in an error now.
> >
> > This requires adapting the test case to provide the right number of
> > extents.
> >
> > Signed-off-by: Kevin Wolf <kwolf@redhat.com>
> > ---
> >  qapi/block-core.json       |  3 ++-
> >  block/vmdk.c               | 29 ++++++++++++++++++++++++-----
> >  tests/qemu-iotests/237     |  6 +++++-
> >  tests/qemu-iotests/237.out | 13 +++++++------
> >  4 files changed, 38 insertions(+), 13 deletions(-)
> >
> > diff --git a/qapi/block-core.json b/qapi/block-core.json
> > index 0793550cf2..afdd2f89a2 100644
> > --- a/qapi/block-core.json
> > +++ b/qapi/block-core.json
> > @@ -4068,7 +4068,8 @@
> >  #               twoGbMaxExtentSparse and twoGbMaxExtentFlat formats. For
> >  #               monolithicFlat, only one entry is required; for
> >  #               twoGbMaxExtent* formats, the number of entries required is
> > -#               calculated as extent_number = virtual_size / 2GB.
> > +#               calculated as extent_number = virtual_size / 2GB. Providing
> > +#               more extents than will be used is an error.
> >  # @subformat    The subformat of the VMDK image. Default: "monolithicSparse".
> >  # @backing-file The path of backing file. Default: no backing file is used.
> >  # @adapter-type The adapter type used to fill in the descriptor. Default: ide.
> > diff --git a/block/vmdk.c b/block/vmdk.c
> > index 5a162ee85c..682ad93aa1 100644
> > --- a/block/vmdk.c
> > +++ b/block/vmdk.c
> > @@ -1970,6 +1970,7 @@ static int coroutine_fn vmdk_co_do_create(int64_t size,
> >  {
> >      int extent_idx;
> >      BlockBackend *blk = NULL;
> > +    BlockBackend *extent_blk;
> >      Error *local_err = NULL;
> >      char *desc = NULL;
> >      int ret = 0;
> > @@ -2107,7 +2108,6 @@ static int coroutine_fn vmdk_co_do_create(int64_t size,
> >      }
> >      extent_idx = 1;
> >      while (created_size < size) {
> > -        BlockBackend *extent_blk;
> >          int64_t cur_size = MIN(size - created_size, extent_size);
> >          extent_blk = extent_fn(cur_size, extent_idx, flat, split, compress,
> >                                 zeroed_grain, opaque, errp);
> > @@ -2121,6 +2121,17 @@ static int coroutine_fn vmdk_co_do_create(int64_t size,
> >          extent_idx++;
> >          blk_unref(extent_blk);
> >      }
> > +
> > +    /* Check whether we got excess extents */
> > +    extent_blk = extent_fn(-1, extent_idx, flat, split, compress, zeroed_grain,
> > +                           opaque, NULL);
> > +    if (extent_blk) {
> > +        blk_unref(extent_blk);
> > +        error_setg(errp, "List of extents contains unused extents");
> > +        ret = -EINVAL;
> > +        goto exit;
> > +    }
> > +
> >      /* generate descriptor file */
> >      desc = g_strdup_printf(desc_template,
> >                             g_random_int(),
> > @@ -2181,6 +2192,12 @@ static BlockBackend *vmdk_co_create_opts_cb(int64_t size, int idx,
> >      char *ext_filename = NULL;
> >      char *rel_filename = NULL;
> >  
> > +    /* We're done, don't create excess extents. */
> > +    if (size == -1) {
> > +        assert(errp == NULL);
> > +        return NULL;
> > +    }
> > +
> 
> I'm afraid I don't get this hunk.

vmdk_co_create_opts_cb() is for the legacy code path, where 'qemu-img
create' passes us a QemuOpts. This doesn't contain extents, so rather
than returning ther next extent from the input, this function simply
creates a new extent file each time it is called.

When checking whether we have too many extents, we don't know from which
code path we came, so we have to call the callback uncondtionally and
see whether it still returns an extra extent. In this case, creating a
new one would obviously be counterproductive and trigger an error, so I
just return NULL immediately.

If you have a suggestion for a comment to put somewhere, I'll gladly add
it.

Kevin

