Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 18:30:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E7E4A580375;
	Tue,  4 Dec 2018 00:23:33 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 04 Dec 2018 00:23:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AcIHILRQNioozzIcn0gHnPYRvCNpsv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YRCFt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZAo2y?=
 =?us-ascii?q?cZYBAeQCM+hfoIbzqEAOrQO8CAS3GO/iySVFimPs0KEmz+gsFxzN0gw6H9IJtX?=
 =?us-ascii?q?TZtM37NKYOXuCyyKnH1y7DZO5L1Df66YjHbhAhruuQXbltdsfe1FMvFwLDjlWT?=
 =?us-ascii?q?tYPqJS+V2/8RvGib9epgUuevi286qwF0uDSvwd0siobQi48T11vK+yJ5wIMvKt?=
 =?us-ascii?q?25Tk52ed2kH4VKtyGcKYR2RtkuQ2ZyuCY1zLANpJ21fDASxZg52xLSb+aLf5WG?=
 =?us-ascii?q?7x79TuqdPDR1iG5/dL++hRu+6Vasx+LgWsWp1VtKoDBKnsXQun0IyhDe79OIR/?=
 =?us-ascii?q?5z/kqg2TuC0wXe5+NKIUwpl6fWLoAuzaQtmpYOtEnOETH5lUbog6KQa04q4PKn?=
 =?us-ascii?q?6/79bbXjvpKcN5F7igX5Mqk2hMy/Dvo3MhIUU2iY5+u8zrvj8lP9QLlQif02iK?=
 =?us-ascii?q?bZvIjbJcQduKG5HxdY3pg/5xu7FTuqzdoVkWcdIF5Yex+Lk5LlNlDMLfzgCPew?=
 =?us-ascii?q?mVWskDNlx/DcOb3hB43ALnzCkLfnYLZ85FdQyAktwtBF4ZJbFLUBLOv0Wk7/st?=
 =?us-ascii?q?zXEAU5Pheqw+boFtp9zJkSWWGRDa+DNqPdr1uI6vgoI+mWa48ZoCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfa2o3ZsUdn+0BPtnI1iCbHrog9cBF3oKvwUkQOzrjl2CTSBcZ3KoU6?=
 =?us-ascii?q?0g4TE7DZqsDZ3fSYC1nLyBwCC7E4VWZm9cC1CMDW3nd4KeV/cMdSKdOMlhkjMf?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sKRz8xwq9zu099ylCF0ah+hPxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3MxTGqA78Sl7yIHpA06LjT33rqKsZ5ynbG0r?=
 =?us-ascii?q?QhjlY8TstOM22mmrBw9wzJC4HVlEWZkr6gdb4A0y7V6GeD0W2OsVlbUAFqV6XJ?=
 =?us-ascii?q?R3QfZkrMotT/6UPPVLuuCbUhMgtcxs+OMKpKatv1jVpYQPfvIsjRY2W0m22oHx?=
 =?us-ascii?q?aH2quMbJb2e2UaxCjSFVILkx4N8nqcNQgxHCGho3nAAzxoEl7vZ0Ds8ex6qH6g?=
 =?us-ascii?q?Sk80zgeKb1Bu1rav+x4Vg+CcRO0X3r4epCghrDB0Fk6n393KE9qAuxZhfKJEbN?=
 =?us-ascii?q?wg+lhHy3zWuxZ9PpO6KaBinUARcwJsskPq1hV3DJhAkMcwoHMrygpyNbyX0Fdb?=
 =?us-ascii?q?ezyE2pDwP6XdKnPu8xC3d67Wxlbe3c6K+qcO7fQ4rEnjvAGpF0Y473Vryd5V02?=
 =?us-ascii?q?GY5pXLCgoSXon8UkI29xh8urHbbTMx54LS1X1wL6a0tiXO1M4uBOsg0hygZctQ?=
 =?us-ascii?q?MLuYFA/uFM0XH9KhKOg0lFmmcB0FPPpe+7UpP8y7bfSG3q2rPOF+nD+9iWRH4Y?=
 =?us-ascii?q?Z90l+D9iZmS+7I2YoFzO+c3gedSzj8i1KhuNjtmY9YfTESAna/yS/8CY9Re61+?=
 =?us-ascii?q?Z5oEBX2vIs233Np+gZHtVmVc9F6iAVMGxcCodQCTb1z7wQ1fy0AXrWa7liu/yj?=
 =?us-ascii?q?x+iyspobaH3CzS3+TicwIKOnRKRGZ+l1jsO5W7j9cAUEiucQcpjhql6V/myKdB?=
 =?us-ascii?q?oKRwMnfcQV1PfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiiGOdLWx/rXrDdcFr2Bff4sfRRfpQ3joAWSl5hiPbBlm6?=
 =?us-ascii?q?P9m149qUk43Pvfy5V2KkTpdTazXkzZuctCun4m1nGR+/kOqpmt3kEgg61jX318?=
 =?us-ascii?q?JwWiXLrxb8Y4/r2Lq8Me98ekloBVn869d1G41kk4swgo0Q1mYehpmP4XUHlmLz?=
 =?us-ascii?q?O81B2a3idHoNWSILw9nN7QnlwkJjKWiFx4D4VnWb2cZhY9i6YmUL2iMy9cxKCa?=
 =?us-ascii?q?GU7KBakitxuFa3sQXRYf1llDcH1fQu8GIag/0OuAc1zSWSGLESEVNYPSzxjRuI?=
 =?us-ascii?q?6d++ob5TZGaud7iwyUV/kcqgDLGEvgFTRnL5do0+Ei9368V1KEjM32Hr6oH4ZN?=
 =?us-ascii?q?nQasoethiVkxfDledZMpwwmeQRhSp7J239p2YqxPAhjRxhxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8KqfTnMAOOHCc9q3?=
 =?us-ascii?q?iBH7rfABSf6Fxnr3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+1zLRb/VWPfpBqyZjcwVZiSNx5W7gBE50fIPs2S9ONzHy?=
 =?us-ascii?q?dE/pK/qAyBMHCUZwNNDWsRQEyLG0jjPqWy5dnH6+WYBPCxL/7QbrWVs+BeS+2E?=
 =?us-ascii?q?xZGy0otl4jaMMN+APmJ5Av0/20pDW215GsvDlzUOTSwXizzCb8qBqBig/S13q9?=
 =?us-ascii?q?i18O73VwL3+YuPF7xSPM1v+hCxnKeDLvOQizx/KTpCzZMMwnnIyLcE0V4WiiFu?=
 =?us-ascii?q?cSStELsauS7MSqLQhrFYDxoBZyxvM8tI6ro23hNRNs7DltP1yrl4g+Y1C1hbVF?=
 =?us-ascii?q?zhmcKpZc0QL2G+LlPHA0mLO6qcJT3W2MH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/pcAC7P8RtjTIowbw4nHfKNW8HPD?=
 =?us-ascii?q?h4ckNNqKCQ7CxCjvV+HWxB8mRqLe2elymF6OnYL44cseF3DSRsi+Ja/HM6xqNJ?=
 =?us-ascii?q?7CFFQfx5gjfdosRyrFGmjOaPzCFqUB5PqjZNmYKKsl9uOaTf9plcR3nE+AgB4n?=
 =?us-ascii?q?mXCxQPv9FlEMHgu7hMytjTk6L+MDdD/MjS/csZBsjULtqIMXshMRXzHj7UAxAI?=
 =?us-ascii?q?TTqqNWHZmkxcn+ue9nyTrpgmtJfsnIACRaNcVFwwRbsmDRFfG9YDJt9SQyk8ka?=
 =?us-ascii?q?/T2NQP73u46hzMXt1ar7jOTPfUCvLqfmW3l75BMj0JyrT8JJ9bHIr60ExrdhEu?=
 =?us-ascii?q?kJ7LHUnbVMxlqS17aQo1vUAL92JxGD5gk3n5Yx+gtSdAXcW/mQQ7304nObwg?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAACMOAZch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YEwgTmBAieYIFABB4FJiQuOKoFzEgEBGAsIAYgOIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCgsJCCkjDII2JAGCaQIkCwENAQE3AQUJAlADMQEFASITBRaDBgGBdA0BBAqYU?=
 =?us-ascii?q?TyKHYFsM4J2AQEFgTABhXwDBRKHW4MTgRwXeIEHgRGEOhkBgxiGAokzgW+FDJA?=
 =?us-ascii?q?aCYcCijIjiVuHSyyNPophAgQCBAUCBQ8hgSWCDTMaCCgIgyeCGwwMC4hehUwzM?=
 =?us-ascii?q?oEFAQGINoJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAACMOAZch0O0hNFkHgEGBwaBUQkLAYEwgTmBAieYIFA?=
 =?us-ascii?q?BB4FJiQuOKoFzEgEBGAsIAYgOIjQJDQEDAQEBAQEBAgETAQEBCgsJCCkjDII2J?=
 =?us-ascii?q?AGCaQIkCwENAQE3AQUJAlADMQEFASITBRaDBgGBdA0BBAqYUTyKHYFsM4J2AQE?=
 =?us-ascii?q?FgTABhXwDBRKHW4MTgRwXeIEHgRGEOhkBgxiGAokzgW+FDJAaCYcCijIjiVuHS?=
 =?us-ascii?q?yyNPophAgQCBAUCBQ8hgSWCDTMaCCgIgyeCGwwMC4hehUwzMoEFAQGINoJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,313,1539673200"; 
   d="scan'208";a="55969680"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 00:23:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726059AbeLDIX2 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 03:23:28 -0500
Received: from mail-pf1-f193.google.com ([209.85.210.193]:44683 "EHLO
        mail-pf1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725983AbeLDIX2 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 03:23:28 -0500
Received: by mail-pf1-f193.google.com with SMTP id u6so7824096pfh.11
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 00:23:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=BC2yXIgwrgbb+vp2SoDp3a5EYKg+hZ4W2JytOoK4K4A=;
        b=TIjArO+kHpXg+DvsilBuxqhzyDTY0F589DL9ubB2vO/d22duhswOs4v1PKAYnn3RID
         QDXhFfuefgwzAaYIO51TU+12aJAh7kSt/oge38mwE2FktiwNt6CouZE9kec7ZQpDkong
         P/9qkf/AYCBd5sZFs/zAZWHRF2jL4PgO8ZF2A=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=BC2yXIgwrgbb+vp2SoDp3a5EYKg+hZ4W2JytOoK4K4A=;
        b=f5gbg3Z9L2ke6IpD8uZDucGqFnHHiaXi1scZWVP35Vw86wFZq+VSlglGBhNF1HNXfp
         xXOnA9+hrA/1yloGWM4FFFGrY96soOJ0CMDuA8uZtp/GS4Exafr5uBGxMm/h6B5QQNEh
         UuQLNWYD5muZ608wAqk8d73HMuXpszAuDjtIZ94DstxSZqadCL1NyULCZWQxRPCNOF0B
         +w+riIDQrz6UJU7UyXcb3Sivd907o/pOLyiE0L404E6EBDC/RbmFksjNqHfGLSqsB+V4
         ol4OWuqLoFLHuHAlInfNss31W5PbKJXNYne7wHZK3rNSz5urklvak3BTcnoIoRoG6ExP
         kabQ==
X-Gm-Message-State: AA+aEWbBLQIDWCv2PGLYwRkVJ+0BwVLukFJ5eaAAgUCS2030d5BuDvN7
        42uFR1f2D5WrZbPKSZA9Rr3osw==
X-Google-Smtp-Source: AFSGD/VpTQsU4DiTZ31xNf7o/qoPM2bSEhhvzRB/WoSeJt9tmOMRs+2XyBTMAtmWqbQpg1/GbsZAbw==
X-Received: by 2002:a62:c613:: with SMTP id m19mr19435575pfg.207.1543911807270;
        Tue, 04 Dec 2018 00:23:27 -0800 (PST)
Received: from drinkcat2.tpe.corp.google.com ([2401:fa00:1:b:f659:7f17:ea11:4e8e])
        by smtp.gmail.com with ESMTPSA id y6sm44911418pfd.104.2018.12.04.00.23.24
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 04 Dec 2018 00:23:26 -0800 (PST)
From: Nicolas Boichat <drinkcat@chromium.org>
To: Robin Murphy <robin.murphy@arm.com>
Cc: Will Deacon <will.deacon@arm.com>, Joerg Roedel <joro@8bytes.org>,
        linux-arm-kernel@lists.infradead.org,
        iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org,
        Christoph Lameter <cl@linux.com>,
        Vlastimil Babka <vbabka@suse.cz>,
        Michal Hocko <mhocko@suse.com>, linux-mm@kvack.org,
        Yong Wu <yong.wu@mediatek.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Tomasz Figa <tfiga@google.com>, yingjoe.chen@mediatek.com,
        hch@infradead.org, Matthew Wilcox <willy@infradead.org>
Subject: [PATCH v3, RFC] iommu/io-pgtable-arm-v7s: Use page_frag to request DMA32 memory
Date: Tue,  4 Dec 2018 16:23:00 +0800
Message-Id: <20181204082300.95106-1-drinkcat@chromium.org>
X-Mailer: git-send-email 2.20.0.rc1.387.gf8505762e3-goog
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

IOMMUs using ARMv7 short-descriptor format require page tables
(level 1 and 2) to be allocated within the first 4GB of RAM, even
on 64-bit systems.

For level 1/2 tables, ensure GFP_DMA32 is used if CONFIG_ZONE_DMA32
is defined (e.g. on arm64 platforms).

For level 2 tables (1 KB), we use page_frag to allocate these pages,
as we cannot directly use kmalloc (no slab cache for GFP_DMA32) or
kmem_cache (mm/ code treats GFP_DMA32 as an invalid flag).

One downside is that we only free the allocated page if all the
4 fragments (4 IOMMU L2 tables) are freed, but given that we
usually only allocate limited number of IOMMU L2 tables, this
should not have too much impact on memory usage: In the absolute
worst case (4096 L2 page tables, each on their own 4K page),
we would use 16 MB of memory for 4 MB of L2 tables.

Also, print an error when the physical address does not fit in
32-bit, to make debugging easier in the future.

Fixes: ad67f5a6545f ("arm64: replace ZONE_DMA with ZONE_DMA32")
Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
---

As an alternative to the series [1], which adds support for GFP_DMA32
to kmem_cache in mm/. IMHO the solution in [1] is cleaner and more
efficient, as it allows freed fragments (L2 tables) to be reused, but
this approach does not require any core change.

[1] https://patchwork.kernel.org/cover/10677529/, 3 patches

 drivers/iommu/io-pgtable-arm-v7s.c | 32 ++++++++++++++++--------------
 1 file changed, 17 insertions(+), 15 deletions(-)

diff --git a/drivers/iommu/io-pgtable-arm-v7s.c b/drivers/iommu/io-pgtable-arm-v7s.c
index 445c3bde04800c..0de6a51eb6755f 100644
--- a/drivers/iommu/io-pgtable-arm-v7s.c
+++ b/drivers/iommu/io-pgtable-arm-v7s.c
@@ -161,6 +161,12 @@
 
 #define ARM_V7S_TCR_PD1			BIT(5)
 
+#ifdef CONFIG_ZONE_DMA32
+#define ARM_V7S_TABLE_GFP_DMA GFP_DMA32
+#else
+#define ARM_V7S_TABLE_GFP_DMA GFP_DMA
+#endif
+
 typedef u32 arm_v7s_iopte;
 
 static bool selftest_running;
@@ -169,7 +175,7 @@ struct arm_v7s_io_pgtable {
 	struct io_pgtable	iop;
 
 	arm_v7s_iopte		*pgd;
-	struct kmem_cache	*l2_tables;
+	struct page_frag_cache	l2_tables;
 	spinlock_t		split_lock;
 };
 
@@ -198,13 +204,17 @@ static void *__arm_v7s_alloc_table(int lvl, gfp_t gfp,
 	void *table = NULL;
 
 	if (lvl == 1)
-		table = (void *)__get_dma_pages(__GFP_ZERO, get_order(size));
+		table = (void *)__get_free_pages(
+			__GFP_ZERO | ARM_V7S_TABLE_GFP_DMA, get_order(size));
 	else if (lvl == 2)
-		table = kmem_cache_zalloc(data->l2_tables, gfp | GFP_DMA);
+		table = page_frag_alloc(&data->l2_tables, size,
+				gfp | __GFP_ZERO | ARM_V7S_TABLE_GFP_DMA);
 	phys = virt_to_phys(table);
-	if (phys != (arm_v7s_iopte)phys)
+	if (phys != (arm_v7s_iopte)phys) {
 		/* Doesn't fit in PTE */
+		dev_err(dev, "Page table does not fit in PTE: %pa", &phys);
 		goto out_free;
+	}
 	if (table && !(cfg->quirks & IO_PGTABLE_QUIRK_NO_DMA)) {
 		dma = dma_map_single(dev, table, size, DMA_TO_DEVICE);
 		if (dma_mapping_error(dev, dma))
@@ -227,7 +237,7 @@ static void *__arm_v7s_alloc_table(int lvl, gfp_t gfp,
 	if (lvl == 1)
 		free_pages((unsigned long)table, get_order(size));
 	else
-		kmem_cache_free(data->l2_tables, table);
+		page_frag_free(table);
 	return NULL;
 }
 
@@ -244,7 +254,7 @@ static void __arm_v7s_free_table(void *table, int lvl,
 	if (lvl == 1)
 		free_pages((unsigned long)table, get_order(size));
 	else
-		kmem_cache_free(data->l2_tables, table);
+		page_frag_free(table);
 }
 
 static void __arm_v7s_pte_sync(arm_v7s_iopte *ptep, int num_entries,
@@ -515,7 +525,6 @@ static void arm_v7s_free_pgtable(struct io_pgtable *iop)
 			__arm_v7s_free_table(iopte_deref(pte, 1), 2, data);
 	}
 	__arm_v7s_free_table(data->pgd, 1, data);
-	kmem_cache_destroy(data->l2_tables);
 	kfree(data);
 }
 
@@ -729,17 +738,11 @@ static struct io_pgtable *arm_v7s_alloc_pgtable(struct io_pgtable_cfg *cfg,
 	    !(cfg->quirks & IO_PGTABLE_QUIRK_NO_PERMS))
 			return NULL;
 
-	data = kmalloc(sizeof(*data), GFP_KERNEL);
+	data = kzalloc(sizeof(*data), GFP_KERNEL);
 	if (!data)
 		return NULL;
 
 	spin_lock_init(&data->split_lock);
-	data->l2_tables = kmem_cache_create("io-pgtable_armv7s_l2",
-					    ARM_V7S_TABLE_SIZE(2),
-					    ARM_V7S_TABLE_SIZE(2),
-					    SLAB_CACHE_DMA, NULL);
-	if (!data->l2_tables)
-		goto out_free_data;
 
 	data->iop.ops = (struct io_pgtable_ops) {
 		.map		= arm_v7s_map,
@@ -789,7 +792,6 @@ static struct io_pgtable *arm_v7s_alloc_pgtable(struct io_pgtable_cfg *cfg,
 	return &data->iop;
 
 out_free_data:
-	kmem_cache_destroy(data->l2_tables);
 	kfree(data);
 	return NULL;
 }
-- 
2.20.0.rc1.387.gf8505762e3-goog

