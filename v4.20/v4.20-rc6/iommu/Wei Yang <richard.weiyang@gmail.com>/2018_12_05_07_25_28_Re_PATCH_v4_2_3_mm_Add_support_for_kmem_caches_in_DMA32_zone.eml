Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:46:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B33EB58014B;
	Tue,  4 Dec 2018 23:25:40 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 23:25:40 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxSgOjxK9N2VvquWbWNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/rzrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsVAeoOMvpXoJT/qFQAthu+HQuhCfjzyjNUnHL6wbE23v4/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtNKgdT+G1x7TKwjrZafNW1ir25Y/SchAgvf6MXah/cdDMxkU1GQLKkFSQ?=
 =?us-ascii?q?qIz/MDOT2eQAqGeb7+96WuKuj24rsR1+oj+qxso1jITCm4wbylfB9SpjwYY1I8?=
 =?us-ascii?q?W1SEp6Yd6iDZtRuC+aN4xrQsMkXm5nojo6yrwBuZ69ZiQKz44nxxHZZveacIaI?=
 =?us-ascii?q?+gruWPiNLTp8nn5pZbyyiwio/US9yeDwStO43VdIoyZdj9XBtXAA2wbX58SZUP?=
 =?us-ascii?q?dx4Fmt1SuV2wzO5OxJJ10/m7DBJJ472LEwk4IesUTdES/yn0X7lLGWdko69eiy?=
 =?us-ascii?q?8ejnYavppoWaN4BqjgHyKKMumtawAeggMwgOWXaU+fik2bH94UH0RK9GguA4n6?=
 =?us-ascii?q?XHqpzWOMcWqrKjDwJU0Isv8xO/AC2n0NQck3kHNlVFeBefgojtOlHOJu34DPim?=
 =?us-ascii?q?j1Svjjhr3fbGMaPlApnUKXjCnrHhcqhn60NH1gozws5Q54hOBrECPv3zQEnxu8?=
 =?us-ascii?q?LcDhMjNAy02ennBM1n1owCQWKPHrOZMKTKvF+M5+IvIPeDaJUauTbgMPUl4//u?=
 =?us-ascii?q?jXkkmV4SZ6Wp3J0XaGymEfRiOUmWfX3sgtIZG2cQogU+VPDqiEGFUTNLZ3a9Ra?=
 =?us-ascii?q?M85i0hB4KhF4vDRp2tj6aH3Ce0BZBWYmFGClaREXbnbYmEWvEMaD6MLc9liDAL?=
 =?us-ascii?q?Sb+hS4o53xG0qAD606ZnLvbT+iAAt5Lj08Z66/fQlRE18zx0CcOd3nqJT2F1mG?=
 =?us-ascii?q?MIWjA30Lp+oUx71leMz6x4j+ZEGtxU4vNDSh06OoLEz+xmF9DyXRrMcc2SSFam?=
 =?us-ascii?q?RdWmAis9TsgrzN8MeEt9H9Sijhbe3yulGbMVlrqLBIAq/aLYxXT+O8F9y3Pe3q?=
 =?us-ascii?q?k7k1YmWtdPNXGhhqNn9AjcHYjJn1+dl6arb6sc2iHN+XyHzWqPukFYTQFxXb/E?=
 =?us-ascii?q?XXAZekvZs9D56lneQL+pDLQtKhFBxtKaKqtWdt3pik1LS+r5N9TAfW29gWewCg?=
 =?us-ascii?q?yOxrOXcoXqfWIR3CHeCEgBlwAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4cw6gLuDk/pDluHFayxdTWC8GeqApnZ6hcZd?=
 =?us-ascii?q?I94FFa1WPWrQB9P5qgL7x8iV4aaQh4o0Tu1xBvAIVajccqtG8qzBZ1Ka+AzFNB?=
 =?us-ascii?q?djaY3ZfsOr3XKmj+5gyvZ7TR2lHE1NaW+6EP6PsjplXnvQGpEFci8np939lU1X?=
 =?us-ascii?q?uc+ovFDA4IXZ3tVUY38gBwp6vGbSkl+4PUyXpsPLGuvT/Gxd0oC/Uqyxa6c9hE?=
 =?us-ascii?q?LaOLCRX9E8sZB8ipNuwngFypbhMCPOBP+684JcKmd/2a2KG1OOZshi6pjWNC4I?=
 =?us-ascii?q?plyEKD6zJ8SvLU35YC2/yZ3haHWy3gg1u7s8H3mZpLZTcdHmekzSjkBYhRZrB9?=
 =?us-ascii?q?fIoRCGeuJdG3yct6h5L3R3FY81ujDUsc2MC1YRqSc0D93QpI2EQNoHyohTG3zy?=
 =?us-ascii?q?ZpnDEutKaf2jLBw/7jdBYeJmFEXm1igkryLoiuiNAaWlOlbwwolBuj+Eb7yLJX?=
 =?us-ascii?q?pKV5L2nPX0hIezL6IH1lUqu1rrCCedJA6Is0sSVLV+SxeVCbSr/nrxoayS/jBH?=
 =?us-ascii?q?ZexDYgejGuu5X5mQF6iW2HIHZyqnrZZd9/xRPF6NPAQv5R2yIMRDNkhjnPGli8?=
 =?us-ascii?q?I96p8M2Wl5jZqOC+VGGhVppJfSnw14yAtyi75WxsARKhmfC+gdnnEQk80S/m2N?=
 =?us-ascii?q?hmTyTIrBDgYob106S2K/5ofk5tBFXk8cp1Bpl+kpcshJEXwXUbho+a/X0dnWfx?=
 =?us-ascii?q?MNVb37nzbH4MRT4N3t7U7xLp2ExlLnKV2Y35Um+RzddmZ9m/emkWwD4y79hWCK?=
 =?us-ascii?q?eI67xJhSh1rUC5rQ7LYfh9gy0Syf0h6HMBh+EJuQwtzjiSA7wIHElYOzDsmAqM?=
 =?us-ascii?q?79yksKpXY2Ove6Cq1EVihdChEK2CogZEVXb8e5ciHjV/4t9xMV3Sy33z9p/reM?=
 =?us-ascii?q?PLYt0NrB2UnAzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4i3tjaFbnsqM3oGgBJNhGigQXJvzTPKlCzYStfXhNwaTHzwwsH?=
 =?us-ascii?q?abGbzDHQCB7EdqtW7AE5euN3uPPnkW0c1iRAWBJExYmA0bRy81npk9FgC33sDh?=
 =?us-ascii?q?dFp56ysV5l75rBtM1+1pOwP+UmfZuAendDM0RIKDIxpR6wFI/13VPtCG7uJvAy?=
 =?us-ascii?q?FY+YWsrA6XJWyeeQtIFnsFWlCeC1DgI7mu5sTA8+6CCeqlNPbOZbSOqepDV/aH?=
 =?us-ascii?q?356v041m/yqSOcWLJHVtE/o72k9bV3BjB8vZgykPSzAQly/Vb8+bowq8+jRqrs?=
 =?us-ascii?q?+l9vTnQhnv5YyJC7tdKthv/xG2gaGeN++fnip5KDBY1o8Syn/M0rQQwFkSiyR2?=
 =?us-ascii?q?fTm3DbsArTLNTL7XmqJPDx4UdSJzNMhL76I9xAVNOtTbitT61rFmlP41FkxFWE?=
 =?us-ascii?q?flmsGoY8wKPm68OEnGBEaNKLSJOznLz9vrbqO7TL1alP9UuAGouTaHD0/jOSyO?=
 =?us-ascii?q?mCP0Vx+0K+FDkiGaMAZauIG8aRttDWnjTNT7ahy0KtN3jDs2waEqiXPOL2ITLT?=
 =?us-ascii?q?98c0ZVpL2K8SxYmul/G3BG7nd9MemEmiOZ4/PEJZoMrfRrAjp7l+RB7XQ+yrtV?=
 =?us-ascii?q?6jxERfNvlCvTqN5uv0+pku2VxjV7VxpOry5BhJiXskV6JaXZ6p5AVG7E/R0X62?=
 =?us-ascii?q?WQDhUKp919Bdzuu6Bf0N7PlK3oJTdG8tLU+9YcBsfOJMKGNnohLQTmGDrOAAQZ?=
 =?us-ascii?q?Sj6rMDKXu0sItvCZ8XmctdAQrZnnmJMSAutXTl0zFfgTFmxuHMYFJZZqW3Uji7?=
 =?us-ascii?q?HN3/QF/X6vkB6Ee8hb9qHOUP3aVe/uIzaQl7UCeBYJ0Lr+IqwcM4T63wppbVws?=
 =?us-ascii?q?z6rQHE+FYt1M6hxoaAB89F9M+3h3VGF1xE/kewqr71ccEPe1mlg9jQ4oMrdlzy?=
 =?us-ascii?q?vl/1pifgmCnyA3ikRk3Iy92T0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAC8fAdch0O0hNFlGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGCaYECJ4wSjhsUiX2DfIk/gXMSAQEYCwgBh00iNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQEBCBwEDwYBGxILA?=
 =?us-ascii?q?QMCCQEBBQUOBgQJJQMMFAQBBwEEAQUBAwEYBhMFgxwBgWgBAQINCAQBCpkkPIw?=
 =?us-ascii?q?JFgUBFw2CagWCNYIIChkEChkNXYE3AgEFEopwgRyCFoN1LoMeAQSHOQKLIZRoR?=
 =?us-ascii?q?gcChwOGIIQTIwqBUYgFNoE1C1CFBo1ximEGAgkHDyE5bIINTSNQgU2BH4Ibg22?=
 =?us-ascii?q?FFIU/QDKBAgMBASETinMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAC8fAdch0O0hNFlGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGCaYECJ4wSjhsUiX2DfIk/gXMSAQEYCwgBh00iNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQEBCBwEDwYBGxILAQMCCQEBBQUOBgQ?=
 =?us-ascii?q?JJQMMFAQBBwEEAQUBAwEYBhMFgxwBgWgBAQINCAQBCpkkPIwJFgUBFw2CagWCN?=
 =?us-ascii?q?YIIChkEChkNXYE3AgEFEopwgRyCFoN1LoMeAQSHOQKLIZRoRgcChwOGIIQTIwq?=
 =?us-ascii?q?BUYgFNoE1C1CFBo1ximEGAgkHDyE5bIINTSNQgU2BH4Ibg22FFIU/QDKBAgMBA?=
 =?us-ascii?q?SETinMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="43613472"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 23:25:38 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727084AbeLEHZd (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 02:25:33 -0500
Received: from mail-ed1-f65.google.com ([209.85.208.65]:34880 "EHLO
        mail-ed1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726924AbeLEHZc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 02:25:32 -0500
Received: by mail-ed1-f65.google.com with SMTP id x30so16144751edx.2
        for <linux-kernel@vger.kernel.org>; Tue, 04 Dec 2018 23:25:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:reply-to:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=DXpiqpRsXmiJ33IZH8p+kDDbVBm2Es8YjVb4fRMw/G8=;
        b=S1BOSweZnvo5WRY7VtD0Sko4dMIJtJO4fdPnDcY9FmM833an3kGeLJNScKN6xbSrtt
         PxSqSkaQ9FF3mC/7hSPy3pilGDQlM9592vEHL3Q60firA/VlbO76FBKrLvZuOZMdML6R
         ltKBhTeysSb1DIS5oS8+VrEJ5jCOSkng3YGEOcCo2WDq8bRdqv7E83dZu/6NePNAdiv6
         ii6m3nhDDeTyVf+6WCgc+GMmmMx17s7Gz/Sbd0j0jVtsuYoxPBlYpShXXH0ltA4FtzKB
         23MDWMghMM5AezWWspc6sPxgjU1WWEycH3IwR1gyFpF5AcSOvLQHRS5yjHudbCpqeR7l
         qhAg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:reply-to
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=DXpiqpRsXmiJ33IZH8p+kDDbVBm2Es8YjVb4fRMw/G8=;
        b=kQrrGrjSfDm7a0KglAuOrNdGNOP+/slm5PcpHvU8dFS0fUJKvEQfG1BtF3L/DetQBw
         CJnQfJlFQOKu1K3XmssEkQTRlQYnLwbSs+huCKXlkyrVspMgR9nE+KSBKD60ZDRNoodr
         3jLaZ9lqOQAkPy3W84UKtzQl23DpdmcqFR4Hl+ZngEuZC/OS6W5JM/sKf6Ve6IRbM53e
         k4B4QQyJ9rgjS1AuUE+vQcvbzEdUHwDI+IMqgEwaaRG3BbLCE2mjlwbpFw31NmwxMKr/
         SjezUPk0+dHNVBrva4ZqhM2xVB1szYHzcZh15dJLdJ0S667Lk5W4FRJ+odCCl7Q6NXnN
         6pDQ==
X-Gm-Message-State: AA+aEWZB9i849rAvEzP2HHfno4mbqZjNf9PUtQmyvJUzAHSFaxb4UXEB
        pGCYXMB86E5+spKMb4iNUzw=
X-Google-Smtp-Source: AFSGD/VWPvWKQ4US7UOFmmvttp7BEDrKogrxYnb+pcfi0cV/QJh1kj6Q2RhbaMOUAgBcW1PBLxWDfQ==
X-Received: by 2002:a50:ae01:: with SMTP id c1mr21113318edd.12.1543994729578;
        Tue, 04 Dec 2018 23:25:29 -0800 (PST)
Received: from localhost ([185.92.221.13])
        by smtp.gmail.com with ESMTPSA id c11-v6sm3008054ejm.67.2018.12.04.23.25.28
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 04 Dec 2018 23:25:28 -0800 (PST)
Date: Wed, 5 Dec 2018 07:25:28 +0000
From: Wei Yang <richard.weiyang@gmail.com>
To: Nicolas Boichat <drinkcat@chromium.org>
Cc: Will Deacon <will.deacon@arm.com>, Michal Hocko <mhocko@suse.com>,
        Levin Alexander <Alexander.Levin@microsoft.com>,
        linux-mm@kvack.org, Christoph Lameter <cl@linux.com>,
        Huaisheng Ye <yehs1@lenovo.com>,
        Matthew Wilcox <willy@infradead.org>,
        linux-arm-kernel@lists.infradead.org,
        David Rientjes <rientjes@google.com>,
        yingjoe.chen@mediatek.com, Vlastimil Babka <vbabka@suse.cz>,
        Tomasz Figa <tfiga@google.com>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Joonsoo Kim <iamjoonsoo.kim@lge.com>,
        Robin Murphy <robin.murphy@arm.com>,
        linux-kernel@vger.kernel.org, Pekka Enberg <penberg@kernel.org>,
        iommu@lists.linux-foundation.org,
        Andrew Morton <akpm@linux-foundation.org>,
        Mel Gorman <mgorman@techsingularity.net>
Subject: Re: [PATCH v4 2/3] mm: Add support for kmem caches in DMA32 zone
Message-ID: <20181205072528.l7blg6y24ggblh4m@master>
Reply-To: Wei Yang <richard.weiyang@gmail.com>
References: <20181205054828.183476-1-drinkcat@chromium.org>
 <20181205054828.183476-3-drinkcat@chromium.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181205054828.183476-3-drinkcat@chromium.org>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Dec 05, 2018 at 01:48:27PM +0800, Nicolas Boichat wrote:
>In some cases (e.g. IOMMU ARMv7s page allocator), we need to allocate
>data structures smaller than a page with GFP_DMA32 flag.
>
>This change makes it possible to create a custom cache in DMA32 zone
>using kmem_cache_create, then allocate memory using kmem_cache_alloc.
>
>We do not create a DMA32 kmalloc cache array, as there are currently
>no users of kmalloc(..., GFP_DMA32). The new test in check_slab_flags
>ensures that such calls still fail (as they do before this change).
>
>Fixes: ad67f5a6545f ("arm64: replace ZONE_DMA with ZONE_DMA32")
>Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
>---
>
>Changes since v2:
> - Clarified commit message
> - Add entry in sysfs-kernel-slab to document the new sysfs file
>
>(v3 used the page_frag approach)
>
>Documentation/ABI/testing/sysfs-kernel-slab |  9 +++++++++
> include/linux/slab.h                        |  2 ++
> mm/internal.h                               |  8 ++++++--
> mm/slab.c                                   |  4 +++-
> mm/slab.h                                   |  3 ++-
> mm/slab_common.c                            |  2 +-
> mm/slub.c                                   | 18 +++++++++++++++++-
> 7 files changed, 40 insertions(+), 6 deletions(-)
>
>diff --git a/Documentation/ABI/testing/sysfs-kernel-slab b/Documentation/ABI/testing/sysfs-kernel-slab
>index 29601d93a1c2ea..d742c6cfdffbe9 100644
>--- a/Documentation/ABI/testing/sysfs-kernel-slab
>+++ b/Documentation/ABI/testing/sysfs-kernel-slab
>@@ -106,6 +106,15 @@ Description:
> 		are from ZONE_DMA.
> 		Available when CONFIG_ZONE_DMA is enabled.
> 
>+What:		/sys/kernel/slab/cache/cache_dma32
>+Date:		December 2018
>+KernelVersion:	4.21
>+Contact:	Nicolas Boichat <drinkcat@chromium.org>
>+Description:
>+		The cache_dma32 file is read-only and specifies whether objects
>+		are from ZONE_DMA32.
>+		Available when CONFIG_ZONE_DMA32 is enabled.
>+
> What:		/sys/kernel/slab/cache/cpu_slabs
> Date:		May 2007
> KernelVersion:	2.6.22
>diff --git a/include/linux/slab.h b/include/linux/slab.h
>index 11b45f7ae4057c..9449b19c5f107a 100644
>--- a/include/linux/slab.h
>+++ b/include/linux/slab.h
>@@ -32,6 +32,8 @@
> #define SLAB_HWCACHE_ALIGN	((slab_flags_t __force)0x00002000U)
> /* Use GFP_DMA memory */
> #define SLAB_CACHE_DMA		((slab_flags_t __force)0x00004000U)
>+/* Use GFP_DMA32 memory */
>+#define SLAB_CACHE_DMA32	((slab_flags_t __force)0x00008000U)
> /* DEBUG: Store the last owner for bug hunting */
> #define SLAB_STORE_USER		((slab_flags_t __force)0x00010000U)
> /* Panic if kmem_cache_create() fails */
>diff --git a/mm/internal.h b/mm/internal.h
>index a2ee82a0cd44ae..fd244ad716eaf8 100644
>--- a/mm/internal.h
>+++ b/mm/internal.h
>@@ -14,6 +14,7 @@
> #include <linux/fs.h>
> #include <linux/mm.h>
> #include <linux/pagemap.h>
>+#include <linux/slab.h>
> #include <linux/tracepoint-defs.h>
> 
> /*
>@@ -34,9 +35,12 @@
> #define GFP_CONSTRAINT_MASK (__GFP_HARDWALL|__GFP_THISNODE)
> 
> /* Check for flags that must not be used with a slab allocator */
>-static inline gfp_t check_slab_flags(gfp_t flags)
>+static inline gfp_t check_slab_flags(gfp_t flags, slab_flags_t slab_flags)
> {
>-	gfp_t bug_mask = __GFP_DMA32 | __GFP_HIGHMEM | ~__GFP_BITS_MASK;
>+	gfp_t bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK;
>+
>+	if (!IS_ENABLED(CONFIG_ZONE_DMA32) || !(slab_flags & SLAB_CACHE_DMA32))
>+		bug_mask |= __GFP_DMA32;

The original version doesn't check CONFIG_ZONE_DMA32.

Do we need to add this condition here?
Could we just decide the bug_mask based on slab_flags?

> 
> 	if (unlikely(flags & bug_mask)) {
> 		gfp_t invalid_mask = flags & bug_mask;
>diff --git a/mm/slab.c b/mm/slab.c
>index 65a774f05e7836..2fd3b9a996cbe6 100644
>--- a/mm/slab.c
>+++ b/mm/slab.c
>@@ -2109,6 +2109,8 @@ int __kmem_cache_create(struct kmem_cache *cachep, slab_flags_t flags)
> 	cachep->allocflags = __GFP_COMP;
> 	if (flags & SLAB_CACHE_DMA)
> 		cachep->allocflags |= GFP_DMA;
>+	if (flags & SLAB_CACHE_DMA32)
>+		cachep->allocflags |= GFP_DMA32;
> 	if (flags & SLAB_RECLAIM_ACCOUNT)
> 		cachep->allocflags |= __GFP_RECLAIMABLE;
> 	cachep->size = size;
>@@ -2643,7 +2645,7 @@ static struct page *cache_grow_begin(struct kmem_cache *cachep,
> 	 * Be lazy and only check for valid flags here,  keeping it out of the
> 	 * critical path in kmem_cache_alloc().
> 	 */
>-	flags = check_slab_flags(flags);
>+	flags = check_slab_flags(flags, cachep->flags);
> 	WARN_ON_ONCE(cachep->ctor && (flags & __GFP_ZERO));
> 	local_flags = flags & (GFP_CONSTRAINT_MASK|GFP_RECLAIM_MASK);
> 
>diff --git a/mm/slab.h b/mm/slab.h
>index 4190c24ef0e9df..fcf717e12f0a86 100644
>--- a/mm/slab.h
>+++ b/mm/slab.h
>@@ -127,7 +127,8 @@ static inline slab_flags_t kmem_cache_flags(unsigned int object_size,
> 
> 
> /* Legal flag mask for kmem_cache_create(), for various configurations */
>-#define SLAB_CORE_FLAGS (SLAB_HWCACHE_ALIGN | SLAB_CACHE_DMA | SLAB_PANIC | \
>+#define SLAB_CORE_FLAGS (SLAB_HWCACHE_ALIGN | SLAB_CACHE_DMA | \
>+			 SLAB_CACHE_DMA32 | SLAB_PANIC | \
> 			 SLAB_TYPESAFE_BY_RCU | SLAB_DEBUG_OBJECTS )
> 
> #if defined(CONFIG_DEBUG_SLAB)
>diff --git a/mm/slab_common.c b/mm/slab_common.c
>index 70b0cc85db67f8..18b7b809c8d064 100644
>--- a/mm/slab_common.c
>+++ b/mm/slab_common.c
>@@ -53,7 +53,7 @@ static DECLARE_WORK(slab_caches_to_rcu_destroy_work,
> 		SLAB_FAILSLAB | SLAB_KASAN)
> 
> #define SLAB_MERGE_SAME (SLAB_RECLAIM_ACCOUNT | SLAB_CACHE_DMA | \
>-			 SLAB_ACCOUNT)
>+			 SLAB_CACHE_DMA32 | SLAB_ACCOUNT)
> 
> /*
>  * Merge control. If this is set then no merging of slab caches will occur.
>diff --git a/mm/slub.c b/mm/slub.c
>index 21a3f6866da472..6d47765a82d150 100644
>--- a/mm/slub.c
>+++ b/mm/slub.c
>@@ -1685,7 +1685,7 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
> 
> static struct page *new_slab(struct kmem_cache *s, gfp_t flags, int node)
> {
>-	flags = check_slab_flags(flags);
>+	flags = check_slab_flags(flags, s->flags);
> 
> 	return allocate_slab(s,
> 		flags & (GFP_RECLAIM_MASK | GFP_CONSTRAINT_MASK), node);
>@@ -3577,6 +3577,9 @@ static int calculate_sizes(struct kmem_cache *s, int forced_order)
> 	if (s->flags & SLAB_CACHE_DMA)
> 		s->allocflags |= GFP_DMA;
> 
>+	if (s->flags & SLAB_CACHE_DMA32)
>+		s->allocflags |= GFP_DMA32;
>+
> 	if (s->flags & SLAB_RECLAIM_ACCOUNT)
> 		s->allocflags |= __GFP_RECLAIMABLE;
> 
>@@ -5095,6 +5098,14 @@ static ssize_t cache_dma_show(struct kmem_cache *s, char *buf)
> SLAB_ATTR_RO(cache_dma);
> #endif
> 
>+#ifdef CONFIG_ZONE_DMA32
>+static ssize_t cache_dma32_show(struct kmem_cache *s, char *buf)
>+{
>+	return sprintf(buf, "%d\n", !!(s->flags & SLAB_CACHE_DMA32));
>+}
>+SLAB_ATTR_RO(cache_dma32);
>+#endif
>+
> static ssize_t usersize_show(struct kmem_cache *s, char *buf)
> {
> 	return sprintf(buf, "%u\n", s->usersize);
>@@ -5435,6 +5446,9 @@ static struct attribute *slab_attrs[] = {
> #ifdef CONFIG_ZONE_DMA
> 	&cache_dma_attr.attr,
> #endif
>+#ifdef CONFIG_ZONE_DMA32
>+	&cache_dma32_attr.attr,
>+#endif
> #ifdef CONFIG_NUMA
> 	&remote_node_defrag_ratio_attr.attr,
> #endif
>@@ -5665,6 +5679,8 @@ static char *create_unique_id(struct kmem_cache *s)
> 	 */
> 	if (s->flags & SLAB_CACHE_DMA)
> 		*p++ = 'd';
>+	if (s->flags & SLAB_CACHE_DMA32)
>+		*p++ = 'D';
> 	if (s->flags & SLAB_RECLAIM_ACCOUNT)
> 		*p++ = 'a';
> 	if (s->flags & SLAB_CONSISTENCY_CHECKS)
>-- 
>2.20.0.rc1.387.gf8505762e3-goog
>
>_______________________________________________
>iommu mailing list
>iommu@lists.linux-foundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/iommu

-- 
Wei Yang
Help you, Help me
