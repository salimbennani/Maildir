Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:40:56 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 10F53580375;
	Wed,  5 Dec 2018 19:33:06 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 19:33:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Arx0aKRKJpUMC5xtqvdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/35rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsVAeoOMvpXoJT/qFQAthu+HQuhCfjzyjNUnHL6wbE23v4/HQzAwQcuH8gOsH?=
 =?us-ascii?q?PRrNjtNKgdT+G1x7TKwjrZafNW1ir25Y/SchAgvf6MXah/cdDMxkU1GQLKkFSQ?=
 =?us-ascii?q?qIz/MDOT2eQAqGeb7+96WuKuj24rsR1+oj+qxso1jITCm4Ebykjc+Cln3Io4Ic?=
 =?us-ascii?q?e0RFN1bNK6CpdcqiKXO5dsTs4jQWxkoDs2x74GtJKheCUG1o4rywDBZ/CaaYSE?=
 =?us-ascii?q?/xzuWeCMKjlinn1lYqiwhxOq/Eig1OL8Us603U5UripKjNbMrGoB1x/N5cidTP?=
 =?us-ascii?q?ty4EOh1SyI1wDJ5eFIOUE0lazFJJ492rM8iIYfvEDZEiPrlkj6krWaelgn9+S0?=
 =?us-ascii?q?8ejqY7frqoeZN4BuiwH+Nqoumta4AeQ9KgUOW2mb+eKh1Lzs5EH5Q6tFjucwkq?=
 =?us-ascii?q?bHtJDWPMMbp6C/AwBLyIYu8Ai/Dzi439QCh3UHL0xKeAiBj4f3P1HCOvf4De2w?=
 =?us-ascii?q?g1i0ijdk2+jGPqH9ApXKNnXDlLbhfbVj5EJGxwsz0MtS55ZVCrEHPfLyVVX9tN?=
 =?us-ascii?q?3eDh8lLQO0x/zrB8l61oMbQWiPGLOWMLvOsV+U4eIiO+mMa5UUuDbhMfcl4OTi?=
 =?us-ascii?q?jX8kmVAHe6mp0oAaaHS5HvRgPkWYbmDggtYHEWcWoAU+SPbmh0GFUT5Wf3yyRb?=
 =?us-ascii?q?4z5iknCIK6CofOXoKtgLuf0yuhHZ1WYWZGClaLEXrzc4WEWvEMaD+dI8N7kzwE?=
 =?us-ascii?q?U6ShRJEl1R20qAD6zL9nJPLO+iIErZLjyMR15+rLmB4o7jx0D8Od02KXQ2FuhG?=
 =?us-ascii?q?wIRSQ73KR+oUx711eC3rJ0g/1eFdxP+fxJVh02OoLbz+x/E9ryQB7Ofs+VSFa6?=
 =?us-ascii?q?RdWrGTIxQcg3w9MUZ0Z9Gs+tjhbM3yexB78VlrqLBIE7867G3njxIdp9xGjC1K?=
 =?us-ascii?q?U7k1YmRc5PP3W8hqFj7wjTG5LJk0KBmqm3b6scwjDC+H2DzWWUukFYSxB/UaPC?=
 =?us-ascii?q?UXAbZUvWqND561jGT7+vD7QnLwRAxdSDKqtMdt3mk1FGSO3/N9TZZmK7g32wCg?=
 =?us-ascii?q?qQxrOQcIrqfH0Q0zjHB0gajQ8f53aGOhI4Bie6vW3eCidjFVbuY0Pq7Ol/p2m3?=
 =?us-ascii?q?Tk4yzwGWcUJh06C59QIShfyZU/kTxK4LuD89qzVoG1awx87WC9uFpwpmYKVcYd?=
 =?us-ascii?q?M87E1b1W7DsAx9JJigL6Fkhl4RaAl3u0Lu1xNqCoRPi8QqrXUqzBZsJqKcyl9O?=
 =?us-ascii?q?azSY3ZXoML3NNmby5Ayva7LR2lzGytmW/rkA6fsmpFTjpg2mDVci/Gh93NlT0H?=
 =?us-ascii?q?uc4YvKAREWUZLwVEY36hd7q6vbYik7+4Pby3lsPbOovT/F3tIjHPElxQq4f9dD?=
 =?us-ascii?q?LKOEExf/Es0HB8S0NOMmgVmobhIeM+BU+645JMemd/qA2K62M+dshjOmjWJb4I?=
 =?us-ascii?q?9j1kKA7TZzSunN35wd2fGXwhOHVyvgjFemqs33g4FEai0IEWql1CfkA5RdZqts?=
 =?us-ascii?q?coYRCGeiOtG4yc96h5HwRXFY7lmjB1Ud1c+teBqSaUH93AJK2UQWp3ynhTW3zz?=
 =?us-ascii?q?hunz41qaqf2TTEw/7+exofJm5LWG5igE/sIIi1ldwbXFKkbxM0lBuj/kv6w6lb?=
 =?us-ascii?q?pKJiL2jcW0tIfi72L318Xau0rLaNf8lP6JYwuyVNTOu8eUyaSqL6oxYC0SPsBX?=
 =?us-ascii?q?FexDM4dzGtoJn5hAZ1iGGeLHZyqnrWZ8dwyAzb5NzdQ/5RwzUHSDN5iTnRGliz?=
 =?us-ascii?q?Id2p8c+ImJfEt+C0T3ihWYFLcSn30YOAszO25G1wDh24hfyzmNznEQ4h3C//1t?=
 =?us-ascii?q?lqUzjIrRnmbonq0aS6Lfxofk1yCFDg7Mp6H5l0kpEsi5EIxXgampKV8GIEkWjp?=
 =?us-ascii?q?MNVXw6L+bGcXSj4NzN7Y+wzl2ExlLnKUyIP1THSdws19Z9akZmMawD4y78dPCK?=
 =?us-ascii?q?2M9rxLgTN1okakrQLWefV9mzYdyfg053IAjeAGphEtzjmDDbAIBkZXIzbslxuT?=
 =?us-ascii?q?4tC6raVXYnuvcLeq2Ep/m9ChEK+NogVGVHnlfZciGDd67t9jP1LUzH3z9obkdc?=
 =?us-ascii?q?HMbdIUsx2YiRbBgPJTKJIsjfoKnitnNHn5vX0kze47kBNv0Yu7vIiBN2Vi4qa5?=
 =?us-ascii?q?DgREOT3yYsMZ4ivtgrpGnsaKw4CvGY1sFS4RU5vvSfKoDSgetfD6NwuVFD08q3?=
 =?us-ascii?q?GbGafQHAOF6UdmqW7PHI6vN32NOHYZytBiTgGHJENDmAAUQCk6npkhGwCo3sPh?=
 =?us-ascii?q?dVl25isL6l7ksBdMyf9oNxriUmfZvgiocSw5SJyeLBpQ8wFD6F3ZMc2Y7uJvAS?=
 =?us-ascii?q?5Y+oetoxCKKmyefw5IF30GWlSYB1D/Obmj/dnB8++FBuqnMvvBe7OOpfZFV/eP?=
 =?us-ascii?q?w5Kv3ZBr/zKNNsWJI3ljAOc32ktFXXBlBcvZny8DRDAQlyLId8Sbvguz+jVrrs?=
 =?us-ascii?q?Cj9/TmQALv6pWOC7tRMtVv+gq6gaSZN+6XiyZ2NyxY1o4XxXLTzLgf3VgSizxh?=
 =?us-ascii?q?djW3ELQAszLNQ7zUmqNNExEbbCZzPtNS760gxglNJdLbitTt27Fik/46EE1FWk?=
 =?us-ascii?q?Lhm82zYcwKInqwNFfGBEaNKbSHKifHw8DxYaOgV7JQiP9YuAG3uTaeC0XjJCiM?=
 =?us-ascii?q?lyH1VxCzNuFBlD2bPB1buI2nbhlhE3TsTNL4ZR29K9J3iTw2wbsphnLFL2IcMD?=
 =?us-ascii?q?58c19Tob2U9y9XnvJ/G2lZ5Hp/MeaEgzqZ7/XfKpsOsfpkGCJ0l+db4HQ807RU?=
 =?us-ascii?q?7SFES+ZzmCvdtdNup1Cmku+SyjtoShZOqzBLhJ6VskVmI6nW6p5AWXOXtC4KuE?=
 =?us-ascii?q?ORABMOrsAtINrusKBZ1pCbmLjyLjRJ+s789ssGAM3VNcfBN2AuZ0nTFSbQHTcC?=
 =?us-ascii?q?GAGmNCnujkpS2KWI93aVp4I27IfhmYsHTLBzW1k8F/dcAUNgSo8sOpByCwwpkP?=
 =?us-ascii?q?aqhcgHrS6krRLRTd9W+I/KV+ObB/rHJzOQjL0CbBwNl+CrZb8PP5H2jhQxImJx?=
 =?us-ascii?q?m57HTg+JBYhA?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAADlwhch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGDayeaLRSJD4RqiT+BcxIBARgTAYdTIjUIDQEDAQE?=
 =?us-ascii?q?BAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECCBwEDwYBGx0BAwIJAQEFBQ4GB?=
 =?us-ascii?q?AklAwwSAgwBBAEFAQMBGAYTBYMcgWkBAQIVBAGaPDyMCRYFARcNgmoFgjWCCwo?=
 =?us-ascii?q?ZBAoZDV2BNwIGEopwgRyCFoN1LoJXiAUCiyKKR4oYJy4HAo4UgyMjCoFRiAU2g?=
 =?us-ascii?q?TULUIUJjn+JWAYCCQcPITltAYILTSOCHYEfghsMF4NKilNAMoECAwEBIROKJQE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0ADAAADlwhch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGDayeaLRSJD4RqiT+BcxIBARgTAYdTIjUIDQEDAQEBAQEBAgETAQEBC?=
 =?us-ascii?q?A0JCCkjDII2JAGCYgECAwECCBwEDwYBGx0BAwIJAQEFBQ4GBAklAwwSAgwBBAE?=
 =?us-ascii?q?FAQMBGAYTBYMcgWkBAQIVBAGaPDyMCRYFARcNgmoFgjWCCwoZBAoZDV2BNwIGE?=
 =?us-ascii?q?opwgRyCFoN1LoJXiAUCiyKKR4oYJy4HAo4UgyMjCoFRiAU2gTULUIUJjn+JWAY?=
 =?us-ascii?q?CCQcPITltAYILTSOCHYEfghsMF4NKilNAMoECAwEBIROKJQEB?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="54038970"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 19:33:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728846AbeLFDdB (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 22:33:01 -0500
Received: from mail-ed1-f66.google.com ([209.85.208.66]:33389 "EHLO
        mail-ed1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727695AbeLFDdB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 22:33:01 -0500
Received: by mail-ed1-f66.google.com with SMTP id p6so10582671eds.0
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 19:32:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:reply-to:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=pkqE98MxOdvBWEkJZJhFPzyCYDrflBBMEZ7+glZZp00=;
        b=rRgQYWUiYHR+/2qu3fboJl6KKHfwqmDKoZs3Ve7FEOlPFIwi79GQB7QZ1nfK1s6xY7
         dPXKGAqi3aSubm22PJPu/2nsZh/7Mb6Gyho+614DJwJP/nHnLLNCMDACzicR1WRVxVDE
         AaWfVSs9sX9+687dQF770GdtfW3rW9RkkX01z5U/7jmAT+hQfNJM8wdrAQfTs+tP1NZX
         a+MIEyHGQqmuBG/yGFGwa3mTwFF27JPR50Xt0L4wWywbqoGM7kYb7r6SJO7nC5jcBYOn
         4gH4BpO9t90UxB41m5HSlcHv0NqEIldBi8uP4fwmE4qKeY5oMY6O8SHRhAjgeaCwHK71
         KXRA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:reply-to
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=pkqE98MxOdvBWEkJZJhFPzyCYDrflBBMEZ7+glZZp00=;
        b=CPrPK78D+rZsuvI+RhgnnojoLixuJVJUoeoYR4ijNM+w9dt3WvxAzvJvMVN9HosCDE
         nZbK9q0LFnAmi3en8g8M3MG0ZoqlGrF5spyaij2ffhsZDKBHUVpMFYBSFRkqTuUv5Inm
         bkTRgIzuyeQn3DJ45RVtf1dExEVc9wCU+ASy1YCNwSh+wGz0vXrRPP2ymCwq6WFaZW2M
         dXODWe4EeDxvnOCXA/WkrUm9im9iKmsqQyls8v3AiT8KFqTU/sNV6yTZtZec4pP5vWxr
         FhifHz5C0DVuUAslFW2X59FqL/BbYdsi7l6r2bOqOog9QteK4WBbUsqugAIuSUJMxnN+
         TMzg==
X-Gm-Message-State: AA+aEWZc89cgscCqVq+hH00zTS5aXwiUvP4iPRUHO94rSOJuEvVMuBA7
        GG8uBlbV294yETel/7uM3go=
X-Google-Smtp-Source: AFSGD/VIY5IIhTU5V9EHVDZMOCigIW3iCs/3ykSPXVl4wnrE+2Xv3TgHuipaGcd3G9IyyGJHyVlNNw==
X-Received: by 2002:a50:880d:: with SMTP id b13mr22703548edb.68.1544067178676;
        Wed, 05 Dec 2018 19:32:58 -0800 (PST)
Received: from localhost ([185.92.221.13])
        by smtp.gmail.com with ESMTPSA id h9sm1045057ede.93.2018.12.05.19.32.57
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Wed, 05 Dec 2018 19:32:57 -0800 (PST)
Date: Thu, 6 Dec 2018 03:32:57 +0000
From: Wei Yang <richard.weiyang@gmail.com>
To: Nicolas Boichat <drinkcat@chromium.org>
Cc: richard.weiyang@gmail.com, Will Deacon <will.deacon@arm.com>,
        Michal Hocko <mhocko@suse.com>,
        Levin Alexander <Alexander.Levin@microsoft.com>,
        linux-mm@kvack.org, Christoph Lameter <cl@linux.com>,
        Huaisheng Ye <yehs1@lenovo.com>,
        Matthew Wilcox <willy@infradead.org>,
        linux-arm Mailing List <linux-arm-kernel@lists.infradead.org>,
        David Rientjes <rientjes@google.com>,
        yingjoe.chen@mediatek.com, Vlastimil Babka <vbabka@suse.cz>,
        Tomasz Figa <tfiga@google.com>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Joonsoo Kim <iamjoonsoo.kim@lge.com>,
        Robin Murphy <robin.murphy@arm.com>,
        lkml <linux-kernel@vger.kernel.org>,
        Pekka Enberg <penberg@kernel.org>,
        iommu@lists.linux-foundation.org,
        Andrew Morton <akpm@linux-foundation.org>,
        Mel Gorman <mgorman@techsingularity.net>
Subject: Re: [PATCH v4 2/3] mm: Add support for kmem caches in DMA32 zone
Message-ID: <20181206033257.mmgh6efejee2i2ae@master>
Reply-To: Wei Yang <richard.weiyang@gmail.com>
References: <20181205054828.183476-1-drinkcat@chromium.org>
 <20181205054828.183476-3-drinkcat@chromium.org>
 <20181205072528.l7blg6y24ggblh4m@master>
 <CANMq1KCi-k_4-66pMfvByzsjpf1H6_bvC82Ow0b_jEH6B3LHwA@mail.gmail.com>
 <20181205121807.evmslrimsv4pdtza@master>
 <CANMq1KD3vPpd1-=JpcOGRUyt97V+9+zJ9Yf-Qw5CZCPJBqNyHA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CANMq1KD3vPpd1-=JpcOGRUyt97V+9+zJ9Yf-Qw5CZCPJBqNyHA@mail.gmail.com>
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 06, 2018 at 08:41:36AM +0800, Nicolas Boichat wrote:
>On Wed, Dec 5, 2018 at 8:18 PM Wei Yang <richard.weiyang@gmail.com> wrote:
>>
>> On Wed, Dec 05, 2018 at 03:39:51PM +0800, Nicolas Boichat wrote:
>> >On Wed, Dec 5, 2018 at 3:25 PM Wei Yang <richard.weiyang@gmail.com> wrote:
>> >>
>> >> On Wed, Dec 05, 2018 at 01:48:27PM +0800, Nicolas Boichat wrote:
>> >> >In some cases (e.g. IOMMU ARMv7s page allocator), we need to allocate
>> >> >data structures smaller than a page with GFP_DMA32 flag.
>> >> >
>> >> >This change makes it possible to create a custom cache in DMA32 zone
>> >> >using kmem_cache_create, then allocate memory using kmem_cache_alloc.
>> >> >
>> >> >We do not create a DMA32 kmalloc cache array, as there are currently
>> >> >no users of kmalloc(..., GFP_DMA32). The new test in check_slab_flags
>> >> >ensures that such calls still fail (as they do before this change).
>> >> >
>> >> >Fixes: ad67f5a6545f ("arm64: replace ZONE_DMA with ZONE_DMA32")
>> >> >Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
>> >> >---
>> >> >
>> >> >Changes since v2:
>> >> > - Clarified commit message
>> >> > - Add entry in sysfs-kernel-slab to document the new sysfs file
>> >> >
>> >> >(v3 used the page_frag approach)
>> >> >
>> >> >Documentation/ABI/testing/sysfs-kernel-slab |  9 +++++++++
>> >> > include/linux/slab.h                        |  2 ++
>> >> > mm/internal.h                               |  8 ++++++--
>> >> > mm/slab.c                                   |  4 +++-
>> >> > mm/slab.h                                   |  3 ++-
>> >> > mm/slab_common.c                            |  2 +-
>> >> > mm/slub.c                                   | 18 +++++++++++++++++-
>> >> > 7 files changed, 40 insertions(+), 6 deletions(-)
>> >> >
>> >> >diff --git a/Documentation/ABI/testing/sysfs-kernel-slab b/Documentation/ABI/testing/sysfs-kernel-slab
>> >> >index 29601d93a1c2ea..d742c6cfdffbe9 100644
>> >> >--- a/Documentation/ABI/testing/sysfs-kernel-slab
>> >> >+++ b/Documentation/ABI/testing/sysfs-kernel-slab
>> >> >@@ -106,6 +106,15 @@ Description:
>> >> >               are from ZONE_DMA.
>> >> >               Available when CONFIG_ZONE_DMA is enabled.
>> >> >
>> >> >+What:         /sys/kernel/slab/cache/cache_dma32
>> >> >+Date:         December 2018
>> >> >+KernelVersion:        4.21
>> >> >+Contact:      Nicolas Boichat <drinkcat@chromium.org>
>> >> >+Description:
>> >> >+              The cache_dma32 file is read-only and specifies whether objects
>> >> >+              are from ZONE_DMA32.
>> >> >+              Available when CONFIG_ZONE_DMA32 is enabled.
>> >> >+
>> >> > What:         /sys/kernel/slab/cache/cpu_slabs
>> >> > Date:         May 2007
>> >> > KernelVersion:        2.6.22
>> >> >diff --git a/include/linux/slab.h b/include/linux/slab.h
>> >> >index 11b45f7ae4057c..9449b19c5f107a 100644
>> >> >--- a/include/linux/slab.h
>> >> >+++ b/include/linux/slab.h
>> >> >@@ -32,6 +32,8 @@
>> >> > #define SLAB_HWCACHE_ALIGN    ((slab_flags_t __force)0x00002000U)
>> >> > /* Use GFP_DMA memory */
>> >> > #define SLAB_CACHE_DMA                ((slab_flags_t __force)0x00004000U)
>> >> >+/* Use GFP_DMA32 memory */
>> >> >+#define SLAB_CACHE_DMA32      ((slab_flags_t __force)0x00008000U)
>> >> > /* DEBUG: Store the last owner for bug hunting */
>> >> > #define SLAB_STORE_USER               ((slab_flags_t __force)0x00010000U)
>> >> > /* Panic if kmem_cache_create() fails */
>> >> >diff --git a/mm/internal.h b/mm/internal.h
>> >> >index a2ee82a0cd44ae..fd244ad716eaf8 100644
>> >> >--- a/mm/internal.h
>> >> >+++ b/mm/internal.h
>> >> >@@ -14,6 +14,7 @@
>> >> > #include <linux/fs.h>
>> >> > #include <linux/mm.h>
>> >> > #include <linux/pagemap.h>
>> >> >+#include <linux/slab.h>
>> >> > #include <linux/tracepoint-defs.h>
>> >> >
>> >> > /*
>> >> >@@ -34,9 +35,12 @@
>> >> > #define GFP_CONSTRAINT_MASK (__GFP_HARDWALL|__GFP_THISNODE)
>> >> >
>> >> > /* Check for flags that must not be used with a slab allocator */
>> >> >-static inline gfp_t check_slab_flags(gfp_t flags)
>> >> >+static inline gfp_t check_slab_flags(gfp_t flags, slab_flags_t slab_flags)
>> >> > {
>> >> >-      gfp_t bug_mask = __GFP_DMA32 | __GFP_HIGHMEM | ~__GFP_BITS_MASK;
>> >> >+      gfp_t bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK;
>> >> >+
>> >> >+      if (!IS_ENABLED(CONFIG_ZONE_DMA32) || !(slab_flags & SLAB_CACHE_DMA32))
>> >> >+              bug_mask |= __GFP_DMA32;
>> >>
>> >> The original version doesn't check CONFIG_ZONE_DMA32.
>> >>
>> >> Do we need to add this condition here?
>> >> Could we just decide the bug_mask based on slab_flags?
>> >
>> >We can. The reason I did it this way is that when we don't have
>> >CONFIG_ZONE_DMA32, the compiler should be able to simplify to:
>> >
>> >bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK;
>> >if (true || ..) => if (true)
>> >   bug_mask |= __GFP_DMA32;
>> >
>> >Then just
>> >bug_mask = __GFP_HIGHMEM | ~__GFP_BITS_MASK | __GFP_DMA32;
>> >
>> >And since the function is inline, slab_flags would not even need to be
>> >accessed at all.
>> >
>>
>> Hmm, I get one confusion.
>>
>> This means if CONFIG_ZONE_DMA32 is not enabled, bug_mask will always
>> contains __GFP_DMA32. This will check with cachep->flags.
>>
>> If cachep->flags has GFP_DMA32, this always fail?
>>
>> Is this possible?
>
>Not fully sure to understand the question, but the code is:
>if (!IS_ENABLED(CONFIG_ZONE_DMA32) || !(slab_flags & SLAB_CACHE_DMA32))
>       bug_mask |= __GFP_DMA32;
>
>IS_ENABLED(CONFIG_ZONE_DMA32) == true:
> - (slab_flags & SLAB_CACHE_DMA32) => bug_mask untouched, __GFP_DMA32
>is allowed.
> - !(slab_flags & SLAB_CACHE_DMA32) => bug_mask |= __GFP_DMA32;,
>__GFP_DMA32 triggers warning
>IS_ENABLED(CONFIG_ZONE_DMA32) == false:
>  => bug_mask |= __GFP_DMA32;, __GFP_DMA32 triggers warning (as
>expected, GFP_DMA32 does not make sense if there is no DMA32 zone).

This is the case I am thinking.

The warning is reasonable since there is no DMA32. While the
kmem_cache_create() user is not easy to change their code.

For example, one writes code and wants to have a kmem_cache with DMA32
capability, so he writes kmem_cache_create(__GFP_DMA32). The code is
there and not easy to change. But one distro builder decides to disable
DMA32. This will leads to all the kmem_cache_create() through warning?

This behavior is what we expect?

>
>Does that clarify?
>
>>
>> --
>> Wei Yang
>> Help you, Help me

-- 
Wei Yang
Help you, Help me
