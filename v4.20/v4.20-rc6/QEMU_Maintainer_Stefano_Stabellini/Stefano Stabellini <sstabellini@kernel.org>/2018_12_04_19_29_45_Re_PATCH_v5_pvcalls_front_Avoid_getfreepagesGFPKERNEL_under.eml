Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:43:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 76DE458014B;
	Tue,  4 Dec 2018 11:29:54 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 11:29:53 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AR5wZCh8BC6TT4f9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+0RIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFDDY2/?=
 =?us-ascii?q?YYsAAeUOMvpDr4nlpVYDtge+CRW2Ce/z1jNFnGH60Ksn2OohCwHG2wkgEsoTvn?=
 =?us-ascii?q?TIstr1Or0dUeayzKLV0DvDc+lZ1izj54jMdhAhoPeMXbNtesfW0kkvDB/FgU+L?=
 =?us-ascii?q?poP7OzOV0uUNs26a7+d7VuKglXQnqwdvrTir3MssjZPJho0Mx13C6C53w541KM?=
 =?us-ascii?q?WmREJnZdOoCoZcui+EO4dsX88vQH1ktDw7x7AEoZK2fSoHxI46yxPeZPGLaZWE?=
 =?us-ascii?q?7g79WOqLLjp1hnRoc6+liRmo60iv0Oj8W9G00FlUqipFlcHBtm4C1xPN8MiLUP?=
 =?us-ascii?q?h98Vm72TaJyQ/T7vtIIUcularUM5Ihw7gwmYQPsUnbACP6hEH7gLWLekgq5OSk?=
 =?us-ascii?q?8fnrb7b6qpOGNoJ5iBnyMqE0lcy+BeQ4PBIOX2+e+emk0L3j/Ev5QKhFj/Evka?=
 =?us-ascii?q?nWroraJcIFqa69GgNV1Ygi6xChADe8y9kYg3YHI0xfeB6djIjmJUvOIPbmAve7?=
 =?us-ascii?q?mVisly1rx//eMr37HprNNmTDkKvmfbtl705cyQkzws5F65NbF7EMO/bzWk73tN?=
 =?us-ascii?q?zFAR41KQ20w+D7CNpj0oMSQ36AAqicMKnKq1+H+vovI/WQZI8SoDv9K+Iq5//y?=
 =?us-ascii?q?jXAjnl8RZ6mp3YYNZ3C+EfRrOEGZYXvqgtccHmYGpAs+TOr2iFKcVT5ffWq9X6?=
 =?us-ascii?q?U55jsjEoKpEZ/DRpyxgLyGxCq7HJpWaX5cBlCPFnfocYOEW/AXZSKWI89hlCEE?=
 =?us-ascii?q?VLe7R48g0xGuqBH1y759IuXI/S0YsIrp1MJp6O3LiREy6Tt0AtyH3GGWT2F0mW?=
 =?us-ascii?q?AISyUs3K9lo0xw0VOD0al+g/xFGt1f/fJJUgEmNZHCy+x2Ecz9WgXEft2RUlap?=
 =?us-ascii?q?Xs2mAS0tTtI229IOYFxyG9O4ghDH3iqlGbkVl7OQCZww86Lc2WXxJslnx3bH0q?=
 =?us-ascii?q?khk0cpQs9VOWK6ga5/8hDZB5TVnEWBi6aqaaMc0TbQ+2iZ02qBoltUUA5qXqXD?=
 =?us-ascii?q?RnAQeE3WodP95kPBSr+uDa8qMg9Ayc6EN6tLZcfljVRARPf/JtveZ3i9lHu3BR?=
 =?us-ascii?q?aN3rmMdpble30B3CXBD0gJix0c8myYNQcgHCuho3jRDDp1FV3xZUPh6u1+qHK9?=
 =?us-ascii?q?Tk8pwACGdUxh17yp+hELgfyQUe8c3rUBuC05sTV7AE69387KC9qHvwdhYKRcYd?=
 =?us-ascii?q?Y64Fdb1WLYtxZxPoC6I6BlnF4edwV3v0Xh1xhsDoVAkM4qrG4lzQZoKKKY1k9B?=
 =?us-ascii?q?eC2c3ZzqJrLXLWzy9gi1a6HKwlHezMqW+qAX5fsir1Xsog6oGVQi8nl9yNZVzm?=
 =?us-ascii?q?aT6Y/MDAoRVpLxTF069xx7p7Hcfyk86JnY1XxqMamorDDC38glC/ciyhalZ91f?=
 =?us-ascii?q?Kr+LFBfuE80GAMijMOwrm0WzYh0YJuxT9a40MNmgd/uJw6OrOOdgnDS7jWVI+o?=
 =?us-ascii?q?x900SM9zZiRe7MxZoK3/aY3g6fXTfmkFihqtz3mZxDZTwKBGq/yDTrC5RLZqJv?=
 =?us-ascii?q?eoYHE2GuLNOtxtV/npLiR2RX9Fq+CFwYws+pfhySYkf53Q1R00QXvHOmlTG5zz?=
 =?us-ascii?q?xyjzEmsK6f0DbSzOTlcRoNInRLS3V6jVfwPYi0iMgXXUipbwQzlBqp/136x7Vd?=
 =?us-ascii?q?pKlkK2nTQEFIfzX5Lm14U6uwsKaCbNBL6J8yrSpXV+G8a0iASrHhuxsazz/jH2?=
 =?us-ascii?q?xGyTA5bT6qoJb5nx99iG6HN3Z8tnnZecJxxRfZ+tPcQ+Vc3j4HRCl+lDnWCUKw?=
 =?us-ascii?q?P9iv/dWIiZjDtvqyWH6mVp1WaSPr15+PtDOn5W12Bh2yh/CylcfgEQQg0y/71t?=
 =?us-ascii?q?9qWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2aHkY3oMXzILw8PV7xLj2E1sNX+Jw4P5VnOAwspufdW6Y2UW2j4j4MBOEq?=
 =?us-ascii?q?ub8LtEnS5tqFqisQ3ReeR9nisayfY27X4aguIJtxA3wiSTHL8SBlVYMjL2lxuT?=
 =?us-ascii?q?8d++tqpXaX2rcbix0kp+gN+gAKuDogFaRHb2ZJMiETVs4cV4NVLGyGfz5Z38eN?=
 =?us-ascii?q?nMcdITsQWZkwvHj+hQMp4wl+AFhSx6OWLmpn0lyvU2jRhv3ZG8oYiGJH9h/KO/?=
 =?us-ascii?q?Ah5EKDL1Y9kf9S3qjaZbhsyWxZygHo19GjUXW5vlVemnHygVtfTjKgaCCjk8qm?=
 =?us-ascii?q?qAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV975j8L4173tABMxvh0NxXlUWffuQSoaioySJeFNxpb9QVC50bTMcyD4eN/BS?=
 =?us-ascii?q?BY/pu9rAOTLmyXfRhHDWYMWkacHVDsIqGu5cXc8+ifHue/L/zOYaiXqexDTfiI?=
 =?us-ascii?q?w4ij0pBh/zaKOcWCJX1iD/w92kpeUnF1AcXZmzMTSyMJkyLBddKUpBC5+idvtM?=
 =?us-ascii?q?Cw7OzrWB7z5YuIE7ZSMctg+xG1gaeANu6cniV5KSxf1pMD23DI0qUf3EUJhiFq?=
 =?us-ascii?q?djmtF6kAtCHXQKLRnK9XEwAUaydpOMRU6KI82xFHOdTHhdPtyr54kvk1Bk9fWl?=
 =?us-ascii?q?z8gc6pf9IFImGnOFPDBUaGL7CGJTzNw8HqbqKwU7xQjONItxKuvTaXCVPsPjOG?=
 =?us-ascii?q?lzPxTRCgLflMjD2HPBxZoIy9bhdtCW35QN36cBG0LN93giMwwbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmuNa+ns6zb5V?=
 =?us-ascii?q?7CBCRPNtmSrSrsRho1epkuSUzjpnURxOqitEhY6RvEViP7nZ+YdEWXre4B0N6m?=
 =?us-ascii?q?CQWFw2oI5aB9uniqlWxZCbi6/1biZL9d2FrOMOG8WSI8WCdnEnZ0nHAjnRWTAZ?=
 =?us-ascii?q?QDCiM2aXvFBUmvyW8nyTr9BusYPwkZADTrtaUl0dFf4ADElhWtsYL8EkDXsfjb?=
 =?us-ascii?q?eHgZtQtjKFpx7LSZAf58ifWw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AhAAB/1AZch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYJqgQInjHGLL4FoJRSOKop+FBgDEAGBS4YBIjgSAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIkEwYBATcBBQkBAQoYLgMlLwYTBYMcA?=
 =?us-ascii?q?YIBBaN5gWwzgnYBAQWHKAiLAoEcF4FAP4ERM4JfilyJDySGfpAaCYcDhiCENgy?=
 =?us-ascii?q?CHI5+LJhLgV2Bdn2DLwmCEgkDF4Yggj6FYB8ygQIDAQEhE4otAQE?=
X-IPAS-Result: =?us-ascii?q?A0AhAAB/1AZch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBZYJ?=
 =?us-ascii?q?qgQInjHGLL4FoJRSOKop+FBgDEAGBS4YBIjgSAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAQIDAQIkEwYBATcBBQkBAQoYLgMlLwYTBYMcAYIBBaN5gWwzgnY?=
 =?us-ascii?q?BAQWHKAiLAoEcF4FAP4ERM4JfilyJDySGfpAaCYcDhiCENgyCHI5+LJhLgV2Bd?=
 =?us-ascii?q?n2DLwmCEgkDF4Yggj6FYB8ygQIDAQEhE4otAQE?=
X-IronPort-AV: E=Sophos;i="5.56,315,1539673200"; 
   d="scan'208";a="54512060"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 11:29:52 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726250AbeLDT3s (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 14:29:48 -0500
Received: from mail.kernel.org ([198.145.29.99]:39242 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725841AbeLDT3r (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 14:29:47 -0500
Received: from localhost (c-67-164-102-47.hsd1.ca.comcast.net [67.164.102.47])
        (using TLSv1 with cipher ECDHE-RSA-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id D42DC20851;
        Tue,  4 Dec 2018 19:29:45 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543951786;
        bh=Lv08ZrKz7g1AkPNI7rou+L8IpyiZP+dfjoilDHxS+rU=;
        h=Date:From:To:cc:Subject:In-Reply-To:References:From;
        b=lGXuJuWI3cdl88KjwyT1AvuJQuyrE+SaJKyQc/Pq5lzgwgvj0l92avrGQjW8xD5wz
         jzvNVxhIPNFsZqNEHDtPSVnW/IQyfh9NpzH1LOnLeFXZ8CbaqaL0GfjJ+VObrliVdB
         EP7m9BpxgTxbta+4gSAo8lSO5/IEvWJ9Ny6R0q2o=
Date: Tue, 4 Dec 2018 11:29:45 -0800 (PST)
From: Stefano Stabellini <sstabellini@kernel.org>
X-X-Sender: sstabellini@sstabellini-ThinkPad-X260
To: Wen Yang <wen.yang99@zte.com.cn>
cc: boris.ostrovsky@oracle.com, jgross@suse.com,
        sstabellini@kernel.org, xen-devel@lists.xenproject.org,
        linux-kernel@vger.kernel.org, zhong.weidong@zte.com.cn,
        wang.yi59@zte.com.cn, Julia Lawall <julia.lawall@lip6.fr>
Subject: Re: [PATCH v5] pvcalls-front: Avoid get_free_pages(GFP_KERNEL) under
 spinlock
In-Reply-To: <1543907757-21647-1-git-send-email-wen.yang99@zte.com.cn>
Message-ID: <alpine.DEB.2.10.1812041127030.527@sstabellini-ThinkPad-X260>
References: <1543907757-21647-1-git-send-email-wen.yang99@zte.com.cn>
User-Agent: Alpine 2.10 (DEB 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 4 Dec 2018, Wen Yang wrote:
> The problem is that we call this with a spin lock held.
> The call tree is:
> pvcalls_front_accept() holds bedata->socket_lock.
>     -> create_active()
>         -> __get_free_pages() uses GFP_KERNEL
> 
> The create_active() function is only called from pvcalls_front_accept()
> with a spin_lock held, The allocation is not allowed to sleep and
> GFP_KERNEL is not sufficient.
> 
> This issue was detected by using the Coccinelle software.
> 
> v2: Add a function doing the allocations which is called
>     outside the lock and passing the allocated data to
>     create_active().
> 
> v3: Use the matching deallocators i.e., free_page()
>     and free_pages(), respectively.
> 
> v4: It would be better to pre-populate map (struct sock_mapping),
>     rather than introducing one more new struct.
> 
> v5: Since allocating the data outside of this call it should also
>     be freed outside, when create_active() fails.
>     Move kzalloc(sizeof(*map2), GFP_ATOMIC) outside spinlock and
>     use GFP_KERNEL instead.
> 
> Suggested-by: Juergen Gross <jgross@suse.com>
> Suggested-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
> Suggested-by: Stefano Stabellini <sstabellini@kernel.org>
> Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
> CC: Julia Lawall <julia.lawall@lip6.fr>
> CC: Boris Ostrovsky <boris.ostrovsky@oracle.com>
> CC: Juergen Gross <jgross@suse.com>
> CC: Stefano Stabellini <sstabellini@kernel.org>
> CC: xen-devel@lists.xenproject.org
> CC: linux-kernel@vger.kernel.org
> ---
>  drivers/xen/pvcalls-front.c | 83 +++++++++++++++++++++++++++----------
>  1 file changed, 61 insertions(+), 22 deletions(-)
> 
> diff --git a/drivers/xen/pvcalls-front.c b/drivers/xen/pvcalls-front.c
> index 77224d8f3e6f..5fd764a7b879 100644
> --- a/drivers/xen/pvcalls-front.c
> +++ b/drivers/xen/pvcalls-front.c
> @@ -335,6 +335,41 @@ int pvcalls_front_socket(struct socket *sock)
>  	return ret;
>  }
>  
> +static void free_active_ring(struct sock_mapping *map)
> +{
> +	free_pages((unsigned long)map->active.data.in,
> +			map->active.ring->ring_order);
> +	free_page((unsigned long)map->active.ring);
> +}
> +
> +static int alloc_active_ring(struct sock_mapping *map)
> +{
> +	void *bytes;
> +
> +	map->active.ring = NULL;

This is superfluous

Aside from this:

Acked-by: Stefano Stabellini <sstabellini@kernel.org>


> +	map->active.data.in = NULL;
> +	map->active.ring = (struct pvcalls_data_intf *)
> +		get_zeroed_page(GFP_KERNEL);
> +	if (!map->active.ring)
> +		goto out;
> +
> +	map->active.ring->ring_order = PVCALLS_RING_ORDER;
> +	bytes = (void *)__get_free_pages(GFP_KERNEL | __GFP_ZERO,
> +					PVCALLS_RING_ORDER);
> +	if (!bytes)
> +		goto out;
> +
> +	map->active.data.in = bytes;
> +	map->active.data.out = bytes +
> +		XEN_FLEX_RING_SIZE(PVCALLS_RING_ORDER);
> +
> +	return 0;
> +
> +out:
> +	free_active_ring(map);
> +	return -ENOMEM;
> +}
> +
>  static int create_active(struct sock_mapping *map, int *evtchn)
>  {
>  	void *bytes;
> @@ -343,15 +378,7 @@ static int create_active(struct sock_mapping *map, int *evtchn)
>  	*evtchn = -1;
>  	init_waitqueue_head(&map->active.inflight_conn_req);
>  
> -	map->active.ring = (struct pvcalls_data_intf *)
> -		__get_free_page(GFP_KERNEL | __GFP_ZERO);
> -	if (map->active.ring == NULL)
> -		goto out_error;
> -	map->active.ring->ring_order = PVCALLS_RING_ORDER;
> -	bytes = (void *)__get_free_pages(GFP_KERNEL | __GFP_ZERO,
> -					PVCALLS_RING_ORDER);
> -	if (bytes == NULL)
> -		goto out_error;
> +	bytes = map->active.data.in;
>  	for (i = 0; i < (1 << PVCALLS_RING_ORDER); i++)
>  		map->active.ring->ref[i] = gnttab_grant_foreign_access(
>  			pvcalls_front_dev->otherend_id,
> @@ -361,10 +388,6 @@ static int create_active(struct sock_mapping *map, int *evtchn)
>  		pvcalls_front_dev->otherend_id,
>  		pfn_to_gfn(virt_to_pfn((void *)map->active.ring)), 0);
>  
> -	map->active.data.in = bytes;
> -	map->active.data.out = bytes +
> -		XEN_FLEX_RING_SIZE(PVCALLS_RING_ORDER);
> -
>  	ret = xenbus_alloc_evtchn(pvcalls_front_dev, evtchn);
>  	if (ret)
>  		goto out_error;
> @@ -385,8 +408,6 @@ static int create_active(struct sock_mapping *map, int *evtchn)
>  out_error:
>  	if (*evtchn >= 0)
>  		xenbus_free_evtchn(pvcalls_front_dev, *evtchn);
> -	free_pages((unsigned long)map->active.data.in, PVCALLS_RING_ORDER);
> -	free_page((unsigned long)map->active.ring);
>  	return ret;
>  }
>  
> @@ -406,17 +427,24 @@ int pvcalls_front_connect(struct socket *sock, struct sockaddr *addr,
>  		return PTR_ERR(map);
>  
>  	bedata = dev_get_drvdata(&pvcalls_front_dev->dev);
> +	ret = alloc_active_ring(map);
> +	if (ret < 0) {
> +		pvcalls_exit_sock(sock);
> +		return ret;
> +	}
>  
>  	spin_lock(&bedata->socket_lock);
>  	ret = get_request(bedata, &req_id);
>  	if (ret < 0) {
>  		spin_unlock(&bedata->socket_lock);
> +		free_active_ring(map);
>  		pvcalls_exit_sock(sock);
>  		return ret;
>  	}
>  	ret = create_active(map, &evtchn);
>  	if (ret < 0) {
>  		spin_unlock(&bedata->socket_lock);
> +		free_active_ring(map);
>  		pvcalls_exit_sock(sock);
>  		return ret;
>  	}
> @@ -780,25 +808,36 @@ int pvcalls_front_accept(struct socket *sock, struct socket *newsock, int flags)
>  		}
>  	}
>  
> -	spin_lock(&bedata->socket_lock);
> -	ret = get_request(bedata, &req_id);
> -	if (ret < 0) {
> +	map2 = kzalloc(sizeof(*map2), GFP_KERNEL);
> +	if (map2 == NULL) {
>  		clear_bit(PVCALLS_FLAG_ACCEPT_INFLIGHT,
>  			  (void *)&map->passive.flags);
> -		spin_unlock(&bedata->socket_lock);
> +		pvcalls_exit_sock(sock);
> +		return -ENOMEM;
> +	}
> +	ret = alloc_active_ring(map2);
> +	if (ret < 0) {
> +		clear_bit(PVCALLS_FLAG_ACCEPT_INFLIGHT,
> +				(void *)&map->passive.flags);
> +		kfree(map2);
>  		pvcalls_exit_sock(sock);
>  		return ret;
>  	}
> -	map2 = kzalloc(sizeof(*map2), GFP_ATOMIC);
> -	if (map2 == NULL) {
> +	spin_lock(&bedata->socket_lock);
> +	ret = get_request(bedata, &req_id);
> +	if (ret < 0) {
>  		clear_bit(PVCALLS_FLAG_ACCEPT_INFLIGHT,
>  			  (void *)&map->passive.flags);
>  		spin_unlock(&bedata->socket_lock);
> +		free_active_ring(map2);
> +		kfree(map2);
>  		pvcalls_exit_sock(sock);
> -		return -ENOMEM;
> +		return ret;
>  	}
> +
>  	ret = create_active(map2, &evtchn);
>  	if (ret < 0) {
> +		free_active_ring(map2);
>  		kfree(map2);
>  		clear_bit(PVCALLS_FLAG_ACCEPT_INFLIGHT,
>  			  (void *)&map->passive.flags);
> -- 
> 2.19.1
> 
