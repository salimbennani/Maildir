Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:38:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6E145580375;
	Tue,  4 Dec 2018 05:01:17 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 04 Dec 2018 05:01:16 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ArTK97B19eorPf2CVsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSLv/xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPH4Gz?=
 =?us-ascii?q?YYgBD+UPMulXs5L9p0MMoBalGQmgGPnixiNUinLsw6E31fkqHwHc3AwnGtIDqH?=
 =?us-ascii?q?ParNTvNKcVSuC1yLPHzSveZP5Lxzj97pbHcgs8qvyLWLJ/atTeyU8xGAPelViQ?=
 =?us-ascii?q?spHlPyiL2egXr2ea7vNtWOSygGAkswF8uiajytsoh4XTm44YxE7I+T9kzIs2Od?=
 =?us-ascii?q?G0Uk92bNy8HJdNsyyXN5F6Tt4sTmxooio21KMKtYKhcCQUyJkqyBjSYOGdfYeS?=
 =?us-ascii?q?+BLsTuORLC94hH17fLK/gA6/8VavyuLiTMm4ylVKoTRfktnKqH8N0wbf6s+dSv?=
 =?us-ascii?q?ty5kuh2DCP2B7P6uxcP0w4ia7WJ4Q8zrM+iJYfq1nPEyzqlEnsjaKbdF0o+u2y?=
 =?us-ascii?q?5OTmZrXmqIWcN4hxigzmNqQum8q/Afk3MwQXXGiU5/681Lv98k39WblKifM3kq?=
 =?us-ascii?q?/Hv5DAPskbuKG5DBFP0oo56BawES2m0NIGknkDNl5FfwiHj4fxN1HUPP/4Feu/?=
 =?us-ascii?q?g0irkDpzw/DGP77hDYvXInnMjbfsZrJ9609ayAouwtFT/ZNUCrcdIP3tXk/9rs?=
 =?us-ascii?q?DXDhg8Mwas2eboFM191p8CWWKIGqKZMLndsV6U5u01JOmAfo8VuCvnJPgj6P7j?=
 =?us-ascii?q?lns5mV4bfam00pobcnG4HvJ6I0qHZXrgmMsOEWAPvgAmVuzllEWCUSJPZ3a1R6?=
 =?us-ascii?q?885DY7B5y8AYfAQYCthrqB3CCgE51SZ2BGDE2MEHjye4WFXfcMdDydIst7njMY?=
 =?us-ascii?q?UrihTpcr1Quyuw/i17pnMu3U9zUCupL41Nh14O7TmQso9TNuDcSQyGWNT2Bynm?=
 =?us-ascii?q?MVSD46xqF/oUphylid1ah0meBXFdtW5/lRSAc1KYbcz/BmC9D1Qg/Bfc2GSFC8?=
 =?us-ascii?q?TtWiADE+VNQxw9AVbkZ5GtWiiA3D3iWwD78UkbyLGII78qbG03ftIMZ9zm7M1L?=
 =?us-ascii?q?M9gFk+XstPKWqmi7Zi+AfJGY7GjV+Vl6aweqQaxy7C6mGDwW2KvEFbVQ5wVb7I?=
 =?us-ascii?q?XXQeZkvQsNT46VnOT76oCbQ7LARBzdSOJbdNat3slV9GXuvsOMzCY2KtnGe9HQ?=
 =?us-ascii?q?uHyamSbIX0YWkd3D/SCE4fkw8N+3aLLgw+Biano2LDAz1iD1PvY0Xw8eZgrHO3?=
 =?us-ascii?q?VFM7zwaPb0d5zbq65gYVheCAS/MUxr8EpCYhqzBzHFah39LXC8CMpxZ7cKVbe9?=
 =?us-ascii?q?M95FZH1WTWtwFmOpygLqZihkMRcghtvkPu0Ql3BZtEkcQwsHwqyw9yI7qC0Fxd?=
 =?us-ascii?q?bzOYwYzwOrrPJ2bo+BCgdaHX1U/e0dqM4agP9ek3pE/lvAGqEUoi7W5q091U03?=
 =?us-ascii?q?ua+5XLAxAeUZP3UkYr6Rd6o6vWbTU654PRzXdsK7W7sife29I1A+so0hahf8pF?=
 =?us-ascii?q?PKyYDgPzEs0aCNKoKOwlgFWpahMEPOZP9K87Jc+mdv2G2LK1M+Zkhj6pkWNH4I?=
 =?us-ascii?q?Vl2EKW6yV8UvLI34oCw/yAxAuHVivzg027ss/qnoBIfzcSEXSlySjlHYJeerd9?=
 =?us-ascii?q?fYIWBmiwOc23wdN+ioXpW35Z8l6jGlwH1NWoeRqUc1zywwlQ2V4LrnygnCuy1y?=
 =?us-ascii?q?Z0nC0xrqqDwCzOxPzvdRoGOmJRRGhul0zsIZWyj90BWEiobg4plAaq5Ergxqhb?=
 =?us-ascii?q?orh/IHfXQUtSYyf2KGRiWLOqtrWee85P9I8osSJPXeS+e1+aUL39oxgd0y/5BG?=
 =?us-ascii?q?tR3jM7dzKrupX/gRN6jnmQLHJyrHrfZMFxyg3T5N3aRf5NwDUGQDN0hiXQBli5?=
 =?us-ascii?q?J9Op58mbl4/fsuCiUGKsTp1SfjPszY+atiu75GtqDAa7n/CynN3nDAc73TX619?=
 =?us-ascii?q?lsSSXHshL8bpP32KS9NOJtZlNoC0Pk68pmBoF+lZM9hJIK1ngbnJmV/WcHnn31?=
 =?us-ascii?q?MdVUwq/+aHsNRTgWw9/a+gTl2UtjLm6XyIL9THmS3sxhZ9yiaGMMxi0999xKCL?=
 =?us-ascii?q?uT7LFcmCt1o1m4ohjLbflzgDgd0ucu52AAg+4SpgUt1CqdD6sWHUlZOyzsihuJ?=
 =?us-ascii?q?48q/rKVReGagb7yw2FBiktCmCbGIuhtcV2rhepc+AS9w6d1yME7L0H328I3lec?=
 =?us-ascii?q?PfbdQOth2PiBfAjvNYKJYwlvoMmCpmNnjxvXwjy+4nkxNu2Yu2s5SAK2Vo5Ki5?=
 =?us-ascii?q?GAJXNiXpZ8MP/THglb1RkdyR34CrA5VtADELXIbzQPKsETISs+nnNgmUHD09rH?=
 =?us-ascii?q?ebBaTQHQuF5Eh6qHLPFoihN2uLK3kB0dViWB6dKVRdgA8OWTU1gIU5Ghq2xMD7?=
 =?us-ascii?q?c0d5+zMR5kP+qhRW0eJlLB3/UmbZpAe1ZTY4UpmfLBxK7g5c40fZK9CR7uV2Hy?=
 =?us-ascii?q?tA5J2usBSNKnCHZwRPFWwIWkuEB036Prmz/9bA9fKUBvG5L/vIbrWDsuheV/aO?=
 =?us-ascii?q?xZKy3Ypq5TeMNsOTPnZ8C/03wFZMXXd8G87BgTUAVzQXlz7Rb86cvBq8+jN4rs?=
 =?us-ascii?q?G88PToWQLj/4iPC6FVMdVg5R+2m7qDN/WLiSZ9KDZY0I4MxHDSxLge2l4Slz9h?=
 =?us-ascii?q?dz23Hbscsi7NSbramrVLAB4DdyNzKMxI4rom0QlQIsHbkM36175igv4xCldITl?=
 =?us-ascii?q?jhmsCvZcwXLGCxLlLHBECXNLuYIT3H2d34YaS5SbdIluVbqwWwuSqHE0/kJjmD?=
 =?us-ascii?q?izjpVxW1Pe5Qli2UIBxet5+7cht2DWjjTdTmagC0MdNtjD02x6E0iW3ONWIGLT?=
 =?us-ascii?q?d8dEZNpKWK7SxEmvV/B3BB7n19IOiEgSmZ6ezYKpcQsfRzAyV0l/hV4HI1y7ZO?=
 =?us-ascii?q?6CFERfp1mDbdr9J0olGmlPWPxSRjUBZUtjlLg4eL7g1ePvDh+4VaEVPA9R4A7i?=
 =?us-ascii?q?3EExEOrtdoCfX0prtdjNPIkfSgBi1F9ofx/NEbHMzdNoqtPXwsKlK9HTTZCgYe?=
 =?us-ascii?q?ZSW2LmyZjF4Lw6LazWGcspVv8suko5EJULIOEQVtTv4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAABKegZch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBAYFZghEUE4wSjA6BaCUUlzUUgWIpEwGIESI0CQ0BAwEBAQEBAQI?=
 =?us-ascii?q?BEwEBAQoLCQgpL0IBEAGBYiQBgmIBAgIBAQIkEzoFBQEJAQEKDiYSA1QGEwUUg?=
 =?us-ascii?q?wiBeggEAaVEM4hagVmMHheBQD+BRIJfhGmFcwKJHw4EDxcCgUeEEYFNjnRVCZF?=
 =?us-ascii?q?BGIlmh0CaO4INMxoIMDuCbIM9AQGNHT8ygQUBAYVshSYBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ARAABKegZch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBAYF?=
 =?us-ascii?q?ZghEUE4wSjA6BaCUUlzUUgWIpEwGIESI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL?=
 =?us-ascii?q?0IBEAGBYiQBgmIBAgIBAQIkEzoFBQEJAQEKDiYSA1QGEwUUgwiBeggEAaVEM4h?=
 =?us-ascii?q?agVmMHheBQD+BRIJfhGmFcwKJHw4EDxcCgUeEEYFNjnRVCZFBGIlmh0CaO4INM?=
 =?us-ascii?q?xoIMDuCbIM9AQGNHT8ygQUBAYVshSYBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,314,1539673200"; 
   d="scan'208";a="56001509"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 05:01:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726253AbeLDMzC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 07:55:02 -0500
Received: from mx2.suse.de ([195.135.220.15]:33966 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725767AbeLDMzC (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 07:55:02 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 48588AFC0;
        Tue,  4 Dec 2018 12:54:56 +0000 (UTC)
Date: Tue, 4 Dec 2018 13:54:55 +0100 (CET)
From: Miroslav Benes <mbenes@suse.cz>
To: Petr Mladek <pmladek@suse.com>
cc: Jiri Kosina <jikos@kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Jason Baron <jbaron@akamai.com>,
        Joe Lawrence <joe.lawrence@redhat.com>,
        Evgenii Shatokhin <eshatokhin@virtuozzo.com>,
        live-patching@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH v14 05/11] livepatch: Simplify API by removing registration
 step
In-Reply-To: <20181129094431.7801-6-pmladek@suse.com>
Message-ID: <alpine.LSU.2.21.1812031643120.22317@pobox.suse.cz>
References: <20181129094431.7801-1-pmladek@suse.com> <20181129094431.7801-6-pmladek@suse.com>
User-Agent: Alpine 2.21 (LSU 202 2017-01-01)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Mainly nits below. Overall it looks good.

> The possibility to re-enable a registered patch was useful for immediate
> patches where the livepatch module had to stay until the system reboot.
> The improved consistency model allows to achieve the same result by
> unloading and loading the livepatch module again.
> 
> Also we are going to add a feature called atomic replace. It will allow
> to create a patch that would replace all already registered patches.
> The aim is to handle dependent patches more securely. It will obsolete
> the stack of patches that helped to handle the dependencies so far.
> Then it might be unclear when a cumulative patch re-enabling is safe.
> 
> It would be complicated to support the many modes. Instead we could
> actually make the API and code easier to understand.
> 
> This patch removes the two step public API. All the checks and init calls

I know there are two different meanings of patch used in the changelog and 
you need to distinguish between them. "This patch" however does not look 
good. Could you change the sentence (and probably fix the changelog then a 
bit) to imperative mood? It sounds better anyway. Something like 
"Therefore, remove the two step public API" for example.

> are moved from klp_register_patch() to klp_enabled_patch(). Also the patch
> is automatically freed, including the sysfs interface when the transition
> to the disabled state is completed.
> 
> As a result, there is never a disabled patch on the top of the stack.
> Therefore we do not need to check the stack in __klp_enable_patch().
> And we could simplify the check in __klp_disable_patch().
> 
> Also the API and logic is much easier. It is enough to call
> klp_enable_patch() in module_init() call. The patch patch can be disabled

s/The patch patch/patch/

> by writing '0' into /sys/kernel/livepatch/<patch>/enabled. Then the module
> can be removed once the transition finishes and sysfs interface is freed.
> 
> The only problem is how to free the structures and kobjects a safe way.

s/a safe way/safely/

> The operation is triggered from the sysfs interface. We could not put
> the related kobject from there because it would cause lock inversion
> between klp_mutex and kernfs locks, see kn->count lockdep map.
> 
> This patch solved the problem by offloading the free task to

"This patch" again.

> a workqueue. It is perfectly fine:
> 
>   + The patch cannot not longer be used in the livepatch operations.

s/cannot not longer/can no longer/

>   + The module could not be removed until the free operation finishes
>     and module_put() is called.
> 
>   + The operation is asynchronous already when the first
>     klp_try_complete_transition() fails and another call
>     is queued with a delay.
> 
> Suggested-by: Josh Poimboeuf <jpoimboe@redhat.com>
> Signed-off-by: Petr Mladek <pmladek@suse.com>
> ---
>  Documentation/livepatch/livepatch.txt        | 137 ++++++-------
>  include/linux/livepatch.h                    |   5 +-
>  kernel/livepatch/core.c                      | 275 +++++++++------------------
>  kernel/livepatch/core.h                      |   2 +
>  kernel/livepatch/transition.c                |  19 +-
>  samples/livepatch/livepatch-callbacks-demo.c |  13 +-
>  samples/livepatch/livepatch-sample.c         |  13 +-
>  samples/livepatch/livepatch-shadow-fix1.c    |  14 +-
>  samples/livepatch/livepatch-shadow-fix2.c    |  14 +-
>  9 files changed, 166 insertions(+), 326 deletions(-)
> 
> diff --git a/Documentation/livepatch/livepatch.txt b/Documentation/livepatch/livepatch.txt
> index 2d7ed09dbd59..d849af312576 100644
> --- a/Documentation/livepatch/livepatch.txt
> +++ b/Documentation/livepatch/livepatch.txt
> @@ -12,12 +12,11 @@ Table of Contents:
>  4. Livepatch module
>     4.1. New functions
>     4.2. Metadata
> -   4.3. Livepatch module handling
>  5. Livepatch life-cycle
> -   5.1. Registration
> +   5.1. Loading
>     5.2. Enabling
>     5.3. Disabling
> -   5.4. Unregistration
> +   5.4. Removing
>  6. Sysfs
>  7. Limitations
>  
> @@ -298,117 +297,91 @@ into three levels:
>      see the "Consistency model" section.
>  
>  
> -4.3. Livepatch module handling
> -------------------------------
> -
> -The usual behavior is that the new functions will get used when
> -the livepatch module is loaded. For this, the module init() function
> -has to register the patch (struct klp_patch) and enable it. See the
> -section "Livepatch life-cycle" below for more details about these
> -two operations.
> -
> -Module removal is only safe when there are no users of the underlying
> -functions. This is the reason why the force feature permanently disables
> -the removal. The forced tasks entered the functions but we cannot say
> -that they returned back.  Therefore it cannot be decided when the
> -livepatch module can be safely removed. When the system is successfully
> -transitioned to a new patch state (patched/unpatched) without being
> -forced it is guaranteed that no task sleeps or runs in the old code.

Is the change necessary? The documentation in v13 looked ok and I am not 
sure if it is better now. Only my opinion though and I understand why you 
changed it.

>  5. Livepatch life-cycle
>  =======================
>  
> -Livepatching defines four basic operations that define the life cycle of each
> -live patch: registration, enabling, disabling and unregistration.  There are
> -several reasons why it is done this way.
> -
> -First, the patch is applied only when all patched symbols for already
> -loaded objects are found. The error handling is much easier if this
> -check is done before particular functions get redirected.
> +Livepatching can be described by four basic operations:
> +loading, enabling, disabling, removing.
>  
> -Second, it might take some time until the entire system is migrated with
> -the hybrid consistency model being used. The patch revert might block
> -the livepatch module removal for too long. Therefore it is useful to
> -revert the patch using a separate operation that might be called
> -explicitly. But it does not make sense to remove all information until
> -the livepatch module is really removed.
>  
> +5.1. Loading
> +------------
>  
> -5.1. Registration
> ------------------
> +The only reasonable way is to enable the patch when the livepatch kernel
> +module is being loaded. For this, klp_enable_patch() has to be called
> +in module_init() callback. There are two main reasons:
>  
> -Each patch first has to be registered using klp_register_patch(). This makes
> -the patch known to the livepatch framework. Also it does some preliminary
> -computing and checks.
> +First, only the module has an easy access to the related struct klp_patch.
>  
> -In particular, the patch is added into the list of known patches. The
> -addresses of the patched functions are found according to their names.
> -The special relocations, mentioned in the section "New functions", are
> -applied. The relevant entries are created under
> -/sys/kernel/livepatch/<name>. The patch is rejected when any operation
> -fails.
> +Second, the error code might be used to refuse loading the module when
> +the patch cannot get enabled.
>  
>  
>  5.2. Enabling
>  -------------
>  
> -Registered patches might be enabled either by calling klp_enable_patch() or
> -by writing '1' to /sys/kernel/livepatch/<name>/enabled. The system will
> -start using the new implementation of the patched functions at this stage.
> +The livepatch gets enabled by calling klp_enable_patch() typically from
> +module_init() callback. The system will start using the new implementation
> +of the patched functions at this stage.

5.1 is now saying that klp_enable_patch() has to be called in 
module_init() callback and we should be consistent.

> @@ -309,40 +297,33 @@ static ssize_t enabled_store(struct kobject *kobj, struct kobj_attribute *attr,
>  
>  	mutex_lock(&klp_mutex);
>  
> -	if (!klp_is_patch_registered(patch)) {
> -		/*
> -		 * Module with the patch could either disappear meanwhile or is
> -		 * not properly initialized yet.
> -		 */
> -		ret = -EINVAL;
> -		goto err;
> -	}
> -
>  	if (patch->enabled == enabled) {
>  		/* already in requested state */
>  		ret = -EINVAL;
> -		goto err;
> +		goto out;
>  	}
>  
> -	if (patch == klp_transition_patch) {
> +	/*
> +	 * Allow to reverse a pending transition in both ways. It might be
> +	 * necessary to complete the transition without forcing and breaking
> +	 * the system integrity.
> +	 *
> +	 * Do not allow to re-enable a disabled patch because this interface
> +	 * is being destroyed.

A nit, but I think the second part is not necessary and may be confusing.

"Do not allow to re-enable a disabled patch." should be sufficient.

Regards,
Miroslav
