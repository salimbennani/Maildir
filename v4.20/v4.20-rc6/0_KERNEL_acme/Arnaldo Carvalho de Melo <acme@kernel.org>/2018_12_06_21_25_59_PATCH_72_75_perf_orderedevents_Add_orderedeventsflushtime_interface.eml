Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:54:05 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2FD9B5804F9;
	Thu,  6 Dec 2018 13:32:41 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga008-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 13:32:41 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aasn1FxVseY+9rZ+6fmUWVv/hSkbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGGuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohSiCgesH/vvxz1Ti3/q3qA3yfgtHBva0AEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe240LPIzTPZYPNSxDj975XDfw47rvGWQ7J/a87RyUkoFwjYk1qf?=
 =?us-ascii?q?t5HuMTSL2eQJtGiQ8u1tWvizhG4itQ58uTuvydk2ionPmI0VzkrI9SJjwIY6PN?=
 =?us-ascii?q?C1TlNwb9CjEJtVrS6aNo12T9shQ252oiY6zKMJuZqhcCgN0pQnyBjSYOGEfYiQ?=
 =?us-ascii?q?+h/vSvqdLDNiiH54dr+zmQy+/VWjx+HgTMW50VRHojJYntTOsn0BzQHf58uFR/?=
 =?us-ascii?q?dn40us1yyD2x7N5uxKJ00/iLDVJIQ7wrEqk5oeqUTDETHymEXxlKKWaEok9fay?=
 =?us-ascii?q?6+j9YbXpuIWcN4lqhQH6KKgunda/AesgPggPWWiU5/i82aX98UHlRLhGlOA6n6?=
 =?us-ascii?q?fHvJzAOMgWpbK1DxVU34sh8xq/Ci2p0NUcnXkJNlJFfxeHgpDtO1HPJvD4EPi+?=
 =?us-ascii?q?j02vkDh13fDGOKPuApHUInjEnrbhe6hy61RHxQotwtBQ+YhUBqsCIP3tQE/xss?=
 =?us-ascii?q?LXDhsjPwyz2ebnB81x1pkCVmKXHq+ZLKTSvEeM5uIuIOmDepUZuTngK/U+4/7u?=
 =?us-ascii?q?jHk5mUISfKWz3JsXbmy4EepiI0mDfXXshdIBG38QvgUiVOzqlEGCUTlLanayRa?=
 =?us-ascii?q?085y07B5ihDYvZRoCtnaaO3CG0HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJLh09h6+ffflRI19TxyCcSd1HqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZs2GSE2m?=
 =?us-ascii?q?QtWhAjE9VMgxzMUMY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gjQHYHJlV+Vl6KrdasG2i7N+3yOzW6PvEFeTQ5xXr/J?=
 =?us-ascii?q?XXEZZkvKs9v54lnOQKOpCbQiKgFB09KNKrNWat31ilVLXOrsN87AY22vgWuwBQ?=
 =?us-ascii?q?yHxrWXbIX0fWUR2yHdCEsBkwAX5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4Lw70LojkhpCtuEFa9xd3WDcGAqBRnfKhHZd?=
 =?us-ascii?q?M94VFH1X/WtgBnP5ygKbxiiUAacwhto0zu0BB3AJ1akcc2tHMq0BZyKaWA3VNd?=
 =?us-ascii?q?djOY2JfwOqHXKmjy5hyvd7Ta2lbE0NaS+6cP7vs4pk7nvAGoEEoi7npm38NU03?=
 =?us-ascii?q?ua+pXFEg4SXYjtXUYw8hhwv6vabTUl54PIyX1sNrG5vSXG2903C+oq1Bahc81E?=
 =?us-ascii?q?P6OZCQD9CcsaB8upKOw0gFWpahMEPOZP9K87Jc+mdv2G2LK1M+Zkhj6pkWNH4I?=
 =?us-ascii?q?Vl2EKW6yV8UvLI34oCw/yA3gqHSi3wg0u7vsH2mYBLfzcSHmWkxCjgBY5RYLBy?=
 =?us-ascii?q?fIkRBWevJc232stxh5r3V3FE816jAksM2NW1dhqKc1z9wQpQ2FwNoXymhSS31S?=
 =?us-ascii?q?Z0nCwurqaF2izB3f7idBseNmFXXmZiiUrjLpauj9AdWkildAwplBqj5UbnyKlX?=
 =?us-ascii?q?vqV/L2/PQUhWeyj6NX1tUqy1trCaec5A9IsosTlLUOS7eV2bSr/9rwEa0i/5BG?=
 =?us-ascii?q?te2TY7eiquupX4mRx6lW2cIGxyrHrfZcF/2xPf6MbASv5W2zoMXDN4hiXPBlig?=
 =?us-ascii?q?I9mp+s2Zl5XZveCkVGKhVZpTfTPwzYyatyu75mxqARuhkPC1gdDnFQk60Snm19?=
 =?us-ascii?q?hlTynIrRD8YpX12KS+K+5oYk5oBFrk4cpgBo5+ipcwhI0X2XUChpSa530HnX3x?=
 =?us-ascii?q?MdVa36Lzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1oUC3rQPLbfh9gzcS0/0u6HEBjuENuQotyDidA78IEUlZOyzsiwqH?=
 =?us-ascii?q?79SkoKpLY2avdKC61FBiktC5ELGCvgZcVW78epcjHi9/9N9zMVzS333o9oHrZs?=
 =?us-ascii?q?PQYskNuR2OnBfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jztkaFensOM04GuBJphHCgLXIDzTfKpCz8SsfXnNwCTEDwzsH?=
 =?us-ascii?q?ubGLzfHROB50ditX7AD5erN3SPLnkD0dpiXAWdJFBYgA0MRzo1hJk5FgS3xMD7?=
 =?us-ascii?q?dEd5+ysc5lr5qhtK1+JpOAPzUmbZpAe0dDg0TIKTIwZR7gFH/03VK9CR7vpvHy?=
 =?us-ascii?q?FE+Z2stA6NJXaeZwtWFmEFQFCEC0rgPrmz5tnA7u6YCfClL/bVZbWOqOpeV+qH?=
 =?us-ascii?q?xJ6104tm+SqMOduLPnV4E/I73U9DV2hjG8vFgzUPVzAXlyXVYs+boxe85zR3rt?=
 =?us-ascii?q?2l//TtQg7v/oyPC71dMdh0/xC2gKGDN/OfhSpjKDZY0I8MymHMyLQFwFESjCRu?=
 =?us-ascii?q?fSG3EbscrS7NUL7QmqhPAh4bdSxzNchI76E93gVXOs7bkNT11rFmgf4vFldFTk?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyPmVw20PuFWki6aPAZSuIW8cht2DWjjTdTmagC0MdNtjD02x6E0iW3ONWIGLT?=
 =?us-ascii?q?d8dEZNpKWK7SxEmvV/B3BB7n19IOmYmiaZ6vPUJYoMvfR3AiR7ieRa7W8+y7tU?=
 =?us-ascii?q?6iFEWfN0lDHTrt5ov1GpjO2PxiB7XxpJrzZBnJiLsll6OaXF6plAXm7J/RIX4m?=
 =?us-ascii?q?WWDhQKpt1lBcXuuqBQ0NfPkq3zJSxG89LV+8scGsfVJNiGMHonLRrmBjrUABEZ?=
 =?us-ascii?q?Qj6sMGGMz3BaxdCU+Xrdi58+rJH20M4LS7lUU3Q2G+kcB0AjG8YNdsRZRDQhxJ?=
 =?us-ascii?q?eBiscM6X32hxDLWsxevpePWv/aJPjrL37NhLJBajMLzKn+IIBVMZf0jR8xImJm?=
 =?us-ascii?q?lZjHThKDFetGpTdsO0pt+B1A?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAABVlAlch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YFagQ+BAhQTg3qIeIswgg0UiH6JQ4R5gXMUGAsIAYdXIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYgMDAQIgBAsBDQEBNwEFCQEBGAcFAhgOAgIDHjYGD?=
 =?us-ascii?q?AcFglFLAYFpAwgNAgMKpVFwfDOCdgEBBYEwAYNTDYIUCIELhmWDE4EcF4F/gRG?=
 =?us-ascii?q?FaYUugleLJpUNLgmHBIcUgyMLGIIpjw0silOCe4EOigSBRoINTTAIgycJCoIID?=
 =?us-ascii?q?BeIXoVZJjIBAYEDAQGKOgEB?=
X-IPAS-Result: =?us-ascii?q?A0AYAABVlAlch0O0hNFjHgEGBwaBUQkLAYFagQ+BAhQTg3q?=
 =?us-ascii?q?IeIswgg0UiH6JQ4R5gXMUGAsIAYdXIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYgMDAQIgBAsBDQEBNwEFCQEBGAcFAhgOAgIDHjYGDAcFglFLAYFpAwg?=
 =?us-ascii?q?NAgMKpVFwfDOCdgEBBYEwAYNTDYIUCIELhmWDE4EcF4F/gRGFaYUugleLJpUNL?=
 =?us-ascii?q?gmHBIcUgyMLGIIpjw0silOCe4EOigSBRoINTTAIgycJCoIIDBeIXoVZJjIBAYE?=
 =?us-ascii?q?DAQGKOgEB?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="43923403"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 13:32:39 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726658AbeLFVbp (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 16:31:45 -0500
Received: from mail.kernel.org ([198.145.29.99]:49670 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726109AbeLFVbL (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 16:31:11 -0500
Received: from quaco.ghostprotocols.net (179.187.13.223.dynamic.adsl.gvt.net.br [179.187.13.223])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 1C62120989;
        Thu,  6 Dec 2018 21:31:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1544131871;
        bh=EAyq0f+4B4VNW72bY1+/dzBcCl6FAgcUTswW27MGOQA=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=DsbBINSd4yvmvcYX1VuRRntBvV/VF28a+gs5UpHegWU0x//vyS8PL55KmUV8KaBH9
         W61ePXslfBuunXRTd9EecE7kvjvUaf0d0BchcD/etVnwrqwj03mUROXMgKAP+SLCq3
         hLw58QR1p3cGiu9MvRohzPQ2D6wiAEMaCv+89AtU=
From: Arnaldo Carvalho de Melo <acme@kernel.org>
To: Ingo Molnar <mingo@kernel.org>
Cc: Clark Williams <williams@redhat.com>, linux-kernel@vger.kernel.org,
        linux-perf-users@vger.kernel.org, Jiri Olsa <jolsa@kernel.org>,
        Alexander Shishkin <alexander.shishkin@linux.intel.com>,
        Dmitry Levin <ldv@altlinux.org>,
        Eugene Syromiatnikov <esyr@redhat.com>,
        Frederic Weisbecker <fweisbec@gmail.com>,
        =?UTF-8?q?Luis=20Cl=C3=A1udio=20Gon=C3=A7alves?= 
        <lclaudio@uudg.org>, Namhyung Kim <namhyung@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Steven Rostedt <rostedt@goodmis.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Arnaldo Carvalho de Melo <acme@redhat.com>
Subject: [PATCH 72/75] perf ordered_events: Add ordered_events__flush_time interface
Date: Thu,  6 Dec 2018 18:25:59 -0300
Message-Id: <20181206212602.20474-73-acme@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181206212602.20474-1-acme@kernel.org>
References: <20181206212602.20474-1-acme@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Jiri Olsa <jolsa@kernel.org>

Add OE_FLUSH__TIME flush type, to be able to flush only certain amount
of the queue based on the provided timestamp. It will be used in the
following patches.

Link: http://lkml.kernel.org/n/tip-a3na77vemwr1g92lfhlrztg5@git.kernel.org
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Dmitry Levin <ldv@altlinux.org>
Cc: Eugene Syromiatnikov <esyr@redhat.com>
Cc: Frederic Weisbecker <fweisbec@gmail.com>
Cc: Luis Cláudio Gonçalves <lclaudio@uudg.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20181205160509.1168-7-jolsa@kernel.org
[ Fix the build on older systems such as centos 5 and 6 where 'time' shadows a global declaration ]
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/util/ordered-events.c | 23 +++++++++++++++++++----
 tools/perf/util/ordered-events.h |  2 ++
 2 files changed, 21 insertions(+), 4 deletions(-)

diff --git a/tools/perf/util/ordered-events.c b/tools/perf/util/ordered-events.c
index c5412db05683..46965643020b 100644
--- a/tools/perf/util/ordered-events.c
+++ b/tools/perf/util/ordered-events.c
@@ -219,8 +219,7 @@ int ordered_events__queue(struct ordered_events *oe, union perf_event *event,
 	return 0;
 }
 
-static int __ordered_events__flush(struct ordered_events *oe,
-				   bool show_progress)
+static int do_flush(struct ordered_events *oe, bool show_progress)
 {
 	struct list_head *head = &oe->events;
 	struct ordered_event *tmp, *iter;
@@ -263,7 +262,8 @@ static int __ordered_events__flush(struct ordered_events *oe,
 	return 0;
 }
 
-int ordered_events__flush(struct ordered_events *oe, enum oe_flush how)
+static int __ordered_events__flush(struct ordered_events *oe, enum oe_flush how,
+				   u64 timestamp)
 {
 	static const char * const str[] = {
 		"NONE",
@@ -302,6 +302,11 @@ int ordered_events__flush(struct ordered_events *oe, enum oe_flush how)
 		break;
 	}
 
+	case OE_FLUSH__TIME:
+		oe->next_flush = timestamp;
+		show_progress = false;
+		break;
+
 	case OE_FLUSH__ROUND:
 	case OE_FLUSH__NONE:
 	default:
@@ -312,7 +317,7 @@ int ordered_events__flush(struct ordered_events *oe, enum oe_flush how)
 		   str[how], oe->nr_events);
 	pr_oe_time(oe->max_timestamp, "max_timestamp\n");
 
-	err = __ordered_events__flush(oe, show_progress);
+	err = do_flush(oe, show_progress);
 
 	if (!err) {
 		if (how == OE_FLUSH__ROUND)
@@ -328,6 +333,16 @@ int ordered_events__flush(struct ordered_events *oe, enum oe_flush how)
 	return err;
 }
 
+int ordered_events__flush(struct ordered_events *oe, enum oe_flush how)
+{
+	return __ordered_events__flush(oe, how, 0);
+}
+
+int ordered_events__flush_time(struct ordered_events *oe, u64 timestamp)
+{
+	return __ordered_events__flush(oe, OE_FLUSH__TIME, timestamp);
+}
+
 void ordered_events__init(struct ordered_events *oe, ordered_events__deliver_t deliver,
 			  void *data)
 {
diff --git a/tools/perf/util/ordered-events.h b/tools/perf/util/ordered-events.h
index 0c6e26aec0e3..f352af20e167 100644
--- a/tools/perf/util/ordered-events.h
+++ b/tools/perf/util/ordered-events.h
@@ -19,6 +19,7 @@ enum oe_flush {
 	OE_FLUSH__ROUND,
 	OE_FLUSH__HALF,
 	OE_FLUSH__TOP,
+	OE_FLUSH__TIME,
 };
 
 struct ordered_events;
@@ -55,6 +56,7 @@ int ordered_events__queue(struct ordered_events *oe, union perf_event *event,
 			  u64 timestamp, u64 file_offset);
 void ordered_events__delete(struct ordered_events *oe, struct ordered_event *event);
 int ordered_events__flush(struct ordered_events *oe, enum oe_flush how);
+int ordered_events__flush_time(struct ordered_events *oe, u64 timestamp);
 void ordered_events__init(struct ordered_events *oe, ordered_events__deliver_t deliver,
 			  void *data);
 void ordered_events__free(struct ordered_events *oe);
-- 
2.19.2

