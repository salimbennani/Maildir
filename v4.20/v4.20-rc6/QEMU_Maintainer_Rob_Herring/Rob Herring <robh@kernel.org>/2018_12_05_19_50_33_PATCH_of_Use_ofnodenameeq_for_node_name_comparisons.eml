Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 06 Dec 2018 08:58:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DFF145804C1;
	Wed,  5 Dec 2018 11:51:18 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 11:51:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ady/x+h+H1tTMVv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+8TIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfWSJCDI27?=
 =?us-ascii?q?YIQBAPEBPf5aooTmu1cDrgGzCRW2Ce/z1jNFgGL9060g0+QmFAHLxBAuH9UVv3?=
 =?us-ascii?q?/Jrtv6Kr0SUfq0zKnOwjXIcvRb2S366IfTchAsuvKMUqxqccrX10YvExnJjlKK?=
 =?us-ascii?q?qYzqJj6Y0PkGvWuD7+d4S+6jl2oqpxtsrjWh2MsgkJTFi4EJxlze9Ch0wp45Kc?=
 =?us-ascii?q?O3RUJhfNKpEJtduzuHO4dqRs4uWW5ltSI8x7Ybo5C0ZjIKx44ixxPHa/yIbYyI?=
 =?us-ascii?q?4hX7WeaPLjd3mmhldKi8hxms60igzPPzVs2u3FZNtCpFncHAtnEL1xPN9siKUu?=
 =?us-ascii?q?Vx8lul1DqVygze5P9ILVopmafYN5It2L89m5gLvUTGBCD2mUH2jKGMdkUj/+il?=
 =?us-ascii?q?8+DnYrTgpp+BOI54kwL+Pbo0msy5H+s4NhECX2+V+OS6yrLj51b0QKtFjvIoiK?=
 =?us-ascii?q?nVqpPaKtoBpq6/HQBV1pwv6xGlDzepyNgYh2UILEpZeBKbiIjkI1XOIPH7Dfih?=
 =?us-ascii?q?mVitnypryuvCPr3gBJXNM3fCnK3gfbZ7905T1g4zwcpD6JJTD7ELOOjzVVPptN?=
 =?us-ascii?q?zEEh85NBS5w+b9B9V8yoMRQ2WPDrWZMKPPq1CI4O0vLvKIZI8Uvjb9Nvck6+Tv?=
 =?us-ascii?q?jX8/hV8SY62p0YELZ3C/G/RsO1+Zbmb0gtcdDWcKuRIzTO7tiFKcSzJTZHGyX6?=
 =?us-ascii?q?Q65jE8E4+mCYbDRoawgL2Oxiu7H5tWZnxYBVCIC3vna4KEW/IUYiKIPsBhiiAE?=
 =?us-ascii?q?VaSmS4I5zx6urw/6y71kLubO4C0Xr5Dj2cNx5+3SkxEy6DN1A96c02GLU2F7gG?=
 =?us-ascii?q?cISyUq06B4pEx30k2D3rRgg/xECdxT4OtEUgQgOp7a1eB6D9HyVRjHfteGU1um?=
 =?us-ascii?q?RtSmATcsTtM+2dMOYkB9G8m8gRDHxSalH7gVl7mTDpwu7q3cx2TxJ9p6y3veya?=
 =?us-ascii?q?YulUcmTdVVOW2mnKF/8RPTCJDPk0mek6aqdqEc3CrW+WeHzGqOulxYUQFqXaXE?=
 =?us-ascii?q?W3AfelXZrdDj6kzeSL+uDKwtMhFdxs6aNqtKdtrpgE1bS/j5JtTRfXi9m2eqCh?=
 =?us-ascii?q?aO3bODcozqdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs16a0+h4QgvycV/MT37IetCc9sTl0G0y939bXC9qGqApsZ6FcYd?=
 =?us-ascii?q?I74Fda2mPVrQ19Ppq8L698gl4SaRh4v0Tr1x9vEIVPjdAqrG82zAp1Ma+XyldB?=
 =?us-ascii?q?eC2X3J/uOrzbMHL9/A2yZKHM3FHe09GW+rkU5fQ8qlXjuhypF0U4/3Vm1dlVz2?=
 =?us-ascii?q?WT5pHQAAUOVpLxV1499wJmqLHCfik9+4TU2GVsMKmpqDPNx8glBeolyhm6eddf?=
 =?us-ascii?q?P7iJFAvzE80cGsivJ/Ymm1mvbhIYIu9S8LQ4MN+hd/uDwKSrJvpvnCq6jWRb54?=
 =?us-ascii?q?BwyliM9ytgReHSxZYK3vaY0hGBVzjillehs9n7lpxeajEWA2Ww1zLkBIlXZqBp?=
 =?us-ascii?q?eYYLCGGuI9C4x9lkhp7tXWJY+0CnB18cxMCpfh+SZUTn3QJMzUQXvWCnmSygwj?=
 =?us-ascii?q?10kjEltKqe0DbVw+T/choKIWpLRGhkjVfxLom4ldEaXE60bwc3kBup/1r1x69e?=
 =?us-ascii?q?pK5nNWncXV9IfzTqL2FlSqawtKCNY9RM6JMrtiVbSv+8bkqZSr7+ohsa1T3sH2?=
 =?us-ascii?q?1FyTA/djGqvIj5nhNghGKcKnZzsGTWecVqyRjD49zcQOZb3iAaSylglTnXGl+8?=
 =?us-ascii?q?MsGp/NqOkJfPqOK+V2OnVpBIdSnrzIWAtDa05GFwAB2/meyzlcPjEQQgzSD70N?=
 =?us-ascii?q?xqXz3SrBngeonry7i6MeV/c0lrHlD86tB2GoFjkoQqgpEQ1mMXhpGU/XoBjGfy?=
 =?us-ascii?q?Ps9X2aP4bHoRWzELx8TZ7xTi2E1mNniJ3Z72Vm2Bwst9YNm3emYW2iM+789QEq?=
 =?us-ascii?q?uV4qJLnTBpolWmtwLeeuZyni0SyfY17H4agucJuBcizymHA7ASG1VYMjLolxiS?=
 =?us-ascii?q?89++q6BXbn61cbeszEp+gcyhDLaarwFAX3b5f40uHC5q4cV5LVLMy2bz6oD/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bqi?=
 =?us-ascii?q?DRFCMT31Y94T9ivpjaZDhcuW24GvHpN8GjQERpfoTPSoEC4MuvTjLQqBDDo8qn?=
 =?us-ascii?q?KDE7rFAQCf8Ftmr27IE52zNXGYPnwZwst5RBWHOExTmgMUXCg5np4kEACl3tfh?=
 =?us-ascii?q?fVx95jAQ4F74txRNxvhpNxn5TmfQugOoZi0oR5iYKRpc9htC6FvNMcyC8uJzGD?=
 =?us-ascii?q?lV/52mrAyQM2ybeh5HDWcTVkyfAFDjOLau6MLE8+iZAOq+MvTPba+PqexYS/eH?=
 =?us-ascii?q?25av3pF68DaLM8WFJmNiAOEj2kpfQXB5HNzUmzURRCwWlCLNbM+bqA2/+i1tqc?=
 =?us-ascii?q?C//+rkWBjy5YuUELZSNdRv+xargaaMLeKQhSB5KSpG2ZMI33PH1L8f3FsKgSF0?=
 =?us-ascii?q?azatCagAtTLKTK/IgKBXEgUUazltO8pI9a482ghNNNXfitP00L54k/E0B01EVV?=
 =?us-ascii?q?znhsGme8gKL3uhO1PAAUaBLK6GKiHTw8HrfaO8TqVdjPlVtx21ozqUD1XvMSiD?=
 =?us-ascii?q?lzb3URCiKuVMjCCdPBxDt4CxaBdtCW7/TN34bh23KsN4jTozwbcsnHPFKXYcMS?=
 =?us-ascii?q?Rgc0NKtrCR7TlXgvN6G2xA6HpqNeiFmyaD4OneJZYbqv9rAiVyl+JH73U20bpV?=
 =?us-ascii?q?7CdYRPNrnCvetMJho1ajkrrH9j0yXBdQqz1GmJiGsG18NqjDsJpNQ3DJ+FQK92?=
 =?us-ascii?q?rUQxALocZ1T97ioaZdzvDRm6/pbjRP6dTZ+Y0bHceHBtiANS8bNhChODPOFgoD?=
 =?us-ascii?q?Qnb/L2bVh2ReneuU+3nTqYI1/Mu/0KESQ6NWAQRmXsgRDV5oSZlbeM96?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAB+Kwhch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBJfiy+CIYh+jjqBcxIBARgTAYdTIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkvgjYkAYJpAiQLAUYGCQI+EgMeEwEFASMSBYMcgWoDFQWabTyMC?=
 =?us-ascii?q?TMUhSyCQQ2CHBKHXYQvF4FAP4ERhWmIBQKPNXyPdy4JgiSLcIMjCxiJYIdOASy?=
 =?us-ascii?q?IXYV2iVgCBAIEBQIFDyGBJYINTTAIO4JsgicXjjwhMoEFAQGKUgEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAB+Kwhch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBJfiy+CIYh+jjqBcxIBARgTAYdTIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkvg?=
 =?us-ascii?q?jYkAYJpAiQLAUYGCQI+EgMeEwEFASMSBYMcgWoDFQWabTyMCTMUhSyCQQ2CHBK?=
 =?us-ascii?q?HXYQvF4FAP4ERhWmIBQKPNXyPdy4JgiSLcIMjCxiJYIdOASyIXYV2iVgCBAIEB?=
 =?us-ascii?q?QIFDyGBJYINTTAIO4JsgicXjjwhMoEFAQGKUgEB?=
X-IronPort-AV: E=Sophos;i="5.56,319,1539673200"; 
   d="scan'208";a="55079885"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 11:51:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728774AbeLETvO (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 14:51:14 -0500
Received: from mail-ot1-f68.google.com ([209.85.210.68]:40315 "EHLO
        mail-ot1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728754AbeLETvL (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 14:51:11 -0500
Received: by mail-ot1-f68.google.com with SMTP id s5so19788007oth.7;
        Wed, 05 Dec 2018 11:51:11 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=d+fSGn4OllWf4hAbOO3XQLLQL9DSPKaKdUubSPAsM7g=;
        b=c4rmy2X0uvWE1JC2nFi3hLfyG+vXw6Id8xI/y7X4giSmlXPelpO/IBKB0C+d/o+lRM
         jykcAY7tiL4joxkrZFSufNxl7D5Ox7Kx43I2/+QEYuAj7gkBGgxBGHTkh7Pm2aAWQaKm
         /5CqdjRadwyePjpEUvEG7GVJdF0KJ7yVuShgJj14TdlCbDAknYDf49OZolt7lBcybtPQ
         s5d33mCduiNZyayg5eggDXIak8gttNA0Nx1C7HK0RgM4eybcy6esjasXRfj29WJXM0H8
         jSGFEfa7xgHi9mSzgMP3uHeOE7a8XxRwO/F0Wh4YGMgOYXjDEYDKnhYiBhMKmo5ate1L
         KfOQ==
X-Gm-Message-State: AA+aEWb5mFYDI+EZxIIV87yjK58Ta5OmUzQKL2ec/MqdPXoY1vWbaJGL
        47ic+YppxB60nZFTBKFIgCZY3Z8=
X-Google-Smtp-Source: AFSGD/WL88zYejmq+v6vyM+oncOvEeTWh9wHe8KjzEaX2N0i3ogfqPz66ZzO/IaAdswV8JauUxYGxw==
X-Received: by 2002:a9d:17ca:: with SMTP id j68mr15245617otj.268.1544039470271;
        Wed, 05 Dec 2018 11:51:10 -0800 (PST)
Received: from xps15.herring.priv (24-155-109-49.dyn.grandenetworks.net. [24.155.109.49])
        by smtp.googlemail.com with ESMTPSA id k13sm25759879otj.19.2018.12.05.11.51.09
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 05 Dec 2018 11:51:09 -0800 (PST)
From: Rob Herring <robh@kernel.org>
To: devicetree@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: Frank Rowand <frowand.list@gmail.com>,
        Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Subject: [PATCH] of: Use of_node_name_eq for node name comparisons
Date: Wed,  5 Dec 2018 13:50:33 -0600
Message-Id: <20181205195050.4759-17-robh@kernel.org>
X-Mailer: git-send-email 2.19.1
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Convert string compares of DT node names to use of_node_name_eq helper
instead. This removes direct access to the node name pointer.

Cc: Frank Rowand <frowand.list@gmail.com>
Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Cc: devicetree@vger.kernel.org
Signed-off-by: Rob Herring <robh@kernel.org>
---
 drivers/of/address.c  |  2 +-
 drivers/of/base.c     |  7 +++----
 drivers/of/property.c | 10 +++++-----
 drivers/of/resolver.c |  4 ++--
 drivers/of/unittest.c |  4 ++--
 5 files changed, 13 insertions(+), 14 deletions(-)

diff --git a/drivers/of/address.c b/drivers/of/address.c
index ae48e121b6e7..2270373b30ab 100644
--- a/drivers/of/address.c
+++ b/drivers/of/address.c
@@ -371,7 +371,7 @@ EXPORT_SYMBOL(of_pci_range_to_resource);
 
 static int of_bus_isa_match(struct device_node *np)
 {
-	return !strcmp(np->name, "isa");
+	return of_node_name_eq(np, "isa");
 }
 
 static void of_bus_isa_count_cells(struct device_node *child,
diff --git a/drivers/of/base.c b/drivers/of/base.c
index 57c837140a8b..998d032fcef9 100644
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -496,7 +496,7 @@ static int __of_device_is_compatible(const struct device_node *device,
 
 	/* Matching name is a bit better than not */
 	if (name && name[0]) {
-		if (!device->name || of_node_cmp(name, device->name))
+		if (!of_node_name_eq(device, name))
 			return 0;
 		score++;
 	}
@@ -835,7 +835,7 @@ struct device_node *of_get_child_by_name(const struct device_node *node,
 	struct device_node *child;
 
 	for_each_child_of_node(node, child)
-		if (child->name && (of_node_cmp(child->name, name) == 0))
+		if (of_node_name_eq(child, name))
 			break;
 	return child;
 }
@@ -961,8 +961,7 @@ struct device_node *of_find_node_by_name(struct device_node *from,
 
 	raw_spin_lock_irqsave(&devtree_lock, flags);
 	for_each_of_allnodes_from(from, np)
-		if (np->name && (of_node_cmp(np->name, name) == 0)
-		    && of_node_get(np))
+		if (of_node_name_eq(np, name) && of_node_get(np))
 			break;
 	of_node_put(from);
 	raw_spin_unlock_irqrestore(&devtree_lock, flags);
diff --git a/drivers/of/property.c b/drivers/of/property.c
index f46828e3b082..08430031bd28 100644
--- a/drivers/of/property.c
+++ b/drivers/of/property.c
@@ -571,7 +571,7 @@ struct device_node *of_graph_get_port_by_id(struct device_node *parent, u32 id)
 	for_each_child_of_node(parent, port) {
 		u32 port_id = 0;
 
-		if (of_node_cmp(port->name, "port") != 0)
+		if (!of_node_name_eq(port, "port"))
 			continue;
 		of_property_read_u32(port, "reg", &port_id);
 		if (id == port_id)
@@ -646,7 +646,7 @@ struct device_node *of_graph_get_next_endpoint(const struct device_node *parent,
 			port = of_get_next_child(parent, port);
 			if (!port)
 				return NULL;
-		} while (of_node_cmp(port->name, "port"));
+		} while (!of_node_name_eq(port, "port"));
 	}
 }
 EXPORT_SYMBOL(of_graph_get_next_endpoint);
@@ -715,7 +715,7 @@ struct device_node *of_graph_get_port_parent(struct device_node *node)
 	/* Walk 3 levels up only if there is 'ports' node. */
 	for (depth = 3; depth && node; depth--) {
 		node = of_get_next_parent(node);
-		if (depth == 2 && of_node_cmp(node->name, "ports"))
+		if (depth == 2 && !of_node_name_eq(node, "ports"))
 			break;
 	}
 	return node;
@@ -893,7 +893,7 @@ of_fwnode_get_named_child_node(const struct fwnode_handle *fwnode,
 	struct device_node *child;
 
 	for_each_available_child_of_node(node, child)
-		if (!of_node_cmp(child->name, childname))
+		if (of_node_name_eq(child, childname))
 			return of_fwnode_handle(child);
 
 	return NULL;
@@ -955,7 +955,7 @@ of_fwnode_graph_get_port_parent(struct fwnode_handle *fwnode)
 		return NULL;
 
 	/* Is this the "ports" node? If not, it's the port parent. */
-	if (of_node_cmp(np->name, "ports"))
+	if (!of_node_name_eq(np, "ports"))
 		return of_fwnode_handle(np);
 
 	return of_fwnode_handle(of_get_next_parent(np));
diff --git a/drivers/of/resolver.c b/drivers/of/resolver.c
index 7edfac6f1914..c1b67dd7cd6e 100644
--- a/drivers/of/resolver.c
+++ b/drivers/of/resolver.c
@@ -281,7 +281,7 @@ int of_resolve_phandles(struct device_node *overlay)
 	adjust_overlay_phandles(overlay, phandle_delta);
 
 	for_each_child_of_node(overlay, local_fixups)
-		if (!of_node_cmp(local_fixups->name, "__local_fixups__"))
+		if (of_node_name_eq(local_fixups, "__local_fixups__"))
 			break;
 
 	err = adjust_local_phandle_references(local_fixups, overlay, phandle_delta);
@@ -291,7 +291,7 @@ int of_resolve_phandles(struct device_node *overlay)
 	overlay_fixups = NULL;
 
 	for_each_child_of_node(overlay, child) {
-		if (!of_node_cmp(child->name, "__fixups__"))
+		if (of_node_name_eq(child, "__fixups__"))
 			overlay_fixups = child;
 	}
 
diff --git a/drivers/of/unittest.c b/drivers/of/unittest.c
index 49ae2aa744d6..39cf2ec1856f 100644
--- a/drivers/of/unittest.c
+++ b/drivers/of/unittest.c
@@ -2339,7 +2339,7 @@ static __init void of_unittest_overlay_high_level(void)
 	 */
 	pprev = &overlay_base_root->child;
 	for (np = overlay_base_root->child; np; np = np->sibling) {
-		if (!of_node_cmp(np->name, "__local_fixups__")) {
+		if (of_node_name_eq(np, "__local_fixups__")) {
 			*pprev = np->sibling;
 			break;
 		}
@@ -2352,7 +2352,7 @@ static __init void of_unittest_overlay_high_level(void)
 		/* will have to graft properties from node into live tree */
 		pprev = &overlay_base_root->child;
 		for (np = overlay_base_root->child; np; np = np->sibling) {
-			if (!of_node_cmp(np->name, "__symbols__")) {
+			if (of_node_name_eq(np, "__symbols__")) {
 				overlay_base_symbols = np;
 				*pprev = np->sibling;
 				break;
-- 
2.19.1

