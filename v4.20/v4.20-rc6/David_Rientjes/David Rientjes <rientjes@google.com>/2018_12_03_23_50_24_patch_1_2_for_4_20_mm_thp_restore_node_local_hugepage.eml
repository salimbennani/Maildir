Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:59:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5E9CD58014B;
	Mon,  3 Dec 2018 15:50:33 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 15:50:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3APQ4QHx/ZTYpn1f9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1egUIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CS2RPXthfWTFDDY2/?=
 =?us-ascii?q?YYsAAeUOMvpDr4nlpVYDtge+CRW2Ce/z1jNFnGH60Ksn2OohCwHG2wkgEsoAvn?=
 =?us-ascii?q?vOstX1NbodWv2pwqnJ0zrDae9W2TXj54jTbxsspuuMXbNufsrX1UkvFR3Kjk6L?=
 =?us-ascii?q?pIzqODOV0esNs2yF4OZ6Se2vjGsnphh3rzOyyMksjYzJiZgUylDC7Sh5xZg6Jd?=
 =?us-ascii?q?i/SE5hYd+oCodfuziDO4dvWMwuW2Rotzg/yr0evp67eCkKx4gnxhLFd/OLapGE?=
 =?us-ascii?q?7gv5W+uXPDx2h2pldaqhixqu9UWs0PDwW8eq3FpQsyZIkcXAumoM2hHR8sSLVP?=
 =?us-ascii?q?pw8lm91TuKygze6v1LLEUpmafZLpMszLs9m5QJvknDGyL6hkv7g7WUe0gh+uWn?=
 =?us-ascii?q?9erqbqvjq5KTN4J5jgLzP6IzkcKlG+s4KBIBX22D9OS8yrLj+Ur5Ta1Ujv05jK?=
 =?us-ascii?q?bZqorWJccFqa6jBQ9azIIj5wy4Dze839QUhXgHLFRbdxKbl4XlJU3CLfTiAfui?=
 =?us-ascii?q?jVmgji1ny+3FM7H9GJnAL3rOnK/kfbln6k5czAQzzcpY55JRErwBJPPzWknstN?=
 =?us-ascii?q?3XFxM5MBK7w/zhCNpj0oMSQGWPA6GfMKzMq1+F/fwvI+aSa48Pojr9KOYq5+To?=
 =?us-ascii?q?jXAnnV8RZ66p3YEYaHygBPRpP12ZYWbwgtcGCWoKugs+TO/0h1GYXj9Tem2/X6?=
 =?us-ascii?q?Y95jE9FYKnAp3PRoGrgLydwii7GodaaXxBClCJCX3obZmLW+8QaCKOJc9sijwE?=
 =?us-ascii?q?WqKgS489zx6usxX2y7p6LuXO/C0Yuonu1Nx05+3ViBEz+iZ4D8Wb02GRUW50mn?=
 =?us-ascii?q?kESCMx3KB6uUZ90EuM0bBkg/xEEtxe//FJUgAkOpLGzOx6DNbyWgTGftqSTFam?=
 =?us-ascii?q?Q9OmASw+T94rwt8OZVp9FMumjhzZwyWqBLoVnaSRBJMo6qLcw2TxJ8Flxnncz6?=
 =?us-ascii?q?khj14mQshVOW28nKF/9RPeB4rIk0Wfiqarer4Q3C/L9Gef02WOuFtUXxJ3UaXA?=
 =?us-ascii?q?RXoffFfZrczl5kPeSL+jEbcnPRFHycKYLqtKa8fmjVNJRPr4PNTeYmSxm3q/BB?=
 =?us-ascii?q?qSx7OMapbqdHsZ3CnHFEcElAUT926cNQciHiehv37eDDt2GF3yeUzs7/dxpGm7?=
 =?us-ascii?q?TkAuyQGKdFNu17yy9h4RhvycTvcT06kAuCcgrTV0AVm808jXC9qGuwpuYqFcbc?=
 =?us-ascii?q?kh71dA0GLTrxZ9MYC4L6B+ml4edBx6sF702BVpFIpMi8gqo2kszAppN62Y1khM?=
 =?us-ascii?q?dzeZ3ZD2J73WJXP+/BGpa67KxF7e1Mya9bsI6PQ9s1/jph2mFlI+83V71NlYy2?=
 =?us-ascii?q?ec5pTPDAoVTZLxUkY2+wJmp73AZSk9/YfU1XxqMam7qTLC39MpBO04yhevZdtf?=
 =?us-ascii?q?MaWEFBPsHM0eHcShNOsqm12xZBIeIO9S7LI0P9+hd/aewqGrOPhvnT24gmVH+o?=
 =?us-ascii?q?xyyV+M+DdmRe7O3JYFxO+Y0xCDVzf9ilehr8/2lZpFZTEUAmqw1yzkCJRNaa11?=
 =?us-ascii?q?eIYBEX2uLNGvxtVim57tXGZV9V6+B18cxMClYxuTb1zn0g1W2kQauninmSq+zz?=
 =?us-ascii?q?xpnDAltKuf3CrSw+v8cBoLIHJERG5njV30O4i7k8gaXFS0bwgujBal/0f6yLRB?=
 =?us-ascii?q?q6RlMmbTRl1Efy7oIGF4U6u8r6aNbNRL6Jw1rypXSuO8YVaBR775ohsa1T7jHm?=
 =?us-ascii?q?REyDA6cTGqpov2nxhghG2BK3ZzqWLTedtsyhfH+NzcWflR0yIGRSl5kzXWBkKw?=
 =?us-ascii?q?P8K0/dWSjJrDtuG+V2S8VpxcayXrzIWAtDel6m1uGxGwg/ezmtj/GwggzSD7z8?=
 =?us-ascii?q?VqVTnPrBvkYInkzb66MeFkfklvHlP88NB1GoJ9kosxgpEfx34ai46R/XoGl2fz?=
 =?us-ascii?q?LNpa1bj/bHoLWT4E3drV7BL5101kK3KD35j5WWmFwst9e9m6ZXsb2yIn4MBNEq?=
 =?us-ascii?q?uU7r1EnS1ur1q8rALRZ+V9nzgHxfsv7n4an/8GuA43wiqBBbASGFFSPTbwmBSQ?=
 =?us-ascii?q?89C+sKJXaX6scbeq1Upyh9ChDKyYrQFaV3b0YZMiHS527sViP1PAynzz6of4eN?=
 =?us-ascii?q?bOadIfrAGbkxDFj+JNMpI+iuIKhTZ7OWL6pXAlzu87jR900p2gsomINX5t/L6n?=
 =?us-ascii?q?DR5CLTL6edkT+j72gKZan8aW2Z2vH5p7FjUKWpvoUeynEDYIufv7MAaOFSU2qm?=
 =?us-ascii?q?2HFrrHAQ+f9EBmomrTE5CsMnGbPngYws9kRBmAP0xfmwEUUS4+np44EACq2cPg?=
 =?us-ascii?q?fF145jAX+l73tB9Mxvh0OBn4V2fVvB2oZSssSJiDMBpW6RlP6FzPPsyZ6uJzAj?=
 =?us-ascii?q?tU/pm8rAGWLmybZgJIDXwGW0CeBlDjOKWu6sfE8+SCGuW+KP7Oa62UqeNCT/eI?=
 =?us-ascii?q?2Y6v0ox+8jaOLMqPO2dtD+Yh1kpfR3x5GNnZmzYSSywRjS3NdNWWpBO9+i1xs8?=
 =?us-ascii?q?C+/+7nWAPp5YuTFbRSNc9j9AyxgaeGL+SQnjp2KS5E1pMQwn/F0Lge3FkPiyF3?=
 =?us-ascii?q?ajmiC7IAuTTWTKLXnK9XAAUWaydyNMtO8qI90RNBOc/ditPpyLF4iuQ5BEtCVV?=
 =?us-ascii?q?zkgsupf9AFI3mhNFPbA0aGLLSGKiPKw8H0YqO8SKdcjOZOtx23tjaUDVXjPimY?=
 =?us-ascii?q?lzTyUxCvMOdMjDyUPRBEuYG9dAptBnbnTN78dhK7N9p3hyUswbIonnPKKXIcMT?=
 =?us-ascii?q?9kfkxXs72f9jlYjet/GmBb6nplLPKJmyKY7+neN5YXvuFnAiVyl+JG/ns6z6FZ?=
 =?us-ascii?q?4z1DRPxwgCHStMJho0m6kumTzTpqSAZOqjdOhI6RoUpuI7nW9pleVnbC5x8N6W?=
 =?us-ascii?q?SQCxIXp9pqENHvuqZQysTRm6L3MjtN79XU/c4EDcjONM2HKGYhMQbuGDPMDAoK?=
 =?us-ascii?q?VzirNWTeh0xbiP6T932VoYI8qpjjg5cOTr5bVFooFvIVEEhlHdoCIItpUTMgi7?=
 =?us-ascii?q?KUkMkI5X/t5CXWEeFbuI3cHs6VG+vmLDqCxe1YYAEWyLf0NqwXN4vmywlsbUR8?=
 =?us-ascii?q?kI3WGk3WG9dXrXslJiYyrF9A+TBXVGY63U3obgLltHYaD/W9mBE7ohFzbeQk6H?=
 =?us-ascii?q?Hn5FJhdXTQoy5lvEAvmNmtuzGcdiLzIbz4CZtXBizotUUqGpz8RAlxYEu5mkky?=
 =?us-ascii?q?Z2SMfK5Yk7Y1LTMjswTbo5YaXKcEFaA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAQBpwAVch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYExKoIRJ5gggWg5mFgDTBIBARgTAYgJIjgSAQMBAQEBAQECARMBAQEKCwk?=
 =?us-ascii?q?IKSMMgjYkAYJiAwMBAiQTBgEBNwEFCQEBUAMxAQUBHAYBEgWDHIICAQSaOjyKH?=
 =?us-ascii?q?YFsM4J2AQEFhykIEopugRwXgX+BETOFfQKHPIkyhnqQFgmFNYwHGIlbh0uJBI9?=
 =?us-ascii?q?CBgIJBw8hgTxVgSFNIxWDJ4IbDBd/AQmCQYp0HzKBBQEBIYpgAQE?=
X-IPAS-Result: =?us-ascii?q?A0AHAQBpwAVch0O0hNFjHAEBAQQBAQcEAQGBZYExKoIRJ5g?=
 =?us-ascii?q?ggWg5mFgDTBIBARgTAYgJIjgSAQMBAQEBAQECARMBAQEKCwkIKSMMgjYkAYJiA?=
 =?us-ascii?q?wMBAiQTBgEBNwEFCQEBUAMxAQUBHAYBEgWDHIICAQSaOjyKHYFsM4J2AQEFhyk?=
 =?us-ascii?q?IEopugRwXgX+BETOFfQKHPIkyhnqQFgmFNYwHGIlbh0uJBI9CBgIJBw8hgTxVg?=
 =?us-ascii?q?SFNIxWDJ4IbDBd/AQmCQYp0HzKBBQEBIYpgAQE?=
X-IronPort-AV: E=Sophos;i="5.56,312,1539673200"; 
   d="scan'208";a="55371134"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 03 Dec 2018 15:50:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726088AbeLCXu3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Mon, 3 Dec 2018 18:50:29 -0500
Received: from mail-pg1-f195.google.com ([209.85.215.195]:46753 "EHLO
        mail-pg1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725938AbeLCXu1 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 3 Dec 2018 18:50:27 -0500
Received: by mail-pg1-f195.google.com with SMTP id w7so6445339pgp.13
        for <linux-kernel@vger.kernel.org>; Mon, 03 Dec 2018 15:50:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=date:from:to:cc:subject:in-reply-to:message-id:references
         :user-agent:mime-version;
        bh=uwrfYo1uyTQr1sWQ/8x1R/k/a8VXLrhkMIWp7pl0lzM=;
        b=S+JsJRLkg/UYG0sqxbL8JOi5dhctVrU/AmABeyLqV9JqYlcPzL4jHXPPsw6Vh37lVM
         FYj2ddKY6ceX1GiALfHcIMu6fsnp5xhSQL56QbZou63bbSMAZl5jmuSWPpjhFV1lgzdv
         qiHuscC6mAbIlWWlEqy1bbq7uheZY0Hfzn1yoH1dsa8rfVW3ucujLmx4ryQLSUAL7JGX
         sDZU+wqdMfiT5H04y+PCfmw527g5NBu/orhqI2Ey8VdVvamu17r/iC9kfFzvOsWyBuzp
         zcc9qmTQWDLPk+1yduuVl4Ea9R9HTXA+0XdKXPHe992ggTSJJn1hdlULz1Iki1kb3NJE
         zArQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:in-reply-to:message-id
         :references:user-agent:mime-version;
        bh=uwrfYo1uyTQr1sWQ/8x1R/k/a8VXLrhkMIWp7pl0lzM=;
        b=Suyce33u3dSLuewNn8sV5GKxebK7QmC4M2dQGnRHGnVLcsPLwROiDMymS3zuqRgqGx
         a1LrZ/t3KoxjfeN+yav/2KA3R6odDA8lLNhxtXX0/g0EXsNWgQiOpLuR/lH7a0rFmW9g
         fXyjo8jPKW1lApzPAgWbiKFmkZDP64DVBJ//ha5mhfh7QRgm+IvOD82dQwiaVIuNHPSp
         kOi7bYf8sOOrthI+8wa0z9Tu07V51DRH0l/ESSOosCo7yiqngoZG9DlHAjggl1r6NwXC
         riBAWn79wcHI2j0smg8vJWyJzu3wxNdHl3JxM0pcr79t7M/T5MzeLtbsCrDnjBiVIFvb
         73Nw==
X-Gm-Message-State: AA+aEWbwpoQrBj+vgvdzJYNUpxRPjJ57Rs+VcXiRQIPGQWSInw79gfCN
        O6J0fmLeT7nLIMQxel2q75hPJg==
X-Google-Smtp-Source: AFSGD/VERmNWPY1lAwWtRULCDPswdikZkXnH2A/R3ckL49Ibxbvn58AdSrmV59u4cT+isamCiRHKOQ==
X-Received: by 2002:a63:f1f:: with SMTP id e31mr14744413pgl.274.1543881026116;
        Mon, 03 Dec 2018 15:50:26 -0800 (PST)
Received: from [2620:15c:17:3:3a5:23a7:5e32:4598] ([2620:15c:17:3:3a5:23a7:5e32:4598])
        by smtp.gmail.com with ESMTPSA id b185sm26558821pga.85.2018.12.03.15.50.25
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Mon, 03 Dec 2018 15:50:25 -0800 (PST)
Date: Mon, 3 Dec 2018 15:50:24 -0800 (PST)
From: David Rientjes <rientjes@google.com>
X-X-Sender: rientjes@chino.kir.corp.google.com
To: Linus Torvalds <torvalds@linux-foundation.org>,
        Andrea Arcangeli <aarcange@redhat.com>
cc: ying.huang@intel.com, Michal Hocko <mhocko@suse.com>,
        s.priebe@profihost.ag, mgorman@techsingularity.net,
        Linux List Kernel Mailing <linux-kernel@vger.kernel.org>,
        alex.williamson@redhat.com, lkp@01.org, kirill@shutemov.name,
        Andrew Morton <akpm@linux-foundation.org>,
        zi.yan@cs.rutgers.edu, Vlastimil Babka <vbabka@suse.cz>
Subject: [patch 1/2 for-4.20] mm, thp: restore node-local hugepage
 allocations
In-Reply-To: <alpine.DEB.2.21.1812031545080.161134@chino.kir.corp.google.com>
Message-ID: <alpine.DEB.2.21.1812031545560.161134@chino.kir.corp.google.com>
References: <alpine.DEB.2.21.1812031545080.161134@chino.kir.corp.google.com>
User-Agent: Alpine 2.21 (DEB 202 2017-01-01)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is a full revert of ac5b2c18911f ("mm: thp: relax __GFP_THISNODE for
MADV_HUGEPAGE mappings") and a partial revert of 89c83fb539f9 ("mm, thp:
consolidate THP gfp handling into alloc_hugepage_direct_gfpmask").

By not setting __GFP_THISNODE, applications can allocate remote hugepages
when the local node is fragmented or low on memory when either the thp
defrag setting is "always" or the vma has been madvised with
MADV_HUGEPAGE.

Remote access to hugepages often has much higher latency than local pages
of the native page size.  On Haswell, ac5b2c18911f was shown to have a
13.9% access regression after this commit for binaries that remap their
text segment to be backed by transparent hugepages.

The intent of ac5b2c18911f is to address an issue where a local node is
low on memory or fragmented such that a hugepage cannot be allocated.  In
every scenario where this was described as a fix, there is abundant and
unfragmented remote memory available to allocate from, even with a greater
access latency.

If remote memory is also low or fragmented, not setting __GFP_THISNODE was
also measured on Haswell to have a 40% regression in allocation latency.

Restore __GFP_THISNODE for thp allocations.

Fixes: ac5b2c18911f ("mm: thp: relax __GFP_THISNODE for MADV_HUGEPAGE mappings")
Fixes: 89c83fb539f9 ("mm, thp: consolidate THP gfp handling into alloc_hugepage_direct_gfpmask")

Signed-off-by: David Rientjes <rientjes@google.com>
---
 include/linux/mempolicy.h |  2 --
 mm/huge_memory.c          | 42 +++++++++++++++------------------------
 mm/mempolicy.c            |  7 ++++---
 3 files changed, 20 insertions(+), 31 deletions(-)

diff --git a/include/linux/mempolicy.h b/include/linux/mempolicy.h
--- a/include/linux/mempolicy.h
+++ b/include/linux/mempolicy.h
@@ -139,8 +139,6 @@ struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *sp,
 struct mempolicy *get_task_policy(struct task_struct *p);
 struct mempolicy *__get_vma_policy(struct vm_area_struct *vma,
 		unsigned long addr);
-struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
-						unsigned long addr);
 bool vma_policy_mof(struct vm_area_struct *vma);
 
 extern void numa_default_policy(void);
diff --git a/mm/huge_memory.c b/mm/huge_memory.c
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -632,37 +632,27 @@ static vm_fault_t __do_huge_pmd_anonymous_page(struct vm_fault *vmf,
 static inline gfp_t alloc_hugepage_direct_gfpmask(struct vm_area_struct *vma, unsigned long addr)
 {
 	const bool vma_madvised = !!(vma->vm_flags & VM_HUGEPAGE);
-	gfp_t this_node = 0;
-
-#ifdef CONFIG_NUMA
-	struct mempolicy *pol;
-	/*
-	 * __GFP_THISNODE is used only when __GFP_DIRECT_RECLAIM is not
-	 * specified, to express a general desire to stay on the current
-	 * node for optimistic allocation attempts. If the defrag mode
-	 * and/or madvise hint requires the direct reclaim then we prefer
-	 * to fallback to other node rather than node reclaim because that
-	 * can lead to excessive reclaim even though there is free memory
-	 * on other nodes. We expect that NUMA preferences are specified
-	 * by memory policies.
-	 */
-	pol = get_vma_policy(vma, addr);
-	if (pol->mode != MPOL_BIND)
-		this_node = __GFP_THISNODE;
-	mpol_cond_put(pol);
-#endif
+	const gfp_t gfp_mask = GFP_TRANSHUGE_LIGHT | __GFP_THISNODE;
 
+	/* Always do synchronous compaction */
 	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG, &transparent_hugepage_flags))
-		return GFP_TRANSHUGE | (vma_madvised ? 0 : __GFP_NORETRY);
+		return GFP_TRANSHUGE | __GFP_THISNODE |
+		       (vma_madvised ? 0 : __GFP_NORETRY);
+
+	/* Kick kcompactd and fail quickly */
 	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG, &transparent_hugepage_flags))
-		return GFP_TRANSHUGE_LIGHT | __GFP_KSWAPD_RECLAIM | this_node;
+		return gfp_mask | __GFP_KSWAPD_RECLAIM;
+
+	/* Synchronous compaction if madvised, otherwise kick kcompactd */
 	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG, &transparent_hugepage_flags))
-		return GFP_TRANSHUGE_LIGHT | (vma_madvised ? __GFP_DIRECT_RECLAIM :
-							     __GFP_KSWAPD_RECLAIM | this_node);
+		return gfp_mask | (vma_madvised ? __GFP_DIRECT_RECLAIM :
+						  __GFP_KSWAPD_RECLAIM);
+
+	/* Only do synchronous compaction if madvised */
 	if (test_bit(TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG, &transparent_hugepage_flags))
-		return GFP_TRANSHUGE_LIGHT | (vma_madvised ? __GFP_DIRECT_RECLAIM :
-							     this_node);
-	return GFP_TRANSHUGE_LIGHT | this_node;
+		return gfp_mask | (vma_madvised ? __GFP_DIRECT_RECLAIM : 0);
+
+	return gfp_mask;
 }
 
 /* Caller must hold page table lock. */
diff --git a/mm/mempolicy.c b/mm/mempolicy.c
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@ -1116,8 +1116,9 @@ static struct page *new_page(struct page *page, unsigned long start)
 	} else if (PageTransHuge(page)) {
 		struct page *thp;
 
-		thp = alloc_pages_vma(GFP_TRANSHUGE, HPAGE_PMD_ORDER, vma,
-				address, numa_node_id());
+		thp = alloc_pages_vma(GFP_TRANSHUGE | __GFP_THISNODE,
+				      HPAGE_PMD_ORDER, vma, address,
+				      numa_node_id());
 		if (!thp)
 			return NULL;
 		prep_transhuge_page(thp);
@@ -1662,7 +1663,7 @@ struct mempolicy *__get_vma_policy(struct vm_area_struct *vma,
  * freeing by another task.  It is the caller's responsibility to free the
  * extra reference for shared policies.
  */
-struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
+static struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
 						unsigned long addr)
 {
 	struct mempolicy *pol = __get_vma_policy(vma, addr);
