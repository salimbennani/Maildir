Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 04 Dec 2018 08:55:10 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DE193580375
	for <like.xu@linux.intel.com>; Mon,  3 Dec 2018 08:46:18 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 03 Dec 2018 08:46:18 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A7O9Geh2Gl5MtnsKOsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?seMRKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCAIy8?=
 =?us-ascii?q?YYwPAOUdMuhXsof9v1kDoxmxCAWxCu7j1iFHhmTt0K0myuQsCx3K0BA8E98Mtn?=
 =?us-ascii?q?nfsdX7NL0VUeCw1KTF0zLDb+lQ2Tjj7IjIcwouquyOU7JtbcXRylQkGgTZgVWX?=
 =?us-ascii?q?qYzlIi+a1ucWvmiB8eVvSOKvhHQ7qw1rvjevwcIsh5DPi4kIyV7E7T10zJgpKd?=
 =?us-ascii?q?C7UkJ3fMOoHZhKuy2EOYZ7QtkuT3xqtSoi1LEKpZq2cDIXxJkp2RLTceGLfouG?=
 =?us-ascii?q?7x75SuqcIjF1j29/dr2lnRa9602gx/X8Vsaq1FZKqTJIkt3NtnAWyxzT8dKLSv?=
 =?us-ascii?q?R7/ke8wzqP0BrT6u5cLUA1k6rUNYIhz6YumpYPsknPBDL6lFj1gaOMaEkp9Oil?=
 =?us-ascii?q?5/76brjkvpOcMpV7igD6MqQggMy/BuE4PxAXX2eF/OS8yaTv8lDnT7VUkPI2lr?=
 =?us-ascii?q?DVv4vdJcQGoK62HxFa0p0k5xa7Djem08oXkWMILVJYYB+Hi4npO1fTIPH3F/u/?=
 =?us-ascii?q?glKskCt1yPDCJLHuHpLNLn3YnbfnerZ97UFcyAwuzdxF4JJUEL4BLOrpWkDtrN?=
 =?us-ascii?q?zYEgM5MwuszubjCdV91Z0RVXiAA6+EK67StV6I5uQyI+iDfoMVuTD9K+Q76P7q?=
 =?us-ascii?q?l3M2hVgdfaz6laYRc22yS/R6P12CMz2rhtYaDXxMuA04Q+r3zlqYXnlWbne2Wq?=
 =?us-ascii?q?s6oTYjFIOhC5yEX42onfmN0Tm2Gs5rYHtbAAWJGHbsa4LWQvoJdWeeL9Fslnke?=
 =?us-ascii?q?WKG8RpQ9/RepsgD81vxgNOWD4TASt5/oyI1o4fbOnwo57z1+Apeh1DShRn91ki?=
 =?us-ascii?q?soRjs60aZ1u0V7xh/X3aFmgvBwD9Ff5/pVFAw9MMiP4fZ9DoXZXRjHc9OIQR6G?=
 =?us-ascii?q?X96lSWU6SdIsyNwmeUtxG9y+yBvE2nz5UPcui7WXCclsoern1H/rKpM4ki6e2Q?=
 =?us-ascii?q?=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAACGXQVchxHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgTCCTxODeYgYX4stgg2XSBSBXxQYFIRAg0kiNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEKCwkIGw4vgjYFAgMaAQaCXAECAgEBAiAEHwopAwIBAQIGAQEKEggCI?=
 =?us-ascii?q?gQCAgMBRQ4GEwWDHIF6CAEEpXZ8M4VAhGGBC4sRF4FAP4ERgxKCEIJKDxiDBIJ?=
 =?us-ascii?q?XAosflSEJkTELGIlbh0ssglCVcYFGgg0zGggbFYMngicXEo4MQDGBBxyHblaBd?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAACGXQVchxHrdtBjHAEBAQQBAQcEAQGBUQcBAQsBgTC?=
 =?us-ascii?q?CTxODeYgYX4stgg2XSBSBXxQYFIRAg0kiNAkNAQMBAQEBAQECARMBAQEKCwkIG?=
 =?us-ascii?q?w4vgjYFAgMaAQaCXAECAgEBAiAEHwopAwIBAQIGAQEKEggCIgQCAgMBRQ4GEwW?=
 =?us-ascii?q?DHIF6CAEEpXZ8M4VAhGGBC4sRF4FAP4ERgxKCEIJKDxiDBIJXAosflSEJkTELG?=
 =?us-ascii?q?Ilbh0ssglCVcYFGgg0zGggbFYMngicXEo4MQDGBBxyHblaBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,311,1539673200"; 
   d="scan'208";a="65067745"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 03 Dec 2018 08:46:06 -0800
Received: from localhost ([::1]:50570 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gTrMD-0006L6-Mc
	for like.xu@linux.intel.com; Mon, 03 Dec 2018 11:46:05 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33355)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cohuck@redhat.com>) id 1gTqfE-0003M6-2G
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 11:01:46 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cohuck@redhat.com>) id 1gTqfA-0007JU-6f
	for qemu-devel@nongnu.org; Mon, 03 Dec 2018 11:01:39 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44253)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cohuck@redhat.com>)
	id 1gTqf9-0007GA-SX; Mon, 03 Dec 2018 11:01:36 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 376BF3002F7B;
	Mon,  3 Dec 2018 16:01:34 +0000 (UTC)
Received: from gondolin (ovpn-116-122.ams2.redhat.com [10.36.116.122])
	by smtp.corp.redhat.com (Postfix) with ESMTP id A28E219C7D;
	Mon,  3 Dec 2018 16:01:30 +0000 (UTC)
Date: Mon, 3 Dec 2018 17:01:27 +0100
From: Cornelia Huck <cohuck@redhat.com>
To: David Hildenbrand <david@redhat.com>
Message-ID: <20181203170127.349625de.cohuck@redhat.com>
In-Reply-To: <20181128145455.11733-1-david@redhat.com>
References: <20181128145455.11733-1-david@redhat.com>
Organization: Red Hat GmbH
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.47]);
	Mon, 03 Dec 2018 16:01:34 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH RFC] qdev: Let the hotplug_unplug() caller
 delete the device
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Collin Walling <walling@linux.ibm.com>,
	"Michael S . Tsirkin" <mst@redhat.com>,
	Greg Kurz <groug@kaod.org>, qemu-devel@nongnu.org,
	Christian Borntraeger <borntraeger@de.ibm.com>,
	qemu-s390x@nongnu.org, qemu-ppc@nongnu.org, Thomas Huth <thuth@redhat.com>,
	Igor Mammedov <imammedo@redhat.com>, Richard Henderson <rth@twiddle.net>,
	David Gibson <david@gibson.dropbear.id.au>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, 28 Nov 2018 15:54:55 +0100
David Hildenbrand <david@redhat.com> wrote:

> When unplugging a device, at one point the device will be destroyed
> via object_unparent(). This will, one the one hand, unrealize the
> device hierarchy to be removed, and on the other hand, destroy/free the
> device hierarchy.
>=20
> When chaining interrupt handlers, we want to overwrite a bus hotplug

s/interrupt/hotplug/, no?

> handler by the machine hotplug handler, to be able to perform
> some part of the plug/unplug and to forward the calls to the bus hotplug
> handler.
>=20
> For now, the bus hotplug handler would trigger an object_unparent(), not
> allowing us to perform some unplug action on a device after we forwarded
> the call to the bus hotplug handler. The device would be gone at that
> point.
>=20
> hotplug_handler_unplug(dev) -> calls machine_unplug_handler()
>     machine_unplug_handler(dev) {
>         /* eventually do unplug stuff */
>         bus_unplug_handler(dev) -> calls object_unparent(dev)
>         /* dev is gone, we can't do more unplug stuff */
>     }
>=20
> So move the object_unparent() to the original caller of the unplug. For
> now, keep the unrealize() at the original places of the
> object_unparent().
>=20
> hotplug_handler_unplug(dev) -> calls machine_unplug_handler()
>     machine_unplug_handler(dev) {
>         /* eventually do unplug stuff */
>         bus_unplug_handler(dev) -> calls unrealize(dev)
>         /* we can do more unplug stuff but device already unrealized */
>     }
> object_unparent(dev)
>=20
> In the long run, every unplug action should be factored out of the
> unrealize() function into the unplug handler (especially for PCI). Then
> we can get rid of the additonal unrealize() calls and object_unparent()
> will properly unrealize the device hierarchy after the device has been
> unplugged.
>=20
> hotplug_handler_unplug(dev) -> calls machine_unplug_handler()
>     machine_unplug_handler(dev) {
>         /* eventually do unplug stuff */
>         bus_unplug_handler(dev) -> only unplugs, does not unrealize
>         /* we can do more unplug stuff */
>     }
> object_unparent(dev) -> will unrealize
>=20
>=20
> The original approach was suggested by Igor Mammedov for the PCI
> part, but I extended it to all hotplug handlers. I consider this one
> step into the right direction.

=46rom my limited overview of the hotplug infrastructure, this looks
reasonable.

>=20
> Signed-off-by: David Hildenbrand <david@redhat.com>
> ---
>=20
> I might still be missing some cases, but I want to get some feedback first
> if this makes sense.
>=20
> This is based on the series:
>     [PATCH v3 00/11] pci: hotplug handler reworks=E2=80=8B
>=20
>  hw/acpi/cpu.c            |  1 +
>  hw/acpi/memory_hotplug.c |  1 +
>  hw/acpi/pcihp.c          |  3 ++-
>  hw/core/qdev.c           |  3 +--
>  hw/i386/pc.c             |  5 ++---
>  hw/pci/pcie.c            |  3 ++-
>  hw/pci/shpc.c            |  3 ++-
>  hw/ppc/spapr.c           |  4 ++--
>  hw/ppc/spapr_pci.c       |  3 ++-
>  hw/s390x/css-bridge.c    |  2 +-
>  hw/s390x/s390-pci-bus.c  | 12 ++++++++++--
>  qdev-monitor.c           |  9 +++++++--
>  12 files changed, 33 insertions(+), 16 deletions(-)

> diff --git a/hw/s390x/s390-pci-bus.c b/hw/s390x/s390-pci-bus.c
> index 9abd49a9dc..a84e80f6dd 100644
> --- a/hw/s390x/s390-pci-bus.c
> +++ b/hw/s390x/s390-pci-bus.c
> @@ -988,7 +988,11 @@ static void s390_pcihost_unplug(HotplugHandler *hotp=
lug_dev, DeviceState *dev,
>                                   pbdev->fh, pbdev->fid);
>      bus =3D pci_get_bus(pci_dev);
>      devfn =3D pci_dev->devfn;
> -    object_unparent(OBJECT(pci_dev));
> +    if (OBJECT(pci_dev) =3D=3D OBJECT(dev)) {
> +        object_property_set_bool(OBJECT(pci_dev), false, "realized", NUL=
L);
> +    } else {
> +        object_unparent(OBJECT(pci_dev));
> +    }
>      s390_pci_msix_free(pbdev);
>      s390_pci_iommu_free(s, bus, devfn);
>      pbdev->pdev =3D NULL;
> @@ -997,7 +1001,11 @@ out:
>      pbdev->fid =3D 0;
>      QTAILQ_REMOVE(&s->zpci_devs, pbdev, link);
>      g_hash_table_remove(s->zpci_table, &pbdev->idx);
> -    object_unparent(OBJECT(pbdev));
> +    if (OBJECT(pbdev) =3D=3D OBJECT(dev)) {
> +        object_property_set_bool(OBJECT(pbdev), false, "realized", NULL);
> +    } else {
> +        object_unparent(OBJECT(pbdev));
> +    }

That's a bit... ugly. Not really your code, but the inherent ugliness
of the architecture it uncovers; we basically have two devices paired
with each other and we need to unplug them both, regardless on which of
the two unplug is called.

Maybe add a comment explaining it a bit?

It looks correct, though; but I haven't tested it :)

Nothing bad jumped out at me from the rest of your patch, either.

