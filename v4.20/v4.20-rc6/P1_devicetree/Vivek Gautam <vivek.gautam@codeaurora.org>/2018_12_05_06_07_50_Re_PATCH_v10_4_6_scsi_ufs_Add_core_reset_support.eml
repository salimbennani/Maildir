Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 14:29:21 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A1E4F5804F7;
	Tue,  4 Dec 2018 22:08:32 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 22:08:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A87QFmRXHlEO5yIlsLE2WNb57b7DV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAvKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoyz?=
 =?us-ascii?q?b4UNAOQBM+hWrJTzqUUSohulHQmhBvjiyiNUinLswaE2z/gtHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOagdUOC10rfHzTbeZP1Xwzj99ZTIfQokofqRWr9wb8vRyVcxGAPGlFmQ?=
 =?us-ascii?q?ppbqPy6J1usXtmiW9PZvVeWyhGE5sQ5xvyKvxsA2iobTnI4VzUrE9SpgzYszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMsyyWLZZ6T808T21ypSo3yaEKtYS6cSUI0Jgr2QLTZvidf4WL?=
 =?us-ascii?q?4h/vTvidLSlmiH5/Zb6yhRK//E69wePmTMa0ykxFri9dn9nMqH8N0xvT59CZSv?=
 =?us-ascii?q?ty4EihwyyD1wPN5eFeJ0A7i67bJ4Qmwr4qmZofqUXDHinol0XqlKKaaFko9+yy?=
 =?us-ascii?q?5+j6bLjquIWQO5J3hw3iKKgjm86yDfw9MgcUXmib/eq81Kfk/U38WLhKivw2kq?=
 =?us-ascii?q?/EsJHVPMgbpbC2AxVT0ok97xazFjCm0doenXYZNlJIYwyHj4f3NFHUOvz4Dumw?=
 =?us-ascii?q?g06qkDh1w/DKJLrhAo/CLnTbirfuYa5961JAyAo01d1f45NUCrIfL/7pVU7xqc?=
 =?us-ascii?q?fVDhs4Mwyy3ubmB89x1oIYWWKTHKCZNLnevkOP5uIqO+OMfpMauC7hK/g54P7j?=
 =?us-ascii?q?lX85lkUcfam1x5QXb2q0HvR7I0qDZ3rsjcwMEWMLvgo4Uezrh0eOUT9VZ3auQa?=
 =?us-ascii?q?084is3B56hDYfGXoqtmqCO3D+nHp1KYWBLElKMEXD2eImeWPcMbySSIslmkjEf?=
 =?us-ascii?q?UbihSokh1QyhtQPgyrpnKPbU9TMctZ75yNd14OjTnwko9TNoF8Sdz32NT2Zsk2?=
 =?us-ascii?q?wSXD823Kd/oU9nxleZy6d4gedVFdhS5/NPTwc7OoTQz+18C9DuRA3Bes2FR0qh?=
 =?us-ascii?q?QtWjGTsxVM4+w8cSY0ZhHNWvlhPD0DCsA7MPk7yLBYY78qTT33XqI8Z9ynDG1L?=
 =?us-ascii?q?QujlU8Q8tPM3GmibB79wTJG4HJlECZnb6wdasAxC7N6HuDzW2WsU5FSgFwT7vK?=
 =?us-ascii?q?UWofZkTMq9T5/V3NT7mpBbQjMQtBzMqCJ7BOat3oi1VGWfjiNM7fY2K3h2e/Gx?=
 =?us-ascii?q?KIyqmQY4rtfmUXxD/dB1QckwAP4XaGMhAzCTq7rGLAEjNiD1LvbFnq8elltny7?=
 =?us-ascii?q?SFQ5zwWLb01nyrq09QQZhf2aS/MPwL0EvD0tpClzHFa4x9jWEcaPpxJ9fKVAZt?=
 =?us-ascii?q?Mw+EtH1WPctwx6IpygL6BjikQCcwhtuEPuzRF3CoRGkcglt34qyAtyKaSF0FJO?=
 =?us-ascii?q?bT+Y3JbwOqHJJWn25hygd6nW2lTG2taM5qgP8Og4q0nkvAyxDEUi92to0tZL3H?=
 =?us-ascii?q?qc/JnFFxcSXo/rXUYx9Bh6oK/abzI554PV031sLKa1viXD29IvGOsq1BKgc81D?=
 =?us-ascii?q?P6ODEQ/4C9caCNS2KOw2h1ipaQoJPeBP9KIuI8yqbfqH2K6xM+ZmkzKrlmBH4I?=
 =?us-ascii?q?F70kKR+CtwUO/I35AZw/6G2guLTSvzjFCkssrvg4BLeSkSHnajySjjHINRfKxy?=
 =?us-ascii?q?cpoRBme0PsK3wc9yh5jzVH5C9V6vHk8J19WteRWPcVP9xwpQ1UIMrHyjmCu4yS?=
 =?us-ascii?q?F0kj4zoqqe2izO3/rtdB4dNmFXQ2liiE/mIZKogNACQEiocw8pmQOl5Eb73aRa?=
 =?us-ascii?q?pL5zL3LOQUdOZCX2K2BiUq2ttruNecJP6ZUosTlJX+S4e1yVVrn9ox4C2SP5A2?=
 =?us-ascii?q?Re3Cw7dy2tupjhnRx1knidLHVwrHreY81w3g3Q5N/fRf5Q2DoJWi94hCLTBli9?=
 =?us-ascii?q?Odmp4NqVm43CsuC4S2KuSJlTfTP3woOHsSux/XdqDgGnn/Cvht3nFhA30C/h2N?=
 =?us-ascii?q?ltTynIrhf8Yo/w2qS+MOJneFRoBVDm58p7HIF+jpU/hJUK1XcGgZWV+GINkX3v?=
 =?us-ascii?q?PtVDxaL+cH0NSCYIw9HP4Qjpwk1jLm+TyIL/WXWQ2c9hZ9i8YmML1SMx9cFKCK?=
 =?us-ascii?q?GI7LNamSt5uEa3rQXUYfJlhDcS1eMu6GIGg+EOoActyySdArMIEkVCMy3jiQ+I?=
 =?us-ascii?q?78ygo6VNf2mgb6Kw1EVlkNClDbGCpBxcWXnjdpcjGy9w8ttwMFbW3HLv7YHkfc?=
 =?us-ascii?q?HabcgPuR2MjxfAk+9VJYotlvoNgCprI2P8smcjy+4mlhxuxpC6sZODK2Vs+qK5?=
 =?us-ascii?q?HxFZOif0Z8MV5jHik6JektyK0ICoG5VrAi8LU4fwTfK0DDISsuzqOB2UHz07rn?=
 =?us-ascii?q?ebBKDTHQuC6Ep9q3LPEparN2yYJXUDzNViQgWdK1JbgAwOQDo6mZs5HBiwxMP9?=
 =?us-ascii?q?aEd5+iwR5lngpxtO0O1oMgfwUnzFqAe0cDs0S4WfLBlL7gFE/UjVKteT7uZyHy?=
 =?us-ascii?q?Fe452goxaBKm2dZwRUE24JXlaICEzkPrmr/dPA6fSXBvKiL/vSZrWDsexfV/CV?=
 =?us-ascii?q?xZK2z4tp5TCMOt+UPnllCf071VFOXXR4G8TfhjUORDYblyPLb86Huhi8/jd7od?=
 =?us-ascii?q?y48PTuQAjv/5eAC6NOMdVz/BC7maeDOPCRhCZ6KjZY14kAxXzSyLgY014dlTtu?=
 =?us-ascii?q?dyS2EbkbsS7NTaTQmrJYDhIBaiNzMtdI4Lw43gVXJcHbjdb13KZijvEpE1dFSU?=
 =?us-ascii?q?DhmsaxaMMQPmGyL0nHC1iLNbicIT3Lwtr6Yae9Sb1WkeVVuAe8uTedE0//IDuD?=
 =?us-ascii?q?kyPlWAyoMeFJlCubJgBRuJmhchZxDmjuVM7mahy+MNNtkTI626E7hnPUOm4aKj?=
 =?us-ascii?q?V8d0JNrruN7SJXmPl/GmpB7mZ7IumAgSqW8+7YKpMOu/txHit0j/5a4Gg9y7ZN?=
 =?us-ascii?q?7CBLXvp1mC7Trt5ou16nk+mPxSBhUBpBsTtLgIOLvUN/OaTW7JVAWHDE/A4T4m?=
 =?us-ascii?q?WUERgFu9xlCti885xXn/PGkurcNTAKp9nd+8Q0DM/YJcuaKn07OFzuAjGCXyUf?=
 =?us-ascii?q?Sjv+C2DBik8Vv/iP6nSQ5swkq4bhm9wBQ6JHXVkdHfQWB014BtsYKdFwRDxywu?=
 =?us-ascii?q?3Tt9IB+Xfr9EqZf85dpJ2SE6vKWfg=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAAADawdch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBggCBaxQTg3mIGY4bFJc4FIFfFBgTAYdNIjQJDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBCA0JCCkjDII2JAGCYQEBAQEDAQIgBBkBATcBBQkBAQoLCgMCAiYCAgMfC?=
 =?us-ascii?q?ggBBQEcBgsIBQMTgwaCAgWZLzyKHXB8M4J2AQEFhygIgQuJd4EcgVc/gRGDEoR?=
 =?us-ascii?q?lBYMbgleJKoF5hQ5RjwlGBwKCIASPHRiJYIdMmGoPIYElgg0zGjB0BoI1ghsMF?=
 =?us-ascii?q?4hehUc4MoEFAQGIWimCJAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAAADawdch0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBggC?=
 =?us-ascii?q?BaxQTg3mIGY4bFJc4FIFfFBgTAYdNIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjD?=
 =?us-ascii?q?II2JAGCYQEBAQEDAQIgBBkBATcBBQkBAQoLCgMCAiYCAgMfCggBBQEcBgsIBQM?=
 =?us-ascii?q?TgwaCAgWZLzyKHXB8M4J2AQEFhygIgQuJd4EcgVc/gRGDEoRlBYMbgleJKoF5h?=
 =?us-ascii?q?Q5RjwlGBwKCIASPHRiJYIdMmGoPIYElgg0zGjB0BoI1ghsMF4hehUc4MoEFAQG?=
 =?us-ascii?q?IWimCJAEB?=
X-IronPort-AV: E=Sophos;i="5.56,317,1539673200"; 
   d="scan'208";a="43605164"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 04 Dec 2018 22:08:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727069AbeLEGIG (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 01:08:06 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:59476 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726171AbeLEGIF (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 01:08:05 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id B50D26028B; Wed,  5 Dec 2018 06:08:03 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543990083;
        bh=VW95LIG7I1iOe6p9U9kcZRxLDuZCFsjT6uTPka6QzZQ=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=mT+miy/IQJdK7HQ+8HdyHvrzuRp0Gu67ZVgViRpaFb/HwO75SRkWuZuwr0KQUOfGT
         L5U9StTsG3df+Wimto0uCAvi3S4pv+Aw8GIxz+EjVfssfjj+hYwTbKS9gV3UjZI5Ci
         s6SfHEZcQXkSBUiy+HaGEQuA1/k501Aoe1aQcO9o=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from mail-qk1-f179.google.com (mail-qk1-f179.google.com [209.85.222.179])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: vivek.gautam@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id E13D0607B5;
        Wed,  5 Dec 2018 06:08:02 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543990083;
        bh=VW95LIG7I1iOe6p9U9kcZRxLDuZCFsjT6uTPka6QzZQ=;
        h=References:In-Reply-To:From:Date:Subject:To:Cc:From;
        b=mT+miy/IQJdK7HQ+8HdyHvrzuRp0Gu67ZVgViRpaFb/HwO75SRkWuZuwr0KQUOfGT
         L5U9StTsG3df+Wimto0uCAvi3S4pv+Aw8GIxz+EjVfssfjj+hYwTbKS9gV3UjZI5Ci
         s6SfHEZcQXkSBUiy+HaGEQuA1/k501Aoe1aQcO9o=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org E13D0607B5
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=vivek.gautam@codeaurora.org
Received: by mail-qk1-f179.google.com with SMTP id o89so11231290qko.0;
        Tue, 04 Dec 2018 22:08:02 -0800 (PST)
X-Gm-Message-State: AA+aEWbtVtsU9w/927G9H3vhMjwC4qV5tdO7ZK3QAIxB8N3Ngoujtk0b
        cnnrsjG2u1kcvfM0XB/6DcF71RkhdY2OQwaCve4=
X-Google-Smtp-Source: AFSGD/UaXvsrh3RSPkCTaILjW6cVa0fVhbx8P6L6TprMUzj6Tla0n5o0TzQRqbYSynDeNn8oXuiR3fj126V6qkxDWAs=
X-Received: by 2002:a37:b8a:: with SMTP id 132mr21390572qkl.140.1543990082141;
 Tue, 04 Dec 2018 22:08:02 -0800 (PST)
MIME-Version: 1.0
References: <1540269361-28185-1-git-send-email-cang@codeaurora.org> <1540269361-28185-5-git-send-email-cang@codeaurora.org>
In-Reply-To: <1540269361-28185-5-git-send-email-cang@codeaurora.org>
From: Vivek Gautam <vivek.gautam@codeaurora.org>
Date: Wed, 5 Dec 2018 11:37:50 +0530
X-Gmail-Original-Message-ID: <CAFp+6iFi6dHnu_xVc63mdGFywWz7LxSKxW4UeoqHvKkLwKF1LQ@mail.gmail.com>
Message-ID: <CAFp+6iFi6dHnu_xVc63mdGFywWz7LxSKxW4UeoqHvKkLwKF1LQ@mail.gmail.com>
Subject: Re: [PATCH v10 4/6] scsi: ufs: Add core reset support
To: Can Guo <cang@codeaurora.org>
Cc: Subhash Jadavani <subhashj@codeaurora.org>,
        asutoshd@codeaurora.org, evgreen@chromium.org,
        Manu Gautam <mgautam@codeaurora.org>, kishon <kishon@ti.com>,
        "robh+dt" <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>,
        open list <linux-kernel@vger.kernel.org>,
        "open list:OPEN FIRMWARE AND FLATTENED DEVICE TREE BINDINGS" 
        <devicetree@vger.kernel.org>,
        linux-arm-msm <linux-arm-msm@vger.kernel.org>,
        dovl@codeaurora.org, anischal@codeaurora.org,
        Bjorn Andersson <bjorn.andersson@linaro.org>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Oct 23, 2018 at 10:06 AM Can Guo <cang@codeaurora.org> wrote:
>
> From: Dov Levenglick <dovl@codeaurora.org>
>
> Enables core reset support. Add full initialization of the PHY and the
> controller before initializing UFS PHY and during link recovery.
>
> Signed-off-by: Dov Levenglick <dovl@codeaurora.org>
> Signed-off-by: Amit Nischal <anischal@codeaurora.org>
> Signed-off-by: Subhash Jadavani <subhashj@codeaurora.org>
> Signed-off-by: Can Guo <cang@codeaurora.org>
> ---
>  drivers/scsi/ufs/ufs-qcom.c      | 30 ++++++++++++++++++++++++++++++
>  drivers/scsi/ufs/ufshcd-pltfrm.c | 22 ++++++++++++++++++++++
>  drivers/scsi/ufs/ufshcd.c        | 13 +++++++++++++
>  drivers/scsi/ufs/ufshcd.h        | 12 ++++++++++++
>  4 files changed, 77 insertions(+)
>
> diff --git a/drivers/scsi/ufs/ufs-qcom.c b/drivers/scsi/ufs/ufs-qcom.c
> index 2b38db2..698b92d 100644
> --- a/drivers/scsi/ufs/ufs-qcom.c
> +++ b/drivers/scsi/ufs/ufs-qcom.c
> @@ -616,6 +616,35 @@ static int ufs_qcom_resume(struct ufs_hba *hba, enum ufs_pm_op pm_op)
>         return err;
>  }
>
> +static int ufs_qcom_core_reset(struct ufs_hba *hba)
> +{
> +       int ret = -ENOTSUPP;
> +
> +       if (!hba->core_reset) {

This check doesn't make much sense.
You call this ".core_reset" callback only when "hba->core_reset" is available.
Why do we need to check this again here?

> +               dev_err(hba->dev, "%s: failed, err = %d\n", __func__,
> +                               ret);
> +               goto out;
> +       }
> +
> +       ret = reset_control_assert(hba->core_reset);
> +       if (ret) {
> +               dev_err(hba->dev, "core_reset assert failed, err = %d\n",
> +                               ret);
> +               goto out;
> +       }
> +
> +       /* As per spec, delay is required to let reset assert go through */
> +       usleep_range(1, 2);
> +
> +       ret = reset_control_deassert(hba->core_reset);
> +       if (ret)
> +               dev_err(hba->dev, "core_reset deassert failed, err = %d\n",
> +                               ret);
> +
> +out:
> +       return ret;
> +}
> +
>  struct ufs_qcom_dev_params {
>         u32 pwm_rx_gear;        /* pwm rx gear to work in */
>         u32 pwm_tx_gear;        /* pwm tx gear to work in */
> @@ -1670,6 +1699,7 @@ static void ufs_qcom_dump_dbg_regs(struct ufs_hba *hba)
>         .apply_dev_quirks       = ufs_qcom_apply_dev_quirks,
>         .suspend                = ufs_qcom_suspend,
>         .resume                 = ufs_qcom_resume,
> +       .core_reset             = ufs_qcom_core_reset,
>         .dbg_register_dump      = ufs_qcom_dump_dbg_regs,
>  };
>
> diff --git a/drivers/scsi/ufs/ufshcd-pltfrm.c b/drivers/scsi/ufs/ufshcd-pltfrm.c
> index e82bde0..dab11a7 100644
> --- a/drivers/scsi/ufs/ufshcd-pltfrm.c
> +++ b/drivers/scsi/ufs/ufshcd-pltfrm.c
> @@ -42,6 +42,22 @@
>
>  #define UFSHCD_DEFAULT_LANES_PER_DIRECTION             2
>
> +static int ufshcd_parse_reset_info(struct ufs_hba *hba)
> +{
> +       int ret = 0;
> +
> +       hba->core_reset = devm_reset_control_get_optional_exclusive(hba->dev,
> +                               "rst");
> +       if (IS_ERR(hba->core_reset)) {
> +               ret = PTR_ERR(hba->core_reset);

First thing, you need to check here for EPROBE_DEFER, and return that
as reset framework may not be probed when this is probing.

Secondly, this whole parse thing can as well be moved to vops (variant ops) as
that's the device having knowledge of resets. Moreover, not all qcom
ufs controllers
have the reset, so I am tilting towards adding a of_match_data field and
corresponding compatible binding for sdm845 (and may be for future
SoCs too) so that we can make this reset mandatory for SoCs
where things won't work without it.
Simply acknowledging the absence of the reset and marking it as NULL
won't help 845 and brothers that need the reset.

Or, do we have any other solution to make this reset mandatory for 845?

> +               dev_err(hba->dev, "core_reset unavailable,err = %d\n",
> +                               ret);
> +               hba->core_reset = NULL;
> +       }
> +
> +       return ret;
> +}
> +
>  static int ufshcd_parse_clock_info(struct ufs_hba *hba)
>  {
>         int ret = 0;
> @@ -340,6 +356,12 @@ int ufshcd_pltfrm_init(struct platform_device *pdev,
>                 goto dealloc_host;
>         }
>
> +       err = ufshcd_parse_reset_info(hba);
> +       if (err) {
> +               dev_err(&pdev->dev, "%s: reset parse failed %d\n",
> +                               __func__, err);
> +       }
> +
>         pm_runtime_set_active(&pdev->dev);
>         pm_runtime_enable(&pdev->dev);
>
> diff --git a/drivers/scsi/ufs/ufshcd.c b/drivers/scsi/ufs/ufshcd.c
> index a355d98..d18c3af 100644
> --- a/drivers/scsi/ufs/ufshcd.c
> +++ b/drivers/scsi/ufs/ufshcd.c
> @@ -3657,6 +3657,15 @@ static int ufshcd_link_recovery(struct ufs_hba *hba)
>         ufshcd_set_eh_in_progress(hba);
>         spin_unlock_irqrestore(hba->host->host_lock, flags);
>
> +       if (hba->core_reset) {
> +               ret = ufshcd_vops_core_reset(hba);
> +               if (ret)
> +                       dev_err(hba->dev,
> +                               "full reset returned %d, trying to recover the link\n",
> +                               ret);
> +               return ret;
> +       }
> +
>         ret = ufshcd_host_reset_and_restore(hba);
>
>         spin_lock_irqsave(hba->host->host_lock, flags);
> @@ -7948,6 +7957,10 @@ int ufshcd_init(struct ufs_hba *hba, void __iomem *mmio_base, unsigned int irq)
>                 goto exit_gating;
>         }
>
> +       /* Reset controller to power on reset (POR) state */
> +       if (hba->core_reset)
> +               ufshcd_vops_core_reset(hba);
> +
>         /* Host controller enable */
>         err = ufshcd_hba_enable(hba);
>         if (err) {
> diff --git a/drivers/scsi/ufs/ufshcd.h b/drivers/scsi/ufs/ufshcd.h
> index 1332e54..aa046a1 100644
> --- a/drivers/scsi/ufs/ufshcd.h
> +++ b/drivers/scsi/ufs/ufshcd.h
> @@ -55,6 +55,7 @@
>  #include <linux/clk.h>
>  #include <linux/completion.h>
>  #include <linux/regulator/consumer.h>
> +#include <linux/reset.h>
>  #include "unipro.h"
>
>  #include <asm/irq.h>
> @@ -295,6 +296,8 @@ struct ufs_pwr_mode_info {
>   * @apply_dev_quirks: called to apply device specific quirks
>   * @suspend: called during host controller PM callback
>   * @resume: called during host controller PM callback
> + * @core_reset:  called before UFS PHY init and during link recovery for
> + *              handling variant specific implementations of resetting the hci
>   * @dbg_register_dump: used to dump controller debug information
>   * @phy_initialization: used to initialize phys
>   */
> @@ -323,6 +326,7 @@ struct ufs_hba_variant_ops {
>         int     (*apply_dev_quirks)(struct ufs_hba *);
>         int     (*suspend)(struct ufs_hba *, enum ufs_pm_op);
>         int     (*resume)(struct ufs_hba *, enum ufs_pm_op);
> +       int     (*core_reset)(struct ufs_hba *);
>         void    (*dbg_register_dump)(struct ufs_hba *hba);
>         int     (*phy_initialization)(struct ufs_hba *);
>  };
> @@ -678,6 +682,7 @@ struct ufs_hba {
>         bool is_urgent_bkops_lvl_checked;
>
>         struct rw_semaphore clk_scaling_lock;
> +       struct reset_control *core_reset;
>         struct ufs_desc_size desc_size;
>  };
>
> @@ -979,6 +984,13 @@ static inline int ufshcd_vops_resume(struct ufs_hba *hba, enum ufs_pm_op op)
>         return 0;
>  }
>
> +static inline int ufshcd_vops_core_reset(struct ufs_hba *hba)
> +{
> +       if (hba->vops && hba->vops->core_reset)
> +               return hba->vops->core_reset(hba);
> +       return 0;
> +}
> +
>  static inline void ufshcd_vops_dbg_register_dump(struct ufs_hba *hba)
>  {
>         if (hba->vops && hba->vops->dbg_register_dump)
> --
> The Qualcomm Innovation Center, Inc. is a member of the Code Aurora Forum,
> a Linux Foundation Collaborative Project
>


-- 
QUALCOMM INDIA, on behalf of Qualcomm Innovation Center, Inc. is a member
of Code Aurora Forum, hosted by The Linux Foundation
