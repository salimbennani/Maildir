Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:55:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A46695804FD
	for <like.xu@linux.intel.com>; Sat,  8 Dec 2018 03:27:13 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Dec 2018 03:27:13 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AucXZ+B04vQF04sRssmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWKf3xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPWSJPAYGz?=
 =?us-ascii?q?b4UAAOUdMuhWspH9qlkMoxaxGAWhCv/jxSFThnLtwa06yv4sHR3a0AA8Hd8Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41K7Gwi/Zb/xKwDvw9I7IfQ07ofaWQLl+d9fRyVMxGAzfk1Wb?=
 =?us-ascii?q?tIvoPzaP2eQXr2eU9exgWv+1i2E5sQ1xpiWvxt0yhYbTm4IY0UrE+jtkz4Y1P9?=
 =?us-ascii?q?K4VFR3bsKjEJtVriyXMZZ9TM0lQ2Ftoik6y7sGtIanfCkK0JQo2QTTa/qdfIiN?=
 =?us-ascii?q?/B3uUvuaLzRghH99Zr6zmxW//VK9xuHhVcS4ykhGoyRFn9XWq3wA1QTf5tabRv?=
 =?us-ascii?q?Z55EutxDiC2x7J5u1ZIk05m7DXJ4Aiz7M2i5Edq17MHjXsl0XzlKKWdlsr+uyv?=
 =?us-ascii?q?6+n/ZrXmp4ScN5Nvig3kPaQunNG/Df4/MggUUGiX4eW81Lv98k3lWLhGkOE6n6?=
 =?us-ascii?q?rDvJzHOMgWpbS1DxFb34sj8RqzEjWr3MwdnXYdLVJFfByHj5LuO1HLOP34FOmw?=
 =?us-ascii?q?g1GxkDty2v/JIKPhDYvJLnTai7jheqt960hAxwUt1tBT4JZUCrACIP3tQEPwu8?=
 =?us-ascii?q?HYAwc9Mwy1xebnFdp82pkfWWKJHq+WLqfSvUWU6eIoJumBf4kVuDH7K/gq4f7u?=
 =?us-ascii?q?kGU1mVgHfammxZcXcmy3Hux6I0WFZnrhmtMBEWYJvgUgVuDrh0CCXCVXZ3azWa?=
 =?us-ascii?q?I8+z46BJinDYfFWoCinriB0D2nEZ1RY2AVQm2KCmriIoWYR+8XOmXVJs56jidC?=
 =?us-ascii?q?U7+nRIk8kxa0u0j/wrtjK+PSvSoAqZPk0sMy/uDWiFQ++CJ5C5eg1XqQRTRxl2?=
 =?us-ascii?q?IMWzhkxa16vAlxx0mO1e1ijuVFGMdPz/VOVAg8KNjb1eMtEM34WA/KYoKUTk27?=
 =?us-ascii?q?SM6tGzA7Q4ENxIoXbkNgXtmvkB3H9yytBbATivqMHpNn3Ljb2i3ULtx2jl/A2L?=
 =?us-ascii?q?Ogx307WMZGKCXyg6dl/AHVC5TE1UGEjaujaIwG0SLN/XvFxm2L6hILGDVsWLnI?=
 =?us-ascii?q?CChMLnDdqs70swabF+ej?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A0AgCbqQtcmBHrdtBkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YExgTmBKYN6iHiLMptRFBgDEYddIjgSAQMBAQEBAQECARMBAQEBAQgLCwYbDiM?=
 =?us-ascii?q?MgjYFAgMaAQaCXAMDAQIgIwopAwMBAgYBASQCIgQCAgMBUxkFgxwBggEBBKcDg?=
 =?us-ascii?q?S+FQINkgQ2BC4ctg2qCFoERixeCVwKPO3qQNQcChwiKOwsYgimHO4dXh3aJPId?=
 =?us-ascii?q?8gV2BdjMaI1CCbAmKUIEUhHM8MYEHHIk0gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0A0AgCbqQtcmBHrdtBkHQEBBQEHBQGBZYExgTmBKYN6iHi?=
 =?us-ascii?q?LMptRFBgDEYddIjgSAQMBAQEBAQECARMBAQEBAQgLCwYbDiMMgjYFAgMaAQaCX?=
 =?us-ascii?q?AMDAQIgIwopAwMBAgYBASQCIgQCAgMBUxkFgxwBggEBBKcDgS+FQINkgQ2BC4c?=
 =?us-ascii?q?tg2qCFoERixeCVwKPO3qQNQcChwiKOwsYgimHO4dXh3aJPId8gV2BdjMaI1CCb?=
 =?us-ascii?q?AmKUIEUhHM8MYEHHIk0gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,330,1539673200"; 
   d="scan'208";a="141311623"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 08 Dec 2018 03:27:12 -0800
Received: from localhost ([::1]:50391 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gValL-0007O0-QY
	for like.xu@linux.intel.com; Sat, 08 Dec 2018 06:27:11 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:60019)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <marcandre.lureau@redhat.com>) id 1gVace-00059Y-RZ
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:18:13 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <marcandre.lureau@redhat.com>) id 1gVacd-0004F6-TR
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:18:12 -0500
Received: from mx1.redhat.com ([209.132.183.28]:36506)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <marcandre.lureau@redhat.com>)
	id 1gVacd-0004Ey-Jq
	for qemu-devel@nongnu.org; Sat, 08 Dec 2018 06:18:11 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com
	[10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id EE881307CDFF;
	Sat,  8 Dec 2018 11:18:10 +0000 (UTC)
Received: from localhost (unknown [10.36.112.11])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 5DC4980F6;
	Sat,  8 Dec 2018 11:18:07 +0000 (UTC)
From: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>
To: qemu-devel@nongnu.org
Date: Sat,  8 Dec 2018 15:15:55 +0400
Message-Id: <20181208111606.8505-17-marcandre.lureau@redhat.com>
In-Reply-To: <20181208111606.8505-1-marcandre.lureau@redhat.com>
References: <20181208111606.8505-1-marcandre.lureau@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.49]);
	Sat, 08 Dec 2018 11:18:11 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH for-4.0 v7 16/27] qapi: add 'if' to union
 members
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>,
	armbru@redhat.com, Michael Roth <mdroth@linux.vnet.ibm.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

Add 'if' key to union members:

{ 'union': 'TestIfUnion', 'data':
    'mem': { 'type': 'str', 'if': 'COND'} }

The generated code remains unconditional for now. Later patches
generate the conditionals.

Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com>
---
 scripts/qapi/common.py                  | 17 +++++++++--------
 docs/devel/qapi-code-gen.txt            |  2 +-
 tests/qapi-schema/qapi-schema-test.json |  4 +++-
 tests/qapi-schema/qapi-schema-test.out  |  4 ++++
 tests/qapi-schema/test-qapi.py          |  1 +
 5 files changed, 18 insertions(+), 10 deletions(-)

diff --git a/scripts/qapi/common.py b/scripts/qapi/common.py
index f79b3fad54..fd622313cb 100644
--- a/scripts/qapi/common.py
+++ b/scripts/qapi/common.py
@@ -823,7 +823,7 @@ def check_union(expr, info):
         check_name(info, "Member of union '%s'" % name, key)
         if isinstance(value, dict):
             check_known_keys(info, "member '%s' of union '%s'" % (key, n=
ame),
-                             value, ['type'], [])
+                             value, ['type'], ['if'])
             typ =3D value['type']
         else:
             typ =3D value
@@ -1513,8 +1513,8 @@ class QAPISchemaObjectTypeVariants(object):
 class QAPISchemaObjectTypeVariant(QAPISchemaObjectTypeMember):
     role =3D 'branch'
=20
-    def __init__(self, name, typ):
-        QAPISchemaObjectTypeMember.__init__(self, name, typ, False)
+    def __init__(self, name, typ, ifcond=3DNone):
+        QAPISchemaObjectTypeMember.__init__(self, name, typ, False, ifco=
nd)
=20
=20
 class QAPISchemaAlternateType(QAPISchemaType):
@@ -1796,14 +1796,14 @@ class QAPISchema(object):
     def _make_variant(self, case, typ):
         return QAPISchemaObjectTypeVariant(case, typ)
=20
-    def _make_simple_variant(self, case, typ, info):
+    def _make_simple_variant(self, case, typ, ifcond, info):
         if isinstance(typ, list):
             assert len(typ) =3D=3D 1
             typ =3D self._make_array_type(typ[0], info)
         typ =3D self._make_implicit_object_type(
             typ, info, None, self.lookup_type(typ),
             'wrapper', [self._make_member('data', typ, None, info)])
-        return QAPISchemaObjectTypeVariant(case, typ)
+        return QAPISchemaObjectTypeVariant(case, typ, ifcond)
=20
     def _def_union_type(self, expr, info, doc):
         name =3D expr['union']
@@ -1821,10 +1821,11 @@ class QAPISchema(object):
                         for (key, value) in data.items()]
             members =3D []
         else:
-            variants =3D [self._make_simple_variant(key, value['type'], =
info)
+            variants =3D [self._make_simple_variant(key, value['type'],
+                                                  value.get('if'), info)
                         for (key, value) in data.items()]
-            typ =3D self._make_implicit_enum_type(name, info, ifcond,
-                                                [v.name for v in variant=
s])
+            enum =3D [{'name': v.name, 'if': v.ifcond} for v in variants=
]
+            typ =3D self._make_implicit_enum_type(name, info, ifcond, en=
um)
             tag_member =3D QAPISchemaObjectTypeMember('type', typ, False=
)
             members =3D [tag_member]
         self._def_entity(
diff --git a/docs/devel/qapi-code-gen.txt b/docs/devel/qapi-code-gen.txt
index e6fff32241..6f2457a2e0 100644
--- a/docs/devel/qapi-code-gen.txt
+++ b/docs/devel/qapi-code-gen.txt
@@ -754,7 +754,7 @@ gets its generated code guarded like this:
=20
 Where a member can be defined with a single string value for its type,
 it is also possible to supply a dictionary instead with both 'type'
-and 'if' keys. (TODO: union and alternate)
+and 'if' keys. (TODO: alternate)
=20
 Example: a conditional 'bar' member
=20
diff --git a/tests/qapi-schema/qapi-schema-test.json b/tests/qapi-schema/=
qapi-schema-test.json
index b8565a3913..6e9e4e14d9 100644
--- a/tests/qapi-schema/qapi-schema-test.json
+++ b/tests/qapi-schema/qapi-schema-test.json
@@ -210,7 +210,9 @@
   [ 'foo', { 'name' : 'bar', 'if': 'defined(TEST_IF_ENUM_BAR)' } ],
   'if': 'defined(TEST_IF_ENUM)' }
=20
-{ 'union': 'TestIfUnion', 'data': { 'foo': 'TestStruct' },
+{ 'union': 'TestIfUnion', 'data':
+  { 'foo': 'TestStruct',
+    'union_bar': { 'type': 'str', 'if': 'defined(TEST_IF_UNION_BAR)'} },
   'if': 'defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)' }
=20
 { 'alternate': 'TestIfAlternate', 'data': { 'foo': 'int', 'bar': 'TestSt=
ruct' },
diff --git a/tests/qapi-schema/qapi-schema-test.out b/tests/qapi-schema/q=
api-schema-test.out
index 23fb078b85..a342ecfc55 100644
--- a/tests/qapi-schema/qapi-schema-test.out
+++ b/tests/qapi-schema/qapi-schema-test.out
@@ -280,11 +280,15 @@ object q_obj_TestStruct-wrapper
     member data: TestStruct optional=3DFalse
 enum TestIfUnionKind
     member foo
+    member union_bar
+        if ['defined(TEST_IF_UNION_BAR)']
     if ['defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)']
 object TestIfUnion
     member type: TestIfUnionKind optional=3DFalse
     tag type
     case foo: q_obj_TestStruct-wrapper
+    case union_bar: q_obj_str-wrapper
+        if ['defined(TEST_IF_UNION_BAR)']
     if ['defined(TEST_IF_UNION) && defined(TEST_IF_STRUCT)']
 alternate TestIfAlternate
     tag type
diff --git a/tests/qapi-schema/test-qapi.py b/tests/qapi-schema/test-qapi=
.py
index 27081cb50c..d592854601 100644
--- a/tests/qapi-schema/test-qapi.py
+++ b/tests/qapi-schema/test-qapi.py
@@ -68,6 +68,7 @@ class QAPISchemaTestVisitor(QAPISchemaVisitor):
             print('    tag %s' % variants.tag_member.name)
             for v in variants.variants:
                 print('    case %s: %s' % (v.name, v.type.name))
+                QAPISchemaTestVisitor._print_if(v.ifcond, indent=3D8)
=20
     @staticmethod
     def _print_if(ifcond, indent=3D4):
--=20
2.20.0.rc1


