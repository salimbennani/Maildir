Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:50:17 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2890658042F;
	Thu,  6 Dec 2018 08:30:05 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 06 Dec 2018 08:30:05 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABSgKQBKfhCKECCfcXdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvr6rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModv2MqcSXue1x7TPwzXEa/NW3y3y6JLVeR0mpPGMXLRwccXWyUQ0FAPKkE+Q?=
 =?us-ascii?q?qYr7MDORzOgNtHKb7+V5WO+plmUpqBlxryCxysswjoTFnJ8Zx17a+Slj3Yo4Js?=
 =?us-ascii?q?G0RFR6bNOmCJdduCCXO5FrTs4sR2xkojs2xqMctZKlYSQHxpIqzAPFZfOdaYiH?=
 =?us-ascii?q?+BfjWf6RIThmgHJlf6qyhwi98Ue+0O3wTMq030hQripDjNbMsmoB1xvJ6siIUv?=
 =?us-ascii?q?d9/0Gh1iiT1w3L9O1IPUQ5mbDGJ5Mv3LI8jIcfvEffEiPsmUj7jreadkA+9eip?=
 =?us-ascii?q?7+TnbK/mppiZN4JsjgH+M6IumtGwAOghMQgBQXKb+eKi273n5EH5R7tLjvsona?=
 =?us-ascii?q?nDq53aO8sbqbCjAwNP0YYs9Qy/DzG439Qch3UHK0hFeB2fg4jzJ17OOOz4Deu4?=
 =?us-ascii?q?g1m0lDdrxvPGMaP7DpTCM3jOi7Phfbd7605Bxws/19Ff55RICr4fJPL/QFP+tN?=
 =?us-ascii?q?vdDhUhKQy73/7nCMlh1oMZQW+PArWWMKLOsVCS4eIjOemMZJIPtzb7JPgo/Pru?=
 =?us-ascii?q?jX4/mV8Acqilx5oXaHakHvt4J0WVe2bjgtAEEW0SpAoxUPTqiEGeUT5Uf3uyXa?=
 =?us-ascii?q?U86S8hBIKlCofDQIatgLua0Se/H51WYH1GC1+WHXfpcYWER+kDaCaILsB9lTwE?=
 =?us-ascii?q?UKCrS5U92hG2qA/6171nI/LO9S0DtZLj09t16/fJlR4o9zx5FMCd02CLT2FpkW?=
 =?us-ascii?q?IEXT423KZjoUNjzlePy7R3g/tdFdZL/fNGTh86NYLAz+x9E93yWRjOftGTRFai?=
 =?us-ascii?q?Q9WpGzcxTt0qzt8KYkZ9Hciijx/Z0yqrBb8Vi6KEBJgu/q3A2HjxIt53y2za26?=
 =?us-ascii?q?k5k1kmXsxPOHW7iaFl6QjcGZTFk0WDmKasbqQTwijN+GCHzWqNuUFYVBV9UaHE?=
 =?us-ascii?q?XXAZe0vXos715kLET7+yF7snNhFNxtKFKqtPctfpl0lJRO//ONTCZGK8g3q/Cg?=
 =?us-ascii?q?yWxrySdobqe38S3CPGCEcalQAe5nKGNQk4Bie8rGPSFj1uFVTzY0zy9elysm+0?=
 =?us-ascii?q?TkgxzwuSdU1uy6K1+gIJhfybU/4TwrMEuCImqzVoHFa838jaC8aaqwpmZqVcZd?=
 =?us-ascii?q?I94FFI1W/Cswx9P5qgL71th1IEcgR3uV/u2AtzColajccqq3YqxhJoKa2EyFNB?=
 =?us-ascii?q?ay+Y3ZfoN7LNLmn94h+uZLDW213Ey9mW57oA5+4+q1XguwGpCFEv83Fm09lTzn?=
 =?us-ascii?q?ud6Y/GDAsUUZLtTEk38wJ2qK3dYik4/4nUz2FjMbGosj/e3NIkHOskygu6c9hD?=
 =?us-ascii?q?Kq+FFQ/yHNccB8ihM+Eqn1mpbhQZPOFd7qI0PsWmd+eY166vJupvgDWmjWFf6o?=
 =?us-ascii?q?Bnzk2M7zZ8SvLP35sd2fGY3xeIWC3mjFi8tcD7g4ZEai8IHmq+0CTrGJReZqlv?=
 =?us-ascii?q?cokVE2euJMu3y856h57sXX5Y6VGiC0kH2M+vZRqdcVj90RdM2kQQpHytgTG4wC?=
 =?us-ascii?q?BskzE1sqqf2zTDwuTjdBYdOm9HXnJijUrqIYWvi9AaXU6obxUmlRe/5Eb6wbRb?=
 =?us-ascii?q?q7p7L2XJXUhIeC32JXl4UqSsrrqCf9JP6JQwvCVVSuu8e1OaSr36oxcAyCPsBW?=
 =?us-ascii?q?hexDM6dzGspJr5mQd3iGacLHZ1sXrYdtt8xRbZ5NzAW/FR2iAKSzV/iTnSHlK8?=
 =?us-ascii?q?JcWm/c2Il5ffteCzT2KgWYdUcSXxz4OAtS276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzkogqi5ERw3QahoiV8mABkWf8?=
 =?us-ascii?q?Kthb3aP+bHwQRT8E2dLV4Q7l2FF9IXKN3Y72SnKdws55bdmgfmwWwj4979xNCK?=
 =?us-ascii?q?qM6bxEnCh1rUCioQPff/d9hSsdxuU06HEBne4JogUtwz6ZArATG0lYICPtmw6J?=
 =?us-ascii?q?79C4sKVYemKvfaKs20p5mNCrFKuCrR1EWHblZpciGjd97tl4MFLJynHy65vreN?=
 =?us-ascii?q?/NbdIIrR2UkgzNj+xUKJI3i/oLijBrOWP7vX051eE7iQZi0o29vIiCM29t5r62?=
 =?us-ascii?q?AgZENj3pYMMe4irigrxZnsaSwoCjBJFhGigQUZvsTPKoFi8StPv9OwaPFj08tm?=
 =?us-ascii?q?mUGb7FEQCD70dmqmrFE4q3OHGPOHkZ0dJiSQGfJENFhQAbQi46koQlFgywx8zh?=
 =?us-ascii?q?bUR55i0X5lHisRtB0eZoNxj5UmfCqwakcDY0SJ6DLBVI6gFO/VvaMcub7uhrBS?=
 =?us-ascii?q?FX4oWhrBCRKmycfwlJDWYJWlGdB1D+JLau48PM8/OfBuq4IPvDerGOqe1YV/eV?=
 =?us-ascii?q?ypOjyIpm/zCQNsqROnluFeE02k1GXXphAcTWhy0PSzALlyLKd8ObpAmz+ix0rs?=
 =?us-ascii?q?C88fTnQgHv5ZGIC7tdL9pv4Q22gbyYOu6UhSZ5LytY15wWyX/JzrgfwEAdiyV0?=
 =?us-ascii?q?ezaxFrQAsDbHTLjMla9PEx4bdyRzOdNS4KIhxQZNI9DUi9Pv2r58j/44EFNFVV?=
 =?us-ascii?q?3nmsG0as0GOWC9NFXbBEmVMLSKPyHEw8byYamkU71fkP1UtwGsuTacC0LjIjWD?=
 =?us-ascii?q?lzzzWx+zK+1DkCGbMwJYuIymdhZtCG7jTM/paxGhMd93iyE2zqMwhn/QKWEcNj?=
 =?us-ascii?q?18eVtXrrKM9SNYnul/G2tZ43tlN+aEnSOZ7+jeKpkOsPprAj57l+RV4Hkhz7tV?=
 =?us-ascii?q?7SdEROF6mSfIr95upU2mnfeLyjZ9TBVOrTNL18q3uhBZNKzfvrJAQ3ff4BUV7W?=
 =?us-ascii?q?iKEBMM749+B9Tp/aIWwdjVlbnvLy9C/sjP+s00Bs7IJcbBO30kZ0nHAjnRWSoD?=
 =?us-ascii?q?QjnjEGbbgUVH2KWX93uaqbA5p4LqlZ5ITaVUAg9mXsgGA1hoSYRRaKx8WSkpxP?=
 =?us-ascii?q?vC1JYF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AGAAAnTglch0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2snjBNfiy+CDRRollKBdg8BARgTAYRAAoM?=
 =?us-ascii?q?QBSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAjcGATgBA?=
 =?us-ascii?q?wEBCQEBBQULBgMBAgEJExIDDAUgAQUBAhIOEwWDHIFqAw0IBAGaRzyMPIJ3BYU?=
 =?us-ascii?q?DDYIUAgYSinGBHBeBf4ERgl01hE2DaYImAok1gW+EE5EoCYo7hwALGIFchRWCc?=
 =?us-ascii?q?YdULJg5BgIJBw8hgSWCDTMaCCgIbAaCNYIbDBeDSopUPzIBgQMBAQEOA4opAQE?=
X-IPAS-Result: =?us-ascii?q?A0AGAAAnTglch0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2snjBNfiy+CDRRollKBdg8BARgTAYRAAoMQBSI0CQ0BAwEBA?=
 =?us-ascii?q?QEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAjcGATgBAwEBCQEBBQULBgM?=
 =?us-ascii?q?BAgEJExIDDAUgAQUBAhIOEwWDHIFqAw0IBAGaRzyMPIJ3BYUDDYIUAgYSinGBH?=
 =?us-ascii?q?BeBf4ERgl01hE2DaYImAok1gW+EE5EoCYo7hwALGIFchRWCcYdULJg5BgIJBw8?=
 =?us-ascii?q?hgSWCDTMaCCgIbAaCNYIbDBeDSopUPzIBgQMBAQEOA4opAQE?=
X-IronPort-AV: E=Sophos;i="5.56,323,1539673200"; 
   d="scan'208";a="55823777"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 06 Dec 2018 08:30:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726215AbeLFQYA (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 6 Dec 2018 11:24:00 -0500
Received: from mail-wr1-f67.google.com ([209.85.221.67]:38062 "EHLO
        mail-wr1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725908AbeLFQX7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 6 Dec 2018 11:23:59 -0500
Received: by mail-wr1-f67.google.com with SMTP id v13so1085410wrw.5
        for <linux-kernel@vger.kernel.org>; Thu, 06 Dec 2018 08:23:57 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=VWAAkCawjwQLxdAls8KtL7gJfoLNQB5klFgyJ1pyUkY=;
        b=Byds0QY4m5ogBT0O7P0bfolIhN+JQloJHaMEZ5MNi4jqjrNTsdcG/1PNpun76E7NXF
         0xdmZmMALtYolCtSyAVrArOGqofypvgnA1DxD8CJtxNAAvxWuZcjEK8P3/MyYTdcXHQE
         ew5URbwR8SN833SpKRGFO//bZ0JNvRLO0Fje2i0KVviQjn9YEcMFQNXqIUPCY1+z7ydq
         NH4JO0Vyf4ROFoXr3sqUOEhkzP/EsaomLRzpTvWwVubBu+K5ZQKokrGRwHYJI4P5mxqI
         BE7ZmNFM5GuazpeBYEj8sSFLbrwqBicqJc9KlwjYXAZOUxM+hI7tIkK69wVrK/iEeAyy
         7pDQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
         :references:mime-version:content-disposition:in-reply-to:user-agent;
        bh=VWAAkCawjwQLxdAls8KtL7gJfoLNQB5klFgyJ1pyUkY=;
        b=OqmdKd/l4PRvVzIVnfYABk2skUlENgY9SsFS0HGH2S299w6odqhih+/0kcRv6DBaCT
         jvXnSkctIQxzQytuJHcCRl6lxKe4FsuGKAy33cDwDaGkNBzDB0XYlCZTwz1mgOXSQm69
         nZ2HVcMYAUvF/O7UzaPg7n8JG5HgL6urn8AFLcDoUK2G1PuINrpQU3aik4dCv/tfrB9u
         YaK9j1vdH9y/8mCOo0+flN6xsRniFsBKy/+Up+8jqgdswH04jemiP5GDIKlJzOKOg2dr
         sHlQ7whP2LdqB2A2vPDh9cxNyfWHPttuiRkmLzM9KvDXzc3vFRKACVPrPR+lOMQ78WA2
         7KTA==
X-Gm-Message-State: AA+aEWbQBmiCcYFV26My998L1z3hbZIBozo4y4CWy2N873AKWc90RT8y
        X6p7sUcL6KVV1vx5riIf+Js=
X-Google-Smtp-Source: AFSGD/U7DI8jIZNQN3VQXmUdpVBtj9FsAbXqNe9wTCl0L8dCcm6fgRdfuL+g1vxysFoQThhVxIXcjw==
X-Received: by 2002:a5d:6710:: with SMTP id o16mr26444446wru.152.1544113436720;
        Thu, 06 Dec 2018 08:23:56 -0800 (PST)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
        by smtp.gmail.com with ESMTPSA id z9sm1250760wrs.63.2018.12.06.08.23.55
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 06 Dec 2018 08:23:56 -0800 (PST)
Date: Thu, 6 Dec 2018 17:23:53 +0100
From: Ingo Molnar <mingo@kernel.org>
To: Sean Christopherson <sean.j.christopherson@intel.com>
Cc: Dave Hansen <dave.hansen@linux.intel.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        x86@kernel.org, "H. Peter Anvin" <hpa@zytor.com>,
        linux-kernel@vger.kernel.org,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Rik van Riel <riel@surriel.com>,
        Yu-cheng Yu <yu-cheng.yu@intel.com>
Subject: Re: [PATCH] x86/mm/fault: Streamline the fault error_code decoder
 some more
Message-ID: <20181206162353.GA119052@gmail.com>
References: <20181205163624.1842-1-sean.j.christopherson@intel.com>
 <20181206073409.GA64887@gmail.com>
 <20181206155336.GC31263@linux.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181206155336.GC31263@linux.intel.com>
User-Agent: Mutt/1.9.4 (2018-02-28)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


* Sean Christopherson <sean.j.christopherson@intel.com> wrote:

> On Thu, Dec 06, 2018 at 08:34:09AM +0100, Ingo Molnar wrote:
> > I like your '!' idea, but with a further simplification: how about using 
> > '-/+' differentiation and a single character and a fixed-length message.
> > 
> > The new output will be lines of:
> > 
> >   #PF error code: -P -W -U -S -I -K (0x00)
> >   ...
> >   #PF error code: -P -W +U +S -I -K (0x0c)
> >   ...
> >   #PF error code: +P +W +U +S +I +K (0x3f)
> > 
> > The symbol abbreviations are pretty self-explanatory:
> > 
> >   P = protection fault   (X86_PF_PROT)
> >   W = write access       (X86_PF_WRITE)
> >   U = user-mode access   (X86_PF_USER)
> >   S = supervisor mode    (X86_PF_RSVD)
> >   I = instruction fault  (X86_PF_INSTR)
> >   K = keys fault         (X86_PF_PK)
> > 
> > Misc notes:
> > 
> > - In principle the new text is now short enough to include it in one of 
> >   the existing output lines, further shortening the oops output - but I
> >   havent done that in this patch.
> > 
> > - Another question is the ordering of the bits: the symbolic display is 
> >   actually big endian, while the numeric hexa printout is little endian.
> > 
> >   I kind of still like it that way, not just because the decoding loop is 
> >   more natural, but because the bits are actually ordered by importance: 
> >   the PROT bits is more important than the INSTR or the PK bits - and the 
> >   more important bits are displayed first.
> 
> Hmm, my eyes tend to be drawn to the end of the line, e.g. having PROT
> be the last thing makes it stand out more than being buried in the middle
> of the line.  Inverting the ordering between raw and decoded also makes
> it very difficult to correlate the raw value with each bit.
> 
> > - Only build-tested the patch and looked at the generated assembly, but 
> >   it all looks sane enough so will obviously work just fine! ;-)
> 
> ...
> 
> >  /*
> > - * This helper function transforms the #PF error_code bits into
> > - * "[PROT] [USER]" type of descriptive, almost human-readable error strings:
> > + * This maps the somewhat obscure error_code number to symbolic text:
> > + *
> > + * P = protection fault   (X86_PF_PROT)
> > + * W = write access       (X86_PF_WRITE)
> > + * U = user-mode access   (X86_PF_USER)
> > + * S = supervisor mode    (X86_PF_RSVD)
> > + * I = instruction fault  (X86_PF_INSTR)
> > + * K = keys fault         (X86_PF_PK)
> >   */
> > -static void err_str_append(unsigned long error_code, char *buf, unsigned long mask, const char *txt)
> > +static const char error_code_chars[] = "PWUSIK";
> > +
> > +/*
> > + * This helper function transforms the #PF error_code bits into " +P -W +U -R -I -K"
> > + * type of descriptive, almost human-readable error strings:
> > + */
> > +static void show_error_code(struct pt_regs *regs, unsigned long error_code)
> 
> No need for @regs.
> 
> >  {
> > -     if (error_code & mask) {
> > -             if (buf[0])
> > -                     strcat(buf, " ");
> > -             strcat(buf, txt);
> > +     unsigned int bit, mask;
> > +     char err_txt[6*3+1]; /* Fixed length of 6 bits decoded plus zero at the end */
> 
> Assuming the error code bits are contiguous breaks if/when SGX gets added,
> which uses bit 15.  Oopsing on an SGX fault should be nigh impossible, but
> it might be nice to be able to reuse show_error_code in other places.
> 
> Hardcoding "6" is also a bit painful.
> 
> > +
> > +     /* We go from the X86_PF_PROT bit to the X86_PF_PK bit: */
> > +
> > +     for (bit = 0; bit < 6; bit++) {
> > +             unsigned int offset = bit*3;
> > +
> > +             err_txt[offset+0] = ' ';
> > +
> > +             mask = 1 << bit;
> > +             if (error_code & mask)
> > +                     err_txt[offset+1] = '+';
> > +             else
> > +                     err_txt[offset+1] = '-';
> 
> To me, using '!' contrasts better when side-by-side with '+'.
> 
> > +
> > +             err_txt[offset+2] = error_code_chars[bit];
> >       }
> > +
> > +     /* Close the string: */
> > +     err_txt[sizeof(err_txt)-1] = 0;
> > +
> > +     pr_alert("#PF error code: %s (%02lx)\n", err_txt, error_code);
> 
> The changelog example has a leading "0x" on the error code.  That being
> said, I actually like it without the "0x".
> 
> How about printing the raw value before the colon?  Having it at the end
> makes it look like extra noise.  And for me, seeing the raw code first
> (reading left to right) cue's my brain that it's about to decode some
> bits.
> 
> SGX will also break the two digit printing.  And for whatever reason four
> digits makes me think "this is an error code!".  IIRC the vectoring ucode
> makes a lot of assumptions about the error code being at most 16 bits, so
> in theory four digits is all we'll ever need.
> 
> E.g.
> 
> [    0.144247] #PF error code:  +P -W -U -S -I -K (01)
> [    0.144411] #PF error code:  +P +W -U -S -I -K (03)
> [    0.144826] #PF error code:  +P +W +U -S -I -K (07)
> [    0.145252] #PF error code:  +P -W +U -S -I +K (25)
> [    0.145706] #PF error code:  -P +W -U -S -I -K (02)
> [    0.146111] #PF error code:  -P -W +U -S -I -K (04)
> [    0.146521] #PF error code:  -P +W +U -S -I -K (06)
> [    0.146934] #PF error code:  -P -W +U -S +I -K (14)
> [    0.147348] #PF error code:  +P -W -U -S +I -K (11)
> [    0.147767] #PF error code:  -P -W -U -S -I -K (00)
> 
> vs. (with SGX added as 'G' for testing purposes)
> 
> [    0.158849] #PF error code(0001):  +P !W !U !S !I !K !G
> [    0.159292] #PF error code(0003):  +P +W !U !S !I !K !G
> [    0.159742] #PF error code(0007):  +P +W +U !S !I !K !G
> [    0.160190] #PF error code(0025):  +P !W +U !S !I +K !G
> [    0.160638] #PF error code(0002):  !P +W !U !S !I !K !G
> [    0.161087] #PF error code(0004):  !P !W +U !S !I !K !G
> [    0.161538] #PF error code(0006):  !P +W +U !S !I !K !G
> [    0.161992] #PF error code(0014):  !P !W +U !S +I !K !G
> [    0.162450] #PF error code(0011):  +P !W !U !S +I !K !G
> [    0.162667] #PF error code(8001):  +P !W !U !S !I !K +G
> [    0.162667] #PF error code(8003):  +P +W !U !S !I !K +G
> [    0.162667] #PF error code(8007):  +P +W +U !S !I !K +G
> [    0.162667] #PF error code(8025):  +P !W +U !S !I +K +G
> [    0.162667] #PF error code(8002):  !P +W !U !S !I !K +G
> [    0.162667] #PF error code(8004):  !P !W +U !S !I !K +G
> [    0.162667] #PF error code(8006):  !P +W +U !S !I !K +G
> [    0.162667] #PF error code(8014):  !P !W +U !S +I !K +G
> [    0.162667] #PF error code(8011):  +P !W !U !S +I !K +G
> [    0.162667] #PF error code(0000):  !P !W !U !S !I !K !G
> 
> vs. (with consistent ordering between raw and decoded)
> 
> [    0.153004] #PF error code(0001):  !K !I !S !U !W +P
> [    0.153004] #PF error code(0003):  !K !I !S !U +W +P
> [    0.153004] #PF error code(0007):  !K !I !S +U +W +P
> [    0.153004] #PF error code(0025):  +K !I !S +U !W +P
> [    0.153004] #PF error code(0002):  !K !I !S !U +W !P
> [    0.153004] #PF error code(0004):  !K !I !S +U !W !P
> [    0.153004] #PF error code(0006):  !K !I !S +U +W !P
> [    0.153362] #PF error code(0014):  !K +I !S +U !W !P
> [    0.153788] #PF error code(0011):  !K +I !S !U !W +P
> [    0.154104] #PF error code(0000):  !K !I !S !U !W !P

Ok, looks nice enough to me, with one request: please make it 0x prefixed 
as is common with hexa code: "0010" could be binary, octal or decimal as 
well. Since this is a separate line we don't lack the space.

Also some nits:

> A patch with the kitchen sink...
> ================================>
> 
> From 22e6d40e52b4341a424f065a138be54bc79d4db4 Mon Sep 17 00:00:00 2001
> From: Sean Christopherson <sean.j.christopherson@intel.com>
> Date: Thu, 6 Dec 2018 07:25:13 -0800
> Subject: [PATCH] x86/fault: Make show_error_code() more extensible and tweak
>  its formatting
> 
>   - Initialize each bit individually in the error_code_chars array.  This
>     allows for non-contiguous bits and is self-documenting.  Define a
>     macro to make the initialization code somewhatmore readable.
> 
>   - Reverse the decode order so it's consistent with the raw display.
> 
>   - Use ARRAY_SIZE instead of hardcoding '6' in multiple locations.
> 
>   - Use '!' for the negative case to better contrast against '+'.
> 
>   - Display four digits (was two) when printing the raw error code.
> 
>   - Remove @regs from show_error_code().
> 
> Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
> ---
>  arch/x86/mm/fault.c | 47 ++++++++++++++++++++++++---------------------
>  1 file changed, 25 insertions(+), 22 deletions(-)
> 
> diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
> index 23dc7163f6ac..cd28d058ed39 100644
> --- a/arch/x86/mm/fault.c
> +++ b/arch/x86/mm/fault.c
> @@ -605,45 +605,48 @@ static void show_ldttss(const struct desc_ptr *gdt, const char *name, u16 index)
>  
>  /*
>   * This maps the somewhat obscure error_code number to symbolic text:
> - *
> - * P = protection fault   (X86_PF_PROT)
> - * W = write access       (X86_PF_WRITE)
> - * U = user-mode access   (X86_PF_USER)
> - * S = supervisor mode    (X86_PF_RSVD)
> - * I = instruction fault  (X86_PF_INSTR)
> - * K = keys fault         (X86_PF_PK)
>   */
> -static const char error_code_chars[] = "PWUSIK";
> +#define EC(x) ilog2(X86_PF_##x)
> +static const char error_code_chars[] = {
> +	[EC(PROT)]	= 'P',
> +	[EC(WRITE)]	= 'W',
> +	[EC(USER)]	= 'U',
> +	[EC(RSVD)]	= 'S',
> +	[EC(INSTR)]	= 'I',
> +	[EC(PK)]	= 'K',
> +};

Please use an extra newline between the #define and the variable 
definition.

>  
>  /*
> - * This helper function transforms the #PF error_code bits into " +P -W +U -R -I -K"
> + * This helper function transforms the #PF error_code bits into " +P !W +U !R !I !K"
>   * type of descriptive, almost human-readable error strings:
>   */
> -static void show_error_code(struct pt_regs *regs, unsigned long error_code)
> +static void show_error_code(unsigned long error_code)
>  {
> -	unsigned int bit, mask;
> -	char err_txt[6*3+1]; /* Fixed length of 6 bits decoded plus zero at the end */
> +	char err_txt[ARRAY_SIZE(error_code_chars)*3+1]; /* 3 chars per bit plus zero at the end */
> +	unsigned offset = 0;
> +	unsigned long mask;
> +	int i;
>  
> -	/* We go from the X86_PF_PROT bit to the X86_PF_PK bit: */
> -
> -	for (bit = 0; bit < 6; bit++) {
> -		unsigned int offset = bit*3;
> +	for (i = ARRAY_SIZE(error_code_chars) - 1; i >= 0; i--) {
> +		if (!error_code_chars[i])
> +			continue;
>  
>  		err_txt[offset+0] = ' ';
>  
> -		mask = 1 << bit;
> +		mask = 1 << i;
>  		if (error_code & mask)
>  			err_txt[offset+1] = '+';
>  		else
> -			err_txt[offset+1] = '-';
> +			err_txt[offset+1] = '!';
>  
> -		err_txt[offset+2] = error_code_chars[bit];
> +		err_txt[offset+2] = error_code_chars[i];
> +		offset += 3;
>  	}
>  
>  	/* Close the string: */
> -	err_txt[sizeof(err_txt)-1] = 0;
> +	err_txt[offset] = 0;
>  
> -	pr_alert("#PF error code: %s (%02lx)\n", err_txt, error_code);
> +	pr_alert("#PF error code(%04lx): %s\n", error_code, err_txt);

0x%04lx here, but other than that looks good to me!

Thanks,

	Ingo
