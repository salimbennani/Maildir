Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 07 Dec 2018 08:40:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 99AE15804C1;
	Wed,  5 Dec 2018 19:21:09 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 05 Dec 2018 19:21:09 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Ai/hlJxzwoeVcNdbXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0ekeI/ad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJwl7pbrRC6qhBj34LZep2ZOeBicq/Be94RWGpPXtxWVyxEGo6x?=
 =?us-ascii?q?cpEAD+0FPeZZqYn2ulsBogG4BQmjGejizSRHiWXx3a0+0uQhFxvK3QI6ENIIv3?=
 =?us-ascii?q?TZt9H1NKYUUe+v1qnIyi/Pb/RM2Tfy8YXFdA0qr/KUXb9ob8bd1U0iGxnYglie?=
 =?us-ascii?q?t4DpJS6Z2+cRv2SB7udtV/qjh3M6pwxzuDSj28QhhpPGi48W0FzI6Dl1zJgzKN?=
 =?us-ascii?q?alUkB0e8SkH4FVtyyCN4t5XMciQ2ZwtSYkxb0Jp4S7cDIJyJs53R7fbeKIc4yS?=
 =?us-ascii?q?7hLkTuaRLi90hHNjeL2hmxa/6VasxvH4W8WuzVpHoDRJnsPRun0OyxDf8MmKR/?=
 =?us-ascii?q?ll8kekwzmP1gTT6u9eIUAzkKrWM5ohwr82lpoOvkXPByz2l1vsjK+QaEok/vGk?=
 =?us-ascii?q?6+PpY7XguJCcLZR5ih/xMqswgMyzG+c4PRYUX2id5+u80Kfv/UrjQLVFlvE2iL?=
 =?us-ascii?q?XWsIjGJcQHoa60GwtV0ocg6xmhFTun38kYkGIDLFJEfhKHkofoN0vPIPD+Efew?=
 =?us-ascii?q?nVCsnC13yPDBO73rGo/NIWTbkLf9YbZ97FZRyAopwtBe+5JbELYBLOjzWk/srt?=
 =?us-ascii?q?PYCBA5Pheww+bmDtV9y4wfVXiOAq+fLKPdr1uI6vgzLOmLYY8foCz9JOQ95/7y?=
 =?us-ascii?q?kX85nkcQfauu3ZQJcny4HfNmI0OfYXrrmdoBFWYKvgwjTO3lklGCUDhTZ2qsUK?=
 =?us-ascii?q?I4/D00FIWmDYLbTIC3nLOBxDu7HoFRZm1eEF+MCnfod4KHW/sWciKdOM1hnycA?=
 =?us-ascii?q?VbigTY8hyB6vuBX7y7phMurb5CkYuYj/29hy4u3ZjQsy+iBsD8SBz2GNSHl5nm?=
 =?us-ascii?q?ASSD8wxqx/pU19xU2F0ah3mPFYEd1T5/VUUgY1L5Lczup6C8zsVQLFZNuGVFGm?=
 =?us-ascii?q?QtC+CzErUt0x28MOY1p6G9i6kx/MxTSqDKEPm7yLHpM09Lnc0Gb3J8p6z3bG16?=
 =?us-ascii?q?whj109T8tLNG2mgLN/9gfJC47IlUWZi7ildaAG0CHR82eDyHKEvFtEXw5oTaXF?=
 =?us-ascii?q?QXcfa1PLotvj+EPNUaWiCbQ9PQtH0s6NNK1KZ8btjVVHQvfjJdvfb3iwm2e2GR?=
 =?us-ascii?q?aH2LeMYJD2dGUa2SXXEFIEnBwL/XaaKQg+AT+so37fDDxrElLvf0Ps8OlkpHOn?=
 =?us-ascii?q?VEM0yBuKb0lg17qz9R4YnvicS/IV3rIZtyYtsTR0HFCh393ID9qMvRZufKJZYd?=
 =?us-ascii?q?kl+ldIyXrZtxBhPpynN61tnFoefBp4vkzw1xR7EJ5PkdU3o3wwygpyKqWY0E1a?=
 =?us-ascii?q?ejOc3JDwPKDXK2bo8BCuba7Wxk/R0NKM9qgT7/Q4rk3pvBu1GUo673Vnz95V3m?=
 =?us-ascii?q?Oc55XXFgYdTYj9U0c39xdgobHabTIw54fV1X1qLKm1vSXO29MvBOs51Bmge81T?=
 =?us-ascii?q?P7+DFA/3C8caHdShKPQ2m1i1aRIJJPpS9K8oMMy8bfuJxamrMPxmnD24l2RH4Z?=
 =?us-ascii?q?lx3V6W+Cp4V+HHwYwFw/ae3gacUzf8jVGhst34mIxeZDESGHa/xjbgBIJLeqJy?=
 =?us-ascii?q?eoMLA3+0I8Kr3tV+m4LtW3lA+V+jBlMKws+odQCJb1zg2w1dzkAXoX2hmSulwD?=
 =?us-ascii?q?14iTAprqyD3CPQx+TubgYIOmlORGN6l1fjPZC0j8wGXEivdwUplgGq5Vz5x6hY?=
 =?us-ascii?q?o6RzNXLTTl1Lfyj1LmFiVLW/tryZbs5L6ZMotzhXUeumbVCbTL79vwUV0yf5E2?=
 =?us-ascii?q?RCwzA7cimguo/lkBxilGKdMHFzoWLZeM5qwhfT/t7cRf9X3jcdQCl4iD/XBkWz?=
 =?us-ascii?q?PtWz/NWUkYvDvf66V267SpJTdizrx5uatCSn/W1qHQG/n/erl93kCwc60DX319?=
 =?us-ascii?q?l3VSrSqhb8bZLm16C7MeJhY0lpC0Xw68t8GoFijIQwgIsc1mQdhpWQ5XAHi3v8?=
 =?us-ascii?q?Mc1H2aLia3oAXTsLw9/W4Af/wkFiIGyGx5nlVnqD2MtufMe1YnkZ2i8m68BKCa?=
 =?us-ascii?q?GU7KFLnCdvo1q4qx7RbuZ5njsH1fQu73saifkTuAUx1iWdHqwSHU5AMCzwkBSI?=
 =?us-ascii?q?6sqyraRNa2apbLiwz1F+ndG6AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IRiiV9PmL9uWAlx/Q/jRxzxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8Kt/ToLQOOHyMnqn?=
 =?us-ascii?q?uBBbrTBwyf6Fplr3LSFZCkLWqXKWIdzdVjQhmdOUNejBoVXDU8gp42CASqyNb9?=
 =?us-ascii?q?f0d+4zAb/kT4pQdUyuJ0Kxn/VX/SpQevajcpUZifMQBZ7gdY60fONsye6O1zEj?=
 =?us-ascii?q?pc/p2gqgyNN2Oaax5JDWEPRkyLGVTjMqOy6tnH9uiSHvC+IOfWYbWStexeUO+F?=
 =?us-ascii?q?xZKx3Ytn/DaMNcSPMmNhD/0h3UpDUm52G97EmzUUUCEXkyPNb8iGpBaz4CF3r8?=
 =?us-ascii?q?a/8Oj1VwLr/4eAF7xSMdB38RCsnaiDL/KQhDp+KTtAzJwM2GTHyKIB018SkS1u?=
 =?us-ascii?q?czitHK8EtS7MSqLQh6BWAwQaayN1KMtH8aY80hNRNs7cj9P/zqR4geItC1dZSV?=
 =?us-ascii?q?zhndmkZdALI2G4Ll/IGFyHO6iGJTLVxcH6eqe8SbxWjOVJuBy8ozebE0n/Pjud?=
 =?us-ascii?q?kznlTQygMeZJjCuDJhxRpJm9cgpxCWjkVN/nage0MNlyjT03x707nnLLNW4GPj?=
 =?us-ascii?q?h6fENAtbmQ7SJegvViFG1N9HtlLe+YmymH6+nUMIoZsfxuAnc8q+UP+24347hY?=
 =?us-ascii?q?9idJQLpygiSBgMRppgSMm+6LyzwvbxNIpX4fjouMuURkf7rQ8JZoXXfC9QgKq2?=
 =?us-ascii?q?KKBEJZ9JNeFtTztvUImZD0n6XpJWIa/g=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AdAAC0lAhch0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ5oIOZc4gXMSAQEYEwGHUyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiK?=
 =?us-ascii?q?CbAIkGQEBNwEFCQIfHxIDMQEFATUFgxyCAQEFmjQ8ih2BbDOCdgEBBYcqCBKHX?=
 =?us-ascii?q?YMTgRyBVz+BRIcfChuFd4krhwdRj1UHAoIgBI8eGIFbiAU2hxmHb5BoAgQCCQI?=
 =?us-ascii?q?FDyGBJYINMxowgy+CGwwXiF6DGYIzMzKBBQEBiAyCTQEB?=
X-IPAS-Result: =?us-ascii?q?A0AdAAC0lAhch0O0hNFkHgEGBwaBUQkLAYNrJ5oIOZc4gXM?=
 =?us-ascii?q?SAQEYEwGHUyI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiKCbAIkGQEBNwEFC?=
 =?us-ascii?q?QIfHxIDMQEFATUFgxyCAQEFmjQ8ih2BbDOCdgEBBYcqCBKHXYMTgRyBVz+BRIc?=
 =?us-ascii?q?fChuFd4krhwdRj1UHAoIgBI8eGIFbiAU2hxmHb5BoAgQCCQIFDyGBJYINMxowg?=
 =?us-ascii?q?y+CGwwXiF6DGYIzMzKBBQEBiAyCTQEB?=
X-IronPort-AV: E=Sophos;i="5.56,320,1539673200"; 
   d="scan'208";a="140980150"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 05 Dec 2018 19:21:08 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728842AbeLFDVF (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 5 Dec 2018 22:21:05 -0500
Received: from mail-pl1-f193.google.com ([209.85.214.193]:34948 "EHLO
        mail-pl1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727695AbeLFDVE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 5 Dec 2018 22:21:04 -0500
Received: by mail-pl1-f193.google.com with SMTP id p8so11090934plo.2
        for <linux-kernel@vger.kernel.org>; Wed, 05 Dec 2018 19:21:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id;
        bh=h2KSnIAlk7pCL7epeA9wqI/dn+NWpdOYjtJjFjbxWQo=;
        b=XpRbVs3IwSfy9RQTl+eNF/lJWAP/7YeOnmSw84XAvkd2MWrmJKKUlbR6kuGZUj/TvC
         GAUG4e0bhePhZyUVCCUBVeIUKnB3CkrHs5wx3NDoD+pYAJocx0w/Ro5BcO/LpGPQ6jos
         OkDyRvRxndUQHno+0XK8xP2TFjEwQpdgF4bC0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=h2KSnIAlk7pCL7epeA9wqI/dn+NWpdOYjtJjFjbxWQo=;
        b=feYKujXtcugxQAbVQUeBPxmkx3YDc0LBlHCjNSmQRdi8Nm2DGdJ3CY47vOY/uUmzjM
         8V97nu3UFL3t1Dhz/MgpR9oqDIY8lZGHC1it9rCHyzw+kBzrRpQpLwkp5/QJRICncQsH
         LtNAxnrLH2/o+JFfS8FdbntKJtQqgRO1NtU1o54DCrbHf88RcU4Pbc1DJJ0uc4Q1GVYr
         ZOoZ0EkUH09uOC1lE+BsyzAMr2GiDRpQMllGCezKeD9P81DrVKROS/Zj4qC1PY9zfL2I
         FYiMMsE7fhf4KjSOdtqkezFrJAOJ8Nfa5uJfOTKmMQV61tpkW3PVqIrANaWxI6a2/kNN
         4J1w==
X-Gm-Message-State: AA+aEWag2AQ4kScSGwJhQEeASGeXAYzKQIShgWN09JrZKR2EhBamoIiv
        QJHB32sq+JO4ThSwbaLMIhtfyA==
X-Google-Smtp-Source: AFSGD/UVB7Fkxkz13X7TagQRFwNgXXeVJWh/vRCJmBjdw3++QlShsoJvyUwawUWg7DmOmjHwKW7wbg==
X-Received: by 2002:a17:902:5a86:: with SMTP id r6mr25635770pli.301.1544066463875;
        Wed, 05 Dec 2018 19:21:03 -0800 (PST)
Received: from baolinwangubtpc.spreadtrum.com ([117.18.48.102])
        by smtp.gmail.com with ESMTPSA id o189sm33258819pfg.117.2018.12.05.19.21.00
        (version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Wed, 05 Dec 2018 19:21:02 -0800 (PST)
From: Baolin Wang <baolin.wang@linaro.org>
To: sre@kernel.org
Cc: linux-pm@vger.kernel.org, linux-kernel@vger.kernel.org,
        yuanjiang.yu@unisoc.com, baolin.wang@linaro.org,
        broonie@kernel.org, pavel@ucw.cz
Subject: [PATCH v2] power: supply: sc27xx: Save last battery capacity
Date: Thu,  6 Dec 2018 11:20:39 +0800
Message-Id: <271ebbae85bc544cbcb6925a10de30267f8eb3ee.1544066225.git.baolin.wang@linaro.org>
X-Mailer: git-send-email 1.7.9.5
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Yuanjiang Yu <yuanjiang.yu@unisoc.com>

Our charger manager can optimize the battery capacity periodically, so
we can save last battery capacity into registers. Then next system
power-on, we can read the last saved battery capacity as the initial
battery capacity, which can make the battery capacity more accurate.

Signed-off-by: Yuanjiang Yu <yuanjiang.yu@unisoc.com>
Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
---
Changes from v1:
 - Simplify the logics for sc27xx_fgu_set_property() and
   sc27xx_fgu_property_is_writeable().
---
 drivers/power/supply/sc27xx_fuel_gauge.c |  135 +++++++++++++++++++++++++++++-
 1 file changed, 134 insertions(+), 1 deletion(-)

diff --git a/drivers/power/supply/sc27xx_fuel_gauge.c b/drivers/power/supply/sc27xx_fuel_gauge.c
index 8c52e29..76da189 100644
--- a/drivers/power/supply/sc27xx_fuel_gauge.c
+++ b/drivers/power/supply/sc27xx_fuel_gauge.c
@@ -39,6 +39,9 @@
 #define SC27XX_FGU_CLBCNT_VALH		0x68
 #define SC27XX_FGU_CLBCNT_VALL		0x6c
 #define SC27XX_FGU_CLBCNT_QMAXL		0x74
+#define SC27XX_FGU_USER_AREA_SET	0xa0
+#define SC27XX_FGU_USER_AREA_CLEAR	0xa4
+#define SC27XX_FGU_USER_AREA_STATUS	0xa8
 
 #define SC27XX_WRITE_SELCLB_EN		BIT(0)
 #define SC27XX_FGU_CLBCNT_MASK		GENMASK(15, 0)
@@ -49,6 +52,14 @@
 #define SC27XX_FGU_LOW_OVERLOAD_INT	BIT(0)
 #define SC27XX_FGU_CLBCNT_DELTA_INT	BIT(2)
 
+#define SC27XX_FGU_MODE_AREA_MASK	GENMASK(15, 12)
+#define SC27XX_FGU_CAP_AREA_MASK	GENMASK(11, 0)
+#define SC27XX_FGU_MODE_AREA_SHIFT	12
+
+#define SC27XX_FGU_FIRST_POWERTON	GENMASK(3, 0)
+#define SC27XX_FGU_DEFAULT_CAP		GENMASK(11, 0)
+#define SC27XX_FGU_NORMAIL_POWERTON	0x5
+
 #define SC27XX_FGU_CUR_BASIC_ADC	8192
 #define SC27XX_FGU_SAMPLE_HZ		2
 
@@ -119,6 +130,80 @@ static int sc27xx_fgu_voltage_to_adc(struct sc27xx_fgu_data *data, int vol)
 	return DIV_ROUND_CLOSEST(vol * data->vol_1000mv_adc, 1000);
 }
 
+static bool sc27xx_fgu_is_first_poweron(struct sc27xx_fgu_data *data)
+{
+	int ret, status, cap, mode;
+
+	ret = regmap_read(data->regmap,
+			  data->base + SC27XX_FGU_USER_AREA_STATUS, &status);
+	if (ret)
+		return false;
+
+	/*
+	 * We use low 4 bits to save the last battery capacity and high 12 bits
+	 * to save the system boot mode.
+	 */
+	mode = (status & SC27XX_FGU_MODE_AREA_MASK) >> SC27XX_FGU_MODE_AREA_SHIFT;
+	cap = status & SC27XX_FGU_CAP_AREA_MASK;
+
+	/*
+	 * When FGU has been powered down, the user area registers became
+	 * default value (0xffff), which can be used to valid if the system is
+	 * first power on or not.
+	 */
+	if (mode == SC27XX_FGU_FIRST_POWERTON || cap == SC27XX_FGU_DEFAULT_CAP)
+		return true;
+
+	return false;
+}
+
+static int sc27xx_fgu_save_boot_mode(struct sc27xx_fgu_data *data,
+				     int boot_mode)
+{
+	int ret;
+
+	ret = regmap_update_bits(data->regmap,
+				 data->base + SC27XX_FGU_USER_AREA_CLEAR,
+				 SC27XX_FGU_MODE_AREA_MASK,
+				 SC27XX_FGU_MODE_AREA_MASK);
+	if (ret)
+		return ret;
+
+	return regmap_update_bits(data->regmap,
+				  data->base + SC27XX_FGU_USER_AREA_SET,
+				  SC27XX_FGU_MODE_AREA_MASK,
+				  boot_mode << SC27XX_FGU_MODE_AREA_SHIFT);
+}
+
+static int sc27xx_fgu_save_last_cap(struct sc27xx_fgu_data *data, int cap)
+{
+	int ret;
+
+	ret = regmap_update_bits(data->regmap,
+				 data->base + SC27XX_FGU_USER_AREA_CLEAR,
+				 SC27XX_FGU_CAP_AREA_MASK,
+				 SC27XX_FGU_CAP_AREA_MASK);
+	if (ret)
+		return ret;
+
+	return regmap_update_bits(data->regmap,
+				  data->base + SC27XX_FGU_USER_AREA_SET,
+				  SC27XX_FGU_CAP_AREA_MASK, cap);
+}
+
+static int sc27xx_fgu_read_last_cap(struct sc27xx_fgu_data *data, int *cap)
+{
+	int ret, value;
+
+	ret = regmap_read(data->regmap,
+			  data->base + SC27XX_FGU_USER_AREA_STATUS, &value);
+	if (ret)
+		return ret;
+
+	*cap = value & SC27XX_FGU_CAP_AREA_MASK;
+	return 0;
+}
+
 /*
  * When system boots on, we can not read battery capacity from coulomb
  * registers, since now the coulomb registers are invalid. So we should
@@ -128,6 +213,20 @@ static int sc27xx_fgu_voltage_to_adc(struct sc27xx_fgu_data *data, int vol)
 static int sc27xx_fgu_get_boot_capacity(struct sc27xx_fgu_data *data, int *cap)
 {
 	int volt, cur, oci, ocv, ret;
+	bool is_first_poweron = sc27xx_fgu_is_first_poweron(data);
+
+	/*
+	 * If system is not the first power on, we should use the last saved
+	 * battery capacity as the initial battery capacity. Otherwise we should
+	 * re-calculate the initial battery capacity.
+	 */
+	if (!is_first_poweron) {
+		ret = sc27xx_fgu_read_last_cap(data, cap);
+		if (ret)
+			return ret;
+
+		return sc27xx_fgu_save_boot_mode(data, SC27XX_FGU_NORMAIL_POWERTON);
+	}
 
 	/*
 	 * After system booting on, the SC27XX_FGU_CLBCNT_QMAXL register saved
@@ -160,7 +259,11 @@ static int sc27xx_fgu_get_boot_capacity(struct sc27xx_fgu_data *data, int *cap)
 	*cap = power_supply_ocv2cap_simple(data->cap_table, data->table_len,
 					   ocv);
 
-	return 0;
+	ret = sc27xx_fgu_save_last_cap(data, *cap);
+	if (ret)
+		return ret;
+
+	return sc27xx_fgu_save_boot_mode(data, SC27XX_FGU_NORMAIL_POWERTON);
 }
 
 static int sc27xx_fgu_set_clbcnt(struct sc27xx_fgu_data *data, int clbcnt)
@@ -418,6 +521,28 @@ static int sc27xx_fgu_get_property(struct power_supply *psy,
 	return ret;
 }
 
+static int sc27xx_fgu_set_property(struct power_supply *psy,
+				   enum power_supply_property psp,
+				   const union power_supply_propval *val)
+{
+	struct sc27xx_fgu_data *data = power_supply_get_drvdata(psy);
+	int ret;
+
+	if (psp != POWER_SUPPLY_PROP_CAPACITY)
+		return -EINVAL;
+
+	mutex_lock(&data->lock);
+
+	ret = sc27xx_fgu_save_last_cap(data, val->intval);
+
+	mutex_unlock(&data->lock);
+
+	if (ret < 0)
+		dev_err(data->dev, "failed to save battery capacity\n");
+
+	return ret;
+}
+
 static void sc27xx_fgu_external_power_changed(struct power_supply *psy)
 {
 	struct sc27xx_fgu_data *data = power_supply_get_drvdata(psy);
@@ -425,6 +550,12 @@ static void sc27xx_fgu_external_power_changed(struct power_supply *psy)
 	power_supply_changed(data->battery);
 }
 
+static int sc27xx_fgu_property_is_writeable(struct power_supply *psy,
+					    enum power_supply_property psp)
+{
+	return psp == POWER_SUPPLY_PROP_CAPACITY;
+}
+
 static enum power_supply_property sc27xx_fgu_props[] = {
 	POWER_SUPPLY_PROP_STATUS,
 	POWER_SUPPLY_PROP_HEALTH,
@@ -444,7 +575,9 @@ static void sc27xx_fgu_external_power_changed(struct power_supply *psy)
 	.properties		= sc27xx_fgu_props,
 	.num_properties		= ARRAY_SIZE(sc27xx_fgu_props),
 	.get_property		= sc27xx_fgu_get_property,
+	.set_property		= sc27xx_fgu_set_property,
 	.external_power_changed	= sc27xx_fgu_external_power_changed,
+	.property_is_writeable	= sc27xx_fgu_property_is_writeable,
 };
 
 static void sc27xx_fgu_adjust_cap(struct sc27xx_fgu_data *data, int cap)
-- 
1.7.9.5

