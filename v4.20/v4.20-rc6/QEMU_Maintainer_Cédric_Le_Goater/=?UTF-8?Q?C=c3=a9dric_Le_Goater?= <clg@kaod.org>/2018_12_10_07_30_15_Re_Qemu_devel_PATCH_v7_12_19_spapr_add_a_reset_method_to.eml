Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 10 Dec 2018 18:14:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A1D3D5800CB
	for <like.xu@linux.intel.com>; Sun,  9 Dec 2018 23:30:47 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 09 Dec 2018 23:30:47 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AqGMl6BLTLbgh8Tvtt9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgfLPTxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJfUMZfVyJPAY2y?=
 =?us-ascii?q?YIUAAOUDIelWoJTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z/0hHBva0AA8Ed8DsH?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwCvZaPxLwzf96ZTHfQgnr/6SRb1+cM3RxlMzFwzblFWb?=
 =?us-ascii?q?tIvoMC+R1uQCqGWb7PBvVeWyhGI9rAFxuDevy94qh4LUhYwV0kjJ+TtlzIs2P9?=
 =?us-ascii?q?G0VVN3bN2+HJdOuSyXN5F6Tt4gTm1wvCs21qcKtJ2/cSQQ1Zgqwx/SZ+aaf4SV?=
 =?us-ascii?q?/h7uUvuaLy1ii3J/Yr2/gg6/8Ui+xe34Ucm5yFJKritektnQrXABzRPT6s6aSv?=
 =?us-ascii?q?dn+UehwzmP2xjS6uFCP080ibLWJ4A9zrMzjJYfrFnPEyzslEnogqKbdl8o9vWq?=
 =?us-ascii?q?5uj/Z7XpvJ6cN4t6igHkNaQun9SyAf0mPQgLQmiX4Pmz26P9/ULnRLVGl+Y5kq?=
 =?us-ascii?q?7EsJDcOcsUuLW5DwhR0oYi6BawES2q0dsFnXQfKFJFeRSHj5XmOl3UIfD4C+u/?=
 =?us-ascii?q?jEqokDtx2//GObjhD47LLnjElrfhcrB961NGxAo019Bf6IpYCqsdL/LrRk/xqN?=
 =?us-ascii?q?vYAwc9Mwy1wOboFs9x14wDWW+UBq+ZMaXSsUKH5+41IumMYpMVtyj5K/Q/+/Hu?=
 =?us-ascii?q?ino5yhcge7K0184XdGygBaYhZEGYemb3xNEGF2gMo0w5VuOtjVSDVTtaYTG1R7?=
 =?us-ascii?q?494TcgT5urCJqGSo2zjbjS4SGgA5cDY2lHDkyLQ27lcpjBV/oSZSbXOMJ4jzEf?=
 =?us-ascii?q?SZCnTIku0wzosxX1nKF6JOjZ8TFNqJT4ydJu7PfSnxxhyTshI82D0m3FYGB+hW?=
 =?us-ascii?q?QOD2s61b5+rWRyy12Y1q4+j+ZfDdZe7ukPUwt8PIOKnMJgDNWncYPNZNaCf3Kr?=
 =?us-ascii?q?dfqhCC08VJplyNsBS0V0HNnkiQrMiXn5S4QJnqCGUcRnupnX2GL8coMkky7L?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AuAABVFQ5cmBHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUwUBAQsBgTCCYoxyiy6BYAgll1EUgV8UGBSEQIMkIjYHDQEDAQEBAQEBAgE?=
 =?us-ascii?q?TAQEBAQEICwsGGw4vgjYFAgMaAQaCWwEBAQECAQECJB8KKQMDAQIGAQEKGBwKC?=
 =?us-ascii?q?AMBORoGDQYCAQEBgxyBeggBAwGlXTOFQINSgQ2MIREGgX+BEScMgl+EaheFWwK?=
 =?us-ascii?q?JFZdgCZFJBgIWkT2ZMIFNB4IATTAIgyeCJxcSjgxxgQQDilKBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AuAABVFQ5cmBHrdtBjHAEBAQQBAQcEAQGBUwUBAQsBgTC?=
 =?us-ascii?q?CYoxyiy6BYAgll1EUgV8UGBSEQIMkIjYHDQEDAQEBAQEBAgETAQEBAQEICwsGG?=
 =?us-ascii?q?w4vgjYFAgMaAQaCWwEBAQECAQECJB8KKQMDAQIGAQEKGBwKCAMBORoGDQYCAQE?=
 =?us-ascii?q?BgxyBeggBAwGlXTOFQINSgQ2MIREGgX+BEScMgl+EaheFWwKJFZdgCZFJBgIWk?=
 =?us-ascii?q?T2ZMIFNB4IATTAIgyeCJxcSjgxxgQQDilKBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,337,1539673200"; 
   d="scan'208";a="44259285"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 09 Dec 2018 23:30:46 -0800
Received: from localhost ([::1]:59592 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gWG1e-0006ga-2F
	for like.xu@linux.intel.com; Mon, 10 Dec 2018 02:30:46 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:40473)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gWG1N-0006gM-O1
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 02:30:31 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gWG1I-0005G6-Jo
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 02:30:29 -0500
Received: from 10.mo177.mail-out.ovh.net ([46.105.73.133]:47378)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gWG1I-0005FB-BM
	for qemu-devel@nongnu.org; Mon, 10 Dec 2018 02:30:24 -0500
Received: from player691.ha.ovh.net (unknown [10.109.146.82])
	by mo177.mail-out.ovh.net (Postfix) with ESMTP id A47A7D6E8E
	for <qemu-devel@nongnu.org>; Mon, 10 Dec 2018 08:30:22 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player691.ha.ovh.net (Postfix) with ESMTPSA id 37BAFC03E2A;
	Mon, 10 Dec 2018 07:30:16 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181209194610.29727-1-clg@kaod.org>
	<20181209194610.29727-13-clg@kaod.org>
	<20181210064214.GV4261@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <47174559-8eb7-4ef9-f7aa-3f3bf44f816a@kaod.org>
Date: Mon, 10 Dec 2018 08:30:15 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181210064214.GV4261@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 1589207720617216881
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedrudeggedgudduvdcutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 46.105.73.133
Subject: Re: [Qemu-devel] [PATCH v7 12/19] spapr: add a 'reset' method to
 the sPAPR IRQ backend
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 12/10/18 7:42 AM, David Gibson wrote:
> On Sun, Dec 09, 2018 at 08:46:03PM +0100, C=E9dric Le Goater wrote:
>> For the time being, the XIVE reset handler updates the OS CAM line of
>> the vCPU as it is done under a real hypervisor when a vCPU is
>> scheduled to run on a HW thread.
>>
>> This handler will become even more useful when we introduce the
>> machine supporting both interrupt modes, XIVE and XICS. In this
>> machine, the interrupt mode is chosen by the CAS negotiation process
>> and activated after a reset.
>>
>> Signed-off-by: C=E9dric Le Goater <clg@kaod.org>
>> ---
>>  include/hw/ppc/spapr_irq.h  |  2 ++
>>  include/hw/ppc/spapr_xive.h |  1 +
>>  hw/intc/spapr_xive.c        | 24 ++++++++++++++++++++++++
>>  hw/ppc/spapr.c              |  5 +++++
>>  hw/ppc/spapr_irq.c          | 24 ++++++++++++++++++++++++
>>  5 files changed, 56 insertions(+)
>>
>> diff --git a/include/hw/ppc/spapr_irq.h b/include/hw/ppc/spapr_irq.h
>> index 84a25ffb6c65..63061a009b4c 100644
>> --- a/include/hw/ppc/spapr_irq.h
>> +++ b/include/hw/ppc/spapr_irq.h
>> @@ -44,6 +44,7 @@ typedef struct sPAPRIrq {
>>      Object *(*cpu_intc_create)(sPAPRMachineState *spapr, Object *cpu,
>>                                 Error **errp);
>>      int (*post_load)(sPAPRMachineState *spapr, int version_id);
>> +    void (*reset)(sPAPRMachineState *spapr, Error **errp);
>>  } sPAPRIrq;
>> =20
>>  extern sPAPRIrq spapr_irq_xics;
>> @@ -55,6 +56,7 @@ int spapr_irq_claim(sPAPRMachineState *spapr, int ir=
q, bool lsi, Error **errp);
>>  void spapr_irq_free(sPAPRMachineState *spapr, int irq, int num);
>>  qemu_irq spapr_qirq(sPAPRMachineState *spapr, int irq);
>>  int spapr_irq_post_load(sPAPRMachineState *spapr, int version_id);
>> +void spapr_irq_reset(sPAPRMachineState *spapr, Error **errp);
>> =20
>>  /*
>>   * XICS legacy routines
>> diff --git a/include/hw/ppc/spapr_xive.h b/include/hw/ppc/spapr_xive.h
>> index 728a5e8dc163..7244a6231ce6 100644
>> --- a/include/hw/ppc/spapr_xive.h
>> +++ b/include/hw/ppc/spapr_xive.h
>> @@ -47,5 +47,6 @@ typedef struct sPAPRMachineState sPAPRMachineState;
>>  void spapr_xive_hcall_init(sPAPRMachineState *spapr);
>>  void spapr_dt_xive(sPAPRMachineState *spapr, uint32_t nr_servers, voi=
d *fdt,
>>                     uint32_t phandle);
>> +void spapr_xive_reset_tctx(sPAPRXive *xive);
>> =20
>>  #endif /* PPC_SPAPR_XIVE_H */
>> diff --git a/hw/intc/spapr_xive.c b/hw/intc/spapr_xive.c
>> index a6d854b07690..560d8d031f74 100644
>> --- a/hw/intc/spapr_xive.c
>> +++ b/hw/intc/spapr_xive.c
>> @@ -179,6 +179,30 @@ static void spapr_xive_map_mmio(sPAPRXive *xive)
>>      sysbus_mmio_map(SYS_BUS_DEVICE(xive), 2, xive->tm_base);
>>  }
>> =20
>> +/*
>> + * When a Virtual Processor is scheduled to run on a HW thread, the
>> + * hypervisor pushes its identifier in the OS CAM line. Emulate the
>> + * same behavior under QEMU.
>> + */
>> +void spapr_xive_reset_tctx(sPAPRXive *xive)
>> +{
>> +    CPUState *cs;
>> +    uint8_t  nvt_blk;
>> +    uint32_t nvt_idx;
>> +    uint32_t nvt_cam;
>> +
>> +    CPU_FOREACH(cs) {
>> +        PowerPCCPU *cpu =3D POWERPC_CPU(cs);
>> +        XiveTCTX *tctx =3D XIVE_TCTX(cpu->intc);
>> +
>> +        spapr_xive_cpu_to_nvt(cpu, &nvt_blk, &nvt_idx);
>> +
>> +        nvt_cam =3D cpu_to_be32(TM_QW1W2_VO |
>> +                              xive_nvt_cam_line(nvt_blk, nvt_idx));
>> +        memcpy(&tctx->regs[TM_QW1_OS + TM_WORD2], &nvt_cam, 4);
>> +    }
>> +}
>> +
>>  static void spapr_xive_end_reset(XiveEND *end)
>>  {
>>      memset(end, 0, sizeof(*end));
>> diff --git a/hw/ppc/spapr.c b/hw/ppc/spapr.c
>> index 8cea4cad1732..98d69f09e080 100644
>> --- a/hw/ppc/spapr.c
>> +++ b/hw/ppc/spapr.c
>> @@ -1619,6 +1619,11 @@ static void spapr_machine_reset(void)
>> =20
>>      qemu_devices_reset();
>> =20
>> +    /* This is fixing some of the default configuration of the XIVE
>> +     * devices. To be called after the reset of the machine devices.
>> +     */
>> +    spapr_irq_reset(spapr, &error_fatal);
>> +
>>      /* DRC reset may cause a device to be unplugged. This will cause =
troubles
>>       * if this device is used by another device (eg, a running vhost =
backend
>>       * will crash QEMU if the DIMM holding the vring goes away). To a=
void such
>> diff --git a/hw/ppc/spapr_irq.c b/hw/ppc/spapr_irq.c
>> index 35a067cad3f8..04f5c9665550 100644
>> --- a/hw/ppc/spapr_irq.c
>> +++ b/hw/ppc/spapr_irq.c
>> @@ -209,6 +209,10 @@ static int spapr_irq_post_load_xics(sPAPRMachineS=
tate *spapr, int version_id)
>>      return 0;
>>  }
>> =20
>> +static void spapr_irq_reset_xics(sPAPRMachineState *spapr, Error **er=
rp)
>> +{
>> +}
>=20
> You already have a check for a NULL reset hook in spapr_irq_reset() so
> you could omit this empty function.

It's being used in patch 14 and 15. But I can add the XICS reset handler
at that time.

C.

>> +
>>  #define SPAPR_IRQ_XICS_NR_IRQS     0x1000
>>  #define SPAPR_IRQ_XICS_NR_MSIS     \
>>      (XICS_IRQ_BASE + SPAPR_IRQ_XICS_NR_IRQS - SPAPR_IRQ_MSI)
>> @@ -225,6 +229,7 @@ sPAPRIrq spapr_irq_xics =3D {
>>      .dt_populate =3D spapr_dt_xics,
>>      .cpu_intc_create =3D spapr_irq_cpu_intc_create_xics,
>>      .post_load   =3D spapr_irq_post_load_xics,
>> +    .reset       =3D spapr_irq_reset_xics,
>>  };
>> =20
>>  /*
>> @@ -333,6 +338,15 @@ static int spapr_irq_post_load_xive(sPAPRMachineS=
tate *spapr, int version_id)
>>      return 0;
>>  }
>> =20
>> +static void spapr_irq_reset_xive(sPAPRMachineState *spapr, Error **er=
rp)
>> +{
>> +    /*
>> +     * Set the OS CAM line of the cpu interrupt thread context. Needs
>> +     * to come after the XiveTCTX reset handlers.
>> +     */
>> +    spapr_xive_reset_tctx(spapr->xive);
>> +}
>> +
>>  /*
>>   * XIVE uses the full IRQ number space. Set it to 8K to be compatible
>>   * with XICS.
>> @@ -353,6 +367,7 @@ sPAPRIrq spapr_irq_xive =3D {
>>      .dt_populate =3D spapr_dt_xive,
>>      .cpu_intc_create =3D spapr_irq_cpu_intc_create_xive,
>>      .post_load   =3D spapr_irq_post_load_xive,
>> +    .reset       =3D spapr_irq_reset_xive,
>>  };
>> =20
>>  /*
>> @@ -398,6 +413,15 @@ int spapr_irq_post_load(sPAPRMachineState *spapr,=
 int version_id)
>>      return smc->irq->post_load(spapr, version_id);
>>  }
>> =20
>> +void spapr_irq_reset(sPAPRMachineState *spapr, Error **errp)
>> +{
>> +    sPAPRMachineClass *smc =3D SPAPR_MACHINE_GET_CLASS(spapr);
>> +
>> +    if (smc->irq->reset) {
>> +        smc->irq->reset(spapr, errp);
>> +    }
>> +}
>> +
>>  /*
>>   * XICS legacy routines - to deprecate one day
>>   */
>=20


