Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 09 Dec 2018 18:57:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 63BB85800CD;
	Sat,  8 Dec 2018 22:18:34 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 08 Dec 2018 22:18:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AmzlGyhXViM5uacUx6mITdBFvBhDV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCEtKdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmTgLjhi?=
 =?us-ascii?q?UaOD4j6GzZitJ+gr9VrhyioBJwzJLbYICONPpmfK7QZs8aSXZbU8pNTSFNHp+w?=
 =?us-ascii?q?Yo0SBOQBJ+ZYqIz9qkMMoxu5GAmnGf3hxSVPhnTr2qA60+MhERza3AM6GNICrW?=
 =?us-ascii?q?/ZrNXoNKgIX+G60qjIwS/fYPNR3Dfw8Y7FeQ0ir/GURb98b9bdxE01Gw/YgFic?=
 =?us-ascii?q?t5bpMy6W2+gRqWSW7uhtWfqyh2I7sQ18piSjyt0sh4THnI4Z1E7I+CVhzIs6Jd?=
 =?us-ascii?q?C0UlB3bNGgHZdKqS2WKpV6Ttk/T2xspSo3zKANt4ShcygQ0psnwgbSa/yZfIiM?=
 =?us-ascii?q?5RLuTPiRIThmi3J/Yr6/hAi98VKmyuLiUsm4ylFKrjBKktXUt3AN0QLc6tSfR/?=
 =?us-ascii?q?dj4kus3SyD2x3d5+1aO0w4iKnWJ4I7zrMxlJcfqUHDETX3mEXygq+WbEIk+u2w?=
 =?us-ascii?q?5uTjY7XmoIKcNoBthgH9LKsugMq/Dvo8MgQXWGia9+K826P5/UDiXrVKgeM5kr?=
 =?us-ascii?q?PDvJDZO8sbvKi5DBFR0oo57Ba/FTim3MwCnXYbNFJFZA6Hj4/xNlHKIfD4Dumw?=
 =?us-ascii?q?j06jkTd23P3GOrzhApPQLnnMirvhfLB961JCxwo319xQ+5VUCrQZKvLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsw+boEtR91p8EVmKIGKOZML7SvkWO5uIgOOSMYI4VuDDgK/kq/fLu?=
 =?us-ascii?q?jHk5mUMDcqmtx5cYdHe4HvF+KUWDfXXsmssBEXsNvgcmTuzqj0ONXSRQZ3a1Wa?=
 =?us-ascii?q?I84DY7BZmiDYfCQICtnbOA0D26Hp1QemBJFFSMHW30eIWDXvcGcDiSLdN5kjwY?=
 =?us-ascii?q?SbihTJcs2gu1tA/6zLpnLfDY+jcCupLhz9V14+zTlRcv9T17Fcid0meNT31qkW?=
 =?us-ascii?q?MMXTM5wKd/oUllwFeZzad4m+BYFcBU5/5RUQc1L5jcw/Z+C9DzQA3BeNiJRU2i?=
 =?us-ascii?q?QtWnBzExU90wz8UPY0Z7B9WtkBTD0zC2DL8SkryBHIY0/b7E33jtO8Z9zG7L27?=
 =?us-ascii?q?Q7gFk4XMRDL22mibR59wjIGYHJlUKVl6KpdaQZ2C7A72ODzWuIvEFFXw98S6TF?=
 =?us-ascii?q?XXYDZkTIqdT1/F/NT7irCb4/KAtO1daCKrdWat3ulVhJWe3sOMrAbG6rm2e/Hx?=
 =?us-ascii?q?CIxqiSY4rsYGgd2CTdCE4ZkwEc53qGNA4+Bju/rGLaFjBhCVXvY0b0++lktHy7?=
 =?us-ascii?q?VlM0zx2Nb0B5y7q1+xsVhfuAS/MT3rMIojshpy9zHFan29LWCtyApwV6caVYYN?=
 =?us-ascii?q?M95kpH1G3Duwx8OJygM75thloEfwtruEPu0g19Cp9cnsgysHMq0A1yJLqC31NF?=
 =?us-ascii?q?aTyZ0o7/O73NJmbp4RCgdrTZ2lfd0NaR5KcC8/A4q1TlvAG0GUsu6XRn099J03?=
 =?us-ascii?q?SC4pXGFhYdUZX0Ukwv7Rh1u6naYjUh54PTzXBtMbS0viXe1N4zBeolygyvf9FQ?=
 =?us-ascii?q?MK6fEA/yEssaB9WhKeAwmlipaA4EM/5W9KIuI8ymcP6G0raxPOl8hDKmkXhH4I?=
 =?us-ascii?q?dl30KW9ipzVvTH34wYzPGfxAeHUSnzjE2gsszuhY9LfzUSEXehxij+A45RYLZ/?=
 =?us-ascii?q?fYIKCWeoPs22yc9yh5/rW35E6lGjA0kK19OueRqXd1b9xxFf1VwLoXy7niu11z?=
 =?us-ascii?q?x1kzAzoqufxiDO2PnidBwcN25PRWlii0rsIIeug9AbWkiocxYmlB+/6UnmwKhb?=
 =?us-ascii?q?obx1L3PPTkdQYyj2M2ZiX7OytrWYec5P65AosSJNXOSne1+aSb39oxoc0yz9GW?=
 =?us-ascii?q?tT3zQ7dzCsupXkkB12kmOdLHBvrHXHfcF83wvQ5NvZRfRJxDoJWDF4iSXLBli7?=
 =?us-ascii?q?J9So/c+bl5DZvuC8VmKhUIZecS3qzYOGqSu66ndmARy5n/CvhNLnFRI23jP819?=
 =?us-ascii?q?lvTS/ItgrzYpH316SmNuJqZkpoC0X968ZgGoF+j5E/hJcf2XUBgpWV/HwHkXr8?=
 =?us-ascii?q?MNlB2KL+amYNSiAPw9LP/Afl30hjJGqTx43lTnWd3tdhZ96ib2MT2yI97NpFBL?=
 =?us-ascii?q?2a7bNahit1vkS3rRjKbvdjhDcdxuAj6Hobg+EPpQoswT+RArEUHUlEIyPskw6E?=
 =?us-ascii?q?4My5rKVSfGyva6S/1FJindC9C7GPuh1cWHH8eps4HC5/9MN/ME/X0H3o64HpY9?=
 =?us-ascii?q?3QbdMVth2JnBbMlelVKJQtlvUUgSprI37yvXogy+QjlxxhwYm6vJSbK2Vq5K+2?=
 =?us-ascii?q?GQRXNjrxZ8MO4D3tibtek92S34CuGJVhBzoKUIHpTfKuDDIdq/DnOxySHz07r3?=
 =?us-ascii?q?eRAaDfEhOH6Ed6s3LPFIimN3ONK3kc09piXwORJFBFjAAXQTU6nYM5Fgawy8z6?=
 =?us-ascii?q?a0p54jER5ljlqhpD0O5oNh//UnvBqwescDs7VJ+fLB9O5AFY+0jVKdCe7v50Hy?=
 =?us-ascii?q?xA/pyhqxGNKnWGZwtSC2EFQFeEB1flPrmh/tTA9+mYBuyjL/rBe7mOqOpeV+uW?=
 =?us-ascii?q?ypKryIdp4zGMNsCXNHl4E/I7wlZDXWx+G8nBmzUAVS0XlyHOb86avhu8+Td3rs?=
 =?us-ascii?q?ew8Pv1QgLv+JCPBqBWMdVu/RC2nKiCO/SRhCZ/NTZXyJcMyWXUx7gY2V4Ykztu?=
 =?us-ascii?q?eCW1EbQcqS7NS7rdlbVKDxEAcSN8KstJ47g43glMIsPbjtL11rhljv86EVtFVF?=
 =?us-ascii?q?rhmt23aswOOW2yKFTHBEOTPrScOTLL2933Yb+7SbBIkOVUthiwtSyHHEP5IjuD?=
 =?us-ascii?q?lyfmVxa0POFIjSGbOgFeuY6nfhZsD2jjUMzpahmhPNBrij02xKU+hmnWOm4ELT?=
 =?us-ascii?q?h8b0RNo6WQ7CxChPV/Hm1B7nx9IuiFmyaW9e/YKpkNvPtvAyR0kf9a4Xsgx7tU?=
 =?us-ascii?q?6iFEWOJ6mC/IotFypFGml7rH9j0yBBZRrykRrIONs19rNajQ+t9HQ3mSuFpZ6W?=
 =?us-ascii?q?SWFgRPosdpItnuoLxLjNnJmrj6JDpL/5TT58RKVObOL8fSEH08eSbgH3aADAwY?=
 =?us-ascii?q?UTesbEnfmkVCnfDU/XqQ+Mtp4qPwkYYDH+cIHGc+EekXXxxo?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AeAACPsgxch0O0hNFjHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJwqYF4Ihlz0UgV8sEwGHXSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2IoJ?=
 =?us-ascii?q?sAiRSBgkCUAM6IAENBQWDHIICBaRuM4ogh3KEL4IWgRGHXB+FcwKBKgGPDpA8B?=
 =?us-ascii?q?gOCJY8fCxiRPAGJIpFUgg5NI4FugU6CJxeOKjIBATGBBAEBAQ6LMYEugR8BAQ?=
X-IPAS-Result: =?us-ascii?q?A0AeAACPsgxch0O0hNFjHgEGBwaBUQkLAYNrJwqYF4Ihlz0?=
 =?us-ascii?q?UgV8sEwGHXSI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpL4I2IoJsAiRSBgkCUAM6I?=
 =?us-ascii?q?AENBQWDHIICBaRuM4ogh3KEL4IWgRGHXB+FcwKBKgGPDpA8BgOCJY8fCxiRPAG?=
 =?us-ascii?q?JIpFUgg5NI4FugU6CJxeOKjIBATGBBAEBAQ6LMYEugR8BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,333,1539673200"; 
   d="scan'208";a="55564998"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 08 Dec 2018 22:18:31 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726166AbeLIGS3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 9 Dec 2018 01:18:29 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:15665 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726066AbeLIGS3 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 9 Dec 2018 01:18:29 -0500
Received: from DGGEMS413-HUB.china.huawei.com (unknown [172.30.72.60])
        by Forcepoint Email with ESMTP id 55313EA0C9F0B;
        Sun,  9 Dec 2018 14:18:25 +0800 (CST)
Received: from huawei.com (10.90.53.225) by DGGEMS413-HUB.china.huawei.com
 (10.3.19.213) with Microsoft SMTP Server id 14.3.408.0; Sun, 9 Dec 2018
 14:18:24 +0800
From: Hou Tao <houtao1@huawei.com>
To: <dwmw2@infradead.org>, <linux-mtd@lists.infradead.org>
CC: <richard.weinberger@gmail.com>, <boris.brezillon@bootlin.com>,
        <linux-kernel@vger.kernel.org>
Subject: [PATCH] jffs2: make the overwritten xattr invisible after remount
Date: Sun, 9 Dec 2018 14:21:33 +0800
Message-ID: <20181209062133.106781-1-houtao1@huawei.com>
X-Mailer: git-send-email 2.16.2.dirty
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.90.53.225]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

For xattr modification, we do not write a new jffs2_raw_xref with
delete marker into flash, so if a xattr is modified then removed,
and the old xref & xdatum are not erased by GC, after reboot or
remount, the new xattr xref will be dead but the old xattr xref
will be alive, and we will get the overwritten xattr instead of
non-existent error when reading the removed xattr.

Fix it by writing the deletion mark for xattr overwrite.

Fixes: 8a13695cbe4e ("[JFFS2][XATTR] rid unnecessary writing of delete marker.")
Signed-off-by: Hou Tao <houtao1@huawei.com>
---
 fs/jffs2/xattr.c | 55 +++++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 49 insertions(+), 6 deletions(-)

diff --git a/fs/jffs2/xattr.c b/fs/jffs2/xattr.c
index da3e18503c65..b2d6072f34af 100644
--- a/fs/jffs2/xattr.c
+++ b/fs/jffs2/xattr.c
@@ -573,6 +573,15 @@ static struct jffs2_xattr_ref *create_xattr_ref(struct jffs2_sb_info *c, struct
 	return ref; /* success */
 }
 
+static void move_xattr_ref_to_dead_list(struct jffs2_sb_info *c,
+		struct jffs2_xattr_ref *ref)
+{
+	spin_lock(&c->erase_completion_lock);
+	ref->next = c->xref_dead_list;
+	c->xref_dead_list = ref;
+	spin_unlock(&c->erase_completion_lock);
+}
+
 static void delete_xattr_ref(struct jffs2_sb_info *c, struct jffs2_xattr_ref *ref)
 {
 	/* must be called under down_write(xattr_sem) */
@@ -582,10 +591,7 @@ static void delete_xattr_ref(struct jffs2_sb_info *c, struct jffs2_xattr_ref *re
 	ref->xseqno |= XREF_DELETE_MARKER;
 	ref->ino = ref->ic->ino;
 	ref->xid = ref->xd->xid;
-	spin_lock(&c->erase_completion_lock);
-	ref->next = c->xref_dead_list;
-	c->xref_dead_list = ref;
-	spin_unlock(&c->erase_completion_lock);
+	move_xattr_ref_to_dead_list(c, ref);
 
 	dbg_xattr("xref(ino=%u, xid=%u, xseqno=%u) was removed.\n",
 		  ref->ino, ref->xid, ref->xseqno);
@@ -1090,6 +1096,40 @@ int do_jffs2_getxattr(struct inode *inode, int xprefix, const char *xname,
 	return rc;
 }
 
+static void do_jffs2_delete_xattr_ref(struct jffs2_sb_info *c,
+		struct jffs2_xattr_ref *ref)
+{
+	uint32_t request, length;
+	int err;
+	struct jffs2_xattr_datum *xd;
+
+	request = PAD(sizeof(struct jffs2_raw_xref));
+	err = jffs2_reserve_space(c, request, &length,
+			ALLOC_NORMAL, JFFS2_SUMMARY_XREF_SIZE);
+	down_write(&c->xattr_sem);
+	if (err) {
+		JFFS2_WARNING("jffs2_reserve_space()=%d, request=%u\n",
+				err, request);
+		delete_xattr_ref(c, ref);
+		up_write(&c->xattr_sem);
+		return;
+	}
+
+	xd = ref->xd;
+	ref->ino = ref->ic->ino;
+	ref->xid = xd->xid;
+	ref->xseqno |= XREF_DELETE_MARKER;
+	save_xattr_ref(c, ref);
+
+	move_xattr_ref_to_dead_list(c, ref);
+	dbg_xattr("xref(ino=%u, xid=%u, xseqno=%u) was removed.\n",
+		  ref->ino, ref->xid, ref->xseqno);
+	unrefer_xattr_datum(c, xd);
+
+	up_write(&c->xattr_sem);
+	jffs2_complete_reservation(c);
+}
+
 int do_jffs2_setxattr(struct inode *inode, int xprefix, const char *xname,
 		      const char *buffer, size_t size, int flags)
 {
@@ -1097,7 +1137,7 @@ int do_jffs2_setxattr(struct inode *inode, int xprefix, const char *xname,
 	struct jffs2_sb_info *c = JFFS2_SB_INFO(inode->i_sb);
 	struct jffs2_inode_cache *ic = f->inocache;
 	struct jffs2_xattr_datum *xd;
-	struct jffs2_xattr_ref *ref, *newref, **pref;
+	struct jffs2_xattr_ref *ref, *newref, *oldref, **pref;
 	uint32_t length, request;
 	int rc;
 
@@ -1113,6 +1153,7 @@ int do_jffs2_setxattr(struct inode *inode, int xprefix, const char *xname,
 		return rc;
 	}
 
+	oldref = NULL;
 	/* Find existing xattr */
 	down_write(&c->xattr_sem);
  retry:
@@ -1196,11 +1237,13 @@ int do_jffs2_setxattr(struct inode *inode, int xprefix, const char *xname,
 		rc = PTR_ERR(newref);
 		unrefer_xattr_datum(c, xd);
 	} else if (ref) {
-		delete_xattr_ref(c, ref);
+		oldref = ref;
 	}
  out:
 	up_write(&c->xattr_sem);
 	jffs2_complete_reservation(c);
+	if (oldref)
+		do_jffs2_delete_xattr_ref(c, oldref);
 	return rc;
 }
 
-- 
2.16.2.dirty

