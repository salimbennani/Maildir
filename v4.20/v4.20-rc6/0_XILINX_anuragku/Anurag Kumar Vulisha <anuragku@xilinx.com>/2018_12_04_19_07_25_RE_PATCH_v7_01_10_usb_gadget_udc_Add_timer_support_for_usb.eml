Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 05 Dec 2018 08:43:12 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BF5D358014B;
	Tue,  4 Dec 2018 11:07:42 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 04 Dec 2018 11:07:42 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKYQ5ox+gZrKFOv9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1u0QIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CRWRPQNtfVzBPDI2/?=
 =?us-ascii?q?YYsADesBMvpXoYbyvFsOtRmzCBKwBOP21jNEmmP60bEk3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMsNj1MroSUfqvw6nH0D7Nau5W2TLn54jSbxsuruyMXbZxccrKyUkgDR7Og1KK?=
 =?us-ascii?q?pozjIjOVzP4Cs2eY7+p9Tu+uhG8nqwVwojipycYgkJXGhoUQyl3d8yhy3Yg7Jd?=
 =?us-ascii?q?q9SEFhYN6kFoNdtyKEOItsRMMtXWVotDw9yr0ctp62ejUBxpc/xxPHdfCLb4yF?=
 =?us-ascii?q?7gj+WOufPzt0nm9pdbGjixqo8EWtyPXwWtS33VpUtCZJj9rBumoQ2xHR6MWLUO?=
 =?us-ascii?q?Zx80W91TqX2QDc9OJJLVwxmKfeJJMsxqM8m5UWvETNACP7lln6gaqYdkk45uel?=
 =?us-ascii?q?6OHqb7Xlq5KYN4J5jBz1PL40lcylG+s4NxADX2iF9uS4073u5VP5QLpUgf0siK?=
 =?us-ascii?q?XZs47VJd4dpqGnBw9ZyIEj6wywDzu+0dQYm2cILE5ddR6Zk4TkP0vCLO32APuh?=
 =?us-ascii?q?mVigjTRmy+zcMrDgAJjBNn3Dn63gfbZ55U5c0g0zzdVH6pJQC7EBJu/zW0DouN?=
 =?us-ascii?q?zbEBA5KQq0zPjjCNlk0YMfV2SPDbGDMK7Jr1+I6fwgI/OWaI8Wpjn9Mf4l6ODq?=
 =?us-ascii?q?jXMjnl8dZ6ap0YMNaH+kBvRmP1mZYX30j9cFEGcKvRQxQPbliV2fSjNTY3eyX6?=
 =?us-ascii?q?Qh5jA0Eo6mDIHDRpyzj7yFxiu0AppWZmVeAFCWDXjob5mEW+sLaC+KIs9uiD0E?=
 =?us-ascii?q?VaS7RI8mzx2utBL6xKBhLurb4SAYsZPj1N5o5+zcjx0y9Dp0D9iD3GGJVW17gm?=
 =?us-ascii?q?QIRzou1qBlvUN90kuD0bR/g/FAF9xT4O1GXh05NZ7byex6DdfyVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8KNxmy3bG06?=
 =?us-ascii?q?khjEMqQtFVOm2knaN/8wnTB4jUk0SWjaqqdKIc3DLT+2eH12aBoEZYUAtoW6Xf?=
 =?us-ascii?q?QX8fflfWrcj+5k7aTL+hE7InPhFFyc6DMKRKbNLpgE5CRPfiPtTefm2wl32xBR?=
 =?us-ascii?q?aO2rODco7qd38B0yXaDUgOixoT8mqeNQgiGiehpHrTAyF0GlLxfUzg6+l+p2m9?=
 =?us-ascii?q?Tk8v0Q6KaUpt1762+h4QgfyRUPcT3rMCuCc8pDR4Ble939TKC9WeowptZrlTYd?=
 =?us-ascii?q?Q44F1fz2LWqxR9PoC8L6BlnlMRbh54v13w2BltCoVPi84qrGg0wwp0Mq+Y1FJB?=
 =?us-ascii?q?dzWF3ZH/ILHXK2/y/AyxZK7SwF3RzNGW+qIX4vQit1rjpB2pFlYl83h/z9lV0n?=
 =?us-ascii?q?6c5pLWDAoSUZP9SFo3+wJ9p7HAZik95oXU1XJ3PKmwsz/C3c8pBeQ/xhaheddf?=
 =?us-ascii?q?LL2LFAvoH8IGAMiuLfQgm0K1YRIcIOBS6Kk0Mtu8ePuCxqGqM/hvnTK8gWtc/Y?=
 =?us-ascii?q?Byz1iD9yx/Su7PwZYI2PWY3gqBVzfhg1atqMH3mYZYZT4MGmqz0zTrBIlUZqdq?=
 =?us-ascii?q?Z4YEFX+uI9GrxtV5n5PsW2NY+ES/CF8c2c6peQCdb1ry3QBL0UQXoHqnmTa3zj?=
 =?us-ascii?q?BukjEpqLaf0zLKw+j4aBUHPWtLTnF4jVjwOYi0k8waXE+wYggzlRuq+Vz1x7JG?=
 =?us-ascii?q?q6R4NWXTR1lHfzL3L217TqS/rL6CbNNR55MytiVXVv+xYVSbSr77vhsb3DnvH2?=
 =?us-ascii?q?pYxDAnaT6qvo/1kAB9iGKYNHxztmbWedlsxRfD49zRXf5Q3jscSCh4kzXXHUW8?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3KrBnmeInr1Ke6MeV9cklzHlD86Ml6GoB4koQugpEdwnwahpST/Xoanmb/?=
 =?us-ascii?q?K9Rb2aTibHUTQT4H2cLa4A/g2Ed7NHKG25r5VmmBwstmf9S7YnkZ2iUn48BICa?=
 =?us-ascii?q?eU6qdJnS90olq+sALQbuJxnjYbyfsy9nEah/sFtxYqziWYGroSB1VXPTTwlxSU?=
 =?us-ascii?q?6NCztKZXa3yucbSq1Ep+gMquDLeNogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NGL4vH0lyPQ0gQZg3J6kp4iHN3ti/Lii?=
 =?us-ascii?q?DRFGLD31aNge+jXsjaZYg8aX0JqjHpRnGjUXQpToSeikHy4VtfTiLwyOCiEzqm?=
 =?us-ascii?q?+HGbrDGg+S8Ftmr3XKE5yxNnCYPn8Zzch5RBmGJUxSmwQUXDQ8np4kGQGm3s3h?=
 =?us-ascii?q?cEFl5j8P4l70sAdDyuVtNxPnSGfQuB+oaisoSJiYNBdZ9RtN50DRMcyD9O5zGz?=
 =?us-ascii?q?xY84alrAyMLGybegtJAXsIWkyCG1DsIL2u6cPc/OifA+q0N+HObqmWqexCS/eI?=
 =?us-ascii?q?woqi0ol88DaJKMqPJWNuD+Eh1kpAQHB5GNnZmzMVRCwMjC/Na8+bpBGh+ix4tM?=
 =?us-ascii?q?y/8fLrWB7x6ouLEbddLdJv+xWui6eZK+GQnDp5KSpf1p4UxX7Iz6Uf3EcPiy50?=
 =?us-ascii?q?cTmhC68AtSnLTKLfgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fBEaEKrWGJT7Iw8H2e6+8SqdQjOJbtxKuozabDlTjMy+H?=
 =?us-ascii?q?lznoURCvLO5NgDuaPBxYpIGybBJtBXL/Q9Lhbx2xKMV3giEuwb0omnPKMnYRPi?=
 =?us-ascii?q?Jhc0xWtL2f8yNZju97G2xA9XdlKeiEmyCE7+jXMJoWsP1rAjhqmOJe+ng117xV?=
 =?us-ascii?q?7CRcTvxvhCTStsJuo02hkuSX1jpnUR9OpixXi46RoUpiObvW9p9bVHbA/RIN63?=
 =?us-ascii?q?iQChsQq9tkDN3vp75fytzVmK3vLzdC9sre/dEACMjMNMKHLH0hPALpGTHOCgsF?=
 =?us-ascii?q?SD+rNWfHiE1ckPGd7HuVrpchp5jomZoOTKJbVVMvGvMbDERlAMINIJNtUjw4lr?=
 =?us-ascii?q?6biZ1A2X3rhR3YQo1hop3dULrGGuniMjCxl75bYxIOzfX4JJ4NP5f3nUFudw8p?=
 =?us-ascii?q?sp7NHh/5W81XqyIpTRIxqV8FzmV6T3Yz0gqxYwWw+nYcFuOcjh8yiw1uJ+8q8W?=
 =?us-ascii?q?G/sB8MOlPWqX5owwEKktL/jGXUKWapIQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAABUzwZch0O0hNFkDg4BAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwKiZpcwQLJwqHNgOET4tEglcUiH2OOIEkA0wTARgLCAGBS4J?=
 =?us-ascii?q?1AoMKIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQI3BgEBN?=
 =?us-ascii?q?wEFBgMBAQEBCBEEAQEBHgkHAx4RFAkIAgQKBAUFAxOCO0sBgWkDFAEBAgIKmVY?=
 =?us-ascii?q?CigeCH4J2AQEFgTABg1gNC4IJAwUUjAoRBoFAP4ERRoJMgUEBgRWCFhuDLoImi?=
 =?us-ascii?q?S+Bc5R7LgmHA4cQg0aBW4URijqKCYNlgQyJVgIEAgQFAg0BAQWBRoINMxoIGxW?=
 =?us-ascii?q?DJ4Ibg22DFoF+hQQ7coEFAQEhh3QBAyKBCAGBHgEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAABUzwZch0O0hNFkDg4BAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wKiZpcwQLJwqHNgOET4tEglcUiH2OOIEkA0wTARgLCAGBS4J1AoMKIjQJDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQI3BgEBNwEFBgMBAQEBCBE?=
 =?us-ascii?q?EAQEBHgkHAx4RFAkIAgQKBAUFAxOCO0sBgWkDFAEBAgIKmVYCigeCH4J2AQEFg?=
 =?us-ascii?q?TABg1gNC4IJAwUUjAoRBoFAP4ERRoJMgUEBgRWCFhuDLoImiS+Bc5R7LgmHA4c?=
 =?us-ascii?q?Qg0aBW4URijqKCYNlgQyJVgIEAgQFAg0BAQWBRoINMxoIGxWDJ4Ibg22DFoF+h?=
 =?us-ascii?q?QQ7coEFAQEhh3QBAyKBCAGBHgEB?=
X-IronPort-AV: E=Sophos;i="5.56,315,1539673200"; 
   d="scan'208";a="65291293"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 04 Dec 2018 11:07:40 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726108AbeLDTHg (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 4 Dec 2018 14:07:36 -0500
Received: from mail-eopbgr750047.outbound.protection.outlook.com ([40.107.75.47]:5856
        "EHLO NAM02-BL2-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1725797AbeLDTHg (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 4 Dec 2018 14:07:36 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=xilinx.onmicrosoft.com; s=selector1-xilinx-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=4gSTi9plvDufJZ0djB89Fc+MSmFuJSIyJ/mEJGrdjJ0=;
 b=R8YZheDtXnMafuF7blk75ERJ0jXNA8Un3kOB2X/B0SMMSINwN+aFoSX9uGeLhaAEumqBr6UeHMdWv5tWEeBhg6+KXBV0Z4WT/owoohEagTu4ezfvZKa8Pjx4CXdKM8PwFZKqavpBMVEoLlq+XRVzs3nl+x0II8Cc8kBiz5hxUoE=
Received: from SN6PR02MB5648.namprd02.prod.outlook.com (20.177.251.214) by
 SN6PR02MB5184.namprd02.prod.outlook.com (52.135.100.21) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1382.21; Tue, 4 Dec 2018 19:07:25 +0000
Received: from SN6PR02MB5648.namprd02.prod.outlook.com
 ([fe80::4914:f230:f0c8:5895]) by SN6PR02MB5648.namprd02.prod.outlook.com
 ([fe80::4914:f230:f0c8:5895%3]) with mapi id 15.20.1382.020; Tue, 4 Dec 2018
 19:07:25 +0000
From: Anurag Kumar Vulisha <anuragku@xilinx.com>
To: Alan Stern <stern@rowland.harvard.edu>
CC: Felipe Balbi <balbi@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Shuah Khan <shuah@kernel.org>, Johan Hovold <johan@kernel.org>,
        Jaejoong Kim <climbbb.kim@gmail.com>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Roger Quadros <rogerq@ti.com>,
        Manu Gautam <mgautam@codeaurora.org>,
        "martin.petersen@oracle.com" <martin.petersen@oracle.com>,
        Bart Van Assche <bvanassche@acm.org>,
        Mike Christie <mchristi@redhat.com>,
        Matthew Wilcox <willy@infradead.org>,
        Colin Ian King <colin.king@canonical.com>,
        "linux-usb@vger.kernel.org" <linux-usb@vger.kernel.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "v.anuragkumar@gmail.com" <v.anuragkumar@gmail.com>,
        Thinh Nguyen <thinhn@synopsys.com>,
        Tejas Joglekar <tejas.joglekar@synopsys.com>,
        Ajay Yugalkishore Pandey <APANDEY@xilinx.com>
Subject: RE: [PATCH v7 01/10] usb: gadget: udc: Add timer support for usb
 requests
Thread-Topic: [PATCH v7 01/10] usb: gadget: udc: Add timer support for usb
 requests
Thread-Index: AQHUiWbrxVzoMt2EkU67+RgGKmmQY6Vrp4EAgAEXBVCAAF3jgIAAAp+AgACIUoCAAM7bwIAAWNWAgAAcRaA=
Date: Tue, 4 Dec 2018 19:07:25 +0000
Message-ID: <SN6PR02MB56484B8D1F891926DA7D7900A7AF0@SN6PR02MB5648.namprd02.prod.outlook.com>
References: <SN6PR02MB564841A6B40602168325B434A7AF0@SN6PR02MB5648.namprd02.prod.outlook.com>
 <Pine.LNX.4.44L0.1812041138440.1537-100000@iolanthe.rowland.org>
In-Reply-To: <Pine.LNX.4.44L0.1812041138440.1537-100000@iolanthe.rowland.org>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-Auto-Response-Suppress: DR, RN, NRN, OOF, AutoReply
X-MS-TNEF-Correlator: 
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=anuragku@xilinx.com; 
x-originating-ip: [182.18.177.170]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;SN6PR02MB5184;6:UdzN6hSTpu6SDPbbuklw8jshZpJrCmpzijDGdvfrifunWdbJ3azXm9KUUZhSaAxpvk4uLhW5pixC8gXRwtOtSzERpgGe7NmTZBFU3kE5f+SqMK8Rh3xy702o37DVo2Qu/iF6XXkldtyc6flOp1d+rDD7sns4MMzjx+YOsVVzvcRPoMwTLG0Q8I1NG+NJg7GP/Yhd/62P5QQ6i87f/+64NH36r/JA3Uj+fwoEyPvXWhb5VoSNzTNg8UF4r9ZBzZs/bWYQd9SyYlOjkVj2CKsJxZ+QL4NY6DjxWs7t1ZnMwV1+i3e4msIWwYxq85luB+ZjWftHroJoa9SFSxjRAb5Hlf0xMl+4YqOh+Bd2vPM0m8nrCsayJJx3mRGCZaUDeO1NGV0g6mPW/hqP5kCgUniyKv658frloLWzrOvy33r25nv+NKgru08mYKZTDlDwHZb79/VJcRBHmgsUrIT5x2uLtQ==;5:E8LzvS0llOPiC+cBuoVmPIeI7acXNimlX6iUPRfOnaqBMkhNN4OFDuLbWwktmhS7QaXcukHHx+no7b4Lu4tSnp8AQDWHAvUs53Rt8pMj+I6Lg6Bhi2ZH3TAdufFSL5vVxFA3pSrIM2ofgN8EnIPGLmdUPg4ae8u7543jMGWGkXc=;7:J2beToIpyxflEFMgCfUfd1vNPyMMERkSkF6maws3ckVy7C/jmApJn8wy9+LWHu6s6DoBb0WfpbF/ZGeKV057w9TFFANNWYapBTWUiveqRaHBSDvq58L0VUTtvRVGaZ4scpi5ooBoq7zHJynBF1oc6g==
x-ms-office365-filtering-correlation-id: 16d9de2f-200f-4950-3d90-08d65a1bba1f
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600074)(711020)(4618075)(2017052603328)(7153060)(7193020);SRVR:SN6PR02MB5184;
x-ms-traffictypediagnostic: SN6PR02MB5184:
x-ld-processed: 657af505-d5df-48d0-8300-c31994686c5c,ExtAddr
x-microsoft-antispam-prvs: <SN6PR02MB51840E39C8B9331089145BBAA7AF0@SN6PR02MB5184.namprd02.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(10201501046)(3002001)(3231455)(999002)(944501493)(52105112)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(20161123558120)(20161123564045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123562045)(201708071742011)(7699051)(76991095);SRVR:SN6PR02MB5184;BCL:0;PCL:0;RULEID:;SRVR:SN6PR02MB5184;
x-forefront-prvs: 0876988AF0
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(346002)(136003)(366004)(376002)(396003)(39860400002)(199004)(189003)(13464003)(7736002)(476003)(76176011)(305945005)(2171002)(107886003)(26005)(486006)(25786009)(14444005)(256004)(105586002)(106356001)(7696005)(6506007)(7416002)(14454004)(186003)(102836004)(5660300001)(966005)(74316002)(6246003)(9686003)(11346002)(446003)(86362001)(55016002)(478600001)(97736004)(6306002)(99286004)(2906002)(6916009)(66066001)(3846002)(6436002)(6116002)(53936002)(71200400001)(68736007)(316002)(33656002)(71190400001)(54906003)(4326008)(8676002)(39060400002)(81156014)(8936002)(81166006)(229853002);DIR:OUT;SFP:1101;SCL:1;SRVR:SN6PR02MB5184;H:SN6PR02MB5648.namprd02.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
x-microsoft-antispam-message-info: nkXSBQarCeybjaQAk6U82IsIMj/YLvnY5SnwvGjB1X52q7Z1185uVbve9F8I00XM8W3OHZbZs4WIljsThLTsP25NiiHonouaTmD8F6JCt79ieCoLBP0F48UP+mDkqWp8Luc4LCTQ3O9jWlLgYit0Yyg/EpDoHNwlaiQ4vjj88ubzSqx8TZuN3v2bB54X5Ti4l3gxGiOq3yEzR62Kz8XD+vkj8Bkq4lQ/xUATufxxct+xoIbNgEA81IfDYlOckufxYXnNoPgAwpWdr1RLKJxRbP2aCg7+iY3aFIv1xUNWd81zUYoGhZU40LP1aDMlKzwgFXQxL5piYd/coKRZ56QptEypKLcUeORzTJZ5XPuBtko=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: xilinx.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 16d9de2f-200f-4950-3d90-08d65a1bba1f
X-MS-Exchange-CrossTenant-originalarrivaltime: 04 Dec 2018 19:07:25.1509
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 657af505-d5df-48d0-8300-c31994686c5c
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN6PR02MB5184
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Alan,

>-----Original Message-----
>From: Alan Stern [mailto:stern@rowland.harvard.edu]
>Sent: Tuesday, December 04, 2018 10:17 PM
>To: Anurag Kumar Vulisha <anuragku@xilinx.com>
>Cc: Felipe Balbi <balbi@kernel.org>; Greg Kroah-Hartman
><gregkh@linuxfoundation.org>; Shuah Khan <shuah@kernel.org>; Johan Hovold
><johan@kernel.org>; Jaejoong Kim <climbbb.kim@gmail.com>; Benjamin
>Herrenschmidt <benh@kernel.crashing.org>; Roger Quadros <rogerq@ti.com>; M=
anu
>Gautam <mgautam@codeaurora.org>; martin.petersen@oracle.com; Bart Van
>Assche <bvanassche@acm.org>; Mike Christie <mchristi@redhat.com>; Matthew
>Wilcox <willy@infradead.org>; Colin Ian King <colin.king@canonical.com>; l=
inux-
>usb@vger.kernel.org; linux-kernel@vger.kernel.org; v.anuragkumar@gmail.com=
;
>Thinh Nguyen <thinhn@synopsys.com>; Tejas Joglekar
><tejas.joglekar@synopsys.com>; Ajay Yugalkishore Pandey <APANDEY@xilinx.co=
m>
>Subject: RE: [PATCH v7 01/10] usb: gadget: udc: Add timer support for usb =
requests
>
>On Tue, 4 Dec 2018, Anurag Kumar Vulisha wrote:
>
>> >> Yes the host can cancel the transfer. This issue originated from
>> >> the endpoints using
>> >bulk
>> >> streaming protocol and may not occur with normal endpoints. AFAIK
>> >> bulk streaming
>> >is
>> >> gadget driven, where the gadget is allowed to select which stream
>> >> id transfer the
>> >host
>> >> should work on . Since the host doesn't have control on when the
>> >> transfer would be selected by gadget, it may wait for longer timeouts=
 before
>cancelling the transfer.
>> >
>> >You're missing the point.  Although the device selects which stream
>> >ID gets transferred, the _host_ decides whether a stream transfer
>> >should occur in the first place.  No matter how many ERDY packets the
>> >device controller tries to send, no transfer will occur until the
>> >host wants to do it.
>> >
>> >In this sense, stream transfers (like all other USB interactions
>> >except wakeup requests) are host-driven.
>> >
>>
>> I agree with you that without host willing to transfer, the transfer
>> wouldn't have started and also agree the host always has the
>> capability of detecting the hang. But we are not sure on what host
>> platform and operating system the gadget would be tested and also not su=
re
>whether the host software is capable of handling the deadlock.
>> Even if the host has a timer , it would be very long and waiting for
>> the timer to get timedout  would reduce the performance. In this patch
>> we are giving the user the flexibility to opt the timeout value, so
>> that the deadlock can be avoided without effecting the performance. So
>> I think adding the timer in gadget is more easier solution than handling=
 in host. I
>have seen this workaround working for both linux & windows.
>
>Is there any way for the device controller driver to detect the problem wi=
thout relying
>on a timeout?
>
>In fact, is this problem a known bug in the existing device controller har=
dware?  Have
>the controller manufacturers published a suggested scheme for working arou=
nd it?
>

Yes, this problem is mentioned in dwc3 controller data book and the workaro=
und
mentioned  is the same that we are doing , to implement timeout and if no v=
alid
stream event is found , after timeout issue end transfer followed by start =
transfer.

>> >> >> Since the gadget
>> >> >> controller driver is aware that the controller is stuck , makes
>> >> >> it responsible to recover the controller from hang condition by
>> >> >> restarting the transfer (which triggers the controller FSM to issu=
e ERDY to
>host).
>> >> >
>> >> >Isn't there a cleaner way to recover than by cancelling the
>> >> >request and resubmitting it?
>> >> >
>> >>
>> >> dequeuing the request issues the stop transfer command to the
>> >> controller, which cleans all the hardware resource allocated for
>> >> that endpoint. This also resets the hardware FSMs for that endpoint
>> >> . So, when re-queuing of the transfer happens the controller starts
>> >> allocating hardware resources again, thus avoiding the
>> >probability
>> >> of entering into the issue. I am not sure of other controllers, but
>> >> for dwc3, issuing the stop transfer is the only way to handle this is=
sue.
>> >
>> >Again you're missing the point.  Can't the controller driver issue
>> >the Stop Transfer command but still consider the request to be in
>> >progress (i.e., don't dequeue the request) so that the gadget
>> >driver's completion callback isn't invoked and the request does not
>> >need to be explicitly resubmitted?
>> >
>>
>> Yes , what you are saying is correct. My initial patches were
>> following the same approach that you have suggested. We switched to
>> the dequeue approach because there can be different gadgets which may
>> enter into this issue and it would be better to follow a generic
>> approach rather than having every controller driver implementing their o=
wn
>workaround.
>> Please find the conservation in this link
>> https://patchwork.kernel.org/patch/10640145/
>
>At this point, it seems that the generic approach will be messier than hav=
ing every
>controller driver implement its own fix.  At least, that's how it appears =
to me.

With the dequeue approach there is an advantage(not related to this issue) =
that the
class driver can have control of the timed out transfer whether to requeue =
it or consider
it as an error (based on implementation). This approach gives more flexibil=
ity to the class
drivers. This may be out of context of this issue but wanted to point out t=
hat we may lose
this advantage on switching to older implementation.
 =20
>
>> >> @Felipe:  Can you please provide your suggestion on this.
>> >
>> >> >How can the gadget driver know what timeout to use?  The host is
>> >> >allowed to be as slow as it wants; the gadget driver doesn't have
>> >> >any way to tell when the host wants to start the transfer.
>> >>
>> >> Yes , I agree with you that the timeout may vary from usage to
>> >> usage. This timeout should be decided by the class driver which
>> >> queues the request. As discussed above this issue was observed in
>> >> streaming protocol , which  is very much faster than
>> >normal
>> >> BOT modes and it works on super speed .
>> >
>> >Although USB mass storage is currently the only user of the stream
>> >protocol, that may not be true in the future.  You should think in
>> >more general terms.  A timeout which is appropriate for mass storage
>> >may not be appropriate for some other application.
>> >
>>
>> You are correct , this timeout may not be ideal. Since  I was not able
>> to reproduce this issue on non-stream capable transfers , at  present
>> the only user of usb_ep_queue_timeout() API is the streaming gadget.
>> As we are not aware of the optimal timeout value,  instead of
>> hardcoding the timeout value we can add module_param() for it.  So that =
the user
>can configure timeout based on their use case. Please let me know your sug=
gestion
>on this.
>
>Ideally it would not be necessary to rely on a timeout at all.
>
>Also, maintainers dislike module parameters.  It would be better not to ad=
d one.

Okay. I would be happy if any alternative for this issue is present but unf=
ortunately
I am not able to figure out any alternative other than timers. If not modul=
e_params()
we can add an configfs entry in stream gadget to update the timeout. Please=
 provide
your opinion on this approach.=20

Thanks,
Anurag Kumar Vulisha=20
