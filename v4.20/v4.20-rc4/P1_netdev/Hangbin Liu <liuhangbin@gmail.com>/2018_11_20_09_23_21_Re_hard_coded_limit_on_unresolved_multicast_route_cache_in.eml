Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (61.164.42.155:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 11:08:44 -0000
Received: from icoremail.net (unknown [209.85.214.180])
	by mail-app4 (Coremail) with SMTP id cS_KCgD3_9vl0vNbRpzeAQ--.33189S3;
	Tue, 20 Nov 2018 17:24:53 +0800 (CST)
Received: from mail-pl1-f180.google.com (unknown [209.85.214.180])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwD31UHi0vNbsk1dAA--.960S3;
	Tue, 20 Nov 2018 17:24:51 +0800 (CST)
Received: by mail-pl1-f180.google.com with SMTP id y6-v6so717666plt.3
        for <xuliker@zju.edu.cn>; Tue, 20 Nov 2018 01:24:50 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=J+loFHLIN/FpfsI3KCBtBQYTvBRNwHz945sVMVsirKM=;
        b=GiSxyefo2SDmU7sgUQw+X1KdqGB3WO/V41H/oHfJXBeXBPDlbIpiUXoL2lp2QDXn/v
         Cd2QX2GdNprvUTl5n7RDvHKkiDhysCW+c05GTjkybkP1MhFinW7BB5R9rEm1TmdnDMgN
         NRCj2wtrGywJ1hHs7awc8v4d8VAYpTpULsZ0cPdtAkjXAeGJOj6DZ8vDpZnKM0ok38R4
         xHW/8+fP4N30D+cuO56w2CK1np0VRf1D6OgrKMFs3WXaAE9FwFefEwvZObpBo4buziJj
         iLi/n/kgcAmVZ2BkTfIvQORELpHIiBu2NdBsJ3iEoqqRonuKLubsMASRlqy5esj5tRHO
         5GGA==
X-Gm-Message-State: AA+aEWZn8WOuvdtdzRcX8I14TBD3AibdjKUJvN/qfGYZyO0f8Gpiaslj
	He61rIJFRXtHr/EBw89ptOTktvkIvnWiNNq8daYPkp+b4eTDnI0=
X-Received: by 2002:a17:902:6686:: with SMTP id e6-v6mr1396014plk.173.1542705890533;
        Tue, 20 Nov 2018 01:24:50 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp368254pju;
        Tue, 20 Nov 2018 01:24:49 -0800 (PST)
X-Google-Smtp-Source: AFSGD/UXQTClTmAyjtqkZzzcAeS4JNuqsogxOrh/RWXu6YWwGcAvNnPjb05bh1Hnu5cu61fxfWlS
X-Received: by 2002:a63:61c8:: with SMTP id v191mr1234521pgb.242.1542705889722;
        Tue, 20 Nov 2018 01:24:49 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542705889; cv=none;
        d=google.com; s=arc-20160816;
        b=nT//eebiB8AvknNzdgXcIVCtrsuVo5PtAM8/9jrKraaWUN2F1JiSyykYWRYzRHXb7F
         V/KgO2dTKpCezaVSIHvQFuM+txssQxNABd1oAYeb+DAJapFtAtiI+ZUnoIf8EusEhLKk
         GjvB9Qwf+rinLIBzAvb7cuIrssnLKgS3NbajIhEskUBCdTwLJbjJSSFyKI0oQ0nYn+eY
         sZD2Y+FiKCBWD5VS+7T9XHAV1F/yY//PIMJZvG74CIq5AP/wGx03WmVhiTslPN/GCQSi
         wW3nPddR2tABw/i7LcAQQmfIgreEMziCgR/xzxz0xgGS/6vQ2Gs+8CuQ8sMkSOLDW08P
         Mtjg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=J+loFHLIN/FpfsI3KCBtBQYTvBRNwHz945sVMVsirKM=;
        b=Wlr1rCZ1P7iiM924G53HK/1nQXE6G7pMSq+FX3qW7Wnvnu1F59265bU4Vf6wHQVJsg
         mW5iaPEdlaCr80x9fW9oNMcNSgnY5o8b1DK9YhN+X3pqyrDgqUVjyCus693X3yDi6ezZ
         sNBFDKpNXrHB/zE7qCh3xupt/Q1OYghRDWbgsx+Z2Zt5VCaQ6/8wEsL1VL+YVOV1WE4W
         6lMs0BBPRCbTQ5Ot/SV0+hyPZGapPERgDLJGmlmrMZkr2guBpJpfvBfKDBit/uesSd3K
         5SuHkI31v6rPIGT9+Uh09OdPC0L6nauif6/PPWceKRg1+9flBix4+nK5ZB9nosq3VgBu
         uJow==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20161025 header.b=Mm6YX6A0;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id w17si36410416pgl.6.2018.11.20.01.24.35;
        Tue, 20 Nov 2018 01:24:49 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727605AbeKTTvl (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Tue, 20 Nov 2018 14:51:41 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:43922 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726477AbeKTTvl (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 14:51:41 -0500
Received: by mail-pg1-f196.google.com with SMTP id v28so629894pgk.10;
        Tue, 20 Nov 2018 01:23:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=J+loFHLIN/FpfsI3KCBtBQYTvBRNwHz945sVMVsirKM=;
        b=Mm6YX6A0OIp6lPhSTJ7SgQeH7eJJym1f9KEdkggcB49qT4HogYzT4VfNmI2bAYeQaw
         3iVyw3bASUR+HPH8RPp+5KoCbmOsYC5NZRuVIfhTlflao6wbiXqvVHJ46m1ZsYWV0oCb
         wNP8+/B8wH1rOXLrNVqYFYo6xM6JeKBesT2xdgOt48Bcc1jjRLh990LJD3MLTBiBio24
         TzokXYByj1ZAqtrP4byJkpy0+AfG5t7dJS89Uk4l+sMK9GXCR6k5fRNpsIE/vJ2idKvT
         ihftF86eYbRkaCc26vij7Jgcu45NVngBd5Cj5vRvYwvibLKtq3LIxLQfrB1r1cpIrn61
         ONYw==
X-Received: by 2002:a63:ce08:: with SMTP id y8mr1196467pgf.388.1542705812650;
        Tue, 20 Nov 2018 01:23:32 -0800 (PST)
Received: from leo.usersys.redhat.com ([209.132.188.80])
        by smtp.gmail.com with ESMTPSA id y89sm426896pfa.136.2018.11.20.01.23.30
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 20 Nov 2018 01:23:32 -0800 (PST)
Date: Tue, 20 Nov 2018 17:23:21 +0800
From: Hangbin Liu <liuhangbin@gmail.com>
To: David Miller <davem@davemloft.net>
Cc: karn@ka9q.net, kuznet@ms2.inr.ac.ru, yoshfuji@linux-ipv6.org,
        netdev@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: hard-coded limit on unresolved multicast route cache in
 ipv4/ipmr.c causes slow, unreliable creation of multicast routes on busy
 networks
Message-ID: <20181120092321.GR24677@leo.usersys.redhat.com>
References: <147f730b-8cbf-b76d-f693-b3fdaf72a89c@ka9q.net>
 <20180721.220309.1193443933653884021.davem@davemloft.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20180721.220309.1193443933653884021.davem@davemloft.net>
User-Agent: Mutt/1.7.0 (2016-08-17)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwD31UHi0vNbsk1dAA--.960S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxtr15AFy8KryfCFyftFy8uFg_yoW7Kr48pF
	W7KrZxWrsYqF4UGrWDAFs7uFyfA3yjk34I934fKasI9wnFgrWxt3W8ta47ZF4rArW5Cr4S
	qFWUKr4DGr4DXFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPjb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r10
	6r15McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1lF7xvr2IY64vIr4
	1l7I0Y6sxI4wCY1x0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxE
	wVCI4VW8uwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Gr0_Xr1lcIIF0x
	vE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF0xvE
	x4A2jsIEc7CjxVAFwI0_GcCE3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07
	x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWU
	GwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r126r1DMIIYrxkI7VAKI4
	8JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIevJa73UjIFyTuYvjxUQ2XdUUUU
	U

Hi David,

On Sat, Jul 21, 2018 at 10:03:09PM -0700, David Miller wrote:
> Yeah that limit is bogus for several reasons.
...
> 
> Therefore, it probably is safe and correct to remove this
> cache_resolve_queue_len altogether.
> 
> Something like this:
> 
> diff --git a/include/linux/mroute_base.h b/include/linux/mroute_base.h
> index d633f737b3c6..b166465d7c05 100644
> --- a/include/linux/mroute_base.h
> +++ b/include/linux/mroute_base.h
> @@ -234,7 +234,6 @@ struct mr_table_ops {
>   * @mfc_hash: Hash table of all resolved routes for easy lookup
>   * @mfc_cache_list: list of resovled routes for possible traversal
>   * @maxvif: Identifier of highest value vif currently in use
> - * @cache_resolve_queue_len: current size of unresolved queue
>   * @mroute_do_assert: Whether to inform userspace on wrong ingress
>   * @mroute_do_pim: Whether to receive IGMP PIMv1
>   * @mroute_reg_vif_num: PIM-device vif index
> @@ -251,7 +250,6 @@ struct mr_table {
>  	struct rhltable		mfc_hash;
>  	struct list_head	mfc_cache_list;
>  	int			maxvif;
> -	atomic_t		cache_resolve_queue_len;
>  	bool			mroute_do_assert;
>  	bool			mroute_do_pim;
>  	int			mroute_reg_vif_num;
> diff --git a/net/ipv4/ipmr.c b/net/ipv4/ipmr.c
> index 9f79b9803a16..c007cf9bfe82 100644
> --- a/net/ipv4/ipmr.c
> +++ b/net/ipv4/ipmr.c
> @@ -747,8 +747,6 @@ static void ipmr_destroy_unres(struct mr_table *mrt, struct mfc_cache *c)
>  	struct sk_buff *skb;
>  	struct nlmsgerr *e;
>  
> -	atomic_dec(&mrt->cache_resolve_queue_len);
> -
>  	while ((skb = skb_dequeue(&c->_c.mfc_un.unres.unresolved))) {
>  		if (ip_hdr(skb)->version == 0) {
>  			struct nlmsghdr *nlh = skb_pull(skb,
> @@ -1135,9 +1133,11 @@ static int ipmr_cache_unresolved(struct mr_table *mrt, vifi_t vifi,
>  	}
>  
>  	if (!found) {
> +		bool was_empty;
> +
>  		/* Create a new entry if allowable */
> -		if (atomic_read(&mrt->cache_resolve_queue_len) >= 10 ||
> -		    (c = ipmr_cache_alloc_unres()) == NULL) {
> +		c = ipmr_cache_alloc_unres();
> +		if (!c) {
>  			spin_unlock_bh(&mfc_unres_lock);
>  
>  			kfree_skb(skb);
> @@ -1163,11 +1163,11 @@ static int ipmr_cache_unresolved(struct mr_table *mrt, vifi_t vifi,
>  			return err;
>  		}
>  
> -		atomic_inc(&mrt->cache_resolve_queue_len);
> +		was_empty = list_empty(&mrt->mfc_unres_queue);
>  		list_add(&c->_c.list, &mrt->mfc_unres_queue);
>  		mroute_netlink_event(mrt, c, RTM_NEWROUTE);
>  
> -		if (atomic_read(&mrt->cache_resolve_queue_len) == 1)
> +		if (was_empty)
>  			mod_timer(&mrt->ipmr_expire_timer,
>  				  c->_c.mfc_un.unres.expires);

In ipmr_expire_process() and ipmr_do_expire_process(), they start mod_timer
when !list_empty(&mrt->mfc_unres_queue), should here also be !was_empty?

BTW, do you have any plan to apply this patch in kernel?

Regards
Hangbin

>  	}
> @@ -1274,7 +1274,6 @@ static int ipmr_mfc_add(struct net *net, struct mr_table *mrt,
>  		if (uc->mfc_origin == c->mfc_origin &&
>  		    uc->mfc_mcastgrp == c->mfc_mcastgrp) {
>  			list_del(&_uc->list);
> -			atomic_dec(&mrt->cache_resolve_queue_len);
>  			found = true;
>  			break;
>  		}
> @@ -1322,7 +1321,7 @@ static void mroute_clean_tables(struct mr_table *mrt, bool all)
>  		mr_cache_put(c);
>  	}
>  
> -	if (atomic_read(&mrt->cache_resolve_queue_len) != 0) {
> +	if (!list_empty(&mrt->mfc_unres_queue)) {
>  		spin_lock_bh(&mfc_unres_lock);
>  		list_for_each_entry_safe(c, tmp, &mrt->mfc_unres_queue, list) {
>  			list_del(&c->list);
> @@ -2648,9 +2647,19 @@ static int ipmr_rtm_route(struct sk_buff *skb, struct nlmsghdr *nlh,
>  		return ipmr_mfc_delete(tbl, &mfcc, parent);
>  }
>  
> +static int queue_count(struct mr_table *mrt)
> +{
> +	struct list_head *pos;
> +	int count = 0;
> +	
> +	list_for_each(pos, &mrt->mfc_unres_queue)
> +		count++;
> +	return count;
> +}
> +
>  static bool ipmr_fill_table(struct mr_table *mrt, struct sk_buff *skb)
>  {
> -	u32 queue_len = atomic_read(&mrt->cache_resolve_queue_len);
> +	u32 queue_len = queue_count(mrt);
>  
>  	if (nla_put_u32(skb, IPMRA_TABLE_ID, mrt->id) ||
>  	    nla_put_u32(skb, IPMRA_TABLE_CACHE_RES_QUEUE_LEN, queue_len) ||
> diff --git a/net/ipv6/ip6mr.c b/net/ipv6/ip6mr.c
> index 0d0f0053bb11..75e9c5a3e7ea 100644
> --- a/net/ipv6/ip6mr.c
> +++ b/net/ipv6/ip6mr.c
> @@ -759,8 +759,6 @@ static void ip6mr_destroy_unres(struct mr_table *mrt, struct mfc6_cache *c)
>  	struct net *net = read_pnet(&mrt->net);
>  	struct sk_buff *skb;
>  
> -	atomic_dec(&mrt->cache_resolve_queue_len);
> -
>  	while ((skb = skb_dequeue(&c->_c.mfc_un.unres.unresolved)) != NULL) {
>  		if (ipv6_hdr(skb)->version == 0) {
>  			struct nlmsghdr *nlh = skb_pull(skb,
> @@ -1139,8 +1137,8 @@ static int ip6mr_cache_unresolved(struct mr_table *mrt, mifi_t mifi,
>  		 *	Create a new entry if allowable
>  		 */
>  
> -		if (atomic_read(&mrt->cache_resolve_queue_len) >= 10 ||
> -		    (c = ip6mr_cache_alloc_unres()) == NULL) {
> +		c = ip6mr_cache_alloc_unres();
> +		if (!c) {
>  			spin_unlock_bh(&mfc_unres_lock);
>  
>  			kfree_skb(skb);
> @@ -1167,7 +1165,6 @@ static int ip6mr_cache_unresolved(struct mr_table *mrt, mifi_t mifi,
>  			return err;
>  		}
>  
> -		atomic_inc(&mrt->cache_resolve_queue_len);
>  		list_add(&c->_c.list, &mrt->mfc_unres_queue);
>  		mr6_netlink_event(mrt, c, RTM_NEWROUTE);
>  
> @@ -1455,7 +1452,6 @@ static int ip6mr_mfc_add(struct net *net, struct mr_table *mrt,
>  		if (ipv6_addr_equal(&uc->mf6c_origin, &c->mf6c_origin) &&
>  		    ipv6_addr_equal(&uc->mf6c_mcastgrp, &c->mf6c_mcastgrp)) {
>  			list_del(&_uc->list);
> -			atomic_dec(&mrt->cache_resolve_queue_len);
>  			found = true;
>  			break;
>  		}
> @@ -1502,7 +1498,7 @@ static void mroute_clean_tables(struct mr_table *mrt, bool all)
>  		mr_cache_put(c);
>  	}
>  
> -	if (atomic_read(&mrt->cache_resolve_queue_len) != 0) {
> +	if (!list_empty(&mrt->mfc_unres_queue)) {
>  		spin_lock_bh(&mfc_unres_lock);
>  		list_for_each_entry_safe(c, tmp, &mrt->mfc_unres_queue, list) {
>  			list_del(&c->list);
