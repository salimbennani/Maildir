Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 21 Nov 2018 00:41:57 -0000
Received: from icoremail.net (unknown [209.85.214.175])
	by mail-app3 (Coremail) with SMTP id cC_KCgDnX6vgb_Rb+8OiAQ--.16788S3;
	Wed, 21 Nov 2018 04:34:40 +0800 (CST)
Received: from mail-pl1-f175.google.com (unknown [209.85.214.175])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwA3GkYBbvRbIcxfAA--.6125S3;
	Wed, 21 Nov 2018 04:26:41 +0800 (CST)
Received: by mail-pl1-f175.google.com with SMTP id a14so1935304plm.12
        for <xuliker@zju.edu.cn>; Tue, 20 Nov 2018 12:26:41 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:subject:to:cc
         :references:from:message-id:date:user-agent:mime-version:in-reply-to
         :content-language:sender:precedence:list-id;
        bh=7hQeTzEhhj6vJTILIj46tFWSIB1R/dqUxqL4qWzyzLE=;
        b=Z4xEdfCyntyOZJ5Sja//1qlaRHzRqnTSXO/Ma6ZS2/8V4MyySlo/qOEtUt8l4ytI1I
         LFMK+l4+y3iCzZjtYDy4sGekdWnnDrJk0BWAuOnQ4G+cPOjBkoa8sk39qauFU0RCsWND
         znYG+dj+GSmeozOm1ttJHqu/sVdXeOAeNupz99qOjtpjAZMFKXk9cQgIK4wcNJY8tnu+
         QWmxGI4Qp6roDbrsv+pcpWG9Y6mnR5Ly16/Pf8lDdxU0dUsZD3fnD28RBFdI7IVAEpr/
         sVjNS3olV8war2yH1QcPIYdjnEqSGiYAOpT+hiDJnISEP/+Wbt/lUvZcHaNCP4jn37ca
         71pg==
X-Gm-Message-State: AA+aEWYMz+AyPywxabkfLDY4JKccrtvaFt4GUWfZcb8dZycaMh+MGuAZ
	t039SfQvDuyPnXnFd9mm+jLjSHUDxuWcpdSSTIsAaPCZK9Wjikg=
X-Received: by 2002:a63:4044:: with SMTP id n65mr3180409pga.90.1542745601343;
        Tue, 20 Nov 2018 12:26:41 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1083043pju;
        Tue, 20 Nov 2018 12:26:40 -0800 (PST)
X-Google-Smtp-Source: AJdET5dyrzOJ2Y+AyXS0UKB4xs9J3ytWXqPM6QygkPaC5qC+/X/p1HH934PVJ5GyoWjGtLspR+Z5
X-Received: by 2002:a62:160c:: with SMTP id 12-v6mr3682811pfw.45.1542745600118;
        Tue, 20 Nov 2018 12:26:40 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542745600; cv=none;
        d=google.com; s=arc-20160816;
        b=zpkdM/TypMdglyxfOsLNo9NnIoES6FFAxNiRap+XGyAv8+oDyQPgft2/wiV5QGncUv
         kDRDXeBsbieaJlhmElHibGzpm9+4j7hfIF9fT99Z7ha/zLdXsmCz1kZ0USYDxurymXWR
         5ybijJUjWHI5KlBwPRObs/5lC770KTSHk7VNBCO1aSw17m0Euy1kZ1qrBnKvO7hzWH70
         Mo1xK2pzFzwgdKaZ3BKIE8Cqb4cIQLYNS1vWOk3nuxLwYIv86qYU2ZpaoHiQuw8kpGx2
         4hEa5JVYDwspKix6bFypMl0CK01eDLtIsO1NBjS/2b/5O0Jd/KgkRzBQYAknDQtTFhmB
         LFaw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-language:in-reply-to:mime-version
         :user-agent:date:message-id:from:references:cc:to:subject
         :dkim-signature;
        bh=7hQeTzEhhj6vJTILIj46tFWSIB1R/dqUxqL4qWzyzLE=;
        b=RGIaVCFLrQjWnoryIgYa9Z+58M4RaeQz3Zvu5Oj15Ry6vojQ4nZWj0d2lygoJZTiUY
         1+7p3kfmsKlGq0QUycKYaqOeQnM/hmFovS6KqLfCv2iBmXbCdzoDOVm/upkzuMAsNI6w
         6iA2P2VD/3UXGmnHx4ZEu5kzntBWyb+omEJFoau5yugAj0U1WwBN4YpQLaQWg/JAqs+V
         3PszYIAB5JDHOsD0gPYoZY3uSG7IzGU+jhNhNr1IKNrSHctf3ih9B7TA9fX9axau8F+8
         +WnrxgiwrfKXa7GSh0sLbi9VHNnNstXF6FX4xQck9btaY/zFoAXl8RK6OjIzneD/vzvy
         ai1w==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@colorfullife-com.20150623.gappssmtp.com header.s=20150623 header.b=1zflwJf0;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id y5si8295093pgs.588.2018.11.20.12.26.25;
        Tue, 20 Nov 2018 12:26:40 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727198AbeKUGMt (ORCPT <rfc822;norov.maillist@gmail.com>
        + 99 others); Wed, 21 Nov 2018 01:12:49 -0500
Received: from mail-wr1-f68.google.com ([209.85.221.68]:36729 "EHLO
        mail-wr1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727098AbeKUGMt (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 01:12:49 -0500
Received: by mail-wr1-f68.google.com with SMTP id t3so3242450wrr.3
        for <linux-kernel@vger.kernel.org>; Tue, 20 Nov 2018 11:42:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=colorfullife-com.20150623.gappssmtp.com; s=20150623;
        h=subject:to:cc:references:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language;
        bh=7hQeTzEhhj6vJTILIj46tFWSIB1R/dqUxqL4qWzyzLE=;
        b=1zflwJf0Xm3ILxWpVLZJSoWw5n2luyINra4H2ncsoo2Lw0lULBzTJvZq/g+IU2prnG
         OJGvexQ8atO/wRhu4Bw7bXhe7hvoyVaR1Yjc2bISjzhKtoTyP3q50ZqivUmiEQz+8KyX
         3PFYDkBKmDU5aGcc5nu14ALeH5tzSbLLCrW2+7VbEJmMJxNUFp9VccYLZI1+9etZU4QB
         IIMPuTE5bWx4mbiKdktYUgI3K0EYLQnPoiEjDumCO9fmKouuTG8WWoQbQQ7pmvDHkWsg
         4V3OfBF9nIPdbT16nHDChTzXSwFUF1gDvsk7ObPYeAHHpns1O4t3EysrsiLheKOlmDTX
         VEzQ==
X-Received: by 2002:a5d:6648:: with SMTP id f8mr3300446wrw.117.1542742919767;
        Tue, 20 Nov 2018 11:41:59 -0800 (PST)
Received: from linux.fritz.box (p200300D993C74C00FC5A0EA9BDDF9934.dip0.t-ipconnect.de. [2003:d9:93c7:4c00:fc5a:ea9:bddf:9934])
        by smtp.googlemail.com with ESMTPSA id l24sm12080641wme.32.2018.11.20.11.41.58
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 20 Nov 2018 11:41:58 -0800 (PST)
Subject: Re: [PATCH v11 2/3] ipc: Conserve sequence numbers in ipcmni_extend
 mode
To: Matthew Wilcox <willy@infradead.org>,
        Waiman Long <longman@redhat.com>
Cc: "Luis R. Rodriguez" <mcgrof@kernel.org>,
        Kees Cook <keescook@chromium.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Jonathan Corbet <corbet@lwn.net>, linux-kernel@vger.kernel.org,
        linux-fsdevel@vger.kernel.org, linux-doc@vger.kernel.org,
        Al Viro <viro@zeniv.linux.org.uk>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        Takashi Iwai <tiwai@suse.de>, Davidlohr Bueso <dbueso@suse.de>
References: <1541794292-19425-1-git-send-email-longman@redhat.com>
 <1541794292-19425-3-git-send-email-longman@redhat.com>
 <20181110074125.GB21824@bombadil.infradead.org>
From: Manfred Spraul <manfred@colorfullife.com>
Message-ID: <c589992a-0c7e-ecf2-9544-3c82dfb96f9f@colorfullife.com>
Date: Tue, 20 Nov 2018 20:41:57 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181110074125.GB21824@bombadil.infradead.org>
Content-Type: multipart/mixed;
 boundary="------------6C63EC410272F8E0E54722AB"
Content-Language: en-US
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwA3GkYBbvRbIcxfAA--.6125S3
Authentication-Results: mail-app3; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvdXoWrtry3GryxWFW5JF1fCr48JFb_yoWkGrX_W3
	Wvk3srAw45XrZF9a98try5Gr12kay0y3y8J3s3GrnFkryUGFs3JF4xKr13WFWYk3y7Jrnx
	KrZ5Xa1FvryavjkaLaAFLSUrUUUUUb8apTn2vfkv8UJUUUU8Yxn0WfASr-VFAU7a7-sFnT
	9fnUUIcSsGvfJTRUUUbJxYjsxI4VWDJwAYFVCjjxCrM7AC8VAFwI0_Jr0_Gr1l1IIY67AE
	w4v_Jr0_Jr4l8cAvFVAK0II2c7xJM28CjxkF64kEwVA0rcxSw2x7M28EF7xvwVC0I7IYx2
	IY67AKxVW7JVWDJwA2z4x0Y4vE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwA2z4x0Y4vEx4A2
	jsIE14v26F4UJVW0owA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_Cr1j6rxdM2vj62AExVA0xI
	801c8C04v26x02cVCv0xWle2I262IYc4CY6c8Ij28IcVAaY2xG8wASzI0EjI02j7AqF2xK
	xwAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_Jr4lYx0Ex4A2js
	IE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrwCjxxvEa2IrMxk0
	xIA0c2IEe2xFo4CEbIxvr21lc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x
	80FwCY02Avz4vEIxC_AwCY0x0Ix7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Gr0_
	Xr1lcIIF0xvE2Ix0cI8IcVCY1x0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Gr1j6F
	4UJwCYIxAIcVC2z280aVCY1x0267AKxVW8Jr0_Cr1UMxAIw28IcxkI7VAKI48JMxAIw28I
	cVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I
	8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUtVW8
	ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2KfnxnUUI43
	ZEXa7IUeX4S5UUUUU==

This is a multi-part message in MIME format.
--------------6C63EC410272F8E0E54722AB
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

Hi Matthew,

On 11/10/18 8:41 AM, Matthew Wilcox wrote:
> On Fri, Nov 09, 2018 at 03:11:31PM -0500, Waiman Long wrote:
>> The mixing in of a sequence number into the IPC IDs is probably to
>> avoid ID reuse in userspace as much as possible. With ipcmni_extend
>> mode, the number of usable sequence numbers is greatly reduced leading
>> to higher chance of ID reuse.
>>
>> To address this issue, we need to conserve the sequence number space
>> as much as possible. Right now, the sequence number is incremented
>> for every new ID created. In reality, we only need to increment the
>> sequence number when one or more IDs have been removed previously to
>> make sure that those IDs will not be reused when a new one is built.
>> This is being done irrespective of the ipcmni mode.
> That's not what I said.  Increment the sequence ID when the cursor wraps,
> not when there's been a deletion.

Something like the attached patch?

Unfortunately, idr_alloc_cyclic cannot be used, this creates some 
copy&paste from lib/idr.c to ipc/util.c
[as potential replacement for patch 2 and 3 from the series]

--

     Manfred


--------------6C63EC410272F8E0E54722AB
Content-Type: text/x-patch;
 name="0002-ipc-util.c-use-idr_alloc_cyclic-for-ipc-allocations.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename*0="0002-ipc-util.c-use-idr_alloc_cyclic-for-ipc-allocations.pat";
 filename*1="ch"

From 6bbade73d21884258a995698f21ad3128df8e98a Mon Sep 17 00:00:00 2001
From: Manfred Spraul <manfred@colorfullife.com>
Date: Sat, 29 Sep 2018 15:43:28 +0200
Subject: [PATCH 2/2] ipc/util.c: use idr_alloc_cyclic() for ipc allocations

A bit related to the patch that increases IPC_MNI, and
partially based on the mail from willy@infradead.org:

(User space) id reuse create the risk of data corruption:

Process A: calls ipc function
Process A: sleeps just at the beginning of the syscall
Process B: Frees the ipc object (i.e.: calls ...ctl(IPC_RMID)
Process B: Creates a new ipc object (i.e.: calls ...get())
	<If new object and old object have the same id>
Process A: is woken up, and accesses the new object

To reduce the probability that the new and the old object have the
same id, the current implementation adds a sequence number to the
index of the object in the idr tree.

To further reduce the probability for a reuse, perform a cyclic
allocation, and increase the sequence number only when there is
a wrap-around. Unfortunately, idr_alloc_cyclic cannot be used,
because the sequence number must be increased when a wrap-around
occurs.

The patch cycles over at least RADIX_TREE_MAP_SIZE, i.e.
if there is only a small number of objects, the accesses
continue to be direct.

Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
---
 ipc/util.c | 48 ++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 44 insertions(+), 4 deletions(-)

diff --git a/ipc/util.c b/ipc/util.c
index 07ae117ccdc0..fa7b8fa7a14c 100644
--- a/ipc/util.c
+++ b/ipc/util.c
@@ -216,10 +216,49 @@ static inline int ipc_idr_alloc(struct ipc_ids *ids, struct kern_ipc_perm *new)
 	 */
 
 	if (next_id < 0) { /* !CHECKPOINT_RESTORE or next_id is unset */
-		new->seq = ids->seq++;
-		if (ids->seq > IPCID_SEQ_MAX)
-			ids->seq = 0;
-		idx = idr_alloc(&ids->ipcs_idr, new, 0, 0, GFP_NOWAIT);
+		int idx_max;
+
+		/*
+		 * If a user space visible id is reused, then this creates a
+		 * risk for data corruption. To reduce the probability that
+		 * a number is reused, three approaches are used:
+		 * 1) the idr index is allocated cyclically.
+		 * 2) the use space id is build by concatenating the
+		 *    internal idr index with a sequence number.
+		 * 3) The sequence number is only increased when the index
+		 *    wraps around.
+		 * Note that this code cannot use idr_alloc_cyclic:
+		 * new->seq must be set before the entry is inserted in the
+		 * idr.
+		 */
+		idx_max = ids->in_use*2;
+		if (idx_max < RADIX_TREE_MAP_SIZE)
+			idx_max = RADIX_TREE_MAP_SIZE;
+		if (idx_max > ipc_mni)
+			idx_max = ipc_mni;
+
+		if (ids->ipcs_idr.idr_next <= idx_max) {
+			new->seq = ids->seq;
+			idx = idr_alloc(&ids->ipcs_idr, new,
+						ids->ipcs_idr.idr_next,
+						idx_max, GFP_NOWAIT);
+		}
+
+		if ((idx == -ENOSPC) && (ids->ipcs_idr.idr_next > 0)) {
+			/*
+			 * A wrap around occurred.
+			 * Increase ids->seq, update new->seq
+			 */
+			ids->seq++;
+			if (ids->seq > IPCID_SEQ_MAX)
+				ids->seq = 0;
+			new->seq = ids->seq;
+
+			idx = idr_alloc(&ids->ipcs_idr, new, 0, idx_max,
+						GFP_NOWAIT);
+		}
+		if (idx >= 0)
+			ids->ipcs_idr.idr_next = idx+1;
 	} else {
 		new->seq = ipcid_to_seqx(next_id);
 		idx = idr_alloc(&ids->ipcs_idr, new, ipcid_to_idx(next_id),
@@ -227,6 +266,7 @@ static inline int ipc_idr_alloc(struct ipc_ids *ids, struct kern_ipc_perm *new)
 	}
 	if (idx >= 0)
 		new->id = (new->seq << IPCMNI_SEQ_SHIFT) + idx;
+
 	return idx;
 }
 
-- 
2.17.2


--------------6C63EC410272F8E0E54722AB--
