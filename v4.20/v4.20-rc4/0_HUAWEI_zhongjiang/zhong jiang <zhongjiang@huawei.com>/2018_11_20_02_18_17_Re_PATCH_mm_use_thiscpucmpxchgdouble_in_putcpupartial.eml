Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 07:58:53 -0000
Received: from icoremail.net (unknown [209.85.214.174])
	by mail-app4 (Coremail) with SMTP id cS_KCgD3__PBc_NbzSbcAQ--.36485S3;
	Tue, 20 Nov 2018 10:38:58 +0800 (CST)
Received: from mail-pl1-f174.google.com (unknown [209.85.214.174])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwD33kq8c_NbhoJbAA--.2150S3;
	Tue, 20 Nov 2018 10:38:52 +0800 (CST)
Received: by mail-pl1-f174.google.com with SMTP id f12-v6so232820plo.1
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 18:38:52 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :message-id:date:from:user-agent:mime-version:to:cc:subject
         :references:in-reply-to:content-transfer-encoding:sender:precedence
         :list-id;
        bh=PPPC5u28kbDCviNOkpIv7LAtG5HQif/YqEMDi2sFPb4=;
        b=NK+l/hOF88HCb/gKFCx0BQ9xNGvapIGI75LsBaDJUv0jmXh1cQqXoxrIAxUSU1sA6+
         HLJ0D5Jber0hvt5oYQP8xog70w3Qv9g5Vkn5XkMMLCP6NVAsVDvjGd6tjTXo3UTBiAS/
         DEKVjqhZx55urdu65qWO7wv8J9jM+kkSfKY5YznAFhvFagpIdOyfs0DTTckci07KEN5y
         yxLqme4UpXuY/Lx/ThEPzV+hbU6BtSK7zqIeCjyNYBe47bFw1XVZNN77mhDzaeF2mWmy
         cFaDyfmrUXNSMEuH923CZVZd+BmMuWnAznUxyfNW5DDMMkXOZRvMcFtwZtRH6PmA0TOB
         zp/g==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AA+aEWZEopynRKGTVpMZAlJrntQzA1ahc3DaCBDUq6jk2vOdPeVTWDWV
	1ytQq5+9UehaqiNJsMByPN4h8n8g+n8cSWhqFVaeTWrnzpTvRiY=
X-Received: by 2002:a17:902:166:: with SMTP id 93-v6mr268244plb.68.1542681531848;
        Mon, 19 Nov 2018 18:38:51 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp50223pju;
        Mon, 19 Nov 2018 18:38:50 -0800 (PST)
X-Google-Smtp-Source: AFSGD/WYCejC5eDt/XBvWX+2Ow+RSqb6clVlC2hA+c1lIyI/XQaw2aHm9q8VuvzyQQyglI6TGNrD
X-Received: by 2002:a63:8c2:: with SMTP id 185mr244036pgi.26.1542681530294;
        Mon, 19 Nov 2018 18:38:50 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542681530; cv=none;
        d=google.com; s=arc-20160816;
        b=w5GwKzGe89Y8SOMwXzWsuY8ocbFzaea7vFQ9rz6ZfCdNdJ3W2NmPgYJbzjWgu7PSws
         mD/e+KEDp/1cUyJjHllImbFk1Hn52hBaihPcM4U2O56lq2cIsFHg9z5FWgxbZks5InLQ
         YtbBTf72ipaf60f7EglHxVr5HjT63dsKJDIez0mfLJN3JlhjNNZNskcrzS9gOyd73qin
         uEe0so6a/4t3fZ2xObFBJKHxe6L+DaNwUd6M0GM3phlV9/l2IItPzL5JmbF/nAVmV2cM
         HxcDsdrEZRutdTgdW0F+orxqwW8lGxgCOaeBo+s/9Fw98UHn+FSfGTe3XTrLwON6WcZk
         IWVg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:in-reply-to
         :references:subject:cc:to:mime-version:user-agent:from:date
         :message-id;
        bh=PPPC5u28kbDCviNOkpIv7LAtG5HQif/YqEMDi2sFPb4=;
        b=btgBO+90tcNnHOHz8cdPsU9cqP/tvPBLVH0oAVD6uUTP6ydSpXi3pUvOGcXBlXf8cR
         ljehhHvH9W+YvzTTWigo/Eee66/kiEHRVL3y6Ak4czpc/iRyM44/lVbkpjGjIFTPeaAF
         O6by5TA9J5/yB3ynkGu4C81aZisHfv563dAZeDXOnre/NEoTUmkw/ZHcpTU3uftAWC0/
         PPlCgxGXnOwPsqUqN8n/jTO7LbEuBiQBJXA2YpfnBELPKpev8Igwanjs3bsjGaqvpNi3
         iGaIsBWm930/BKmmfdnGu+iziciKCx8M1TR5342H9x1z7HAQe6vXX4+7Dj5Buo/VBdNM
         dMEg==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id u69si24174228pfj.219.2018.11.19.18.38.35;
        Mon, 19 Nov 2018 18:38:50 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731125AbeKTMpE (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Tue, 20 Nov 2018 07:45:04 -0500
Received: from szxga07-in.huawei.com ([45.249.212.35]:57176 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726559AbeKTMpD (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 07:45:03 -0500
Received: from DGGEMS401-HUB.china.huawei.com (unknown [172.30.72.59])
        by Forcepoint Email with ESMTP id 66F0CE3842D95;
        Tue, 20 Nov 2018 10:18:19 +0800 (CST)
Received: from [127.0.0.1] (10.177.29.68) by DGGEMS401-HUB.china.huawei.com
 (10.3.19.201) with Microsoft SMTP Server id 14.3.408.0; Tue, 20 Nov 2018
 10:18:17 +0800
Message-ID: <5BF36EE9.9090808@huawei.com>
Date: Tue, 20 Nov 2018 10:18:17 +0800
From: zhong jiang <zhongjiang@huawei.com>
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20120428 Thunderbird/12.0.1
MIME-Version: 1.0
To: Wengang Wang <wen.gang.wang@oracle.com>
CC: <cl@linux.com>, <penberg@kernel.org>, <rientjes@google.com>,
        <iamjoonsoo.kim@lge.com>, <akpm@linux-foundation.org>,
        <linux-mm@kvack.org>, <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] mm: use this_cpu_cmpxchg_double in put_cpu_partial
References: <20181117013335.32220-1-wen.gang.wang@oracle.com>
In-Reply-To: <20181117013335.32220-1-wen.gang.wang@oracle.com>
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.177.29.68]
X-CFilter-Loop: Reflected
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwD33kq8c_NbhoJbAA--.2150S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxWw43Wr4xXw1rAF4UtF47Arb_yoWrJFyDpa
	yfG3W3GFWkCryIkw4fGFWvk340y348ZFW7Ca4aqw1Y9rn8Xr1ktFyIyryvvF98ur1xuF1I
	vr4qy3WagF4UtaUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUmFb7Iv0xC_tr1lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r4j6F4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvEwIxGrw
	CjxxvEa2IrMxk0xIA0c2IEe2xFo4CEbIxvr21lc7CjxVAKzI0EY4vE52x082I5MxkFs20E
	Y4vE44CYbxCE4x80FwCY02Avz4vEIxC_Gr1lc2IjII80xcxEwVAKI48JMxvI42IY6xIIjx
	v20xvE14v26r1I6r4UMxvI42IY6xIIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lcIIF0xvEx4A2
	jsIE14v26rxl6s0DMxvI42IY6I8E87Iv6xkF7I0E14v26rxl6s0DMxAIw28IcxkI7VAKI4
	8JMxAIw28IcVAKzI0EY4vE52x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4U
	MI8I3I0E5I8CrVAFwI0_Jr0_Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67
	AKxVWUtVW8ZwCIc40Y0x0EwIxGrwCI42IY6xAIw20EY4v20xvaj40_Gr0_ZrUvcSsGvfC2
	KfnxnUUI43ZEXa7IU5m_M3UUUUU==

On 2018/11/17 9:33, Wengang Wang wrote:
> The this_cpu_cmpxchg makes the do-while loop pass as long as the
> s->cpu_slab->partial as the same value. It doesn't care what happened to
> that slab. Interrupt is not disabled, and new alloc/free can happen in the
> interrupt handlers. Theoretically, after we have a reference to the it,
> stored in _oldpage_, the first slab on the partial list on this CPU can be
> moved to kmem_cache_node and then moved to different kmem_cache_cpu and
> then somehow can be added back as head to partial list of current
> kmem_cache_cpu, though that is a very rare case. If that rare case really
> happened, the reading of oldpage->pobjects may get a 0xdead0000
> unexpectedly, stored in _pobjects_, if the reading happens just after
> another CPU removed the slab from kmem_cache_node, setting lru.prev to
> LIST_POISON2 (0xdead000000000200). The wrong _pobjects_(negative) then
> prevents slabs from being moved to kmem_cache_node and being finally freed.
>
> We see in a vmcore, there are 375210 slabs kept in the partial list of one
> kmem_cache_cpu, but only 305 in-use objects in the same list for
> kmalloc-2048 cache. We see negative values for page.pobjects, the last page
> with negative _pobjects_ has the value of 0xdead0004, the next page looks
> good (_pobjects is 1).
>
> For the fix, I wanted to call this_cpu_cmpxchg_double with
> oldpage->pobjects, but failed due to size difference between
> oldpage->pobjects and cpu_slab->partial. So I changed to call
> this_cpu_cmpxchg_double with _tid_. I don't really want no alloc/free
> happen in between, but just want to make sure the first slab did expereince
> a remove and re-add. This patch is more to call for ideas.
Have you hit the really issue or just review the code ?

I did hit the issue and fixed in the upstream patch unpredictably by the following patch.
e5d9998f3e09 ("slub: make ->cpu_partial unsigned int")

Thanks,
zhong jiang
> Signed-off-by: Wengang Wang <wen.gang.wang@oracle.com>
> ---
>  mm/slub.c | 20 +++++++++++++++++---
>  1 file changed, 17 insertions(+), 3 deletions(-)
>
> diff --git a/mm/slub.c b/mm/slub.c
> index e3629cd..26539e6 100644
> --- a/mm/slub.c
> +++ b/mm/slub.c
> @@ -2248,6 +2248,7 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
>  {
>  #ifdef CONFIG_SLUB_CPU_PARTIAL
>  	struct page *oldpage;
> +	unsigned long tid;
>  	int pages;
>  	int pobjects;
>  
> @@ -2255,8 +2256,12 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
>  	do {
>  		pages = 0;
>  		pobjects = 0;
> -		oldpage = this_cpu_read(s->cpu_slab->partial);
>  
> +		tid = this_cpu_read(s->cpu_slab->tid);
> +		/* read tid before reading oldpage */
> +		barrier();
> +
> +		oldpage = this_cpu_read(s->cpu_slab->partial);
>  		if (oldpage) {
>  			pobjects = oldpage->pobjects;
>  			pages = oldpage->pages;
> @@ -2283,8 +2288,17 @@ static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)
>  		page->pobjects = pobjects;
>  		page->next = oldpage;
>  
> -	} while (this_cpu_cmpxchg(s->cpu_slab->partial, oldpage, page)
> -								!= oldpage);
> +		/* we dont' change tid, but want to make sure it didn't change
> +		 * in between. We don't really hope alloc/free not happen on
> +		 * this CPU, but don't want the first slab be removed from and
> +		 * then re-added as head to this partial list. If that case
> +		 * happened, pobjects may read 0xdead0000 when this slab is just
> +		 * removed from kmem_cache_node by other CPU setting lru.prev
> +		 * to LIST_POISON2.
> +		 */
> +	} while (this_cpu_cmpxchg_double(s->cpu_slab->partial, s->cpu_slab->tid,
> +					 oldpage, tid, page, tid) == 0);
> +
>  	if (unlikely(!s->cpu_partial)) {
>  		unsigned long flags;
>  

