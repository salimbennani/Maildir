Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 19:04:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 42FF3580478;
	Thu, 22 Nov 2018 01:49:07 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 01:49:06 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AWAHoTxCO7X4pCXhIeTrbUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/osywAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH42y?=
 =?us-ascii?q?YYgBAe0DMuZWtIn9v1kDoACiCQWwHu7j1iVFimPq0aA8zu8vERvG3AslH98Wrn?=
 =?us-ascii?q?rUq9D1P7oPXOCo1qnIzi/Mb+lK2Tzg74XIbhchofSXUL1qbMrR0lIvGB3ZgVmK?=
 =?us-ascii?q?tYPlODaV2/0LvmOG7ORgTfqih3A7pwx1uDSj28khhpfTio4IyV3I6T91zYc3KN?=
 =?us-ascii?q?GgVUJ3fMKoHIFOuy2HLYd7Q94uT3t2tCs+zLANpIS1czIQyJs9wh7Sc/yHfJaM?=
 =?us-ascii?q?4hLkTOuRPzh4i2x/eL6lhBa971KgyuviWcmwylpKqTBFktbUunAM0Rzc9NSHR+?=
 =?us-ascii?q?Nj8ku93TuDzR3f5+9aLUwuiKbWKIItzqQxm5cRqUjDGzX5mETyjK+YbEUk/e2o?=
 =?us-ascii?q?5vzjYrXnoJ+cKoB1hhj9MqswgMy/B/o3MgwXU2ic9+W80qPs/VfiTbVUgf05jL?=
 =?us-ascii?q?PZvIrZJcsFvK65BRFa0oI55xa4FTem38wUnWMbI1JdZBKHk4/pNknKIPD5Dvew?=
 =?us-ascii?q?nU6gkTh2x/3dOr3hA5PNLmXMkbv7fLZ97VJcxxQ3zdxF+51UDbQBKurpWkDtrN?=
 =?us-ascii?q?zYEgM5MwuszubnEtp9158eVniIAqODMKPSrEWH5uQgI+SXYI8VuTD9K+Uq5vL0?=
 =?us-ascii?q?jH85n0Mdcret3ZcNdH+4GfFmKV2DYXXwmtcBDXsKvg0mQezoj12NTyRfZ3W1X6?=
 =?us-ascii?q?I64DE7D5mrDYPCRoCrnbyA0z23HpxQZmBaFF+MFW3keJmDW/cJcCiSONNukiQY?=
 =?us-ascii?q?Vbi9TI8szQuhtBT6y7pgLerY4DcYuojh1NVu4+3TlBcy9SF7DsiH0mGNSX10kX?=
 =?us-ascii?q?0MRzMswK9/pkl9wE+Z0adkm/xYCcBT5/RRXwc5L5HcyfZ2C9TzWg3beNeJR02r?=
 =?us-ascii?q?QtGnATE3U9IwzMUCY0d7G9W+kB/D2zCmDKMSl7yOHJY06L7T32DtJ8ZhzHbLzL?=
 =?us-ascii?q?QugEM4QsRRL2GmhrRw9w7IB4HXlUWVkKKqdacZ3C7J72qDyWuOvEdFUA9/S6nF?=
 =?us-ascii?q?XHYfZlfIotT9/E/NU7iuCbE/OAtb1cGCMrdKasHujVheWfjsIsrebHyrl2ewHx?=
 =?us-ascii?q?mIwKiMY5Tse2gG2CXdCU4Ekx0c/HqcNAg+ADuhrHzaDDB0CV3vZEbs+/FkqHyn?=
 =?us-ascii?q?Vk800x2Kb0p52rqp+x4VgPucS+8T3rMEoishty94HFGn39LSCtqAoQVhcb5YYd?=
 =?us-ascii?q?M85ldHyG3YuxZ8PpymM6BtmFoefx5rsEPp0hV9Ep9AntQyrHM20ApyLrqV30lF?=
 =?us-ascii?q?dzyG0pH/JL3WJnPp8xCydqHZwFfe0NWR+qcR8/k4r1TjvAe0Fkst6Xln0t9V02?=
 =?us-ascii?q?eC6ZXOFgYdTZXxUkMv/Rhgu77aejU955/T1XB0Mai0ryXO1M4zCOokyhavZdFf?=
 =?us-ascii?q?MKyfGQ/2Es0aAdWuKeMwl1ioaBIEIP5d9KouM8y6cPuG3bahPPx8kzK+kWRH/I?=
 =?us-ascii?q?d931qW9yp9VuHHxYwFzOyf3gedUTfzkk2hssHulY9Yfz4SGnewxjb+BI5WYK1/?=
 =?us-ascii?q?ZoILCWaoI82qydRynZ/tW3hE9FG9A1MKwtOmeR2Xb1blxw1fyVwXoWC7mSu/1z?=
 =?us-ascii?q?F1kzAporCf3SDU2OTiaRwHN3VPRGlji1fsPIe1g8obXEiucwgmih+l6VzmyKhc?=
 =?us-ascii?q?oaR1N3PTTltQfyjqM2FiVbO9triYbM5V65MosiJXXP6nYV+ASb79oBoa0yX9EG?=
 =?us-ascii?q?tY3z07czCqupPknx11km6dLXBzrGbHdsF03xvQ+NvcRftJ1DocWCZ4kSXXBkS7?=
 =?us-ascii?q?P9Sx/dSbjZDDvvq8V2KgUJ1eai3rzYKGtCum6mxmGxy/n/avmtL5FQg2yzP019?=
 =?us-ascii?q?5vVS/QthbzfpHr17imMeJgZkRoB0Xz68tgFoF+j4s/npcQ2XcBi5WR/HoHl3rz?=
 =?us-ascii?q?MNpB1aL/anoNWSAEw9rP7Af5301jK2qDx5jlWXWF3sthe966b3sT2iI87MBFEr?=
 =?us-ascii?q?2Y7bJakituvlq3sxjRbuNjkTcHxvsj83oag+APuAowwSSRGLESHU9EPSPykxSE?=
 =?us-ascii?q?9cyxrKJSZGy3a7i/yFJ+ncy9DLGFugxcRHH5epI4ES5x9Mp/Nk/M0Gbo6oHlY9?=
 =?us-ascii?q?TQadMTthuJkxbPleRVKZQxluYUiipjI27yoXoly+sjhxx0wZ66pJSHK3lq/K+h?=
 =?us-ascii?q?GRFXLDr1Z8cO+j33iaZeg92b34SuHpVnBzUKU4HkTfOuEDIOq/vnMxyCHyE7qn?=
 =?us-ascii?q?eeAbDfBxOQ6F96r3LTFJCmL3OXK2Mczdp8XxmRPlBfjBoXXDUnnZ45Cwaqy9b6?=
 =?us-ascii?q?cEpi4jAR51j4qgZDy+5yNhn/VHvfqxmsajsuVJefKx9W5BlY50jJKcye8v5zHy?=
 =?us-ascii?q?ZA85yhqwyNN3WbZxlSAmEPQECEHFfjPr+h5dTb9+iYB+y+L+bBYLmUqOxeUeuI?=
 =?us-ascii?q?yoyr0od84zmMMcCPNGF4D/InwkpDQWx5G8PBljUPVSMXliHNb82apBum+S13tM?=
 =?us-ascii?q?e/8Pv1VwL1+IuPEKBfMdFu+xCwnKeCOPSchCd/KTZEyJwMwWXEx6QY3F4Xkytu?=
 =?us-ascii?q?bSWiEawctS7RS6LdgrVYDwMAZCNpKsRJ77gw3g1MOcPAjtP117h4juM6CltfVF?=
 =?us-ascii?q?zhnN2patIOI22nKFzHA0OLPqycJTLX28H3fb+8SbpIgeVIth2wvCyXHFP5Mjuf?=
 =?us-ascii?q?lznmSRavPPpIjCGaOhxepY68fgxsCWjlUNLpdBm7PMVrgj0xxL0+nmnKOnIEMT?=
 =?us-ascii?q?hgb0NNqaWd7CNCjfV5HmxB73xlIvGFmiaZ9ebYLJkWvOBvAiR1keJa/Xs7x6FU?=
 =?us-ascii?q?7CFCWPx6hi/SosRyrFGhl+ncggZgBT5PrCtbzIGGp0NvPe3c/5hEWHDLtBYM9n?=
 =?us-ascii?q?nYXxALocZ1T97ioaZdzvDRm6/pbjRP6dTZ+Y0bHceCe+ydN390DR3sUBTJFggM?=
 =?us-ascii?q?VyLjYX3YgmRUjeqJ+3bTpZ8//Mu/0KESQ6NWAQRmXsgRDV5oSZlbeM96?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ATAACKevZbh0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBWoIRJ4wQX4sigiGXJhSBXxIBARgTAYhQIjQJDQEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkjDII2JAGCYgMDAQIkGQEBNwEFCQEBPhIDVAYTBYJRS4IBAQWpF4FsM?=
 =?us-ascii?q?4J2AQEFgkOEXwiHXoMPgRwXgX+BEYd4AYVyiRuGAIFFjyQJgiCPBAsYkQiYCQI?=
 =?us-ascii?q?ECwIUgUaCDU0jFTuCbIIbDBeDSopmLDKBBQEBjSkBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ATAACKevZbh0O0hNFiHQEBBQEHBQGBUQgBCwGBWoIRJ4w?=
 =?us-ascii?q?QX4sigiGXJhSBXxIBARgTAYhQIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2J?=
 =?us-ascii?q?AGCYgMDAQIkGQEBNwEFCQEBPhIDVAYTBYJRS4IBAQWpF4FsM4J2AQEFgkOEXwi?=
 =?us-ascii?q?HXoMPgRwXgX+BEYd4AYVyiRuGAIFFjyQJgiCPBAsYkQiYCQIECwIUgUaCDU0jF?=
 =?us-ascii?q?TuCbIIbDBeDSopmLDKBBQEBjSkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,265,1539673200"; 
   d="scan'208";a="52957107"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 22 Nov 2018 01:49:04 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2393629AbeKVU1m (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 15:27:42 -0500
Received: from csm1.csm-office.com.au ([165.228.118.109]:34228 "EHLO
        sleepy.aussec.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731614AbeKVU1l (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 15:27:41 -0500
X-Virus-Scanned: amavisd-new at aussec.com
Received: from hpdv6.aussec.com.com (c110-21-61-29.farfl4.nsw.optusnet.com.au [110.21.61.29])
        (authenticated bits=0)
        by sleepy.aussec.com (8.15.2/8.15.2) with ESMTPSA id wAM9mAdk030201
        (version=TLSv1.2 cipher=DHE-RSA-AES128-SHA bits=128 verify=NO);
        Thu, 22 Nov 2018 20:48:42 +1100
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=aussec.com; s=2016;
        t=1542880124; bh=7qs5KvaGekiJ0n7vYiDjHOMRpSpUCBBsiTeV+Ece+Yc=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References;
        b=txHVAQjWV3CbMxoFrn14/dPhJJsOoxlnqE/kdfWG6iJILaYttuqsuCogR0MFjqzH6
         JQAqnUAfinpaxwzv4lqool6HQfjjLqiQeJyk4F55fWOnwKvl38bA8+cWnvrnlI+juM
         KqPwjizdTskie5ZJLCTuxs0lQf01TkY5tQgFevyhajCVU/x8IRIo9to5hA1lx58fwT
         weFB+g7f+yXX+wI1rL+It4AFPsj7ib+cok9kmSAHGnq/dekDIdGiK42B9fQVjTVnr+
         1OGkJUZaBEkACazCe1yy+xjWel9e/LOpxcr1sWWixfWnYI87gLeKXZoBA/TCqBY1+u
         y8lIxCwO56Tjw==
From: Tom Burkart <tom@aussec.com>
To: Linux kernel mailing list <linux-kernel@vger.kernel.org>
Cc: Tom Burkart <tom@aussec.com>, Lukas Senger <lukas@fridolin.com>
Subject: [PATCH v9 4/4] pps: pps-gpio pps-echo implementation
Date: Thu, 22 Nov 2018 20:46:02 +1100
Message-Id: <20181122094602.5156-5-tom@aussec.com>
X-Mailer: git-send-email 2.12.3
In-Reply-To: <20181122094602.5156-4-tom@aussec.com>
References: <20181122094602.5156-1-tom@aussec.com>
 <20181122094602.5156-2-tom@aussec.com>
 <20181122094602.5156-3-tom@aussec.com>
 <20181122094602.5156-4-tom@aussec.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch implements the pps echo functionality for pps-gpio, that
sysfs claims is available already.

Configuration is done via device tree bindings.

This patch was originally written by Lukas Senger as part of a masters
thesis project and modified for inclusion into the linux kernel by Tom
Burkart.

Signed-off-by: Lukas Senger <lukas@fridolin.com>
Signed-off-by: Tom Burkart <tom@aussec.com>
---
 drivers/pps/clients/pps-gpio.c | 101 +++++++++++++++++++++++++++++++++++++++--
 include/linux/pps-gpio.h       |   3 ++
 2 files changed, 101 insertions(+), 3 deletions(-)

diff --git a/drivers/pps/clients/pps-gpio.c b/drivers/pps/clients/pps-gpio.c
index d2fbc91dc8fc..14293eb2ff5a 100644
--- a/drivers/pps/clients/pps-gpio.c
+++ b/drivers/pps/clients/pps-gpio.c
@@ -35,6 +35,8 @@
 #include <linux/list.h>
 #include <linux/of_device.h>
 #include <linux/of_gpio.h>
+#include <linux/timer.h>
+#include <linux/jiffies.h>
 
 /* Info for each registered platform device */
 struct pps_gpio_device_data {
@@ -42,8 +44,14 @@ struct pps_gpio_device_data {
 	struct pps_device *pps;		/* PPS source device */
 	struct pps_source_info info;	/* PPS source information */
 	struct gpio_desc *gpio_pin;	/* GPIO port descriptors */
+	struct gpio_desc *echo_pin;
+	struct timer_list echo_timer;	/* timer to reset echo active state */
 	bool assert_falling_edge;
 	bool capture_clear;
+	bool enable_pps_echo;
+	bool invert_pps_echo;
+	unsigned int echo_active_ms;	/* PPS echo active duration */
+	unsigned long echo_timeout;	/* timer timeout value in jiffies */
 };
 
 /*
@@ -64,27 +72,72 @@ static irqreturn_t pps_gpio_irq_handler(int irq, void *data)
 	rising_edge = gpiod_get_value(info->gpio_pin);
 	if ((rising_edge && !info->assert_falling_edge) ||
 			(!rising_edge && info->assert_falling_edge))
-		pps_event(info->pps, &ts, PPS_CAPTUREASSERT, NULL);
+		pps_event(info->pps, &ts, PPS_CAPTUREASSERT, data);
 	else if (info->capture_clear &&
 			((rising_edge && info->assert_falling_edge) ||
 			(!rising_edge && !info->assert_falling_edge)))
-		pps_event(info->pps, &ts, PPS_CAPTURECLEAR, NULL);
+		pps_event(info->pps, &ts, PPS_CAPTURECLEAR, data);
 
 	return IRQ_HANDLED;
 }
 
+static void pps_gpio_echo(struct pps_device *pps, int event, void *data)
+{
+	/* add_timer() needs to write into info->echo_timer */
+	struct pps_gpio_device_data *info;
+
+	info = data;
+
+	switch (event) {
+	case PPS_CAPTUREASSERT:
+		if (pps->params.mode & PPS_ECHOASSERT)
+			gpiod_set_value(info->echo_pin,
+				info->invert_pps_echo ? 0 : 1);
+		break;
+
+	case PPS_CAPTURECLEAR:
+		if (pps->params.mode & PPS_ECHOCLEAR)
+			gpiod_set_value(info->echo_pin,
+				info->invert_pps_echo ? 0 : 1);
+		break;
+	}
+
+	/* fire the timer */
+	if (info->pps->params.mode & (PPS_ECHOASSERT | PPS_ECHOCLEAR)) {
+		info->echo_timer.expires = jiffies + info->echo_timeout;
+		add_timer(&info->echo_timer);
+	}
+}
+
+/* Timer callback to reset the echo pin to the inactive state */
+static void pps_gpio_echo_timer_callback(struct timer_list *t)
+{
+	const struct pps_gpio_device_data *info;
+
+	info = from_timer(info, t, echo_timer);
+
+	gpiod_set_value(info->echo_pin,
+		info->invert_pps_echo ? 1 : 0);
+}
+
 static int pps_gpio_setup(struct platform_device *pdev)
 {
 	struct pps_gpio_device_data *data = platform_get_drvdata(pdev);
 	const struct pps_gpio_platform_data *pdata = pdev->dev.platform_data;
 	struct device_node *np = pdev->dev.of_node;
 	int ret;
+	u32 value;
 
 	if (pdata) {
 		data->gpio_pin = pdata->gpio_pin;
+		data->echo_pin = pdata->echo_pin;
+		if (pdata->echo_pin != NULL)
+			data->enable_pps_echo = true;
 
 		data->assert_falling_edge = pdata->assert_falling_edge;
 		data->capture_clear = pdata->capture_clear;
+		data->invert_pps_echo = pdata->invert_pps_echo;
+		data->echo_active_ms = pdata->echo_active_ms;
 	} else {
 		data->gpio_pin = devm_gpiod_get(&pdev->dev,
 			NULL,	/* request "gpios" */
@@ -95,11 +148,43 @@ static int pps_gpio_setup(struct platform_device *pdev)
 			return PTR_ERR(data->gpio_pin);
 		}
 
+		if (of_get_property(np, "echo-gpios", NULL)) {
+			data->enable_pps_echo = true;
+
+			data->echo_pin = devm_gpiod_get(&pdev->dev,
+				"echo",
+				GPIOD_OUT_LOW);
+			if (IS_ERR(data->echo_pin)) {
+				dev_err(&pdev->dev, "failed to request ECHO GPIO\n");
+				return PTR_ERR(data->echo_pin);
+			}
+
+			ret = of_property_read_u32(np,
+				"echo-active-ms",
+				&value);
+			if (ret) {
+				dev_err(&pdev->dev,
+					"failed to get echo-active-ms from OF\n");
+				return ret;
+			}
+			data->echo_active_ms = value;
+			/* sanity check on echo_active_ms */
+			if (!data->echo_active_ms || data->echo_active_ms > 999) {
+				dev_err(&pdev->dev,
+					"echo-active-ms: %u - bad value from OF\n",
+					data->echo_active_ms);
+				return -EINVAL;
+			}
+		}
+
 		if (of_get_property(np, "assert-falling-edge", NULL))
 			data->assert_falling_edge = true;
 
 		if (of_get_property(np, "capture-clear", NULL))
 			data->capture_clear = true;
+
+		if (of_get_property(np, "invert-pps-echo", NULL))
+			data->invert_pps_echo = true;
 	}
 	return 0;
 }
@@ -153,6 +238,11 @@ static int pps_gpio_probe(struct platform_device *pdev)
 	data->info.owner = THIS_MODULE;
 	snprintf(data->info.name, PPS_MAX_NAME_LEN - 1, "%s.%d",
 		 pdev->name, pdev->id);
+	if (data->enable_pps_echo) {
+		data->info.echo = pps_gpio_echo;
+		data->echo_timeout = msecs_to_jiffies(data->echo_active_ms);
+		timer_setup(&data->echo_timer, pps_gpio_echo_timer_callback, 0);
+	}
 
 	/* register PPS source */
 	pps_default_params = PPS_CAPTUREASSERT | PPS_OFFSETASSERT;
@@ -185,6 +275,11 @@ static int pps_gpio_remove(struct platform_device *pdev)
 	struct pps_gpio_device_data *data = platform_get_drvdata(pdev);
 
 	pps_unregister_source(data->pps);
+	if (data->enable_pps_echo) {
+		del_timer_sync(&data->echo_timer);
+		/* reset echo pin in any case */
+		gpiod_set_value(data->echo_pin, data->invert_pps_echo ? 1 : 0);
+	}
 	dev_info(&pdev->dev, "removed IRQ %d as PPS source\n", data->irq);
 	return 0;
 }
@@ -209,4 +304,4 @@ MODULE_AUTHOR("Ricardo Martins <rasm@fe.up.pt>");
 MODULE_AUTHOR("James Nuss <jamesnuss@nanometrics.ca>");
 MODULE_DESCRIPTION("Use GPIO pin as PPS source");
 MODULE_LICENSE("GPL");
-MODULE_VERSION("1.1.0");
+MODULE_VERSION("1.2.0");
diff --git a/include/linux/pps-gpio.h b/include/linux/pps-gpio.h
index f028d2cda6f5..5390f18c73a5 100644
--- a/include/linux/pps-gpio.h
+++ b/include/linux/pps-gpio.h
@@ -24,8 +24,11 @@
 
 struct pps_gpio_platform_data {
 	struct gpio_desc *gpio_pin;
+	struct gpio_desc *echo_pin;
 	bool assert_falling_edge;
 	bool capture_clear;
+	bool invert_pps_echo;
+	unsigned int echo_active_ms;
 };
 
 #endif /* _PPS_GPIO_H */
-- 
2.12.3

