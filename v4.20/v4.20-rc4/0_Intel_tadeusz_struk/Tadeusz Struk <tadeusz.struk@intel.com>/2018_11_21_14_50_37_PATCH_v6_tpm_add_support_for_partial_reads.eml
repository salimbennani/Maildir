Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 22 Nov 2018 00:33:55 -0000
Received: from icoremail.net (unknown [209.85.214.175])
	by mail-app2 (Coremail) with SMTP id by_KCgCHv+QCcvVb59vIAQ--.58190S3;
	Wed, 21 Nov 2018 22:56:03 +0800 (CST)
Received: from mail-pl1-f175.google.com (unknown [209.85.214.175])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwAH6UQAcvVbQ_xjAA--.2042S3;
	Wed, 21 Nov 2018 22:56:01 +0800 (CST)
Received: by mail-pl1-f175.google.com with SMTP id z23so5891824plo.0
        for <xuliker@zju.edu.cn>; Wed, 21 Nov 2018 06:56:01 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :subject:from:to:cc:date:message-id:user-agent:mime-version
         :content-transfer-encoding:sender:precedence:list-id;
        bh=uVcY4BlIwGL3+HcnWTeijtTkbpTldRwSu5Z+ctG9Jd0=;
        b=IoJ5/iJ6GF9JxELFwcxgg7jC8KjyTCb4M6u7w7FA9520j1sxgOSj4whGRvb49U+dlv
         kkd+4p0z/xx8tsMfKOCo4g4VDfF3Mn6RGHiUg1gq8X3b2kikYV8Sz+0dWk6HxmXW39bW
         c8R9bHwN08Ox93OfbGGGMQJIhRzNh9VdRDX2SfFufaFPK6Enau57wSoAnliQ8e/MTIPf
         XEWknbw5owdQpzo0kG4KcFVOnGaqS7DumtT35I5++sOAmmkLDLXWLzK3jx4F6HsK2ATn
         AhO6BzzsymUYb5a0xVd2Uys5609u9hLNeB1QXudilEgXEiBUR7iXY54m2nn7FtfItW3S
         hh3A==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
X-Gm-Message-State: AA+aEWaJqhs3zI9wxi8TGrbX+d3YGfB1gT2OK21xpp1rHcHvTEXkkBbm
	+W9BANmzRHUgjO2Y+HjoXzhURiGh9JumT6JA4MoWx/tPstlq2cU=
X-Received: by 2002:a17:902:9698:: with SMTP id n24-v6mr7316447plp.9.1542812160747;
        Wed, 21 Nov 2018 06:56:00 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2055446pju;
        Wed, 21 Nov 2018 06:55:59 -0800 (PST)
X-Google-Smtp-Source: AFSGD/UDPzITTbWDVpCOVMa/cAWpuUWTKtiE6podG2CX5Ue0QekD7D7sPspY8J7cYQ+S1ZE8Oq9D
X-Received: by 2002:a63:4342:: with SMTP id q63mr6320526pga.63.1542812159540;
        Wed, 21 Nov 2018 06:55:59 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542812159; cv=none;
        d=google.com; s=arc-20160816;
        b=OpdkkqcIzOCw7xBFwg8saSBWYBaBURyV3C0sCOojIMLrFRwsebFgXuFUVXycfq4joJ
         X4C9NNik5GN6BQLN3iuXldTFL0rlR/9pUBRV4f4n0KzYOQ8Fn+tWqgg6l/qr+OSysaEf
         zrKV5OOmByR6c/PF1VvD6SofELLdPJquSxquEw/xfyduA/TJNQStV0p5SNL2L2nVL5N4
         s9GUAL8uT0mcQpZsQMWaAFIgpIi/X4WeHzNegOPgaoviFG/fnwv2PIheLWsdpyHihK7f
         kNAp8di7ahuZoGtwKIgGIJPNg9mF4SosowuLgDBLT6iIGH1iAr7QShqaMul9bnNgzl1n
         iggw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :user-agent:message-id:date:cc:to:from:subject;
        bh=uVcY4BlIwGL3+HcnWTeijtTkbpTldRwSu5Z+ctG9Jd0=;
        b=OgMVYrUqAeUyjzAsCp6YDdd2hgmyqNX5z9Nv+AGZDXJfTWCVADyRbVpATPfu84V6Ai
         V7GzlZsqSEC4/dW455alBSOi0eCKzNWWopK6iH65DZau/Rww187+UBEqqKgSDmc6u9R9
         r46Lc23VA/tCacrrHXzo0ZZADi603Eap8gDU2GE+mdzOiX2Dhk50qKf9RPA6C9loLxjM
         bYthGjJH5NACYCwmZnG8iKRUk54jUcFeOxM+HRDz3pRzLQzX9wxWAIQIymaJgAyvU2Io
         1mcB8AR4zBrHXC24cHXEbkwzUZNPUdyuBKbrAaEeP1HNJB+W1ns6UAN9qV6Gh8/FDN0i
         Btzw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=fail (p=NONE sp=NONE dis=NONE) header.from=intel.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id t136si19243436pfc.262.2018.11.21.06.55.39;
        Wed, 21 Nov 2018 06:55:59 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730693AbeKVBZW (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Wed, 21 Nov 2018 20:25:22 -0500
Received: from mga06.intel.com ([134.134.136.31]:65416 "EHLO mga06.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1729240AbeKVBZW (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 20:25:22 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
  by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 21 Nov 2018 06:50:37 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,261,1539673200"; 
   d="scan'208";a="108157103"
Received: from yucummi-mobl1.amr.corp.intel.com (HELO tstruk-mobl1.jf.intel.com) ([10.252.132.153])
  by fmsmga004.fm.intel.com with ESMTP; 21 Nov 2018 06:50:37 -0800
Subject: [PATCH v6] tpm: add support for partial reads
From: Tadeusz Struk <tadeusz.struk@intel.com>
To: jarkko.sakkinen@linux.intel.com
Cc: jgg@ziepe.ca, linux-integrity@vger.kernel.org,
        linux-security-module@vger.kernel.org,
        linux-kernel@vger.kernel.org, tadeusz.struk@intel.com
Date: Wed, 21 Nov 2018 06:50:37 -0800
Message-ID: <154281183700.2093.10559851516194502797.stgit@tstruk-mobl1.jf.intel.com>
User-Agent: StGit/unknown-version
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwAH6UQAcvVbQ_xjAA--.2042S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3Xr4DAr47uFWUKr13Wr13CFg_yoWxZr4kpa
	yYk3s3Jrs8Jr42kFn7JFsIvF1fW3Z5WFyjqFy8Ga47Zr9rZ3Z0gF1FkF1jqFy7ZrZ7JrZI
	9ay8WryUGr1UZw7anT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUP0b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r12
	6r1DMcIj6I8E87Iv67AKxVWxJVW8Jr1lOx8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcVAKI4
	8JMx02cVCv0xWlc7CjxVAKzI0EY4vE52x082I5MxkFs20EY4vE44CYbxCE4x80FwCY02Av
	z4vEIxC_Xrylc2IjII80xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26ryj6F1UMxvI42
	IY6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26rxl6s0DMxvI42IY
	6I8E87Iv6xkF7I0E14v26rxl6s0DMxAIw28IcxkI7VAKI48JMxAIw28IcVAKzI0EY4vE52
	x082I5MxCjnVCjjxCrMxC20s026xCaFVCjc4AY6r1j6r4UMI8I3I0E5I8CrVAFwI0_Jr0_
	Jr4lx2IqxVCjr7xvwVAFwI0_JrI_JrWlx4CE17CEb7AF67AKxVWUAVWUtwCIc40Y0x0EwI
	xGrwCI42IY6xAIw20EY4v20xvaj40_Jr0_JF7vcSsGvfC2KfnxnUUI43ZEXa7IUOIhF3UU
	UUU==

Currently to read a response from the TPM device an application needs
provide big enough buffer for the whole response and read it in one go.
The application doesn't know how big the response it beforehand so it
always needs to maintain a 4K buffer and read the max (4K).
In case if the user of the TSS library doesn't provide big enough
buffer the TCTI spec says that the library should set the required
size and return TSS2_TCTI_RC_INSUFFICIENT_BUFFER error code so that the
application could allocate a bigger buffer and call receive again.
To make it possible in the TSS library, this requires being able to do
partial reads from the driver.
The library would read the 10 bytes header first to get the actual size
of the response from the header, and then read the rest of the response.

This patch adds support for partial reads, i.e. the user can read the
response in one or multiple reads, until the whole response is consumed.
The user can also read only part of the response and ignore
the rest by issuing a new write to send a new command.

Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
---
The usecase is implemented in this TSS commit:
https://github.com/tpm2-software/tpm2-tss/commit/ce982f67a67dc08e24683d30b05800648d8a264c

Changes in v6:
 - Remove needless comments in struct file_priv

Changes in v5:
 - Merge the two patches back into one.
 - Change variable 'partial_data' to a new flag 'response_read'.
 - Update the logic around partial_data to reflect the new flag.
 - Add a new variable response_length that keeps track of how much
   of the response is left.

Changes in v4:
 - Use unsigned type for response_pending as it will never be negative.
 - Rebased on top of name change data_pending to transmit_result patch.

Changes in v3:
 - Remove link to usecase implemented in TSS out of the commit message.
 - Update the conddition in tpm_common_poll() to take into account
   the partial_data also.

Changes in v2:
 - Allow writes after only partial response is consumed to maintain
   backwords compatibility.
---
 drivers/char/tpm/tpm-dev-common.c |   51 +++++++++++++++++++++++++------------
 drivers/char/tpm/tpm-dev.h        |    5 +---
 2 files changed, 37 insertions(+), 19 deletions(-)

diff --git a/drivers/char/tpm/tpm-dev-common.c b/drivers/char/tpm/tpm-dev-common.c
index 99b5133a9d05..344739223451 100644
--- a/drivers/char/tpm/tpm-dev-common.c
+++ b/drivers/char/tpm/tpm-dev-common.c
@@ -40,7 +40,7 @@ static void tpm_async_work(struct work_struct *work)
 
 	tpm_put_ops(priv->chip);
 	if (ret > 0) {
-		priv->data_pending = ret;
+		priv->response_length = ret;
 		mod_timer(&priv->user_read_timer, jiffies + (120 * HZ));
 	}
 	mutex_unlock(&priv->buffer_mutex);
@@ -63,7 +63,8 @@ static void tpm_timeout_work(struct work_struct *work)
 					      timeout_work);
 
 	mutex_lock(&priv->buffer_mutex);
-	priv->data_pending = 0;
+	priv->response_read = true;
+	priv->response_length = 0;
 	memset(priv->data_buffer, 0, sizeof(priv->data_buffer));
 	mutex_unlock(&priv->buffer_mutex);
 	wake_up_interruptible(&priv->async_wait);
@@ -74,6 +75,7 @@ void tpm_common_open(struct file *file, struct tpm_chip *chip,
 {
 	priv->chip = chip;
 	priv->space = space;
+	priv->response_read = true;
 
 	mutex_init(&priv->buffer_mutex);
 	timer_setup(&priv->user_read_timer, user_reader_timeout, 0);
@@ -90,22 +92,35 @@ ssize_t tpm_common_read(struct file *file, char __user *buf,
 	ssize_t ret_size = 0;
 	int rc;
 
-	del_singleshot_timer_sync(&priv->user_read_timer);
-	flush_work(&priv->timeout_work);
 	mutex_lock(&priv->buffer_mutex);
 
-	if (priv->data_pending) {
-		ret_size = min_t(ssize_t, size, priv->data_pending);
-		if (ret_size > 0) {
-			rc = copy_to_user(buf, priv->data_buffer, ret_size);
-			memset(priv->data_buffer, 0, priv->data_pending);
-			if (rc)
-				ret_size = -EFAULT;
+	if (priv->response_length) {
+		priv->response_read = true;
+
+		ret_size = min_t(ssize_t, size, priv->response_length);
+		if (!ret_size) {
+			priv->response_length = 0;
+			goto out;
 		}
 
-		priv->data_pending = 0;
+		rc = copy_to_user(buf, priv->data_buffer + *off, ret_size);
+		if (rc) {
+			memset(priv->data_buffer, 0, TPM_BUFSIZE);
+			priv->response_length = 0;
+			ret_size = -EFAULT;
+		} else {
+			memset(priv->data_buffer + *off, 0, ret_size);
+			priv->response_length -= ret_size;
+			*off += ret_size;
+		}
 	}
 
+out:
+	if (!priv->response_length) {
+		*off = 0;
+		del_singleshot_timer_sync(&priv->user_read_timer);
+		flush_work(&priv->timeout_work);
+	}
 	mutex_unlock(&priv->buffer_mutex);
 	return ret_size;
 }
@@ -125,7 +140,7 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 	 * tpm_read or a user_read_timer timeout. This also prevents split
 	 * buffered writes from blocking here.
 	 */
-	if (priv->data_pending != 0 || priv->command_enqueued) {
+	if (!priv->response_read || priv->command_enqueued) {
 		ret = -EBUSY;
 		goto out;
 	}
@@ -150,6 +165,10 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 		goto out;
 	}
 
+	priv->response_length = 0;
+	priv->response_read = false;
+	*off = 0;
+
 	/*
 	 * If in nonblocking mode schedule an async job to send
 	 * the command return the size.
@@ -168,7 +187,7 @@ ssize_t tpm_common_write(struct file *file, const char __user *buf,
 	tpm_put_ops(priv->chip);
 
 	if (ret > 0) {
-		priv->data_pending = ret;
+		priv->response_length = ret;
 		mod_timer(&priv->user_read_timer, jiffies + (120 * HZ));
 		ret = size;
 	}
@@ -184,7 +203,7 @@ __poll_t tpm_common_poll(struct file *file, poll_table *wait)
 
 	poll_wait(file, &priv->async_wait, wait);
 
-	if (priv->data_pending)
+	if (!priv->response_read || priv->response_length)
 		mask = EPOLLIN | EPOLLRDNORM;
 	else
 		mask = EPOLLOUT | EPOLLWRNORM;
@@ -201,7 +220,7 @@ void tpm_common_release(struct file *file, struct file_priv *priv)
 	del_singleshot_timer_sync(&priv->user_read_timer);
 	flush_work(&priv->timeout_work);
 	file->private_data = NULL;
-	priv->data_pending = 0;
+	priv->response_length = 0;
 }
 
 int __init tpm_dev_common_init(void)
diff --git a/drivers/char/tpm/tpm-dev.h b/drivers/char/tpm/tpm-dev.h
index a126b575cb8c..1089fc0bb290 100644
--- a/drivers/char/tpm/tpm-dev.h
+++ b/drivers/char/tpm/tpm-dev.h
@@ -9,14 +9,13 @@ struct file_priv {
 	struct tpm_chip *chip;
 	struct tpm_space *space;
 
-	/* Holds the amount of data passed or an error code from async op */
-	ssize_t data_pending;
 	struct mutex buffer_mutex;
-
 	struct timer_list user_read_timer;      /* user needs to claim result */
 	struct work_struct timeout_work;
 	struct work_struct async_work;
 	wait_queue_head_t async_wait;
+	size_t response_length;
+	bool response_read;
 	bool command_enqueued;
 
 	u8 data_buffer[TPM_BUFSIZE];
