Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 15:26:29 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 862DA580332;
	Wed, 21 Nov 2018 23:07:27 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga007-1.jf.intel.com with ESMTP; 21 Nov 2018 23:07:27 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A695/ZBeseqexHQpumvXk13nqlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc69ZhyN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4qF2QxHqlS?=
 =?us-ascii?q?gHLSY0/m/XhMJzlqJVvg+vqRtwzIDbfI6aKeF+frvfcN4BWWpMXdxcWzBbD4+g?=
 =?us-ascii?q?bYYCCfcKM+ZCr4n6olsDtQe+BQi0BO/20TBIgWP21rA00+QmCwHNwRAtH8gIsH?=
 =?us-ascii?q?vOqNX6KaASWv2rwabS1zXDcelZ2TP96IjPbxsuvO+DVq93f8XPzUkvEB7Og1KM?=
 =?us-ascii?q?qYzkJzOazeMNs3SA4uthVeOvl2knqxtrrjezwccsj5DEi4QIwV7K8iV5xZw6Jd?=
 =?us-ascii?q?y+SENjYt6rDoFQtyeEOItyWM8iRHtouCk8x7YbupC7ZDAHxIo7yxPbcfCLboaF?=
 =?us-ascii?q?7gz5WOqMIjp0mGhpdbO9ihqq7EStzu7xWtOp3FtErCdJiMfAumwT2xDJ98SKRP?=
 =?us-ascii?q?pw80G80jiVzQ/T8PtLIUUsmKrbNZEhxrkwm4INsUTMACD2gl/6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbq/hpp+GOI94kgD+MqIwlcyjGek0LBQCUmyB9eih2rDv41f1TKhJg/EqiK?=
 =?us-ascii?q?XUsZLXKdwepqGjAg9V1ogj6wy4DzejyNkYmXgHLFRYeBOIloTpOE/BIOr+Dfih?=
 =?us-ascii?q?h1SgiTBrxv7APrL/GJXANWbDkLj/crZn8UJcyxQ8zcpZ551KDrENOvXzWlX+tN?=
 =?us-ascii?q?DAFB82LxS0w/r7CNV6zo4eXWOPAqyHP6/Ivl6I+/kiI+2NZI8TpTb8JOIp5//o?=
 =?us-ascii?q?jX8lh1AdebOl0ocQaHC9Bv5mOVmWYWLwgtcdFmcHpgo+Q/briF2eSzFTYGy+X6?=
 =?us-ascii?q?Ih5j4hDoKmApzORoSsgLyHwSe6EYdaZmFAClCQD3joc5+IVOsLaCKXOsVhiCAL?=
 =?us-ascii?q?VaC9S4890hGjrA36y715IebO+S0YspTj1N5y5+DIkREy9Dp0D9mS0m2XTmF0mH?=
 =?us-ascii?q?8ISCEy3KxlvUN9zVKD27Big/NEDdxT++9JUgAiOJHG1Ox6C9fyWgHbcteTUlmm?=
 =?us-ascii?q?QM6rATUwTtI33t8PbFxxG9SkjhDfwSWqB6UZmKCMBJwx6qjcxWT+J95hy3ba06?=
 =?us-ascii?q?ksl1omTdFJNWG8gq5/9hLcB4jGk0iCk6aqdKIc3DPC9WuZzGqOul1YXxB0Uanf?=
 =?us-ascii?q?QX8fYU7Wp8zj5kzeV7+uFagnMgxZxMGfMKRKdMPmgU9GRPj5PtTeeHy+m2G3CR?=
 =?us-ascii?q?aMxbOMaY7qdn4Z3CXcDkgEjg8S8WyHNQg4GieuvWbeACZyGlLoZkPm6fN+p2+j?=
 =?us-ascii?q?Tk8o0wGKaFVs2Kev9R4Lm/OQUfMT0agCuCc6tTp0Gk2w39bXC9qGugpgc79QYd?=
 =?us-ascii?q?I74Fdby23ZsxZxMYCnL6BnnlQeaRh4v1vy1xVrDYVNidQqrHIvzAp1NaKY0FNA?=
 =?us-ascii?q?eymE3ZzqPb3XMG3y/BGpa67ZwVze1NeW+qES6PU3sVnjvQepFlY8/HVjydVaz3?=
 =?us-ascii?q?yc5pDSBgoITZ3xSlo39wR9p7zCeCY9453b1HJyPqi0qDPNwM8pC/Y/xRamfNdf?=
 =?us-ascii?q?N72EGRT2E80bAciuNeMrl0KobhICIOBd6qo0M9m6ePuB3a6hJPxgky6+jWRb/I?=
 =?us-ascii?q?B91VqB9iphSuLSw5kJ2fCZ3gudWDf6g1esqcT3mYFCZTEPEWuz0ynkBIhNZqJs?=
 =?us-ascii?q?eYYHE3uhI8qyxt9mnZ7iR2ZY9EK/B1MBwMKpYxuSYEDn0g1KyEsXpmarmS2mwD?=
 =?us-ascii?q?xukjElt7aQ0zbKw+v/ahUHIGlLRG95gFfoIIi0ic0aXUeyYwgokhul+Vj1x6xB?=
 =?us-ascii?q?qKtjKGnTRF9CfzLqIGF6Tquwqr2CbtZP6ZMpqylWUP6wYUuHSr77uBYa1yLjH2?=
 =?us-ascii?q?1DxDE0bT2qu5P5nwBkh2KZNnp8sH3ZecRozxfF+NPcXeJR3iYBRCRgiznYHEK8?=
 =?us-ascii?q?P9qq/dWTjZvDqfqxV2GiVp1Sdynk04WAuTC/5W1rBx2/gv+ylsfmEQg8zS/0yd?=
 =?us-ascii?q?1qWT/Uoxb7Z4nhz766Pv5/fkl0GF/87NJ3G4FknYs3np0Q23kahpOO8HoDkGfz?=
 =?us-ascii?q?N8hb2K3kYHoMQz4L38Da4Az/1EJ/KXKJwprzVm+Bzct5e9m6fmQW1zo+789QCa?=
 =?us-ascii?q?eY9rxEnTZvrVq+ogLcevx9njYbyfsz538WmeAJuAwxziqDBrAeB1VXPSvplx6Q?=
 =?us-ascii?q?9dCxsL1XZHqzcbi3zEd+mNGhDLKYrQ1GVnf2ZIwiHTNu4cVlK13Dzmfz6o7/dd?=
 =?us-ascii?q?nUbNITsACUkhjag+hULpIxiuQFhS59NW3hun0lzvYxjQZy0pGioIiHN2Jt8bql?=
 =?us-ascii?q?Ah5fMz35fcIS9SvrjaZDhcaWxIGvE45lGjUKWpvoUP2pHCgTtfThKwaBDjk8pm?=
 =?us-ascii?q?2HFrrYGA+V8F1moG7XE5C3K3GXI2EUws54SxmaIExfnRoYXDEnnpMiEgCqxcrh?=
 =?us-ascii?q?cFp25zwL5174rAdMxfxsNxXlTmjfowKoYC8uSJeDNBpW8h1C50DNPMyc9O1zGj?=
 =?us-ascii?q?9X/oa7oAyRMGCbZBlIDWIUWkyCHV/jJaKj5d3B8+ieG+q/IOHCYbSIqexCSfiI?=
 =?us-ascii?q?wYij3Zdh/zaJLs+PJGVtD+Un2kpfWnB0A8TYmzISSywOiiLCdcibqA2n+i1wqM?=
 =?us-ascii?q?C//+/mWAbu5YuJFrtTPs9j+xGwgaefKeGQgDx1Jipf1pMJ3XXI0qQQ3EYOiyFy?=
 =?us-ascii?q?cDmgCbQAujDMTKLTma9XDgQXayBpNMtP4KIzwBNNOdPAit7u0r54j/g1C0pKVF?=
 =?us-ascii?q?D7m8GpY9AKLH+5NF/dGEmLM7GGLyXRw87reaO8VaFQjOJMuhKqpDaUCFXjMSqD?=
 =?us-ascii?q?ljXzUxCvMPpBjCWaPBxYpYG8fQxhCWnlTNL6dBK7NMV7giExwb0xnnnKL3ITMS?=
 =?us-ascii?q?Bgc0NRqb2d9T9YgvR6G2Bb8nVpN/WLmyaH4OneMZsWtfprAiJpl+NV+ng6yr1V?=
 =?us-ascii?q?7D1aS/xxgifdstluo1S+mOmV1jVnSAZOqipMhI+TvURtI6PZ9pxBWXbC5B0M7G?=
 =?us-ascii?q?WQBA4Mp9tqEdDvv6FQyt7SlKP8MjtC8tTU/dcCCMjQMs6ILH0hMR+6UALTWQ8E?=
 =?us-ascii?q?SyO7cH3enwlWl/SX92GOhoY1p4Kqm5cUTLJfElsvGaAgB1xhDeAFdZ57RDItl/?=
 =?us-ascii?q?ibkcgU6GCWrR/NScEctZfCErqXAPPgLx6agKNCah9Oxqn3acwaPYj281ZvZllz?=
 =?us-ascii?q?gMLBHE+UFdJKpjZoRgw5ukNA9D55VGJ3k0L9Yyu/8WMUD7i/mRtywgdlaOQg7j?=
 =?us-ascii?q?HE7FI+J16Mryw11AE3kNDlkC2XfxbyIb22UIUQDDD78wAuO5X0RQ9zNSWygEV7?=
 =?us-ascii?q?OTaCTLVUy/NkdGZ2mErftIFJFPp0U6JJelkTyOuRavFu1k5T7m27yktXze/ED4?=
 =?us-ascii?q?Z+jgwscI7qo38T9RhkaYspJLSVLq1VhlZXnOqnpCmh0uw2iCQXPVgE9GOVMCIF?=
 =?us-ascii?q?8GkFMr5uczap5uZr9SSQiidEYi4HUP988aEizV80J+nVl3Go6LVEME3kb+E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAABwVPZbh0O0hNFiHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGCaYECJ4N4iBhfiyEBgiGDAIV2hV2Bc4FphHcggVMSAQEYCwgBiEwiNAk?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmwCCBgIAQYBRgYJAiQCJgICAx4OA?=
 =?us-ascii?q?Q4BMQWDHAGBaQEBARUFCqlzgS8NEYQPAYEDgikEChkNghQFE3iKfheBf4ERhWi?=
 =?us-ascii?q?FLIJXAoh/JIZtj0QuCYZ8hwiDQ4FZiC6BLAoBT4R7LI0XgQqJPAIEAgQFAhRab?=
 =?us-ascii?q?IINTSMVgW8OCwEMgRKCJxcSiEyFXx4BMgEBCHsBAYpPKoIjAQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAABwVPZbh0O0hNFiHQEBBQEHBQGBUQgBCwGCaYECJ4N?=
 =?us-ascii?q?4iBhfiyEBgiGDAIV2hV2Bc4FphHcggVMSAQEYCwgBiEwiNAkNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKSMMgjYigmwCCBgIAQYBRgYJAiQCJgICAx4OAQ4BMQWDHAGBaQE?=
 =?us-ascii?q?BARUFCqlzgS8NEYQPAYEDgikEChkNghQFE3iKfheBf4ERhWiFLIJXAoh/JIZtj?=
 =?us-ascii?q?0QuCYZ8hwiDQ4FZiC6BLAoBT4R7LI0XgQqJPAIEAgQFAhRabIINTSMVgW8OCwE?=
 =?us-ascii?q?MgRKCJxcSiEyFXx4BMgEBCHsBAYpPKoIjAQE?=
X-IronPort-AV: E=Sophos;i="5.56,264,1539673200"; 
   d="scan'208";a="41158518"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 21 Nov 2018 23:07:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2392379AbeKVRp0 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 12:45:26 -0500
Received: from terminus.zytor.com ([198.137.202.136]:49529 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1733037AbeKVRp0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 12:45:26 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wAM77Blk3691313
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Wed, 21 Nov 2018 23:07:11 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wAM77BM23691310;
        Wed, 21 Nov 2018 23:07:11 -0800
Date: Wed, 21 Nov 2018 23:07:11 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Arnaldo Carvalho de Melo <tipbot@zytor.com>
Message-ID: <tip-c3tu5yg204p5mvr9kvwew07n@git.kernel.org>
Cc: tglx@linutronix.de, linux-kernel@vger.kernel.org,
        wangnan0@huawei.com, namhyung@kernel.org, dsahern@gmail.com,
        jolsa@kernel.org, hpa@zytor.com, acme@redhat.com, mingo@kernel.org,
        adrian.hunter@intel.com
Reply-To: adrian.hunter@intel.com, mingo@kernel.org, acme@redhat.com,
          jolsa@kernel.org, hpa@zytor.com, dsahern@gmail.com,
          namhyung@kernel.org, wangnan0@huawei.com,
          linux-kernel@vger.kernel.org, tglx@linutronix.de
To: linux-tip-commits@vger.kernel.org
Subject: [tip:perf/core] perf augmented_syscalls: Remove example hardcoded
 set of filtered pids
Git-Commit-ID: e312747b49d382584aaa62398952832765e28f74
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=2.2 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_96_Q,FREEMAIL_FORGED_REPLYTO autolearn=no
        autolearn_force=no version=3.4.2
X-Spam-Level: **
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  e312747b49d382584aaa62398952832765e28f74
Gitweb:     https://git.kernel.org/tip/e312747b49d382584aaa62398952832765e28f74
Author:     Arnaldo Carvalho de Melo <acme@redhat.com>
AuthorDate: Wed, 7 Nov 2018 10:09:41 -0300
Committer:  Arnaldo Carvalho de Melo <acme@redhat.com>
CommitDate: Wed, 21 Nov 2018 12:00:31 -0300

perf augmented_syscalls: Remove example hardcoded set of filtered pids

Now that 'perf trace' fills in that "filtered_pids" BPF map, remove the
set of filtered pids used as an example to test that feature.

That feature works like this:

Starting a system wide 'strace' like 'perf trace' augmented session we
noticed that lots of events take place for a pid, which ends up being
the feedback loop of perf trace's syscalls being processed by the
'gnome-terminal' process:

  # perf trace -e tools/perf/examples/bpf/augmented_raw_syscalls.c
     0.391 ( 0.002 ms): gnome-terminal/2469 read(fd: 17</dev/ptmx>, buf: 0x564b79f750bc, count: 8176) = 453
     0.394 ( 0.001 ms): gnome-terminal/2469 read(fd: 17</dev/ptmx>, buf: 0x564b79f75280, count: 7724) = -1 EAGAIN Resource temporarily unavailable
     0.438 ( 0.001 ms): gnome-terminal/2469 read(fd: 4<anon_inode:[eventfd]>, buf: 0x7fffc696aeb0, count: 16) = 8
     0.519 ( 0.001 ms): gnome-terminal/2469 read(fd: 17</dev/ptmx>, buf: 0x564b79f75280, count: 7724) = 114
     0.522 ( 0.001 ms): gnome-terminal/2469 read(fd: 17</dev/ptmx>, buf: 0x564b79f752f1, count: 7611) = -1 EAGAIN Resource temporarily unavailable
  ^C

So we can use --filter-pids to get rid of that one, and in this case what is
being used to implement that functionality is that "filtered_pids" BPF map that
the tools/perf/examples/bpf/augmented_raw_syscalls.c created and that 'perf trace'
bpf loader noticed and created a "struct bpf_map" associated that then got populated
by 'perf trace':

  # perf trace --filter-pids 2469 -e tools/perf/examples/bpf/augmented_raw_syscalls.c
     0.020 ( 0.002 ms): gnome-shell/1663 epoll_pwait(epfd: 12<anon_inode:[eventpoll]>, events: 0x7ffd8f3ef960, maxevents: 32, sigsetsize: 8) = 1
     0.025 ( 0.002 ms): gnome-shell/1663 read(fd: 24</dev/input/event4>, buf: 0x560c01bb8240, count: 8112) = 48
     0.029 ( 0.001 ms): gnome-shell/1663 read(fd: 24</dev/input/event4>, buf: 0x560c01bb8258, count: 8088) = -1 EAGAIN Resource temporarily unavailable
     0.032 ( 0.001 ms): gnome-shell/1663 read(fd: 24</dev/input/event4>, buf: 0x560c01bb8240, count: 8112) = -1 EAGAIN Resource temporarily unavailable
     0.040 ( 0.003 ms): gnome-shell/1663 recvmsg(fd: 46<socket:[35893]>, msg: 0x7ffd8f3ef950) = -1 EAGAIN Resource temporarily unavailable
    21.529 ( 0.002 ms): gnome-shell/1663 epoll_pwait(epfd: 5<anon_inode:[eventpoll]>, events: 0x7ffd8f3ef960, maxevents: 32, sigsetsize: 8) = 1
    21.533 ( 0.004 ms): gnome-shell/1663 recvmsg(fd: 82<socket:[42826]>, msg: 0x7ffd8f3ef7b0, flags: DONTWAIT|CMSG_CLOEXEC) = 236
    21.581 ( 0.006 ms): gnome-shell/1663 ioctl(fd: 8</dev/dri/card0>, cmd: DRM_I915_GEM_BUSY, arg: 0x7ffd8f3ef060) = 0
    21.605 ( 0.020 ms): gnome-shell/1663 ioctl(fd: 8</dev/dri/card0>, cmd: DRM_I915_GEM_CREATE, arg: 0x7ffd8f3eeea0) = 0
    21.626 ( 0.119 ms): gnome-shell/1663 ioctl(fd: 8</dev/dri/card0>, cmd: DRM_I915_GEM_SET_DOMAIN, arg: 0x7ffd8f3eee94) = 0
    21.746 ( 0.081 ms): gnome-shell/1663 ioctl(fd: 8</dev/dri/card0>, cmd: DRM_I915_GEM_PWRITE, arg: 0x7ffd8f3eeea0) = 0
  ^C

Oops, yet another gnome process that is involved with the output that
'perf trace' generates, lets filter that out too:

  # perf trace --filter-pids 2469,1663 -e tools/perf/examples/bpf/augmented_raw_syscalls.c
         ? (         ): wpa_supplicant/1366  ... [continued]: select()) = 0 Timeout
     0.006 ( 0.002 ms): wpa_supplicant/1366 clock_gettime(which_clock: BOOTTIME, tp: 0x7fffe5b1e430) = 0
     0.011 ( 0.001 ms): wpa_supplicant/1366 clock_gettime(which_clock: BOOTTIME, tp: 0x7fffe5b1e3e0) = 0
     0.014 ( 0.001 ms): wpa_supplicant/1366 clock_gettime(which_clock: BOOTTIME, tp: 0x7fffe5b1e430) = 0
         ? (         ): gmain/1791  ... [continued]: poll()) = 0 Timeout
     0.017 (         ): wpa_supplicant/1366 select(n: 6, inp: 0x55646fed3ad0, outp: 0x55646fed3b60, exp: 0x55646fed3bf0, tvp: 0x7fffe5b1e4a0) ...
   157.879 ( 0.019 ms): gmain/1791 inotify_add_watch(fd: 8<anon_inode:inotify>, pathname: , mask: 16789454) = -1 ENOENT No such file or directory
         ? (         ): cupsd/1001  ... [continued]: epoll_pwait()) = 0
         ? (         ): gsd-color/1908  ... [continued]: poll()) = 0 Timeout
   499.615 (         ): cupsd/1001 epoll_pwait(epfd: 4<anon_inode:[eventpoll]>, events: 0x557a21166500, maxevents: 4096, timeout: 1000, sigsetsize: 8) ...
   586.593 ( 0.004 ms): gsd-color/1908 recvmsg(fd: 3<socket:[38074]>, msg: 0x7ffdef34e800) = -1 EAGAIN Resource temporarily unavailable
         ? (         ): fwupd/2230  ... [continued]: poll()) = 0 Timeout
         ? (         ): rtkit-daemon/906  ... [continued]: poll()) = 0 Timeout
         ? (         ): rtkit-daemon/907  ... [continued]: poll()) = 1
   724.603 ( 0.007 ms): rtkit-daemon/907 read(fd: 6<anon_inode:[eventfd]>, buf: 0x7f05ff768d08, count: 8) = 8
         ? (         ): ssh/5461  ... [continued]: select()) = 1
   810.431 ( 0.002 ms): ssh/5461 clock_gettime(which_clock: BOOTTIME, tp: 0x7ffd7f39f870) = 0
   ^C

Several syscall exit events for syscalls in flight when 'perf trace' started, etc. Saner :-)

Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: David Ahern <dsahern@gmail.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Wang Nan <wangnan0@huawei.com>
Link: https://lkml.kernel.org/n/tip-c3tu5yg204p5mvr9kvwew07n@git.kernel.org
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 tools/perf/examples/bpf/augmented_raw_syscalls.c | 27 ------------------------
 1 file changed, 27 deletions(-)

diff --git a/tools/perf/examples/bpf/augmented_raw_syscalls.c b/tools/perf/examples/bpf/augmented_raw_syscalls.c
index 5fed1eff889d..3f26e705b86c 100644
--- a/tools/perf/examples/bpf/augmented_raw_syscalls.c
+++ b/tools/perf/examples/bpf/augmented_raw_syscalls.c
@@ -51,27 +51,6 @@ struct augmented_filename {
 
 pid_filter(pids_filtered);
 
-static void pid_filter__init(void)
-{
-	/*
-	 * Filter a bunch of pids: gnome-shell, kvm, firefox threads,
-	 * avahi-daemon, etc, just for testing as we go along.
-	 *
-	 * These will come from 'perf trace --filter-pids' in a explicit way
-	 * and also it will filter out itself, to avoid the feedback loop:
-	 * syscalls 'perf trace' does gets caught, reported, causing new
-	 * syscalls to get emitted, rinse repeat forever.
-	 */
-	if (pid_filter__add(&pids_filtered, 2971))
-		return; /* pid_filter__init() was already called, bail out */
-	pid_filter__add(&pids_filtered, 20016);
-	pid_filter__add(&pids_filtered, 12018);
-	pid_filter__add(&pids_filtered, 2310);
-	pid_filter__add(&pids_filtered, 3759);
-	pid_filter__add(&pids_filtered, 25978);
-	pid_filter__add(&pids_filtered, 883);
-}
-
 SEC("raw_syscalls:sys_enter")
 int sys_enter(struct syscall_enter_args *args)
 {
@@ -81,12 +60,6 @@ int sys_enter(struct syscall_enter_args *args)
 	} augmented_args;
 	unsigned int len = sizeof(augmented_args);
 	const void *filename_arg = NULL;
-	/*
- 	 * We still don't have a "main()" called first and only once
- 	 * call it always, it will exit as soon as it realizes the
- 	 * first hard coded filtered pid was already added.
- 	 */
-	pid_filter__init();
 
 	if (pid_filter__has(&pids_filtered, getpid()))
 		return 0;
