Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 00:28:54 -0000
Received: from icoremail.net (unknown [209.85.214.172])
	by mail-app2 (Coremail) with SMTP id by_KCgDHHybic_JbHW63AQ--.54757S3;
	Mon, 19 Nov 2018 16:27:15 +0800 (CST)
Received: from mail-pl1-f172.google.com (unknown [209.85.214.172])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwBHHTnhc_JbkqBWAA--.23601S3;
	Mon, 19 Nov 2018 16:27:13 +0800 (CST)
Received: by mail-pl1-f172.google.com with SMTP id b5-v6so14233241pla.6
        for <xuliker@zju.edu.cn>; Mon, 19 Nov 2018 00:27:13 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :date:from:to:cc:subject:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding:sender:precedence:list-id;
        bh=BMPsJ33Gs3adrVV+hHOnoMPdylghZdoWknvdwP7EY44=;
        b=BBXUhCgqEnUP/6a5/QBujYQKmePxh9p333KahEnDJIQ7RCyGtgF2KP3HHTGDMt7+n5
         VD5u2b9RDylewDzAIAPuOu+EideM1s+iGBBBXvLFwNpzEyaam5/CyySoprBns+IslNgU
         ihW6PKG+EENb0X+NAmzzUK415kvMK9U5w3ZA/CeZcOvoRENHD8a2PjH/vBoGv82bDVOQ
         73ryAQtO82ya8eqg5Pb/xl5r/qjpyzp3e2zlM7a70n3ODU0rT0FQ5JGFUgC2u6wqqBwR
         jqipbZ4LGh3NY5gCSTMam2eP5QBQ5WZl6hslm3LVAAdWtI7uOp8EZX191qcx7AT8ayuy
         92ng==
X-Original-Authentication-Results: mx.google.com;       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
X-Gm-Message-State: AGRZ1gJb3o7ry7Ycz8cJAdjQW/IlyOLXyoDr3uw+8Ee+z4f5qvViOrin
	ENPHKMXELSp4IHmYPaQy8Clxwm2wb0aPes48nApzwbXcLd5A/J4=
X-Received: by 2002:a17:902:560f:: with SMTP id h15-v6mr21987897pli.160.1542616033003;
        Mon, 19 Nov 2018 00:27:13 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2377512pju;
        Mon, 19 Nov 2018 00:27:11 -0800 (PST)
X-Google-Smtp-Source: AJdET5cGgCnYMIK3NOdXQl8Bwl5Q9lo2geWPVoapitw9pWDlgVjProouChDehYQMw1YuTnTYKjwY
X-Received: by 2002:a17:902:30f:: with SMTP id 15-v6mr21605920pld.155.1542616031854;
        Mon, 19 Nov 2018 00:27:11 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542616031; cv=none;
        d=google.com; s=arc-20160816;
        b=HPrWXN5yZW3j5o5KDb6m1ON8bMvIk+haAxbabluCK+rY0CzmRJ4dsygzR9pl96zAIp
         R5TWjixqhYTNajX52dR/eEHfD5PmsJjHXMUUvo/j9A1LQRHRqBmj1rloXn5fSOcsd2j7
         yXlZiioDZWwiirTnc0VCUwqZiCTPPFWdaAPBfUhq22kgU37GppguXVgdWvqmfkobSzNc
         5xIvbUNQz5EB213FB2RX4tyM7EJNYmXdKT0bTNVEjfcmcdllImYlg+PbRShRJf3483MC
         kf5M2xw1uUe7KJiLmxcq6LZFu4jn5AJwYYGF63OWN8sNKH+PMVzi+v9iEA0WnXuKeKbG
         0V7Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:content-transfer-encoding:mime-version
         :references:in-reply-to:message-id:subject:cc:to:from:date;
        bh=BMPsJ33Gs3adrVV+hHOnoMPdylghZdoWknvdwP7EY44=;
        b=Y49bitH94QUbNkmJbsd+9eAb1r2e2MUyK3/FXwmNnlmFbAXUQ68f7NljBTkEPQJBqr
         yn7UWIlLzaDHioYwMvLR0xOPEO4VEINEnZivvMwZ8dqL9YORX4gnQQzMpls9mCqsja5d
         2+k/wA22bPlBNhEb0egsEKo9YSoerSzHG8J2UYvZVHQMUc8d3u9dXrHYhgNB9JniZ8Dx
         9yQJ39cPjYMKRLoCamNfX4rn0O4BDwCmAhqI2CS6HC7qJf7yl1NzoF6MFG7wqcl9lLYW
         I+BBbd97Dm8ONTs+pdOGt7Nl9x/3F7rEBlZBtdSDNn+/eq18PPtlFIEIU3cy03YT/kRk
         rVVA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id 7si18555618pfb.226.2018.11.19.00.26.56;
        Mon, 19 Nov 2018 00:27:11 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727098AbeKSSta (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Mon, 19 Nov 2018 13:49:30 -0500
Received: from mail.bootlin.com ([62.4.15.54]:36876 "EHLO mail.bootlin.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726175AbeKSSta (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 13:49:30 -0500
Received: by mail.bootlin.com (Postfix, from userid 110)
        id 4B37E20CFD; Mon, 19 Nov 2018 09:26:33 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT
        shortcircuit=ham autolearn=disabled version=3.4.2
Received: from bootlin.com (aaubervilliers-681-1-13-146.w90-88.abo.wanadoo.fr [90.88.134.146])
        by mail.bootlin.com (Postfix) with ESMTPSA id C9C6F2039F;
        Mon, 19 Nov 2018 09:26:32 +0100 (CET)
Date: Mon, 19 Nov 2018 09:26:32 +0100
From: Maxime Chevallier <maxime.chevallier@bootlin.com>
To: Grygorii Strashko <grygorii.strashko@ti.com>
Cc: "David S. Miller" <davem@davemloft.net>,
        Kishon Vijay Abraham I <kishon@ti.com>,
        Russell King - ARM Linux <linux@armlinux.org.uk>,
        <netdev@vger.kernel.org>, Sekhar Nori <nsekhar@ti.com>,
        <linux-kernel@vger.kernel.org>,
        <linux-arm-kernel@lists.infradead.org>,
        Tony Lindgren <tony@atomide.com>,
        <linux-amlogic@lists.infradead.org>,
        <linux-mediatek@lists.infradead.org>,
        Alexandre Belloni <alexandre.belloni@bootlin.com>,
        Antoine Tenart <antoine.tenart@free-electrons.com>,
        Quentin Schulz <quentin.schulz@bootlin.com>,
        Vivek Gautam <vivek.gautam@codeaurora.org>,
        Maxime Ripard <maxime.ripard@bootlin.com>,
        Chen-Yu Tsai <wens@csie.org>, Carlo Caione <carlo@caione.org>,
        Chunfeng Yun <chunfeng.yun@mediatek.com>,
        Matthias Brugger <matthias.bgg@gmail.com>,
        Manu Gautam <mgautam@codeaurora.org>
Subject: Re: [PATCH v2 4/5] phy: mvebu-cp110-comphy: convert to use eth phy
 mode and submode
Message-ID: <20181119092632.7048bc46@bootlin.com>
In-Reply-To: <20181109234755.21687-5-grygorii.strashko@ti.com>
References: <20181109234755.21687-1-grygorii.strashko@ti.com>
        <20181109234755.21687-5-grygorii.strashko@ti.com>
X-Mailer: Claws Mail 3.14.1 (GTK+ 2.24.31; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwBHHTnhc_JbkqBWAA--.23601S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3tFy3tw1kuw4ruw1kZFy5urg_yoWDur1UpF
	ZrC3srJasxtr9xGFyvvF1DAFsYvwnagFn3W34xK34xA3WDtF17Ja4Fq3y7CFWrAry5Cr1Y
	yF4UJFWDXwnxtwUanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPab7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwACjcxG0xvY0x0EwI
	xGrwCjxxvEa2IrMxkF7I0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xS
	Y4AK6IIF6r43MxkI7II2jI8vz4vEwIxGrwCYIxAIcVC0I7IYx2IY67AKxVW8JVW5JwCYIx
	AIcVC0I7IYx2IY6xkF7I0E14v26r4j6F4UMxvI42IY6I8E87Iv67AKxVW8Jr0_Cr1UMxvI
	42IY6I8E87Iv6xkF7I0E14v26r4UJVWxJr1l42xK82IYc2Ij64vIr41l42xK82IY64kExV
	AvwVAq07x20xyl4x8a6x804xWl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AK
	xVWUJVWUGwC20s026x8GjcxK67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r4a6rW5MIIYrx
	kI7VAKI48JMIIF0xvE42xK8VAvwI8IcIk0rVW8JVW3JbIYCTnIWIevJa73UjIFyTuYvjxU
	H2QDUUUUU

Hi Grygorii,

On Fri, 9 Nov 2018 17:47:54 -0600
Grygorii Strashko <grygorii.strashko@ti.com> wrote:

>Convert mvebu-cp110-comphy PHY driver to use recently introduced
>PHY_MODE_ETHERNET and phy_set_mode_ext().

Sorry I missed your V2, hopefully I tested the right version this time.
Tested on MCBin, this works just fine.

Thanks,

Tested-by: Maxime Chevallier <maxime.chevallier@bootlin.com>

>Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
>---
> drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c | 19 +-----
> drivers/phy/marvell/phy-mvebu-cp110-comphy.c    | 83 ++++++++++++++-----------
> 2 files changed, 48 insertions(+), 54 deletions(-)
>
>diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
>index 7a37a37..731793a 100644
>--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
>+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
>@@ -1165,28 +1165,13 @@ static void mvpp22_gop_setup_irq(struct mvpp2_port *port)
>  */
> static int mvpp22_comphy_init(struct mvpp2_port *port)
> {
>-	enum phy_mode mode;
> 	int ret;
> 
> 	if (!port->comphy)
> 		return 0;
> 
>-	switch (port->phy_interface) {
>-	case PHY_INTERFACE_MODE_SGMII:
>-	case PHY_INTERFACE_MODE_1000BASEX:
>-		mode = PHY_MODE_SGMII;
>-		break;
>-	case PHY_INTERFACE_MODE_2500BASEX:
>-		mode = PHY_MODE_2500SGMII;
>-		break;
>-	case PHY_INTERFACE_MODE_10GKR:
>-		mode = PHY_MODE_10GKR;
>-		break;
>-	default:
>-		return -EINVAL;
>-	}
>-
>-	ret = phy_set_mode(port->comphy, mode);
>+	ret = phy_set_mode_ext(port->comphy, PHY_MODE_ETHERNET,
>+			       port->phy_interface);
> 	if (ret)
> 		return ret;
> 
>diff --git a/drivers/phy/marvell/phy-mvebu-cp110-comphy.c b/drivers/phy/marvell/phy-mvebu-cp110-comphy.c
>index 79b52c3..7dee72b 100644
>--- a/drivers/phy/marvell/phy-mvebu-cp110-comphy.c
>+++ b/drivers/phy/marvell/phy-mvebu-cp110-comphy.c
>@@ -9,6 +9,7 @@
> #include <linux/iopoll.h>
> #include <linux/mfd/syscon.h>
> #include <linux/module.h>
>+#include <linux/phy.h>
> #include <linux/phy/phy.h>
> #include <linux/platform_device.h>
> #include <linux/regmap.h>
>@@ -131,26 +132,26 @@ struct mvebu_comhy_conf {
> 
> static const struct mvebu_comhy_conf mvebu_comphy_cp110_modes[] = {
> 	/* lane 0 */
>-	MVEBU_COMPHY_CONF(0, 1, PHY_MODE_SGMII, 0x1),
>-	MVEBU_COMPHY_CONF(0, 1, PHY_MODE_2500SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(0, 1, PHY_INTERFACE_MODE_SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(0, 1, PHY_INTERFACE_MODE_2500BASEX, 0x1),
> 	/* lane 1 */
>-	MVEBU_COMPHY_CONF(1, 2, PHY_MODE_SGMII, 0x1),
>-	MVEBU_COMPHY_CONF(1, 2, PHY_MODE_2500SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(1, 2, PHY_INTERFACE_MODE_SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(1, 2, PHY_INTERFACE_MODE_2500BASEX, 0x1),
> 	/* lane 2 */
>-	MVEBU_COMPHY_CONF(2, 0, PHY_MODE_SGMII, 0x1),
>-	MVEBU_COMPHY_CONF(2, 0, PHY_MODE_2500SGMII, 0x1),
>-	MVEBU_COMPHY_CONF(2, 0, PHY_MODE_10GKR, 0x1),
>+	MVEBU_COMPHY_CONF(2, 0, PHY_INTERFACE_MODE_SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(2, 0, PHY_INTERFACE_MODE_2500BASEX, 0x1),
>+	MVEBU_COMPHY_CONF(2, 0, PHY_INTERFACE_MODE_10GKR, 0x1),
> 	/* lane 3 */
>-	MVEBU_COMPHY_CONF(3, 1, PHY_MODE_SGMII, 0x2),
>-	MVEBU_COMPHY_CONF(3, 1, PHY_MODE_2500SGMII, 0x2),
>+	MVEBU_COMPHY_CONF(3, 1, PHY_INTERFACE_MODE_SGMII, 0x2),
>+	MVEBU_COMPHY_CONF(3, 1, PHY_INTERFACE_MODE_2500BASEX, 0x2),
> 	/* lane 4 */
>-	MVEBU_COMPHY_CONF(4, 0, PHY_MODE_SGMII, 0x2),
>-	MVEBU_COMPHY_CONF(4, 0, PHY_MODE_2500SGMII, 0x2),
>-	MVEBU_COMPHY_CONF(4, 0, PHY_MODE_10GKR, 0x2),
>-	MVEBU_COMPHY_CONF(4, 1, PHY_MODE_SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(4, 0, PHY_INTERFACE_MODE_SGMII, 0x2),
>+	MVEBU_COMPHY_CONF(4, 0, PHY_INTERFACE_MODE_2500BASEX, 0x2),
>+	MVEBU_COMPHY_CONF(4, 0, PHY_INTERFACE_MODE_10GKR, 0x2),
>+	MVEBU_COMPHY_CONF(4, 1, PHY_INTERFACE_MODE_SGMII, 0x1),
> 	/* lane 5 */
>-	MVEBU_COMPHY_CONF(5, 2, PHY_MODE_SGMII, 0x1),
>-	MVEBU_COMPHY_CONF(5, 2, PHY_MODE_2500SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(5, 2, PHY_INTERFACE_MODE_SGMII, 0x1),
>+	MVEBU_COMPHY_CONF(5, 2, PHY_INTERFACE_MODE_2500BASEX, 0x1),
> };
> 
> struct mvebu_comphy_priv {
>@@ -163,10 +164,12 @@ struct mvebu_comphy_lane {
> 	struct mvebu_comphy_priv *priv;
> 	unsigned id;
> 	enum phy_mode mode;
>+	int submode;
> 	int port;
> };
> 
>-static int mvebu_comphy_get_mux(int lane, int port, enum phy_mode mode)
>+static int mvebu_comphy_get_mux(int lane, int port,
>+				enum phy_mode mode, int submode)
> {
> 	int i, n = ARRAY_SIZE(mvebu_comphy_cp110_modes);
> 
>@@ -177,7 +180,7 @@ static int mvebu_comphy_get_mux(int lane, int port, enum phy_mode mode)
> 	for (i = 0; i < n; i++) {
> 		if (mvebu_comphy_cp110_modes[i].lane == lane &&
> 		    mvebu_comphy_cp110_modes[i].port == port &&
>-		    mvebu_comphy_cp110_modes[i].mode == mode)
>+		    mvebu_comphy_cp110_modes[i].mode == submode)
> 			break;
> 	}
> 
>@@ -187,8 +190,7 @@ static int mvebu_comphy_get_mux(int lane, int port, enum phy_mode mode)
> 	return mvebu_comphy_cp110_modes[i].mux;
> }
> 
>-static void mvebu_comphy_ethernet_init_reset(struct mvebu_comphy_lane *lane,
>-					     enum phy_mode mode)
>+static void mvebu_comphy_ethernet_init_reset(struct mvebu_comphy_lane *lane)
> {
> 	struct mvebu_comphy_priv *priv = lane->priv;
> 	u32 val;
>@@ -206,14 +208,14 @@ static void mvebu_comphy_ethernet_init_reset(struct mvebu_comphy_lane *lane,
> 		 MVEBU_COMPHY_SERDES_CFG0_HALF_BUS |
> 		 MVEBU_COMPHY_SERDES_CFG0_GEN_RX(0xf) |
> 		 MVEBU_COMPHY_SERDES_CFG0_GEN_TX(0xf));
>-	if (mode == PHY_MODE_10GKR)
>+	if (lane->submode == PHY_INTERFACE_MODE_10GKR)
> 		val |= MVEBU_COMPHY_SERDES_CFG0_GEN_RX(0xe) |
> 		       MVEBU_COMPHY_SERDES_CFG0_GEN_TX(0xe);
>-	else if (mode == PHY_MODE_2500SGMII)
>+	else if (lane->submode == PHY_INTERFACE_MODE_2500BASEX)
> 		val |= MVEBU_COMPHY_SERDES_CFG0_GEN_RX(0x8) |
> 		       MVEBU_COMPHY_SERDES_CFG0_GEN_TX(0x8) |
> 		       MVEBU_COMPHY_SERDES_CFG0_HALF_BUS;
>-	else if (mode == PHY_MODE_SGMII)
>+	else if (lane->submode == PHY_INTERFACE_MODE_SGMII)
> 		val |= MVEBU_COMPHY_SERDES_CFG0_GEN_RX(0x6) |
> 		       MVEBU_COMPHY_SERDES_CFG0_GEN_TX(0x6) |
> 		       MVEBU_COMPHY_SERDES_CFG0_HALF_BUS;
>@@ -243,7 +245,7 @@ static void mvebu_comphy_ethernet_init_reset(struct mvebu_comphy_lane *lane,
> 	/* refclk selection */
> 	val = readl(priv->base + MVEBU_COMPHY_MISC_CTRL0(lane->id));
> 	val &= ~MVEBU_COMPHY_MISC_CTRL0_REFCLK_SEL;
>-	if (mode == PHY_MODE_10GKR)
>+	if (lane->submode == PHY_INTERFACE_MODE_10GKR)
> 		val |= MVEBU_COMPHY_MISC_CTRL0_ICP_FORCE;
> 	writel(val, priv->base + MVEBU_COMPHY_MISC_CTRL0(lane->id));
> 
>@@ -261,8 +263,7 @@ static void mvebu_comphy_ethernet_init_reset(struct mvebu_comphy_lane *lane,
> 	writel(val, priv->base + MVEBU_COMPHY_LOOPBACK(lane->id));
> }
> 
>-static int mvebu_comphy_init_plls(struct mvebu_comphy_lane *lane,
>-				  enum phy_mode mode)
>+static int mvebu_comphy_init_plls(struct mvebu_comphy_lane *lane)
> {
> 	struct mvebu_comphy_priv *priv = lane->priv;
> 	u32 val;
>@@ -303,13 +304,13 @@ static int mvebu_comphy_init_plls(struct mvebu_comphy_lane *lane,
> 	return 0;
> }
> 
>-static int mvebu_comphy_set_mode_sgmii(struct phy *phy, enum phy_mode mode)
>+static int mvebu_comphy_set_mode_sgmii(struct phy *phy)
> {
> 	struct mvebu_comphy_lane *lane = phy_get_drvdata(phy);
> 	struct mvebu_comphy_priv *priv = lane->priv;
> 	u32 val;
> 
>-	mvebu_comphy_ethernet_init_reset(lane, mode);
>+	mvebu_comphy_ethernet_init_reset(lane);
> 
> 	val = readl(priv->base + MVEBU_COMPHY_RX_CTRL1(lane->id));
> 	val &= ~MVEBU_COMPHY_RX_CTRL1_CLK8T_EN;
>@@ -330,7 +331,7 @@ static int mvebu_comphy_set_mode_sgmii(struct phy *phy, enum phy_mode mode)
> 	val |= MVEBU_COMPHY_GEN1_S0_TX_EMPH(0x1);
> 	writel(val, priv->base + MVEBU_COMPHY_GEN1_S0(lane->id));
> 
>-	return mvebu_comphy_init_plls(lane, PHY_MODE_SGMII);
>+	return mvebu_comphy_init_plls(lane);
> }
> 
> static int mvebu_comphy_set_mode_10gkr(struct phy *phy)
>@@ -339,7 +340,7 @@ static int mvebu_comphy_set_mode_10gkr(struct phy *phy)
> 	struct mvebu_comphy_priv *priv = lane->priv;
> 	u32 val;
> 
>-	mvebu_comphy_ethernet_init_reset(lane, PHY_MODE_10GKR);
>+	mvebu_comphy_ethernet_init_reset(lane);
> 
> 	val = readl(priv->base + MVEBU_COMPHY_RX_CTRL1(lane->id));
> 	val |= MVEBU_COMPHY_RX_CTRL1_RXCLK2X_SEL |
>@@ -469,7 +470,7 @@ static int mvebu_comphy_set_mode_10gkr(struct phy *phy)
> 	val |= MVEBU_COMPHY_EXT_SELV_RX_SAMPL(0x1a);
> 	writel(val, priv->base + MVEBU_COMPHY_EXT_SELV(lane->id));
> 
>-	return mvebu_comphy_init_plls(lane, PHY_MODE_10GKR);
>+	return mvebu_comphy_init_plls(lane);
> }
> 
> static int mvebu_comphy_power_on(struct phy *phy)
>@@ -479,7 +480,8 @@ static int mvebu_comphy_power_on(struct phy *phy)
> 	int ret, mux;
> 	u32 val;
> 
>-	mux = mvebu_comphy_get_mux(lane->id, lane->port, lane->mode);
>+	mux = mvebu_comphy_get_mux(lane->id, lane->port,
>+				   lane->mode, lane->submode);
> 	if (mux < 0)
> 		return -ENOTSUPP;
> 
>@@ -492,12 +494,12 @@ static int mvebu_comphy_power_on(struct phy *phy)
> 	val |= mux << MVEBU_COMPHY_SELECTOR_PHY(lane->id);
> 	regmap_write(priv->regmap, MVEBU_COMPHY_SELECTOR, val);
> 
>-	switch (lane->mode) {
>-	case PHY_MODE_SGMII:
>-	case PHY_MODE_2500SGMII:
>-		ret = mvebu_comphy_set_mode_sgmii(phy, lane->mode);
>+	switch (lane->submode) {
>+	case PHY_INTERFACE_MODE_SGMII:
>+	case PHY_INTERFACE_MODE_2500BASEX:
>+		ret = mvebu_comphy_set_mode_sgmii(phy);
> 		break;
>-	case PHY_MODE_10GKR:
>+	case PHY_INTERFACE_MODE_10GKR:
> 		ret = mvebu_comphy_set_mode_10gkr(phy);
> 		break;
> 	default:
>@@ -517,10 +519,17 @@ static int mvebu_comphy_set_mode(struct phy *phy,
> {
> 	struct mvebu_comphy_lane *lane = phy_get_drvdata(phy);
> 
>-	if (mvebu_comphy_get_mux(lane->id, lane->port, mode) < 0)
>+	if (mode != PHY_MODE_ETHERNET)
>+		return -EINVAL;
>+
>+	if (submode == PHY_INTERFACE_MODE_1000BASEX)
>+		submode = PHY_INTERFACE_MODE_SGMII;
>+
>+	if (mvebu_comphy_get_mux(lane->id, lane->port, mode, submode) < 0)
> 		return -EINVAL;
> 
> 	lane->mode = mode;
>+	lane->submode = submode;
> 	return 0;
> }
> 



-- 
Maxime Chevallier, Bootlin
Embedded Linux and kernel engineering
https://bootlin.com
