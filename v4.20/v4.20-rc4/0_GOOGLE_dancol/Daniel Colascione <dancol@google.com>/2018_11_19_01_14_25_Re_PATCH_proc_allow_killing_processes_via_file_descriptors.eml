Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 20 Nov 2018 00:28:21 -0000
Received: from icoremail.net (unknown [209.85.210.173])
	by mail-app2 (Coremail) with SMTP id by_KCgDXv9KPDvJbsJq0AQ--.53740S3;
	Mon, 19 Nov 2018 09:14:55 +0800 (CST)
Received: from mail-pf1-f173.google.com (unknown [209.85.210.173])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwB3XUmLDvJbNQBUAA--.19340S3;
	Mon, 19 Nov 2018 09:14:51 +0800 (CST)
Received: by mail-pf1-f173.google.com with SMTP id q1so5996079pfi.5
        for <xuliker@zju.edu.cn>; Sun, 18 Nov 2018 17:14:51 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:mime-version
         :in-reply-to:references:from:date:message-id:subject:to:cc:sender
         :precedence:list-id;
        bh=pqdz3qt5+8c+QF9jBJATRrusibJ0aQtAU8JPX+VSrxk=;
        b=jtEqIr7jiJXEWzbf/y8Kf5WPWcUjBpY8RV5fpGaY6edIGjjlZKGJTaMt/zcUEw3KD6
         ac6gUJ3t9SNTqFVJQ6viZaTQJf8jTg+p5MChge4HX0eor2qGEED9f8n6Ykrqv8+eHsvl
         E6UM49aP1NUzeKycitJUNVAUt+qZ2zVEsWDseucez9Lp8f6eEN4T4TE18HX61EI9HCUY
         QeiD1+q2riDpph2vPxauSlmTLxOqW2M46RC7tNJooB67yIMtBMm/NFAXIu8soMXUXlf2
         cLbAcoO0DOFduNkiGXG9eAAtC7GZXPBZNwG6WOZPdgk/3+FarJ9AhMRl/DpWMqQmBPkl
         UUfA==
X-Gm-Message-State: AGRZ1gIsntuNOT3nGbK7RFwCJ30hhnX70KXxBwjyuPDLZZmeCysrcFzp
	roIPd2TFon1EhV7qZdh8RzOgFLBNiF+wzV2i0bXYeABIF/J8B+I=
X-Received: by 2002:a63:fd53:: with SMTP id m19mr18664845pgj.340.1542590091137;
        Sun, 18 Nov 2018 17:14:51 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp2068966pju;
        Sun, 18 Nov 2018 17:14:50 -0800 (PST)
X-Google-Smtp-Source: AJdET5dHIT9XuFYmJkIa/6WSRzzKEBJRXhjp+UvcpbS7rIZhwJ6wdrxqDDL/9j8jdjZvX/lF1K+Z
X-Received: by 2002:a62:292:: with SMTP id 140-v6mr21406968pfc.16.1542590089974;
        Sun, 18 Nov 2018 17:14:49 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542590089; cv=none;
        d=google.com; s=arc-20160816;
        b=mp+PhyuF7Gol4Jt2mPlakTUmpeH6hhEAFWHrFppdqdGZjc39Q4c6u5IZdlfpeGeLAC
         zTf8rm6sP3cbl4Mzc+DWPNmP8OwNYNfqUVVsbpwv5AJvlACVP2kGWwaFKCbZVIhvsVAi
         +ddwsZI3FE8PKDqvMezFnZhAqqUklYbzJi7VrpTvgmMlSrfToS4aR1QwqXkwcsBgHoRr
         nCBdwiHFm0jzs/JMDWoj/RV5zu28rfPiriyBzfQy9EITA9PUlYSjw9ZyOMXNTXoPJ34t
         5gUJhebgbyYiGaEzG4iIQv3Fsixzwhxctu34B3ThFCKAw7X13hsuqqEe7h6q8BLF4WW4
         hjZw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:cc:to:subject:message-id:date:from
         :references:in-reply-to:mime-version:dkim-signature;
        bh=pqdz3qt5+8c+QF9jBJATRrusibJ0aQtAU8JPX+VSrxk=;
        b=i15yFqqr7a5wPVvHJGSv14AOd2JyffMOdXNf8G64+a6WhjED00kmEOjkh79ZYMQ5YO
         qiYOP/AkodKGz0HHPQN5/pvbklWi1YAkziGmI2iGTIQeKI0Hgye28lOH84SnSXDu5N0p
         3UATcurZM/uktJTeM1yMmWy/OwxTc/06N3qaPDCgg1RTdJtznmJLuIEmeQ6FPpE+17Ay
         YSfop5iKNWeEbAG73UykCv3AVn8NwefNuO1fSKn5y90sMFxtQ9P/lVzx6PQrnIWSwhdC
         3utKwFl2Lr8sMwPTdglSdLlvAEQ95lkAk7AMJ8+VjUHLvBXoQZcfS05C0LReen09XPnm
         u9fw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@google.com header.s=20161025 header.b=VewVnrcG;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=google.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id v1-v6si5089097pfm.71.2018.11.18.17.14.35;
        Sun, 18 Nov 2018 17:14:49 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727033AbeKSLgZ (ORCPT <rfc822;piyush.popli@gmail.com>
        + 99 others); Mon, 19 Nov 2018 06:36:25 -0500
Received: from mail-vs1-f65.google.com ([209.85.217.65]:34847 "EHLO
        mail-vs1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725947AbeKSLgY (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 19 Nov 2018 06:36:24 -0500
Received: by mail-vs1-f65.google.com with SMTP id e7so16836895vsc.2
        for <linux-kernel@vger.kernel.org>; Sun, 18 Nov 2018 17:14:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=pqdz3qt5+8c+QF9jBJATRrusibJ0aQtAU8JPX+VSrxk=;
        b=VewVnrcGBqgJqdsNOHS3WDia6h78KGCatzthPtfrklMtuSZ4hpLeWF6UcRaejV1e8k
         mvsrEYSYBtUwfmOqMxuC3idHH3s93Nf1UzscOWEZPsToQBuu/t0S3+xhEg4y4T+8qEF6
         kdGvSrQwOkDKpw1arNwTc8pQ9RsCs3HikduD12UoS4j9bCj4TWylR6vujJWZJc2XCxvu
         T8nS8n/hbrL0t76FyuhNIW/ge+SGaN0p8hyvKraQ0fAazWuTI6TnVp7BOmWdpMzNRxo8
         b7Vx1noOeu4aSYlOMqJ/EBsXml0yBZ3XNT+dGKUtjnkOxeCyup0BIYrXBsZrKLHw6Liq
         gE1A==
X-Received: by 2002:a67:105:: with SMTP id 5mr8103366vsb.183.1542590067404;
 Sun, 18 Nov 2018 17:14:27 -0800 (PST)
MIME-Version: 1.0
Received: by 2002:a67:f48d:0:0:0:0:0 with HTTP; Sun, 18 Nov 2018 17:14:25
 -0800 (PST)
In-Reply-To: <20181119000857.rnkuqdpmcutrwtem@yavin>
References: <20181118111751.6142-1-christian@brauner.io> <CAKOZuet3s0WxxPgrtrNkq8YiOWhYAiK6yEio6PKVV9J_H4_TSA@mail.gmail.com>
 <CALCETrUd2Y2MmO8Qx8aUvQDOTNiyj35Y7bctPBZe0p2i1EUiLw@mail.gmail.com>
 <20181118174148.nvkc4ox2uorfatbm@brauner.io> <CAKOZueto1CmUSWFKjOkazcDcZH6CiXXCr4U=ghewLh8GjE2-=A@mail.gmail.com>
 <20181119000857.rnkuqdpmcutrwtem@yavin>
From: Daniel Colascione <dancol@google.com>
Date: Sun, 18 Nov 2018 17:14:25 -0800
Message-ID: <CAKOZueuBwZyof72j4=L2_uwF+AWYWZOgCBz4DNq6z_rdAYybZg@mail.gmail.com>
Subject: Re: [PATCH] proc: allow killing processes via file descriptors
To: Aleksa Sarai <cyphar@cyphar.com>
Cc: Christian Brauner <christian@brauner.io>,
        Andy Lutomirski <luto@kernel.org>,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        LKML <linux-kernel@vger.kernel.org>,
        "Serge E. Hallyn" <serge@hallyn.com>, Jann Horn <jannh@google.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Oleg Nesterov <oleg@redhat.com>,
        Al Viro <viro@zeniv.linux.org.uk>,
        Linux FS Devel <linux-fsdevel@vger.kernel.org>,
        Linux API <linux-api@vger.kernel.org>,
        Tim Murray <timmurray@google.com>,
        Kees Cook <keescook@chromium.org>,
        David Howells <dhowells@redhat.com>
Content-Type: text/plain; charset="UTF-8"
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwB3XUmLDvJbNQBUAA--.19340S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3XF15ZFyUAw4kCF4fXw43ZFb_yoW3Gw1fpF
	WUKayI9F4kGF12y3s2qw40qFyrAr1xJFW3ArnxCry8Awn8AF1IqryfKr1Y9a4DCrs5Ca1j
	qrWFqrZrua9rZFJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUPvb7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Xr0_Ar1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26r1j6r4UMcvjeVCFs4IE7xkEbVWUJVW8JwCjxxvEa2IrMxkF7I
	0Ew4C26cxK6c8Ij28IcwCY1Ik26cxK6xAEc7vF6xCjj44lc2xSY4AK6IIF6w4lc2IjII80
	xcxEwVAKI48JMxvI42IY6xIIjxv20xvE14v26r4j6ryUMxvI42IY6xIIjxv20xvEc7CjxV
	AFwI0_Gr0_Cr1lcIIF0xvEx4A2jsIE14v26r4UJVWxJr1lcIIF0xvEx4A2jsIEc7CjxVAF
	wI0_Gr1j6F4UJwCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77
	IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwCFI7km07C267AKxVWUXVWUAwC20s026c02F40E
	14v26r1j6r18MI8I3I0E7480Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_GFv_WrylIx
	kGc2Ij64vIr41lIxAIcVCF04k26cxKx2IYs7xG6Fyj6rWUJbIYCTnIWIevJa73UjIFyTuY
	vjxUQNJ5DUUUU

On Sun, Nov 18, 2018 at 4:08 PM, Aleksa Sarai <cyphar@cyphar.com> wrote:
> On 2018-11-18, Daniel Colascione <dancol@google.com> wrote:
>> > The gist is to have file descriptors for processes which is obviously not a new
>> > idea. This has been done before in other OSes and it has been tried before in
>> > Linux [2], [3] (Thanks to Kees for pointing out these patches.). So I want to
>> > make it very clear that I'm not laying claim to this being my or even a novel
>> > idea in any way. However, I want to diverge from previous approaches with my
>> > suggestion. (Though I can't be sure that there's not something similar in other
>> > OSes already.)
>>
>> Windows works basically as you describe. You can create a process is
>> suspended state, configure it however you want, then let it run.
>> CreateProcess (and even moreso, NtCreateProcess) also provide a rich
>> (and *extensible*) interface for pre-creation process configuration.
>>
>> >> One of the main motivations for having procfds is to have a race-free way of
>> > configuring, starting, polling, and killing a process. Basically, a process
>> > lifecycle api if you want to think about it that way. The api should also be
>> > easily extendable in the future to avoid running into the limitations we
>> > currently see with the clone*() syscall(s) again.
>> >
>> > One of the crucial points of the api is to *separate the configuration
>> > of a process through a procfd from actually creating the process*.
>> > This is a crucial property expressed in the open*() system calls. First, get a
>> > stable handle on an object then allow for ways to configure it. As such the
>> > procfd api shares the same insight with Al's and David's new mount api.
>> > (Fwiw, Andy also pointed out similarities with posix_spawn().)
>> > What I envisioned was to have the following syscalls (multiple name suggestions):
>> >
>> > 1. int process_open / proc_open / procopen
>> > 2. int process_config / proc_config / procconfig or ioctl()-based
>> > 3. int process_info / proc_info / procinfo or ioctl()-based
>> > 4. int process_manage / proc_manage / procmanage or ioctl()-based
>>
>> The API you've proposed seems fine to me, although I'd either 1)
>> consolidate operations further into one system call, or 2) separate
>> the different management operations into more and different system
>> calls that can be audited independently. The grouping you've proposed
>> seems to have the worst aspects of API splitting and API multiplexing.
>> But I have no objection to it in spirit.
>
> I think combining it all into one API is going to be a soft re-invention
> of ioctls, but specifically for procfds. This would be an improvement
> over just ioctls (since the current ioctl namespacing is based on
> well-behaved drivers and hoping we never have more than 256 ioctl
> drivers), but I'm not sure it would help make the API nicer than having
> separate syscalls (we'd have to do something similar to bpf(2) which I'm
> not a huge fan of).

Right. Multiplexers are nothing new, and I'm not a huge fan of them.
From an API design perspective, having a bunch of different system
calls is probably best.

 (I do wonder what happens to system call cache behavior once the
top-level system call table becomes huge though.)

>> That said, while I do want to fix process configuration and startup
>> generally, I want to fix specific holes in the existing API surface
>> first. The two patches I've already sent do that, and this work
>> shouldn't wait on an ideal larger process-API overhaul that may or may
>> not arrive. Based on previous history, I suspect that an API of the
>> scope you're proposing would take years to overcome all LKML
>> objections and land. I don't want to wait that long when we can make
>> smaller fixes that would not conflict with the general architecture.
>
> I believe this is precisely what Christian is trying to do with this
> patch (and you say as much later in your mail).
>
> I think that adding all of {sighand,sighand_exitcode,kill,...} would not
> help the path of landing a much larger API change. We should instead
> think about the API we want at the end of the day, and then land smaller
> changes which are long-term compatible (and won't just become deprecated
> APIs -- there's far too many of them, let's not add more needlessly).

I don't think we need to reach consensus on some long-term design to
address specific problems that we know today. The changes we're
talking about here *are* long-term compatible with a bigger process
API overhaul. They may or may not be *part* of that solution, but I
don't see them making that solution harder either. And the proposals
so far all seem to go in the right direction.

>> Next, I want to merge my exithand proposal, or something like it. It's
>> likewise a simple change that, in a minimal way, addresses a
>> longstanding API deficiency. I'm very strongly against the
>> POLLERR-on-directory variant of the idea.
>
> I agree with you on this need. I will admit I do somewhat like the EOF
> solution (mainly because it seamlessly deals with the multi-reader case)
> but I'm still not sure I like /proc/$pid/exit_sighand. As mentioned in
> the other discussion, ideally we would be only ever operating with the

This sentence got cut off.

> An ugly strawman of an alternative would be an interface that gave you
> an fd that you could similarly wait-until-EOF on, but that's probably
> not a major API improvement unless we also make said API provide exit
> status information in a way that works with the
> multiple-readers-with-different-creds usecase.

What about something like this then?

#define PROCESS_EXIT_HANDLE_CLOEXEC (1<<0)
#define PROCESS_EXIT_HANDLE_NONBLOCK (1<<1)
#define PROCESS_EXIT_HANDLE_WANT_STATUS (1<<2)

/* Open an "status handle" for the process identified by PROCFS_DFD,
 * which must be an open descriptor to a /proc/pid directory. FLAGS is
 * a combination of zero or more of the
 * PROCESS_EXIT_HANDLE_* constants.
 *
 * Return -1 on error. On success, return a descriptor for a process
 * status handle. Before the process identified by PROCFS_DFD exits,
 * reads from the status handle block. After exit, reads from the
 * status handle yield either EOF (if PROCESS_EXIT_HANDLE_WANT_STATUS
 * is not specified) or a siginfo_t describing how the process exited
 * (if PROCESS_EXIT_HANDLE_WANT_STATUS is specified), as from
 * waitid(2).
 *
 * The returned file descriptor also supports poll(2) and other
 * notification APIs.
 *
 * Any process may call process_get_statusfd from any PROCFS_DFD
 * without PROCESS_EXIT_HANDLE_WANT_STATUS.
 * If PROCESS_EXIT_HANDLE_WANT_STATUS is specified, PROCFS_DFD must
 * refer either to the calling process (or one of its threads), a
 * child of the current process, or a process for which the current
 * process would be able to successfully call ptrace(2).
 *
 * The PROCESS_EXIT_HANDLE_WANT_STATUS permission check happens only
 * at open time, not at read time, and the process handle can be
transferred like any other FD.
 */
int process_get_statusfd(int procfs_dfd, int flags);

> One other thing I think we should eventually consider is to provide an
> API which pings a listener whenever a process does an execve() (and
> possibly fork()).

I thought about providing this facility too, but it's not immediately
apparent to me who would use it. ISTM that most callers that would
want this would be happy grabbing the process with ptrace or passively
monitoring it with ftrace or the process connector.
