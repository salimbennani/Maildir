Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 22 Nov 2018 21:39:54 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5539558037D;
	Thu, 22 Nov 2018 04:16:34 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 22 Nov 2018 04:16:33 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7dxLdBYR/m2BfnCGezyD1AL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm+bR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzFPDJ2y?=
 =?us-ascii?q?b4UPDOQPM+hXoIb/qFQSohW+BBKsBPvtxzJTmn/737c33/g9HQzI3AEtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSf64zKnSwjXEcvhZ2yr945XPfxEhvPGDQbJwftDWyUUzDA7FjkiQ?=
 =?us-ascii?q?ppbrPjyL1+QBqXSU7+1lVe+2jWMstgJ/oiC3y8syloXEgpgZxk3K+Cln2oo5ON?=
 =?us-ascii?q?61RFJhbdOlEpZcrzyWO5dsTs8/TWxltzw2xqMYtZKhYSQHzJQqywbQZvGHaYSE?=
 =?us-ascii?q?/B3uWeKLLTtmmX5pZqizihis/UWm1+byTNO70ExQoSpAitTMtm4C1xjU6sWfVP?=
 =?us-ascii?q?t98Vmu2SyV2wDQ9O5EO0Y0mrTfK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWs?=
 =?us-ascii?q?8ejrf7vrqoGGO4NpiQzyLr4il829DOggNwgBRWmb+eCy1L35+k35Ra1Hjvk3kq?=
 =?us-ascii?q?nfrZDbKt0Xpq2nDA9P1IYs9RK/Ay6h0NUWm3kIMkhFdQmZj4jmJV7OOur0DfSh?=
 =?us-ascii?q?jFS2ljdk2fTGMqfmApXXIXjPiK3hcqpl605A1AozyshS55ZVCrECPv3/QEDwtM?=
 =?us-ascii?q?HDAx89Mgy0xfvnCdpn2oMfX2KPHrGWMKfIvVCU4eIvJvGGZJUJtzblN/gl+/nu?=
 =?us-ascii?q?gGc5mVAHfKmpwYEYaHeiEvRmPkWWe3zsgtgaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ5ingKad0yejAp1WemdGB0iOEXfvaYqIQfQMaCWUIs9nlTwJ?=
 =?us-ascii?q?TryhS44n1RGzuw720btnLuzI+iIGsZLvzsR65+rWlRsq7zx7E9yd032RT2Fzhm?=
 =?us-ascii?q?4HXSQ23KB4oUx+0FuDy7J3g/5DGNxX5vNJVBo6NJHGw+x7DdDyRhzOftOTRFm6?=
 =?us-ascii?q?RdWmBCk7TsgtzN8Wf0Z9B9KigwjA3yWwBb8ZjbiLBJ0u/aLa0Hj8PMJ9y3fA1K?=
 =?us-ascii?q?k8gFgqWMpPNWu6hqFh8wjfHZLGk0Kcl6yyb6QTwDbN9HufzWqJpExXTRR/Ubvb?=
 =?us-ascii?q?UnwFZkvZt9L55ljcQL+oDrgnNghBycuGKqZRbt3pjFNGROrsOdjEYmKxnXuwCg?=
 =?us-ascii?q?iMxr+WcIXqfGAd1j3HCEcYiwAT4WqGNQ8mCyi8uW3eEiJhGUjvY0z29+l+s220?=
 =?us-ascii?q?TkkvwgGObk1h0ae1+xEPifydTfMTwqwLuCM7pzpoG1a92srcC8CcqAp5YKVcfd?=
 =?us-ascii?q?Q97U9b1WLYsgx9OYCgL6Bih1IEbwR7pUTu1w9zCoVBl8gqo2gnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDlAt83F53NhazX?=
 =?us-ascii?q?Sd5o/GAxEPUZ3sSEk38Rt6p7bEYiQm44PU1HtsMbS7szPY2tIpAvclxQikf9tF?=
 =?us-ascii?q?LKyEEwryGdUAB8eyMOwqh0SpbhUcMeFS6a44Jd+pe+GH2a6rJulgmj2mgH9D4I?=
 =?us-ascii?q?B81EKM6iV9RvTJ35YD3/GXwA+HWy3gg1emt8D9gZpEai0KHmqj1SjkA5ZcZrdz?=
 =?us-ascii?q?fYkXE2iuOdC4xtJki57rRXFY7l+jC0oa18CzfRqdckLy3RdX1UQRunGnnSq4zz?=
 =?us-ascii?q?ppkzAmtKaf3SrOw/j8exoDIGJEWG5ijVL0K4iuk98aRFSobxQulBa95Uf6xrJX?=
 =?us-ascii?q?paRlI2nIXEdIeTP7L2VjUqu2q7qDbNRD6JIusSVLTuu8ZUqWRaL6oxsfyynjBX?=
 =?us-ascii?q?dRxCgndzG2vZX0hx56h3iHLHZwr3rZftt8xQzF69zfRv5R3zwGSzd+iTTMAli8?=
 =?us-ascii?q?Pt+p/ciblpvZs+C+UX6hWYNXcSXx0YyAsy6773VwARKjh/CzhsHnEQ8i3C77zd?=
 =?us-ascii?q?ZqUj/ErBT9YontzKm6NeNnfk91BF7z8cZ6G4d+kpcui5EUw3QVmpKV/X8fm2fp?=
 =?us-ascii?q?Ldpbwb7+bGYKRTMTwN7a+gnl1FdjLnKU3Y35UHqdz9BlZ9m7ZGMWxy0849pLCK?=
 =?us-ascii?q?eS8LxLgy91rkCkogLWZPh3hi0dxuc26H4Gn+EJvxIgziCcArARB0ZUJyLtmAqT?=
 =?us-ascii?q?79CisqpXfn2gfqaq1Epxht2hCLCCogdBWHf2YJsiHClw7tlhP1LIynH89obkeN?=
 =?us-ascii?q?zIZ9IJqhKUiwvAj/RSKJ8pivoKgi9nNXj8vHI/ze47kAdu3Yq7vIWcL2Vt/aS5?=
 =?us-ascii?q?AgNXNzHvZsMT/C3tgrhansqMw4+vGZBhEC0RXJT0VfKoDC4StfP/OgmVCjI8rX?=
 =?us-ascii?q?ObGafFEQ+b9UdrtHbPE5GtN3GKK3gV19RiRB+BJENBhAAYRik1npk8Fgqy3szu?=
 =?us-ascii?q?bF955iwN5l7/shZMyPhnNxzhXWfEvguodi04SJuCLBpV8wFC4V3aMdeF4+J3Hi?=
 =?us-ascii?q?FY+IChrQOXJmyaYQRIEX8GWkieC1//Obmu4MHK8/KECeqmM/vOfbKOpPReVveP?=
 =?us-ascii?q?2JKvy5Zm8CyKNsmVJXliCPs72kVYUHB9GsTZnSgPSiMNmyLMac6buAmz+iltos?=
 =?us-ascii?q?+j9/TrXRrl5ZGTBLtKLdVv5xe2jL+DN+GOhSZ5KjVY1pIWyX/L0rgf21EShD90?=
 =?us-ascii?q?dzmwCrQNrirNTKPWmq9KAB8XcSJzNM1U760i2glBI9LUitTw1rRglP46F09FVU?=
 =?us-ascii?q?D9msGufcEFOXy9O0jdBEmVNLWKPznLw8DsbKO4SL1QivhUthKqtTaaFU/jIiqM?=
 =?us-ascii?q?lz3zWx+zNuFMiTmRPAZCt4GlbhZtFW/jQcr6ah26Nd97lyE5zacoiXPKK2EcNy?=
 =?us-ascii?q?Nxc0dMrr2W8CNZje9zG21H7np5M+aEnzyV4PXfKpYTqfFrGDh7l/pG4HQmzLtY?=
 =?us-ascii?q?9CFFS+ZzmCvXr95upUmpk+iPyjV9VhpOpS1GhIaKvUVkJKXY+YNMWXfC/BIR82?=
 =?us-ascii?q?qQDw4GqMdiCt3q6OhszY30naLyNCZLu+7J+M4VA8GcfNmbLX8kOB7gMDXTAAYM?=
 =?us-ascii?q?UCSsL2iZgFZSxrXa1HSYoZUnqdDPmZ9GHr1SWVM4C/AyCUl/GtEGZpBtUWVg2e?=
 =?us-ascii?q?qfjcgV9T+w9hfKAclXoJ3DfvaTGun0bi2ekKNPahUP27z1a4IeKtuo9VZlbwxR?=
 =?us-ascii?q?nI3NU3vNFYRcvyZhZwhsiEVQ+WdzTys43EezOVDl22MaCfPhxk1+sQB5e+l4sW?=
 =?us-ascii?q?60u1o=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AlAAA2nfZbh0O0hNFiHgEGBwaBUQkLA?=
 =?us-ascii?q?YJsfycKmAeBaCUUlyYUgV8sEwGIUSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I?=
 =?us-ascii?q?2JAGCYQEBAQECAQECJFIGCQEBCg4KLgNUBgEMAQUCAQEBgxyBeggFqwozhUCEZ?=
 =?us-ascii?q?4wJghaBOAyCX4RjA4VRIgKBKgGOMTOPcwYDDZEcBhiJYYcnkU+IJ4INcFCBHoF?=
 =?us-ascii?q?OgicXjikyAQExgQQBAQEOik+BLYEfAQE?=
X-IPAS-Result: =?us-ascii?q?A0AlAAA2nfZbh0O0hNFiHgEGBwaBUQkLAYJsfycKmAeBaCU?=
 =?us-ascii?q?UlyYUgV8sEwGIUSI0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECA?=
 =?us-ascii?q?QECJFIGCQEBCg4KLgNUBgEMAQUCAQEBgxyBeggFqwozhUCEZ4wJghaBOAyCX4R?=
 =?us-ascii?q?jA4VRIgKBKgGOMTOPcwYDDZEcBhiJYYcnkU+IJ4INcFCBHoFOgicXjikyAQExg?=
 =?us-ascii?q?QQBAQEOik+BLYEfAQE?=
X-IronPort-AV: E=Sophos;i="5.56,265,1539673200"; 
   d="scan'208";a="63569497"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 22 Nov 2018 04:16:32 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2390904AbeKVWzh (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 22 Nov 2018 17:55:37 -0500
Received: from szxga06-in.huawei.com ([45.249.212.32]:46062 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1732390AbeKVWzh (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 22 Nov 2018 17:55:37 -0500
Received: from DGGEMS403-HUB.china.huawei.com (unknown [172.30.72.58])
        by Forcepoint Email with ESMTP id 04F1CAACC4862;
        Thu, 22 Nov 2018 20:16:21 +0800 (CST)
Received: from [127.0.0.1] (10.134.22.195) by DGGEMS403-HUB.china.huawei.com
 (10.3.19.203) with Microsoft SMTP Server id 14.3.408.0; Thu, 22 Nov 2018
 20:16:17 +0800
Subject: Re: [PATCH 2/2] f2fs: fix memory leak of quota files extent tree and
 it's nodes
To: Sahitya Tummala <stummala@codeaurora.org>,
        Jaegeuk Kim <jaegeuk@kernel.org>,
        <linux-f2fs-devel@lists.sourceforge.net>
CC: <linux-kernel@vger.kernel.org>
References: <1542884360-19470-1-git-send-email-stummala@codeaurora.org>
 <1542884360-19470-2-git-send-email-stummala@codeaurora.org>
From: Chao Yu <yuchao0@huawei.com>
Message-ID: <47e3b4e7-c1a6-f130-5765-d212ac9de367@huawei.com>
Date: Thu, 22 Nov 2018 20:16:15 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <1542884360-19470-2-git-send-email-stummala@codeaurora.org>
Content-Type: text/plain; charset="windows-1252"
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.134.22.195]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/11/22 18:59, Sahitya Tummala wrote:
> When there is a failure in f2fs_fill_super() after the quota is
> enabled, then f2fs_quota_off_umount() is called in the error handling.
> Then sbi is freed up and f2fs_fill_super() retries again.
> But f2fs_quota_off_umount() doesn't guarantee that quota file's extent
> tree/nodes are removed/freed. It will just add to sbi->zombie_list,
> if those files are referenced. In the next retry, quota is enabled
> again with the new extent tree and nodes, causing memory leak for the
> previously allocated memory.
> 
> Fix this by cleaning up the sbi->zombie_list before freeing sbi and
> before the next retry.

I guess we can fix this issue with the same way as the comment I add in
your previous patch, how do you think?

Thanks,

> 
> Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
> ---
>  fs/f2fs/extent_cache.c | 21 +++++++++++++++++++++
>  fs/f2fs/f2fs.h         |  1 +
>  fs/f2fs/super.c        |  5 +++++
>  3 files changed, 27 insertions(+)
> 
> diff --git a/fs/f2fs/extent_cache.c b/fs/f2fs/extent_cache.c
> index 763ba83..c2bcd88 100644
> --- a/fs/f2fs/extent_cache.c
> +++ b/fs/f2fs/extent_cache.c
> @@ -629,6 +629,27 @@ static void f2fs_update_extent_tree_range(struct inode *inode,
>  		f2fs_mark_inode_dirty_sync(inode, true);
>  }
>  
> +void f2fs_cleanup_zombie_list(struct f2fs_sb_info *sbi)
> +{
> +	struct extent_tree *et, *next;
> +
> +	mutex_lock(&sbi->extent_tree_lock);
> +	list_for_each_entry_safe(et, next, &sbi->zombie_list, list) {
> +		if (atomic_read(&et->node_cnt)) {
> +			write_lock(&et->lock);
> +			__free_extent_tree(sbi, et);
> +			write_unlock(&et->lock);
> +		}
> +		f2fs_bug_on(sbi, atomic_read(&et->node_cnt));
> +		list_del_init(&et->list);
> +		radix_tree_delete(&sbi->extent_tree_root, et->ino);
> +		kmem_cache_free(extent_tree_slab, et);
> +		atomic_dec(&sbi->total_ext_tree);
> +		atomic_dec(&sbi->total_zombie_tree);
> +	}
> +	mutex_unlock(&sbi->extent_tree_lock);
> +}
> +
>  unsigned int f2fs_shrink_extent_tree(struct f2fs_sb_info *sbi, int nr_shrink)
>  {
>  	struct extent_tree *et, *next;
> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
> index db8a919..6807815 100644
> --- a/fs/f2fs/f2fs.h
> +++ b/fs/f2fs/f2fs.h
> @@ -3419,6 +3419,7 @@ void f2fs_update_extent_cache_range(struct dnode_of_data *dn,
>  void f2fs_init_extent_cache_info(struct f2fs_sb_info *sbi);
>  int __init f2fs_create_extent_cache(void);
>  void f2fs_destroy_extent_cache(void);
> +void f2fs_cleanup_zombie_list(struct f2fs_sb_info *sbi);
>  
>  /*
>   * sysfs.c
> diff --git a/fs/f2fs/super.c b/fs/f2fs/super.c
> index f41ac43..521fe3f 100644
> --- a/fs/f2fs/super.c
> +++ b/fs/f2fs/super.c
> @@ -3023,6 +3023,11 @@ void f2fs_cleanup_extent_cache(struct f2fs_sb_info *sbi)
>  
>  	list_for_each_entry_safe(inode, next, &sb->s_inodes, i_sb_list)
>  		f2fs_destroy_extent_tree(inode, true);
> +
> +	f2fs_cleanup_zombie_list(sbi);
> +
> +	f2fs_bug_on(sbi, !list_empty(&sbi->zombie_list));
> +	f2fs_bug_on(sbi, !list_empty(&sbi->extent_list));
>  }
>  
>  static int f2fs_fill_super(struct super_block *sb, void *data, int silent)
> 

