Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 21 Nov 2018 00:39:50 -0000
Received: from icoremail.net (unknown [209.85.210.173])
	by mail-app4 (Coremail) with SMTP id cS_KCgC3f3XZF_RbLTjgAQ--.33798S3;
	Tue, 20 Nov 2018 22:19:06 +0800 (CST)
Received: from mail-pf1-f173.google.com (unknown [209.85.210.173])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwCXeETXF_RbS5BeAA--.839S3;
	Tue, 20 Nov 2018 22:19:03 +0800 (CST)
Received: by mail-pf1-f173.google.com with SMTP id b85so1074357pfc.3
        for <xuliker@zju.edu.cn>; Tue, 20 Nov 2018 06:19:03 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:date:from:to:cc
         :subject:message-id:references:mime-version:content-disposition
         :in-reply-to:user-agent:sender:precedence:list-id;
        bh=JYki+xWxe0rWP6C89Pvnwup76KGz/u9WDhQ1+AsoZxU=;
        b=ihO/Va40tRZl16yrTEVX+yPbXFyibcmyIhNXqt0z+7lqqEuIbfU/BGjGh56w13QCnB
         o36Q8TdgKAFsWfYwU10XDd/ASJLut8L+Rh+llsBJygqZ+8NgG6wB3QjfD2yOcWx6mj2f
         i4WjNQeLZbHoUaAkymX9Zi/10apWft0FORtaoeipQJa3VtXK0Bw9LjgkJJS0o6x+wtD2
         5h6yFg/mCGKwXFzdzprAT8sIgZAsukAGj0OkotC/drf8z7TjPazGntJ3uTMErOpZjfoY
         JjQpobBmyhtwf6i9vPNmLcgXoLx1xGuw69qsdb5xyi8ajMo1hi54YJOFXNZqH7+PgFX6
         FZQQ==
X-Gm-Message-State: AA+aEWZIQRMsgrL5JANPND43e2I1LmJXzuHVGPAut4gZlkZtU6oB9HH2
	MRBECJcNGX3jW523gzHo3gmHNRXqxKDdhi4mTAb0ItX1P7Jv6ko=
X-Received: by 2002:a63:a91a:: with SMTP id u26mr2020657pge.349.1542723543338;
        Tue, 20 Nov 2018 06:19:03 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp657254pju;
        Tue, 20 Nov 2018 06:19:01 -0800 (PST)
X-Google-Smtp-Source: AFSGD/VmHSesnwLb01ph+59ViWJF1L2p56F78RLkgppi3pY2UM/7jxmJKaGg89kfjxLSuUB5Iyy3
X-Received: by 2002:a63:30c8:: with SMTP id w191mr2147955pgw.120.1542723541570;
        Tue, 20 Nov 2018 06:19:01 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542723541; cv=none;
        d=google.com; s=arc-20160816;
        b=dwFITMSw7rhdZ9uWfWglBXvMy+3zN8+DZcQqqPIVU9JiYqN45zttPWR/aO7oI+lQzi
         62YuZkFeZFd6qxgKvlM8k0YUSuLQic59iSEMt7qjRZDbgEj9M7G38F6Hob1LoAId83hq
         Tiu32zt87GgpbHsxj8lRlvWrQJ0iChAhtKT7gOrLm52WXXczkAeB4uJZ++qkCB0ztNrV
         KYfmq61UBeR1plKBKDb5fxGKUr5cnWfhNLreLS+/jlXq/LXUT4AqUiwUkU9BsYNS4JQp
         BdWXbCGEQlcS33YHKzqv1D3qeSCN0sDDwrZL/rACNfeVBDcDjlTzcboJl43fiI4pZxxy
         o8xw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:user-agent:in-reply-to
         :content-disposition:mime-version:references:message-id:subject:cc
         :to:from:date:dkim-signature;
        bh=JYki+xWxe0rWP6C89Pvnwup76KGz/u9WDhQ1+AsoZxU=;
        b=M8v1PNXjos9gNp0Hkded8YpHiCZ9uOCkG+o1ARMwBM9SaMUtv1lrg0xyb73gBxe9OP
         jDgYV5Js8GWfSC/aG+219L6qDjFoN90PQd2kEeu7pEwCFsaSovNI+MECmZja+jDCd71O
         5zhp38euyug9w8H7mFIHuOXSyP8xLiZGeDsp+DP1pr5yPdv206QgCwcm8tJMJ/qYb2yz
         doNRTO3qDuzEyBPbkLatwuyAH4+DGcTnsegE29M2CXM7ovassQcZIlWUtRwNSamsy4iC
         PiU7zUKAypRpj5at3/J2j6I6LEzGgo+ONUCrHoAbawhKyk/7R1MieTHr1NwuAtHjC/dr
         8E1A==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=fail header.i=@infradead.org header.s=bombadil.20170209 header.b=iK4LFosW;
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id m2si16980349pgh.560.2018.11.20.06.18.47;
        Tue, 20 Nov 2018 06:19:01 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729706AbeKUArZ (ORCPT <rfc822;yv9200@gmail.com> + 99 others);
        Tue, 20 Nov 2018 19:47:25 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:60212 "EHLO
        bombadil.infradead.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726005AbeKUArZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 20 Nov 2018 19:47:25 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
        d=infradead.org; s=bombadil.20170209; h=In-Reply-To:Content-Type:MIME-Version
        :References:Message-ID:Subject:Cc:To:From:Date:Sender:Reply-To:
        Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
        Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
        List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
         bh=JYki+xWxe0rWP6C89Pvnwup76KGz/u9WDhQ1+AsoZxU=; b=iK4LFosWQr9FpOTDFDkqE4Lj+
        JJpyvs+bUxzeQ+9nyMs63h//kJ7HzexiDQ1Q0d2WvyF0WVM1naX+Ru8qX5oP3PiacZY71mGYcLuK7
        vgOrmDrOUteSZiABOH7ViZj0PQlXeR/BWy1gXhUwhxuYZZ0CJWzmaGUMbX9UJpquxs+oaLqV8+PMt
        ekoCg2xCmqomWaP+Ufq/+b2aR4aGXioLY9HwRccmbDJ8yBphcz0J9/ikmI1VhjZGiJfC1FGxizi48
        XTPQcGT3ndOc5Cin+khj7aNvyE8c7+g7SL/KxEfWVH7qtGZCLZt67UuP3iLNxu01S2moxAUcPx8M4
        Ixah16eNw==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100] helo=hirez.programming.kicks-ass.net)
        by bombadil.infradead.org with esmtpsa (Exim 4.90_1 #2 (Red Hat Linux))
        id 1gP6qh-0005Wx-S7; Tue, 20 Nov 2018 14:17:57 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 1000)
        id 4F6452029F87F; Tue, 20 Nov 2018 15:17:54 +0100 (CET)
Date: Tue, 20 Nov 2018 15:17:54 +0100
From: Peter Zijlstra <peterz@infradead.org>
To: Frederic Weisbecker <frederic@kernel.org>
Cc: LKML <linux-kernel@vger.kernel.org>,
        Wanpeng Li <wanpengli@tencent.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Yauheni Kaliuta <yauheni.kaliuta@redhat.com>,
        Ingo Molnar <mingo@kernel.org>, Rik van Riel <riel@redhat.com>
Subject: Re: [PATCH 19/25] sched/vite: Handle nice updates under vtime
Message-ID: <20181120141754.GW2131@hirez.programming.kicks-ass.net>
References: <1542163569-20047-1-git-send-email-frederic@kernel.org>
 <1542163569-20047-20-git-send-email-frederic@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1542163569-20047-20-git-send-email-frederic@kernel.org>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwCXeETXF_RbS5BeAA--.839S3
Authentication-Results: mail-app4; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoWxuFyUWF18CFyUKFy7WF4kZwb_yoWrtFy7pF
	WkC3Z2kw4UJF1jgw1UZws5Zr90gwn5K343Krn8t39Yyrnxtr4S9r15tw17Zr4YvrZ8Zr1a
	qF409F9Fkr1qyrJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUU0bIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUB2b7Iv0xC_Kw4lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Cr0_Gr1UM28EF7xvwVC2
	z280aVAFwI0_GcCE3s1l84ACjcxK6I8E87Iv6xkF7I0E14v26rxl6s0DM2AIxVAIcxkEcV
	Aq07x20xvEncxIr21l5I8CrVACY4xI64kE6c02F40Ex7xfMcIj6xIIjxv20xvE14v26r1Y
	6r17McIj6I8E87Iv67AKxVW8JVWxJwAm72CE4IkC6x0Yz7v_Jr0_Gr1l7I0Y6sxI4wCY1x
	0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW5XwCY0x0I
	x7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcIIF0xvE2Ix0cI8IcVCY1x
	0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_GcCE3s1lcIIF0xvEx4A2jsIEc7CjxVAF
	wI0_GcCE3s1l42xK82IYc2Ij64vIr41l42xK82IY64kExVAvwVAq07x20xyl4x8a6x804x
	Wl4I8I3I0E4IkC6x0Yz7v_Jr0_Gr1lx2IqxVAqx4xG67AKxVWUJVWUGwC20s026x8GjcxK
	67AKxVWUGVWUWwC2zVAF1VAY17CE14v26r1q6r43MIIYrxkI7VAKI48JMIIF0xvE42xK8V
	AvwI8IcIk0rVWUCVW8JbIYCTnIWIevJa73UjIFyTuYvjxUQPxhDUUUU

On Wed, Nov 14, 2018 at 03:46:03AM +0100, Frederic Weisbecker wrote:
> On the vtime level, nice updates are currently handled on context
> switches. When a task's nice value gets updated while it is sleeping,
> the context switch takes into account the new nice value in order to
> later record the vtime delta to the appropriate kcpustat index.

Urgh, so this patch should be folded into the previous one. On their own
neither really makes sense.

> We have yet to handle live updates: when set_user_nice() is called
> while the target is running. We'll handle that on two sides:
> 
> * If the caller of set_user_nice() is the current task, we update the
>   vtime state in place.
> 
> * If the target runs on a different CPU, we interrupt it with an IPI to
>   update the vtime state in place.

*groan*... So what are the rules for vtime updates? Who can do that
when?

So when we change nice, we'll have the respective rq locked and task
effectively unqueued. It cannot schedule at such a point. Can
'concurrent' vtime updates still happen?

> The vtime update in question consists in flushing the pending vtime
> delta to the task/kcpustat and resume the accounting on top of the new
> nice value.

> diff --git a/kernel/sched/core.c b/kernel/sched/core.c
> index f12225f..e8f0437 100644
> --- a/kernel/sched/core.c
> +++ b/kernel/sched/core.c
> @@ -3868,6 +3868,7 @@ void set_user_nice(struct task_struct *p, long nice)
>  	int old_prio, delta;
>  	struct rq_flags rf;
>  	struct rq *rq;
> +	long old_nice;
>  
>  	if (task_nice(p) == nice || nice < MIN_NICE || nice > MAX_NICE)
>  		return;
> @@ -3878,6 +3879,8 @@ void set_user_nice(struct task_struct *p, long nice)
>  	rq = task_rq_lock(p, &rf);
>  	update_rq_clock(rq);
>  
> +	old_nice = task_nice(p);
> +
>  	/*
>  	 * The RT priorities are set via sched_setscheduler(), but we still
>  	 * allow the 'normal' nice value to be set - but as expected
> @@ -3913,6 +3916,7 @@ void set_user_nice(struct task_struct *p, long nice)
>  	if (running)
>  		set_curr_task(rq, p);
>  out_unlock:
> +	vtime_set_nice(rq, p, old_nice);
>  	task_rq_unlock(rq, p, &rf);
>  }

That's not sufficient; I think you want to hook set_load_weight() or
something. Things like sys_sched_setattr() can also change the nice
value.

>  EXPORT_SYMBOL(set_user_nice);
> diff --git a/kernel/sched/cputime.c b/kernel/sched/cputime.c
> index 07c2e7f..2b35132 100644
> --- a/kernel/sched/cputime.c
> +++ b/kernel/sched/cputime.c

> @@ -937,6 +937,33 @@ void vtime_exit_task(struct task_struct *t)
>  	local_irq_restore(flags);
>  }
>  
> +void vtime_set_nice_local(struct task_struct *t)
> +{
> +	struct vtime *vtime = &t->vtime;
> +
> +	write_seqcount_begin(&vtime->seqcount);
> +	if (vtime->state == VTIME_USER)
> +		vtime_account_user(t, vtime, true);
> +	else if (vtime->state == VTIME_GUEST)
> +		vtime_account_guest(t, vtime, true);
> +	vtime->nice = (task_nice(t) > 0) ? 1 : 0;
> +	write_seqcount_end(&vtime->seqcount);
> +}
> +
> +static void vtime_set_nice_func(struct irq_work *work)
> +{
> +	vtime_set_nice_local(current);
> +}
> +
> +static DEFINE_PER_CPU(struct irq_work, vtime_set_nice_work) = {
> +	.func = vtime_set_nice_func,
> +};
> +
> +void vtime_set_nice_remote(int cpu)
> +{
> +	irq_work_queue_on(&per_cpu(vtime_set_nice_work, cpu), cpu);

What happens if you already had one pending? Do we loose updates?

> +}
> +
>  u64 task_gtime(struct task_struct *t)
>  {
>  	struct vtime *vtime = &t->vtime;
> diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
> index 618577f..c7846ca 100644
> --- a/kernel/sched/sched.h
> +++ b/kernel/sched/sched.h
> @@ -1790,6 +1790,45 @@ static inline int sched_tick_offload_init(void) { return 0; }
>  static inline void sched_update_tick_dependency(struct rq *rq) { }
>  #endif
>  
> +static inline void vtime_set_nice(struct rq *rq,
> +				  struct task_struct *p, long old_nice)
> +{
> +#ifdef CONFIG_VIRT_CPU_ACCOUNTING_GEN
> +	long nice;
> +	int cpu;
> +
> +	if (!vtime_accounting_enabled())
> +		return;
> +
> +	cpu = cpu_of(rq);
> +
> +	if (!vtime_accounting_enabled_cpu(cpu))
> +		return;
> +
> +	/*
> +	 * Task not running, nice update will be seen by vtime on its
> +	 * next context switch.
> +	 */
> +	if (!task_current(rq, p))
> +		return;
> +
> +	nice = task_nice(p);
> +
> +	/* Task stays nice, still accounted as nice in kcpustat */
> +	if (old_nice > 0 && nice > 0)
> +		return;
> +
> +	/* Task stays rude, still accounted as non-nice in kcpustat */
> +	if (old_nice <= 0 && nice <= 0)
> +		return;
> +
> +	if (p == current)
> +		vtime_set_nice_local(p);
> +	else
> +		vtime_set_nice_remote(cpu);
> +#endif
> +}

That's _far_ too large for an inline I'm thinking. Also, changing nice
really isn't a fast path or anything.
