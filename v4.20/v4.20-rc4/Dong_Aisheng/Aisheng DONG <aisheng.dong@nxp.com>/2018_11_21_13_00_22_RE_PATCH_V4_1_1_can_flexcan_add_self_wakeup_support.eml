Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from pop3.zju.edu.cn (124.160.105.205:110) by
  likexu-MOBL1.ccr.corp.intel.com with POP3; 22 Nov 2018 00:33:18 -0000
Received: from icoremail.net (unknown [209.85.214.169])
	by mail-app2 (Coremail) with SMTP id by_KCgCn3wyXXfVb7SLIAQ--.57893S3;
	Wed, 21 Nov 2018 21:28:55 +0800 (CST)
Received: from mail-pl1-f169.google.com (unknown [209.85.214.169])
	by mx2.icoremail.net (Coremail) with SMTP id AQAAfwD32UWVXfVbNKtjAA--.1255S3;
	Wed, 21 Nov 2018 21:28:53 +0800 (CST)
Received: by mail-pl1-f169.google.com with SMTP id s5-v6so5559338plq.11
        for <xuliker@zju.edu.cn>; Wed, 21 Nov 2018 05:28:53 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:delivered-to:dkim-signature:from:to:cc:subject
         :thread-topic:thread-index:date:message-id:references:in-reply-to
         :accept-language:content-language:spamdiagnosticoutput
         :spamdiagnosticmetadata:content-transfer-encoding:mime-version
         :sender:precedence:list-id;
        bh=sl8piIfiAXZCMCKjwcreguOsvo/9OQFJ5HesrsS3JAI=;
        b=KIm1UOdDTjfCyxl/CbWEn9SwHlmfg99FmobeF3kr225V7irqQyFflMDtuLtPhxiqoN
         Ua9NM6AYO1m3geO6e91aWAzbbNAjA8wiWgSQTSXdNAzCL0GmFRtGwGfwUWo+yI/9kkM9
         K+VI7sYiJi6+XD/s4jsI5wwI4fB9Uppku59L/znzly43vRs63ZVQgL/y+5Jl/9TuGFGu
         1nukGBOPDff7ZJRKkiWuiJVt2N0ypOJ+bGb77J1v03ya44m64Wkc6XJGFrL8NL0Fo+Jj
         u2xEOa2OaappMHEKLrizKZGFl0/D+JwrqfxGlJKxds6bk2XJpMBcISZOWGhPeCB8TDHy
         0IDg==
X-Gm-Message-State: AGRZ1gIMnv4pvfwFyDLGuRSZBNCQxjBypTqrbSAnHzm6cnp03XREAaq8
	H/9IhmsE0JOp5i9SDP18jI+nCOaTtVPidEqx1ZpduMIDMlTfaUI=
X-Received: by 2002:a62:2b17:: with SMTP id r23-v6mr6942000pfr.251.1542806932842;
        Wed, 21 Nov 2018 05:28:52 -0800 (PST)
X-Forwarded-To: xuliker@zju.edu.cn
X-Forwarded-For: liker.xu@gmail.com xuliker@zju.edu.cn
Delivered-To: liker.xu@gmail.com
Received: by 2002:a17:90a:d106:0:0:0:0 with SMTP id l6-v6csp1946732pju;
        Wed, 21 Nov 2018 05:28:50 -0800 (PST)
X-Google-Smtp-Source: AFSGD/Xas3EVGkMGbwQojAnOyfNZzkpq31o8Ah5yNKcE6w2OGzNH90/vqc+ZRCOXfEM0XAg0Gkq4
X-Received: by 2002:a65:4784:: with SMTP id e4mr5815969pgs.12.1542806930830;
        Wed, 21 Nov 2018 05:28:50 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1542806930; cv=none;
        d=google.com; s=arc-20160816;
        b=rdJ/L+A+v9/6g0HmJqojeSAgYLgAeNFI7x+/vpI+AA5CwfB4/6oLZfzxHwKaWl0R+f
         TR0KdYm2NpVjBKgs7aaFxssQ9BBzhbyv8w5aaCyRkxb3KiFRvGF1zOuSPurhZ1QKYYSy
         XYpdZ31ZJ9o6Zlrygy/SHOxjL6XTtO/3796jHrLBWJRrh5mwrBZ0Ig1/OQeuvr15VoMh
         nI0QFDVh9Nmh9zfXhHO0a5sPefqhqW1JkK6kaKCm4LnqycXjMLNilfkfCzNTCrjJEd2f
         /jXmAh3yZwtUWDTZmaTPXsl73XvgmM70p8DB77DRIj8kMrvC+/OiEcotxrfW68iQEB0X
         +5tA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=list-id:precedence:sender:mime-version:content-transfer-encoding
         :spamdiagnosticmetadata:spamdiagnosticoutput:content-language
         :accept-language:in-reply-to:references:message-id:date:thread-index
         :thread-topic:subject:cc:to:from:dkim-signature;
        bh=sl8piIfiAXZCMCKjwcreguOsvo/9OQFJ5HesrsS3JAI=;
        b=jL5DbMo3OkoXCmAK3BYA7Lajf57PA70B4q9z9ofFWcx5+IjXAH/yh5O+7C9fpY5s3R
         Qhr1Ub5tF7UsSKFzVyI56KzGS1Aj3fbw8CcrcrhZsobpcb6k993mqTBAEctT6bmqHuDR
         sYHRvcXU2zxbJ/ckP5YBOrUnHN3+vu2a5f1AIreajUvilhK3//oR2LL/sVy1TBbwEZpu
         ZCse657ELCABmcSSrF4SArWXZ4jW3tEGIMCGoUlYM1DkW6eC+qOzXpsrJTyKrYtkPprf
         0+Zer+vpwKZELI+d4TaxZkD9SS8UpkwFDk0CZbh0sw7QBz/EYAiuelj82s/6hIGsK2+A
         TqEQ==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@nxp.com header.s=selector1 header.b="jjdUw5/4";
       spf=pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) smtp.mailfrom=linux-kernel-owner@vger.kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=nxp.com
Received: from vger.kernel.org (vger.kernel.org. [209.132.180.67])
        by mx.google.com with ESMTP id w5si9491745pll.64.2018.11.21.05.28.36;
        Wed, 21 Nov 2018 05:28:50 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of linux-kernel-owner@vger.kernel.org designates 209.132.180.67 as permitted sender) client-ip=209.132.180.67;
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730695AbeKUXfO (ORCPT <rfc822;nullbytes00@gmail.com>
        + 99 others); Wed, 21 Nov 2018 18:35:14 -0500
Received: from mail-eopbgr10088.outbound.protection.outlook.com ([40.107.1.88]:26367
        "EHLO EUR02-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727486AbeKUXfO (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 21 Nov 2018 18:35:14 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nxp.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=sl8piIfiAXZCMCKjwcreguOsvo/9OQFJ5HesrsS3JAI=;
 b=jjdUw5/4pKPr9Yb1Z3qutQoyOcXcGI5jkX03zCx6c9gn/HJ3k4zntjsFAHGcuQSjavS8t/Ydm7C6rkKPu+zPt7t19tnxNgVSzOxoogA5GIQp35brPIjN3Ms+KmLFML/4RJeXFt+dJr1vFqzl4wuUfwjRBJXmy7EzO2x2ttzzeW0=
Received: from AM0PR04MB4211.eurprd04.prod.outlook.com (52.134.126.21) by
 AM0PR04MB4419.eurprd04.prod.outlook.com (52.135.148.25) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1361.14; Wed, 21 Nov 2018 13:00:22 +0000
Received: from AM0PR04MB4211.eurprd04.prod.outlook.com
 ([fe80::31e3:2aa6:8d93:9927]) by AM0PR04MB4211.eurprd04.prod.outlook.com
 ([fe80::31e3:2aa6:8d93:9927%2]) with mapi id 15.20.1339.027; Wed, 21 Nov 2018
 13:00:22 +0000
From: Aisheng DONG <aisheng.dong@nxp.com>
To: Joakim Zhang <qiangqing.zhang@nxp.com>,
        "linux-can@vger.kernel.org" <linux-can@vger.kernel.org>,
        "mkl@pengutronix.de" <mkl@pengutronix.de>
CC: "wg@grandegger.com" <wg@grandegger.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        dl-linux-imx <linux-imx@nxp.com>
Subject: RE: [PATCH V4 1/1] can: flexcan: add self wakeup support
Thread-Topic: [PATCH V4 1/1] can: flexcan: add self wakeup support
Thread-Index: AQHUgZY4VvHZKYhbxkiYG7EMB9VSQaVaLpEQ
Date: Wed, 21 Nov 2018 13:00:22 +0000
Message-ID: <AM0PR04MB421154D4E5F03AC4D222F7E480DA0@AM0PR04MB4211.eurprd04.prod.outlook.com>
References: <20181121122957.2684-1-qiangqing.zhang@nxp.com>
 <20181121122957.2684-2-qiangqing.zhang@nxp.com>
In-Reply-To: <20181121122957.2684-2-qiangqing.zhang@nxp.com>
Accept-Language: zh-CN, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [119.31.174.66]
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM0PR04MB4419;6:x46nLFxQeAiyEZEnxlqSeExPlur388mb1kVY7bDRSJoOXQd9Y5L6ldw3ceLX0pyAIDCEoSl7P3VYva62jd83XGcGFi3BTnxVy3XKyyUWbOQPvPGRJL0Iyky1pGHuaa4m8OaOcHUhfbLzHFdpyoGRX0Lg8kMiFB0t+1vi/NIhebMtXKXSxgzg75l2EvTo2/gFDfMjTUEVb4BmYSMLpgTWdv0pEDTn4RZPXNeUG1cgT9BJ7UJ5RcUih7K7geu6khY6OdsIkWCkPBXC2dLsqojYJZN6j9JAJcIEbICOYNeeymXUw4x3AM8PBMGAV32+VTMEgdv6HTQboRnsiiNH2HWnSjTDgXMAljDgq/V+ebWl9halefaMnusJrfJtWVTmvWzVuvCbxEYECd8A1mSIPc5VR9QROxtB5NdEzXzs0t3Luzj4V++kIByeiz1Z5EDYhhZAXEIKiWfqj1CyKmfUaSqSgA==;5:WzTq/gpoLUzGKcuEVJylU++nWQjmY/WDI4uPH82BT8GRrPqsSlRvoJjUs9wPcCc5ARrFOTA6f6Ki3FG3DfdXw6MWc8SBYwRp5aZW6weWetLiwaKe5bHdpuXZdDKj5Qe1QE+FkD8X9cISq7hX7NbVhXaiyS8i9oPQMUzUb3lMfxQ=;7:7f6IddbcQte7vC7JaZXG2boBA32qclkS53A1v8pwuIMHH+II5WaKS+zpUH+1IUQPAYGDKlIGj4a3+d7DXK1JcqTOPxWeIu73NOuc9xyx3h+JYQQeVHQS55J3494ykKDS/Q5PPO+rCn/uPiMRoVFctg==
x-ms-exchange-antispam-srfa-diagnostics: SOS;
x-ms-office365-filtering-correlation-id: f0162bae-a5b0-4892-5054-08d64fb14c18
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:AM0PR04MB4419;
x-ms-traffictypediagnostic: AM0PR04MB4419:
x-microsoft-antispam-prvs: <AM0PR04MB441973D8853015A176A457E480DA0@AM0PR04MB4419.eurprd04.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(10201501046)(3002001)(3231442)(944501410)(52105112)(93006095)(93001095)(6055026)(148016)(149066)(150057)(6041310)(20161123564045)(20161123562045)(20161123558120)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(201708071742011)(7699051)(76991095);SRVR:AM0PR04MB4419;BCL:0;PCL:0;RULEID:;SRVR:AM0PR04MB4419;
x-forefront-prvs: 08635C03D4
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(366004)(396003)(376002)(136003)(39860400002)(346002)(199004)(189003)(13464003)(305945005)(110136005)(11346002)(7736002)(2501003)(9686003)(446003)(486006)(476003)(6436002)(97736004)(2900100001)(55016002)(99286004)(186003)(106356001)(33656002)(3846002)(6116002)(6506007)(26005)(102836004)(2906002)(5660300001)(316002)(53546011)(68736007)(7696005)(54906003)(74316002)(76176011)(4326008)(2201001)(478600001)(256004)(14444005)(25786009)(86362001)(5024004)(8936002)(105586002)(53936002)(8676002)(66066001)(14454004)(81166006)(81156014)(6246003)(229853002)(71200400001)(71190400001);DIR:OUT;SFP:1101;SCL:1;SRVR:AM0PR04MB4419;H:AM0PR04MB4211.eurprd04.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
received-spf: None (protection.outlook.com: nxp.com does not designate
 permitted sender hosts)
x-microsoft-antispam-message-info: 6G0FSUZFXMhiWyXVxV3XaHPN8hmZd5MeYq0Te+loPWdHcmCVU2exT4c7jiCGHmt7LasvFB3BHhiDQ2LvpQOy8+FKYXXh0Fpy40u94yNcL6M+0eaTExTBfmlWq7ewdXkK5pSWdvLYrr74ltxYjWuJuTz7gdRt5ZVos+SlfdkW6zTpllHcASF62pSyljrdIKN8e7YgmnJn9Zq8lLJs3C8hKmdke7LCQfJlX1klqGgbtjPcR1zWY+FP4bc7mn8uUKJrFiZiDdgaqTiCulQu2+0x2HF2l2KUwUhUWhlAz56eSy0sn/dcGKmlQf6jUAUjfPPMkb3f7CAtpTfbvZiPcF4ZvTyjWzb/JukRE9yPo7JPh3o=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: nxp.com
X-MS-Exchange-CrossTenant-Network-Message-Id: f0162bae-a5b0-4892-5054-08d64fb14c18
X-MS-Exchange-CrossTenant-originalarrivaltime: 21 Nov 2018 13:00:22.3190
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 686ea1d3-bc2b-4c6f-a92c-d99c5c301635
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM0PR04MB4419
Sender: liker.xu+caf_=xuliker=zju.edu.cn@gmail.com
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org
X-CM-TRANSID: AQAAfwD32UWVXfVbNKtjAA--.1255S3
Authentication-Results: mail-app2; spf=pass smtp.mail=liker.xu+caf_=xu
	liker=zju.edu.cn@gmail.com;
X-Coremail-Antispam: 1UD129KBjvJXoW3JFykAF48JryUXFW5AFW8JFb_yoWftF4Dpa
	98Aa4rGrWUWrW29wn7KF10vFy2k392y3WFgFy7C39F93ZFv34DGw1rKr1DAw4kAr98GF45
	GF90vF1rG3yDXrJanT9S1TB71UUUUUUqnTZGkaVYY2UrUUUUjbIjqfuFe4nvWSU8nxnvy2
	9KBjDU0xBIdaVrnRJUUUBab7Iv0xC_Zr1lb4IE77IF4wAFF20E14v26r1j6r4UM7CIcVAF
	z4kK6r1j6r18M28lY4IEw2IIxxk0rwA2F7IY1VAKz4vEj48ve4kI8wA2z4x0Y4vE2Ix0cI
	8IcVAFwI0_Ar0_tr1l84ACjcxK6xIIjxv20xvEc7CjxVAFwI0_Gr0_Cr1l84ACjcxK6I8E
	87Iv67AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIEc7CjxVAFwI0_GcCE3s1le2I262IYc4CY6c
	8Ij28IcVAaY2xG8wAqx4xG64xvF2IEw4CE5I8CrVC2j2WlYx0E2Ix0cI8IcVAFwI0_Jr0_
	Jr4lYx0Ex4A2jsIE14v26F4j6r4UJwAm72CE4IkC6x0Yz7v_Jr0_Gr1l7I0Y6sxI4wCY1x
	0264kExVAvwVAq07x20xylc7Ca8VAvwVCFzxkY4VCF77xAMxkIecxEwVCI4VW5GwCY0x0I
	x7I2Y4AK64vIr41lcIIF0xvE2Ix0cI8IcVAFwI0_Xr0_Ar1lcIIF0xvE2Ix0cI8IcVCY1x
	0267AKxVW8JVWxJwCYIxAIcVC2z280aVAFwI0_Cr1j6rxdMxvI42IY6I8E87Iv6xkF7I0E
	14v26F4UJVW0owCF04k20xvY0x0EwIxGrwCF04k20xvEw4C26cxK6c8Ij28IcwCF72vE77
	IF4wCFx2IqxVCFs4IE7xkEbVWUJVW8JwC20s026c02F40E14v26r1j6r18MI8I3I0E7480
	Y4vE14v26r106r1rMI8E67AF67kF1VAFwI0_JF0_Jw1lIxkGc2Ij64vIr41lIxAIcVCF04
	k26cxKx2IYs7xG6r1I6r4UYxBIdaVFxhVjvjDU0xZFpf9x07b12NtUUUUU=

This mostly looks good to me.
A few minor comments

> -----Original Message-----
> From: Joakim Zhang
> Sent: Wednesday, November 21, 2018 8:32 PM
> To: linux-can@vger.kernel.org; mkl@pengutronix.de
> Cc: wg@grandegger.com; linux-kernel@vger.kernel.org; dl-linux-imx
> <linux-imx@nxp.com>; Aisheng DONG <aisheng.dong@nxp.com>; Joakim
> Zhang <qiangqing.zhang@nxp.com>
> Subject: [PATCH V4 1/1] can: flexcan: add self wakeup support
>=20
> From: Aisheng Dong <aisheng.dong@nxp.com>
>=20
> If wakeup is enabled, enter stop mode, else enter disabled mode. Self wak=
e can
> only work on stop mode.
>=20
> Starting from IMX6, the flexcan stop mode control bits is SoC specific, m=
ove it
> out of IP driver and parse it from devicetree.
>=20
> Signed-off-by: Aisheng Dong <aisheng.dong@nxp.com>
> Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
> ---
>  drivers/net/can/flexcan.c | 163
> +++++++++++++++++++++++++++++++++++---
>  1 file changed, 154 insertions(+), 9 deletions(-)
>=20
> diff --git a/drivers/net/can/flexcan.c b/drivers/net/can/flexcan.c index
> 8e972ef08637..83431810316e 100644
> --- a/drivers/net/can/flexcan.c
> +++ b/drivers/net/can/flexcan.c
> @@ -19,11 +19,14 @@
>  #include <linux/delay.h>
>  #include <linux/interrupt.h>
>  #include <linux/io.h>
> +#include <linux/mfd/syscon.h>
> +#include <linux/mfd/syscon/imx6q-iomuxc-gpr.h>
>  #include <linux/module.h>
>  #include <linux/of.h>
>  #include <linux/of_device.h>
>  #include <linux/platform_device.h>
>  #include <linux/regulator/consumer.h>
> +#include <linux/regmap.h>
>=20
>  #define DRV_NAME			"flexcan"
>=20
> @@ -131,7 +134,8 @@
>  	(FLEXCAN_ESR_ERR_BUS | FLEXCAN_ESR_ERR_STATE)  #define
> FLEXCAN_ESR_ALL_INT \
>  	(FLEXCAN_ESR_TWRN_INT | FLEXCAN_ESR_RWRN_INT | \
> -	 FLEXCAN_ESR_BOFF_INT | FLEXCAN_ESR_ERR_INT)
> +	FLEXCAN_ESR_BOFF_INT | FLEXCAN_ESR_ERR_INT | \
> +	FLEXCAN_ESR_WAK_INT)
>=20
>  /* FLEXCAN interrupt flag register (IFLAG) bits */
>  /* Errata ERR005829 step7: Reserve first valid MB */ @@ -190,6 +194,7 @@
>  #define FLEXCAN_QUIRK_USE_OFF_TIMESTAMP	BIT(5) /* Use timestamp
> based offloading */
>  #define FLEXCAN_QUIRK_BROKEN_PERR_STATE	BIT(6) /* No interrupt for
> error passive */
>  #define FLEXCAN_QUIRK_DEFAULT_BIG_ENDIAN	BIT(7) /* default to BE
> register access */
> +#define FLEXCAN_QUIRK_SETUP_STOP_MODE		BIT(8) /* Setup stop
> mode to support wakeup */
>=20
>  /* Structure of the message buffer */
>  struct flexcan_mb {
> @@ -254,6 +259,14 @@ struct flexcan_devtype_data {
>  	u32 quirks;		/* quirks needed for different IP cores */
>  };
>=20
> +struct flexcan_stop_mode {
> +	struct regmap *gpr;
> +	u8 req_gpr;
> +	u8 req_bit;
> +	u8 ack_gpr;
> +	u8 ack_bit;
> +};
> +
>  struct flexcan_priv {
>  	struct can_priv can;
>  	struct can_rx_offload offload;
> @@ -270,6 +283,7 @@ struct flexcan_priv {
>  	struct clk *clk_per;
>  	const struct flexcan_devtype_data *devtype_data;
>  	struct regulator *reg_xceiver;
> +	struct flexcan_stop_mode stm;
>=20
>  	/* Read and Write APIs */
>  	u32 (*read)(void __iomem *addr);
> @@ -293,7 +307,8 @@ static const struct flexcan_devtype_data
> fsl_imx28_devtype_data =3D {
>=20
>  static const struct flexcan_devtype_data fsl_imx6q_devtype_data =3D {
>  	.quirks =3D FLEXCAN_QUIRK_DISABLE_RXFG |
> FLEXCAN_QUIRK_ENABLE_EACEN_RRS |
> -		FLEXCAN_QUIRK_USE_OFF_TIMESTAMP |
> FLEXCAN_QUIRK_BROKEN_PERR_STATE,
> +		FLEXCAN_QUIRK_USE_OFF_TIMESTAMP |
> FLEXCAN_QUIRK_BROKEN_PERR_STATE |
> +		FLEXCAN_QUIRK_SETUP_STOP_MODE,
>  };
>=20
>  static const struct flexcan_devtype_data fsl_vf610_devtype_data =3D { @@
> -353,6 +368,35 @@ static inline void flexcan_write_le(u32 val, void __iom=
em
> *addr)
>  	iowrite32(val, addr);
>  }
>=20
> +static void flexcan_enable_wakeup_irq(struct flexcan_priv *priv, bool
> +enable) {
> +	struct flexcan_regs __iomem *regs =3D priv->regs;
> +	u32 reg_mcr;
> +
> +	reg_mcr =3D priv->read(&regs->mcr);
> +
> +	if (enable)
> +		reg_mcr |=3D FLEXCAN_MCR_WAK_MSK;
> +	else
> +		reg_mcr &=3D ~FLEXCAN_MCR_WAK_MSK;
> +
> +	priv->write(reg_mcr, &regs->mcr);
> +}
> +
> +static inline void flexcan_enter_stop_mode(struct flexcan_priv *priv) {
> +	/* enable stop request */
> +	regmap_update_bits(priv->stm.gpr, priv->stm.req_gpr,
> +			   1 << priv->stm.req_bit, 1 << priv->stm.req_bit); }
> +
> +static inline void flexcan_exit_stop_mode(struct flexcan_priv *priv) {
> +	/* remove stop request */
> +	regmap_update_bits(priv->stm.gpr, priv->stm.req_gpr,
> +			   1 << priv->stm.req_bit, 0);
> +}
> +
>  static inline void flexcan_error_irq_enable(const struct flexcan_priv *p=
riv)  {
>  	struct flexcan_regs __iomem *regs =3D priv->regs; @@ -940,6 +984,10 @@
> static int flexcan_chip_start(struct net_device *dev)
>  		reg_mcr |=3D FLEXCAN_MCR_FEN |
>  			FLEXCAN_MCR_MAXMB(priv->tx_mb_idx);
>  	}
> +
> +	if (priv->devtype_data->quirks & FLEXCAN_QUIRK_SETUP_STOP_MODE)
> +		reg_mcr |=3D FLEXCAN_MCR_SLF_WAK;

Please try if you can merge this into flexcan_enable_wakeup_irq().
If not, you can check with device_can_wakeup() as the stop parsing may fail=
.

> +
>  	netdev_dbg(dev, "%s: writing mcr=3D0x%08x", __func__, reg_mcr);
>  	priv->write(reg_mcr, &regs->mcr);
>=20
> @@ -1244,6 +1292,58 @@ static void unregister_flexcandev(struct net_devic=
e
> *dev)
>  	unregister_candev(dev);
>  }
>=20
> +static int flexcan_setup_stop_mode(struct platform_device *pdev) {
> +	struct net_device *dev =3D platform_get_drvdata(pdev);
> +	struct device_node *np =3D pdev->dev.of_node;
> +	struct device_node *gpr_np;
> +	struct flexcan_priv *priv;
> +	phandle phandle;
> +	u32 out_val[5];
> +	int ret;
> +
> +	if (!np)
> +		return -EINVAL;
> +
> +	/* stop mode property format is:
> +	 * <&gpr req_gpr req_bit ack_gpr ack_bit>.
> +	 */
> +	ret =3D of_property_read_u32_array(np, "fsl,stop-mode", out_val, 5);
> +	if (ret) {
> +		dev_dbg(&pdev->dev, "no stop-mode property\n");
> +		return ret;
> +	}
> +	phandle =3D *out_val;
> +
> +	gpr_np =3D of_find_node_by_phandle(phandle);
> +	if (!gpr_np) {
> +		dev_dbg(&pdev->dev, "could not find gpr node by phandle\n");
> +		return PTR_ERR(gpr_np);
> +	}
> +
> +	priv =3D netdev_priv(dev);
> +	priv->stm.gpr =3D syscon_node_to_regmap(gpr_np);

Better to put node here to cover failure case?

Regards
Dong Aisheng

> +	if (IS_ERR(priv->stm.gpr)) {
> +		dev_dbg(&pdev->dev, "could not find gpr regmap\n");
> +		return PTR_ERR(priv->stm.gpr);
> +	}
> +
> +	of_node_put(gpr_np);
> +
> +	priv->stm.req_gpr =3D out_val[1];
> +	priv->stm.req_bit =3D out_val[2];
> +	priv->stm.ack_gpr =3D out_val[3];
> +	priv->stm.ack_bit =3D out_val[4];
> +
> +	dev_dbg(&pdev->dev, "gpr %s req_gpr 0x%x req_bit %u ack_gpr 0x%x
> ack_bit %u\n",
> +		gpr_np->full_name, priv->stm.req_gpr, priv->stm.req_bit,
> priv->stm.ack_gpr,
> +		priv->stm.ack_bit);
> +
> +	device_set_wakeup_capable(&pdev->dev, true);
> +
> +	return 0;
> +}
> +
>  static const struct of_device_id flexcan_of_match[] =3D {
>  	{ .compatible =3D "fsl,imx6q-flexcan", .data =3D &fsl_imx6q_devtype_dat=
a, },
>  	{ .compatible =3D "fsl,imx28-flexcan", .data =3D &fsl_imx28_devtype_dat=
a, },
> @@ -1396,6 +1496,12 @@ static int flexcan_probe(struct platform_device
> *pdev)
>=20
>  	devm_can_led_init(dev);
>=20
> +	if (priv->devtype_data->quirks & FLEXCAN_QUIRK_SETUP_STOP_MODE) {
> +		err =3D flexcan_setup_stop_mode(pdev);
> +		if (err)
> +			dev_dbg(&pdev->dev, "failed to setup stop-mode\n");
> +	}
> +
>  	dev_info(&pdev->dev, "device registered (reg_base=3D%p, irq=3D%d)\n",
>  		 priv->regs, dev->irq);
>=20
> @@ -1426,9 +1532,17 @@ static int __maybe_unused flexcan_suspend(struct
> device *device)
>  	int err;
>=20
>  	if (netif_running(dev)) {
> -		err =3D flexcan_chip_disable(priv);
> -		if (err)
> -			return err;
> +		/* if wakeup is enabled, enter stop mode
> +		 * else enter disabled mode.
> +		 */
> +		if (device_may_wakeup(device)) {
> +			enable_irq_wake(dev->irq);
> +			flexcan_enter_stop_mode(priv);
> +		} else {
> +			err =3D flexcan_chip_disable(priv);
> +			if (err)
> +				return err;
> +		}
>  		netif_stop_queue(dev);
>  		netif_device_detach(dev);
>  	}
> @@ -1447,14 +1561,45 @@ static int __maybe_unused
> flexcan_resume(struct device *device)
>  	if (netif_running(dev)) {
>  		netif_device_attach(dev);
>  		netif_start_queue(dev);
> -		err =3D flexcan_chip_enable(priv);
> -		if (err)
> -			return err;
> +		if (device_may_wakeup(device)) {
> +			flexcan_enable_wakeup_irq(priv, false);
> +		} else {
> +			err =3D flexcan_chip_enable(priv);
> +			if (err)
> +				return err;
> +		}
> +	}
> +	return 0;
> +}
> +
> +static int __maybe_unused flexcan_noirq_suspend(struct device *device)
> +{
> +	struct net_device *dev =3D dev_get_drvdata(device);
> +	struct flexcan_priv *priv =3D netdev_priv(dev);
> +
> +	if (netif_running(dev) && device_may_wakeup(device))
> +		flexcan_enable_wakeup_irq(priv, true);
> +
> +	return 0;
> +}
> +
> +static int __maybe_unused flexcan_noirq_resume(struct device *device) {
> +	struct net_device *dev =3D dev_get_drvdata(device);
> +	struct flexcan_priv *priv =3D netdev_priv(dev);
> +
> +	if (netif_running(dev) && device_may_wakeup(device)) {
> +		disable_irq_wake(dev->irq);
> +		flexcan_exit_stop_mode(priv);
>  	}
> +
>  	return 0;
>  }
>=20
> -static SIMPLE_DEV_PM_OPS(flexcan_pm_ops, flexcan_suspend,
> flexcan_resume);
> +static const struct dev_pm_ops flexcan_pm_ops =3D {
> +	SET_SYSTEM_SLEEP_PM_OPS(flexcan_suspend, flexcan_resume)
> +	SET_NOIRQ_SYSTEM_SLEEP_PM_OPS(flexcan_noirq_suspend,
> +flexcan_noirq_resume) };
>=20
>  static struct platform_driver flexcan_driver =3D {
>  	.driver =3D {
> --
> 2.17.1
