Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 16:44:55 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EB7015803C2;
	Tue, 27 Nov 2018 00:21:48 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga003-1.jf.intel.com with ESMTP; 27 Nov 2018 00:21:48 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMZbFfBWGs4iYdbB0mdkp+4J7AzbV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGEvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBPuhWoYfyqFQMohSiCgesH/vvxz1Ti3/q36A3yfgtHR3I0QEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe26w63Iwi/Yb/NK2Df97YnIchQ8qvyRR71/asnRxlMyHA7CkFWf?=
 =?us-ascii?q?spbqMCiW1usXqGWb9PdgVfmxhGI9tw5woyGiy8ExgYfHgYIVz0rL9SR/wIstIN?=
 =?us-ascii?q?23UlR7bsK+HJtRsSGaOYx2T8U/SG9roCY30qMKtYK/cSQQ1ZgqyQDTZ+aaf4WL?=
 =?us-ascii?q?/h7vTuecLDVgiH54fL+yhwy+/VWux+D8TMW4zkhGojZfntXStn0A2Bre4dWdRP?=
 =?us-ascii?q?Rn5EeuwzOP2hjT6u5aJUA0krLWK4AuwrEujJofq0fDETHsmEXwkqCWcl8o+u+y?=
 =?us-ascii?q?6+Toernmp5mcOJFoigzmLKgihsiyDf4lPgUAQWSX4/mw2b7/8UHjQbhHjOU6kq?=
 =?us-ascii?q?zDv5DbIcQbqLS5AwhQ0os77xa/DjGm0MkXnHUeL1JKZgiHj473NFHKOfz4Cvm+?=
 =?us-ascii?q?g1Kynzdx3P3GILLhDYvXLnTZk7fuY6x960hCxwo319xf4IhUCr4ZLPLpRkDxrM?=
 =?us-ascii?q?DYDgM+MwGsx+bnCdZ92Z0EVWOAH6+UK6fSsV6O5uIyLOiAfo4VuDDhK/c74/7i?=
 =?us-ascii?q?l2M2mVgYfaOxx5sYdGi4Huh6I0WeeXfsgs0OEWYWvgUkS+zmkl2CUSNJaHa0UK?=
 =?us-ascii?q?Ix/TU7CIOgDYfeSYGhmr2B3CGnHpJIYmBKEEyDEXDtd4+cQfcDdDqSItN9kjwD?=
 =?us-ascii?q?TbWhSYgh2g+0uA/5zLpnKOzU+ioDuJLn1dh14fDTlB4o+Tx1CcSdz3+CT2Vukm?=
 =?us-ascii?q?wUQD822bh1oVZhxVebzah4n/tYGMRJ6PNSUgc6Mp3cw/ZgC9/oWALMZdOJSFeg?=
 =?us-ascii?q?QtW7DjA9VNMxw9kSY0ljH9WulAzM3y2vA7UNjbyEGIQ08r7A33j2P8t9yGzJ1K?=
 =?us-ascii?q?87g1kiQ8tAL2umhqFk+gjXBo7JlViZlqmweaQd2i7N6HmMzW6UsE5EVw5wVL3P?=
 =?us-ascii?q?XWoDaUvOsdT5+kTCQqezBrs9LAtO19SOKqtQZd3vllVJWvHjNNPaY2KynmewAQ?=
 =?us-ascii?q?2FxreNbIrsZmUc0z/RCEkCkwAP43mGMRIyCTumo2LbFDZuD07gY1vw8elir3O2?=
 =?us-ascii?q?VlI7wBuUb0J/zba1+gQahfqHS/wN2LIJoyMhqzRyHFag0NPaEduApwx9fKpCZd?=
 =?us-ascii?q?Mx+ktI1WXctwZlJJyvM7hihkICcwRwp07uyxR3CoBHkcg2rHMrzBB+Kb6C3FNG?=
 =?us-ascii?q?bTOY2ZHwOrvYKmTp+BCvaqjW2kzR0dqM+6cP7ug4pEvnvA2zCkUi9HBn2cFP03?=
 =?us-ascii?q?SA/pXKEBYSUZXpX0kt8xh1ub7bbTc95o/OznJsLLS7vSXE29IqA+sl1A2tf9Ne?=
 =?us-ascii?q?MKOCCQ/zHNcWB8moKOw2hVepaggIM/xV9K4xJ8mmbeeJ2La3POZ8mzKrlWRG4J?=
 =?us-ascii?q?1n3k2Q7SZ9S+7I0IwDw/GXxQaHUzb8jFG8ssH4g4xEZDcSHnahxijgHoJeeqpy?=
 =?us-ascii?q?fYMTA2e0P8K33sl+h4LqW3NA7l6jBk8J19WzeRWPaFzxxwtQ2loNoXymgCe30y?=
 =?us-ascii?q?Z7kzU0oaWBxizOxOLieQEDOm5KQmlikFjtLZK1j9AcQEincQwpmAG56kb9wqhR?=
 =?us-ascii?q?vL5/IHXLQUdUYyj2KHlvU6uxtraYY89D8ogosThRUOmnZVCaS7j9owYV0i/5Hm?=
 =?us-ascii?q?tewiw7eC+uupnjgxN6j2edJm5prHXFYcFw2Qvf5NvESP5TxDUGXip4iTrQBlSm?=
 =?us-ascii?q?JNmm59aUl5TCsuC4SW2hUIZecS3qzYOGqSu66ndmARy5n/CvhNLnFRI23jP819?=
 =?us-ascii?q?lvTS/ItgrzYpH316SmNuJqZklpC0X768ZgGIF+k40wiYoU2XgbgJWV4HUGnX3y?=
 =?us-ascii?q?MdVdxaLxcn4NSSQXzN7S5QjvwFdjIW6Rx4LlSnWdxdNsZ9qgbWMXwC49791KB7?=
 =?us-ascii?q?2S7LxLhiZ1plu4rQTMYflyhDsdyP0u6GIEjOENogYi0iKdArUKF0lCISPsjwiI?=
 =?us-ascii?q?78y5rKhPYWavcLuw21BkkdGvEr6CuR1cV2jjepg5AyBw9Mp/PUnI0H3y7IHkZd?=
 =?us-ascii?q?bRYcgSth2SjxfPkexVJIgtmfoNgCptIXj9smE9y+4nkRxu2om3vJSAK2Vo5q64?=
 =?us-ascii?q?AwRXNjvoZ8MI4THtjL1TnsKX34CpA5VgFS8HXJruTfK0Dj0Sse7rOBqJED05sn?=
 =?us-ascii?q?2bA6bQHReD6Ed6qHLCC4ukOGuQJHkd0NVuXh2dJFFEjQAQXTU6mIM5Fw+wyMzg?=
 =?us-ascii?q?dkd5+i4e5lriphRQzeJoMgH1Un3Dqwewdjc0VJ+fIQJU7g5Y4kfaL9ee4vhvHy?=
 =?us-ascii?q?1C/Z2hsQ+NKnGdZwtSFmEEQUiEB1HlPrmz6tjM6emYBuyiL/TQZbWCs/BRV/CN?=
 =?us-ascii?q?xZi3yItp4y6MNtmTPnllF/A62k1DXW1gG8TEgToPTTYblznKb86dqxex4Sl3rs?=
 =?us-ascii?q?G58PT2VwPj/4qPC71OMdpx/xC6m7uMN+mVhCxhMzZXyosMxWPUyLgYxFMSiz9h?=
 =?us-ascii?q?dziuEbQDtC7BVqHQmrVQDx4UdSxzLtZI77kn0wlJOM7bjM7117Figv40DVdFSU?=
 =?us-ascii?q?LumsWzacMWJGG9MUvNBFyXO7SeOT3L38b3bLumRr1Nl+pUrQO/uDaBH0/nPzSO?=
 =?us-ascii?q?jD3pVxGpMeFRgyCXJh1euIehchlzDWjvVs7pahq+MNVvlz053aU0hm/WNW4bKT?=
 =?us-ascii?q?V8b0JNrriK4SxEmPlwB2xB4WRjLeSfnyaZ7u/YKosZsPdxAyR0kf5a72o+y7dP?=
 =?us-ascii?q?8C5EQ/l1kjPIrtFyu1GmjvWPyj1/XRtOsDlLgoeLvURkOarB95hAWWzL/BQC7W?=
 =?us-ascii?q?iLDxQKpt1lCsDguqxKy9jPkr7zJylG897O4cQcAM3Ue4q7Ny8BLBXpUBLVBwgE?=
 =?us-ascii?q?SyXjYWHCiExRuP6V8XKRo94xrZ263NIqS7lGTxQJEekEA0BpB5RWPJBtQDogna?=
 =?us-ascii?q?WziM8O+Gr7oh7MQslTopHAULSVG/q5exiDirwRWR8B2q/5KIUXfqfy0U9rIg1k?=
 =?us-ascii?q?lo3AGEP4Rs1Wr2tqfFln8w127HFiQzhriAreYQS37SpWTKbskw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DOAQAu/vxbh0O0hNFcCB0BAQUBBwUBg?=
 =?us-ascii?q?WWCaoECJ4N5lByBYC0UkjKGGwNMLAsIAYMshUUiOBIBAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiQBgmIBAgMBAiBWBgkBAQoYAgIYDgICA1QGAQwGAgEBARmDAwGCA?=
 =?us-ascii?q?QQBCqUfgS+KKwWBC4p+F4FAP4E4gmuDGwQYgSACgymCVwKLFIROkCgJhnyKLgY?=
 =?us-ascii?q?YiV2HLCyNGYxNVYEhMxoIMDuCbBOBbYZhh3o/MoEFAQGLFYJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0DOAQAu/vxbh0O0hNFcCB0BAQUBBwUBgWWCaoECJ4N5lBy?=
 =?us-ascii?q?BYC0UkjKGGwNMLAsIAYMshUUiOBIBAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBg?=
 =?us-ascii?q?mIBAgMBAiBWBgkBAQoYAgIYDgICA1QGAQwGAgEBARmDAwGCAQQBCqUfgS+KKwW?=
 =?us-ascii?q?BC4p+F4FAP4E4gmuDGwQYgSACgymCVwKLFIROkCgJhnyKLgYYiV2HLCyNGYxNV?=
 =?us-ascii?q?YEhMxoIMDuCbBOBbYZhh3o/MoEFAQGLFYJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="54972741"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 00:21:28 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729241AbeK0TS3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 14:18:29 -0500
Received: from mx2.suse.de ([195.135.220.15]:35850 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727574AbeK0TS3 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 14:18:29 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 20A2AADF2;
        Tue, 27 Nov 2018 08:21:22 +0000 (UTC)
Subject: Re: [PATCHi v2] mm: put_and_wait_on_page_locked() while page is
 migrated
To: Hugh Dickins <hughd@google.com>,
        Linus Torvalds <torvalds@linux-foundation.org>
Cc: Andrew Morton <akpm@linux-foundation.org>,
        Baoquan He <bhe@redhat.com>, Michal Hocko <mhocko@suse.com>,
        Andrea Arcangeli <aarcange@redhat.com>,
        David Hildenbrand <david@redhat.com>,
        Mel Gorman <mgorman@techsingularity.net>,
        David Herrmann <dh.herrmann@gmail.com>,
        Tim Chen <tim.c.chen@linux.intel.com>,
        Kan Liang <kan.liang@intel.com>,
        Andi Kleen <ak@linux.intel.com>,
        Davidlohr Bueso <dave@stgolabs.net>,
        Peter Zijlstra <peterz@infradead.org>,
        Christoph Lameter <cl@linux.com>,
        Nick Piggin <npiggin@gmail.com>, pifang@redhat.com,
        linux-kernel@vger.kernel.org, linux-mm@kvack.org
References: <alpine.LSU.2.11.1811241858540.4415@eggly.anvils>
 <CAHk-=wjeqKYevxGnfCM4UkxX8k8xfArzM6gKkG3BZg1jBYThVQ@mail.gmail.com>
 <alpine.LSU.2.11.1811251900300.1278@eggly.anvils>
 <alpine.LSU.2.11.1811261121330.1116@eggly.anvils>
From: Vlastimil Babka <vbabka@suse.cz>
Openpgp: preference=signencrypt
Autocrypt: addr=vbabka@suse.cz; prefer-encrypt=mutual; keydata=
 xsFNBFZdmxYBEADsw/SiUSjB0dM+vSh95UkgcHjzEVBlby/Fg+g42O7LAEkCYXi/vvq31JTB
 KxRWDHX0R2tgpFDXHnzZcQywawu8eSq0LxzxFNYMvtB7sV1pxYwej2qx9B75qW2plBs+7+YB
 87tMFA+u+L4Z5xAzIimfLD5EKC56kJ1CsXlM8S/LHcmdD9Ctkn3trYDNnat0eoAcfPIP2OZ+
 9oe9IF/R28zmh0ifLXyJQQz5ofdj4bPf8ecEW0rhcqHfTD8k4yK0xxt3xW+6Exqp9n9bydiy
 tcSAw/TahjW6yrA+6JhSBv1v2tIm+itQc073zjSX8OFL51qQVzRFr7H2UQG33lw2QrvHRXqD
 Ot7ViKam7v0Ho9wEWiQOOZlHItOOXFphWb2yq3nzrKe45oWoSgkxKb97MVsQ+q2SYjJRBBH4
 8qKhphADYxkIP6yut/eaj9ImvRUZZRi0DTc8xfnvHGTjKbJzC2xpFcY0DQbZzuwsIZ8OPJCc
 LM4S7mT25NE5kUTG/TKQCk922vRdGVMoLA7dIQrgXnRXtyT61sg8PG4wcfOnuWf8577aXP1x
 6mzw3/jh3F+oSBHb/GcLC7mvWreJifUL2gEdssGfXhGWBo6zLS3qhgtwjay0Jl+kza1lo+Cv
 BB2T79D4WGdDuVa4eOrQ02TxqGN7G0Biz5ZLRSFzQSQwLn8fbwARAQABzSFWbGFzdGltaWwg
 QmFia2EgPHZiYWJrYUBzdXNlLmNvbT7CwZcEEwEKAEECGwMFCwkIBwMFFQoJCAsFFgIDAQAC
 HgECF4ACGQEWIQSpQNQ0mSwujpkQPVAiT6fnzIKmZAUCWi/zTwUJBbOLuQAKCRAiT6fnzIKm
 ZIpED/4jRN/6LKZZIT4R2xoou0nJkBGVA3nfb+mUMgi3uwn/zC+o6jjc3ShmP0LQ0cdeuSt/
 t2ytstnuARTFVqZT4/IYzZgBsLM8ODFY5vGfPw00tsZMIfFuVPQX3xs0XgLEHw7/1ZCVyJVr
 mTzYmV3JruwhMdUvIzwoZ/LXjPiEx1MRdUQYHAWwUfsl8lUZeu2QShL3KubR1eH6lUWN2M7t
 VcokLsnGg4LTajZzZfq2NqCKEQMY3JkAmOu/ooPTrfHCJYMF/5dpi8YF1CkQF/PVbnYbPUuh
 dRM0m3NzPtn5DdyfFltJ7fobGR039+zoCo6dFF9fPltwcyLlt1gaItfX5yNbOjX3aJSHY2Vc
 A5T+XAVC2sCwj0lHvgGDz/dTsMM9Ob/6rRJANlJPRWGYk3WVWnbgW8UejCWtn1FkiY/L/4qJ
 UsqkId8NkkVdVAenCcHQmOGjRQYTpe6Cf4aQ4HGNDeWEm3H8Uq9vmHhXXcPLkxBLRbGDSHyq
 vUBVaK+dAwAsXn/5PlGxw1cWtur1ep7RDgG3vVQDhIOpAXAg6HULjcbWpBEFaoH720oyGmO5
 kV+yHciYO3nPzz/CZJzP5Ki7Q1zqBb/U6gib2at5Ycvews+vTueYO+rOb9sfD8BFTK386LUK
 uce7E38owtgo/V2GV4LMWqVOy1xtCB6OAUfnGDU2EM7ATQRbGTU1AQgAn0H6UrFiWcovkh6E
 XVcl+SeqyO6JHOPm+e9Wu0Vw+VIUvXZVUVVQLa1PQDUi6j00ChlcR66g9/V0sPIcSutacPKf
 dKYOBvzd4rlhL8rfrdEsQw5ApZxrA8kYZVMhFmBRKAa6wos25moTlMKpCWzTH84+WO5+ziCT
 sTUZASAToz3RdunTD+vQcHj0GqNTPAHK63sfbAB2I0BslZkXkY1RLb/YhuA6E7JyEd2pilZO
 rIuBGl/5q2qSakgnAVFWFBR/DO27JuAksYnq+aH8vI0xGvwn75KqSk4UzAkDzWSmO4ZHuahK
 tQgZNsMYV+PGayRBX9b9zbldzopoLBdqHc4njQARAQABwsF8BBgBCgAmFiEEqUDUNJksLo6Z
 ED1QIk+n58yCpmQFAlsZNTUCGwwFCQPCZwAACgkQIk+n58yCpmQ83g/9Frg1sRMdGPn98zV+
 O2eC3h0p5f/oxxQ8MhG5znwHoW4JDG2TuxfcQuz7X7Dd5JWscjlw4VFJ2DD+IrDAGLHwPhCr
 RyfKalnrbYokvbClM9EuU1oUuh7k+Sg5ECNXEsamW9AiWGCaKWNDdHre3Lf4xl+RJWxghOVW
 RiUdpLA/a3yDvJNVr6rxkDHQ1P24ZZz/VKDyP+6g8aty2aWEU0YFNjI+rqYZb2OppDx6fdma
 YnLDcIfDFnkVlDmpznnGCyEqLLyMS3GH52AH13zMT9L9QYgT303+r6QQpKBIxAwn8Jg8dAlV
 OLhgeHXKr+pOQdFf6iu2sXlUR4MkO/5KWM1K0jFR2ug8Pb3aKOhowVMBT64G0TXhQ/kX4tZ2
 ZF0QZLUCHU3Cigvbu4AWWVMNDEOGD/4sn9OoHxm6J04jLUHFUpFKDcjab4NRNWoHLsuLGjve
 Gdbr2RKO2oJ5qZj81K7os0/5vTAA4qHDP2EETAQcunTn6aPlkUnJ8aw6I1Rwyg7/XsU7gQHF
 IM/cUMuWWm7OUUPtJeR8loxZiZciU7SMvN1/B9ycPMFs/A6EEzyG+2zKryWry8k7G/pcPrFx
 O2PkDPy3YmN1RfpIX2HEmnCEFTTCsKgYORangFu/qOcXvM83N+2viXxG4mjLAMiIml1o2lKV
 cqmP8roqufIAj+Ohhzs=
Message-ID: <e35e9354-a4be-ebcc-064d-c9e5b42a14c3@suse.cz>
Date: Tue, 27 Nov 2018 09:21:20 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <alpine.LSU.2.11.1811261121330.1116@eggly.anvils>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 11/26/18 8:27 PM, Hugh Dickins wrote:
> Waiting on a page migration entry has used wait_on_page_locked() all
> along since 2006: but you cannot safely wait_on_page_locked() without
> holding a reference to the page, and that extra reference is enough to
> make migrate_page_move_mapping() fail with -EAGAIN, when a racing task
> faults on the entry before migrate_page_move_mapping() gets there.
> 
> And that failure is retried nine times, amplifying the pain when
> trying to migrate a popular page.  With a single persistent faulter,
> migration sometimes succeeds; with two or three concurrent faulters,
> success becomes much less likely (and the more the page was mapped,
> the worse the overhead of unmapping and remapping it on each try).
> 
> This is especially a problem for memory offlining, where the outer
> level retries forever (or until terminated from userspace), because
> a heavy refault workload can trigger an endless loop of migration
> failures.  wait_on_page_locked() is the wrong tool for the job.
> 
> David Herrmann (but was he the first?) noticed this issue in 2014:
> https://marc.info/?l=linux-mm&m=140110465608116&w=2
> 
> Tim Chen started a thread in August 2017 which appears relevant:
> https://marc.info/?l=linux-mm&m=150275941014915&w=2
> where Kan Liang went on to implicate __migration_entry_wait():
> https://marc.info/?l=linux-mm&m=150300268411980&w=2
> and the thread ended up with the v4.14 commits:
> 2554db916586 ("sched/wait: Break up long wake list walk")
> 11a19c7b099f ("sched/wait: Introduce wakeup boomark in wake_up_page_bit")
> 
> Baoquan He reported "Memory hotplug softlock issue" 14 November 2018:
> https://marc.info/?l=linux-mm&m=154217936431300&w=2
> 
> We have all assumed that it is essential to hold a page reference while
> waiting on a page lock: partly to guarantee that there is still a struct
> page when MEMORY_HOTREMOVE is configured, but also to protect against
> reuse of the struct page going to someone who then holds the page locked
> indefinitely, when the waiter can reasonably expect timely unlocking.
> 
> But in fact, so long as wait_on_page_bit_common() does the put_page(),
> and is careful not to rely on struct page contents thereafter, there is
> no need to hold a reference to the page while waiting on it.  That does
> mean that this case cannot go back through the loop: but that's fine for
> the page migration case, and even if used more widely, is limited by the
> "Stop walking if it's locked" optimization in wake_page_function().
> 
> Add interface put_and_wait_on_page_locked() to do this, using "behavior"
> enum in place of "lock" arg to wait_on_page_bit_common() to implement it.
> No interruptible or killable variant needed yet, but they might follow:
> I have a vague notion that reporting -EINTR should take precedence over
> return from wait_on_page_bit_common() without knowing the page state,
> so arrange it accordingly - but that may be nothing but pedantic.
> 
> __migration_entry_wait() still has to take a brief reference to the
> page, prior to calling put_and_wait_on_page_locked(): but now that it
> is dropped before waiting, the chance of impeding page migration is
> very much reduced.  Should we perhaps disable preemption across this?
> 
> shrink_page_list()'s __ClearPageLocked(): that was a surprise!  This
> survived a lot of testing before that showed up.  PageWaiters may have
> been set by wait_on_page_bit_common(), and the reference dropped, just
> before shrink_page_list() succeeds in freezing its last page reference:
> in such a case, unlock_page() must be used.  Follow the suggestion from
> Michal Hocko, just revert a978d6f52106 ("mm: unlockless reclaim") now:
> that optimization predates PageWaiters, and won't buy much these days;
> but we can reinstate it for the !PageWaiters case if anyone notices.
> 
> It does raise the question: should vmscan.c's is_page_cache_freeable()
> and __remove_mapping() now treat a PageWaiters page as if an extra
> reference were held?  Perhaps, but I don't think it matters much, since
> shrink_page_list() already had to win its trylock_page(), so waiters are
> not very common there: I noticed no difference when trying the bigger
> change, and it's surely not needed while put_and_wait_on_page_locked()
> is only used for page migration.
> 
> Reported-and-tested-by: Baoquan He <bhe@redhat.com>
> Signed-off-by: Hugh Dickins <hughd@google.com>
> Acked-by: Michal Hocko <mhocko@suse.com>
> Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>

Acked-by: Vlastimil Babka <vbabka@suse.cz>

Thanks!
