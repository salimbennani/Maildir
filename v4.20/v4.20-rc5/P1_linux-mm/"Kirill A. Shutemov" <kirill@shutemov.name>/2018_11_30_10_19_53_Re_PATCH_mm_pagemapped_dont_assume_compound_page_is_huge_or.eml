Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:16:09 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 79F0D5802E4;
	Fri, 30 Nov 2018 02:20:26 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga001-1.jf.intel.com with ESMTP; 30 Nov 2018 02:20:26 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AXQD6ehKRtJ8Ytmk9XNmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/39rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModn7MakSUPq1zKjMzTXHcvhbxS3x45XVfBAhvPGMQax/cc/WyUkxGQ/Ok1Kd?=
 =?us-ascii?q?qY/kPzOP1+QNt2yb4vF7VeKvlm4ntx9+oj2oxscykIXJgJgaylXa+ihgxos+ON?=
 =?us-ascii?q?O2SEl+YdG+EZtQsTmXN4R3QsM+Q2FopT01xqcatp68eSgHzoksyR3Ha/GfbYSE?=
 =?us-ascii?q?/hbuWPyMLTp2mn5pYq+zihWu/US6y+DxVNG43EtOoyZbiNXBtnAA2wbT58WIUP?=
 =?us-ascii?q?dw8EOs1DCS3A7J8O5EO1o7la/DJp4h3LEwkp0TvFzdHi/5hkr2lrWadkY69eiy?=
 =?us-ascii?q?7eTofLHmqoWbN49uhQHyKqUumsqhDuQkKgUCQXSX9OCm2LH+80D1Xq9GguA1n6?=
 =?us-ascii?q?XFqpzXJMYWqra8AwBP04Yj7xi/Dy2h0NQdhXQHKFNFeBSaj4nmIl3OI+73De25?=
 =?us-ascii?q?g1uylDdn3vfGP7PnAprTNHjOi6nhfblj5E5G0gYzzs5Q54hSCr4fJPL/QEjxtM?=
 =?us-ascii?q?bXDhMhKQy73/7nCMlh1oMZQW+PBq6ZMKDMvlOS6eMvPvKBZIsUuDb7Nvgk6OTi?=
 =?us-ascii?q?jX4/mV8BY6ap2YEbZ2y/HvRjO0+Ze2bjgs8dEWcWuQozVOzqh0eDUT5PfXmyWL?=
 =?us-ascii?q?gw5jEmCI28C4fDSZuggLiA3Ce9A51XaXpKClGKEXf0aYqEX+0AZz6VIs9kijYE?=
 =?us-ascii?q?T6SuS5c91RGysw/307hnLu3K9SECtpLj09515+vUlRwp8Tx0DsKd03yCTm1un2?=
 =?us-ascii?q?MIQSM20757oUBn1liD1q14ieRCFdNP//NJThs6NZnEwuNgENDyWgXBftSTRFa8?=
 =?us-ascii?q?WNqmAyo8TtYww98IfkZ8FM+ujhHF3yq2HbAVk6aHC4Az8qLZx3LxPdpyy27a1K?=
 =?us-ascii?q?k9iFkrWshPOneghqJl8wjTBpTGk0OWl6uxcaQc3SjN9HqMzGaUvUFYVhJwXrvB?=
 =?us-ascii?q?XXwFekTWqtH57FvYT7CyEbQnLhdBycmaJ6RXcNLpk0tJSO3jONvEZWKxgHm/BR?=
 =?us-ascii?q?CPyrOIb4rqfmEd0T7ZCEgFlQAT4HmHORI/Bienv2LREjhuGUjzbEPr9Ol0sGm7?=
 =?us-ascii?q?QVMszwGWc01h0KK49QMPivyCVfwfxLIEtz0nqzVvAlm92cnbC96BpwpnYaVdbs?=
 =?us-ascii?q?kx4FZB1WLFqQN9OoasILxlhl4baw53pV/h1w1rCoVclsgntG8qzAt3KaKfzFNB?=
 =?us-ascii?q?dzOZ0YrsOrHNLWny5hSva6/Q2lHRy9uW/qYP6PIlq1Tspg2pF0wi82l53NlRyX?=
 =?us-ascii?q?eT+pLKDA8KW5LrTkk37wR6p63dYiQl/YzU0WNjMKaqvT7Cwd4mH/YlxQu6cNdZ?=
 =?us-ascii?q?M6OEExHyHtYeB8ivLuwqhleoYggFPOBU6K47Iceme+Ga166sOeZqhCimgnhf4I?=
 =?us-ascii?q?BhzkKM8DJxS+7V35of3/6UxAqGVzfmg1envcD6goREZTAUHmqixinoHo9RZqtu?=
 =?us-ascii?q?fYkVDWeiOdG4xtJ7h5T1QX5X6EajB08a2M+uYReSdV390hFK2kQNvHOnnjG0zz?=
 =?us-ascii?q?pqnDEzr6qTxTDBzP7mdBUaJGFLXm5ijVH3LIiwjtAaWlWobgczmBuk40b627ZU?=
 =?us-ascii?q?pKBlI2bPRkdIejD8L3t+XauoqrqCf8lP5YsosCVWSui9YUqWSqXgoxscyC7jG2?=
 =?us-ascii?q?pexDYmdzCloJn5nhp6iH6DI3Z3tnbWZcZwxRLH7tzGWfFRxiYGRDV/iTTPBFiz?=
 =?us-ascii?q?JcOp/daXl5fEqOy+THiuVp5QcSnqy4OPqi276HZuAR2+mfCzh9LmHRI70S/9y9?=
 =?us-ascii?q?llSyHIoAzgbYns0qSwKfhncVVwBF/g98p6HZlzk4sqi5EXw3QahJSV/XwcnGf3?=
 =?us-ascii?q?MNVb37/+bXUXST4Kxd7V/Bbq2El5In2VwIL5U22XwtF9aNmifmMWxiU94thJCK?=
 =?us-ascii?q?iO7bxIhyt1okeiogLXbvhwhTMdyfoo6H4HjOAFogstziOBAr8MGUlUJzDjlxON?=
 =?us-ascii?q?79qmtqVYeH6vcaSs1Ep5hd2hCbCCogJGV3rjdJYtAzRw7tlhP1LWy3L89JvkeN?=
 =?us-ascii?q?bLYNIXtx2UlQrAjudPJJIwkPoKmTRoOWbnsXI5zO47iARk3Yums4ifN2Vt4KW5?=
 =?us-ascii?q?DwZENj3yYsMf4DDsgrxYnsaLxICvBZRhFy4PXJvpS/KoDT0Tue7mNwaIDD0ztH?=
 =?us-ascii?q?ObFaDDEg+Y7Udst2jPHIyzN3GLOHkZys1vSwKHK0xYhAAUQS82npokFg2xwMzh?=
 =?us-ascii?q?cUF55i0e51LiqxtMzP5oOAf7UmvFuAiobTI0QoCFLBVK9gFC+1vVMcuG4+JxBS?=
 =?us-ascii?q?5Y+4OurBeXJmyHfQhIDnwJWk+ZB1DlJLau/sLN8+yZBuq4MvvPbq+Cqe1YV/eU?=
 =?us-ascii?q?252v1pFq8CqLNsWKJnNiFeE02lJfXXBlHMTUgzUOSysKlyLUcs6UvhG89jdsrs?=
 =?us-ascii?q?C49vTrVxni5Y+OC7tULNVu9Aq6gaaFN+6Mmil5LSxU2Y8LxX/N0LIfxkIdizly?=
 =?us-ascii?q?dzmxFrQNrS7NQ7zRmq9UDB4bajl/NMhS76I70QlCJ9Tbis7u1rNjiv41ClFFVU?=
 =?us-ascii?q?Hum82zZMwKJX29O03DBEqRKLuGIjjLydntYaygUb1QkPlUtxqotDmBDk/sJS6D?=
 =?us-ascii?q?mCfpVhy1NeFMjTqWPBhfuIG7bxZsBnLvTNPgah2nLtB3iSc6zqEzhnPPLWQcKy?=
 =?us-ascii?q?Rzc1tRrr2M6iNVmul/G21E7nZ/MeaIgTqW7+nGJZYQqvZrBiV0l+RH4HU10bdV?=
 =?us-ascii?q?7SdEROBrlyvWtNJhv1amkuyXwDp9TBVOsipLhJ6MvUh6OaTW7J9AWXPF/BIL9W?=
 =?us-ascii?q?qRChQKqMFjCt3goK1QztnPlKTuKDZN6d7U/M0cB9TKJ8KDKnYuLR3pGDuHRDcC?=
 =?us-ascii?q?GByiMynkm0Vbm/yRvimXtYQzrJPhm7IUR7NbXUBzHfQfXBdLBtsHdd1UXykllb?=
 =?us-ascii?q?rTpYhA3nqjsBTUQ9sQ9sTEV+iTBfHHMzaEkbRBYAVOx7r9INJAZcXAx0V+Zwwi?=
 =?us-ascii?q?z8zxEE3KUIUI+3U5Yw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACHDQFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieMEV+LKoINFJc0gSQDShQBARgNBgGHdCI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwyCNiQBgmIBAgMBAjcGAQE3AQUJAQEKDgoJJQMMHQgBB?=
 =?us-ascii?q?QEcBhMFgxwBggEFCpp/PIodgh+CdgEBBYcqAwUSim2BHBEGgX+EI4MeAoc8kCS?=
 =?us-ascii?q?FNYpVBQcCAoZ9gy+GfiMKAoFPhRCCbjaHECyJUoNhilQCBAIEBQIFDyGBJYINg?=
 =?us-ascii?q?QWDJ4Ibg22KVj0yAYEDAQEBjhsBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ANAACHDQFch0O0hNFjHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieMEV+LKoINFJc0gSQDShQBARgNBgGHdCI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwyCNiQBgmIBAgMBAjcGAQE3AQUJAQEKDgoJJQMMHQgBBQEcBhMFgxwBggE?=
 =?us-ascii?q?FCpp/PIodgh+CdgEBBYcqAwUSim2BHBEGgX+EI4MeAoc8kCSFNYpVBQcCAoZ9g?=
 =?us-ascii?q?y+GfiMKAoFPhRCCbjaHECyJUoNhilQCBAIEBQIFDyGBJYINgQWDJ4Ibg22KVj0?=
 =?us-ascii?q?yAYEDAQEBjhsBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="55528860"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 02:20:03 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726736AbeK3V2r (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 16:28:47 -0500
Received: from mail-pl1-f194.google.com ([209.85.214.194]:34175 "EHLO
        mail-pl1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726512AbeK3V2r (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 16:28:47 -0500
Received: by mail-pl1-f194.google.com with SMTP id w4so2596674plz.1
        for <linux-kernel@vger.kernel.org>; Fri, 30 Nov 2018 02:19:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=shutemov-name.20150623.gappssmtp.com; s=20150623;
        h=date:from:to:cc:subject:message-id:references:mime-version
         :content-disposition:in-reply-to:user-agent;
        bh=+YWiKKUgLodwOXkLIOrsJw0vbFaB8rOlRN4as8zZsNo=;
        b=XYU41ssUMqcMo4z5OxV7SXLEWoZtNaViopfCbGICP72b6GxkWYQrxISt5+wfJlOuM3
         eZxQuP4ft7fXRfoFkaeT6s9dfymCVufWXDMVfksO57rKnZB/eHm5x9Eu89FYJqwC6Npf
         vvdcc2oArr4gC9Ra40x14t4ZMftxzZiLwV8i4G2zdbKxcYYdDL94f0NB87x3/MoUq7RH
         j4txyG8NrxqI4AfgIvQ2jaZVGmc5Y/cNBMgOnyqeoEeLNb8qIIVkc4P3vQWmfBqJjh+g
         JUlBSh6fx+0qCPZHI71HlzbEq+RoD6chmnuBdkoAImscZsggxtg6Y4oEu70N5/CW+4u2
         8tvg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=+YWiKKUgLodwOXkLIOrsJw0vbFaB8rOlRN4as8zZsNo=;
        b=j1VQ4jrPzKQVtZnGWGHK8om9y1kZiM5Jppng5b9+HpXKGiTk4HgBOlmZQfPllozYNx
         b009WuZIc+/4quE6Qh4WzY8JQGegV7jX95DRnCUdGwp1UUDHNZlABt5Qq3AZathtH5vs
         mhB38RmF/Mi7T/iuzOCJ41MUf2y/4Gbw7TMF1HP9aB6f2tPIcpdNlIuZ5AYDxzmOImNH
         Hr/e/qBGCnJ4FgI/cWzDPRd3rJMmoldDRSuRQLpD2dKdPJNms4tq7wzsOv6dFaruPU8r
         ut3UyjeUpOPqSjbVTnY1uRjQK73WUd7BCjLGvEotr/+g0SRhwvZEA1FH/606oPtmiQYC
         22qg==
X-Gm-Message-State: AA+aEWaTJbeNlaKBi2/U30hOGd7ivfukgkYUO4qKUvI4Fiv+S5gdY4He
        T6aKkKudr7D6F6BZ75dQU0K7aQ==
X-Google-Smtp-Source: AFSGD/U4Ybf7UP3rv+snaICV1180DlgzIsnam5/CcIQ0PuWHTOmSuVnMDiIKX6D0MKe4MRXTPizVNg==
X-Received: by 2002:a17:902:e002:: with SMTP id ca2mr5193544plb.103.1543573198720;
        Fri, 30 Nov 2018 02:19:58 -0800 (PST)
Received: from kshutemo-mobl1.localdomain (fmdmzpr04-ext.fm.intel.com. [192.55.54.39])
        by smtp.gmail.com with ESMTPSA id k14sm11277530pgs.52.2018.11.30.02.19.57
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 30 Nov 2018 02:19:57 -0800 (PST)
Received: by kshutemo-mobl1.localdomain (Postfix, from userid 1000)
        id 8A83D30042C; Fri, 30 Nov 2018 13:19:53 +0300 (+03)
Date: Fri, 30 Nov 2018 13:19:53 +0300
From: "Kirill A. Shutemov" <kirill@shutemov.name>
To: Jan Stancek <jstancek@redhat.com>
Cc: linux-mm@kvack.org, lersek@redhat.com, alex.williamson@redhat.com,
        aarcange@redhat.com, rientjes@google.com,
        mgorman@techsingularity.net, mhocko@suse.com,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH] mm: page_mapped: don't assume compound page is huge or
 THP
Message-ID: <20181130101953.u4owfaqmaq2osuod@kshutemo-mobl1>
References: <eabca57aa14f4df723173b24891f4a2d9c501f21.1543526537.git.jstancek@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <eabca57aa14f4df723173b24891f4a2d9c501f21.1543526537.git.jstancek@redhat.com>
User-Agent: NeoMutt/20180716
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 29, 2018 at 10:53:48PM +0100, Jan Stancek wrote:
> LTP proc01 testcase has been observed to rarely trigger crashes
> on arm64:
>     page_mapped+0x78/0xb4
>     stable_page_flags+0x27c/0x338
>     kpageflags_read+0xfc/0x164
>     proc_reg_read+0x7c/0xb8
>     __vfs_read+0x58/0x178
>     vfs_read+0x90/0x14c
>     SyS_read+0x60/0xc0
> 
> Issue is that page_mapped() assumes that if compound page is not
> huge, then it must be THP. But if this is 'normal' compound page
> (COMPOUND_PAGE_DTOR), then following loop can keep running until
> it tries to read from memory that isn't mapped and triggers a panic:
>         for (i = 0; i < hpage_nr_pages(page); i++) {
>                 if (atomic_read(&page[i]._mapcount) >= 0)
>                         return true;
> 	}
> 
> I could replicate this on x86 (v4.20-rc4-98-g60b548237fed) only
> with a custom kernel module [1] which:
> - allocates compound page (PAGEC) of order 1
> - allocates 2 normal pages (COPY), which are initialized to 0xff
>   (to satisfy _mapcount >= 0)
> - 2 PAGEC page structs are copied to address of first COPY page
> - second page of COPY is marked as not present
> - call to page_mapped(COPY) now triggers fault on access to 2nd COPY
>   page at offset 0x30 (_mapcount)
> 
> [1] https://github.com/jstancek/reproducers/blob/master/kernel/page_mapped_crash/repro.c
> 
> This patch modifies page_mapped() to check for 'normal'
> compound pages (COMPOUND_PAGE_DTOR).
> 
> Debugged-by: Laszlo Ersek <lersek@redhat.com>
> Signed-off-by: Jan Stancek <jstancek@redhat.com>
> ---
>  include/linux/mm.h | 9 +++++++++
>  mm/util.c          | 2 ++
>  2 files changed, 11 insertions(+)
> 
> diff --git a/include/linux/mm.h b/include/linux/mm.h
> index 5411de93a363..18b0bb953f92 100644
> --- a/include/linux/mm.h
> +++ b/include/linux/mm.h
> @@ -700,6 +700,15 @@ static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
>  	return compound_page_dtors[page[1].compound_dtor];
>  }
>  
> +static inline int PageNormalCompound(struct page *page)
> +{
> +	if (!PageCompound(page))
> +		return 0;
> +
> +	page = compound_head(page);
> +	return page[1].compound_dtor == COMPOUND_PAGE_DTOR;
> +}
> +
>  static inline unsigned int compound_order(struct page *page)
>  {
>  	if (!PageHead(page))
> diff --git a/mm/util.c b/mm/util.c
> index 8bf08b5b5760..06c1640cb7b3 100644
> --- a/mm/util.c
> +++ b/mm/util.c
> @@ -478,6 +478,8 @@ bool page_mapped(struct page *page)
>  		return true;
>  	if (PageHuge(page))
>  		return false;
> +	if (PageNormalCompound(page))
> +		return false;
>  	for (i = 0; i < hpage_nr_pages(page); i++) {
>  		if (atomic_read(&page[i]._mapcount) >= 0)
>  			return true;

Thanks for catching this.

But I think the right fix would be to change the loop condition:

	for (i = 0; i < (1 << compund_order(page)); i++) {

Non-THP compound page also can be mapped and we need to check mapcount of
subpages.

Any objections?

If not, please update the patch.

-- 
 Kirill A. Shutemov
