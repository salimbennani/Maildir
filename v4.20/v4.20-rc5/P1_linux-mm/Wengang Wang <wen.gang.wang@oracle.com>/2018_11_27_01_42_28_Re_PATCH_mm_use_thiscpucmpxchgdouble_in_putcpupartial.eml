Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 12:18:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7BF2C5802E4;
	Mon, 26 Nov 2018 17:42:56 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 26 Nov 2018 17:42:56 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AZTj7fxX8UT4JqfpFM55DvsnWB/HV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhCAvqdThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBOuZWrIfzqFUBohS8GQaiC/jvyidKi3Ltwa030f4sHR3a0AEuHd8Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41KnHwivFb/NZwzj97ofIeQ0hrv6WW7JwftfaxE4hFgzbiFWc?=
 =?us-ascii?q?s4PlMCmT1uQCqWSa4fBvVeSgi2M8rAFxuCKgydsoiobXnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2S1Z7bMa6HJdMsyyWLZZ6T808T21ypSo3yaEKtYS6cSUI0Jgr2hHSZ+Gdf4SV?=
 =?us-ascii?q?7R/uVfydLSpliH9kYr6yhBC/+lW6xOLmTMm7ylNKozJFktbSsnAN0ATe6taISv?=
 =?us-ascii?q?Rj5EetwzWP2B7J6uFCP080kbDXK5k7wr4/jpYTsELDETHqmEjukqOaakEp9vK1?=
 =?us-ascii?q?5+npfLnqvIKQOoxohg3kM6kjmNSzAeEiPQgPW2ib9/681Lrm/UDhRLVKj/s2kr?=
 =?us-ascii?q?TWsZzDJsQUuLS5AwlL3YYn8hq/CDmn0NIGknkdN19FZh2HgJbzO13UI/D3E+2/?=
 =?us-ascii?q?g1Kynzdv3fzGOafhAprVInjZjLjhZap961JbyAcrydBf5pFUBa8bLPP8R0/8r9?=
 =?us-ascii?q?jYDh4/MwypzOfrEtR91oUCWW2RBq+VKr/dsViN5ug3OemDeJcVuCrhK/gi//Pu?=
 =?us-ascii?q?jWU2mV4Bfaaz2psbcnC4Hul8LEWfbnrhmdMBEWYMvgojQ+3mklyCUThPZ3msW6?=
 =?us-ascii?q?Iw/C00CIWjDY3bXICinKSB3DunHp1Rfm1GCFeMHmnye4WHXPcMbiSSIsh6nzwA?=
 =?us-ascii?q?VLihTZIh1B60uA/7zbpnMvTb+ikCuZ3/09h14vXZlQsu+jxsE8Sdz2aNQnlukW?=
 =?us-ascii?q?MTRz8226N/rVZnyliZ06h1mPhYFd1V5/NUXQY2L5/cz+pmC9/sXgLNZMuGSFGj?=
 =?us-ascii?q?Qt++GzE+Usoxw8MSY0Z6A9iijQrM3yywD78RlryEHpo08q3H0nj1JsZ9zWvG1a?=
 =?us-ascii?q?Y7g1knRMtPKXOphqpl+wfPAI7Jll2Tl7y2eqQEwC7N6GCDwHKTs05CTg5/T7/J?=
 =?us-ascii?q?XXAFaUvQttT2+EXCQ7iqCbQkNwtBzdWPKq9Lat3vkFVHS+3vONXYY2KthWiwAQ?=
 =?us-ascii?q?yEya+LbIrvY28dxjnSCFAYkwAP+naLLRUxCT2/o23AFjBuFUjgY0X38eZgrnO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?49/FZH1WfetwxhPpyhL7puhkIEfwRwpUPu0xR3CoNPkcUxqHMqzQxyKb+X0V9b?=
 =?us-ascii?q?djOY24zwNaPTKmXo4B+vbKvW0EnE0NmK4qcP9Og4q1L7sQ6zEkot7Xpm3MdV0n?=
 =?us-ascii?q?eG/ZrKERcdXoj3UkY08Bh6uarXYi0854PSyH1tPrO4sj7E29I1GuQlzgyscMtY?=
 =?us-ascii?q?MKOBDAXyCdEVB9CyKOw2nFikdhIFPP1I+KEoJc+ndvuG17StPOZvhz+miWVH4I?=
 =?us-ascii?q?Zg0kOD7SZ8S+jI34obzPGcxAeISzD8jFK5uMDthY9EfS0SHna4ySX8Ho5RZ7F9?=
 =?us-ascii?q?cpwRCWizJM273NN+iID3W35Z7VKsG0kJ2Mu0dhWMdVz92gtQ2F8ToXymnyu40j?=
 =?us-ascii?q?N1nysorqqZwCzB3eDieAAbNW5MQWlolU3sLpSsj9AGQEioaBAklRuk5Urgx6lX?=
 =?us-ascii?q?vr9/L3TVQUpTeyj2LmdiUra/t7aYYs5P7o8ovjtTUOimfV+aTbv9qQMA0yz/B2?=
 =?us-ascii?q?te2Cw7dzayt5X7hRN6kmGdLHV0rHbDYsF/3xTf5N/dRf5XwDUGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQg73jX819?=
 =?us-ascii?q?VwVyXIrRD8b5Lv16S7N+JnY0ZpCEX968p8BoFxjI8wiIsM1ngdg5Wf5WAHnnvr?=
 =?us-ascii?q?MdVHxaL+a2IART0RzN7U+gTl2FBjIWiPx4L2TXidxsphZ9+nYmIZwC497sZKCL?=
 =?us-ascii?q?uK47xAhyd6vl24rQfJa/hngjgd0ecu6GIdg+wRvQotzyadDaoIEUhWIyPsjAiI?=
 =?us-ascii?q?4M6krKpMemmva7ew2VF6ndCgCrGCvw5dVGz4epckAS9/8MF/PEjQ333074HuYM?=
 =?us-ascii?q?PQYs4Lth2IjxfAiPBYKI42lvoPnyZmOHjyvXs4y+4glhxu3Iq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfre/oOByJED04t3?=
 =?us-ascii?q?eXA77fHRKE5UdirnLPFY2rNn6NKHkYy9ViWAeSJEhFjA8IWzU6m4YzFhq2y8z5?=
 =?us-ascii?q?bEd5+jcR60b6qhRWz+JnKQL/Xn3DpAuyaTc0VZufLAdQ7g5Y/EfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiPqeteV+qR?=
 =?us-ascii?q?xZKyyIRm+SyANt6IPnlkAP02wU5DXXF/G8TElDQDUS0XlyTRb8GFoBew4DF4rs?=
 =?us-ascii?q?e68P7zQgLg+ZOPC6dOMdVo4x22gbmMN++ThCZ6KDZUzJAMxWXPyLgQwlESkTxu?=
 =?us-ascii?q?dyK2HLQEtC7NSr/Qm6BNAx4abSNzKNVH76Ym0gZRPs7bj8v/1qRkgf4tF1dFSV?=
 =?us-ascii?q?vhl9mzaswXOG69Lk3IBUaROLSCJD3G2MX3YaK6Sb1Ng+RYrRywuTCHE0D9OjSP?=
 =?us-ascii?q?jSXmVxeqMetUliGUIAReuJ2hchZqEWXjUNPmahihPNBrlzE53b00iW3MNWMHNT?=
 =?us-ascii?q?h8ckVNrqCf7C9Cg/V/HXBB4WRhLeWehymZ6OzYII4MsfR3GiR0i/5a4HMixrpV?=
 =?us-ascii?q?9i5EQvl1mCrUrtF2olCmkvOAyjxoUBdVrjZLhYSLvVhtOKnD95lAX2rE8wwJ7W?=
 =?us-ascii?q?mKFxsKoN5lWZXTvPVvx9mHpav1J38W6dPf/cIGC47LJcOWOXwuGRXsET/QSgAC?=
 =?us-ascii?q?SGj4G3vYghlinfed/3ua5qczrJekzIUDTPlUXVo6UOwTDEtNG8YLK5N6GDgjlO?=
 =?us-ascii?q?jI34Yz+XOioUyJF41htZfdW6fXWK23JQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AFAACBoPxbh0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2sng3mIGF+LToE3LRSKUYdghHcUgV8SAQE?=
 =?us-ascii?q?YEwGDLIEUhCMiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBA?=
 =?us-ascii?q?QIaBgQRCAEBNwEEAQkBAQoOCgICJgICA1QGDQYCAQEBgxyBeggEAaUAcHwzgnY?=
 =?us-ascii?q?BAQWCQ4RlCIELin56gRyBOIJrhGYxgmuCV4kbgXiESzROjyYHAoMQjhkGGIlhh?=
 =?us-ascii?q?ycskSSGOgIEAgQFAhMBgUaCDTMaBB9QgmyCGwkDF4NKinNRgQUBAY0WAQE?=
X-IPAS-Result: =?us-ascii?q?A0AFAACBoPxbh0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2sng3mIGF+LToE3LRSKUYdghHcUgV8SAQEYEwGDLIEUhCMiN?=
 =?us-ascii?q?AkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIaBgQRCAEBNwE?=
 =?us-ascii?q?EAQkBAQoOCgICJgICA1QGDQYCAQEBgxyBeggEAaUAcHwzgnYBAQWCQ4RlCIELi?=
 =?us-ascii?q?n56gRyBOIJrhGYxgmuCV4kbgXiESzROjyYHAoMQjhkGGIlhhycskSSGOgIEAgQ?=
 =?us-ascii?q?FAhMBgUaCDTMaBB9QgmyCGwkDF4NKinNRgQUBAY0WAQE?=
X-IronPort-AV: E=Sophos;i="5.56,284,1539673200"; 
   d="scan'208";a="54939570"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 17:42:54 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728151AbeK0Mi7 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 07:38:59 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:42358 "EHLO
        userp2120.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727542AbeK0Mi6 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 07:38:58 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
        by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wAR1cwIQ146577;
        Tue, 27 Nov 2018 01:42:35 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=subject : to : cc :
 references : from : message-id : date : mime-version : in-reply-to :
 content-type : content-transfer-encoding; s=corp-2018-07-02;
 bh=s5dRQ8CRGQQ7Iql8WJuQgIjftbcQQ2UAyPT96bhbf4c=;
 b=qin4ZdvaBliDOkYB6TmDnwz1BjxFkdafVTliMGKalbvyocrqHHm6FV64wZCgRvlsEIxe
 NUxRcowijGY1ne/H2Y38lLb5u3NcUlnEV9I6seTM3w00ekVC9tVIUmqFI1ilQxIyawrb
 J13R0hSdVg3cCNxPtZ0t7IOkEoXt94lCtWXADH6igr3oQcc0Ug57OR9MTJ0PIB2hfHlj
 ETVcKvZPi+/PhstwLtGGOgfk6fz7sjiK2TLfRHKJricTI9YqbEz+s8ilU+A4mn0eq5yW
 YIMmhKmidAQ+EgRQPJBchdyE1AHSV40LBH130lZb6UVMdzw8Vf0YnQzLn6f5vLuev92F Cg== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
        by userp2120.oracle.com with ESMTP id 2nxy9r150n-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Tue, 27 Nov 2018 01:42:35 +0000
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
        by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id wAR1gX5q013290
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Tue, 27 Nov 2018 01:42:34 GMT
Received: from abhmp0002.oracle.com (abhmp0002.oracle.com [141.146.116.8])
        by userv0121.oracle.com (8.14.4/8.13.8) with ESMTP id wAR1gVI8006179;
        Tue, 27 Nov 2018 01:42:32 GMT
Received: from [10.159.138.192] (/10.159.138.192)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Mon, 26 Nov 2018 17:42:31 -0800
Subject: Re: [PATCH] mm: use this_cpu_cmpxchg_double in put_cpu_partial
To: Wei Yang <richard.weiyang@gmail.com>
Cc: zhong jiang <zhongjiang@huawei.com>,
        Christopher Lameter <cl@linux.com>, penberg@kernel.org,
        David Rientjes <rientjes@google.com>, iamjoonsoo.kim@lge.com,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux-MM <linux-mm@kvack.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
References: <20181117013335.32220-1-wen.gang.wang@oracle.com>
 <5BF36EE9.9090808@huawei.com>
 <CADZGycb=kxdqSdbdXNWwmgyWp2CtC3-UFmy1-PqtdgS2BrmyjA@mail.gmail.com>
 <476b5d35-1894-680c-2bd9-b399a3f4d9ed@oracle.com>
 <20181127003638.2oyudcyene6hb6sb@master>
From: Wengang Wang <wen.gang.wang@oracle.com>
Organization: Oracle Corporation
Message-ID: <6e9efd77-b6af-40f4-56b0-c0572930b3e0@oracle.com>
Date: Mon, 26 Nov 2018 17:42:28 -0800
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <20181127003638.2oyudcyene6hb6sb@master>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Language: en-US
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9089 signatures=668685
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=2 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1811270010
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org



On 2018/11/26 16:36, Wei Yang wrote:
> On Mon, Nov 26, 2018 at 08:57:54AM -0800, Wengang Wang wrote:
>>
>> On 2018/11/25 17:59, Wei Yang wrote:
>>> On Tue, Nov 20, 2018 at 10:58 AM zhong jiang <zhongjiang@huawei.com> wrote:
>>>> On 2018/11/17 9:33, Wengang Wang wrote:
>>>>> The this_cpu_cmpxchg makes the do-while loop pass as long as the
>>>>> s->cpu_slab->partial as the same value. It doesn't care what happened to
>>>>> that slab. Interrupt is not disabled, and new alloc/free can happen in the
>>>>> interrupt handlers. Theoretically, after we have a reference to the it,
>>>>> stored in _oldpage_, the first slab on the partial list on this CPU can be
>>>>> moved to kmem_cache_node and then moved to different kmem_cache_cpu and
>>>>> then somehow can be added back as head to partial list of current
>>>>> kmem_cache_cpu, though that is a very rare case. If that rare case really
>>>>> happened, the reading of oldpage->pobjects may get a 0xdead0000
>>>>> unexpectedly, stored in _pobjects_, if the reading happens just after
>>>>> another CPU removed the slab from kmem_cache_node, setting lru.prev to
>>>>> LIST_POISON2 (0xdead000000000200). The wrong _pobjects_(negative) then
>>>>> prevents slabs from being moved to kmem_cache_node and being finally freed.
>>>>>
>>>>> We see in a vmcore, there are 375210 slabs kept in the partial list of one
>>>>> kmem_cache_cpu, but only 305 in-use objects in the same list for
>>>>> kmalloc-2048 cache. We see negative values for page.pobjects, the last page
>>>>> with negative _pobjects_ has the value of 0xdead0004, the next page looks
>>>>> good (_pobjects is 1).
>>>>>
>>>>> For the fix, I wanted to call this_cpu_cmpxchg_double with
>>>>> oldpage->pobjects, but failed due to size difference between
>>>>> oldpage->pobjects and cpu_slab->partial. So I changed to call
>>>>> this_cpu_cmpxchg_double with _tid_. I don't really want no alloc/free
>>>>> happen in between, but just want to make sure the first slab did expereince
>>>>> a remove and re-add. This patch is more to call for ideas.
>>>> Have you hit the really issue or just review the code ?
>>>>
>>>> I did hit the issue and fixed in the upstream patch unpredictably by the following patch.
>>>> e5d9998f3e09 ("slub: make ->cpu_partial unsigned int")
>>>>
>>> Zhong,
>>>
>>> I took a look into your upstream patch, while I am confused how your patch
>>> fix this issue?
>>>
>>> In put_cpu_partial(), the cmpxchg compare cpu_slab->partial (a page struct)
>>> instead of the cpu_partial (an unsigned integer). I didn't get the
>>> point of this fix.
>> I think the patch can't prevent pobjects from being set as 0xdead0000 (the
>> primary 4 bytes of LIST_POISON2).
>> But if pobjects is treated as unsigned integer,
>>
>> 2266???????????????????????????????????????????????? pobjects = oldpage->pobjects;
>> 2267???????????????????????????????????????????????? pages = oldpage->pages;
>> 2268???????????????????????????????????????????????? if (drain && pobjects > s->cpu_partial) {
>> 2269???????????????????????????????????????????????????????????????? unsigned long flags;
>>
> Ehh..., you mean (0xdead0000 > 0x02) ?
Yes.

> This is really a bad thing, if it wordarounds the problem like this.
It does.
> I strongly don't agree this is a *fix*. This is too tricky.
It's tricky. I don't know for what purpose the patch went in. The commit 
message was just saying _pobjects_ should be "unsigned"...

thanks,
wengang

>> line 2268 will be true in put_cpu_partial(), thus code goes to
>> unfreeze_partials(). This way the slabs in the cpu partial list can be moved
>> to kmem_cache_nod and then freed. So it fixes (or say workarounds) the
>> problem I see here (huge number of empty slabs stay in cpu partial list).
>>
>> thanks
>> wengang
>>
>>>> Thanks,
>>>> zhong jiang

