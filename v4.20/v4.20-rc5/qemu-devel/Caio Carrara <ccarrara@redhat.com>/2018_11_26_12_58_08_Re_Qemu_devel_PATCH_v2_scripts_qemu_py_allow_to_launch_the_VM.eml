Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 26 Nov 2018 21:38:24 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2B50B580322
	for <like.xu@linux.intel.com>; Mon, 26 Nov 2018 04:58:59 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 04:58:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A+k2HYxLFb33p3O3ZhdmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgfIvrxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJPUMhRSSJPAY28?=
 =?us-ascii?q?YIQTAOUcP+lXoZTzp0MMoBW8CgSgGe3ixiNWiX/txqA6z/gtHBva0AA8Bd8Crn?=
 =?us-ascii?q?LZp8j1OqcIVuC1ybHFwCvZYPNX3jf29ZbFfQo7ofGWR71wa9DewlQoGgzZklqf?=
 =?us-ascii?q?s5blPymP2eQXqWeW9PBgWvyyhG4nsQ5xviKjydsrionMn48YzE3P+yZhwIstO9?=
 =?us-ascii?q?G0VE12bcS5HJdNtCyWLZV6T80iTm1ypSo3yKUKtYCncCUO0pgr2hDSZ+Kdf4SV?=
 =?us-ascii?q?4R/uWvydLSl7iX9jZbmxnQy98VK6xe35TsS00EhFri5CktTUsnAN1gfT6tScSv?=
 =?us-ascii?q?dn8Ueh3yuP2xrU6uFeLkA4javbK5g/zb4sjpcfr1jPEyzslEnrkaObdV8o9vam?=
 =?us-ascii?q?5unneLnqu52RO5dxig7kM6QunsK/Af4/MggLR2Wb4Pqz1Lj+/UHgXbpFkOM2nb?=
 =?us-ascii?q?fdsJzDPssbobO5AwlJ3Yk98BazCDOm0NUbnXYZNl5Edw+HgpDtO1HPJvD4EPi+?=
 =?us-ascii?q?j06tkDdt2/DJILnhDo/RIXjElbfsZrB960layAo8y9Bf+ohYCrYbIPL8QkPxrs?=
 =?us-ascii?q?DXDgclMwyoxObqENF91oIdWW2RGKOYP77SvESM5uIuJemMeYAUtCz8K/gj+/7h?=
 =?us-ascii?q?k3s5lUUBcqmu2JtEIE2+BelsdkWFfWL30JBGFWYRohF4Suvsh1ufFzlJaDG3Vq?=
 =?us-ascii?q?M44zg9T4W+EYbEQJvqmbGEwWK3E4NbYjN7DEuRGyLtfoSAR/BecS+XP4ptnyIJ?=
 =?us-ascii?q?Uf27RpY82AqynAn9zbVhM6zT4CJPro/p1tV++7jOkwov/yd/FcWX3jKxSDRLl2?=
 =?us-ascii?q?IOSiV+0Kdk6Xd0zEuEyuBdhOdTFdFP+/oBBhgzNJjR1fd/I8r/VgLIYpGCT1Pw?=
 =?us-ascii?q?Efu8BjRkZdswxJclalxnEs+rxkTI1COwGbYPnpSRCZA0+76a1H/0cZUug03a3b?=
 =?us-ascii?q?Us2gF1CvBEMner0+smr1De?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAD37PtbhxHrdtBiGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTAqgQ+BFhOMEV+LIYINjjiJBBSBXxQYAxG?=
 =?us-ascii?q?BS4cYIjQJDQEDAQEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQI3D?=
 =?us-ascii?q?AopAwMBAgYBAQoYCR0IAwELBUkTBYMcAYIBAQSmOIoZiCODZheBQD+BEYMShGI?=
 =?us-ascii?q?EAoNLgiYCiSMPHYtVil4Jhj0/gnGHNyOBWU2HKzaBHIVlmDCBRoINMxoIGxWDJ?=
 =?us-ascii?q?wmCR20BAYguhQUpMYEHHIl3gXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAD37PtbhxHrdtBiGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTAqgQ+BFhOMEV+LIYINjjiJBBSBXxQYAxGBS4cYIjQJDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAQIDAQI3DAopAwMBAgYBAQo?=
 =?us-ascii?q?YCR0IAwELBUkTBYMcAYIBAQSmOIoZiCODZheBQD+BEYMShGIEAoNLgiYCiSMPH?=
 =?us-ascii?q?YtVil4Jhj0/gnGHNyOBWU2HKzaBHIVlmDCBRoINMxoIGxWDJwmCR20BAYguhQU?=
 =?us-ascii?q?pMYEHHIl3gXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,282,1539673200"; 
   d="scan'208";a="52618996"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 26 Nov 2018 04:58:58 -0800
Received: from localhost ([::1]:35612 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRGTY-0002cV-Kj
	for like.xu@linux.intel.com; Mon, 26 Nov 2018 07:58:56 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:53886)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <ccarrara@redhat.com>) id 1gRGT9-0002b2-SL
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 07:58:33 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <ccarrara@redhat.com>) id 1gRGT6-0003xA-Ju
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 07:58:31 -0500
Received: from mx1.redhat.com ([209.132.183.28]:42248)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <ccarrara@redhat.com>) id 1gRGT4-0003uE-IP
	for qemu-devel@nongnu.org; Mon, 26 Nov 2018 07:58:28 -0500
Received: from smtp.corp.redhat.com (int-mx05.intmail.prod.int.phx2.redhat.com
	[10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7A6C9305FCB2
	for <qemu-devel@nongnu.org>; Mon, 26 Nov 2018 12:58:23 +0000 (UTC)
Received: from localhost.localdomain (ovpn-116-49.gru2.redhat.com
	[10.97.116.49])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 737662D21F;
	Mon, 26 Nov 2018 12:58:12 +0000 (UTC)
Date: Mon, 26 Nov 2018 10:58:08 -0200
From: Caio Carrara <ccarrara@redhat.com>
To: Wainer dos Santos Moschetta <wainersm@redhat.com>
Message-ID: <20181126125807.GA14485@localhost.localdomain>
References: <20181121183900.10364-1-wainersm@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181121183900.10364-1-wainersm@redhat.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.49]);
	Mon, 26 Nov 2018 12:58:23 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2] scripts/qemu.py: allow to launch the VM
 without a monitor
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: crosa@redhat.com, philmd@redhat.com, qemu-devel@nongnu.org,
	ehabkost@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Nov 21, 2018 at 01:39:00PM -0500, Wainer dos Santos Moschetta wrote:
> QEMUMachine launches the VM with a monitor enabled, afterwards
> a qmp connection is attempted on _post_launch(). In case
> the QEMU process exits with an error, qmp.accept() reaches
> timeout and raises an exception.
> 
> But sometimes you don't need that monitor. As an example,
> when a test launches the VM expects its immediate crash,
> and only intend to check the process's return code. In this
> case the fact that launch() tries to establish the qmp
> connection (ending up in an exception) is troublesome.
> 
> So this patch adds the set_qmp_monitor() that allow to
> launch the VM without creating the monitor machinery. The
> method can be used to re-enable the monitor eventually.
> 
> Tested this change with the following Avocado test:
> 
> from avocado_qemu import Test
> 
> class DisableQmp(Test):

I think it would be fine to have this test added as a real test instead
of just let this here on commit message. Or at least we should have a
real use case that uses this new feature.

>     """
>     :avocado: enable
>     """
>     def test(self):
>         self.vm.add_args('--foobar')
>         self.vm.set_qmp_monitor(disabled=True)
>         self.vm.launch()
>         self.vm.wait()
>         self.assertEqual(self.vm.exitcode(), 1)
>         self.vm.shutdown()
> 
>         self.vm.set_qmp_monitor(disabled=False)
>         self.vm._args.remove('--foobar') # Hack
>         self.vm.launch()
>         res = self.vm.command('human-monitor-command',
>                               command_line='info version')
>         self.assertRegexpMatches(res, r'^(\d+\.\d+\.\d)')
> 
> Signed-off-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
> Reviewed-by: Caio Carrara <ccarrara@redhat.com>
> Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
> ---
> Changes in v2:
>   * Major refactor: replaced disable_qmp() with set_qmp_monitor()
>     that allow to disable the qmp monitor likewise, but also one can
>     re-enable it (set_qmp_monitor(disabled=False)).
>   * The logic to enabled/disable the monitor is back to
>     _base_args(). [ccarrara, ehabkost]
> ---
>  scripts/qemu.py | 72 ++++++++++++++++++++++++++++++++-----------------
>  1 file changed, 48 insertions(+), 24 deletions(-)
> 
> diff --git a/scripts/qemu.py b/scripts/qemu.py
> index 6e3b0e6771..54fe0e65d2 100644
> --- a/scripts/qemu.py
> +++ b/scripts/qemu.py
> @@ -115,6 +115,7 @@ class QEMUMachine(object):
>          self._events = []
>          self._iolog = None
>          self._socket_scm_helper = socket_scm_helper
> +        self._with_qmp = True   # Enable QMP monitor by default.
>          self._qmp = None
>          self._qemu_full_args = None
>          self._test_dir = test_dir
> @@ -229,15 +230,7 @@ class QEMUMachine(object):
>                  self._iolog = iolog.read()
>  
>      def _base_args(self):
> -        if isinstance(self._monitor_address, tuple):
> -            moncdev = "socket,id=mon,host=%s,port=%s" % (
> -                self._monitor_address[0],
> -                self._monitor_address[1])
> -        else:
> -            moncdev = 'socket,id=mon,path=%s' % self._vm_monitor
> -        args = ['-chardev', moncdev,
> -                '-mon', 'chardev=mon,mode=control',
> -                '-display', 'none', '-vga', 'none']
> +        args = ['-display', 'none', '-vga', 'none']
>          if self._machine is not None:
>              args.extend(['-machine', self._machine])
>          if self._console_device_type is not None:
> @@ -247,23 +240,33 @@ class QEMUMachine(object):
>                         self._console_address)
>              device = '%s,chardev=console' % self._console_device_type
>              args.extend(['-chardev', chardev, '-device', device])
> +        if self._with_qmp:
> +            if isinstance(self._monitor_address, tuple):
> +                moncdev = "socket,id=mon,host=%s,port=%s" % (
> +                    self._monitor_address[0],
> +                    self._monitor_address[1])
> +            else:
> +                moncdev = 'socket,id=mon,path=%s' % self._vm_monitor
> +            args.extend(['-chardev', moncdev, '-mon', 'chardev=mon,mode=control'])
> +
>          return args
>  
>      def _pre_launch(self):
>          self._temp_dir = tempfile.mkdtemp(dir=self._test_dir)
> -        if self._monitor_address is not None:
> -            self._vm_monitor = self._monitor_address
> -        else:
> -            self._vm_monitor = os.path.join(self._temp_dir,
> -                                            self._name + "-monitor.sock")
>          self._qemu_log_path = os.path.join(self._temp_dir, self._name + ".log")
>          self._qemu_log_file = open(self._qemu_log_path, 'wb')
>  
> -        self._qmp = qmp.qmp.QEMUMonitorProtocol(self._vm_monitor,
> -                                                server=True)
> -
> +        if self._with_qmp:
> +            if self._monitor_address is not None:
> +                self._vm_monitor = self._monitor_address
> +            else:
> +                self._vm_monitor = os.path.join(self._temp_dir,
> +                                            self._name + "-monitor.sock")
> +            self._qmp = qmp.qmp.QEMUMonitorProtocol(self._vm_monitor,
> +                                                    server=True)
>      def _post_launch(self):
> -        self._qmp.accept()
> +        if self._qmp:
> +            self._qmp.accept()
>  
>      def _post_shutdown(self):
>          if self._qemu_log_file is not None:
> @@ -325,7 +328,8 @@ class QEMUMachine(object):
>          Wait for the VM to power off
>          """
>          self._popen.wait()
> -        self._qmp.close()
> +        if self._qmp:

Isn't the self._with_qmp attribute that should be used here? I think
it's important to standardize the checks for qmp availability in
`with_qmp` attribute and use the `qmp` only for qmp access itself. There
are other places that uses qmp to this kind of check too.

> +            self._qmp.close()
>          self._load_io_log()
>          self._post_shutdown()
>  
> @@ -334,11 +338,14 @@ class QEMUMachine(object):
>          Terminate the VM and clean up
>          """
>          if self.is_running():
> -            try:
> -                self._qmp.cmd('quit')
> -                self._qmp.close()
> -            except:
> -                self._popen.kill()
> +            if self._qmp:
> +                try:
> +                    self._qmp.cmd('quit')
> +                    self._qmp.close()
> +                except:
> +                    self._popen.kill()
> +            else:
> +                self._popen.terminate()
>              self._popen.wait()
>  
>          self._load_io_log()
> @@ -355,6 +362,23 @@ class QEMUMachine(object):
>  
>          self._launched = False
>  
> +    def set_qmp_monitor(self, disabled=False, monitor_address=None):

Where is this new method being used?

> +        """
> +        Set the QMP monitor.
> +
> +        @param disabled: if True, qmp monitor options will be removed from the
> +                         base arguments of the resulting QEMU command line.
> +        @param monitor_address: address for the QMP monitor.
> +        @note: call this function before launch().
> +        """
> +        if disabled:
> +            self._with_qmp = False
> +            self._qmp = None
> +        else:
> +            self._with_qmp = True
> +            if monitor_address:
> +                self._monitor_address = monitor_address
> +
>      def qmp(self, cmd, conv_keys=True, **args):
>          """
>          Invoke a QMP command and return the response dict
> -- 
> 2.19.1
> 

It would be nice see less scattered checks for qmp availability along
the code. 

Thanks.
-- 
Caio Carrara
Software Engineer, Virt Team - Red Hat
ccarrara@redhat.com

