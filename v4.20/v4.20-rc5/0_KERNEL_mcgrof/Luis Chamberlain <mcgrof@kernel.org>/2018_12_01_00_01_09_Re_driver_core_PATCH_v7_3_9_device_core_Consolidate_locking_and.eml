Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:26:11 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EFEDE580C82;
	Sat,  1 Dec 2018 18:20:45 -0800 (PST)
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id DE8D2603AB;
	Fri, 30 Nov 2018 16:02:25 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 16:01:32 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AKylhKhTXY43HbKeNZjhngGgRx9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa64YBOEt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KpwVhTmlD?=
 =?us-ascii?q?kIOCI48GHPi8x/kqRboA66pxdix4LYeZyZOOZicq/Ye94RWGhPUdtLVyFZDI2y?=
 =?us-ascii?q?b5UBAfcCM+ZWoIbyu0YBohmwCgm3HOPiyCRFhmPq0aEmz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO6z0anIzC7DZO5I1Df98ofIdwsuru+WXbJ0a8XRyE8vHB7Cg1WV?=
 =?us-ascii?q?tYPlMCmV1uMDs2WA7OpvS/ivi2g5pAF1uDSvwd0siobQi48T11vK9j15zZ4rKd?=
 =?us-ascii?q?GkTEN3e8OoHZVOuy2AKod7Qd8uT3tptSs40rELu5C2cDIIxZg63RLSZOCLf5KL?=
 =?us-ascii?q?7x/jUuuaPC12i2h/eL2lgha/6UigxfP4VsmzyFtKsCVFncfWtnwX1Bzc9NKHSv?=
 =?us-ascii?q?1j8UelwzqP0BrT6u5cLUA1k6rUNYIhz6YumpYPtUnPBDL6lUvogKOMa0kp+fSk?=
 =?us-ascii?q?5/7mb7jkvpOcMpV7igD6MqQggMy/BuE4PxAKX2ia/+S8ybLi8VT6QLpUlP02lL?=
 =?us-ascii?q?fWsJTDKcQcqK+5BRFa0pw45hahADepzs4YkWMELF1bYhKHiZbmO1XULPD/F/e/?=
 =?us-ascii?q?jEygkC13yPDeIr3hHpLNI2DHkLfgfrZy9VRQyQUuzd1E45JUC7cBIO/8W0Prtd?=
 =?us-ascii?q?zYCAM5PBKww+r9FNp90YYeU3qVAqCFKKPSrUOI5uU3LumMfoAVuSr9JOIi5/L0?=
 =?us-ascii?q?jX85hEUSfa+m3ZYMbHC4H/JmI1iWYHb2g9cBF3sKsRQ6TODwlFKCVjtTbW6oX6?=
 =?us-ascii?q?0g/jE7FJ6mDYDbS4Cvh7yOwj23Hp5RZmBADFCMFmzld4GFW/cKdSKTLdVtkj0C?=
 =?us-ascii?q?Vbi9VYAh0QuiuxP9y7piNuDU4DEXtYr/1Nhp4O3ejQs99Sd0D8Sa0GGBVXt0kX?=
 =?us-ascii?q?kKRzIt2KB/oEp9ykqM0KRigvxYE8BT6O1NUgsgKZHcyOl6AcjoWg3dZteJVEqm?=
 =?us-ascii?q?QtK+DDEyVN0xxcUCY0J8G9q4iBDD0DGnA7sUl7yNGZw1/bjQ33n3J8Zh1XnG0L?=
 =?us-ascii?q?MtgEUhQstKLWemnLJw9xDPB47VlEWUj7uler4C3CHT7muDzXCBvEdDUAFuV6XJ?=
 =?us-ascii?q?WnQfZkjTrdT9/U7CS76uCbI6MgpO08KCK61KasH3glVCXvvsJNPeY2epkWeqGR?=
 =?us-ascii?q?mI3q+MbJbte2gFwSrSElYEnB4J8XaGLwc+ADyhrHzYDDF1EVLvYkXs8fRxqX+h?=
 =?us-ascii?q?T080yR2KYFNl17av5hEVgvmcQesJ3r0YoCchtyl0HFGl0tLKCtqAog1hfLlcYd?=
 =?us-ascii?q?I9+ltHyXjVtwtnPpykLqBigFEefh9zv0Pv0RV3F4pBndIrrHMs0Ap9N6aY3Eld?=
 =?us-ascii?q?eDOf2JD6IqfXJXXq/BCzd67W3UnT38yS+qgR5/U3tVXisBuyGUo/7npoyd9V03?=
 =?us-ascii?q?ib5pXUFwcSVZPxUkAq9xl1vb3aYy8955/K2n1oK6W7rjjC29cxDus/1hmgZ8tf?=
 =?us-ascii?q?ML+DFALqE8waGtKiJ/Awl1mobhILJuZS9KEvMsOidvuG3rOrPel6kDKni2RH/J?=
 =?us-ascii?q?5y0kaW+yVgTe7I2o4Pw+uE0QufSzf8kFChv9jtmYBFeT4dBHC/xjXjBIJLYK19?=
 =?us-ascii?q?Y5wLCWa3L8Kr3Np+g4PiVGBC9F6kAVMLw8upeRuUb1zg0gxcz0UXoXq7mSSmyz?=
 =?us-ascii?q?x4iS0mrq2a3CbW2eTtaAIHOnJXRGlllVrtIYm0g8oaXUSydAgpiR2l6F3+x6ha?=
 =?us-ascii?q?oqR/MmbSTV1JfyjwM2FtTK+wuqCebM5I7ZMiqT9XX/ikYVCGVr79pAMX0yH5EG?=
 =?us-ascii?q?tExzA7dDaqto/inxNgi2KdL3dzrHzHdsF23hrf4N3cRfhM3jsJXiV4iD/XBkSi?=
 =?us-ascii?q?MNmt59mbi5DDsuWmXWK7SpJTaTXrzZ+HtCaj5WxlGxq/k+qxmt3mFwg3yiv719?=
 =?us-ascii?q?hsVSXVoxfweIjr16KmMe15eklkHkPz681/GotmiIs/mIkQ2WQGhpWS5XcHkn38?=
 =?us-ascii?q?MdRB1aL+cXoCXzgLw9HO7Qjh2U1jKG+Jxo3jWnWcxMthe8e1YmcM1i0h6MBKDb?=
 =?us-ascii?q?+e7KZYkittvlq4sQXRbOB4njccyvsh8mQWgu8Xtwo20iWSHKoSElJGMiz2mBSF?=
 =?us-ascii?q?9NS+rKRRZGayfrm8zkt+nda9DL6cpgFQQmr2epAnHSVo9MVwLErM0GHv6oHjYN?=
 =?us-ascii?q?TQcdUTthiOnxbBledVLo8xluERhSpmIm/9uXwly+gmjR1hx526vY6HK3lz86K9?=
 =?us-ascii?q?GBJXKjr1Z8YL8DH3kalehtqW35yoHph5AToERpzoTfa1ED4IsfTnKh2DEDk9qn?=
 =?us-ascii?q?edBLreEhWT6EZgr3LTDZ+rM2ubK2UezdVnXBOdPlBQgBgIXDUmmZ40DgKqy9bk?=
 =?us-ascii?q?cEhn/TAd/EL4pgFPyuJ1NBn/T2Hfqx2zajovTJifLRxW7hxN5kvPMMye6P5zED?=
 =?us-ascii?q?9c/pG7sAONLWmbbRxSDW4VQkyEG0zjPr626NjA9OiYG/O+L+bUbrWIs+BeTPCI?=
 =?us-ascii?q?xZSg0oZ9+zaMN8OPPmRtDvEh20pDW2x5FNrdmzkVVyMXkCfNZdaBpBig4i13st?=
 =?us-ascii?q?y/8PPzVQLv+4SPCrhSMdZu+xysgqeDLemQhClnJjZCy5MM3mTFyLwe3F4UliFv?=
 =?us-ascii?q?eCOhEbUGtS7RUq3QnrVbAAIcayN2LMFI9b4z3hFROc7HjdP4zqR3juMuBFdfS1?=
 =?us-ascii?q?PgmtulZcgLI2ymMFPHBUCLNKmJJDHRwsH3Z7+8RqNUjOlOqxKwvjObGVf5Pjuf?=
 =?us-ascii?q?jznpSwyvMeZUgSGHPRxevZuxfQp3BWf/TNLpdBu7PcRzjT03x700m3zLOXQdMT?=
 =?us-ascii?q?h6b0NCsLmQ4TlEjfV4HmxL9mBlIvWcmyaF8+nYLY4bsPtxDSRykuJa4XI6xKNU?=
 =?us-ascii?q?7SFEXvN1niTSo8Vqo1GnlOmP1zVmXABPqjZNmIKEo0FiNb/F+ZlHXHaXtC4KuE?=
 =?us-ascii?q?yUBgQDoddoEJXDprFbyZCbnab+OD5E/9/Ou8taC9XFI8GvNHsnLAqvGTjIAQ9D?=
 =?us-ascii?q?RjmuYzLxnUtYxdWP92bdhZgzr5Lhgp4HS7kTAFk+GekdBGxmEcYELZMxWSkrx+?=
 =?us-ascii?q?3IxPUU7Gaz+UGCDP5RuYrKA7fLWa3i?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADczgFch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMEV+LfgaBNRSJC44pgXMSAQEYEwGHdiI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYQEBAQECAQECJBM/BQEJAQEKGAklA?=
 =?us-ascii?q?wwFIAEFASITBYMcgXUFCAWbCzyMCTOKLRKIH4NpF3iBB4ERgxKKXAKJLYV9fJA?=
 =?us-ascii?q?PCZEsI4Fbh34Yhy6CeocEjjgGAgkHDyGBJYINfQiDJ4InFxKOLB8yAQGBAwEBj?=
 =?us-ascii?q?VwBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAADczgFch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMEV+LfgaBNRSJC44pgXMSAQEYEwGHdiI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpL4I2JAGCYQEBAQECAQECJBM/BQEJAQEKGAklAwwFIAEFASITBYM?=
 =?us-ascii?q?cgXUFCAWbCzyMCTOKLRKIH4NpF3iBB4ERgxKKXAKJLYV9fJAPCZEsI4Fbh34Yh?=
 =?us-ascii?q?y6CeocEjjgGAgkHDyGBJYINfQiDJ4InFxKOLB8yAQGBAwEBjVwBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,300,1539673200"; 
   d="scan'208";a="54476220"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 16:01:30 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727002AbeLALMV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 06:12:21 -0500
Received: from mail-pf1-f196.google.com ([209.85.210.196]:42154 "EHLO
        mail-pf1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726013AbeLALMS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 06:12:18 -0500
Received: by mail-pf1-f196.google.com with SMTP id 64so3544925pfr.9;
        Fri, 30 Nov 2018 16:01:14 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:references
         :mime-version:content-disposition:in-reply-to:user-agent;
        bh=nuWNhIUijinqJI7JFlF7z/UWKHZ7eECm3FVwHYX/q0s=;
        b=ZXqCk78vjO2phfyJX5gb86Adl/ALUa9Kc0zh1LtiNsDIX0xxXTEjyuNAOvSV73rOQi
         GiUFDx60PV8cmPaHTvEVW1H4c3B0KaJGT6Ild3JoKrQjuhJxQKyDvWK9Yhn7Tw1HqdlF
         ygx3BDBs1bGDi158h8vGdWuTLPbZn2oDt+IVGRZKBNfMH/81m+58z3aVeNhj7+nN1FkR
         3NoVxgnnAOkXenF+vt3/F1Stq4Jexfye2vA6vKGH8t4oCm77NSNsIQVJPyKx/SWXeOKB
         oXCR/zKH7Wl4+fr/RWD8H7tkHyRQsdXkiHid8wKaTV3YBVSy8NeWvWYrkV8/3S+4VfTL
         sltA==
X-Gm-Message-State: AA+aEWa/lpf9WBe0uZQvzQBGJs9uR7DZA/oladsVP8Oq8Pl1WlHiTuSR
        NF6AjHkx5yaNufmIT2tNxT8=
X-Google-Smtp-Source: AFSGD/W0feYBwzRsBaXgQWp6/RT7AdsR+A4FqYvV8AlpAmPsiRLxMKip4MvVo/PRXeQ+MQMXjqBqrQ==
X-Received: by 2002:a63:8742:: with SMTP id i63mr6359226pge.298.1543622473498;
        Fri, 30 Nov 2018 16:01:13 -0800 (PST)
Received: from garbanzo.do-not-panic.com (c-73-71-40-85.hsd1.ca.comcast.net. [73.71.40.85])
        by smtp.gmail.com with ESMTPSA id f8-v6sm10078238pff.29.2018.11.30.16.01.10
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Fri, 30 Nov 2018 16:01:12 -0800 (PST)
Received: by garbanzo.do-not-panic.com (sSMTP sendmail emulation); Fri, 30 Nov 2018 16:01:09 -0800
Date: Fri, 30 Nov 2018 16:01:09 -0800
From: Luis Chamberlain <mcgrof@kernel.org>
To: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Cc: linux-kernel@vger.kernel.org, gregkh@linuxfoundation.org,
        linux-nvdimm@lists.01.org, tj@kernel.org,
        akpm@linux-foundation.org, linux-pm@vger.kernel.org,
        jiangshanlai@gmail.com, rafael@kernel.org, len.brown@intel.com,
        pavel@ucw.cz, zwisler@kernel.org, dan.j.williams@intel.com,
        dave.jiang@intel.com, bvanassche@acm.org
Subject: Re: [driver-core PATCH v7 3/9] device core: Consolidate locking and
 unlocking of parent and device
Message-ID: <20181201000109.GG28501@garbanzo.do-not-panic.com>
References: <154345118835.18040.17186161872550839244.stgit@ahduyck-desk1.amr.corp.intel.com>
 <154345154182.18040.12736221516488918534.stgit@ahduyck-desk1.amr.corp.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <154345154182.18040.12736221516488918534.stgit@ahduyck-desk1.amr.corp.intel.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 04:32:21PM -0800, Alexander Duyck wrote:
> Try to consolidate all of the locking and unlocking of both the parent and
> device when attaching or removing a driver from a given device.
> 
> To do that I first consolidated the lock pattern into two functions
> __device_driver_lock and __device_driver_unlock. After doing that I then
> created functions specific to attaching and detaching the driver while
> acquiring these locks. By doing this I was able to reduce the number of
> spots where we touch need_parent_lock from 12 down to 4.

While this later is true, it gives the impression there are functional
changes but I see none. It can help reviewers / future reviewers of this
commit if its clearly stated that this patch introduces no functional
changes.

> Reviewed-by: Bart Van Assche <bvanassche@acm.org>
> Reviewed-by: Dan Williams <dan.j.williams@intel.com>
> Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
> Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>

Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>

  Luis
> ---
>  drivers/base/base.h |    2 +
>  drivers/base/bus.c  |   23 ++-----------
>  drivers/base/dd.c   |   91 ++++++++++++++++++++++++++++++++++++++++-----------
>  3 files changed, 77 insertions(+), 39 deletions(-)
> 
> diff --git a/drivers/base/base.h b/drivers/base/base.h
> index 7a419a7a6235..3f22ebd6117a 100644
> --- a/drivers/base/base.h
> +++ b/drivers/base/base.h
> @@ -124,6 +124,8 @@ extern int driver_add_groups(struct device_driver *drv,
>  			     const struct attribute_group **groups);
>  extern void driver_remove_groups(struct device_driver *drv,
>  				 const struct attribute_group **groups);
> +int device_driver_attach(struct device_driver *drv, struct device *dev);
> +void device_driver_detach(struct device *dev);
>  
>  extern char *make_class_name(const char *name, struct kobject *kobj);
>  
> diff --git a/drivers/base/bus.c b/drivers/base/bus.c
> index 8bfd27ec73d6..8a630f9bd880 100644
> --- a/drivers/base/bus.c
> +++ b/drivers/base/bus.c
> @@ -184,11 +184,7 @@ static ssize_t unbind_store(struct device_driver *drv, const char *buf,
>  
>  	dev = bus_find_device_by_name(bus, NULL, buf);
>  	if (dev && dev->driver == drv) {
> -		if (dev->parent && dev->bus->need_parent_lock)
> -			device_lock(dev->parent);
> -		device_release_driver(dev);
> -		if (dev->parent && dev->bus->need_parent_lock)
> -			device_unlock(dev->parent);
> +		device_driver_detach(dev);
>  		err = count;
>  	}
>  	put_device(dev);
> @@ -211,13 +207,7 @@ static ssize_t bind_store(struct device_driver *drv, const char *buf,
>  
>  	dev = bus_find_device_by_name(bus, NULL, buf);
>  	if (dev && dev->driver == NULL && driver_match_device(drv, dev)) {
> -		if (dev->parent && bus->need_parent_lock)
> -			device_lock(dev->parent);
> -		device_lock(dev);
> -		err = driver_probe_device(drv, dev);
> -		device_unlock(dev);
> -		if (dev->parent && bus->need_parent_lock)
> -			device_unlock(dev->parent);
> +		err = device_driver_attach(drv, dev);
>  
>  		if (err > 0) {
>  			/* success */
> @@ -769,13 +759,8 @@ EXPORT_SYMBOL_GPL(bus_rescan_devices);
>   */
>  int device_reprobe(struct device *dev)
>  {
> -	if (dev->driver) {
> -		if (dev->parent && dev->bus->need_parent_lock)
> -			device_lock(dev->parent);
> -		device_release_driver(dev);
> -		if (dev->parent && dev->bus->need_parent_lock)
> -			device_unlock(dev->parent);
> -	}
> +	if (dev->driver)
> +		device_driver_detach(dev);
>  	return bus_rescan_devices_helper(dev, NULL);
>  }
>  EXPORT_SYMBOL_GPL(device_reprobe);
> diff --git a/drivers/base/dd.c b/drivers/base/dd.c
> index ef3f70a7cb5a..d2515520569e 100644
> --- a/drivers/base/dd.c
> +++ b/drivers/base/dd.c
> @@ -875,6 +875,60 @@ void device_initial_probe(struct device *dev)
>  	__device_attach(dev, true);
>  }
>  
> +/*
> + * __device_driver_lock - acquire locks needed to manipulate dev->drv
> + * @dev: Device we will update driver info for
> + * @parent: Parent device. Needed if the bus requires parent lock
> + *
> + * This function will take the required locks for manipulating dev->drv.
> + * Normally this will just be the @dev lock, but when called for a USB
> + * interface, @parent lock will be held as well.
> + */
> +static void __device_driver_lock(struct device *dev, struct device *parent)
> +{
> +	if (parent && dev->bus->need_parent_lock)
> +		device_lock(parent);
> +	device_lock(dev);
> +}
> +
> +/*
> + * __device_driver_unlock - release locks needed to manipulate dev->drv
> + * @dev: Device we will update driver info for
> + * @parent: Parent device. Needed if the bus requires parent lock
> + *
> + * This function will release the required locks for manipulating dev->drv.
> + * Normally this will just be the the @dev lock, but when called for a
> + * USB interface, @parent lock will be released as well.
> + */
> +static void __device_driver_unlock(struct device *dev, struct device *parent)
> +{
> +	device_unlock(dev);
> +	if (parent && dev->bus->need_parent_lock)
> +		device_unlock(parent);
> +}
> +
> +/**
> + * device_driver_attach - attach a specific driver to a specific device
> + * @drv: Driver to attach
> + * @dev: Device to attach it to
> + *
> + * Manually attach driver to a device. Will acquire both @dev lock and
> + * @dev->parent lock if needed.
> + */
> +int device_driver_attach(struct device_driver *drv, struct device *dev)
> +{
> +	int ret = 0;
> +
> +	__device_driver_lock(dev, dev->parent);
> +
> +	if (!dev->driver)
> +		ret = driver_probe_device(drv, dev);
> +
> +	__device_driver_unlock(dev, dev->parent);
> +
> +	return ret;
> +}
> +
>  static int __driver_attach(struct device *dev, void *data)
>  {
>  	struct device_driver *drv = data;
> @@ -902,14 +956,7 @@ static int __driver_attach(struct device *dev, void *data)
>  		return ret;
>  	} /* ret > 0 means positive match */
>  
> -	if (dev->parent && dev->bus->need_parent_lock)
> -		device_lock(dev->parent);
> -	device_lock(dev);
> -	if (!dev->driver)
> -		driver_probe_device(drv, dev);
> -	device_unlock(dev);
> -	if (dev->parent && dev->bus->need_parent_lock)
> -		device_unlock(dev->parent);
> +	device_driver_attach(drv, dev);
>  
>  	return 0;
>  }
> @@ -948,15 +995,11 @@ static void __device_release_driver(struct device *dev, struct device *parent)
>  	drv = dev->driver;
>  	if (drv) {
>  		while (device_links_busy(dev)) {
> -			device_unlock(dev);
> -			if (parent)
> -				device_unlock(parent);
> +			__device_driver_unlock(dev, parent);
>  
>  			device_links_unbind_consumers(dev);
> -			if (parent)
> -				device_lock(parent);
>  
> -			device_lock(dev);
> +			__device_driver_lock(dev, parent);
>  			/*
>  			 * A concurrent invocation of the same function might
>  			 * have released the driver successfully while this one
> @@ -1009,16 +1052,12 @@ void device_release_driver_internal(struct device *dev,
>  				    struct device_driver *drv,
>  				    struct device *parent)
>  {
> -	if (parent && dev->bus->need_parent_lock)
> -		device_lock(parent);
> +	__device_driver_lock(dev, parent);
>  
> -	device_lock(dev);
>  	if (!drv || drv == dev->driver)
>  		__device_release_driver(dev, parent);
>  
> -	device_unlock(dev);
> -	if (parent && dev->bus->need_parent_lock)
> -		device_unlock(parent);
> +	__device_driver_unlock(dev, parent);
>  }
>  
>  /**
> @@ -1043,6 +1082,18 @@ void device_release_driver(struct device *dev)
>  }
>  EXPORT_SYMBOL_GPL(device_release_driver);
>  
> +/**
> + * device_driver_detach - detach driver from a specific device
> + * @dev: device to detach driver from
> + *
> + * Detach driver from device. Will acquire both @dev lock and @dev->parent
> + * lock if needed.
> + */
> +void device_driver_detach(struct device *dev)
> +{
> +	device_release_driver_internal(dev, NULL, dev->parent);
> +}
> +
>  /**
>   * driver_detach - detach driver from all devices it controls.
>   * @drv: driver.
> 
