Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:46:47 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id A9DAA5803C2;
	Tue, 27 Nov 2018 08:18:19 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 08:18:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Az/SRLBKth5jy2SRYudmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUIvj/rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQ8hfSSJBDIO/?=
 =?us-ascii?q?YYUBAeUOMuRXoJXyqVsVtRuzBxKhBP/txzJSmnP6waM33uYnHArb3AIgBdUOsH?=
 =?us-ascii?q?HModv3LqgSV/u1x7TVwjrdcvhY2DD955bVfR8/vPqBWrJwftfPxkkgEAPKkEif?=
 =?us-ascii?q?ppL+MjOPyOsCrmib4PB8Ve61l2EnrARxryGpy8wxiYfJnpoYxk7Y+Sh92oo5ON?=
 =?us-ascii?q?O1RFBhbdK5E5ZcqzuWOop0T886QGxltzw2xqAatZO6ZiQHy5sqywTeZvGHdYWD?=
 =?us-ascii?q?/wjtW/yLIThigXJoYLK/iAi28Uin0uD8SMa030hQriZfkdnDqGoN1xrN5ciDUP?=
 =?us-ascii?q?d9+V2h2TmX2wDS7OFLP1w0mLLFJ5I9xrM8jIcfvErdEiPshUn7j7Oael8l9+Wq?=
 =?us-ascii?q?8+jnZ6/ppp6YN496kAH+NaEul9S7AeQ5NAgOQmea9f2/1LL95035RqtFjvkvnq?=
 =?us-ascii?q?nevpHaI9oUprSiDg9L3YYs9Qy/Ay2l0NsGh3kHKkxKeBadg4juIVHOL+j0De2j?=
 =?us-ascii?q?jFS0jDdr2/fGM6XlApXMLXjMjq3tfLlg60NHzAozzNZf549bC70bIfLzXFPxu8?=
 =?us-ascii?q?LcDhMjLwO0xOPnAs1n1owCQWKPHrOZMKTKvF+I/O0vIvWMa5USuDrnK/gl+uTh?=
 =?us-ascii?q?jXk2mVIGeamp3J0XaG23H/h8IkWZZ2bsjckFEWsQogU+S+nqgkWYUTFPf3ayQ7?=
 =?us-ascii?q?485jYjBYKkCofMWJqhgL+G3Ce9GJ1WYXtLClSNEXfuaoWFVO0AaCOUIs99jDME?=
 =?us-ascii?q?UaKtRJMm1RGrrAX60aZoLvLI+i0EspLuzMJ65/bTlRE19jx4Fd6d3HuPT2xvmm?=
 =?us-ascii?q?MIRjk23L1woEBny1eD17R4jOJcFdBJ+/xJVQI6P4bGz+NmE9DyRh7BftCRRVal?=
 =?us-ascii?q?WNqmBys9TtYww9AUZUZ9FM6vjhTC3yqsHr8UmKaHBJ0y8qLAwXfxI9xxxGrB1K?=
 =?us-ascii?q?kkl1MmWNdANXW6hq5j8AjeH5PGnF+Hl6m0b6gc3DTC9GGYzWWQukFUVwpwUabA?=
 =?us-ascii?q?XXAbfUbWqdX55kXfT76hE7gnMw1BydKcJatOcNHmkVJGRPL7MtTEf22xg3uwBQ?=
 =?us-ascii?q?qPxr6UcYXlYXsd0zvHBEgEiQ8T+22GOhY4Biq6p2LeDTpuFU/gYk/28Ol+rm+7?=
 =?us-ascii?q?QVEwzw2Qc0Jh0L+18AYPhfOAU/MTwq4EuCA5pjVoHVa92tXWC8aApwthZqlcfc?=
 =?us-ascii?q?kx4FBd1WLdtgx9OJOgIrtmhl4fdQR3okzv2w92CoVGjcglsncqwBBuJqKf1VNL?=
 =?us-ascii?q?bymY0ozoOr3LNmny+wiiZLTS2l7A39eZ5KcO5O4jpFX+oQ6mDEwi83Zg09lLyH?=
 =?us-ascii?q?ac4pTKDAwPUZP+SEo39h56p63EbSk5/Y/byXpsMaysuD/Yx90pHPclygqnf9pH?=
 =?us-ascii?q?MKKECRX+HNEAC8mvKOwlgV6pbh0fMeBW9a40Od6mdvSc1K6qOuZggCypjWBd7I?=
 =?us-ascii?q?9h1UKM8jJ2SvTU0JYd3/GYwgyHWi/mjFegrs/4g5pEaiwVHmalzyjrGpRRZqxr?=
 =?us-ascii?q?cYkXE2iuJ9C4yctkh57qXX5V71qjB1IA2M+0dhuedV393QtM1UsJpXyrgze3zz?=
 =?us-ascii?q?txkzsxtKqQwDTOw/j+dBoAImNKRGhigU3sIISulNAaQU6oYhMtlBuk40b62qda?=
 =?us-ascii?q?qL5+L2nVXUdHYSz2I3t+Xau3s7qIe9RP548wsSVLTOS8ZkiXSrznrBsA0CPjHG?=
 =?us-ascii?q?xeyCogdz6wuZX5nB16iGSDI3Z1t3fZfcBwxRHC5N3TX/JR3zwGRDVmhjnTHFSz?=
 =?us-ascii?q?I96p/dCMnZfZru++T36hVoFUcSTzzYKPriy76XdoAR2+mfC+gdnnEQk80S/m2N?=
 =?us-ascii?q?hmTyTIrBDgYob106S2K/5ofk5tBFXk8cp1Bpl+kpcshJEXwXUahY+a/XsdnWfz?=
 =?us-ascii?q?LNVUw6T+bHUWSD4Pwt7V5hXl2UJ5InKIwYL5SmuSws97a9amZWMW3zo379pWB6?=
 =?us-ascii?q?eM8LxEgSx1r0K9rQLQYvhyhC0RyPUw534Bn+EGphAtwT6DDbAIEklVJijslxWO?=
 =?us-ascii?q?79Cjo6Rbfmevcb6s1EVgmdCtFq2NogZZWHzhYJctATdw7tljMFLLyHDz9obkeN?=
 =?us-ascii?q?zKYdMSrBKUlQrAj/NOKJIwjfcKgStnOWTgvXwq0eI7jBpu3Y2ks4iDMWli4KW5?=
 =?us-ascii?q?AhtAPD3ve8wT4i3tjbpZnsuOxI+gBJJhGjEWXJfySfKoDSkftfDmNwaIDT09pW?=
 =?us-ascii?q?2XGbvZHQ+D9khmq2jDHIysN3GSPHMZ18ltRAGBJExDhwAZRDc6kYQ8Fg+038zt?=
 =?us-ascii?q?alt56ioS5l7lqRtM1+RoOAPkUmrEoAeoazE0SIWQLRZM7wFC4VvVPtKa7u5pAy?=
 =?us-ascii?q?5Y+ZihphSXKmOHfwRIEX0JWkucClHjObmu+MDA8/WCCeq4NffOerKOqepRV/qT?=
 =?us-ascii?q?wZKv041m/yuDN8mVP3liCeE71VRHXXxjB8vZnDAPQTQNly3Rd86buAu8+ipvo8?=
 =?us-ascii?q?C/7vvrWQHv5YiOC7dIMtVv4Re2gaidOO6KmSZ5Mi1V1pcNxX/O1bge00QeiyBo?=
 =?us-ascii?q?dzmxD7sAsTTBQ77Xmq9SFxQbcT98NNNU76Ig2QlAIdTUis7u2b5ikPE0C01JVV?=
 =?us-ascii?q?jgmsyyYcwKIme9NE7IBUqRNbSGIyHLzN/zYa+mVbJQi+BUvQWquTmHC0/jIiiD?=
 =?us-ascii?q?lz7xWhCzMOFMiTuXMwBEtI6hchZiF27jQcniah26Nt93kDI3zac1hnPMKW4TLz?=
 =?us-ascii?q?x8f1lRob2X6CNSmu9/FHBZ7np5MemEnD6U7unCJZYQtPtrAyJ0mPpb4XQ60bRV?=
 =?us-ascii?q?6i5ESedxmCvTqN5uvl6nnvOOyjphTBpBtDJLiJiXskVlPKWKvqVHDF/C8ANF1m?=
 =?us-ascii?q?WdFR8Kqt1mDZW7sqZc0Nne0rnzJSlJ89/S/sw0A8nSNdLBMXw9PB6vEznRWk9N?=
 =?us-ascii?q?YTexL2zZz2xUiu3aonGLrpEgtrDtnpQUQ7NWXVBzEekVXAAtBNgLPJlwRDZhna?=
 =?us-ascii?q?SaksMSoGru8jHPS8hA+JPKTPSfBbPoMjndxfN+bhUBzLewD8JbCZzg3EdhaxMy?=
 =?us-ascii?q?yJ7IBGLKX89cuSpqbQ5ypkhRpjw2Smw1xlKgYwi14VcNGvOu2B07kA1zZaIq7j?=
 =?us-ascii?q?ioq3UwIFPWpCI22GI4nNj/hjbZJDzwJ/3rdYJbESz5sw42KJytB05Kagm8h0Vh?=
 =?us-ascii?q?fAzNQb0Z26R7fEh3iAKZtYFCEPtHC6FJNltY4PCUbr0X3E9Apz+tyFVIrb/ACJ?=
 =?us-ascii?q?hr0hQnaoKhtXhNwQ1LaN8zOLyWJaxVw1wWjaWL6Gvg0uE33R9bJhwG2H2ddTRO?=
 =?us-ascii?q?u0ESMLQiYS2y8agkyQGDmDhCMEsWUPUnuO9xvhc9NuWDzCOm0KREJU2rKve3K6?=
 =?us-ascii?q?KfpniGlMiUT1d23UQNwQ0N+blwzNdmcEeOUU0r5KWeGg5PNsfYLwxRKc1I+yv9?=
 =?us-ascii?q?ZyGL5MXEx4k9M4j1OeflQeLG4KYYj02jEQokN54B4sQIAt+n10SOfpSvF6IM1R?=
 =?us-ascii?q?h4vFejH16CFvkcPUvTyDo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ASAADkbP1bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBgmmBAieDeYgYX4spgWglFGiCAY9MhHeBcxIBARgHDAGIeiI0CQ0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEEUYBCQEBCg4KA?=
 =?us-ascii?q?gImAgIDMQEFARwGAQwGAgEBAYMcAYF5CAQBmUo8iw18M4QBAQGBPYRpEnmLAhe?=
 =?us-ascii?q?Bf4ERJwyCKjWIBYJXAo9jj1RVCYZ8ii4GGIImhyyHOSyXZAIEAgQFAgUPIYElX?=
 =?us-ascii?q?4EuTSMVgycJgkeGEYdDATc/MgGBAwEBAY0PAQE?=
X-IPAS-Result: =?us-ascii?q?A0ASAADkbP1bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBgmm?=
 =?us-ascii?q?BAieDeYgYX4spgWglFGiCAY9MhHeBcxIBARgHDAGIeiI0CQ0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQgNCQgpIwyCNiQBgmEBAQEBAgEBAiAEEUYBCQEBCg4KAgImAgIDMQEFARw?=
 =?us-ascii?q?GAQwGAgEBAYMcAYF5CAQBmUo8iw18M4QBAQGBPYRpEnmLAheBf4ERJwyCKjWIB?=
 =?us-ascii?q?YJXAo9jj1RVCYZ8ii4GGIImhyyHOSyXZAIEAgQFAgUPIYElX4EuTSMVgycJgke?=
 =?us-ascii?q?GEYdDATc/MgGBAwEBAY0PAQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="42477107"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 08:17:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730716AbeK1DMe (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 22:12:34 -0500
Received: from mail-ed1-f68.google.com ([209.85.208.68]:41357 "EHLO
        mail-ed1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730444AbeK1DMd (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 22:12:33 -0500
Received: by mail-ed1-f68.google.com with SMTP id z28so19475535edi.8
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 08:14:09 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:subject:to:references:from:message-id:date
         :user-agent:mime-version:in-reply-to:content-language
         :content-transfer-encoding;
        bh=GQkboasbfdl9bmLFtdO+ywO36cpNG+nNhyIYPtelWLs=;
        b=XCI7oe1POhnCunHyzcWiSuCG9LaeDx7rlnxjASAz2+U+IrdRadqxzL21wlDxcdvute
         e5q+e6tSpmyZrY7QuPpU8Toc6HwRJVZsSdcMS/2qbIwcSXiOngfxZR8VGsu+rKsdev26
         j+wfqA/eBtZiZuyQjzTE3QQwEhM2aahig1kjcBjNkJgLJ4v7caR8BMokv4vMDeDxqPGI
         yuWTVa74VBg0ec5Cr02TxL7EAvsxSSDEDNJaPfFe9AYbLp/NbAq3kAyK/XczmbfzQDy5
         qJRCneTYh3D4k1/MOX+b6c6W1kPLVfr+qaVFg1aRJgQsqLYFVMY9ABRKEQnBhQk9Hk1n
         qVgg==
X-Gm-Message-State: AGRZ1gKNegPvzSfzEeirCWnDXWtaFJnpaRTRYKLEtgsxU79FvxxPnTta
        wAItzgQE2BaQjfuY/gml1vOi5TqmZjE=
X-Google-Smtp-Source: AJdET5eGGdpAAGPh3lp8bDeGESuKk/buB295U6LsMb/9mD2Sn8jZ1+ZfYTkmiAxu280QutkqAiVoxQ==
X-Received: by 2002:a17:906:4684:: with SMTP id a4-v6mr24648350ejr.24.1543335247797;
        Tue, 27 Nov 2018 08:14:07 -0800 (PST)
Received: from shalem.localdomain (546A5441.cm-12-3b.dynamic.ziggo.nl. [84.106.84.65])
        by smtp.gmail.com with ESMTPSA id e14sm1092747edb.79.2018.11.27.08.14.06
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 27 Nov 2018 08:14:06 -0800 (PST)
Subject: Re: [PATCH v3 05/13] i2c: acpi: Return error pointers from
 i2c_acpi_new_device()
To: Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
        Darren Hart <dvhart@infradead.org>,
        platform-driver-x86@vger.kernel.org,
        "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        linux-acpi@vger.kernel.org, Jonathan Cameron <jic23@kernel.org>,
        Wolfram Sang <wsa@the-dreams.de>,
        Mika Westerberg <mika.westerberg@linux.intel.com>,
        linux-i2c@vger.kernel.org,
        Heikki Krogerus <heikki.krogerus@linux.intel.com>,
        linux-kernel@vger.kernel.org
References: <20181127153728.47866-1-andriy.shevchenko@linux.intel.com>
 <20181127153728.47866-6-andriy.shevchenko@linux.intel.com>
From: Hans de Goede <hdegoede@redhat.com>
Message-ID: <c6a0201e-d69e-7646-dcae-0b1b6fe42451@redhat.com>
Date: Tue, 27 Nov 2018 17:14:06 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181127153728.47866-6-andriy.shevchenko@linux.intel.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi,

On 27-11-18 16:37, Andy Shevchenko wrote:
> The caller would like to know the reason why the i2c_acpi_new_device() fails.
> For example, if adapter is not available, it might be in the future and we
> would like to re-probe the clients again. But at the same time we would like to
> bail out if the error seems unrecoverable, such as invalid argument supplied.
> To achieve this, return error pointer in some cases.
> 
> Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
> ---
>   drivers/i2c/i2c-core-acpi.c                  | 21 ++++++++++++++------
>   drivers/platform/x86/i2c-multi-instantiate.c |  2 +-
>   drivers/platform/x86/intel_cht_int33fe.c     |  6 +++---
>   3 files changed, 19 insertions(+), 10 deletions(-)
> 
> diff --git a/drivers/i2c/i2c-core-acpi.c b/drivers/i2c/i2c-core-acpi.c
> index 32affd3fa8bd..7e872ceaa14f 100644
> --- a/drivers/i2c/i2c-core-acpi.c
> +++ b/drivers/i2c/i2c-core-acpi.c
> @@ -386,20 +386,22 @@ struct notifier_block i2c_acpi_notifier = {
>    *
>    * Also see i2c_new_device, which this function calls to create the i2c-client.
>    *
> - * Returns a pointer to the new i2c-client, or NULL if the adapter is not found.
> + * Returns a pointer to the new i2c-client, or error pointer in case of failure.
> + * Specifically, -ENODEV is returned if the adapter is not found.
>    */
>   struct i2c_client *i2c_acpi_new_device(struct device *dev, int index,
>   				       struct i2c_board_info *info)
>   {
>   	struct i2c_acpi_lookup lookup;
>   	struct i2c_adapter *adapter;
> +	struct i2c_client *client;
>   	struct acpi_device *adev;
>   	LIST_HEAD(resource_list);
>   	int ret;
>   
>   	adev = ACPI_COMPANION(dev);
>   	if (!adev)
> -		return NULL;
> +		return ERR_PTR(-EINVAL);
>   
>   	memset(&lookup, 0, sizeof(lookup));
>   	lookup.info = info;
> @@ -408,16 +410,23 @@ struct i2c_client *i2c_acpi_new_device(struct device *dev, int index,
>   
>   	ret = acpi_dev_get_resources(adev, &resource_list,
>   				     i2c_acpi_fill_info, &lookup);
> +	if (ret < 0)
> +		return ERR_PTR(ret);
> +
>   	acpi_dev_free_resource_list(&resource_list);
>   
> -	if (ret < 0 || !info->addr)
> -		return NULL;
> +	if (!info->addr)
> +		return ERR_PTR(-EADDRNOTAVAIL);
>   
>   	adapter = i2c_acpi_find_adapter_by_handle(lookup.adapter_handle);
>   	if (!adapter)
> -		return NULL;
> +		return ERR_PTR(-ENODEV);

Why not simply return -EPROBE_DEFER here (and simplify the callers a lot).

This is the only case where we really want to defer.


> +
> +	client = i2c_new_device(adapter, info);
> +	if (!client)
> +		return ERR_PTR(-ENODEV);

If you look at i2c_new_device, it can fail because it is
out of memory, the i2c slave address is invalid, or
their already is an i2c slave with the same address,
iow if this were to return an ERR_PTR itself, this
would return -ENOMEM, -EINVAL or -EBUSY and never
-EPROBE_DEFER.

Note keeping the -ENODEV here is fine, what I'm trying
to say is that in this case the caller of i2c_acpi_new_device
really should not return PROBE_DEFER, so directly returning
EPROBE_DEFER above, rather then let the caller guess is better.

And e.g. this:

                 multi->clients[i] = i2c_acpi_new_device(dev, i, &board_info);
                 if (IS_ERR(multi->clients[i]))
                         ret = PTR_ERR(multi->clients[i]);
                 else if (!multi->clients[i])
                         ret = -EPROBE_DEFER; /* Wait for i2c-adapter to load */
                 else
                         ret = 0;
                 if (ret) {
                         dev_err(dev, "Error creating i2c-client, idx %d\n", i);
                         goto error;
                 }

Can be simplified to:

                 multi->clients[i] = i2c_acpi_new_device(dev, i, &board_info);
                 if (IS_ERR(multi->clients[i])) {
                         ret = PTR_ERR(multi->clients[i]);
                         dev_err(dev, "Error creating i2c-client, idx %d\n", i);
                         goto error;
                 }

This will also allow you to split out the patches cleaning up the callers
without having a bisect problem (the NULL case will now simply never happen).

Regards,

Hans


>   
> -	return i2c_new_device(adapter, info);
> +	return client;
>   }
>   EXPORT_SYMBOL_GPL(i2c_acpi_new_device);
>   
> diff --git a/drivers/platform/x86/i2c-multi-instantiate.c b/drivers/platform/x86/i2c-multi-instantiate.c
> index 0e3a36f3ef64..18928e4ede7f 100644
> --- a/drivers/platform/x86/i2c-multi-instantiate.c
> +++ b/drivers/platform/x86/i2c-multi-instantiate.c
> @@ -72,7 +72,7 @@ static int i2c_multi_inst_probe(struct platform_device *pdev)
>   			board_info.irq = ret;
>   		}
>   		multi->clients[i] = i2c_acpi_new_device(dev, i, &board_info);
> -		if (!multi->clients[i])
> +		if (PTR_ERR(multi->clients[i]) == -ENODEV)
>   			ret = -EPROBE_DEFER; /* Wait for i2c-adapter to load */
>   		else if (IS_ERR(multi->clients[i]))
>   			ret = PTR_ERR(multi->clients[i]);


> diff --git a/drivers/platform/x86/intel_cht_int33fe.c b/drivers/platform/x86/intel_cht_int33fe.c
> index 3ba139d3bd03..b8cab17ec596 100644
> --- a/drivers/platform/x86/intel_cht_int33fe.c
> +++ b/drivers/platform/x86/intel_cht_int33fe.c
> @@ -168,7 +168,7 @@ static int cht_int33fe_probe(struct platform_device *pdev)
>   		board_info.dev_name = "max17047";
>   		board_info.properties = max17047_props;
>   		data->max17047 = i2c_acpi_new_device(dev, 1, &board_info);
> -		if (!data->max17047)
> +		if (PTR_ERR(data->max17047) == -ENODEV)
>   			ret = -EPROBE_DEFER; /* Wait for i2c-adapter to load */
>   		else if (IS_ERR(data->max17047))
>   			ret = PTR_ERR(data->max17047);
> @@ -200,7 +200,7 @@ static int cht_int33fe_probe(struct platform_device *pdev)
>   	board_info.irq = fusb302_irq;
>   
>   	data->fusb302 = i2c_acpi_new_device(dev, 2, &board_info);
> -	if (!data->fusb302)
> +	if (PTR_ERR(data->fusb302) == -ENODEV)
>   		ret = -EPROBE_DEFER; /* Wait for the i2c-adapter to load */
>   	else if (IS_ERR(data->fusb302))
>   		ret = PTR_ERR(data->fusb302);
> @@ -214,7 +214,7 @@ static int cht_int33fe_probe(struct platform_device *pdev)
>   	strlcpy(board_info.type, "pi3usb30532", I2C_NAME_SIZE);
>   
>   	data->pi3usb30532 = i2c_acpi_new_device(dev, 3, &board_info);
> -	if (!data->pi3usb30532)
> +	if (PTR_ERR(data->pi3usb30532) == -ENODEV)
>   		ret = -EPROBE_DEFER; /* Wait for the i2c-adapter to load */
>   	else if (IS_ERR(data->pi3usb30532))
>   		ret = PTR_ERR(data->pi3usb30532);
> 
