Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:19:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id EED3F580224
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 07:28:47 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 07:28:47 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AJaQgsRfd9Ra2Amk63rbvQ3e6lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc26YBKN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNwdWWRPXthcWzVYDo2+?=
 =?us-ascii?q?coQPFfMNM/tFr4nmv1sBswexBRW1COPrzT9JiGL90ak63ugkFwzJ2xAuEdIQvX?=
 =?us-ascii?q?jNtdn7NrodUfqswKfV0DXDdOtW1inh54jUbxstpe+AUa51fcfX1EIhFR7Kjk+I?=
 =?us-ascii?q?pILlIT2b2OcDvW+Z4OpuV+2vhXMpqxlzrzatycogl4fEip4LxVDf7ih13Jo5KM?=
 =?us-ascii?q?ekRENhfdKoDJ1dvDyaOYtsRcMiRnlltTo+yrIdp5G7ZjQKyJM6zBDecfOHaZSH?=
 =?us-ascii?q?4hP5W+2MJjp3n2xqeKijhxa16kWgy+L8WdOw0FZLtCVJiMXDtncI1xHK7MWMV/?=
 =?us-ascii?q?hz/l+51DqRywze6ftILV0pmafYMZIt3LA9m5oJvUjeHCL6gFj6gauZe0k+5+Sk?=
 =?us-ascii?q?9/jrbq/mq5OBLYN4lAfzObk0lMOlG+Q3KA0OUnCb+eui0L3j+lX0QLFLjv0tjq?=
 =?us-ascii?q?nZq4rWJcsdpq6kGQNV1Zwj6xmnAzen1tQXg2UHIUpbdB6bjIXlIUzCLO37APul?=
 =?us-ascii?q?nVihnjdmy+rbMrDjGpnNK2LMkLblfbZz8U5czw8zwMhG551KD7EBPev/VVLvu9?=
 =?us-ascii?q?zGEBA5NxW4zP3gCNVg0IMRRXyAArSePKPWsF+I5fwgL/ODZY8IoDv9L/kl5/jz?=
 =?us-ascii?q?jX42g1MdfK+p3YcJZ3C8BPhpP0KZYX/3j9cHFmcKuAU+TOr3iFGYVj5TfXmyU7?=
 =?us-ascii?q?om5j4nEIKmEZvDRoe1jbyF3Se7HYNZanpJC1CRCnroc4SEW/ERaCOdOMNhkzoE?=
 =?us-ascii?q?VaS/RI8lzx2hqAj6y780ZtfS4TAS4JL/yMButaqUkRAp6ScyCcOb3GeQCWZukS?=
 =?us-ascii?q?QNTj4y2al55ktl1laE17M/mvFdCJlf6u1EVlQHM4XBxbl/AtH2RgWTZ9qMVROq?=
 =?us-ascii?q?T8urBXQrQ8sszsQSS0B6Hdqkk1bExSX9GKIflbGAGMkp9LnB1WP6Pcd3xiX60/?=
 =?us-ascii?q?w4glw7B8dCK2Cirqh48QfVGsjOiUrKubytcPE12CTA7nuEhUWHpkpZWUYkW6jf?=
 =?us-ascii?q?QXc3Z0TfqdXwoEjFSun9WvwcLgJdxJvaeeNxYdrzgAADG6ru?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AiAADKVQFchxHrdtBjHQEBBQEHBQGBU?=
 =?us-ascii?q?QgBCwGBMIJijBFfiylSBoEQiUSJMIR5gXMUGBSHdiI0CQ0BAwEBAQEBAQIBEwE?=
 =?us-ascii?q?BAQoLCQgbDiMMgjYFAgMaB4JcAwMBAiQZAQEECikBAgMBAgYBAT4KCAMBOBsZB?=
 =?us-ascii?q?YMcgXUNAQMBpT6BbDOCdgEBBYJDhGUIh2yELhd4gQeBETONO4kvlwgJkTcYgVu?=
 =?us-ascii?q?IDoc2LIlSjl+BRoINMxoIGxWDJ4IbDBcSgziKVXCBBAOLUoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0AiAADKVQFchxHrdtBjHQEBBQEHBQGBUQgBCwGBMIJijBF?=
 =?us-ascii?q?fiylSBoEQiUSJMIR5gXMUGBSHdiI0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMg?=
 =?us-ascii?q?jYFAgMaB4JcAwMBAiQZAQEECikBAgMBAgYBAT4KCAMBOBsZBYMcgXUNAQMBpT6?=
 =?us-ascii?q?BbDOCdgEBBYJDhGUIh2yELhd4gQeBETONO4kvlwgJkTcYgVuIDoc2LIlSjl+BR?=
 =?us-ascii?q?oINMxoIGxWDJ4IbDBcSgziKVXCBBAOLUoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="54407739"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 07:28:46 -0800
Received: from localhost ([::1]:33306 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSkik-0007n3-2G
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 10:28:46 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:51519)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZa-0007SF-DC
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:21 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berto@igalia.com>) id 1gSkZW-0006Vx-Bp
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 10:19:18 -0500
Received: from fanzine.igalia.com ([91.117.99.155]:53248)
	by eggs.gnu.org with esmtps (TLS1.0:RSA_AES_128_CBC_SHA1:16)
	(Exim 4.71) (envelope-from <berto@igalia.com>)
	id 1gSkZU-00062c-4p; Fri, 30 Nov 2018 10:19:14 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=igalia.com;
	s=20170329; 
	h=References:In-Reply-To:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From;
	bh=tTHYG0e/tD19hTeauUIIFufxkypWiO++eQ40YYkfcZ8=; 
	b=aGJF0/FslrVUPmeL7tr4+T3p6fv2Ioe87OsMsrAcV088W9XPC4LBWWmpkaKkqqVgbUNsduLZQcw/zWjg/4SqjMdAA5j+BxAEapxyn1worCcgCSXz6krkhFzbNL/JQUczL8UqyxI8/Bnhf8Dua6RFfvue/yjeVE2mANBFSnwHeFGJXeeWkOKuvjJWDn7ZSXuqbw3PF9Ex+91zaXoZtseLzuIiEL0FC9DP1W3alK5ULzkab7+ug1asyKJjNqI/mEiBhSkRXNUpV7wamIjjt5A5g97mgPimwUJ6YV6+L87OlGAZG4a4jnaGJTme7tzyznzpqM8j+2BZuffpkYBeRmDUpA==;
Received: from [194.100.51.2] (helo=perseus.local)
	by fanzine.igalia.com with esmtpsa 
	(Cipher TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim)
	id 1gSkYp-0007X9-5r; Fri, 30 Nov 2018 16:18:31 +0100
Received: from berto by perseus.local with local (Exim 4.89)
	(envelope-from <berto@igalia.com>)
	id 1gSkYZ-0003eL-Gw; Fri, 30 Nov 2018 17:18:15 +0200
From: Alberto Garcia <berto@igalia.com>
To: qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 17:17:43 +0200
Message-Id: <7547fa10fe3bbbda2919ba5499e00cfcb223aa2b.1543590618.git.berto@igalia.com>
X-Mailer: git-send-email 2.11.0
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
In-Reply-To: <cover.1543590618.git.berto@igalia.com>
References: <cover.1543590618.git.berto@igalia.com>
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x (no
	timestamps) [generic] [fuzzy]
X-Received-From: 91.117.99.155
Subject: [Qemu-devel] [RFC PATCH v2 05/12] block: Add 'keep_old_opts'
 parameter to bdrv_reopen_queue()
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Alberto Garcia <berto@igalia.com>,
	qemu-block@nongnu.org, Max Reitz <mreitz@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

The bdrv_reopen_queue() function is used to create a queue with
the BDSs that are going to be reopened and their new options. Once
the queue is ready bdrv_reopen_multiple() is called to perform the
operation.

The original options from each one of the BDSs are kept, with the new
options passed to bdrv_reopen_queue() applied on top of them.

For "x-blockdev-reopen" we want a function that behaves much like
"blockdev-add". We want to ignore the previous set of options so that
only the ones actually specified by the user are applied, with the
rest having their default values.

One of the things that we need is a way to tell bdrv_reopen_queue()
whether we want to keep the old set of options or not, and that's what
this patch does. All current callers are setting this new parameter to
true and x-blockdev-reopen will set it to false.

Signed-off-by: Alberto Garcia <berto@igalia.com>
---
 block.c               | 34 +++++++++++++++++++---------------
 block/replication.c   |  4 ++--
 include/block/block.h |  3 ++-
 qemu-io-cmds.c        |  2 +-
 4 files changed, 24 insertions(+), 19 deletions(-)

diff --git a/block.c b/block.c
index 4f55fb339a..da4e062178 100644
--- a/block.c
+++ b/block.c
@@ -2935,7 +2935,8 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
                                                  QDict *options,
                                                  const BdrvChildRole *role,
                                                  QDict *parent_options,
-                                                 int parent_flags)
+                                                 int parent_flags,
+                                                 bool keep_old_opts)
 {
     assert(bs != NULL);
 
@@ -2975,13 +2976,13 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
      */
 
     /* Old explicitly set values (don't overwrite by inherited value) */
-    if (bs_entry) {
-        old_options = qdict_clone_shallow(bs_entry->state.explicit_options);
-    } else {
-        old_options = qdict_clone_shallow(bs->explicit_options);
+    if (bs_entry || keep_old_opts) {
+        old_options = qdict_clone_shallow(bs_entry ?
+                                          bs_entry->state.explicit_options :
+                                          bs->explicit_options);
+        bdrv_join_options(bs, options, old_options);
+        qobject_unref(old_options);
     }
-    bdrv_join_options(bs, options, old_options);
-    qobject_unref(old_options);
 
     explicit_options = qdict_clone_shallow(options);
 
@@ -2993,10 +2994,12 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
         flags = bdrv_get_flags(bs);
     }
 
-    /* Old values are used for options that aren't set yet */
-    old_options = qdict_clone_shallow(bs->options);
-    bdrv_join_options(bs, options, old_options);
-    qobject_unref(old_options);
+    if (keep_old_opts) {
+        /* Old values are used for options that aren't set yet */
+        old_options = qdict_clone_shallow(bs->options);
+        bdrv_join_options(bs, options, old_options);
+        qobject_unref(old_options);
+    }
 
     /* We have the final set of options so let's update the flags */
     options_copy = qdict_clone_shallow(options);
@@ -3046,7 +3049,7 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
         g_free(child_key_dot);
 
         bdrv_reopen_queue_child(bs_queue, child->bs, new_child_options,
-                                child->role, options, flags);
+                                child->role, options, flags, keep_old_opts);
     }
 
     return bs_queue;
@@ -3054,9 +3057,10 @@ static BlockReopenQueue *bdrv_reopen_queue_child(BlockReopenQueue *bs_queue,
 
 BlockReopenQueue *bdrv_reopen_queue(BlockReopenQueue *bs_queue,
                                     BlockDriverState *bs,
-                                    QDict *options)
+                                    QDict *options, bool keep_old_opts)
 {
-    return bdrv_reopen_queue_child(bs_queue, bs, options, NULL, NULL, 0);
+    return bdrv_reopen_queue_child(bs_queue, bs, options, NULL, NULL, 0,
+                                   keep_old_opts);
 }
 
 /*
@@ -3128,7 +3132,7 @@ int bdrv_reopen_set_read_only(BlockDriverState *bs, bool read_only,
     qdict_put_bool(opts, BDRV_OPT_READ_ONLY, read_only);
 
     bdrv_subtree_drained_begin(bs);
-    queue = bdrv_reopen_queue(NULL, bs, opts);
+    queue = bdrv_reopen_queue(NULL, bs, opts, true);
     ret = bdrv_reopen_multiple(bdrv_get_aio_context(bs), queue, errp);
     bdrv_subtree_drained_end(bs);
 
diff --git a/block/replication.c b/block/replication.c
index fdbfe47fa4..027cc02542 100644
--- a/block/replication.c
+++ b/block/replication.c
@@ -396,14 +396,14 @@ static void reopen_backing_file(BlockDriverState *bs, bool writable,
         QDict *opts = qdict_new();
         qdict_put_bool(opts, BDRV_OPT_READ_ONLY, !writable);
         reopen_queue = bdrv_reopen_queue(reopen_queue, s->hidden_disk->bs,
-                                         opts);
+                                         opts, true);
     }
 
     if (s->orig_secondary_read_only) {
         QDict *opts = qdict_new();
         qdict_put_bool(opts, BDRV_OPT_READ_ONLY, !writable);
         reopen_queue = bdrv_reopen_queue(reopen_queue, s->secondary_disk->bs,
-                                         opts);
+                                         opts, true);
     }
 
     if (reopen_queue) {
diff --git a/include/block/block.h b/include/block/block.h
index 6f10a8fcfc..a061ef3944 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -299,7 +299,8 @@ BlockDriverState *bdrv_open(const char *filename, const char *reference,
 BlockDriverState *bdrv_new_open_driver(BlockDriver *drv, const char *node_name,
                                        int flags, Error **errp);
 BlockReopenQueue *bdrv_reopen_queue(BlockReopenQueue *bs_queue,
-                                    BlockDriverState *bs, QDict *options);
+                                    BlockDriverState *bs, QDict *options,
+                                    bool keep_old_opts);
 int bdrv_reopen_multiple(AioContext *ctx, BlockReopenQueue *bs_queue, Error **errp);
 int bdrv_reopen_set_read_only(BlockDriverState *bs, bool read_only,
                               Error **errp);
diff --git a/qemu-io-cmds.c b/qemu-io-cmds.c
index 2c39124036..db8887205e 100644
--- a/qemu-io-cmds.c
+++ b/qemu-io-cmds.c
@@ -2075,7 +2075,7 @@ static int reopen_f(BlockBackend *blk, int argc, char **argv)
     }
 
     bdrv_subtree_drained_begin(bs);
-    brq = bdrv_reopen_queue(NULL, bs, opts);
+    brq = bdrv_reopen_queue(NULL, bs, opts, true);
     bdrv_reopen_multiple(bdrv_get_aio_context(bs), brq, &local_err);
     bdrv_subtree_drained_end(bs);
 
-- 
2.11.0


