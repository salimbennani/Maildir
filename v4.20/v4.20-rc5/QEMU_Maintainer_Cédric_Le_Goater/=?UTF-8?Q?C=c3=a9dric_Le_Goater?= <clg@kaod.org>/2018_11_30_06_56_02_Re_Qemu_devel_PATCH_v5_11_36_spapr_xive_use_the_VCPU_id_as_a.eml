Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 16:08:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 7997F580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 23:09:59 -0800 (PST)
Received: from fmsmga104.fm.intel.com ([10.1.193.100])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 23:09:59 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Aql0rQRKXQHts2WI42tmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgXKvz9rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZQMhRWSxPDICy?=
 =?us-ascii?q?YYQBAOUOP/pXoYbgqVsWrxawBwahCP7hxzNUmHD2xrY30/g4EQzcwAAsA9wDvX?=
 =?us-ascii?q?TSod7oNKkSS+e1zKzQwDjddfRZxC396InUfR85p/+DQ6p/f8vWyUY1CwPKkE+Q?=
 =?us-ascii?q?opHiMjyJ0uQNvHOW7+l6WuKolmErsQZxoiKgxso1jITCm4wbylfB9SpjwYY1I8?=
 =?us-ascii?q?W1SEF6Yd64EJtQqjqVO5FqTcMlRmFlvjsxxL4euZOjYiQG1JcqywTCZ/CacIWE?=
 =?us-ascii?q?+AzvWeiRLDtimX5oeqqzihKu/US6yeDxUtO43EtOoydEiNXAq20B2wDV58OaUP?=
 =?us-ascii?q?Vy5F2h1iyK1w3L6uFLP0Q0la3DJp4lw74wjYYTsV/ZEi/5nkX2kbWadkI++uin?=
 =?us-ascii?q?8+jnY7PmqYGAN4JslA3yLqcjltaiDeglMQUCRXaX9Oq82bH54EH0Qq1Gjvgsna?=
 =?us-ascii?q?nYtJDaK94bpqm8AwJNy4Ys9RO/Dyq/3NsFg3YHMkxKeBaeg4fyPFHOPfb4Auuh?=
 =?us-ascii?q?jFS3lztrw/HGPr7/DZnXIXnDja/sfbJ8605a1QoywspT55NSCrEdPv3zXlX9u8?=
 =?us-ascii?q?DfDh88KAG0xeHnCNNy1oMYRGKDGKiZMLndsVOQ/OIgP/GMZJMJuDb6M/Ul4//u?=
 =?us-ascii?q?jXwnllMHcqipwIAaaHS5HvRgPkWYbmDggtYHEWcWoAU+SPbmh0GFUT5WND6PWb?=
 =?us-ascii?q?kh7GQ7FJ6+FtWEAYSsm6CamiG8GJJQeyZBEF/LFH7pc4CNXbALcD6TJcl61SUJ?=
 =?us-ascii?q?UKXkR4I/2BX9iQnh1rAyK+PV/jEf54vu0cUw6+DNmBV37zFtEsmGz0mLSGd7mH?=
 =?us-ascii?q?5OQCU5i7tiq05wwUvWzK5jnvZDHsZS7f4abgBvGZfCzuAyJNH4QQXHNoOFQUin?=
 =?us-ascii?q?Tv2pADsqSdR3z8UJe0xwEs/kjxyF1jf8UJEPkLneLx046KPX6Fz8EOl6wmrLzu?=
 =?us-ascii?q?F1hF0pashGMmHggbRwoVuAT7XVmlmUwv75PZ8X2zTAoSLalTKD?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ALAADs4QBchxHrdtBjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBUwQBAQELAYEwKoEPS16McIspgWAtfJZKgXMUGAsJgSoBgxWDNCI2Bw0?=
 =?us-ascii?q?BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECJB8KIgIFA?=
 =?us-ascii?q?wMBAgYBAQoSBhwKCAMBOQwOBg0IAQEBglFLAYF5CAEDAQqoCzOFQINigQgFjBc?=
 =?us-ascii?q?RBoF/gREngjY1gx4CAoFDHIVbAoknBJZ7CYZ/ijEGGIFahRCKMo1cinuBTQiBf?=
 =?us-ascii?q?k0wCDuCbYJPgziKVHGBBAOMCoF3AQE?=
X-IPAS-Result: =?us-ascii?q?A0ALAADs4QBchxHrdtBjGwEBAQEDAQEBBwMBAQGBUwQBAQE?=
 =?us-ascii?q?LAYEwKoEPS16McIspgWAtfJZKgXMUGAsJgSoBgxWDNCI2Bw0BAwEBAQEBAQIBE?=
 =?us-ascii?q?wEBAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECJB8KIgIFAwMBAgYBAQoSBhw?=
 =?us-ascii?q?KCAMBOQwOBg0IAQEBglFLAYF5CAEDAQqoCzOFQINigQgFjBcRBoF/gREngjY1g?=
 =?us-ascii?q?x4CAoFDHIVbAoknBJZ7CYZ/ijEGGIFahRCKMo1cinuBTQiBfk0wCDuCbYJPgzi?=
 =?us-ascii?q?KVHGBBAOMCoF3AQE?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="53285415"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 23:09:58 -0800
Received: from localhost ([::1]:58362 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gScw1-0005MN-Or
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 02:09:57 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:47646)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gSct9-0001eq-Dd
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 02:07:03 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <clg@kaod.org>) id 1gScig-000183-W1
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 01:56:16 -0500
Received: from 11.mo7.mail-out.ovh.net ([87.98.173.157]:46876)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <clg@kaod.org>) id 1gScig-000126-MS
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 01:56:10 -0500
Received: from player739.ha.ovh.net (unknown [10.109.143.24])
	by mo7.mail-out.ovh.net (Postfix) with ESMTP id F3C9DED541
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 07:56:08 +0100 (CET)
Received: from kaod.org (lfbn-1-10605-110.w90-89.abo.wanadoo.fr
	[90.89.196.110]) (Authenticated sender: postmaster@kaod.org)
	by player739.ha.ovh.net (Postfix) with ESMTPSA id 12A227F157E;
	Fri, 30 Nov 2018 06:56:02 +0000 (UTC)
To: David Gibson <david@gibson.dropbear.id.au>
References: <20181116105729.23240-1-clg@kaod.org>
	<20181116105729.23240-12-clg@kaod.org>
	<20181128023902.GU2251@umbus.fritz.box>
	<dbd8810e-09b9-7344-92d2-faddebf30c10@kaod.org>
	<20181129010047.GM2251@umbus.fritz.box>
	<cde0bf38-a766-deab-8d46-41fa7e776185@kaod.org>
	<20181130011135.GG30479@umbus.fritz.box>
From: =?UTF-8?Q?C=c3=a9dric_Le_Goater?= <clg@kaod.org>
Message-ID: <bed23f8a-68bb-0f88-54c4-a4dfea085e34@kaod.org>
Date: Fri, 30 Nov 2018 07:56:02 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
	Thunderbird/60.3.0
MIME-Version: 1.0
In-Reply-To: <20181130011135.GG30479@umbus.fritz.box>
Content-Type: text/plain; charset=windows-1252
Content-Language: en-US
X-Ovh-Tracer-Id: 16071095270842469233
X-VR-SPAMSTATE: OK
X-VR-SPAMSCORE: -100
X-VR-SPAMCAUSE: gggruggvucftvghtrhhoucdtuddrgedtkedruddvgedguddtkecutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfqggfjpdevjffgvefmvefgnecuuegrihhlohhuthemucehtddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmd
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 87.98.173.157
Subject: Re: [Qemu-devel] [PATCH v5 11/36] spapr/xive: use the VCPU id as a
 NVT identifier
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: qemu-ppc@nongnu.org, qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On 11/30/18 2:11 AM, David Gibson wrote:
> On Thu, Nov 29, 2018 at 04:27:31PM +0100, C=E9dric Le Goater wrote:
>> [ ... ]=20
>>
>>>>>> +/*
>>>>>> + * The allocation of VP blocks is a complex operation in OPAL and=
 the
>>>>>> + * VP identifiers have a relation with the number of HW chips, th=
e
>>>>>> + * size of the VP blocks, VP grouping, etc. The QEMU sPAPR XIVE
>>>>>> + * controller model does not have the same constraints and can us=
e a
>>>>>> + * simple mapping scheme of the CPU vcpu_id
>>>>>> + *
>>>>>> + * These identifiers are never returned to the OS.
>>>>>> + */
>>>>>> +
>>>>>> +#define SPAPR_XIVE_VP_BASE 0x400
>>>>>
>>>>> 0x400 =3D=3D 1024.  Could we ever have the possibility of needing t=
o
>>>>> consider both physical NVTs and PAPR NVTs at the same time? =20
>>>>
>>>> They would not be in the same CAM line: OS ring vs. PHYS ring.=20
>>>
>>> Hm.  They still inhabit the same NVT number space though, don't they?
>>
>> No. skiboot reserves the range of VPs for the HW at init.
>>
>> https://github.com/open-power/skiboot/blob/master/hw/xive.c#L1093
>=20
> Uh.. I don't see how they're reserved is relevant.
>=20
> What I mean is that the ENDs address the NVTs for HW endpoints by the
> same (block, index) tuples as the NVTs for virtualized endpoints, yes?

Ah. Yes. The (block, index) tuples, fields END_W6_NVT_BLOCK and=20
END_W6_NVT_INDEX in the END structure, are all in the same number space.

skiboot defines some ranges though.


>>> I'm thinking about the END->NVT stage of the process here, rather tha=
n
>>> the NVT->TCTX stage.
>>>
>>> Oh, also, you're using "VP" here which IIUC =3D=3D "NVT".  Can we
>>> standardize on one, please.
>>
>> VP is used in Linux/KVM Linux/Native and skiboot. Yes. it's a mess.=20
>> Let's have consistent naming in QEMU and use NVT.=20
>=20
> Right.  And to cover any inevitable missed ones is why I'd like to see
> a cheatsheet giving both terms in the header comments somewhere.

yes. I have added a list of names in xive.h.=20

I was wondering if I should put the diagram below somewhere in a .h file=20
or under doc/specs/.

Thanks,

C. =20


=3D XIVE =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

The POWER9 processor comes with a new interrupt controller, called
XIVE as "eXternal Interrupt Virtualization Engine".


* Overall architecture


             XIVE Interrupt Controller
             +------------------------------------+      IPIs
             | +---------+ +---------+ +--------+ |    +-------+
             | |VC       | |CQ       | |PC      |----> | CORES |
             | |     esb | |         | |        |----> |       |
             | |     eas | |  Bridge | |   tctx |----> |       |
             | |SC   end | |         | |    nvt | |    |       |
 +------+    | +---------+ +----+----+ +--------+ |    +-+-+-+-+
 | RAM  |    +------------------|-----------------+      | | |
 |      |                       |                        | | |
 |      |                       |                        | | |
 |      |  +--------------------v------------------------v-v-v--+    othe=
r
 |      <--+                     Power Bus                      +--> chip=
s
 |  esb |  +---------+-----------------------+------------------+
 |  eas |            |                       |
 |  end |        +---|-----+                 |
 |  nvt |       +----+----+|            +----+----+
 +------+       |SC       ||            |SC       |
                |         ||            |         |
                | PQ-bits ||            | PQ-bits |
                | local   |+            |  in VC  |
                +---------+             +---------+
                   PCIe                 NX,NPU,CAPI

                  SC: Source Controller (aka. IVSE)
                  VC: Virtualization Controller (aka. IVRE)
                  PC: Presentation Controller (aka. IVPE)
                  CQ: Common Queue (Bridge)

             PQ-bits: 2 bits source state machine (P:pending Q:queued)
                 esb: Event State Buffer (Array of PQ bits in an IVSE)
                 eas: Event Assignment Structure
                 end: Event Notification Descriptor
                 nvt: Notification Virtual Target
                tctx: Thread interrupt Context


The XIVE IC is composed of three sub-engines :

  - Interrupt Virtualization Source Engine (IVSE), or Source
    Controller (SC). These are found in PCI PHBs, in the PSI host
    bridge controller, but also inside the main controller for the
    core IPIs and other sub-chips (NX, CAP, NPU) of the
    chip/processor. They are configured to feed the IVRE with events.

  - Interrupt Virtualization Routing Engine (IVRE) or Virtualization
    Controller (VC). Its job is to match an event source with an Event
    Notification Descriptor (END).

  - Interrupt Virtualization Presentation Engine (IVPE) or Presentation
    Controller (PC). It maintains the interrupt context state of each
    thread and handles the delivery of the external exception to the
    thread.


* XIVE internal tables

Each of the sub-engines uses a set of tables to redirect exceptions
from event sources to CPU threads.

                                          +-------+
  User or OS                              |  EQ   |
      or                          +------>|entries|
  Hypervisor                      |       |  ..   |
    Memory                        |       +-------+
                                  |           ^
                                  |           |
             +-------------------------------------------------+
                                  |           |
  Hypervisor      +------+    +---+--+    +---+--+   +------+
    Memory        | ESB  |    | EAT  |    | ENDT |   | NVTT |
   (skiboot)      +----+-+    +----+-+    +----+-+   +------+
                    ^  |        ^  |        ^  |       ^
                    |  |        |  |        |  |       |
             +-------------------------------------------------+
                    |  |        |  |        |  |       |
                    |  |        |  |        |  |       |
               +----|--|--------|--|--------|--|-+   +-|-----+    +------=
+
               |    |  |        |  |        |  | |   | | tctx|    |Thread=
|
   IPI or   ---+    +  v        +  v        +  v |---| +  .. |----->     =
|
  HW events    |                                 |   |       |    |      =
|
               |             IVRE                |   | IVPE  |    +------=
+
               +---------------------------------+   +-------+
           =20


The IVSE have a 2-bits, P for pending and Q for queued, state machine
for each source that allows events to be triggered. They are stored in
an array, the Event State Buffer (ESB) and controlled by MMIOs.

If the event is let through, the IVRE looks up in the Event Assignment
Structure (EAS) table for an Event Notification Descriptor (END)
configured for the source. Each Event Notification Descriptor defines
a notification path to a CPU and an in-memory Event Queue, in which
will be pushed an EQ data for the OS to pull.

The IVPE determines if a Notification Virtual Target (NVT) can handle
the event by scanning the thread contexts of the VPs dispatched on the
processor HW threads. It maintains the interrupt context state of each
thread in a NVT table.


