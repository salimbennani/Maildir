Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:41:19 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 84611580213
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 04:48:00 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga001-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 04:47:55 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3Amh9aVh+WrG4Oaf9uRHKM819IXTAuvvDOBiVQ1KB+?=
 =?us-ascii?q?0+wQIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDtU7s6RSqt4LtqSB/wiS?=
 =?us-ascii?q?cIKTg58H3MisdtiK5XuQ+tqwBjz4LRZoyeKfhwcb7Hfd4CW2RBUMZfWS9PDIyy?=
 =?us-ascii?q?YIQADfYOM+lFoYnlpVYArxSzCRSiCe/z1DBInWT73bEj0+k7DQ3KwAItEtAIvX?=
 =?us-ascii?q?/JrNv1LqASUeWtwabI1zrDbvVW1inn6IPVbx8hpuqMVq9tf8XLz0kvCwTFjk6N?=
 =?us-ascii?q?ooLiODOVzfgCs2iF4Op8SeKgkXMspgZ/oze1x8csjJfGhpgOylDB7ih52pg6Ks?=
 =?us-ascii?q?C4SEFhfd6oCodftyafN4ZvRM4pXm9muCE/yrIcuJ67ejAHyJE9yB7eb/yLapKH?=
 =?us-ascii?q?4gj/W+aRIDd4mmxqdKijiBa19EitzPD3WMqs0FtSsCZJjtrBumoQ2xDO6cWLUO?=
 =?us-ascii?q?Vx80mh1DqVygze6PlILV4omaffMZIt37A9moQJvUjeHSL7ll/6gLGVe0gi5+Om?=
 =?us-ascii?q?8f7oYq/8qZ+ZL4J0ih/xMqApmsGnBeQ4MxMOX3SA+eim273j+1D5TK9Njv0sna?=
 =?us-ascii?q?nVqJHaJcIFqa6lGwJZzJov5hWlAzu7zdgVnmMLIExLdR+HlYTlJlPDLOj9Dfil?=
 =?us-ascii?q?glSslDlrx+rBPr3kGpjNN2bMkLL8fbpk9kFT1hQzws5b555NEb4BJ+/zWkntu9?=
 =?us-ascii?q?PGFR81NAi0w+fkCNpjzI8fVn+PD7edMKPTt1+I++0uL/ONZI8TpDbyNfwl6+Ty?=
 =?us-ascii?q?gn8+nF8QZq+p3ZwRaHC3GPRmPl+VYX32gtcOCWsKpBYxTPT2iF2eVj5ef3KyX6?=
 =?us-ascii?q?M/5j4lEo6nAprDS5upgLyA2ie7A5JXanpHClCKDXfnaYGEV+0QZyKVJ88y2gEC?=
 =?us-ascii?q?TqWrHo89yQm15ki9z7t8MvGS/CoeupT+kt9v6KrWnBA28DVySMOFz2CKSXozh2?=
 =?us-ascii?q?4NWno60b5ypR9AzEye2/19iv1cCdsB/v5MT0I2OIDRy6lgBsnvVxndVtGOTlmg?=
 =?us-ascii?q?X5OhGz5mVc87wdIFfxNgHc6/hAvIxSugDuwpkOmgDZ0zuonVxWL4Pc81n33N3b?=
 =?us-ascii?q?M7hkMvatFCOW2vmuh08A2FVKDTlEDMqK+rc6kGlCLK7y+4xGySu1oQdQlrWqXI?=
 =?us-ascii?q?QWwWLh/JpNX/61nZSpe0BLgnOxcHwsmHfPgZIub1hElLEa+wcO/VZHi8ziLpXU?=
 =?us-ascii?q?6F?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AHAACQ3/9bhxHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUwMBAQEBCwGBMCqBD4EWE4N5iHeLKYFgLXyNQIkGFIFfFBgLCYR?=
 =?us-ascii?q?AgzMiNgcNAQMBAQEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGglsBAQEBAgEBA?=
 =?us-ascii?q?iAVDgopAwMBAgYBAQoOCgICIgQCAgMBUwYNBgIBAQGDHAGBeQgBBAqle4EvhUC?=
 =?us-ascii?q?EbYELhyWDZheBf4ERJ4FtSTWDHgOBQAEBAgQCFoMEglcCiSsPi34SilkJhj8/g?=
 =?us-ascii?q?nGHPQYYgVpNhzE2gSKFbJhMgU0GggBNIxWDJwmCR20BAYJJhWWFBikxAQGBBRy?=
 =?us-ascii?q?KXkeBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AHAACQ3/9bhxHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBUwM?=
 =?us-ascii?q?BAQEBCwGBMCqBD4EWE4N5iHeLKYFgLXyNQIkGFIFfFBgLCYRAgzMiNgcNAQMBA?=
 =?us-ascii?q?QEBAQECARMBAQEKCwkIGw4jDII2BQIDGgEGglsBAQEBAgEBAiAVDgopAwMBAgY?=
 =?us-ascii?q?BAQoOCgICIgQCAgMBUwYNBgIBAQGDHAGBeQgBBAqle4EvhUCEbYELhyWDZheBf?=
 =?us-ascii?q?4ERJ4FtSTWDHgOBQAEBAgQCFoMEglcCiSsPi34SilkJhj8/gnGHPQYYgVpNhzE?=
 =?us-ascii?q?2gSKFbJhMgU0GggBNIxWDJwmCR20BAYJJhWWFBikxAQGBBRyKXkeBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54834993"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 04:47:54 -0800
Received: from localhost ([::1]:53827 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSLjV-00037o-Si
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 07:47:53 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:41224)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gSLhX-0001uA-Oq
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 07:45:53 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <wainersm@redhat.com>) id 1gSLhU-0001SJ-F5
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 07:45:51 -0500
Received: from mx1.redhat.com ([209.132.183.28]:45714)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <wainersm@redhat.com>) id 1gSLhU-0001Rr-6e
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 07:45:48 -0500
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
	[10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 57668132686
	for <qemu-devel@nongnu.org>; Thu, 29 Nov 2018 12:45:47 +0000 (UTC)
Received: from localhost.localdomain (ovpn-120-195.rdu2.redhat.com
	[10.10.120.195])
	by smtp.corp.redhat.com (Postfix) with ESMTP id A7AD45DD8A;
	Thu, 29 Nov 2018 12:45:34 +0000 (UTC)
To: Caio Carrara <ccarrara@redhat.com>
References: <20181121183900.10364-1-wainersm@redhat.com>
	<20181126125807.GA14485@localhost.localdomain>
From: Wainer dos Santos Moschetta <wainersm@redhat.com>
Message-ID: <cd57c38b-13c2-68b3-b924-b87ce65628d2@redhat.com>
Date: Thu, 29 Nov 2018 10:45:33 -0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
	Thunderbird/52.5.2
MIME-Version: 1.0
In-Reply-To: <20181126125807.GA14485@localhost.localdomain>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.38]);
	Thu, 29 Nov 2018 12:45:47 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH v2] scripts/qemu.py: allow to launch the VM
 without a monitor
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: crosa@redhat.com, philmd@redhat.com, qemu-devel@nongnu.org,
	ehabkost@redhat.com
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>


On 11/26/2018 10:58 AM, Caio Carrara wrote:
> On Wed, Nov 21, 2018 at 01:39:00PM -0500, Wainer dos Santos Moschetta w=
rote:
>> QEMUMachine launches the VM with a monitor enabled, afterwards
>> a qmp connection is attempted on _post_launch(). In case
>> the QEMU process exits with an error, qmp.accept() reaches
>> timeout and raises an exception.
>>
>> But sometimes you don't need that monitor. As an example,
>> when a test launches the VM expects its immediate crash,
>> and only intend to check the process's return code. In this
>> case the fact that launch() tries to establish the qmp
>> connection (ending up in an exception) is troublesome.
>>
>> So this patch adds the set_qmp_monitor() that allow to
>> launch the VM without creating the monitor machinery. The
>> method can be used to re-enable the monitor eventually.
>>
>> Tested this change with the following Avocado test:
>>
>> from avocado_qemu import Test
>>
>> class DisableQmp(Test):
> I think it would be fine to have this test added as a real test instead
> of just let this here on commit message. Or at least we should have a
> real use case that uses this new feature.

Currently we don't have a proper place to put tests for scripts/qemu.py,=20
but [1] opens the opportunity to create a self-test structure for the=20
avocado_qemu API. For now I suggest to keep that (self)test just on the=20
commit message.

The feature I am introducing on this patch could have used on [2], so=20
that it wouldn't need to call the qemu binary directly. I'm not changing=20
that test on this patch because it was not merged into master yet, so I=20
don't know exactly how it could be done.

[1] https://www.mail-archive.com/qemu-devel@nongnu.org/msg576435.html
[2] https://www.mail-archive.com/qemu-devel@nongnu.org/msg572744.html

>
>>      """
>>      :avocado: enable
>>      """
>>      def test(self):
>>          self.vm.add_args('--foobar')
>>          self.vm.set_qmp_monitor(disabled=3DTrue)
>>          self.vm.launch()
>>          self.vm.wait()
>>          self.assertEqual(self.vm.exitcode(), 1)
>>          self.vm.shutdown()
>>
>>          self.vm.set_qmp_monitor(disabled=3DFalse)
>>          self.vm._args.remove('--foobar') # Hack
>>          self.vm.launch()
>>          res =3D self.vm.command('human-monitor-command',
>>                                command_line=3D'info version')
>>          self.assertRegexpMatches(res, r'^(\d+\.\d+\.\d)')
>>
>> Signed-off-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
>> Reviewed-by: Caio Carrara <ccarrara@redhat.com>
>> Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
>> ---
>> Changes in v2:
>>    * Major refactor: replaced disable_qmp() with set_qmp_monitor()
>>      that allow to disable the qmp monitor likewise, but also one can
>>      re-enable it (set_qmp_monitor(disabled=3DFalse)).
>>    * The logic to enabled/disable the monitor is back to
>>      _base_args(). [ccarrara, ehabkost]
>> ---
>>   scripts/qemu.py | 72 ++++++++++++++++++++++++++++++++---------------=
--
>>   1 file changed, 48 insertions(+), 24 deletions(-)
>>
>> diff --git a/scripts/qemu.py b/scripts/qemu.py
>> index 6e3b0e6771..54fe0e65d2 100644
>> --- a/scripts/qemu.py
>> +++ b/scripts/qemu.py
>> @@ -115,6 +115,7 @@ class QEMUMachine(object):
>>           self._events =3D []
>>           self._iolog =3D None
>>           self._socket_scm_helper =3D socket_scm_helper
>> +        self._with_qmp =3D True   # Enable QMP monitor by default.
>>           self._qmp =3D None
>>           self._qemu_full_args =3D None
>>           self._test_dir =3D test_dir
>> @@ -229,15 +230,7 @@ class QEMUMachine(object):
>>                   self._iolog =3D iolog.read()
>>  =20
>>       def _base_args(self):
>> -        if isinstance(self._monitor_address, tuple):
>> -            moncdev =3D "socket,id=3Dmon,host=3D%s,port=3D%s" % (
>> -                self._monitor_address[0],
>> -                self._monitor_address[1])
>> -        else:
>> -            moncdev =3D 'socket,id=3Dmon,path=3D%s' % self._vm_monito=
r
>> -        args =3D ['-chardev', moncdev,
>> -                '-mon', 'chardev=3Dmon,mode=3Dcontrol',
>> -                '-display', 'none', '-vga', 'none']
>> +        args =3D ['-display', 'none', '-vga', 'none']
>>           if self._machine is not None:
>>               args.extend(['-machine', self._machine])
>>           if self._console_device_type is not None:
>> @@ -247,23 +240,33 @@ class QEMUMachine(object):
>>                          self._console_address)
>>               device =3D '%s,chardev=3Dconsole' % self._console_device=
_type
>>               args.extend(['-chardev', chardev, '-device', device])
>> +        if self._with_qmp:
>> +            if isinstance(self._monitor_address, tuple):
>> +                moncdev =3D "socket,id=3Dmon,host=3D%s,port=3D%s" % (
>> +                    self._monitor_address[0],
>> +                    self._monitor_address[1])
>> +            else:
>> +                moncdev =3D 'socket,id=3Dmon,path=3D%s' % self._vm_mo=
nitor
>> +            args.extend(['-chardev', moncdev, '-mon', 'chardev=3Dmon,=
mode=3Dcontrol'])
>> +
>>           return args
>>  =20
>>       def _pre_launch(self):
>>           self._temp_dir =3D tempfile.mkdtemp(dir=3Dself._test_dir)
>> -        if self._monitor_address is not None:
>> -            self._vm_monitor =3D self._monitor_address
>> -        else:
>> -            self._vm_monitor =3D os.path.join(self._temp_dir,
>> -                                            self._name + "-monitor.so=
ck")
>>           self._qemu_log_path =3D os.path.join(self._temp_dir, self._n=
ame + ".log")
>>           self._qemu_log_file =3D open(self._qemu_log_path, 'wb')
>>  =20
>> -        self._qmp =3D qmp.qmp.QEMUMonitorProtocol(self._vm_monitor,
>> -                                                server=3DTrue)
>> -
>> +        if self._with_qmp:
>> +            if self._monitor_address is not None:
>> +                self._vm_monitor =3D self._monitor_address
>> +            else:
>> +                self._vm_monitor =3D os.path.join(self._temp_dir,
>> +                                            self._name + "-monitor.so=
ck")
>> +            self._qmp =3D qmp.qmp.QEMUMonitorProtocol(self._vm_monito=
r,
>> +                                                    server=3DTrue)
>>       def _post_launch(self):
>> -        self._qmp.accept()
>> +        if self._qmp:
>> +            self._qmp.accept()
>>  =20
>>       def _post_shutdown(self):
>>           if self._qemu_log_file is not None:
>> @@ -325,7 +328,8 @@ class QEMUMachine(object):
>>           Wait for the VM to power off
>>           """
>>           self._popen.wait()
>> -        self._qmp.close()
>> +        if self._qmp:
> Isn't the self._with_qmp attribute that should be used here? I think
> it's important to standardize the checks for qmp availability in
> `with_qmp` attribute and use the `qmp` only for qmp access itself. Ther=
e
> are other places that uses qmp to this kind of check too.

Checking self._qmp has same result as self._with_qmp given that=20
self._qmp object is only created with qmp enabled. But I agree with you=20
that for the sake of readability it would be better to check with=20
self._with_qmp.=C2=A0 I will send a v2.

>
>> +            self._qmp.close()
>>           self._load_io_log()
>>           self._post_shutdown()
>>  =20
>> @@ -334,11 +338,14 @@ class QEMUMachine(object):
>>           Terminate the VM and clean up
>>           """
>>           if self.is_running():
>> -            try:
>> -                self._qmp.cmd('quit')
>> -                self._qmp.close()
>> -            except:
>> -                self._popen.kill()
>> +            if self._qmp:
>> +                try:
>> +                    self._qmp.cmd('quit')
>> +                    self._qmp.close()
>> +                except:
>> +                    self._popen.kill()
>> +            else:
>> +                self._popen.terminate()
>>               self._popen.wait()
>>  =20
>>           self._load_io_log()
>> @@ -355,6 +362,23 @@ class QEMUMachine(object):
>>  =20
>>           self._launched =3D False
>>  =20
>> +    def set_qmp_monitor(self, disabled=3DFalse, monitor_address=3DNon=
e):
> Where is this new method being used?

It's not used yet, but we will need this on some type of tests (e.g.=20
launch the VM and expect an immediate crash) very often. I mentioned=20
above one test that I could have used it already.

> .
>
>> +        """
>> +        Set the QMP monitor.
>> +
>> +        @param disabled: if True, qmp monitor options will be removed=
 from the
>> +                         base arguments of the resulting QEMU command=
 line.
>> +        @param monitor_address: address for the QMP monitor.
>> +        @note: call this function before launch().
>> +        """
>> +        if disabled:
>> +            self._with_qmp =3D False
>> +            self._qmp =3D None
>> +        else:
>> +            self._with_qmp =3D True
>> +            if monitor_address:
>> +                self._monitor_address =3D monitor_address
>> +
>>       def qmp(self, cmd, conv_keys=3DTrue, **args):
>>           """
>>           Invoke a QMP command and return the response dict
>> --=20
>> 2.19.1
>>
> It would be nice see less scattered checks for qmp availability along
> the code.

I agree. It will need a major refactor on scripts/qemu.py though. I want=20
to keep this patch=C2=A0 as simple as possible so that it can be used on =
the=20
ongoing tests implementation.

Thanks for the review!

- Wainer


>  =20
>
> Thanks.


