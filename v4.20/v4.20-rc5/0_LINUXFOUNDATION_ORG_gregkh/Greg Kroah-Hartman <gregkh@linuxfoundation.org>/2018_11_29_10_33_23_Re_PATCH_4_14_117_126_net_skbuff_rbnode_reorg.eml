Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 19:48:43 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga005.fm.intel.com (fmsmga005.fm.intel.com [10.253.24.32])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id F3C525803ED;
	Thu, 29 Nov 2018 02:34:08 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga005-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 02:34:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AdxQSLhaTPXqqPre04G07mn3/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm5bR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFQMoxS+HhGsCeH0xz9UmnP7x7E23/g7HA3Y2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocUPq1w7fHzT7eav1WwzD955LIchw4o/+DR6hwcdbUyUY1EQPOk1Kd?=
 =?us-ascii?q?qYP/PzyL2eQNsGib4vFkVeKujW4ntg5wojaoxscxjInGm5gaykzF9SV+xoY5P9?=
 =?us-ascii?q?q4SFR0YdO9FpZbqi+UN4xzQsw4QmFovj43yr4Ytp6heigF1pAnywTYa/ydfIiF?=
 =?us-ascii?q?5A/oWuWJITpgmn5pZLayiwyv/UWu1OHwTNS43VVWoiZfk9TBtGgB2h/d58SdSf?=
 =?us-ascii?q?Zw/12t1DWL2gzJ9+1IPUI5mKzGIJA72LEwjIAcsUHbEy/2hkr2iKiWe106+uin?=
 =?us-ascii?q?9evneK/qppyCOI9ujAHxLKAulta4AeQiPQgCR2mb+eKi273/5UD1XqlGg/ksnq?=
 =?us-ascii?q?XEvp3WO94XqrO6DgNJyIou6hSyAy+j0NsCnHkHKFxFeAiAj4jsI1zOJPH4DfGi?=
 =?us-ascii?q?g1WjiTtrxO7JPqfnAprTKnjPibDhfLh760FC0go+1s5f551KBbEbOv7zWVH+tM?=
 =?us-ascii?q?beDhAnNwy42eHnCM9y1o8GQ2KAHreZML/OsV+P/u8vJ+iMZIwLtzrnJPkl+uXj?=
 =?us-ascii?q?jXs4mV8bYKmo0oEbaHG+HvR6PUqZZWDgjcsGEWcPpgA+VvDliEWeUT5PYHa/R6?=
 =?us-ascii?q?I86Ss6CIK6F4jDQZqhgLyc3CihGJ1WaXtLClSNEXfuaoWFVO0AaCOUIs99jDME?=
 =?us-ascii?q?UaKtRJMm1RGrrAX60aZoLvLI+i0EspLuzNp15+rNmh0o9jx0CMKd02eKT2xvmm?=
 =?us-ascii?q?MIRjk23L1woEBny1eD17R4jOJcFdBJ+/xJVQI6P4bGz+NmE9DyRh7BftCRRVm8?=
 =?us-ascii?q?WdWmATYxTtErz98UeUl9Gc6vjhTC3yqsHr8UmKaHBJ0y8qLAwXfxI9xxxGrB1K?=
 =?us-ascii?q?kkl1MmWNdANXW6hq5j8AjeH43JnF+fl6qwcaQc3TTC9GGMzWeVuEFYUQhwUbjK?=
 =?us-ascii?q?XHwFZ0vWq8j56V3GT7O0FbsnNQ5Bw9aYKqRWct3pkUlGRPD7NdvDeW2xhXm/CQ?=
 =?us-ascii?q?yIxryWaorqYHsS3CPaBEgAkAAT+HKGOBM6BiegpWLeETNvGUjuY0Pq7elxtne7?=
 =?us-ascii?q?QlUowAGNak1rz6C19QINhfyAV/MT2aoJtzo7pDVqAlmxxdLWBMCGpwp6YqpcZ8?=
 =?us-ascii?q?gw4FNG1WLfqgx8MYasL6Fkhl4CbQt3u1ni2AlwCoVFicIqtm8lzBJuKaKE11NM?=
 =?us-ascii?q?by+Y3ZH1Or3QNmny/BCuZ7TK2l3E19aW4KMP6PU+q1XspwypEksi83N609hayX?=
 =?us-ascii?q?ec55PKDBYMXpL1SEo46x96p7TCaCkn+4zUzWFsMbWzsjLawd0pAPUqyxm+cNZf?=
 =?us-ascii?q?Kq+LDxLyHNAACMioK+wqnEapYwkAPOBT8q40Isyne+GH2K6tIOZvgjamgX5b74?=
 =?us-ascii?q?B610KG7zB8RfLQ35YZ3/GY2ROKVjfhjFu7rs/7g4FFZTEIEWq5xijpH4pRZqx0?=
 =?us-ascii?q?fYYWBmaiOcy3xtNih5HzX35U7kKsB1QD2MWxYxqdc0T93RFM1UQQuXGngyq4wC?=
 =?us-ascii?q?BunDEzs6Wf2zbCw+L8exodO25HXXVtgk3oIYepkd8aRk+obw4ymRuh5Eb6wbVb?=
 =?us-ascii?q?patlI2nSR0dIYzb5L2V4XqSssbqCZtZF6Ik0viVPTOS8fVeaR6b9ohsbyS/iH3?=
 =?us-ascii?q?FSxCsmdzGsoZj5mx16iGSALHd8tnbZeMdwxQvB69zYX/Jewj0GRCxggznNGle8?=
 =?us-ascii?q?J8Wp/cmTl5rbsOCxTXihVp5QcSns14+ArzG05W5pAR2+mfC8hNvnHBM+0S/60d?=
 =?us-ascii?q?lqSCrJoAz9Yonty6S1L+ZnclN0C1/77spwApt+nZcohJEMxXgagY2Y/Hodnmf0?=
 =?us-ascii?q?K9lb26P+bHwWSD4Pwt7V5hXl2UJ5InKIwYL5SmuSws97a9amZWMW3zo379pWB6?=
 =?us-ascii?q?eM8LxEgSx1r0K7rQ3LYPhxhDcdyeY0534cjOEEow4tziSbArAPEkhUJy3slxKU?=
 =?us-ascii?q?79+gqKVbfnqgcb+11EBmh9CuEKmCoh1AWHb+YpoiGC5w7sZlP17W3nz89JrkeM?=
 =?us-ascii?q?XOYtIJrRKbjQ3Aj+dOJZI1l/oKgzdnOG3nsX0kze47kQJh3ZWgsIebLGVt+bqz?=
 =?us-ascii?q?AgREOT3te8MT5jbtgL5CnsaR2oCjBJRgFS8NXJv1VvKoCzMSuO/jNwaPFj08t3?=
 =?us-ascii?q?iaFaDeHQ+Z9EdpsXbPH4q3OHGQIXkT1c9iSwWFJExDnAAUWy03kYUjGQCtwMzh?=
 =?us-ascii?q?bV115jQM5lPjrhtMy+RoNwTwU2vFpQeobCs0R4abLBZM8g5C4ELVO9SE7u1vBy?=
 =?us-ascii?q?FY4oGhrAuVJ2yZfQtICH8GWleeC1D/JLWu5sTA8+uFBuq4NfTOeq6DqehfV/eO?=
 =?us-ascii?q?2JKu3ZFq/zeKNsWTIHZiC+c31VZEXXB8A87ZgSkASzQLlyLRaM6WvBe9+ipqrs?=
 =?us-ascii?q?Cm7fTkQgTv6ZGUC7tVN9Vv9Au7gaOCN+6WmSZ4JixU1pIKxX/U1rcf2EQehD1p?=
 =?us-ascii?q?dzmoCb4ArzLCTLrMmq9LCB4WcyNzO9VJ76I/3QlNONTXitDv1r5/gf46FU1FVU?=
 =?us-ascii?q?H6msyyYcwKIme9NE7IBUqRNbSGIyHLzN/zYa+mVbJQi+BUvQWquTmHC0/jIiiD?=
 =?us-ascii?q?lz7xWh+1LOFDlzubMwJeuY2ndhZtCHPuTNbnah29Ld92gic6wbwyhnPWK2EcNS?=
 =?us-ascii?q?JwfF9Krr2V9SlYmOlwG3Rd7np5KumJgzqZ7+jdKpoMrfRnGDh7l+JE73Q80LZV?=
 =?us-ascii?q?6CBERPpomCrdtNJuolemkvWRxTpjShZBtjFLhIeTt0V4JarZ7oVAWWrD/B8V7W?=
 =?us-ascii?q?SfERIKp95kCt3po69Ry9jPm7j1KDdN6N/U+cocB87JKMOIKnYhMBzpGCLKAwsB?=
 =?us-ascii?q?VzKkKWbfh0kO2M2Vo1iUspM64rjlgpYDUPcPUV0pHfNcCk1/ENEYCIx+VDo1lr?=
 =?us-ascii?q?ifjcgV9Ty5thaHF+tAuZWSeeifDr3MMjGQjfxkbgEUxLr+ZdAcLID02ExKblh8?=
 =?us-ascii?q?gZTEHFfWUdlRoypnKAgurxMeozBFUmQv1he9OUuW63gJGKvxx0Zuhw=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAADWv/9bh0O0hNFlGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgmmBAieMEV+LKYINFGiWRoEkA0gYGA8EAYd?=
 =?us-ascii?q?yIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQIkEwYBATcBB?=
 =?us-ascii?q?QkBAQoVAwklAwwFSRMFgxwBggEEAQqlRoFsM4J2AQEFhygDBYp6gRwXgX+BEYJ?=
 =?us-ascii?q?dNYMFGQQYhHyCJoktgW6VCgmGfoMthnwLGIFahRCKMiyNK4p1gUZsgSEzGggoC?=
 =?us-ascii?q?DuCbIIbDBeIXoVAPzIBCXgDAQEhE40EAQE?=
X-IPAS-Result: =?us-ascii?q?A0ABAADWv/9bh0O0hNFlGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgmmBAieMEV+LKYINFGiWRoEkA0gYGA8EAYdyIjQJDQEDAQEBA?=
 =?us-ascii?q?QEBAgETAQEBCA0JCCkjDII2JAGCYQEBAQEDAQIkEwYBATcBBQkBAQoVAwklAww?=
 =?us-ascii?q?FSRMFgxwBggEEAQqlRoFsM4J2AQEFhygDBYp6gRwXgX+BEYJdNYMFGQQYhHyCJ?=
 =?us-ascii?q?oktgW6VCgmGfoMthnwLGIFahRCKMiyNK4p1gUZsgSEzGggoCDuCbIIbDBeIXoV?=
 =?us-ascii?q?APzIBCXgDAQEhE40EAQE?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="54205749"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 02:33:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727504AbeK2ViV (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 16:38:21 -0500
Received: from mail.kernel.org ([198.145.29.99]:34154 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726823AbeK2ViU (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 16:38:20 -0500
Received: from localhost (5356596B.cm-6-7b.dynamic.ziggo.nl [83.86.89.107])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 8158C2081C;
        Thu, 29 Nov 2018 10:33:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543487606;
        bh=Cj4gMh1ksViepKElLq9UjejEEJ1BR04h+Cf11KBwM4U=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=xJp6QeCTSYbUF/KcJA0Z7Xc5GASMgAOsJEDajDj1Bk+YAWFMDHoYufAKk11xYdLhQ
         mzA/Dx24nqmSXwTE01JGvi48m7gTzNRNrxB05IOm6A0tFmrolRBdQWK/RlT4V/PfBv
         WBoiW949hV4Ri9G89aUhSVahrSmCmv7d+io0jCls=
Date: Thu, 29 Nov 2018 11:33:23 +0100
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: Mitch Harder <mitch.harder@sabayonlinux.org>
Cc: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        stable@vger.kernel.org, Eric Dumazet <edumazet@google.com>,
        Soheil Hassas Yeganeh <soheil@google.com>,
        Wei Wang <weiwan@google.com>,
        Willem de Bruijn <willemb@google.com>,
        "David S. Miller" <davem@davemloft.net>
Subject: Re: [PATCH 4.14 117/126] net: sk_buff rbnode reorg
Message-ID: <20181129103323.GD20297@kroah.com>
References: <20180917211703.481236999@linuxfoundation.org>
 <20180917211711.665799911@linuxfoundation.org>
 <CAKcLGm9+Juyf894=UcwCoDg+zzJ=zQeoryzhG0s7GdiAbjLaiQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CAKcLGm9+Juyf894=UcwCoDg+zzJ=zQeoryzhG0s7GdiAbjLaiQ@mail.gmail.com>
User-Agent: Mutt/1.11.0 (2018-11-25)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Oct 04, 2018 at 03:13:56PM -0500, Mitch Harder wrote:
> On Mon, Sep 17, 2018 at 5:42 PM, Greg Kroah-Hartman
> <gregkh@linuxfoundation.org> wrote:
> > 4.14-stable review patch.  If anyone has any objections, please let me know.
> >
> > ------------------
> >
> > From: Eric Dumazet <edumazet@google.com>
> >
> > commit bffa72cf7f9df842f0016ba03586039296b4caaf upstream
> >
> > skb->rbnode shares space with skb->next, skb->prev and skb->tstamp
> >
> > Current uses (TCP receive ofo queue and netem) need to save/restore
> > tstamp, while skb->dev is either NULL (TCP) or a constant for a given
> > queue (netem).
> >
> > Since we plan using an RB tree for TCP retransmit queue to speedup SACK
> > processing with large BDP, this patch exchanges skb->dev and
> > skb->tstamp.
> >
> > This saves some overhead in both TCP and netem.
> >
> > v2: removes the swtstamp field from struct tcp_skb_cb
> >
> > Signed-off-by: Eric Dumazet <edumazet@google.com>
> > Cc: Soheil Hassas Yeganeh <soheil@google.com>
> > Cc: Wei Wang <weiwan@google.com>
> > Cc: Willem de Bruijn <willemb@google.com>
> > Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
> > Signed-off-by: David S. Miller <davem@davemloft.net>
> > Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
> > ---
> >  include/linux/skbuff.h                  |   24 ++--
> >  include/net/inet_frag.h                 |    3
> >  net/ipv4/inet_fragment.c                |   14 +-
> >  net/ipv4/ip_fragment.c                  |  182 +++++++++++++++++---------------
> >  net/ipv6/netfilter/nf_conntrack_reasm.c |    1
> >  net/ipv6/reassembly.c                   |    1
> >  6 files changed, 128 insertions(+), 97 deletions(-)
> >
> > --- a/include/linux/skbuff.h
> > +++ b/include/linux/skbuff.h
> > @@ -663,23 +663,27 @@ struct sk_buff {
> >                         struct sk_buff          *prev;
> >
> >                         union {
> > -                               ktime_t         tstamp;
> > -                               u64             skb_mstamp;
> > +                               struct net_device       *dev;
> > +                               /* Some protocols might use this space to store information,
> > +                                * while device pointer would be NULL.
> > +                                * UDP receive path is one user.
> > +                                */
> > +                               unsigned long           dev_scratch;
> >                         };
> >                 };
> > -               struct rb_node  rbnode; /* used in netem & tcp stack */
> > +               struct rb_node          rbnode; /* used in netem, ip4 defrag, and tcp stack */
> > +               struct list_head        list;
> >         };
> > -       struct sock             *sk;
> >
> >         union {
> > -               struct net_device       *dev;
> > -               /* Some protocols might use this space to store information,
> > -                * while device pointer would be NULL.
> > -                * UDP receive path is one user.
> > -                */
> > -               unsigned long           dev_scratch;
> > +               struct sock             *sk;
> >                 int                     ip_defrag_offset;
> >         };
> > +
> > +       union {
> > +               ktime_t         tstamp;
> > +               u64             skb_mstamp;
> > +       };
> >         /*
> >          * This is the control buffer. It is free to use for every
> >          * layer. Please put your private variables there. If you
> > --- a/include/net/inet_frag.h
> > +++ b/include/net/inet_frag.h
> > @@ -75,7 +75,8 @@ struct inet_frag_queue {
> >         struct timer_list       timer;
> >         spinlock_t              lock;
> >         refcount_t              refcnt;
> > -       struct sk_buff          *fragments;
> > +       struct sk_buff          *fragments;  /* Used in IPv6. */
> > +       struct rb_root          rb_fragments; /* Used in IPv4. */
> >         struct sk_buff          *fragments_tail;
> >         ktime_t                 stamp;
> >         int                     len;
> > --- a/net/ipv4/inet_fragment.c
> > +++ b/net/ipv4/inet_fragment.c
> > @@ -136,12 +136,16 @@ void inet_frag_destroy(struct inet_frag_
> >         fp = q->fragments;
> >         nf = q->net;
> >         f = nf->f;
> > -       while (fp) {
> > -               struct sk_buff *xp = fp->next;
> > +       if (fp) {
> > +               do {
> > +                       struct sk_buff *xp = fp->next;
> >
> > -               sum_truesize += fp->truesize;
> > -               kfree_skb(fp);
> > -               fp = xp;
> > +                       sum_truesize += fp->truesize;
> > +                       kfree_skb(fp);
> > +                       fp = xp;
> > +               } while (fp);
> > +       } else {
> > +               sum_truesize = skb_rbtree_purge(&q->rb_fragments);
> >         }
> >         sum = sum_truesize + f->qsize;
> >
> > --- a/net/ipv4/ip_fragment.c
> > +++ b/net/ipv4/ip_fragment.c
> > @@ -136,7 +136,7 @@ static void ip_expire(struct timer_list
> >  {
> >         struct inet_frag_queue *frag = from_timer(frag, t, timer);
> >         const struct iphdr *iph;
> > -       struct sk_buff *head;
> > +       struct sk_buff *head = NULL;
> >         struct net *net;
> >         struct ipq *qp;
> >         int err;
> > @@ -152,14 +152,31 @@ static void ip_expire(struct timer_list
> >
> >         ipq_kill(qp);
> >         __IP_INC_STATS(net, IPSTATS_MIB_REASMFAILS);
> > -
> > -       head = qp->q.fragments;
> > -
> >         __IP_INC_STATS(net, IPSTATS_MIB_REASMTIMEOUT);
> >
> > -       if (!(qp->q.flags & INET_FRAG_FIRST_IN) || !head)
> > +       if (!qp->q.flags & INET_FRAG_FIRST_IN)
> >                 goto out;
> >
> > +       /* sk_buff::dev and sk_buff::rbnode are unionized. So we
> > +        * pull the head out of the tree in order to be able to
> > +        * deal with head->dev.
> > +        */
> > +       if (qp->q.fragments) {
> > +               head = qp->q.fragments;
> > +               qp->q.fragments = head->next;
> > +       } else {
> > +               head = skb_rb_first(&qp->q.rb_fragments);
> > +               if (!head)
> > +                       goto out;
> > +               rb_erase(&head->rbnode, &qp->q.rb_fragments);
> > +               memset(&head->rbnode, 0, sizeof(head->rbnode));
> > +               barrier();
> > +       }
> > +       if (head == qp->q.fragments_tail)
> > +               qp->q.fragments_tail = NULL;
> > +
> > +       sub_frag_mem_limit(qp->q.net, head->truesize);
> > +
> >         head->dev = dev_get_by_index_rcu(net, qp->iif);
> >         if (!head->dev)
> >                 goto out;
> > @@ -179,16 +196,16 @@ static void ip_expire(struct timer_list
> >             (skb_rtable(head)->rt_type != RTN_LOCAL))
> >                 goto out;
> >
> > -       skb_get(head);
> >         spin_unlock(&qp->q.lock);
> >         icmp_send(head, ICMP_TIME_EXCEEDED, ICMP_EXC_FRAGTIME, 0);
> > -       kfree_skb(head);
> >         goto out_rcu_unlock;
> >
> >  out:
> >         spin_unlock(&qp->q.lock);
> >  out_rcu_unlock:
> >         rcu_read_unlock();
> > +       if (head)
> > +               kfree_skb(head);
> >         ipq_put(qp);
> >  }
> >
> > @@ -231,7 +248,7 @@ static int ip_frag_too_far(struct ipq *q
> >         end = atomic_inc_return(&peer->rid);
> >         qp->rid = end;
> >
> > -       rc = qp->q.fragments && (end - start) > max;
> > +       rc = qp->q.fragments_tail && (end - start) > max;
> >
> >         if (rc) {
> >                 struct net *net;
> > @@ -245,7 +262,6 @@ static int ip_frag_too_far(struct ipq *q
> >
> >  static int ip_frag_reinit(struct ipq *qp)
> >  {
> > -       struct sk_buff *fp;
> >         unsigned int sum_truesize = 0;
> >
> >         if (!mod_timer(&qp->q.timer, jiffies + qp->q.net->timeout)) {
> > @@ -253,20 +269,14 @@ static int ip_frag_reinit(struct ipq *qp
> >                 return -ETIMEDOUT;
> >         }
> >
> > -       fp = qp->q.fragments;
> > -       do {
> > -               struct sk_buff *xp = fp->next;
> > -
> > -               sum_truesize += fp->truesize;
> > -               kfree_skb(fp);
> > -               fp = xp;
> > -       } while (fp);
> > +       sum_truesize = skb_rbtree_purge(&qp->q.rb_fragments);
> >         sub_frag_mem_limit(qp->q.net, sum_truesize);
> >
> >         qp->q.flags = 0;
> >         qp->q.len = 0;
> >         qp->q.meat = 0;
> >         qp->q.fragments = NULL;
> > +       qp->q.rb_fragments = RB_ROOT;
> >         qp->q.fragments_tail = NULL;
> >         qp->iif = 0;
> >         qp->ecn = 0;
> > @@ -278,7 +288,8 @@ static int ip_frag_reinit(struct ipq *qp
> >  static int ip_frag_queue(struct ipq *qp, struct sk_buff *skb)
> >  {
> >         struct net *net = container_of(qp->q.net, struct net, ipv4.frags);
> > -       struct sk_buff *prev, *next;
> > +       struct rb_node **rbn, *parent;
> > +       struct sk_buff *skb1;
> >         struct net_device *dev;
> >         unsigned int fragsize;
> >         int flags, offset;
> > @@ -341,58 +352,58 @@ static int ip_frag_queue(struct ipq *qp,
> >         if (err)
> >                 goto err;
> >
> > -       /* Find out which fragments are in front and at the back of us
> > -        * in the chain of fragments so far.  We must know where to put
> > -        * this fragment, right?
> > -        */
> > -       prev = qp->q.fragments_tail;
> > -       if (!prev || prev->ip_defrag_offset < offset) {
> > -               next = NULL;
> > -               goto found;
> > -       }
> > -       prev = NULL;
> > -       for (next = qp->q.fragments; next != NULL; next = next->next) {
> > -               if (next->ip_defrag_offset >= offset)
> > -                       break;  /* bingo! */
> > -               prev = next;
> > -       }
> > +       /* Note : skb->rbnode and skb->dev share the same location. */
> > +       dev = skb->dev;
> > +       /* Makes sure compiler wont do silly aliasing games */
> > +       barrier();
> >
> > -found:
> >         /* RFC5722, Section 4, amended by Errata ID : 3089
> >          *                          When reassembling an IPv6 datagram, if
> >          *   one or more its constituent fragments is determined to be an
> >          *   overlapping fragment, the entire datagram (and any constituent
> >          *   fragments) MUST be silently discarded.
> >          *
> > -        * We do the same here for IPv4.
> > +        * We do the same here for IPv4 (and increment an snmp counter).
> >          */
> >
> > -       /* Is there an overlap with the previous fragment? */
> > -       if (prev &&
> > -           (prev->ip_defrag_offset + prev->len) > offset)
> > -               goto discard_qp;
> > -
> > -       /* Is there an overlap with the next fragment? */
> > -       if (next && next->ip_defrag_offset < end)
> > -               goto discard_qp;
> > +       /* Find out where to put this fragment.  */
> > +       skb1 = qp->q.fragments_tail;
> > +       if (!skb1) {
> > +               /* This is the first fragment we've received. */
> > +               rb_link_node(&skb->rbnode, NULL, &qp->q.rb_fragments.rb_node);
> > +               qp->q.fragments_tail = skb;
> > +       } else if ((skb1->ip_defrag_offset + skb1->len) < end) {
> > +               /* This is the common/special case: skb goes to the end. */
> > +               /* Detect and discard overlaps. */
> > +               if (offset < (skb1->ip_defrag_offset + skb1->len))
> > +                       goto discard_qp;
> > +               /* Insert after skb1. */
> > +               rb_link_node(&skb->rbnode, &skb1->rbnode, &skb1->rbnode.rb_right);
> > +               qp->q.fragments_tail = skb;
> > +       } else {
> > +               /* Binary search. Note that skb can become the first fragment, but
> > +                * not the last (covered above). */
> > +               rbn = &qp->q.rb_fragments.rb_node;
> > +               do {
> > +                       parent = *rbn;
> > +                       skb1 = rb_to_skb(parent);
> > +                       if (end <= skb1->ip_defrag_offset)
> > +                               rbn = &parent->rb_left;
> > +                       else if (offset >= skb1->ip_defrag_offset + skb1->len)
> > +                               rbn = &parent->rb_right;
> > +                       else /* Found an overlap with skb1. */
> > +                               goto discard_qp;
> > +               } while (*rbn);
> > +               /* Here we have parent properly set, and rbn pointing to
> > +                * one of its NULL left/right children. Insert skb. */
> > +               rb_link_node(&skb->rbnode, parent, rbn);
> > +       }
> > +       rb_insert_color(&skb->rbnode, &qp->q.rb_fragments);
> >
> > -       /* Note : skb->ip_defrag_offset and skb->dev share the same location */
> > -       dev = skb->dev;
> >         if (dev)
> >                 qp->iif = dev->ifindex;
> > -       /* Makes sure compiler wont do silly aliasing games */
> > -       barrier();
> >         skb->ip_defrag_offset = offset;
> >
> > -       /* Insert this fragment in the chain of fragments. */
> > -       skb->next = next;
> > -       if (!next)
> > -               qp->q.fragments_tail = skb;
> > -       if (prev)
> > -               prev->next = skb;
> > -       else
> > -               qp->q.fragments = skb;
> > -
> >         qp->q.stamp = skb->tstamp;
> >         qp->q.meat += skb->len;
> >         qp->ecn |= ecn;
> > @@ -414,7 +425,7 @@ found:
> >                 unsigned long orefdst = skb->_skb_refdst;
> >
> >                 skb->_skb_refdst = 0UL;
> > -               err = ip_frag_reasm(qp, prev, dev);
> > +               err = ip_frag_reasm(qp, skb, dev);
> >                 skb->_skb_refdst = orefdst;
> >                 return err;
> >         }
> > @@ -431,15 +442,15 @@ err:
> >         return err;
> >  }
> >
> > -
> >  /* Build a new IP datagram from all its fragments. */
> > -
> > -static int ip_frag_reasm(struct ipq *qp, struct sk_buff *prev,
> > +static int ip_frag_reasm(struct ipq *qp, struct sk_buff *skb,
> >                          struct net_device *dev)
> >  {
> >         struct net *net = container_of(qp->q.net, struct net, ipv4.frags);
> >         struct iphdr *iph;
> > -       struct sk_buff *fp, *head = qp->q.fragments;
> > +       struct sk_buff *fp, *head = skb_rb_first(&qp->q.rb_fragments);
> > +       struct sk_buff **nextp; /* To build frag_list. */
> > +       struct rb_node *rbn;
> >         int len;
> >         int ihlen;
> >         int err;
> > @@ -453,25 +464,20 @@ static int ip_frag_reasm(struct ipq *qp,
> >                 goto out_fail;
> >         }
> >         /* Make the one we just received the head. */
> > -       if (prev) {
> > -               head = prev->next;
> > -               fp = skb_clone(head, GFP_ATOMIC);
> > +       if (head != skb) {
> > +               fp = skb_clone(skb, GFP_ATOMIC);
> >                 if (!fp)
> >                         goto out_nomem;
> > -
> > -               fp->next = head->next;
> > -               if (!fp->next)
> > +               rb_replace_node(&skb->rbnode, &fp->rbnode, &qp->q.rb_fragments);
> > +               if (qp->q.fragments_tail == skb)
> >                         qp->q.fragments_tail = fp;
> > -               prev->next = fp;
> > -
> > -               skb_morph(head, qp->q.fragments);
> > -               head->next = qp->q.fragments->next;
> > -
> > -               consume_skb(qp->q.fragments);
> > -               qp->q.fragments = head;
> > +               skb_morph(skb, head);
> > +               rb_replace_node(&head->rbnode, &skb->rbnode,
> > +                               &qp->q.rb_fragments);
> > +               consume_skb(head);
> > +               head = skb;
> >         }
> >
> > -       WARN_ON(!head);
> >         WARN_ON(head->ip_defrag_offset != 0);
> >
> >         /* Allocate a new buffer for the datagram. */
> > @@ -496,24 +502,35 @@ static int ip_frag_reasm(struct ipq *qp,
> >                 clone = alloc_skb(0, GFP_ATOMIC);
> >                 if (!clone)
> >                         goto out_nomem;
> > -               clone->next = head->next;
> > -               head->next = clone;
> >                 skb_shinfo(clone)->frag_list = skb_shinfo(head)->frag_list;
> >                 skb_frag_list_init(head);
> >                 for (i = 0; i < skb_shinfo(head)->nr_frags; i++)
> >                         plen += skb_frag_size(&skb_shinfo(head)->frags[i]);
> >                 clone->len = clone->data_len = head->data_len - plen;
> > -               head->data_len -= clone->len;
> > -               head->len -= clone->len;
> > +               skb->truesize += clone->truesize;
> >                 clone->csum = 0;bffa72cf7f9df
> >                 clone->ip_summed = head->ip_summed;
> >                 add_frag_mem_limit(qp->q.net, clone->truesize);
> > +               skb_shinfo(head)->frag_list = clone;
> > +               nextp = &clone->next;
> > +       } else {
> > +               nextp = &skb_shinfo(head)->frag_list;
> >         }
> >
> > -       skb_shinfo(head)->frag_list = head->next;
> >         skb_push(head, head->data - skb_network_header(head));
> >
> > -       for (fp=head->next; fp; fp = fp->next) {
> > +       /* Traverse the tree in order, to build frag_list. */
> > +       rbn = rb_next(&head->rbnode);
> > +       rb_erase(&head->rbnode, &qp->q.rb_fragments);
> > +       while (rbn) {
> > +               struct rb_node *rbnext = rb_next(rbn);
> > +               fp = rb_to_skb(rbn);
> > +               rb_erase(rbn, &qp->q.rb_fragments);
> > +               rbn = rbnext;
> > +               *nextp = fp;
> > +               nextp = &fp->next;
> > +               fp->prev = NULL;
> > +               memset(&fp->rbnode, 0, sizeof(fp->rbnode));
> >                 head->data_len += fp->len;
> >                 head->len += fp->len;
> >                 if (head->ip_summed != fp->ip_summed)
> > @@ -524,7 +541,9 @@ static int ip_frag_reasm(struct ipq *qp,
> >         }
> >         sub_frag_mem_limit(qp->q.net, head->truesize);
> >
> > +       *nextp = NULL;
> >         head->next = NULL;
> > +       head->prev = NULL;
> >         head->dev = dev;
> >         head->tstamp = qp->q.stamp;
> >         IPCB(head)->frag_max_size = max(qp->max_df_size, qp->q.max_size);
> > @@ -552,6 +571,7 @@ static int ip_frag_reasm(struct ipq *qp,
> >
> >         __IP_INC_STATS(net, IPSTATS_MIB_REASMOKS);
> >         qp->q.fragments = NULL;
> > +       qp->q.rb_fragments = RB_ROOT;
> >         qp->q.fragments_tail = NULL;
> >         return 0;
> >
> > --- a/net/ipv6/netfilter/nf_conntrack_reasm.c
> > +++ b/net/ipv6/netfilter/nf_conntrack_reasm.c
> > @@ -471,6 +471,7 @@ nf_ct_frag6_reasm(struct frag_queue *fq,
> >                                           head->csum);
> >
> >         fq->q.fragments = NULL;
> > +       fq->q.rb_fragments = RB_ROOT;
> >         fq->q.fragments_tail = NULL;
> >
> >         return true;
> > --- a/net/ipv6/reassembly.c
> > +++ b/net/ipv6/reassembly.c
> > @@ -472,6 +472,7 @@ static int ip6_frag_reasm(struct frag_qu
> >         __IP6_INC_STATS(net, __in6_dev_get(dev), IPSTATS_MIB_REASMOKS);
> >         rcu_read_unlock();
> >         fq->q.fragments = NULL;
> > +       fq->q.rb_fragments = RB_ROOT;
> >         fq->q.fragments_tail = NULL;
> >         return 1;
> >
> >
> >
> 
> I'm getting a kernel panic on the >=4.14.71 stable kernels, and I've
> isolated the problem back to this patch.
> 
> My 4.18.11 kernel seems to be OK.
> 
> Whenever I inject a delay into the interface with iproute2 tools, I get a panic.
> 
> Example command:
> tc qdisc add dev eth0 root netem delay 35ms
> 
> The RIP is pointing at netif_skb_features+0x31/0x230
> 
> My efforts to get a transmittable copy of the panic have been thwarted.
> 
> There's some confusion between this patch and the upstream patch
> refered to in the commit message
> 
> The upstream commit patches net/sched/sch_netem.c which isn't even
> touched in this commit.
> 
> Althought the commit messages are the same, the two patches seem to
> have a different purpose.
> 
> https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/sched?id=bffa72cf7f9df842f0016ba03586039296b4caaf
> 
> The commit message seems more relavant to this patch.
> 
> The upstream commit bffa72cf7f9df842f0016ba03586039296b4caaf has not
> yet been applied to the stable tree.
> 
> I decided to roll the dice, and apply the upstream patch
> bffa72cf7f9df842f0016ba03586039296b4caaf (it's been in the main kernel
> tree just over a year).
> 
> When I manually patch my 4.14.74 kernel with
> bffa72cf7f9df842f0016ba03586039296b4caaf, my panic seems to be solved.

That is odd, as this commit is in the 4.14.71 kernel release, so it
should not be able to be applied to 4.14.74.

If something still needs to be done here for the 4.14.y kernel tree,
please let me know.

thanks,

greg k-h
