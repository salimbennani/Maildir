Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 20:40:51 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D5FAA58046A;
	Sun,  2 Dec 2018 03:23:59 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 02 Dec 2018 03:23:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABSgDKREKeFCVUwjVZVmfw51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75os+5bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPAp2y?=
 =?us-ascii?q?b4UMAeQPM+lXoIvyqEcBoxulHQmhBvjiyiNKi3LswaE2z+osHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOakMT++10LLIzSjEb/hL2zny8o7IfQ07rvqRWr9wadTeyU8gFwPYj1WQ?=
 =?us-ascii?q?r5XpPzCL2eQXtWiU8e5gWPmui2I+rwFxpSavydk2honSnI0VyU3E9T9jz4ovI9?=
 =?us-ascii?q?23VlR3Ydy8EJZJsSyRKoh4Qts6Tm12pCo3zqcKtYO1cSQU0pgr2h3SZ+Cdf4WJ?=
 =?us-ascii?q?4B/vTPudLSl5iX5/Zb6zmRe//VK9xuD9WMS4ylhHoytDn9LRrH4CzQbT5dKCSv?=
 =?us-ascii?q?Zl/keuxzKP1wfL5+FaLkA7i7DbJ4QiwrEujJoTt1rMHivslEXxlq+WeV0o+umu?=
 =?us-ascii?q?6+v5frXrvoGQO5Nwhw3kL6gjlNKzDf4lPgUNQ2SX4+Wx2b/78U38WrpKj/k2kq?=
 =?us-ascii?q?fDsJDdIMQWvqq5Aw5T0oY+5BezFjSm38oCnXkBMl1FfAuLj4/nOlHIPv/4F+yy?=
 =?us-ascii?q?g0qjkDh13fDKJL7hDYvXLnjFjrjheaxx60lGyAo81dxf/Y5bCqkdIPLvXU/8rN?=
 =?us-ascii?q?jYDh46MwOq2ermB8h925gaWWKOBK+ZLazTvUWJ5uIpP+mDeosVtCzhJPgi4v7k?=
 =?us-ascii?q?lWU5lkMFfam1wZsXb2i1HvR8LEWYfXrjmNABHX0KvgojVuPqjlKCXCVXZ3azWa?=
 =?us-ascii?q?I8+z46BJinDYfFWoCinriB0D2nEZ1RY2BMEkqMHmvwd4WYR/cMbzqfIs1mkjMa?=
 =?us-ascii?q?T7ShSIgh1ReotA/90LdnKuvU+isFtZPsztR15uvTlQ0s+jxwFciSz2aNT2RslG?=
 =?us-ascii?q?MSWzA2xLx/oVB6ylqby6d4mPxYFdtQ5/9TSAc1L5zcwvd+C9DzXALBY9iIREyn?=
 =?us-ascii?q?QtWgHTE+UNYxz8USbEZ6HtWolgrD0DayA78Ji7yLA4Q58qHG0Hj3Pcp9z3fG27?=
 =?us-ascii?q?Mnj1kpWcZPMWymhqhi9wncHYLJkkOZl7q0eqQYxiLC6GCDzW+WtkFCTAFwSbnF?=
 =?us-ascii?q?XWwYZkbOsNv2/F3CQKG0BbQnKARBz9WCJbVMatHuiVVGR/LjONDFbmK1mmewAw?=
 =?us-ascii?q?uIx7yWYIrrfWUdwDvSCEwenw8P+naGMBA0Bj29rGLGEDxuCVXvblvx/uZktnO0?=
 =?us-ascii?q?UFU4zwGQYE1nzLq65BgViOeYS/MS2LIEpSggpy91HFa7w9LZFd6AqxB9c6VbZN?=
 =?us-ascii?q?M3+E1H2n7BtwxhIpygKLhvhkIfcwRyuEPuyxV3C4Vancg2tn8qyxByKaaZ0FNH?=
 =?us-ascii?q?eDOVxpTwOrzRKmnv8xGjca/W2lfC0NmI/qcD8ug3q1LmvAuxDEot721n08VJ03?=
 =?us-ascii?q?ub/pjFFg4SXoz+U0kp9xl2varVYjQg6IzO031sMq60siHZ1tItBeslzAugfthF?=
 =?us-ascii?q?PKOFEg/yD9MVB8y0JOM2nFipawoOPPpO+64sI8Oma/yG1barPeZ9hj6pkX5L4Y?=
 =?us-ascii?q?F90k2W8Sp8RfXF35IEw/GewwuGWC3wjFanssDrh49EYSseEXa4ySjhHIRRfLF9?=
 =?us-ascii?q?fZ4XCWeyJM263s9+h5/xVHFC7l6sGlQG1NWveRWMdVz93BRc2lgNrnyjhCS30S?=
 =?us-ascii?q?Z0kzYvrqeE2CzOwuLidAcIO2JRRWlii0vsLpawj9wAQEeoaA0pngO/5Unm36hb?=
 =?us-ascii?q?uLh/L27LTEZIfij6NWFjXrGrtrqfZc5C85cosSRRUOShblGWUL/9ox0G0yz9G2?=
 =?us-ascii?q?tS3iw0dzavup/hhRx1lHqdLGpvrHreYcxwxw3Q5MbfRf5S2ToKXjJ4hiPUBli/?=
 =?us-ascii?q?Ptmp+8ubl5HYv+C6VmKhUIBTcCbxwYOBsiu7+XNlARmlk/+vnd3nFBAw0TXn2N?=
 =?us-ascii?q?lySSXIsBH8b5Hr1qugNuJrZEtoBF7668dhHoF+k40whIwf2HQAh5WV+2YHnnn3?=
 =?us-ascii?q?MdlBxa3+a38NTyYRw9HJ+AjlxFFjLnWRyoL6THqdw9FtZ9mnYmwM3CI94NtHCK?=
 =?us-ascii?q?OV7LxCgCt0rUC0rQPXYfhhgDgdzeEi52Idg+EMoAAt1DmSAqgOHUlEOizhjxGI?=
 =?us-ascii?q?79G9rKpNfmquf6a/1FFind+/FrGNuR9TWGz2epo5GS9w78N/ME/D0XHp64Hkfs?=
 =?us-ascii?q?XQYswXthGOjxjAiO1VIoorlvUWnSpnJX79vXo9xu4nihxu2Iu2vYmdJGVr4aK5?=
 =?us-ascii?q?GQVYNjzuasMX+zHti7ten8mM04CuGJVhBisEXJ/yQf20FzISsOztNxySHz0ktn?=
 =?us-ascii?q?ebBb3fEBeE50h8qHLPF42rO2uTJHkE1thiQBidJEpCgAEbRjk6n5g5Fhy0y8zl?=
 =?us-ascii?q?akt2+jcR5lvgoBtW1u1oLwX/UnvYpAqwaDc7Up2fIwRN7g1Y+0fZK8+e7v9wHy?=
 =?us-ascii?q?FF+J2utheNJ3efZwRJC2EJR0OFC0riPrmo+dnP7eyYCvCiIPvJZLWEsfZeWOuQ?=
 =?us-ascii?q?xZKzzotm+C6BN8WIPnl/Fv07x1BMXXZjF8TCnDUPTSMXmjnJb86aohe85yJ2ot?=
 =?us-ascii?q?q+8PTtRALg+4+PB6FOPtVo/hC8mb2DOPKIhCZlNTZY0YsBxX/Wx7ge314SiCBu?=
 =?us-ascii?q?eyOuEbQasi7NQ7zfmrVKDx4AcC5zMMpI76Qh3ghCI8Lbi9X11qJmgf4xEVtKSV?=
 =?us-ascii?q?vhmsSxb8wQP269LE/HBFqMNLmePzLL3tr4YbmiRrxQlulUsxywtC2fE0/iODSD?=
 =?us-ascii?q?ijboWwquMeFKkCGUIhhetJuhfRZqDGjpVMjmZQGjMN9rkT02xqU5hm/LNW4ZKz?=
 =?us-ascii?q?Rzb1lBoaGQ7SxGhPVyAGhB7ntjLemZlCeV9ejYKpAKsfR1BiR4jf5V4HM/y7FN?=
 =?us-ascii?q?9iFLWOR1mDfOrt5pu1ynkvOAyjxiUBpPrDZEnIOKvUV4NqXf+ZlNQnLE/BML7W?=
 =?us-ascii?q?WNBBUGvdplCtvzu69OztjDjr78KDBH84GcwcxJP8XIMoqiNHMtPBmhTCbRCAIJ?=
 =?us-ascii?q?QD2DLnzEigpWl/TEsjW5q5kmsImkposTSbhFHAg5COIHCUN7NNMFJ5hzU3Uvlr?=
 =?us-ascii?q?vN3+AS4n/rkBTNX9hd9rDOUP6bSaH3JTCWkLhCIhgF27X1KawSc4n8xUEkcVB5?=
 =?us-ascii?q?gZ7DXUzdG9JV9H4yJjQoqVlApSAtBlY43FjoP0b0uCce?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A1AACWvwNch0O0hNFjGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZYJtfyeDeZQgUAEBBoEILRSJC5AcEgEBGBMBh3YiOBIBAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgpL4I2JAGCYQEBAQEDAQIgBFIGCQEBCg4DAwECAQICJgICA?=
 =?us-ascii?q?0wIBgEMBgIBAQGDHIF1DAEFomB8M4ocgQuLEYEPgQeBESeCa4gFglcChyEHggi?=
 =?us-ascii?q?Bb4RVNZAXCYoyhwQegVuFEYJ/hzuJBIkBgzeDCgIRFIFdgXYzGoNfgicXjixjg?=
 =?us-ascii?q?QUBAY0cAQE?=
X-IPAS-Result: =?us-ascii?q?A0A1AACWvwNch0O0hNFjGgEBAQEBAgEBAQEHAgEBAQGBZYJ?=
 =?us-ascii?q?tfyeDeZQgUAEBBoEILRSJC5AcEgEBGBMBh3YiOBIBAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgpL4I2JAGCYQEBAQEDAQIgBFIGCQEBCg4DAwECAQICJgICA0wIBgEMBgIBAQG?=
 =?us-ascii?q?DHIF1DAEFomB8M4ocgQuLEYEPgQeBESeCa4gFglcChyEHggiBb4RVNZAXCYoyh?=
 =?us-ascii?q?wQegVuFEYJ/hzuJBIkBgzeDCgIRFIFdgXYzGoNfgicXjixjgQUBAY0cAQE?=
X-IronPort-AV: E=Sophos;i="5.56,306,1539673200"; 
   d="scan'208";a="55184597"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 02 Dec 2018 03:23:57 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725824AbeLBLX4 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sun, 2 Dec 2018 06:23:56 -0500
Received: from www262.sakura.ne.jp ([202.181.97.72]:59226 "EHLO
        www262.sakura.ne.jp" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725789AbeLBLX4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sun, 2 Dec 2018 06:23:56 -0500
Received: from fsav402.sakura.ne.jp (fsav402.sakura.ne.jp [133.242.250.101])
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTP id wB2BNoce080564;
        Sun, 2 Dec 2018 20:23:50 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72)
 by fsav402.sakura.ne.jp (F-Secure/fsigk_smtp/530/fsav402.sakura.ne.jp);
 Sun, 02 Dec 2018 20:23:50 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav402.sakura.ne.jp)
Received: from [192.168.1.8] (softbank126126163036.bbtec.net [126.126.163.36])
        (authenticated bits=0)
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTPSA id wB2BNinR080454
        (version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NO);
        Sun, 2 Dec 2018 20:23:49 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Subject: Re: [PATCH] printk: Add caller information to printk() output.
From: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
To: Petr Mladek <pmladek@suse.com>, Dmitry Vyukov <dvyukov@google.com>
Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>,
        Sergey Senozhatsky <sergey.senozhatsky@gmail.com>,
        Steven Rostedt <rostedt@goodmis.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        LKML <linux-kernel@vger.kernel.org>
References: <1543045075-3008-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp>
 <20181130154024.ls3mntfdr4zvluub@pathway.suse.cz>
 <f224bd68-7394-ff70-cad6-d3fbbb3b5f7d@i-love.sakura.ne.jp>
Message-ID: <1bd509ec-0a3a-55cc-d43b-02baa489019a@i-love.sakura.ne.jp>
Date: Sun, 2 Dec 2018 20:23:43 +0900
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.2
MIME-Version: 1.0
In-Reply-To: <f224bd68-7394-ff70-cad6-d3fbbb3b5f7d@i-love.sakura.ne.jp>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 2018/12/01 23:44, Tetsuo Handa wrote:
> On 2018/12/01 0:40, Petr Mladek wrote:
>>> Some examples for console output:
>>>
>>>   [    0.293000] [T1] smpboot: CPU0: Intel(R) Core(TM) i5-4440S CPU @ 2.80GHz (family: 0x6, model: 0x3c, stepping: 0x3)
>>>   [    0.299733] [T1] Performance Events: Haswell events, core PMU driver.
>>>   [    2.813808] [T35] clocksource: Switched to clocksource tsc
>>>   [    2.893984] [C0] random: fast init done
>>                   ^
>>
>> Please, remove the space between the timestamp and the from field.
> 
> This space was emitted by print_time(). Do we want to modify print_time()
> not to emit this space if the from field is printed?
> 
> If we modify print_time(), I think that the leading spaces inserted by "%5lu"
> makes little sense, for "%5lu" is too small for systems with uptime >= 1.16 days
> and parsers after all cannot assume fixed length for the timestamp field. Then,
> we could change from "%5lu.%06lu" to "%lu.%06lu" so that parsers (like /bin/awk)
> can get prefix part using white spaces as a delimiter.
> 
> If we want to reduce space, do we want to do like
> 
>   [0.293000@T1] smpboot: CPU0: Intel(R) Core(TM) i5-4440S CPU @ 2.80GHz (family: 0x6, model: 0x3c, stepping: 0x3)
>   [0.299733@T1] Performance Events: Haswell events, core PMU driver.
>   [2.813808@T35] clocksource: Switched to clocksource tsc
>   [2.893984@C0] random: fast init done
> 
> (if printk_time = true) or
> 
>   [@T1] smpboot: CPU0: Intel(R) Core(TM) i5-4440S CPU @ 2.80GHz (family: 0x6, model: 0x3c, stepping: 0x3)
>   [@T1] Performance Events: Haswell events, core PMU driver.
>   [@T35] clocksource: Switched to clocksource tsc
>   [@C0] random: fast init done
> 
> (if printk_time = false) ?
> 
> Dmitry, what format/delimiter is convenient for parsing by syzbot?

Here is an updated patch (which uses appropriate PREFIX_MAX definition
after "[PATCH v2] printk: fix printk_time race." is applied).

From 48603394cc0c8c5ad9ee57bc665dfd2c421e923b Mon Sep 17 00:00:00 2001
From: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date: Sun, 2 Dec 2018 19:41:02 +0900
Subject: [PATCH v2] printk: Add caller information to printk() output.

Sometimes we want to print a series of printk() messages to consoles
without being disturbed by concurrent printk() from interrupts and/or
other threads. But we can't enforce printk() callers to use their local
buffers because we need to ask them to make too much changes. Also, even
buffering up to one line inside printk() might cause failing to emit
an important clue under critical situation.

Therefore, instead of trying to help buffering, let's try to help
reconstructing messages by saving caller information as of calling
log_store() and adding it as "@T$thread_id" or "@C$processor_id" upon
printing to consoles.

Some examples for console output:

  [    0.919699]@T1 x86: Booting SMP configuration:
  [    4.152681]@T271 Fusion MPT base driver 3.04.20
  [    5.070470]@C0 random: fast init done
  [    6.587900]@C3 random: crng init done

# Not yet signed-off in order to silence build-bot error reports.
---
 kernel/printk/printk.c | 62 ++++++++++++++++++++++++++++++--------------------
 lib/Kconfig.debug      | 17 ++++++++++++++
 2 files changed, 54 insertions(+), 25 deletions(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 0b47e34..31151e8 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -356,6 +356,9 @@ struct printk_log {
 	u8 facility;		/* syslog facility */
 	u8 flags:5;		/* internal record flags */
 	u8 level:3;		/* syslog level */
+#ifdef CONFIG_PRINTK_FROM
+	u32 from_id;            /* thread id or processor id */
+#endif
 }
 #ifdef CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
 __packed __aligned(4)
@@ -422,8 +425,14 @@ __packed __aligned(4)
 static u64 clear_seq;
 static u32 clear_idx;
 
+#ifdef CONFIG_PRINTK_FROM
+#define PREFIX_FROM_MAX		16
+#define PREFIX_MAX		(32 + PREFIX_FROM_MAX)
+#define LOG_LINE_MAX		(1024 - 32)
+#else
 #define PREFIX_MAX		32
 #define LOG_LINE_MAX		(1024 - PREFIX_MAX)
+#endif
 
 #define LOG_LEVEL(v)		((v) & 0x07)
 #define LOG_FACILITY(v)		((v) >> 3 & 0xff)
@@ -625,6 +634,12 @@ static int log_store(int facility, int level,
 		msg->ts_nsec = ts_nsec;
 	else
 		msg->ts_nsec = local_clock();
+#ifdef CONFIG_PRINTK_FROM
+	if (in_task())
+		msg->from_id = current->pid;
+	else
+		msg->from_id = 0x80000000 + raw_smp_processor_id();
+#endif
 	memset(log_dict(msg) + dict_len, 0, pad_len);
 	msg->len = size;
 
@@ -1227,39 +1242,36 @@ static inline void boot_delay_msec(int level)
 static bool printk_time = IS_ENABLED(CONFIG_PRINTK_TIME);
 module_param_named(time, printk_time, bool, S_IRUGO | S_IWUSR);
 
-static size_t print_time(u64 ts, char *buf)
-{
-	unsigned long rem_nsec = do_div(ts, 1000000000);
-
-	if (!buf)
-		return snprintf(NULL, 0, "[%5lu.000000] ", (unsigned long)ts);
-
-	return sprintf(buf, "[%5lu.%06lu] ",
-		       (unsigned long)ts, rem_nsec / 1000);
-}
-
 static size_t print_prefix(const struct printk_log *msg, bool syslog,
 			   bool time, char *buf)
 {
 	size_t len = 0;
-	unsigned int prefix = (msg->facility << 3) | msg->level;
+	char tmp[PREFIX_MAX];
 
+	if (!buf)
+		buf = tmp;
 	if (syslog) {
-		if (buf) {
-			len += sprintf(buf, "<%u>", prefix);
-		} else {
-			len += 3;
-			if (prefix > 999)
-				len += 3;
-			else if (prefix > 99)
-				len += 2;
-			else if (prefix > 9)
-				len++;
-		}
+		unsigned int prefix = (msg->facility << 3) | msg->level;
+
+		len += sprintf(buf, "<%u>", prefix);
+	}
+	if (time) {
+		u64 ts = msg->ts_nsec;
+		unsigned long rem_nsec = do_div(ts, 1000000000);
+
+		len += sprintf(buf + len, "[%5lu.%06lu]", (unsigned long)ts,
+			       rem_nsec / 1000);
 	}
+#ifdef CONFIG_PRINTK_FROM
+	{
+		u32 id = msg->from_id;
 
-	if (time)
-		len += print_time(msg->ts_nsec, buf ? buf + len : NULL);
+		len += sprintf(buf + len, "@%c%u",
+			       id & 0x80000000 ? 'C' : 'T', id & ~0x80000000);
+	}
+#endif
+	if (IS_ENABLED(CONFIG_PRINTK_FROM) || time)
+		buf[len++] = ' ';
 	return len;
 }
 
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index d312188..a403e11 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -17,6 +17,23 @@ config PRINTK_TIME
 	  The behavior is also controlled by the kernel command line
 	  parameter printk.time=1. See Documentation/admin-guide/kernel-parameters.rst
 
+config PRINTK_FROM
+	bool "Show caller information on printks"
+	depends on PRINTK
+	help
+	  Selecting this option causes "thread id" (if in task context) or
+	  "processor id" (if not in task context) of the printk() messages
+	  to be added.
+
+	  This option is intended for environments where multiple threads
+	  concurrently call printk() for many times, for it is difficult to
+	  interpret without knowing where these lines (or sometimes individual
+	  line which was divided into multiple lines due to race) came from.
+
+	  Since this is currently an experimental functionality which might be
+	  changed/reverted in the future, there is no option to enable/disable
+	  at the kernel command line parameter or sysfs interface.
+
 config CONSOLE_LOGLEVEL_DEFAULT
 	int "Default console loglevel (1-15)"
 	range 1 15
-- 
1.8.3.1

