Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:26:32 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 94101580A28;
	Sat,  1 Dec 2018 18:20:49 -0800 (PST)
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id 7140C61DDD;
	Sat,  1 Dec 2018 03:34:48 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 03:33:47 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A01/jFBMnn2MhBmh7aK4l6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPnzocbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRttfWSxfDIOy?=
 =?us-ascii?q?bIUBAeQOMulaoIbhqFUOtgO+CAu3CePzyDJFnGP60bE03ukjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7KrkdUfyuzKnVyjXIcvFY1i376IfVaB8qvPaBXapufsrXxkkvCgLFjlOJ?=
 =?us-ascii?q?pYzmITyVzOINvHaf7+d7VOKjkmonqwZvojex3MsskZPGhoEIylDe7yp12oA1Ks?=
 =?us-ascii?q?OiRE55ed6pCZ1dvDyZOYtuWs4uXX1ktSIgxrEbt5O3YjIGxIkkyhLDcfCKcoqF?=
 =?us-ascii?q?7gr+WOqPIDp0nm9pdKy+ihqo7ESty+PxWtO63VtLqCdOj8PCuWoX1xPJ78iKUv?=
 =?us-ascii?q?t98Vml2TaIzw3T9O5ELl4ulabBKJ4u3KQwlpwNvkTHBCP2n1/2jKCOekUl/Oin?=
 =?us-ascii?q?9fjnb634qpOAM4J4kBzyP6owlsClHOg1MRQCU3Ka9Om+zLHj+Ff2QLROjv04iK?=
 =?us-ascii?q?nZt5XaKNwfpq64BQ9Vz4ki5w+8Dzi4ytQYm2cILFZcdBKAgYnpPU/BIOrjAPeh?=
 =?us-ascii?q?jFSjji1ry+rFPrL/GJXNKGbMkLP7cbZ68U5cxxI/zcpD6JJMFrEBPPXzV1f1tN?=
 =?us-ascii?q?zZDR82LRa4wun6CNhm0oMeWGSPArKWMa/IsF+I4P4vLPeIZIMPpDn9LP0l7eb0?=
 =?us-ascii?q?jXAlgV8dYbWp3ZwPZXC4BPtmIlmZbmDrgtsbEWcKoxAxTOrliFCZVT5TZnCyX7?=
 =?us-ascii?q?8z5z0hCYKmC5vDSZ6pgLCbwCi7GZhWbHhcCl+QCXfoa5mEW/AUZSKQJc9ujCYI?=
 =?us-ascii?q?VbumS48n0xGusxT3y75mLurS5y0Zuojv1Nlz5+3Pix4y8SZ4ANia02GIV2t0hH?=
 =?us-ascii?q?8HRycq3KBjpkxw0k2M0bN4g/xfFtxf/elJXR04NZPHy+x6CtbyWh/Of9uTSVam?=
 =?us-ascii?q?RMmmDi81Tt4r39AOZEN9Ec24jh/fxyqqH6MVl7uTCZw36K3c2WL9J8J8y3nc0q?=
 =?us-ascii?q?khgEIrQs9ONW2gm65++BLfB4/Pk0WFiamqcb4Q0zLK9GeG1WCOpl1XUBZsUaXZ?=
 =?us-ascii?q?WnASflbZos7n5kzcVbOuCa4oMg1aycGcLKtGbdnpjVZDRPfnI9neZ2Oxm2GtBR?=
 =?us-ascii?q?eH3L+MbYzqe3kD0yXZEkQLjwcT/XOePwgkGiihu37eDCBpFV/3fkzj6/d+p22h?=
 =?us-ascii?q?Qk801Q6KaVZh2KSz+hMOgfycSvUT3q8LuSs7qjV0Gkq90MzSC9aauwVhe6Bca8?=
 =?us-ascii?q?sn4FhbzWLZqxB9Ppu4IqB+h14edgN3v1/u1xR3EIlAjdImrHQwzAp2KKKY1lxB?=
 =?us-ascii?q?eiic3ZDxPL3XN2bz8Aqua67QxlHRztKW9r0T5/Q/rlXppBupGVY683V7z9lV1G?=
 =?us-ascii?q?OR6Y/ODAUMXpP+TEY2+wJhqLHHfyYy/YXU1X5rMamqqTLC39MpBO04yhevZdtf?=
 =?us-ascii?q?MaWEFBPsHM0eHcShNOsqm12xZBIeIO9S7LI0P9+hd/ae2K+rIfxsky68gWVG4I?=
 =?us-ascii?q?ByyESM9yVnR+7M3pYFxeyY3wSdWzf9ilehrt74mYReaT4OGWq/zDDuBJRNaa1q?=
 =?us-ascii?q?YYYLFWCuLtWtxtV/m5HiQWRY+0OkB18c3s+mZwCSb13k0QJMz0sXpWGoljWizz?=
 =?us-ascii?q?xzlTEkta6f3C3Iw+T/exsLIG9LRG9+jVjyJYi4lcwVXE+tbwIxjhuq+V76x7RH?=
 =?us-ascii?q?pKR4N2TSQUZIczL2Lm14Sauwq7yCbtVL6JMptyVXTeu9bUqbSr77vxsVzSfjE3?=
 =?us-ascii?q?FCyzA8cjGgoo/5kABiiGKBMHZzq2LUecNqyhfF59zcRvlR0iAdRCZiijnXBVm8?=
 =?us-ascii?q?P9+38tWSjJrDtuG+V2S8VpxcayXrzIWAtDel6m1uGxGwg/ezmtj/GwggzSD7z8?=
 =?us-ascii?q?VqVTnPrBvkYojkzaO6PfhlfklpAl/x8M56GoB4kosti5Acw3kahpOJ/XUZlWf/?=
 =?us-ascii?q?K8lU2aX7bHAVXz4E38bV4BT52E1kNn+JxJj2VnSHzsthetm1eGUW2i0m4sBOCa?=
 =?us-ascii?q?eU6qFEnCRvrlq5qwLRfeZynjMHxfQy734ahvkDuBAxwSWFHrASAU5YMDTplxSJ?=
 =?us-ascii?q?7NCxtr9bZWixfriryEpxg8qhA6qcrQFGV3b0YZMiHS527sViP1PAynzz6of4eN?=
 =?us-ascii?q?bOadIfrAGbkxDFj+JNMpI+iuIKhTZ7OWL6pXAl1+k7jRl00ZC7poeHLXht/Lmi?=
 =?us-ascii?q?Ah5ZLTD1Y8IT+jfwjadRhMqW3oavHol/FTUPRpfnUfWoEDcKv/T9KwmOCCE8qm?=
 =?us-ascii?q?ucGbfHBgCQ8kBmr3bSE5yxM3GXOWIUzdFjRBmbOUxejxoYXDQ8np4lCA+qwNbt?=
 =?us-ascii?q?f1t+5jAU/lT4sAdDyvp0NxnjVWfSvAWoZS0xSJeBNxpa9B1C613WMcyD7eJzAi?=
 =?us-ascii?q?dY8Ye6rAGWLmybZgJIDXwGW0CeBlDjOKWu6sfE8+SCGuW+KP7Oa62UqeNCT/eI?=
 =?us-ascii?q?2Y6v0ox+8jeMMcWPI2BiD+Ah1UpFR3x5AMPZmzMASyEMkyLNbsibpAqz+yFtr8?=
 =?us-ascii?q?C/9ujrVxzr5YeVF7RSNtBv8QisgaifL+6QmDp5KTFA25MM23DIybsf3F0Tiy10?=
 =?us-ascii?q?dDmtC7MAtSHTQ6LKh69XFAUWaydyNMtO8qI90RNBOc/ditPpyLF4iuQ5BEtCVV?=
 =?us-ascii?q?zkgsupf9AFI3mhNFPbA0aGLK6JJSDQzMHtf6y9SadcjOFVtxCrvTabEknjPimM?=
 =?us-ascii?q?ljXzVhCvN/1Mgz+fPBBEpI69dRNtA3D5TN36ch27LMN3jTouzL0oh3PKMHQQPi?=
 =?us-ascii?q?Rmf0xRrr2f8yVYj+57G2xA6HplMOaFlzyY7+neNpYZr/9rDj5omOJd5XQw06FV?=
 =?us-ascii?q?4z1cRPxphCvSqcZjolG8nemJzzpnURxOpS5KhYKLp0piP6rZ+4JEWXbF+hIN8G?=
 =?us-ascii?q?qRBw4Lp9tjFt3gpaRQxsLTm6L0LTcRu+7TqPMRG9KcDcaOPHcieU7xHTrdAAYG?=
 =?us-ascii?q?ZSW2LmyZjEtYxrXazXCPoZUr4qPhnp0cSrZHT18kXqcBB15qEc1EO5pxWSEkmK?=
 =?us-ascii?q?KAj98g6n+3rR2XT8Jf6NSPbe6fH/jpYAyelqVJawdAlan/NpgeOpHT1EtlZlx7?=
 =?us-ascii?q?h8LNAUWGDv5XpSg0UgIou1hKuFh3SGE6kxb9ZwWi/X4VUP25hBg7jiN/JOAq6j?=
 =?us-ascii?q?qq+F40O0DD4i091kspz4a2yQuNeSL8ef/jFbpdDDD54g1oasv2?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DNAAAjcQJch0O0hNFjGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYJtfyeDeZQjUAEBBoE1FGiII5AcEgEBGBMBhEACgzQiOBIBAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQoLCQgpL4I2JAGCYQEBAQEDAQIgBFIGCQEBCg4DAwECAwImAgIDT?=
 =?us-ascii?q?AgGAQwGAgEBAYMcgXUMAQWlYHwziimBC4sRgQ+BB4ERJ4I2NYgFglcChyAHggi?=
 =?us-ascii?q?GRDWQFgmRNh6Ja4c5LIhXiQCGQQIRFIFdgXYzGoNfgiQDF44sY4EFAQGNNAEB?=
X-IPAS-Result: =?us-ascii?q?A0DNAAAjcQJch0O0hNFjGwEBAQEDAQEBBwMBAQGBZYJtfye?=
 =?us-ascii?q?DeZQjUAEBBoE1FGiII5AcEgEBGBMBhEACgzQiOBIBAwEBAQEBAQIBEwEBAQoLC?=
 =?us-ascii?q?QgpL4I2JAGCYQEBAQEDAQIgBFIGCQEBCg4DAwECAwImAgIDTAgGAQwGAgEBAYM?=
 =?us-ascii?q?cgXUMAQWlYHwziimBC4sRgQ+BB4ERJ4I2NYgFglcChyAHggiGRDWQFgmRNh6Ja?=
 =?us-ascii?q?4c5LIhXiQCGQQIRFIFdgXYzGoNfgiQDF44sY4EFAQGNNAEB?=
X-IronPort-AV: E=Sophos;i="5.56,302,1539673200"; 
   d="scan'208,223";a="54122337"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 01 Dec 2018 03:33:44 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726736AbeLAWm7 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 17:42:59 -0500
Received: from www262.sakura.ne.jp ([202.181.97.72]:32376 "EHLO
        www262.sakura.ne.jp" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726488AbeLAWm7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 17:42:59 -0500
Received: from fsav106.sakura.ne.jp (fsav106.sakura.ne.jp [27.133.134.233])
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTP id wB1BUOx6006520;
        Sat, 1 Dec 2018 20:30:24 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72)
 by fsav106.sakura.ne.jp (F-Secure/fsigk_smtp/530/fsav106.sakura.ne.jp);
 Sat, 01 Dec 2018 20:30:24 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav106.sakura.ne.jp)
Received: from [192.168.1.8] (softbank126126163036.bbtec.net [126.126.163.36])
        (authenticated bits=0)
        by www262.sakura.ne.jp (8.15.2/8.15.2) with ESMTPSA id wB1BUI12006483
        (version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NO);
        Sat, 1 Dec 2018 20:30:24 +0900 (JST)
        (envelope-from penguin-kernel@i-love.sakura.ne.jp)
Subject: Re: [PATCH] printk: don't unconditionally shortcut print_time()
From: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
To: Petr Mladek <pmladek@suse.com>,
        Sergey Senozhatsky <sergey.senozhatsky@gmail.com>,
        Steven Rostedt <rostedt@goodmis.org>
Cc: linux-kernel@vger.kernel.org
References: <1543056613-4779-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp>
 <20181129141921.djeumz723fr7pasn@pathway.suse.cz>
 <201811300226.wAU2Q2JG060388@www262.sakura.ne.jp>
 <20181130123027.cyqfi2k34nh2gjmx@pathway.suse.cz>
 <02b4ce85-c1e5-6601-e3a7-cecfbd5298dc@i-love.sakura.ne.jp>
Message-ID: <8634f952-7a14-055d-943c-d219ab5d8c1b@i-love.sakura.ne.jp>
Date: Sat, 1 Dec 2018 20:30:16 +0900
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.2
MIME-Version: 1.0
In-Reply-To: <02b4ce85-c1e5-6601-e3a7-cecfbd5298dc@i-love.sakura.ne.jp>
Content-Type: text/plain; charset=utf-8
Content-Language: en-US
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From bc9ea8e7878a618fd4490ec287eb691fee144acb Mon Sep 17 00:00:00 2001
From: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date: Sat, 1 Dec 2018 19:37:42 +0900
Subject: [PATCH] printk: fix printk_time race.

Since printk_time can be toggled via /sys/module/printk/parameters/time ,
it is not safe to assume that output length does not change across
multiple msg_print_text() calls. If we hit this race, we can observe
failures such as SYSLOG_ACTION_READ_ALL writes more bytes than userspace
has supplied, SYSLOG_ACTION_SIZE_UNREAD returns -EFAULT when succeeded,
SYSLOG_ACTION_READ reads garbage memory or even triggers an kernel oops
at _copy_to_user() due to integer overflow.

To close this race, get a snapshot value of printk_time and pass it to
SYSLOG_ACTION_READ, SYSLOG_ACTION_READ_ALL, SYSLOG_ACTION_SIZE_UNREAD and
kmsg_dump_get_buffer().

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Signed-off-by: Petr Mladek <pmladek@suse.com>
---
 kernel/printk/printk.c | 68 +++++++++++++++++++++++++++-----------------------
 1 file changed, 37 insertions(+), 31 deletions(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 5c2079d..64ed21d 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -403,6 +403,7 @@ __packed __aligned(4)
 static u64 syslog_seq;
 static u32 syslog_idx;
 static size_t syslog_partial;
+static bool syslog_time;
 
 /* index and sequence number of the first record stored in the buffer */
 static u64 log_first_seq;
@@ -1228,12 +1229,7 @@ static inline void boot_delay_msec(int level)
 
 static size_t print_time(u64 ts, char *buf)
 {
-	unsigned long rem_nsec;
-
-	if (!printk_time)
-		return 0;
-
-	rem_nsec = do_div(ts, 1000000000);
+	unsigned long rem_nsec = do_div(ts, 1000000000);
 
 	if (!buf)
 		return snprintf(NULL, 0, "[%5lu.000000] ", (unsigned long)ts);
@@ -1242,7 +1238,8 @@ static size_t print_time(u64 ts, char *buf)
 		       (unsigned long)ts, rem_nsec / 1000);
 }
 
-static size_t print_prefix(const struct printk_log *msg, bool syslog, char *buf)
+static size_t print_prefix(const struct printk_log *msg, bool syslog,
+			   bool time, char *buf)
 {
 	size_t len = 0;
 	unsigned int prefix = (msg->facility << 3) | msg->level;
@@ -1261,11 +1258,13 @@ static size_t print_prefix(const struct printk_log *msg, bool syslog, char *buf)
 		}
 	}
 
-	len += print_time(msg->ts_nsec, buf ? buf + len : NULL);
+	if (time)
+		len += print_time(msg->ts_nsec, buf ? buf + len : NULL);
 	return len;
 }
 
-static size_t msg_print_text(const struct printk_log *msg, bool syslog, char *buf, size_t size)
+static size_t msg_print_text(const struct printk_log *msg, bool syslog,
+			     bool time, char *buf, size_t size)
 {
 	const char *text = log_text(msg);
 	size_t text_size = msg->text_len;
@@ -1284,17 +1283,17 @@ static size_t msg_print_text(const struct printk_log *msg, bool syslog, char *bu
 		}
 
 		if (buf) {
-			if (print_prefix(msg, syslog, NULL) +
+			if (print_prefix(msg, syslog, time, NULL) +
 			    text_len + 1 >= size - len)
 				break;
 
-			len += print_prefix(msg, syslog, buf + len);
+			len += print_prefix(msg, syslog, time, buf + len);
 			memcpy(buf + len, text, text_len);
 			len += text_len;
 			buf[len++] = '\n';
 		} else {
 			/* SYSLOG_ACTION_* buffer size only calculation */
-			len += print_prefix(msg, syslog, NULL);
+			len += print_prefix(msg, syslog, time, NULL);
 			len += text_len;
 			len++;
 		}
@@ -1331,9 +1330,17 @@ static int syslog_print(char __user *buf, int size)
 			break;
 		}
 
+		/*
+		 * To keep reading/counting partial line consistent,
+		 * use printk_time value as of the biginning of a line.
+		 */
+		if (!syslog_partial)
+			syslog_time = printk_time;
+
 		skip = syslog_partial;
 		msg = log_from_idx(syslog_idx);
-		n = msg_print_text(msg, true, text, LOG_LINE_MAX + PREFIX_MAX);
+		n = msg_print_text(msg, true, syslog_time, text,
+				   LOG_LINE_MAX + PREFIX_MAX);
 		if (n - syslog_partial <= size) {
 			/* message fits into buffer, move forward */
 			syslog_idx = log_next(syslog_idx);
@@ -1373,11 +1380,13 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	u64 next_seq;
 	u64 seq;
 	u32 idx;
+	bool time;
 
 	text = kmalloc(LOG_LINE_MAX + PREFIX_MAX, GFP_KERNEL);
 	if (!text)
 		return -ENOMEM;
 
+	time = printk_time;
 	logbuf_lock_irq();
 	/*
 	 * Find first record that fits, including all following records,
@@ -1388,7 +1397,7 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	while (seq < log_next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		len += msg_print_text(msg, true, NULL, 0);
+		len += msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -1399,7 +1408,7 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	while (len > size && seq < log_next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		len -= msg_print_text(msg, true, NULL, 0);
+		len -= msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -1410,14 +1419,9 @@ static int syslog_print_all(char __user *buf, int size, bool clear)
 	len = 0;
 	while (len >= 0 && seq < next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
-		int textlen;
+		int textlen = msg_print_text(msg, true, time, text,
+					     LOG_LINE_MAX + PREFIX_MAX);
 
-		textlen = msg_print_text(msg, true, text,
-					 LOG_LINE_MAX + PREFIX_MAX);
-		if (textlen < 0) {
-			len = textlen;
-			break;
-		}
 		idx = log_next(idx);
 		seq++;
 
@@ -1541,11 +1545,13 @@ int do_syslog(int type, char __user *buf, int len, int source)
 		} else {
 			u64 seq = syslog_seq;
 			u32 idx = syslog_idx;
+			bool f = syslog_partial ? syslog_time : printk_time;
 
 			while (seq < log_next_seq) {
 				struct printk_log *msg = log_from_idx(idx);
 
-				error += msg_print_text(msg, true, NULL, 0);
+				error += msg_print_text(msg, true, f, NULL, 0);
+				f = printk_time;
 				idx = log_next(idx);
 				seq++;
 			}
@@ -2026,8 +2032,8 @@ static void console_lock_spinning_enable(void) { }
 static int console_lock_spinning_disable_and_check(void) { return 0; }
 static void call_console_drivers(const char *ext_text, size_t ext_len,
 				 const char *text, size_t len) {}
-static size_t msg_print_text(const struct printk_log *msg,
-			     bool syslog, char *buf, size_t size) { return 0; }
+static size_t msg_print_text(const struct printk_log *msg, bool syslog,
+			     bool time, char *buf, size_t size) { return 0; }
 static bool suppress_message_printing(int level) { return false; }
 
 #endif /* CONFIG_PRINTK */
@@ -2385,8 +2391,7 @@ void console_unlock(void)
 
 		len += msg_print_text(msg,
 				console_msg_format & MSG_FORMAT_SYSLOG,
-				text + len,
-				sizeof(text) - len);
+				printk_time, text + len, sizeof(text) - len);
 		if (nr_ext_console_drivers) {
 			ext_len = msg_print_ext_header(ext_text,
 						sizeof(ext_text),
@@ -3110,7 +3115,7 @@ bool kmsg_dump_get_line_nolock(struct kmsg_dumper *dumper, bool syslog,
 		goto out;
 
 	msg = log_from_idx(dumper->cur_idx);
-	l = msg_print_text(msg, syslog, line, size);
+	l = msg_print_text(msg, syslog, printk_time, line, size);
 
 	dumper->cur_idx = log_next(dumper->cur_idx);
 	dumper->cur_seq++;
@@ -3181,6 +3186,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	u32 next_idx;
 	size_t l = 0;
 	bool ret = false;
+	bool time = printk_time;
 
 	if (!dumper->active)
 		goto out;
@@ -3204,7 +3210,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	while (seq < dumper->next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		l += msg_print_text(msg, true, NULL, 0);
+		l += msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -3215,7 +3221,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	while (l > size && seq < dumper->next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		l -= msg_print_text(msg, true, NULL, 0);
+		l -= msg_print_text(msg, true, time, NULL, 0);
 		idx = log_next(idx);
 		seq++;
 	}
@@ -3228,7 +3234,7 @@ bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
 	while (seq < dumper->next_seq) {
 		struct printk_log *msg = log_from_idx(idx);
 
-		l += msg_print_text(msg, syslog, buf + l, size - l);
+		l += msg_print_text(msg, syslog, time, buf + l, size - l);
 		idx = log_next(idx);
 		seq++;
 	}
-- 
1.8.3.1

