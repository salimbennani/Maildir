Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 18:11:27 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DAED458041B;
	Wed, 28 Nov 2018 01:37:38 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 01:37:38 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Avk7l/BXkteTIY0yjHFTwqQVRFVLV8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhKPv6dThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGoOy?=
 =?us-ascii?q?YZUSAeQPPuhWqIvyp1UBohWxHgmsHOHixyRUinL1x6A2z/4sHR3a0AEmAtkAsG?=
 =?us-ascii?q?7UrNLwNKoKT+21zLfHzTPaY/xUxDf29ZbGcgs7rvGNQLl9dsTQxlcpFwPelVif?=
 =?us-ascii?q?tZflPzKL2egXtGib9eVgWPuphmU6qA9xuiCiytkwhoTNnI4Z117J+TtjzIooJt?=
 =?us-ascii?q?C0VFR3bN+mHZdIqi2XOJd6Ttk/T211pio20LMLtYKhcCUIyZkqwQPUZeadfIiS?=
 =?us-ascii?q?+B3jUf6cITdmi3Jhf7Kynwiy8Ue+xe3mTMW000hFrjBDktbSsnABzRvT6tKISv?=
 =?us-ascii?q?dl/0eh3yiA1xzL5+1aPUw5kbDXJ4Mvz7IujJYfrEfOEjPslEj3jqKabkAk9fKp?=
 =?us-ascii?q?6+TjbLXmvJicN4pshwH6M6QunNG/AOshPggNQWeb4+K826Pn/UHgR7VLgPs2nb?=
 =?us-ascii?q?fDsJ3BO8QbqbC2AxVP3oYg9Rm/FTGm38ocnXUdK1JFYh2Hg5DzO17SOPD4Eeu/?=
 =?us-ascii?q?g1O0nTdvxvDGPaPuDo/CL3jei7rhebd960hByAs819xf5pRUCq0fL/L3QEP+qN?=
 =?us-ascii?q?vYDhohOQyu3+nnEMl91p8ZWW+XAq+WKqLSsUOS6eIoOeWMZJIVtyz7K/gq/PPu?=
 =?us-ascii?q?iX45mVkAfaimx5cXaXa4Huh4LEWde3bjntABEWIStAokUOPqkEGCUSJUZ3uqXa?=
 =?us-ascii?q?I84S80BJilDYfEQICthruB0Ty/Hp1XYGBGF1+NHW3pd4WCR/cDdiaSLtV9nTwD?=
 =?us-ascii?q?ULirU5Uh2g22tA/m17pnKfLZ9TcDtZLj09h15PfflQso+jx2FMmd12CNT2dpnm?=
 =?us-ascii?q?IHXTM23aZ/oVBjxVeHy6R3n/tYFdlL7fNTTgg6LYLcz/B9C93qWQLOZNGJREyi?=
 =?us-ascii?q?QtWnGz4xSN0xzsQKY0Z8HdWikx/C0zCrA78Ti7yEGpg0/rjA0Hj2IsZ302zG27?=
 =?us-ascii?q?U5j1k6XstPMnWribNl+AjNGYHFiUWZmLysdaQHwiHN8mCPzW6NvEFdVA59SqHF?=
 =?us-ascii?q?XXEZZkvLotX1/ELCT7myCbs5NgtN09KNKqxPatfxl1VJWO/jOMjCY2K2g2q/GA?=
 =?us-ascii?q?yHxq2SY4bwe2USxiPdCFManAAV5nuGMQk+BiG8o2PRFjBuFFTvY1/y/ul6sn+0?=
 =?us-ascii?q?Ukg0zwSSZU17y7W14gIVheCbS/4LwrIEuSIhqzJoHFa939PaEcaAqxBmfKVGZd?=
 =?us-ascii?q?M94VFH1W3Cugx5P5ygKb1ih1EEfwR2uUPuywt4CoFancc2q3MqyRJ4KbiE31NZ?=
 =?us-ascii?q?azOYwZfwN6XNJWn24h+uZLDZ21HE3NmN56cA9e43q1PgvAGuCEov6HFn09hT03?=
 =?us-ascii?q?uB6ZTGFgsSUZTtUkkp8xh2va3VYi4454nMz31jLbG0siPe29IuHOYkygugc81D?=
 =?us-ascii?q?P6+eFQ7yE9cVB86hKOExn1ipbxQEPP1d9aIuPsOmceeG17CvPOp6gD2mimFH6p?=
 =?us-ascii?q?hn0k2Q7yp8VvLI35EdzvGC3wuISy3zjE28vcDwg4xEYy8dHnC+yST9GIFefKly?=
 =?us-ascii?q?cpsVBme0JM23wM5zh5rsW35e6V6iCEkK2M6veRqOcVP92Rdc2lgQoXyigSG41S?=
 =?us-ascii?q?B7kyk1rqqD2yzD2+TjdBsdNm9LXmVilkrsIY6vgtAeXUioaRUplRS/6Ub7wahb?=
 =?us-ascii?q?uLpwL23JTUhUeCj2KnloUrGsubqaf85P9JQovD1VUOume1CaSb39oxwA3yP4BW?=
 =?us-ascii?q?RexzM7dzCsuprnmRx3k2adLHd1rHrEdsB83xbf5NrARfFP2joKXjV3iT7SBlKk?=
 =?us-ascii?q?Jdmm4c2Ul4vfsuC5T2+gVodccS7xwYOCtSu743ZnARm+n/C1h93mHhI20S7919?=
 =?us-ascii?q?l2SyrIqAzwbZXs16S/KehnZFVnBEfg68pmHYFziogwi4sR2XQAhpWV4GAIkWH8?=
 =?us-ascii?q?MdhA3aL+bXwNRSMEwtLP4Qjl3lFjIWyNx47jSnqdxc5hbcGgYmwKwiI989xKCK?=
 =?us-ascii?q?CM4bxBnCt1oUC3oRjfYPdjhTcd1eUh6GQBjO4XogotwT6QArQTHUleICztmA6E?=
 =?us-ascii?q?79G4rKVLemmvdaK821Z5ndCkFLuCuB1TWG7lepc+Gi999tl/MFXJ0HHp64DrYt?=
 =?us-ascii?q?/Qbc8Ith2PkhfNlOxVKJM3lvoXiitrI2P9vXs5y+EliRxix421vI+CK2915qK2?=
 =?us-ascii?q?HgZYNiHpZ8MU4jzilrxRnsGS34CyBJlhHigLUYDsTfKpFjISqPvmOxyPED06tn?=
 =?us-ascii?q?eUB77fERWD50dhqnLFC4qrOG2PJHkF0dViQwGQJE5FjwARQjo6hYQ1FhywyMzi?=
 =?us-ascii?q?bUd55S0R5ljipRtX0e9oMxj/UmHCpAancDs0SZ6fLAZI4QFG/UvaLcue7udrFS?=
 =?us-ascii?q?FC4pKhtBCNKnCcZwlQDWAJXVGEB0n+Pra049nM6fOYBu24L/vBeriOre1eV/GV?=
 =?us-ascii?q?xZOgyIdm/jCMNtmRMXlmFfE0xk1DXXVhEcTDhzoPUzAXlz7Kb8ODpBez5Cx3rs?=
 =?us-ascii?q?O88PTqQg7v5pGPC7xdMdpx4RC2nLyDOvWUhCZ4LzZYy5wNyWXJyLgZwF4dlSVu?=
 =?us-ascii?q?eyOxHrQHsC7HVLjQlbNPDx4HdyNzM9NF4Lgh3gZWI87UlNP02qR8jv40EFpFUV?=
 =?us-ascii?q?3hmse0Zc0FOW29NVXHBFqVO7SCPzHE38b3YaakQ71KkOpUrwGwuSqcE0L7IjSD?=
 =?us-ascii?q?ljzpWwqzPu1WkC6bPAJRuIemfxZpCGjjSs/maxKhPN92iz023aM7hnfQOWEANj?=
 =?us-ascii?q?h8dltHrqeM4iNAnvV/B2tB42JlLOaenSaZ6ujYKpAOvvpqAiR7jeRa4HshxrtR?=
 =?us-ascii?q?7SFEQuF1mSTIot5vpVGmjveAyj59XBVSrTZLgdHDgUI3HKzJ95xNEUzF5BsX4S?=
 =?us-ascii?q?3EDh0apt5oTMfuo6lKxvDFk6XvLDZEtdnT+J1YT+HQJdKONnY7PFLDFTrQCw0E?=
 =?us-ascii?q?BWqiMWzPjkpRivzU/HCRqp88q7Dmn50STr5dElcyE6VeQm1hEccZKZF7RDRso6?=
 =?us-ascii?q?OeiclAsXP4vgTUQcJyopfYW+iODP7vbjeF2/0MQhoDwbr1KcwvK5fixkF+dlQy?=
 =?us-ascii?q?yIHWBlDJQN1RviBJZAYlpERH6nU4RWo2jQatUR+g+H8eE7aemQ86wl9la+M8+B?=
 =?us-ascii?q?/v7k0xK16MozE/xg15o9LvyRCcaiTwKqj4CZtRASq3u1QZMZ7hRQtxKwqokhog?=
 =?us-ascii?q?fBLNXbEZtaZ8cWlthEeIvJJVGrhGULFAaRkc7fiNYrMj1lEK+Qu9wkoSzuvID9?=
 =?us-ascii?q?5TiUMWapet5yZf1gR4RNUuJKGWI7BGmAsDzpmStzOlg7hiiDQVIFwApSbLIHYF?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ANAACuYP5bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2snjBGMCVIGgUmXLoFzLBMBh2giNAkNAQMBAQEBAQECARMBAQE?=
 =?us-ascii?q?IDQkIKS+CNiQBgmIDAwECJAsBRgYJAQE+EgMpKwYBEgUPgw2BdQ0FpxYzhAIBh?=
 =?us-ascii?q?kmHaoJpgUIXeIEHgRGHdwiFbwKJBYcVkAEJkSYLGJEViHaRGIINTTAIgyeCJxe?=
 =?us-ascii?q?NZgFDMjOBBQEBii2CTAEB?=
X-IPAS-Result: =?us-ascii?q?A0ANAACuYP5bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?njBGMCVIGgUmXLoFzLBMBh2giNAkNAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBg?=
 =?us-ascii?q?mIDAwECJAsBRgYJAQE+EgMpKwYBEgUPgw2BdQ0FpxYzhAIBhkmHaoJpgUIXeIE?=
 =?us-ascii?q?HgRGHdwiFbwKJBYcVkAEJkSYLGJEViHaRGIINTTAIgyeCJxeNZgFDMjOBBQEBi?=
 =?us-ascii?q?i2CTAEB?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="64323514"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 28 Nov 2018 01:37:36 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728400AbeK1Uca (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 15:32:30 -0500
Received: from mirror2.csie.ntu.edu.tw ([140.112.30.76]:49292 "EHLO
        wens.csie.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1728181AbeK1Ubf (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 15:31:35 -0500
Received: by wens.csie.org (Postfix, from userid 1000)
        id 600EF600DC; Wed, 28 Nov 2018 17:30:28 +0800 (CST)
From: Chen-Yu Tsai <wens@csie.org>
To: Maxime Ripard <maxime.ripard@bootlin.com>,
        Alexandre Belloni <alexandre.belloni@bootlin.com>,
        Alessandro Zummo <a.zummo@towertech.it>,
        Michael Turquette <mturquette@baylibre.com>,
        Stephen Boyd <sboyd@kernel.org>,
        Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>
Cc: Chen-Yu Tsai <wens@csie.org>, linux-arm-kernel@lists.infradead.org,
        linux-rtc@vger.kernel.org, linux-clk@vger.kernel.org,
        devicetree@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-sunxi@googlegroups.com
Subject: [PATCH 06/15] rtc: sun6i: Add support for different variants
Date: Wed, 28 Nov 2018 17:30:03 +0800
Message-Id: <20181128093013.24442-7-wens@csie.org>
X-Mailer: git-send-email 2.20.0.rc1
In-Reply-To: <20181128093013.24442-1-wens@csie.org>
References: <20181128093013.24442-1-wens@csie.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Amongst the Allwinner SoCs that have seen some kind of coverage by the
linux-sunxi community, whether it be mainline Linux or U-boot support,
or just available datasheets, most newer chips use the RTC design first
seen in the A31 (sun6i).

Overall there have been some minor differences. This patch covers the
following:

  - average clock rate of the internal RC oscillator
    + presence of fixed and adjustable prescaler for this clock
  - availability of an external (to the SoC) clock output

One major difference regarding the H6 is the 24 MHz crystal is now
routed through the RTC, as a digitally compensated oscillator (DCXO).
This is not covered in this patch and will be supported later.

Other differences are either unrelated to RTC or clock functionality,
such as boot or crypto related registers, or the driver simply doesn't
use the feature in question. One example of the latter is the
calibration function for the RC oscillator. We consider this clock to
be very bad and avoid using it.

Signed-off-by: Chen-Yu Tsai <wens@csie.org>
---
 drivers/rtc/rtc-sun6i.c | 58 ++++++++++++++++++++++++++++++++++++-----
 1 file changed, 51 insertions(+), 7 deletions(-)

diff --git a/drivers/rtc/rtc-sun6i.c b/drivers/rtc/rtc-sun6i.c
index 8edd9e1ec007..d1866d90b9ef 100644
--- a/drivers/rtc/rtc-sun6i.c
+++ b/drivers/rtc/rtc-sun6i.c
@@ -118,9 +118,30 @@
 #define SUN6I_YEAR_MAX				2033
 #define SUN6I_YEAR_OFF				(SUN6I_YEAR_MIN - 1900)
 
+/*
+ * There are other differences between models, including:
+ *
+ *   - number of GPIO pins that can be configured to hold a certain level
+ *   - crypto-key related registers (H5, H6)
+ *   - boot process related (super standby, secondary processor entry address)
+ *     registers (R40, H6)
+ *   - SYS power domain controls (R40)
+ *   - DCXO controls (H6)
+ *   - RC oscillator calibration (H6)
+ *
+ * These functions are not covered by this driver.
+ */
+struct sun6i_rtc_clk_data {
+	unsigned long rc_osc_rate;
+	unsigned int fixed_prescaler : 16;
+	unsigned int has_prescaler : 1;
+	unsigned int has_out_clk : 1;
+};
+
 struct sun6i_rtc_dev {
 	struct rtc_device *rtc;
 	struct device *dev;
+	const struct sun6i_rtc_clk_data *data;
 	void __iomem *base;
 	int irq;
 	unsigned long alarm;
@@ -139,14 +160,19 @@ static unsigned long sun6i_rtc_osc_recalc_rate(struct clk_hw *hw,
 					       unsigned long parent_rate)
 {
 	struct sun6i_rtc_dev *rtc = container_of(hw, struct sun6i_rtc_dev, hw);
-	u32 val;
+	u32 val = 0;
 
 	val = readl(rtc->base + SUN6I_LOSC_CTRL);
 	if (val & SUN6I_LOSC_CTRL_EXT_OSC)
 		return parent_rate;
 
-	val = readl(rtc->base + SUN6I_LOSC_CLK_PRESCAL);
-	val &= GENMASK(4, 0);
+	if (rtc->data->fixed_prescaler)
+		parent_rate /= rtc->data->fixed_prescaler;
+
+	if (rtc->data->has_prescaler) {
+		val = readl(rtc->base + SUN6I_LOSC_CLK_PRESCAL);
+		val &= GENMASK(4, 0);
+	}
 
 	return parent_rate / (val + 1);
 }
@@ -185,7 +211,8 @@ static const struct clk_ops sun6i_rtc_osc_ops = {
 	.set_parent	= sun6i_rtc_osc_set_parent,
 };
 
-static void __init sun6i_rtc_clk_init(struct device_node *node)
+static void __init sun6i_rtc_clk_init(struct device_node *node,
+				      const struct sun6i_rtc_clk_data *data)
 {
 	struct clk_hw_onecell_data *clk_data;
 	struct sun6i_rtc_dev *rtc;
@@ -200,6 +227,7 @@ static void __init sun6i_rtc_clk_init(struct device_node *node)
 	if (!rtc)
 		return;
 
+	rtc->data = data;
 	clk_data = kzalloc(struct_size(clk_data, hws, 2), GFP_KERNEL);
 	if (!clk_data) {
 		kfree(rtc);
@@ -228,7 +256,7 @@ static void __init sun6i_rtc_clk_init(struct device_node *node)
 	rtc->int_osc = clk_hw_register_fixed_rate_with_accuracy(NULL,
 								"rtc-int-osc",
 								NULL, 0,
-								667000,
+								rtc->data->rc_osc_rate,
 								300000000);
 	if (IS_ERR(rtc->int_osc)) {
 		pr_crit("Couldn't register the internal oscillator\n");
@@ -271,8 +299,18 @@ static void __init sun6i_rtc_clk_init(struct device_node *node)
 err:
 	kfree(clk_data);
 }
-CLK_OF_DECLARE_DRIVER(sun6i_rtc_clk, "allwinner,sun6i-a31-rtc",
-		      sun6i_rtc_clk_init);
+
+static const struct sun6i_rtc_clk_data sun6i_a31_rtc_data = {
+	.rc_osc_rate = 667000, /* datasheet says 600 ~ 700 KHz */
+	.has_prescaler = 1,
+};
+
+static void __init sun6i_a31_rtc_clk_init(struct device_node *node)
+{
+	sun6i_rtc_clk_init(node, &sun6i_a31_rtc_data);
+}
+CLK_OF_DECLARE_DRIVER(sun6i_a31_rtc_clk, "allwinner,sun6i-a31-rtc",
+		      sun6i_a31_rtc_clk_init);
 
 static irqreturn_t sun6i_rtc_alarmirq(int irq, void *id)
 {
@@ -579,6 +617,12 @@ static int sun6i_rtc_probe(struct platform_device *pdev)
 	return 0;
 }
 
+/*
+ * As far as RTC functionality goes, all models are the same. The
+ * datasheets claim that different models have different number of
+ * registers available for non-volatile storage, but experiments show
+ * that all SoCs have 16 registers available for this purpose.
+ */
 static const struct of_device_id sun6i_rtc_dt_ids[] = {
 	{ .compatible = "allwinner,sun6i-a31-rtc" },
 	{ /* sentinel */ },
-- 
2.20.0.rc1

