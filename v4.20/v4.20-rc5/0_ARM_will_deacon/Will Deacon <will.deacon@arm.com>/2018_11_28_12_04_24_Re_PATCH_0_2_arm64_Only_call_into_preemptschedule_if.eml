Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 21:42:53 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga002.fm.intel.com (fmsmga002.fm.intel.com [10.253.24.26])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2201D5803ED;
	Wed, 28 Nov 2018 04:04:12 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga002-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 04:04:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A3nyQ+RxAsXNumU3XCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4TLPad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJcAY28?=
 =?us-ascii?q?YYQAAPYcMulaoYb9vEMOoBmlCAmwGO/i0CNEimPs0KEk1ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nbrNT1NKMWUeuowqfH0y/MYO9R2Tf79YPFdR4gofCIXbJ0a8be1FcgGBnZgVWX?=
 =?us-ascii?q?r4zoJCma1v4Is2SB8+VgUuevhnchpgpsoTav3t8hhpfVio8R0FzI6Ct0zJgvKd?=
 =?us-ascii?q?GlS0N3fcSoHZpSui2CKYd6X8EvT3t1tCs11rEKo4O3cDQXxJg9xRPTd/qKeJWS?=
 =?us-ascii?q?7B35TuaeOzJ4iWpleL2hgxay9lCtyvPzVsaqylZGtClFncfWtnALyRPT7tKLSv?=
 =?us-ascii?q?xn/keuwTqP1gbT5f9YIU0si6bXN5oszqQtmpcdr0jPBDL6lUbqgKOMd0gp+PCk?=
 =?us-ascii?q?6+H9bbXnop+cOZV0igb7Mqk2nsy/AOI4MhUBXmSC+uSzyqfj/UvnT7VOl/E2la?=
 =?us-ascii?q?fYsJbEKsQBvaO5HQBV3Zg56xqlDDepzs4YnX8ZI1JBYh6HiJLpO17WLPDiEfi/?=
 =?us-ascii?q?m0iskCtsx/3eOr3hA5bNIWbZnLbuYLZw8EpcyAs1zdBC6JNYELABIPTvWkDvsN?=
 =?us-ascii?q?zUFAM2Mwuxw+z/EtVyypseWX6TAq+eKK7SsUWH5uMzI+aWY48Zojb9K+U/6P7o?=
 =?us-ascii?q?gn80glsdfaiv3ZsKZ3G0BPVmI0OFYXXyhtcNC3sFvg07TObykl2NTSZTZ2quX6?=
 =?us-ascii?q?I7/jw7CoWmApnZSoCuh7yB2iG7HppNa2BCC1CMF2rodoqeV/cNbiKSPtFukjge?=
 =?us-ascii?q?Wbe9TI8h0AmktBXmxLp/MurU5ioYuIr529hu5+3TkhIy+SZuD8uH0WGAVGV0nm?=
 =?us-ascii?q?IORz8r06Fzu019ylGf0admh/xUD8Bc5/RMUg0iL57T0/R6C8zuWgLGZtqJS0yp?=
 =?us-ascii?q?QtO8DTE1T9I+2dkOY0lmFtWmjxDD2TeqArAPm7yKApw07rzT33zrK8lhzHbG0b?=
 =?us-ascii?q?Erj0M6TctXKW2mmql/+hDOCIHTjUWWibymdaQG0y7L72eM02yOsEZcUA5zVKXF?=
 =?us-ascii?q?WWsSZk/XrdT/+0PDQKWiCbUhMgtd18GCLrFGZcHujVVDXP3jIsjRY3qtm2esAh?=
 =?us-ascii?q?aF3q6DY5D0e2oDxindCFILkwYI/XmYMwgzHSOho2PYDDxzGlPjeULs8e9iqHyl?=
 =?us-ascii?q?Sk841R2Fb0pk17Ct4B4ameScS+8P3rIDoCohtzR0HFO639LKC9qBpxBtfLlGbd?=
 =?us-ascii?q?M6+ldH0WPZtwpyPpG7K6Bih1gecxl4vk/01hV3DJlAntYurH8w0AVyLqeY2ktb?=
 =?us-ascii?q?dzyExZDwJqHXKm7q8R+1b67ZxF7f38iW+6sV8/s4tkjssxuvFkoh9HVnzcJY03?=
 =?us-ascii?q?+d5pXMEQoTXoj9Ukcx9xhmub7aZjMx6J/T1X1pKaO0qCPN28o1BOs5zRatZ9de?=
 =?us-ascii?q?ML6eGADuCcEbBsiuJ/Ysm1imdR8EOOFS9KgpP8KpbfeG2airPPp+kzKil2hI/I?=
 =?us-ascii?q?d90keU/SpmVuHIx4oFw+2f3gafTTf8jUuuvdrtmY9ZYjEeBGy/xjb+BI5Qf6F9?=
 =?us-ascii?q?YZwECWOzLMKp3NV+gJjtVmVc9F6iAVMGxcCodQCTb1z7wQ1fy0AXrWa7liu/yj?=
 =?us-ascii?q?x+iyspobaH3CzS3+TicwIKO25KRGV4jVbgO5O0j80cXEWzawgplR2l5Vv1xqRB?=
 =?us-ascii?q?paR/KXXTTllMfyTsM25iVa6wvKKYY8FT8JMorTlXUOOkbFCYULH9uRga0yDkH2?=
 =?us-ascii?q?dE3zA0bTKqupb4nxx8lm2dKm1+rH7YecF22Bfe68bQRf9X3joaWiZ4jSPbCUS7?=
 =?us-ascii?q?P9ms5d+UjYvMsviiV2K9UZ1eaSnqwpmHtCeh521qABu/kuu3mt3mFwg6zCD628?=
 =?us-ascii?q?NrVSXOsBbzfI3r276mPuJge0liHEX85NZiGoFijoswg4kd2XsAiZWU53YHkXrz?=
 =?us-ascii?q?Ps9d2aLxd3cNQT8Lw9jI4AnqwkFjL3SJx57nWXWZ2Mdue966YmYO0CIn889KEL?=
 =?us-ascii?q?uU7KBDnSZtp1q4rAHRbuJnkjYT1/Qu82IajP8TuAU20CqdGL8SEFJcPSztkRSI?=
 =?us-ascii?q?8t+/oL9WZGapbbi/yk5+kcq9A7GFpwFWQGz5dYs6HS9s8sV/N0rB0GH06oHhYt?=
 =?us-ascii?q?XRbMgcthuJkxfblOhVKYk8lv4LhSphJGL8smcpy+89jRxyw566uJKLJHlq/KK8?=
 =?us-ascii?q?GhRYLCH6Z9sP+jHxiqZTht2Z0JqoHpVlBzUHRp/oTe+zHTIWtPTnMRuOETImpn?=
 =?us-ascii?q?eaH7rfARGQ6EN8o33TFJCrMmmdJGMFwtV6WBmdOEtfjRgWXDogm542CBuqyNb9?=
 =?us-ascii?q?cEtj5TAR+134qgZKyu1yLBnySWPfpAauajcpR5mTNhtW7gde50jLNcyS9P58Hy?=
 =?us-ascii?q?Zd/pe5tgyCNnSbZxhUDWEOQkGFB1fjPqS35dnd6eeYAPCyL+DJYbWIpuxTTPOI?=
 =?us-ascii?q?xZOp0ot78DeALMSPPn9+D/Il3kpPR2x2G8Pcmz8XUSwYizrNb9KHpBe74iB3rt?=
 =?us-ascii?q?6w8PXoWALs5IuDEbhSMc9o+xC5n6iDLfOQhD1iJDZc15MMw2LIybcF0F4TjSFu?=
 =?us-ascii?q?ayeiEbAauSHRS6LQn7ddDwQHZCNrKMtI86U80xFXNs7Gkdz1zKB3j/4vB1dBVF?=
 =?us-ascii?q?zsgcWpZc0MI2GgO1LLHkeLNLKaJTLVx8H7e7+zSbpVjO9MrR2/pS6bE1P/PjSE?=
 =?us-ascii?q?jzTpSxGvMeRWgC6HJhBRpIG9fQhrCWX4SNLmaxu7MMJ4jDEswL00gG/KOnAYMT?=
 =?us-ascii?q?Rmb0xNqbiQ5ztCgvpjA2xB8mZlLe6clieZ9ebYLJMWsfptAitsluNa4G41y71a?=
 =?us-ascii?q?7CxfQPx1mS3SrsNhol28k+mPzCZnXwRKqjpRmI2LukBiau3l8cx4VGrJ5lo/7G?=
 =?us-ascii?q?eUEAgQrpMxEtDztrpC4tnJmrj6JDpL/5TT58RKVObOL8fSD3slNVLFFTffCw1N?=
 =?us-ascii?q?GSGqMWWZi0FUm/aU3nSPq94xrZ26y8lGcaNSSFFgTqBSMU9iBtFXZc4vBj4=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ACAADmgv5bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUgQBAQEBCwGDa40XiyqCDRSSN4R3gjIBh2oiNQgNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKS+CNiQBgmIBAgMBAjc/BgkBAQoYCSUDDAUYMRiDHIICBAGnU?=
 =?us-ascii?q?YpFjBWBVz+EI4g2giYCoBsHAoIcBI8GI5EVLJljAYILMxojgz2QWj8BAYE2AQG?=
 =?us-ascii?q?MdgMBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ACAADmgv5bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUgQ?=
 =?us-ascii?q?BAQEBCwGDa40XiyqCDRSSN4R3gjIBh2oiNQgNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?S+CNiQBgmIBAgMBAjc/BgkBAQoYCSUDDAUYMRiDHIICBAGnUYpFjBWBVz+EI4g?=
 =?us-ascii?q?2giYCoBsHAoIcBI8GI5EVLJljAYILMxojgz2QWj8BAYE2AQGMdgMBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="139899268"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 04:04:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727863AbeK1XFc (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 18:05:32 -0500
Received: from foss.arm.com ([217.140.101.70]:37170 "EHLO foss.arm.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727783AbeK1XFc (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 18:05:32 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
        by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 47CC23650;
        Wed, 28 Nov 2018 04:04:06 -0800 (PST)
Received: from edgewater-inn.cambridge.arm.com (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
        by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id 0E4813F59C;
        Wed, 28 Nov 2018 04:04:06 -0800 (PST)
Received: by edgewater-inn.cambridge.arm.com (Postfix, from userid 1000)
        id 2AC3D1AE0808; Wed, 28 Nov 2018 12:04:24 +0000 (GMT)
Date: Wed, 28 Nov 2018 12:04:24 +0000
From: Will Deacon <will.deacon@arm.com>
To: Peter Zijlstra <peterz@infradead.org>
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        ard.biesheuvel@linaro.org, catalin.marinas@arm.com, rml@tech9.net,
        tglx@linutronix.de, schwidefsky@de.ibm.com
Subject: Re: [PATCH 0/2] arm64: Only call into preempt_schedule() if
 need_resched()
Message-ID: <20181128120423.GA24868@arm.com>
References: <1543347902-21170-1-git-send-email-will.deacon@arm.com>
 <20181128085640.GX2131@hirez.programming.kicks-ass.net>
 <20181128090146.GF2149@hirez.programming.kicks-ass.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181128090146.GF2149@hirez.programming.kicks-ass.net>
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 10:01:46AM +0100, Peter Zijlstra wrote:
> On Wed, Nov 28, 2018 at 09:56:40AM +0100, Peter Zijlstra wrote:
> > On Tue, Nov 27, 2018 at 07:45:00PM +0000, Will Deacon wrote:
> > > This pair of patches improves our preempt_enable() implementation slightly
> > > on arm64 by making the resulting call to preempt_schedule() conditional
> > > on need_resched(), which is tracked in bit 32 of the preempt count. The
> > > logic is inverted so that we can detect the preempt count going to zero
> > > and need_resched being set with a single CBZ instruction.
> > 
> > >   40:   a9bf7bfd        stp     x29, x30, [sp, #-16]!
> > >   44:   910003fd        mov     x29, sp
> > >   48:   d5384101        mrs     x1, sp_el0
> > >   4c:   f9400820        ldr     x0, [x1, #16]
> > 
> > We load x0 which is a u64, right?
> > 
> > >   50:   d1000400        sub     x0, x0, #0x1
> > >   54:   b9001020        str     w0, [x1, #16]
> > 
> > But we store w0, which is the low u32, such as to not touch the high
> > word which contains the preempt bit.
> > 
> > >   58:   b4000060        cbz     x0, 64 <will+0x24>
> > >   5c:   a8c17bfd        ldp     x29, x30, [sp], #16
> > >   60:   d65f03c0        ret
> > >   64:   94000000        bl      0 <preempt_schedule>
> > >   68:   a8c17bfd        ldp     x29, x30, [sp], #16
> > >   6c:   d65f03c0        ret
> > 
> > Why not?
> > 
> >    58:   b4000060        cbnz    x0, 60 <will+0x24>
> >    5c:   94000000        bl      0 <preempt_schedule>
> >    60:   a8c17bfd        ldp     x29, x30, [sp], #16
> >    64:   d65f03c0        ret
> > 
> > which seems shorter.
> > 
> > 
> > So it's still early, and I haven't finished (or really even started) my
> > pot 'o tea, but what about:
> > 
> > 
> > 	ldr x0, [x1, #16]	// seees the high bit set -- no preempt needed
> > 	sub x0, x0, #1
> > 
> > 	<interrupt>
> > 	  ...
> > 	  resched_curr()
> > 	    set_tsk_need_resched();
> > 	    set_preempt_need_resched();
> > 	</interrupt> // sees preempt_count != 0, does not preempt
> > 
> > 	str w0, [x1, #16] // stores preempt_count == 0
> > 	cbnz x0, 1f // taken, we still observe the high word from before
> > 
> > 1:	ret
> > 
> > 
> > Which then ends with preempt_count==0, need_resched==0 and no actual
> > preemption afaict.
> > 
> > Can you use mis-matched ll x0 / sc w0 to do this same thing and detector
> > the intermediate write on the high word?
> 
> That is, something along these here lines:
> 
> 1:	ldxr x0, [x1, #16]
> 	sub  x0, x0, #1
> 	stxr w1, w0, [x1, #16]

^^ This guy needs a different encoding but, to be honest, I reckon we're
better off just reloading the need_resched flag in the case where the count
has hit zero. I'll have a play. The assembly I posted is all generated by
GCC, so I can't comment on why it didn't chose your shorter sequence :)

Will
