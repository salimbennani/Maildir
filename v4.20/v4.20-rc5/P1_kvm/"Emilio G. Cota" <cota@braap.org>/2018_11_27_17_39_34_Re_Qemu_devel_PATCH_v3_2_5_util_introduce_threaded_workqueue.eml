Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 06F9D58041B
	for <like.xu@linux.intel.com>; Tue, 27 Nov 2018 09:39:57 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga004-1.jf.intel.com with ESMTP; 27 Nov 2018 09:39:56 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3ALVRD4Rx4QiWIN8nXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0uoVKvad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7Vq4/Vyi84Kh3SR/okC?=
 =?us-ascii?q?YHOCA/8GHLkcx7kaZXrAu8qxBj34LYZYeYP+d8cKzAZ9MXXWRPUMZPWSJCDIOz?=
 =?us-ascii?q?YJcAAPcOM+laoYbzukMOoBm8CwSjGe/ixCNEiWHt3aAhz+QsEhvL0BA8E98Usn?=
 =?us-ascii?q?nZqsj+OqcIUeCyyanF1TvPYfxT2Tf87IjIcxchquyNU75qbMHc104vFx/fgVme?=
 =?us-ascii?q?tIfoOC+a1uMRs2eB9OdvTvivhHQ9pAFpuDSvwd0siobQi48T11vK+yJ5wIMvKt?=
 =?us-ascii?q?25Tk52ecWkEIdKuC6GNIt2Rd0iTH9yuCY0zr0GvpC6cDIWx5Qgwh7SbeGMfYuQ?=
 =?us-ascii?q?4h/7SuqdPTR1iGh4dL6ihBu+61asx+P8W8WuzVpHrDJJnsTSun0OzRDe6syKRu?=
 =?us-ascii?q?Fj8ku9wzqDyR3f5+BCLEspj6TUMYQhzaQ1lpcLsUTMACv2mELuga+Sd0Uk4fSo?=
 =?us-ascii?q?6//9brXpoJ+cKpV4igbkMqQhgsC/AOI4PRYSX2WD5+iwyL7u8VfkTLlXjfA6iL?=
 =?us-ascii?q?fVvZ7aKMgBu6K0ARdZ0oM55Ba+Czem3s4YnX4CLF9dYRKIkY3pO0zXLP/lE/i/?=
 =?us-ascii?q?nUqjkDNyy//dOb3hH5PNIWTdn7f6erp9709cyAktwtxF6JNUF6kMIPbyWk/3qd?=
 =?us-ascii?q?zZAQU1Mw2yw+b7Ftp90pkSVn6IAq+cK67St1iI5uQgI+mKeY8ZojH9K+Iq5/L2?=
 =?us-ascii?q?l382hUcdfbW13ZsQcH24GvVmI0aHbnb2jdYBDHwHvg4/TOzslV2DXiRfZ3e0X6?=
 =?us-ascii?q?Ig+D47DJiqApvERoCo0/S82jymFMhWenxeEQLLVnPpbJmfHfELbi2UP4lmiDND?=
 =?us-ascii?q?ULGgT4oo01aprBP7zLx8afPZ/zBduZ/92dwm2uvIiBtn8DV1C9iagXiASnwxkm?=
 =?us-ascii?q?4WSjtzxq1mvEFm1n+F1q53heEeEsZcsOhUWAU3PoKJ0uphFtrpURjAdNradFHz?=
 =?us-ascii?q?adW8ACotScoxzpcCbg5RGtOvhRDC2WL+D74TmreLBZoc6K/Q33HtYc16ziCV+r?=
 =?us-ascii?q?Mmigxsb85OMWyhzoE5vyPUG4eD2xGSkLqjXa4G1SfVsmCZwjzd7wljTAdsXPCd?=
 =?us-ascii?q?DjgkbUzMoIG8vxuaQg=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0CEAADAgP1bhxHrdtBkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBZQKBL4E5gSmDeYh3iyqCDYkPhHiLLBQYDQeDeoQKIjgSAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEKCwkIGw4jDEIBDAGBZgUCAxoBBoJbAQEBAQMBAiAECwENAQEEC?=
 =?us-ascii?q?ikBAgMBAgYBAQoVAwICBR0EAgIDAQsFDTwTBYMcAYFpAxUBBAqkYHB8M4J2AQE?=
 =?us-ascii?q?FgTABFg+DLw2CFAMFgQuIOoEsgRwRBoF/gRGDEoJXhS4xgiaJBSGGc48gJy4HA?=
 =?us-ascii?q?gKGeocIgyEjCoFPh3c4hwONRoEKiWeBXYF2fQiDJ4IbDBeDSoUUhV1UgQIFIRO?=
 =?us-ascii?q?DIYdDgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0CEAADAgP1bhxHrdtBkGgEBAQEBAgEBAQEHAgEBAQGBZQK?=
 =?us-ascii?q?BL4E5gSmDeYh3iyqCDYkPhHiLLBQYDQeDeoQKIjgSAQMBAQEBAQECARMBAQEKC?=
 =?us-ascii?q?wkIGw4jDEIBDAGBZgUCAxoBBoJbAQEBAQMBAiAECwENAQEECikBAgMBAgYBAQo?=
 =?us-ascii?q?VAwICBR0EAgIDAQsFDTwTBYMcAYFpAxUBBAqkYHB8M4J2AQEFgTABFg+DLw2CF?=
 =?us-ascii?q?AMFgQuIOoEsgRwRBoF/gRGDEoJXhS4xgiaJBSGGc48gJy4HAgKGeocIgyEjCoF?=
 =?us-ascii?q?Ph3c4hwONRoEKiWeBXYF2fQiDJ4IbDBeDSoUUhV1UgQIFIRODIYdDgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="55054432"
X-Amp-Result: UNSCANNABLE
X-Amp-File-Uploaded: False
Unscannable: 2
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 27 Nov 2018 09:39:56 -0800
Received: from localhost ([::1]:43773 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gRhL1-00075L-Ec
	for like.xu@linux.intel.com; Tue, 27 Nov 2018 12:39:55 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:33441)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gRhKm-00075C-HG
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 12:39:41 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <cota@braap.org>) id 1gRhKj-0004zH-Co
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 12:39:40 -0500
Received: from out4-smtp.messagingengine.com ([66.111.4.28]:34457)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <cota@braap.org>) id 1gRhKj-0004z2-44
	for qemu-devel@nongnu.org; Tue, 27 Nov 2018 12:39:37 -0500
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
	by mailout.nyi.internal (Postfix) with ESMTP id 6A33422230;
	Tue, 27 Nov 2018 12:39:36 -0500 (EST)
Received: from mailfrontend2 ([10.202.2.163])
	by compute4.internal (MEProxy); Tue, 27 Nov 2018 12:39:36 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=braap.org; h=
	date:from:to:cc:subject:message-id:references:mime-version
	:content-type:content-transfer-encoding:in-reply-to; s=mesmtp;
	bh=VRa1djSCsuAOkfXtV9Byr0TWR3iSNHkXVXLCVIr9QKA=; b=N+7PoRYixxEI
	Ij953BHkqDyFhGppmoW8ilTHzE0Kkp1OA+eNqrBBlheZTRoRbZb1OIjw/1c5Nzpf
	hc3na01Ki26jQMnQ/Qtn97sOKr5KEWOYvc77bdu2HEIgx4K0LLq/76OUuOSe6lbv
	iteO0FVjoNZ0wmV5b3/3B4yp/lbp0/Q=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:content-transfer-encoding:content-type
	:date:from:in-reply-to:message-id:mime-version:references
	:subject:to:x-me-proxy:x-me-proxy:x-me-sender:x-me-sender
	:x-sasl-enc; s=fm1; bh=VRa1djSCsuAOkfXtV9Byr0TWR3iSNHkXVXLCVIr9Q
	KA=; b=QbFWpTzijprW5tZfpk1mLcA0Qxiy6P4YkPlFuPm23HK+W03QTFS6EO/RO
	Z6436nvIyhEmOq54kBjwRbtnvseftR0nT9e9fHGxixHvC2ImyeS+de0/vXuwAqKg
	oiDQIhzu6WyOQNAI6GGnJq+LkEPPhKAVmr/9U2CPgN0BpdpkAFQAUHY2okGM2QtS
	3t0ZeJCdY+uH2s0nQcKqnH7P7DVSYG64MYs7vvJXGzLf3tTiy3t+23RPvdZlbdXx
	QoWvEHQdOTIw63JMZ5AN4vYJBTz+8ERmEnT6vq2hw3O3id3Qg8VyuFrfAHdUuUe7
	PEGRqgZx0NRXk1KDWa8Jt9CgpGjJQ==
X-ME-Sender: <xms:VoH9W6QvtRJ23O0gAwR7Rt-8L75vKupjQFGDCl22qp4ykxkDp3Bsiw>
X-ME-Proxy: <xmx:VoH9W8iKBYguopwntizPkjgNqGOebn0kNfURdY9Cbf2mgvCJvR0Vkg>
	<xmx:VoH9W1ntXJUrPdnn_U-n0hxEYEdbfF5HTy9buLIVpscxtADm7fhF8Q>
	<xmx:VoH9W88zfWoCjEGIpzJ2v4I2n8BBfSrtZe0dY2a8xo1T-4Sb86LCeA>
	<xmx:VoH9W3dV-UDzFOhOqITmFoVcLYsTusN7dEzsYLiO--wjnn6Pp4mYVQ>
	<xmx:VoH9W-7oAjxLUA1vKkg7kpSCDiXgk5IIFAmQSr3KQSu5yA_TvmSJug>
	<xmx:WIH9W2rm8ullNxyK2uZHTT09mRIpWU8O0SAfqUrynsgiFlFo20dEOQ>
Received: from localhost (flamenco.cs.columbia.edu [128.59.20.216])
	by mail.messagingengine.com (Postfix) with ESMTPA id 71F2A102A0;
	Tue, 27 Nov 2018 12:39:34 -0500 (EST)
Date: Tue, 27 Nov 2018 12:39:34 -0500
From: "Emilio G. Cota" <cota@braap.org>
To: Christophe de Dinechin <dinechin@redhat.com>
Message-ID: <20181127173934.GB12617@flamenco>
References: <20181122072028.22819-1-xiaoguangrong@tencent.com>
	<20181122072028.22819-3-xiaoguangrong@tencent.com>
	<BB9071C9-5BED-4763-99B3-7083B8EB49CF@redhat.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <BB9071C9-5BED-4763-99B3-7083B8EB49CF@redhat.com>
User-Agent: Mutt/1.9.4 (2018-02-28)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 66.111.4.28
Subject: Re: [Qemu-devel] [PATCH v3 2/5] util: introduce threaded workqueue
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: kvm@vger.kernel.org, mst@redhat.com, mtosatti@redhat.com,
	Xiao Guangrong <xiaoguangrong@tencent.com>,
	qemu-devel@nongnu.org, peterx@redhat.com, dgilbert@redhat.com,
	quintela@redhat.com, wei.w.wang@intel.com,
	Xiao Guangrong <guangrong.xiao@gmail.com>,
	jiang.biao2@zte.com.cn, Paolo Bonzini <pbonzini@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Tue, Nov 27, 2018 at 13:49:13 +0100, Christophe de Dinechin wrote:
> (I did not finish the review, but decided to send what I already had).
> 
> > On 22 Nov 2018, at 08:20, guangrong.xiao@gmail.com wrote:
> > 
> > From: Xiao Guangrong <xiaoguangrong@tencent.com>
> > 
> > This modules implements the lockless and efficient threaded workqueue.
> 
> I’m not entirely convinced that it’s either “lockless” or “efficient”
> in the current iteration. I believe that it’s relatively easy to fix, though.
(snip)
> > 
> >    All the requests are pre-allocated and carefully partitioned between
> >    threads so there is no contention on the request, that make threads
> >    be parallel as much as possible.
> 
> That sentence confused me (it’s also in a comment in the text).
> I think I’m mostly confused by “there is no contention”. Perhaps you
> meant “so as to avoid contention if possible”? If there is a reason
> why there would never be any contention even if requests arrive faster than
> completions, I did not figure it out.
> 
> I personally see serious contention on the fields in the Threads structure,
> for example, but also possibly on the targets of the “modulo” operation in
> thread_find_free_request. Specifically, if three CPUs are entering
> thread_find_free_request at the same time, they will all run the same
> loop and all, presumably, “attack” the same memory locations.
> 
> Sorry if I mis-read the code, but at the moment, it does not seem to
> avoid contention as intended. I don’t see how it could without having
> some way to discriminate between CPUs to start with, which I did not find.

You might have missed that only one thread can request jobs. So contention
should only happen between that thread and the worker threads, but
not among worker threads (they should only share cache lines with the
requester thread).

> > - User, i.e, the submitter
> >    It's the one fills the request and submits it to the workqueue,
> the one -> the one who
> >    the result will be collected after it is handled by the work queue.
> > 
> >    The user can consecutively submit requests without waiting the previous
> waiting -> waiting for
> >    requests been handled.
> >    It only supports one submitter, you should do serial submission by
> >    yourself if you want more, e.g, use lock on you side.
> 
> I’m also confused by this last statement. The proposal purports
> to be “lockless”, which I read as working correctly without a lock…
> Reading the code, I indeed see issues if different threads
> try to place requests at the same time. So I believe the word
> “lockless” is a bit misleading.

ditto, it is lockless as presented here, i.e. one requester thread.

> > +static void uninit_thread_requests(ThreadLocal *thread, int free_nr)
> > +{
> > +    Threads *threads = thread->threads;
> > +    ThreadRequest *request = thread->requests;
> > +    int i;
> > +
> > +    for (i = 0; i < free_nr; i++) {
> > +        threads->ops->thread_request_uninit(request + 1);
> > +        request = (void *)request + threads->request_size;
> 
> Despite GCC’s tolerance for it and rather lengthy debates,
> pointer arithmetic on void * is illegal in C [1].
> 
> Consider using char * arithmetic, and using macros such as:
> 
> #define request_to_payload(req) (((ThreadRequest *) req) + 1)
> #define payload_to_request(req) (((ThreadRequest *) req) - 1)
> #define request_to_next(req,threads) ((ThreadRequest *) ((char *) req) + threads->request_size))
> 
> where appropriate, that would clarify the intent.
> 
> [1] https://stackoverflow.com/questions/3523145/pointer-arithmetic-for-void-pointer-in-c

FWIW, we use void pointer arithmetic in other places in QEMU, so
I wouldn't worry about it being illegal.

I like those little macros though; even better as inlines.

Thanks,

		Emilio

