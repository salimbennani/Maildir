Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:47:35 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga002.jf.intel.com (orsmga002.jf.intel.com [10.7.209.21])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6A9E85802E4
	for <like.xu@linux.intel.com>; Thu, 29 Nov 2018 08:06:54 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga002-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 08:06:54 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3A1W6DpxYYAK2HVZd8WgY0jCD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpsy5ZR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUMAeoOMvpXoJT/qFQAsBW+HQuhCuHgxzNViHL6wbM10/86HAHawAAtBc4CvG?=
 =?us-ascii?q?jOodnrMqoZTOC7zLPPzTXGd/5bxTH96JTIchAmp/GNXa97f9Dex0czCw7Lklue?=
 =?us-ascii?q?opHiMjyP0OQNr2ib7+1mVeOvkWInsx9+oiK1ycc2l4bEnZ4aylHY9SVjwYY0Ks?=
 =?us-ascii?q?e0R1J8Yd6hCZZdsTyROYVxQsMnWW5ouSA6x6UJuJGleigG0pMnxwTQa/GBboOG?=
 =?us-ascii?q?4QrjWf6PLTtkh39pYq+ziwux/ES61OHxWMm53ExXoidHitXAq3EA2wLJ5sSZVP?=
 =?us-ascii?q?dx412t1SuP2g3S8O1JIUA5mKzGIJA72LEwjIAcsUHbEy/2hkr2iKiWe10g+uip?=
 =?us-ascii?q?8OTnfq7mqoWTN49ylwHyKKMumtawAeggMwgOWXaU+fik2bH94UH0Q69GguArnq?=
 =?us-ascii?q?TaqpzWO8oWq66jDwNI0Isv8xO/AC2n0NQck3kHNlVFeBefgojwJV7OJe34Ae6i?=
 =?us-ascii?q?jFuyjjdk2fTGMqT6DZXKM3jDlqvucqhm60JbzAozzNNf6IxOBrAOPfL+QkvxtN?=
 =?us-ascii?q?3eDh8kPA242efnCNNh1owAXWKDGLOWMKTXsVKT4OIvJO+MZIATuDbgMfQl4OTu?=
 =?us-ascii?q?jXAhlV8HYaapxYcXaGy/Hvl+J0WZYHnsjckbHWYFowozV+jqiFyEUT5OaHe+Ra?=
 =?us-ascii?q?M85jcnCI24CYfPXJyigLuE3HTzI5tNe2oTCkyQCWy6MMKAWuwQc2SUJclulCFC?=
 =?us-ascii?q?UqKuDIoo1BWrvQm9zKJ7L+3S4WoBuJf+kdR4+eDXxiw07iF+WsGU0mWRSDNtk2?=
 =?us-ascii?q?YVAjM7wq175FZw00qOyrRQhfteGtpOofRTXVAhKJTewudmXs30QR/LZdyTSVyr?=
 =?us-ascii?q?EemhVAk4U9Z578IUeU97B532lhne22ymHqUPnrqXLJc17rjdzz76IMMrmFjc06?=
 =?us-ascii?q?x0pl86QsxJJCWeq5RWzSSbU4fPj0WekbfsbakG1TTB3GyC0XCPrAdTVwsmAvaN?=
 =?us-ascii?q?ZmwWekaD9Yex3UjFVbL7TO1/agY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAABeDQBchxHrdtBkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBgTCBOYEWE4wRX4spgg2XRBSBXxQYDQeHdCI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECJBMMC?=
 =?us-ascii?q?ikDAgEBAgYBAQoYCRUICAMBCwULPhiDHAGBeQgBBAqnHjOEQUCFKYwWgVc/gRG?=
 =?us-ascii?q?DEoMTCwMBGIEMhhYCiSGGBYFIhFyKBFUHAhyCBYRdiikLGIInjnWNWIp2gUaCD?=
 =?us-ascii?q?XCDPAmLE4U/QTEBAQGBBItDgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAABeDQBchxHrdtBkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBgTCBOYEWE4wRX4spgg2XRBSBXxQYDQeHdCI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQoLCQgbDiMMgjYFAgMaAQaCWwEBAQECAQECJBMMCikDAgEBAgYBAQo?=
 =?us-ascii?q?YCRUICAMBCwULPhiDHAGBeQgBBAqnHjOEQUCFKYwWgVc/gRGDEoMTCwMBGIEMh?=
 =?us-ascii?q?hYCiSGGBYFIhFyKBFUHAhyCBYRdiikLGIInjnWNWIp2gUaCDXCDPAmLE4U/QTE?=
 =?us-ascii?q?BAQGBBItDgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="140108876"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mtab.intel.com with ESMTP/TLS/AES256-SHA; 29 Nov 2018 08:06:52 -0800
Received: from localhost ([::1]:55018 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSOq4-0003YT-4J
	for like.xu@linux.intel.com; Thu, 29 Nov 2018 11:06:52 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:55572)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <prvs=86438351b=anthony.perard@citrix.com>)
	id 1gSOpg-0003RY-EM
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:06:29 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <prvs=86438351b=anthony.perard@citrix.com>)
	id 1gSOpe-0002SI-LO
	for qemu-devel@nongnu.org; Thu, 29 Nov 2018 11:06:28 -0500
Received: from smtp03.citrix.com ([162.221.156.55]:40234)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71)
	(envelope-from <prvs=86438351b=anthony.perard@citrix.com>)
	id 1gSOpD-0001ge-Pu; Thu, 29 Nov 2018 11:06:03 -0500
X-IronPort-AV: E=Sophos;i="5.56,295,1539648000"; d="scan'208";a="71870261"
Date: Thu, 29 Nov 2018 16:05:41 +0000
From: Anthony PERARD <anthony.perard@citrix.com>
To: Paul Durrant <paul.durrant@citrix.com>
Message-ID: <20181129160541.GG14786@perard.uk.xensource.com>
References: <20181121151211.15997-1-paul.durrant@citrix.com>
	<20181121151211.15997-4-paul.durrant@citrix.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20181121151211.15997-4-paul.durrant@citrix.com>
User-Agent: Mutt/1.11.0 (2018-11-25)
X-detected-operating-system: by eggs.gnu.org: Genre and OS details not
	recognized.
X-Received-From: 162.221.156.55
Subject: Re: [Qemu-devel] [PATCH 03/18] xen: introduce 'xen-qdisk'
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Kevin Wolf <kwolf@redhat.com>, Stefano Stabellini <sstabellini@kernel.org>,
	qemu-block@nongnu.org, qemu-devel@nongnu.org,
	Max Reitz <mreitz@redhat.com>, xen-devel@lists.xenproject.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Wed, Nov 21, 2018 at 03:11:56PM +0000, Paul Durrant wrote:
> This patch adds a new XenDevice: 'xen-qdisk' [1]. This will eventually
> replace the 'xen_disk' legacy PV backend but it is illustrative to build
> up the implementation incrementally, along with the XenBus/XenDevice
> framework. Subsequent patches will therefore add to this device's
> implementation as new features are added to the framework.
> 
> After this patch has been applied it is possible to instantiate a new
> 'xen-qdisk' device with a single 'vdev' parameter, which accepts values
> adhering to the Xen VBD naming scheme [2]. For example, a command-line
> instantiation of a xen-qdisk can be done with an argument similar to the
> following:
> 
> -device xen-qdisk,vdev=hda

That works when QEMU boot, but doing the same thing once the guest have
booted, via QMP, doesn't. Here is the result (tested in qmp-shell):

(QEMU) device_add driver=xen-qdisk vdev=hda
{
    "error": {
        "class": "GenericError", 
        "desc": "Bus 'xen-bus.0' does not support hotplugging"
    }
}

That's probably why I've asked about the hotplug capability on the
previous patch.

> The implementation of the vdev parameter formulates the appropriate VBD
> number for use in the PV protocol.
> 
> [1] The name 'qdisk' as always been the name given to the QEMU
>     implementation of the Xen PV block protocol backend implementation
> [2] http://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=docs/man/xen-vbd-interface.markdown.7

Maybe a link to the generated docs would be better:
https://xenbits.xen.org/docs/unstable/man/xen-vbd-interface.7.html

Also, it would be useful to have the same link in the source code.

> diff --git a/hw/block/xen-qdisk.c b/hw/block/xen-qdisk.c
> new file mode 100644
> index 0000000000..72122073f7
> --- /dev/null
> +++ b/hw/block/xen-qdisk.c
[...]
> +static char *disk_to_vbd_name(unsigned int disk)
> +{
> +    unsigned int len = DIV_ROUND_UP(disk, 26);
> +    char *name = g_malloc0(len + 1);
> +
> +    do {
> +        name[len--] = 'a' + (disk % 26);
> +        disk /= 26;
> +    } while (disk != 0);
> +    assert(len == 0);
> +
> +    return name;
> +}

That function doesn't work.

For a simple xvdp, (so disk==15), it return "", I mean "\0p".

For a more complicated 'xvdbhwza', we have len == 22901. And the assert failed.

Maybe the recursing algo in libxl would be fine, with a buffer that is
big enough, and could probably be on the stack (in _get_vdev).

> +
> +    switch (vdev->type) {
> +    case XEN_QDISK_VDEV_TYPE_DP:
> +    case XEN_QDISK_VDEV_TYPE_XVD:
> +        if (vdev->disk < (1 << 4) && vdev->partition < (1 << 4)) {
> +            vdev->number = (202 << 8) | (vdev->disk << 4) |
> +                vdev->partition;
> +        } else if (vdev->disk < (1 << 20) && vdev->partition < (1 << 8)) {
> +            vdev->number = (1 << 28) | (vdev->disk << 8) |
> +                vdev->partition;
> +        } else {
> +            goto invalid;
> +        }
> +        break;
> +
> +    case XEN_QDISK_VDEV_TYPE_HD:
> +        if ((vdev->disk == 0 || vdev->disk == 1) &&
> +            vdev->partition < (1 << 4)) {

I think that should be:

    vdev->partition < (1 << 6)

Because hd disk have 0..63 partitions.

> +            vdev->number = (3 << 8) | (vdev->disk << 6) | vdev->partition;
> +        } else if ((vdev->disk == 2 || vdev->disk == 3) &&
> +                   vdev->partition < (1 << 4)) {

same here.

> +            vdev->number = (22 << 8) | ((vdev->disk - 2) << 6) |
> +                vdev->partition;
> +        } else {
> +            goto invalid;
> +        }
> +        break;
> +
> +    case XEN_QDISK_VDEV_TYPE_SD:
> +        if (vdev->disk < (1 << 4) && vdev->partition < (1 << 4)) {
> +            vdev->number = (8 << 8) | (vdev->disk << 4) | vdev->partition;
> +        } else {
> +            goto invalid;
> +        }
> +        break;
> +
> +    default:
> +        goto invalid;
> +    }
> +
> +    g_free(str);
> +    vdev->valid = true;
> +    return;
> +
> +invalid:
> +    error_setg(errp, "invalid virtual disk specifier");
> +    g_free(str);

:(, g_free is called twice.

maybe we could have:
    vdev->valid=true;
    out:
      if (!vdev->valid)
        error_setg(...);
      g_free;

> diff --git a/include/hw/xen/xen-qdisk.h b/include/hw/xen/xen-qdisk.h
> new file mode 100644
> index 0000000000..ade0866037
> --- /dev/null
> +++ b/include/hw/xen/xen-qdisk.h
> @@ -0,0 +1,38 @@
> +/*
> + * Copyright (c) Citrix Systems Inc.
> + * All rights reserved.
> + */
> +
> +#ifndef HW_XEN_QDISK_H
> +#define HW_XEN_QDISK_H
> +
> +#include "hw/xen/xen-bus.h"
> +
> +typedef enum XenQdiskVdevType {
> +    XEN_QDISK_VDEV_TYPE_DP,

Maybe we could set type_dp value to 1, so that, when vdev->type isn't
set, we can detect it later.


> +    XEN_QDISK_VDEV_TYPE_XVD,
> +    XEN_QDISK_VDEV_TYPE_HD,
> +    XEN_QDISK_VDEV_TYPE_SD,
> +    XEN_QDISK_VDEV_TYPE__MAX
> +} XenQdiskVdevType;

Thanks,

-- 
Anthony PERARD

