Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:20:50 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 23001580213;
	Fri, 30 Nov 2018 09:06:36 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga007-1.jf.intel.com with ESMTP; 30 Nov 2018 09:06:36 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxVo90BHKOg1ruOmYnmU0Bp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75oci7bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7Ses4URW1bXsZNSSNOH5+y?=
 =?us-ascii?q?YJUTAOoAJeZUsZT2q18BoBeiAAWhAv7kxD1ViX/sxaA00/ovHw/F0gInHd0Ovn?=
 =?us-ascii?q?vbotroOqcJSeC4zrLFwSnAYv5MxTvw8pTEfgwnrPqRXbxwa83RyUw3Gg3DiVWQ?=
 =?us-ascii?q?ppbqPzWI3eoMrmib6fZgVeKoi249swF+vCWky8AoionOiYIa0FbE9SpizYkoO9?=
 =?us-ascii?q?K4TFJ7bsS4EJROqS6WLZd5QsQnQ2xxvisx174IuYajcSQU1JgqwwTTZ+GJfoSW?=
 =?us-ascii?q?+B7vSeWcLStiiH9ker+znwi+/VSix+HmVsS530xGojdYntTNrHwA1h7e586aQf?=
 =?us-ascii?q?Vn5EihwyyA1wXL5+FEP080ka3bJoY/wr4/iJUTq17PHizol0Xsiq+ZaEEk9vKv?=
 =?us-ascii?q?6+T9bbXqvp6cN4lqhQHiKqkihNCzDOAiPgQTUWWX5/6w2KDg8EHlWrlHj/87nr?=
 =?us-ascii?q?HcsJ/AJMQboqC5AxVS0oYm8xu/Czam0NIFnXgINV5FewyIj5LvO17QJPD0FPC/?=
 =?us-ascii?q?glqqkDh13fDLJaPhAprTIXjZirvhfqhy61RayAUtydBT/ZVUCqsOIP7rQE/+qM?=
 =?us-ascii?q?TYDgMlMwyz2+vnDNR91oAAVm6VDa6ZLbjfsVuJ5uIpPumNa5UZuDf7K/g5+fHu?=
 =?us-ascii?q?iWU1lkMafamsxZEXcmy3Hux6I0WFZnrhmtcBHn0LvgoiVuPqj0eOUT5OZ3moWa?=
 =?us-ascii?q?I86So2CIanDYfFW4Csj6aN3Ca9Hp1KeG9GDkqAHmvvd4WBQ/0Mcj6dItd9kjwY?=
 =?us-ascii?q?UrisU40h1RawuwPgyLpnKezU+isftZ/40Nh15uvTlQw99DBuDsSd1X2NQH9wnm?=
 =?us-ascii?q?8SWzA226V/q1Rnylifyah4n+BYFdtL6vxTSQc6NZncz+9gB9DoQA3BfMyESFKn?=
 =?us-ascii?q?QtWgHDEwQcg9w94IY0ZhBdqiigrP0DatA78Qj7aLHoA78rrA33jtIMZw03XG27?=
 =?us-ascii?q?Mnj1U8RstPNHephqhw9wXIA47JkkOZl7uldKgG3S7N8nuDwnSKvE1CTAFwVqDF?=
 =?us-ascii?q?V2gFZkTKtdT5+l/CT7i2BLs6KARB19CNJrFKatLzi1VGX+nsONLZb2K1mGewAB?=
 =?us-ascii?q?KIy6iIbIrrfWUdwSrcBFIFkwAV4XaJKww+Cj29rGLZCTxkDUjvbF/08elitHO7?=
 =?us-ascii?q?SVc5wByQYE1/ybW54B4ViuaaS/MIwL0EvjwsqzF1HFa7wtLXBMCMpwtnfKVAf9?=
 =?us-ascii?q?w95E1L2n7etwx4JpagNbxthkYCcwRruEPjzwl3CoRFkcgtsHMqzApzJbiE0F9b?=
 =?us-ascii?q?cDOYx5TwOrzRKmn95x2vb6/W2lfD0NeZ4KsP6fI4q0n9swGtDEYt73Jn09xN2X?=
 =?us-ascii?q?uG+prKFBYSUY72Uksv7Rd6o6/VYyYj6ILUz3FjKrS0vSLY1NIvB+slzQigcsxb?=
 =?us-ascii?q?MKOFEg/yDsIbC9KvKOwsh1imcBYEMPpO+64zOsOsb+GG17KzPOZ8gDKminxK4Y?=
 =?us-ascii?q?Bg0k6W6yVwUO/J35YfzPGe0QuKTDP8jFanssDqloFIfzASHmyjySf6AI5dfLF9?=
 =?us-ascii?q?fYEOCW22Oc242s1+h4LxW35f7FOjHVIG19OzdhqIclP92hdc1UIJrny9mCu01i?=
 =?us-ascii?q?B7nCstrqWCwiPO2ePidBwcN25PRWlii0rsIIeug9AbWkiocxYmlB+/6UnmwKhb?=
 =?us-ascii?q?obx1L3PPTkdQYyj2M2ZiX7Owt7qDecJO6IkksT5KUOS6el2aTr/9ox0H0yLsBW?=
 =?us-ascii?q?dexTY7dy20tZX9hRB1lGWdLHNrpnrDZc5w3Qvf5MDbRfNJ3DoJXjN4iTrUBli7?=
 =?us-ascii?q?JdWp5s+bl5TAsuC/UWKuSJtTfDLvzYOBsiu7+GJrDQe+n/C1ht3oDww63TXn2N?=
 =?us-ascii?q?ltUCXCtAz8bZXz16SmLeJneVFlBV/m5Mp9AI1+kIowhJcL1Hgeh5WV+2cHkGjp?=
 =?us-ascii?q?PdVa36L+cGQCRToRz9HJ5wjl3VVpLmiVyILhSnWd3sxhasG5YmwM2yIx9cBKCL?=
 =?us-ascii?q?qO47xCkit4uV64rQPXYfhgkTYR0/ou6HgGg+4XvAoh1DmSArcXHUNAJyzjiwyI?=
 =?us-ascii?q?78yirKVQfGuvdLmw1Elkkty7ArCNvBpcWGrndZc4BiB/8N9/MF3X3X3364Hkfs?=
 =?us-ascii?q?TQbN0Juh2VlRfAk/ZaKJYrmvUWgipnPHr3vWc5xO4jkRxuwZa6sZCbK2Vq+aK1?=
 =?us-ascii?q?GB9ZOSfzZ8MO4THtlqdek92S34CuGJVhBzoKUIHpTfKuDDIdq/DnOxySHz07r3?=
 =?us-ascii?q?eRAaDfEhOH6Ed6s3LPFIimOGqNK3keydViWQORJEhCgA0PWDU6n5g5Fh2lxcD7?=
 =?us-ascii?q?cUd54CwR6UD8qhdW1u1oMBz/WH/FpAi0cjc0VISfLB1O4wFA/UjVNNKR7vlpEy?=
 =?us-ascii?q?FE5JGhrxGNKm+GZwROF24JQVeJB1TiPrmo+NnB/PKUBuu4L/vSf7qOrfZSWOuP?=
 =?us-ascii?q?xZKqyoFm5SqDNt2TPnl+CP02wkpCXXdkG8TAhjUAUSoXmzjWb86cohe89TZ6rs?=
 =?us-ascii?q?S+8PTtRQLu6pGDC7pUMdVz5R+2hb2POPKXhCZ8MTxYzI8DxWfUyLgD214fkyFu?=
 =?us-ascii?q?eCesEbQDti7NTbjcmqxNDx4cZCN8KtFI778n3gRWPc7bi9X11qN3j/IvCldFU0?=
 =?us-ascii?q?Dhld+tZcAQP269M1bHDl6RNLuaPT3L3933YaSkRLJKkeVbrAewtiibEkP5OjSD?=
 =?us-ascii?q?liLkVxSuMeFKkSGaMwZSuIC7chZxF2fjSMjqZQG8MN9ylTc226E7hmvWNW4ANj?=
 =?us-ascii?q?hxa19NrryV7S9CnvpzAXBO7np7IumCgCuZ6+jYKpALsfpkGCh0luRa4GgkxLtR?=
 =?us-ascii?q?9i1LWPt1mC7KpN50v16mivWPyiZgUBdWqjdEnoSLvUBjOaXf7pZBWHbE8wgL7W?=
 =?us-ascii?q?WfEBkKo9plCtvyu6Ff0NTPlaTzKCtc/NLQ58cTG8/UKMfUeEYmZB7oHiPESQgI?=
 =?us-ascii?q?VzimMUnBiEFH1vKf7HuYqt49sJeo0J4PTKJLEVUvHfMyFEtoBpoBLY1xUzdilq?=
 =?us-ascii?q?SUyIYM5HyjvFzXWM9ysZfAWfafDu/oNS6Cy7JDYl9AxbL+MJRWPZfqw1BlQkd1?=
 =?us-ascii?q?kZ6MGEfKW91J5Cp7YUt8pERL7Wg7S2gb2FzsYQDr52UcUbadmBIshxQ2ROM36D?=
 =?us-ascii?q?DqqwM+JULPjC8xllQh3NvinDadeSLwK6H2WptZXXnarU80Z7f8TA9zJSKvm1Bk?=
 =?us-ascii?q?My3cSvoFi7xvfGZkoAPRvYdGBfNRC6ZDZUlDlrmse/w03AEE+W2czkhd6L6AV8?=
 =?us-ascii?q?Nv?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A5AQCUbQFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ5gbgiGIfZAqFBgTAYNDhDMiOBIBAwEBAQEBAQIBEwEBAQgNCQgpL4I?=
 =?us-ascii?q?2JIJjAwMBAi8BRgYJAQEcNAMeKA4GARIFgxyBagMVBadjiAMNghyHbIQuF4FAP?=
 =?us-ascii?q?4Z6iAUCixyEDnyPYS4JgiKLaIMiI4FbiDSHECyIT4VviXOBXYF2TSMVgyeCJxe?=
 =?us-ascii?q?OPR8BMoEFAQGNSQEB?=
X-IPAS-Result: =?us-ascii?q?A0A5AQCUbQFch0O0hNFjHAEBAQQBAQcEAQGBZYNsJ5gbgiG?=
 =?us-ascii?q?IfZAqFBgTAYNDhDMiOBIBAwEBAQEBAQIBEwEBAQgNCQgpL4I2JIJjAwMBAi8BR?=
 =?us-ascii?q?gYJAQEcNAMeKA4GARIFgxyBagMVBadjiAMNghyHbIQuF4FAP4Z6iAUCixyEDny?=
 =?us-ascii?q?PYS4JgiKLaIMiI4FbiDSHECyIT4VviXOBXYF2TSMVgyeCJxeOPR8BMoEFAQGNS?=
 =?us-ascii?q?QEB?=
X-IronPort-AV: E=Sophos;i="5.56,299,1539673200"; 
   d="scan'208";a="55572917"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 09:06:34 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727640AbeLAEQL (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 23:16:11 -0500
Received: from ale.deltatee.com ([207.54.116.67]:41084 "EHLO ale.deltatee.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726752AbeLAEQK (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 23:16:10 -0500
Received: from cgy1-donard.priv.deltatee.com ([172.16.1.31])
        by ale.deltatee.com with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
        (Exim 4.89)
        (envelope-from <gunthorp@deltatee.com>)
        id 1gSmEz-0000qp-Tp; Fri, 30 Nov 2018 10:06:12 -0700
Received: from gunthorp by cgy1-donard.priv.deltatee.com with local (Exim 4.89)
        (envelope-from <gunthorp@deltatee.com>)
        id 1gSmEx-0004VF-Pp; Fri, 30 Nov 2018 10:06:07 -0700
From: Logan Gunthorpe <logang@deltatee.com>
To: linux-kernel@vger.kernel.org, linux-arch@vger.kernel.org,
        linux-ntb@googlegroups.com, linux-crypto@vger.kernel.org,
        linux-mm@kvack.org, Andrew Morton <akpm@linux-foundation.org>
Cc: Arnd Bergmann <arnd@arndb.de>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Andy Shevchenko <andy.shevchenko@gmail.com>,
        =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>,
        Logan Gunthorpe <logang@deltatee.com>,
        Christoph Hellwig <hch@lst.de>,
        Alan Cox <gnomes@lxorguk.ukuu.org.uk>
Date: Fri, 30 Nov 2018 10:06:04 -0700
Message-Id: <20181130170606.17252-5-logang@deltatee.com>
X-Mailer: git-send-email 2.19.0
In-Reply-To: <20181130170606.17252-1-logang@deltatee.com>
References: <20181130170606.17252-1-logang@deltatee.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-SA-Exim-Connect-IP: 172.16.1.31
X-SA-Exim-Rcpt-To: linux-ntb@googlegroups.com, linux-kernel@vger.kernel.org, linux-arch@vger.kernel.org, linux-crypto@vger.kernel.org, linux-mm@kvack.org, akpm@linux-foundation.org, arnd@arndb.de, gregkh@linuxfoundation.org, andy.shevchenko@gmail.com, horia.geanta@nxp.com, logang@deltatee.com, hch@lst.de, gnomes@lxorguk.ukuu.org.uk
X-SA-Exim-Mail-From: gunthorp@deltatee.com
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on ale.deltatee.com
X-Spam-Level: 
X-Spam-Status: No, score=-8.7 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        GREYLIST_ISWHITE,MYRULES_NO_TEXT autolearn=ham autolearn_force=no
        version=3.4.2
Subject: [PATCH v24 4/6] io-64-nonatomic: add io{read|write}64[be]{_lo_hi|_hi_lo} macros
X-SA-Exim-Version: 4.2.1 (built Tue, 02 Aug 2016 21:08:31 +0000)
X-SA-Exim-Scanned: Yes (on ale.deltatee.com)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds generic io{read|write}64[be]{_lo_hi|_hi_lo} macros if
they are not already defined by the architecture. (As they are provided
by the generic iomap library).

The patch also points io{read|write}64[be] to the variant specified by the
header name.

This is because new drivers are encouraged to use ioreadXX, et al instead
of readX[1], et al -- and mixing ioreadXX with readq is pretty ugly.

[1] LDD3: section 9.4.2

Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
Cc: Christoph Hellwig <hch@lst.de>
Cc: Arnd Bergmann <arnd@arndb.de>
Cc: Alan Cox <gnomes@lxorguk.ukuu.org.uk>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---
 include/linux/io-64-nonatomic-hi-lo.h | 64 +++++++++++++++++++++++++++
 include/linux/io-64-nonatomic-lo-hi.h | 64 +++++++++++++++++++++++++++
 2 files changed, 128 insertions(+)

diff --git a/include/linux/io-64-nonatomic-hi-lo.h b/include/linux/io-64-nonatomic-hi-lo.h
index 862d786a904f..ae21b72cce85 100644
--- a/include/linux/io-64-nonatomic-hi-lo.h
+++ b/include/linux/io-64-nonatomic-hi-lo.h
@@ -55,4 +55,68 @@ static inline void hi_lo_writeq_relaxed(__u64 val, volatile void __iomem *addr)
 #define writeq_relaxed hi_lo_writeq_relaxed
 #endif
 
+#ifndef ioread64_hi_lo
+#define ioread64_hi_lo ioread64_hi_lo
+static inline u64 ioread64_hi_lo(void __iomem *addr)
+{
+	u32 low, high;
+
+	high = ioread32(addr + sizeof(u32));
+	low = ioread32(addr);
+
+	return low + ((u64)high << 32);
+}
+#endif
+
+#ifndef iowrite64_hi_lo
+#define iowrite64_hi_lo iowrite64_hi_lo
+static inline void iowrite64_hi_lo(u64 val, void __iomem *addr)
+{
+	iowrite32(val >> 32, addr + sizeof(u32));
+	iowrite32(val, addr);
+}
+#endif
+
+#ifndef ioread64be_hi_lo
+#define ioread64be_hi_lo ioread64be_hi_lo
+static inline u64 ioread64be_hi_lo(void __iomem *addr)
+{
+	u32 low, high;
+
+	high = ioread32be(addr);
+	low = ioread32be(addr + sizeof(u32));
+
+	return low + ((u64)high << 32);
+}
+#endif
+
+#ifndef iowrite64be_hi_lo
+#define iowrite64be_hi_lo iowrite64be_hi_lo
+static inline void iowrite64be_hi_lo(u64 val, void __iomem *addr)
+{
+	iowrite32be(val >> 32, addr);
+	iowrite32be(val, addr + sizeof(u32));
+}
+#endif
+
+#ifndef ioread64
+#define ioread64_is_nonatomic
+#define ioread64 ioread64_hi_lo
+#endif
+
+#ifndef iowrite64
+#define iowrite64_is_nonatomic
+#define iowrite64 iowrite64_hi_lo
+#endif
+
+#ifndef ioread64be
+#define ioread64be_is_nonatomic
+#define ioread64be ioread64be_hi_lo
+#endif
+
+#ifndef iowrite64be
+#define iowrite64be_is_nonatomic
+#define iowrite64be iowrite64be_hi_lo
+#endif
+
 #endif	/* _LINUX_IO_64_NONATOMIC_HI_LO_H_ */
diff --git a/include/linux/io-64-nonatomic-lo-hi.h b/include/linux/io-64-nonatomic-lo-hi.h
index d042e7bb5adb..faaa842dbdb9 100644
--- a/include/linux/io-64-nonatomic-lo-hi.h
+++ b/include/linux/io-64-nonatomic-lo-hi.h
@@ -55,4 +55,68 @@ static inline void lo_hi_writeq_relaxed(__u64 val, volatile void __iomem *addr)
 #define writeq_relaxed lo_hi_writeq_relaxed
 #endif
 
+#ifndef ioread64_lo_hi
+#define ioread64_lo_hi ioread64_lo_hi
+static inline u64 ioread64_lo_hi(void __iomem *addr)
+{
+	u32 low, high;
+
+	low = ioread32(addr);
+	high = ioread32(addr + sizeof(u32));
+
+	return low + ((u64)high << 32);
+}
+#endif
+
+#ifndef iowrite64_lo_hi
+#define iowrite64_lo_hi iowrite64_lo_hi
+static inline void iowrite64_lo_hi(u64 val, void __iomem *addr)
+{
+	iowrite32(val, addr);
+	iowrite32(val >> 32, addr + sizeof(u32));
+}
+#endif
+
+#ifndef ioread64be_lo_hi
+#define ioread64be_lo_hi ioread64be_lo_hi
+static inline u64 ioread64be_lo_hi(void __iomem *addr)
+{
+	u32 low, high;
+
+	low = ioread32be(addr + sizeof(u32));
+	high = ioread32be(addr);
+
+	return low + ((u64)high << 32);
+}
+#endif
+
+#ifndef iowrite64be_lo_hi
+#define iowrite64be_lo_hi iowrite64be_lo_hi
+static inline void iowrite64be_lo_hi(u64 val, void __iomem *addr)
+{
+	iowrite32be(val, addr + sizeof(u32));
+	iowrite32be(val >> 32, addr);
+}
+#endif
+
+#ifndef ioread64
+#define ioread64_is_nonatomic
+#define ioread64 ioread64_lo_hi
+#endif
+
+#ifndef iowrite64
+#define iowrite64_is_nonatomic
+#define iowrite64 iowrite64_lo_hi
+#endif
+
+#ifndef ioread64be
+#define ioread64be_is_nonatomic
+#define ioread64be ioread64be_lo_hi
+#endif
+
+#ifndef iowrite64be
+#define iowrite64be_is_nonatomic
+#define iowrite64be iowrite64be_lo_hi
+#endif
+
 #endif	/* _LINUX_IO_64_NONATOMIC_LO_HI_H_ */
-- 
2.19.0

