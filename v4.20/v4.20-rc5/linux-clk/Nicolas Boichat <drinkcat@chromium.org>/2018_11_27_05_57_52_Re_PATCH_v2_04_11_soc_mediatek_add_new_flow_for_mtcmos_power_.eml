Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 14:24:49 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 8274B5802E4;
	Mon, 26 Nov 2018 21:58:12 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 26 Nov 2018 21:58:11 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ABpQo0hfEyWeRGk1D/y6cClDMlGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YhGN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRODYOy?=
 =?us-ascii?q?bYQBD+QPM+VFoYfju1QOtgO+CAu3CePz1jNFnGP60bEm3+kjFwzNwQwuH8gJsH?=
 =?us-ascii?q?TRtNj7LKYSXvyyzKnM1zrDdO5d1Cr66IjJbh8hoeuDXa5tesfW1EYvDQLFjlOT?=
 =?us-ascii?q?qYP5JTyVyv8AvHSb7+p6UuKvjm8nqxx0ojS1wccskIbJi5sTx1vZ9it52J44Kc?=
 =?us-ascii?q?OkREN/e9KoDZVduz+AO4drQc4uX3tktSc4x7Eep5K3YCwHxI4kyhPfcfCLbZWE?=
 =?us-ascii?q?7g75WOqMJTp1i3Roc6+liRmo60iv0Oj8W9G00FlUqipFlcHBtm4C1xPN8MiLUP?=
 =?us-ascii?q?h98Vm72TaJyQ/T7vtIIUcularUM5Ihw7gwmYQPsUnbACP6hEH7gLWLekgq5OSk?=
 =?us-ascii?q?8fnrb7b6qpOGNoJ5iBnyMqE0lcy+BeQ4PBIOX2+e+emk0L3j/Ev5QKhFj/Evka?=
 =?us-ascii?q?nWroraJcIFqa69GgNV1Ygi6xChADe8y9kYg3YHI0xfeB6djIjmJUvOIPbmAve7?=
 =?us-ascii?q?mVisly1rx//eMr37HprNNmTDkKvmfbtl705cyQkzws5F65NbF7EMO/bzWk73tN?=
 =?us-ascii?q?zFAR41KQ20w+D7CNpj0oMSQ36AAqicMKnKq1+H+vovI/WQZI8SoDv9K+Iq5//y?=
 =?us-ascii?q?jXAjnl8RZ6mp3YYNZ3C+EfRrOEGZYXvqgtccHmYGpAs+TOr2iFKcVT5ffWq9X6?=
 =?us-ascii?q?U55jsjEoKpEZ/DRpyxgLyGxCq7HJpWaX5cBlCPFnfocYOEW/AXZSKWI89hlCEE?=
 =?us-ascii?q?VLe7R48g0xGuqBH1y759IuXI/S0YsIrp1MJp6O3LiREy6Tt0AtyH3GGWT2F0mW?=
 =?us-ascii?q?AISyUs3K9lo0xw0VOD0al+g/xFGt1f/fJJUgEmNZHCy+x2Ecz9WgXEft2RUlap?=
 =?us-ascii?q?Xs2mAS0tTtI229IOYFxyG9O4ghDH3iqlGbkVl7OQCZww86Lc2WXxJslnx3bH0q?=
 =?us-ascii?q?khk0cpQs9VOWK6ga5/8hDZB5TVnEWBi6aqaaMc0TbQ+2iZ02qBoltUUA5qXqXD?=
 =?us-ascii?q?RnAQeE3WodP95kPBSr+uDa8qMg9Ayc6EN6tLZcfljVRARPf/JtveZ3i9lHu3BR?=
 =?us-ascii?q?aN3rmMdpble30B3CXBD0gJix0c8myYNQcgHCuho3jRDDp1FV3xZUPh6u1+qHK9?=
 =?us-ascii?q?Tk8pwACGdUxh17yp+hELgfyQUe8c3rUBuC05sTV7AE69387KC9qHvwdhYKRcYd?=
 =?us-ascii?q?Y64Fdb1WLYtxZxPoC6I6BlnF4edwV3v0Xh1xhsDoVAkM4qrG4lzQZoKKKY1k9B?=
 =?us-ascii?q?eC2c3ZzqJrLXLWzy9gi1a6HKwlHezMqW+qAX5fsir1Xsog6oGVQi8nl9yNZVzm?=
 =?us-ascii?q?aT6Y/MDAoRVpLxTF069xx7p7Hcfyk86JnY1XxqMamorDDC38glC/ciyhalZ91f?=
 =?us-ascii?q?Kr+LFBfuE80GAMijMOwrm0WzYh0YJuxT9a40MNmgd/uJw6OrOOdgnDS7jWVI+o?=
 =?us-ascii?q?x900SM9zZiRe7MxZoK3/aY3g6fXTfmkFihqtz3mZxDZTwKBGq/yDTrC5RLZqJv?=
 =?us-ascii?q?eoYHE2GuLNOtxtV/npLiR2RX9Fq+CFwYws+pfhySYkf53Q1R00QXvHOmlTG5zz?=
 =?us-ascii?q?xyjzEmsK6f0DbSzOTlcRoNInRLS3V6jVfwPYi0iMgXXUipbwQzlBqp/136x7Vd?=
 =?us-ascii?q?pKlkK2nTQEFIfzX5Lm14U6uwsKaCbNBL6J8yrSpXV+G8a0iASrHhuxsazz/jH2?=
 =?us-ascii?q?xGyTA5bT6qoJb5nx99iG6HN3Z8tnnZecJxxRfZ+tPcQ+Vc3j4HRCl+lDnWCUKw?=
 =?us-ascii?q?P9iv/dWIiZjDtvqyWH6mVp1WaSPr15+PtDOn5W12Bh2yh/CylcfgEQQg0y/71t?=
 =?us-ascii?q?9qWD7MrBb9ZInryqu7PfhmfkluGF/z9c56FptinYs3gZEawWIaiYmN/XobjWfz?=
 =?us-ascii?q?Ns1W2aHkY3oMXzILw8PV7xLj2E1sNX+Jw4P5VnOAwspufdW6Y2UW2j4j4MBOEq?=
 =?us-ascii?q?ub8LtEnS5tqFqisQ3ReeR9nisayfY27X4aguIJtxA3wiSTHL8SBlVYMjL2lxuT?=
 =?us-ascii?q?8d++tqpXaX2rcbix0kp+gN+gAKuDogFaRHb2ZJMiETVs4cV4NVLGyGfz5Z38eN?=
 =?us-ascii?q?nMcdITsQWZkwvHj+hQMp4wl+AFhSx6OWLmpn0lyvU2jRhv3ZG8oYiGJH9h/KO/?=
 =?us-ascii?q?Ah5EKDL1Y9kf9S3qjaZbhsyWxZygHo19GjUXW5vlVemnHygVtfTjKgaCCjk8qm?=
 =?us-ascii?q?qAFLrbHA+f7lpmrn3VH5CqMXGXOGcWzdF4SBaBI0xfhRgeXC8mkZ4hCgCq2Mvh?=
 =?us-ascii?q?fV975j8L4173tABMxvh0NxXlUWffuQSoaioySJeFNxpb9QVC50bTMcyD4eN/BS?=
 =?us-ascii?q?BY/pu9rAOTLmyXfRhHDWYMWkacHVDsIqGu5cXc8+ifHue/L/zOYaiXqexDTfiI?=
 =?us-ascii?q?w4ij0pBh/zaKOcWCJX1iD/w92kpeUnF1AcXZmzMTSyMJkyLBddKUpBC5+idvtM?=
 =?us-ascii?q?Cw7OzrWB7z5YuIE7ZSMctg+xG1gaeANu6cniV5KSxf1pMD23DI0qUf3EUJhiFq?=
 =?us-ascii?q?djmtF6kAtCHXQKLRnK9XEwAUaydpOMRU6KI82xFHOdTHhdPtyr54kvk1Bk9fWl?=
 =?us-ascii?q?z8gc6pf9IFImGnOFPDBUaGL7CGJTzNw8HqbqKwU7xQjONItxKuvTaXCVPsPjOG?=
 =?us-ascii?q?lzPxTRCgLflMjD2HPBxZoIy9bhdtCW35QN36cBG0LN93giMwwbAvgnPKNGgcMS?=
 =?us-ascii?q?Vzck9Xr72Q6z9Yjet7G2Bb8nVlKuyEkT6D7+bEMpYWredrAiNsmuNa+ns6zb5V?=
 =?us-ascii?q?7CBCRPNtmSrSrsRho1epkuSUzjpnURxOqitEhY6RvEViP7nZ+YdEWXre4B0N6m?=
 =?us-ascii?q?CQWFw2oI5aB9z+uuh015Cbi6/yOTYE98/8+MYQBsHIJcHBO30kZ0nHAjnRWS0E?=
 =?us-ascii?q?RjmvPHqXrUtcm/Gb6jXBooI7rJvnkYYmQb9BU1k0C/ZcDV5qSo9RaKxrVy8pxO?=
 =?us-ascii?q?bIxPUD4mCz+VyIHJ1X?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ARAACY3Pxbh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N5lBxQAQEGgTUUiQaOIxSBYygTAYhkIjQJDQEDAQEBAQEBAgETAQEBCA0?=
 =?us-ascii?q?JCCkjDII2JAGCYQEBAQECAQECFwkEGQEBNwEEAQkBAQoLCgMCAiYCAgMfEgEFA?=
 =?us-ascii?q?RwGEwWDHIF1BQgFmhI8ih1wfDOCdgEBBYcsCBJ5in4XeIEHgRGCFH6EQx8Egxy?=
 =?us-ascii?q?CV4kegXiEC3ZPhFqKTAmRMBiBWYULgySHAYdUkFIwgSWCDTMaCCgIbAaCNYIbD?=
 =?us-ascii?q?BeHNYEphUsyM4EFAQGNYgEB?=
X-IPAS-Result: =?us-ascii?q?A0ARAACY3Pxbh0O0hNFkHgEGBwaBUQkLAYNrJ4N5lBxQAQE?=
 =?us-ascii?q?GgTUUiQaOIxSBYygTAYhkIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCY?=
 =?us-ascii?q?QEBAQECAQECFwkEGQEBNwEEAQkBAQoLCgMCAiYCAgMfEgEFARwGEwWDHIF1BQg?=
 =?us-ascii?q?FmhI8ih1wfDOCdgEBBYcsCBJ5in4XeIEHgRGCFH6EQx8EgxyCV4kegXiEC3ZPh?=
 =?us-ascii?q?FqKTAmRMBiBWYULgySHAYdUkFIwgSWCDTMaCCgIbAaCNYIbDBeHNYEphUsyM4E?=
 =?us-ascii?q?FAQGNYgEB?=
X-IronPort-AV: E=Sophos;i="5.56,285,1539673200"; 
   d="scan'208";a="139693057"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 26 Nov 2018 21:58:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727701AbeK0Qyu (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 11:54:50 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:39304 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726608AbeK0Qyu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 11:54:50 -0500
Received: by mail-pf1-f194.google.com with SMTP id c72so7814935pfc.6
        for <linux-kernel@vger.kernel.org>; Mon, 26 Nov 2018 21:58:04 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=4XEHt07ibvMZU+layUmYkF32RCI1Qvb3Ew4Q0EaMt/c=;
        b=Dc8+55PimeE+wo08MrjFd3ZTdfYhX4j8RFBUeS4NyJIt7WTE27h+Pa7Ie+zmRnUzDZ
         jCJ4ry55fWT5Ftxu5Ir19rNWVwnYwVpgnt75ZxgHzriItq7yf0aJS0bBP1e3seX2VjKC
         3u4Nok1xFGsZr1jKPN6U5C3MwOqmNxl6D7NKk=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=4XEHt07ibvMZU+layUmYkF32RCI1Qvb3Ew4Q0EaMt/c=;
        b=i6JhOaUXFmkQLPdQp5i62+Y4/mpRHpLsP4/Al+KsUOcRl9GlgN4D6jniep0AQ+iout
         6JPr9IemDNs3e5YoBWp94v1q18dmMKNVU2hzfD0VfxcGQIiA9gZ8pIKbPZ2zlfwIScFC
         H3ICSCNbdkAzw4YMmQ840vQpJf0D17txLnXPFlxSvt/HE5hnpMkG9QaJyk4abF3WrrvL
         esWWiPfY0Oe0eOMXzWH/dEX315vtG0wm1I4KYT89ubE4japeKPHuYWJRGdgM8gdH8LJq
         DYik9D2dF+9QN2dFUMmP9zeHAyIIvzRv7ovHMNuIj+3dGQIpE41UdxIS03BPV1+2JO0V
         ACXA==
X-Gm-Message-State: AA+aEWafwYJnHb9UTpNboql+8ncKhQYK447DqgfMAvZ4GISpPUh1EMHz
        5BmNokIwPOtB0gpronxesbHmgzy2prHtxvkAIUneMw==
X-Google-Smtp-Source: AFSGD/VKT5/GT8qAN4iReKFp+jBEv2T2W64ky6B+z1wZJJYcfIqjog0tGam6IMHP096XdusYJOh5Tvj5P5+9U8YDrxw=
X-Received: by 2002:a62:4156:: with SMTP id o83mr16727706pfa.72.1543298283263;
 Mon, 26 Nov 2018 21:58:03 -0800 (PST)
MIME-Version: 1.0
References: <20181127034254.24721-1-weiyi.lu@mediatek.com> <20181127034254.24721-6-weiyi.lu@mediatek.com>
In-Reply-To: <20181127034254.24721-6-weiyi.lu@mediatek.com>
From: Nicolas Boichat <drinkcat@chromium.org>
Date: Tue, 27 Nov 2018 13:57:52 +0800
Message-ID: <CANMq1KAjfCuYcALjyp_=HR89NOgBZEBeM7cnvCHd2fVoCAsf-g@mail.gmail.com>
Subject: Re: [PATCH v2 04/11] soc: mediatek: add new flow for mtcmos power.
To: Weiyi Lu <weiyi.lu@mediatek.com>
Cc: Matthias Brugger <matthias.bgg@gmail.com>, sboyd@codeaurora.org,
        Rob Herring <robh@kernel.org>, jamesjj.liao@mediatek.com,
        Fan Chen <fan.chen@mediatek.com>,
        linux-arm Mailing List <linux-arm-kernel@lists.infradead.org>,
        lkml <linux-kernel@vger.kernel.org>,
        linux-mediatek@lists.infradead.org, linux-clk@vger.kernel.org,
        srv_heupstream@mediatek.com, owen.chen@mediatek.com,
        Cheng Mars <mars.cheng@mediatek.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 11:43 AM Weiyi Lu <weiyi.lu@mediatek.com> wrote:
>
> From: Owen Chen <owen.chen@mediatek.com>
>
> Both MT8183 & MT6765 add more bus protect node than previous project,
> therefore we add two more register for setup bus protect, which reside
> at INFRA_CFG & SMI_COMMON.
>
> With the following change
> 1. bus protect need not only infracfg but smi_common registers involved
>    to setup. Therefore we add a set/clr APIs with more customize arguments.
>
> The second change is that we also add subsys CG control flow before/after
> the bus protect/sram control, due to bus protect need SMI bus relative CGs
> enable to feed-back its ack, and some master's sram control need CG enable
> to on/off its resource sequentially.
>
> With the following change
> 1. turn on subsys CG before sram pwron and release bus protect.
> 2. turn off subsys CG after the process of set bus protect/receive
>    ack/disable sram.
>
> The last change is for some power domains like vpu_core on MT8183 whose
> sram need to do clock and internal isolation while power on/off sram.
> We add a flag "sram_iso_ctrl" in scp_domain_data to judge if we need to
> do the extra sram isolation control or not.
>
> Signed-off-by: Owen Chen <owen.chen@mediatek.com>
> Signed-off-by: Mars Cheng <mars.cheng@mediatek.com>
> Signed-off-by: Weiyi Lu <weiyi.lu@mediatek.com>
> ---
>  drivers/soc/mediatek/Makefile           |   2 +-
>  drivers/soc/mediatek/mtk-scpsys-ext.c   |  99 +++++++
>  drivers/soc/mediatek/mtk-scpsys.c       | 379 +++++++++++++++++++-----
>  include/linux/soc/mediatek/scpsys-ext.h |  39 +++
>  4 files changed, 448 insertions(+), 71 deletions(-)
>  create mode 100644 drivers/soc/mediatek/mtk-scpsys-ext.c
>  create mode 100644 include/linux/soc/mediatek/scpsys-ext.h
>
> diff --git a/drivers/soc/mediatek/Makefile b/drivers/soc/mediatek/Makefile
> index 12998b08819e..9dc6670c19cb 100644
> --- a/drivers/soc/mediatek/Makefile
> +++ b/drivers/soc/mediatek/Makefile
> @@ -1,3 +1,3 @@
> -obj-$(CONFIG_MTK_INFRACFG) += mtk-infracfg.o
> +obj-$(CONFIG_MTK_INFRACFG) += mtk-infracfg.o mtk-scpsys-ext.o
>  obj-$(CONFIG_MTK_PMIC_WRAP) += mtk-pmic-wrap.o
>  obj-$(CONFIG_MTK_SCPSYS) += mtk-scpsys.o
> diff --git a/drivers/soc/mediatek/mtk-scpsys-ext.c b/drivers/soc/mediatek/mtk-scpsys-ext.c
> new file mode 100644
> index 000000000000..54df42db2a8f
> --- /dev/null
> +++ b/drivers/soc/mediatek/mtk-scpsys-ext.c
> @@ -0,0 +1,99 @@
> +// SPDX-License-Identifier: GPL-2.0
> +/*
> + * Copyright (c) 2018 MediaTek Inc.
> + * Author: Owen Chen <Owen.Chen@mediatek.com>
> + */
> +#include <linux/ktime.h>
> +#include <linux/mfd/syscon.h>
> +#include <linux/of_device.h>
> +#include <linux/regmap.h>
> +#include <linux/soc/mediatek/scpsys-ext.h>
> +
> +#define MTK_POLL_DELAY_US   10
> +#define MTK_POLL_TIMEOUT    (jiffies_to_usecs(HZ))
> +
> +static int set_bus_protection(struct regmap *map, u32 mask, u32 ack_mask,
> +               u32 reg_set, u32 reg_sta, u32 reg_en)
> +{
> +       u32 val;
> +
> +       if (reg_set)
> +               regmap_write(map, reg_set, mask);
> +       else
> +               regmap_update_bits(map, reg_en, mask, mask);
> +
> +       return regmap_read_poll_timeout(map, reg_sta,
> +                       val, (val & ack_mask) == ack_mask,
> +                       MTK_POLL_DELAY_US, MTK_POLL_TIMEOUT);
> +}
> +
> +static int clear_bus_protection(struct regmap *map, u32 mask, u32 ack_mask,
> +               u32 reg_clr, u32 reg_sta, u32 reg_en)
> +{
> +       u32 val;
> +
> +       if (reg_clr)
> +               regmap_write(map, reg_clr, mask);
> +       else
> +               regmap_update_bits(map, reg_en, mask, 0);
> +
> +       return regmap_read_poll_timeout(map, reg_sta,
> +                       val, !(val & ack_mask),
> +                       MTK_POLL_DELAY_US, MTK_POLL_TIMEOUT);
> +}
> +
> +int mtk_scpsys_ext_set_bus_protection(const struct bus_prot *bp_table,
> +       struct regmap *infracfg, struct regmap *smi_common)
> +{
> +       int i;
> +
> +       for (i = 0; i < MAX_STEPS && bp_table[i].mask; i++) {
> +               struct regmap *map;
> +               int ret;
> +
> +               if (bp_table[i].type == IFR_TYPE)
> +                       map = infracfg;
> +               else if (bp_table[i].type == SMI_TYPE)
> +                       map = smi_common;
> +               else
> +                       return -EINVAL;
> +
> +               ret = set_bus_protection(map,
> +                               bp_table[i].mask, bp_table[i].mask,
> +                               bp_table[i].set_ofs, bp_table[i].sta_ofs,
> +                               bp_table[i].en_ofs);
> +
> +               if (ret)
> +                       return ret;
> +       }
> +
> +       return 0;
> +}
> +
> +int mtk_scpsys_ext_clear_bus_protection(const struct bus_prot *bp_table,
> +       struct regmap *infracfg, struct regmap *smi_common)
> +{
> +       int i;
> +
> +       for (i = MAX_STEPS - 1; i >= 0; i--) {
> +               struct regmap *map;
> +               int ret;
> +
> +               if (bp_table[i].type == IFR_TYPE)
> +                       map = infracfg;
> +               else if (bp_table[i].type == SMI_TYPE)
> +                       map = smi_common;
> +               else
> +                       return -EINVAL;
> +
> +               ret = clear_bus_protection(map,
> +                               bp_table[i].mask, bp_table[i].clr_ack_mask,
> +                               bp_table[i].clr_ofs, bp_table[i].sta_ofs,
> +                               bp_table[i].en_ofs);
> +
> +               if (ret)
> +                       return ret;
> +       }
> +
> +       return 0;
> +}
> diff --git a/drivers/soc/mediatek/mtk-scpsys.c b/drivers/soc/mediatek/mtk-scpsys.c
> index 5b24bb4bfbf6..80be2e05e4e0 100644
> --- a/drivers/soc/mediatek/mtk-scpsys.c
> +++ b/drivers/soc/mediatek/mtk-scpsys.c
> @@ -1,3 +1,4 @@
> +// SPDX-License-Identifier: GPL-2.0

If you add the SPDX header, should you remove the licence boilerplate below?

>  /*
>   * Copyright (c) 2015 Pengutronix, Sascha Hauer <kernel@pengutronix.de>
>   *
> @@ -20,6 +21,7 @@
>  #include <linux/pm_domain.h>
>  #include <linux/regulator/consumer.h>
>  #include <linux/soc/mediatek/infracfg.h>
> +#include <linux/soc/mediatek/scpsys-ext.h>
>
>  #include <dt-bindings/power/mt2701-power.h>
>  #include <dt-bindings/power/mt2712-power.h>
> @@ -64,6 +66,8 @@
>  #define PWR_ON_BIT                     BIT(2)
>  #define PWR_ON_2ND_BIT                 BIT(3)
>  #define PWR_CLK_DIS_BIT                        BIT(4)
> +#define PWR_SRAM_CLKISO_BIT            BIT(5)
> +#define PWR_SRAM_ISOINT_B_BIT          BIT(6)
>
>  #define PWR_STATUS_CONN                        BIT(1)
>  #define PWR_STATUS_DISP                        BIT(3)
> @@ -115,16 +119,38 @@ static const char * const clk_names[] = {
>  };
>
>  #define MAX_CLKS       3
> -
> +#define MAX_SUBSYS_CLKS 10
> +
> +/**
> + * struct scp_domain_data - scp domain data for power on/off flow
> + * @name: The domain name.
> + * @sta_mask: The mask for power on/off status bit.
> + * @ctl_offs: The offset for main power control register.
> + * @sram_pdn_bits: The mask for sram power control bits.
> + * @sram_pdn_ack_bits: The mask for sram power control acked bits.
> + * @bus_prot_mask: The mask for single step bus protection.
> + * @clk_id: The basic clock needs to be enabled before enabling certain
> + *          power domains.
> + * @basic_clk_name: provide the same purpose with field "clk_id"
> + *                  by declaring basic clock prefix name rathan than clk_id.

*rather

> + * @subsys_clk_prefix: The prefix name of the clocks need to be enabled
> + *                     before releasing bus protection.
> + * @caps: The flag for active wake-up action.
> + * @bp_table: The mask table for multiple step bus protection.
> + */
>  struct scp_domain_data {
>         const char *name;
>         u32 sta_mask;
>         int ctl_offs;
> +       bool sram_iso_ctrl;
>         u32 sram_pdn_bits;
>         u32 sram_pdn_ack_bits;
>         u32 bus_prot_mask;
>         enum clk_id clk_id[MAX_CLKS];
> +       const char *basic_clk_name[MAX_CLKS];
> +       const char *subsys_clk_prefix;
>         u8 caps;
> +       struct bus_prot bp_table[MAX_STEPS];
>  };
>
>  struct scp;
> @@ -133,6 +159,7 @@ struct scp_domain {
>         struct generic_pm_domain genpd;
>         struct scp *scp;
>         struct clk *clk[MAX_CLKS];
> +       struct clk *subsys_clk[MAX_SUBSYS_CLKS];
>         const struct scp_domain_data *data;
>         struct regulator *supply;
>  };
> @@ -148,6 +175,7 @@ struct scp {
>         struct device *dev;
>         void __iomem *base;
>         struct regmap *infracfg;
> +       struct regmap *smi_common;
>         struct scp_ctrl_reg ctrl_reg;
>         bool bus_prot_reg_update;
>  };
> @@ -188,20 +216,26 @@ static int scpsys_domain_is_on(struct scp_domain *scpd)
>         return -EINVAL;
>  }
>
> -static int scpsys_power_on(struct generic_pm_domain *genpd)
> +static int scpsys_regulator_onoff(struct scp_domain *scpd, bool on)

This function is so simple that I'm not sure why it was added.
Wouldn't be generally simpler to just call
regulator_enable/disable(scpd->supply) in the code below? (as was done
before this refactoring)

>  {
> -       struct scp_domain *scpd = container_of(genpd, struct scp_domain, genpd);
> -       struct scp *scp = scpd->scp;
> -       void __iomem *ctl_addr = scp->base + scpd->data->ctl_offs;
> -       u32 pdn_ack = scpd->data->sram_pdn_ack_bits;
> -       u32 val;
> -       int ret, tmp;
> +       struct regulator *s = scpd->supply;
> +
> +       if (!s)
> +               return 0;
> +
> +       return on ? regulator_enable(s) : regulator_disable(s);
> +}
> +
> +static int scpsys_basic_clk_onoff(struct scp_domain *scpd, bool on)

I don't find this pattern particularly nice:
int func_onoff(bool on) {
  if (on) enable();
  else disable();
}

Especially give that you always call func_onoff with either hard-coded
true or false parameter.

I think 2 sets of functions (func_enable and func_disable) is probably
better in this case.

> +{
> +       int ret = 0;
>         int i;
>
> -       if (scpd->supply) {
> -               ret = regulator_enable(scpd->supply);
> -               if (ret)
> -                       return ret;
> +       if (!on) {
> +               for (i = 0; i < MAX_CLKS && scpd->clk[i]; i++)
> +                       clk_disable_unprepare(scpd->clk[i]);
> +
> +               return ret;
>         }
>
>         for (i = 0; i < MAX_CLKS && scpd->clk[i]; i++) {
> @@ -210,10 +244,147 @@ static int scpsys_power_on(struct generic_pm_domain *genpd)
>                         for (--i; i >= 0; i--)
>                                 clk_disable_unprepare(scpd->clk[i]);
>
> -                       goto err_clk;
> +                       break;
>                 }
>         }
>
> +       return ret;
> +}
> +
> +static int scpsys_sram_onoff(struct scp_domain *scpd, void __iomem *ctl_addr,
> +               bool on)

This one is a little more borderline, but IMHO enable/disable would
still be more readable.

> +{
> +       u32 val, ack;
> +       int tmp;
> +       int ret = 0;
> +       u32 pdn_ack = scpd->data->sram_pdn_ack_bits;
> +
> +       if (!on && scpd->data->sram_iso_ctrl)   {
> +               val = readl(ctl_addr);
> +               val |= PWR_SRAM_CLKISO_BIT;
> +               writel(val, ctl_addr);
> +               val &= ~PWR_SRAM_ISOINT_B_BIT;
> +               writel(val, ctl_addr);
> +               udelay(1);
> +       }
> +
> +       val = readl(ctl_addr);
> +       if (on) {
> +               val &= ~scpd->data->sram_pdn_bits;
> +               ack = 0;
> +       } else {
> +               val |= scpd->data->sram_pdn_bits;
> +               ack = pdn_ack;
> +       }
> +       writel(val, ctl_addr);
> +
> +       /* Either wait until SRAM_PDN_ACK all 0 or have a force wait */
> +       if (on && MTK_SCPD_CAPS(scpd, MTK_SCPD_FWAIT_SRAM)) {
> +               /*
> +                * Currently, MTK_SCPD_FWAIT_SRAM is necessary only for
> +                * MT7622_POWER_DOMAIN_WB and thus just a trivial setup
> +                * is applied here.
> +                */
> +               usleep_range(12000, 12100);
> +       } else
> +               /* Either wait until SRAM_PDN_ACK all 1 or 0 */
> +               ret = readl_poll_timeout(ctl_addr, tmp,
> +                               (tmp & pdn_ack) == ack,
> +                               MTK_POLL_DELAY_US, MTK_POLL_TIMEOUT);
> +
> +       if (on && scpd->data->sram_iso_ctrl)    {
> +               val = readl(ctl_addr);
> +               val |= PWR_SRAM_ISOINT_B_BIT;
> +               writel(val, ctl_addr);
> +               udelay(1);
> +               val &= ~PWR_SRAM_CLKISO_BIT;
> +               writel(val, ctl_addr);
> +       }
> +
> +       return ret;
> +}
> +
> +static int scpsys_subsys_clk_onoff(struct scp_domain *scpd, bool on)

enable/disable for this one.

> +{
> +       int ret = 0;
> +       int i;
> +
> +       if (!on) {
> +               for (i = MAX_SUBSYS_CLKS - 1; i >= 0; i--) {
> +                       struct clk *clk = scpd->subsys_clk[i];
> +
> +                       if (clk)
> +                               clk_disable_unprepare(clk);
> +               }
> +
> +               return ret;
> +       }
> +
> +       for (i = 0; i < MAX_SUBSYS_CLKS && scpd->subsys_clk[i]; i++) {
> +               struct clk *clk = scpd->subsys_clk[i];
> +
> +               ret = clk_prepare_enable(clk);
> +               if (ret) {
> +                       for (--i; i >= 0; i--) {
> +                               struct clk *clk = scpd->subsys_clk[i];
> +
> +                               clk_disable_unprepare(clk);
> +                       }
> +
> +                       break;
> +               }
> +       }
> +
> +       return ret;
> +}
> +
> +static int scpsys_bus_protect_onoff(struct scp_domain *scpd, bool on)

I'd also do an enable/disable pair of function, that could look very simple:

...
{
  ...
  if (scpd->data->bus_prot_mask)
     return mtk_infracfg_set_bus_protection(scp->infracfg,
                                       scpd->data->bus_prot_mask,
                                       scp->bus_prot_reg_update);
  else
     return mtk_scpsys_ext_set_bus_protection(
                                       scpd->data->bp_table,
                                       scp->infracfg,
                                       scp->smi_common);
  return 0;
}

> +{
> +       struct scp *scp = scpd->scp;
> +       int ret = 0;
> +
> +       if (scpd->data->bus_prot_mask) {
> +               if (on)
> +                       ret = mtk_infracfg_set_bus_protection(scp->infracfg,
> +                                       scpd->data->bus_prot_mask,
> +                                       scp->bus_prot_reg_update);
> +               else
> +                       ret = mtk_infracfg_clear_bus_protection(scp->infracfg,
> +                                       scpd->data->bus_prot_mask,
> +                                       scp->bus_prot_reg_update);
> +       } else if (scpd->data->bp_table[0].mask) {
> +               if (on)
> +                       ret = mtk_scpsys_ext_set_bus_protection(
> +                                       scpd->data->bp_table,
> +                                       scp->infracfg,
> +                                       scp->smi_common);
> +               else
> +                       ret = mtk_scpsys_ext_clear_bus_protection(
> +                                       scpd->data->bp_table,
> +                                       scp->infracfg,
> +                                       scp->smi_common);
> +       }
> +
> +       return ret;
> +}
> +
> +static int scpsys_power_on(struct generic_pm_domain *genpd)
> +{
> +       struct scp_domain *scpd = container_of(genpd, struct scp_domain, genpd);
> +       struct scp *scp = scpd->scp;
> +       void __iomem *ctl_addr = scp->base + scpd->data->ctl_offs;
> +       u32 val;
> +       int ret, tmp;
> +
> +       ret = scpsys_regulator_onoff(scpd, true);
> +       if (ret < 0)
> +               return ret;
> +
> +       ret = scpsys_basic_clk_onoff(scpd, true);
> +       if (ret)
> +               goto err_clk;
> +
> +       /* subsys power on */
>         val = readl(ctl_addr);
>         val |= PWR_ON_BIT;
>         writel(val, ctl_addr);
> @@ -226,6 +397,7 @@ static int scpsys_power_on(struct generic_pm_domain *genpd)
>         if (ret < 0)
>                 goto err_pwr_ack;
>
> +

This extra blank line still needs to be removed.

>         val &= ~PWR_CLK_DIS_BIT;
>         writel(val, ctl_addr);
>
> @@ -235,43 +407,26 @@ static int scpsys_power_on(struct generic_pm_domain *genpd)
>         val |= PWR_RST_B_BIT;
>         writel(val, ctl_addr);
>
> -       val &= ~scpd->data->sram_pdn_bits;
> -       writel(val, ctl_addr);
> -
> -       /* Either wait until SRAM_PDN_ACK all 0 or have a force wait */
> -       if (MTK_SCPD_CAPS(scpd, MTK_SCPD_FWAIT_SRAM)) {
> -               /*
> -                * Currently, MTK_SCPD_FWAIT_SRAM is necessary only for
> -                * MT7622_POWER_DOMAIN_WB and thus just a trivial setup is
> -                * applied here.
> -                */
> -               usleep_range(12000, 12100);
> +       ret = scpsys_subsys_clk_onoff(scpd, true);
> +       if (ret < 0)
> +               goto err_pwr_ack;
>
> -       } else {
> -               ret = readl_poll_timeout(ctl_addr, tmp, (tmp & pdn_ack) == 0,
> -                                        MTK_POLL_DELAY_US, MTK_POLL_TIMEOUT);
> -               if (ret < 0)
> -                       goto err_pwr_ack;
> -       }
> +       ret = scpsys_sram_onoff(scpd, ctl_addr, true);
> +       if (ret < 0)
> +               goto err_sram;
>
> -       if (scpd->data->bus_prot_mask) {
> -               ret = mtk_infracfg_clear_bus_protection(scp->infracfg,
> -                               scpd->data->bus_prot_mask,
> -                               scp->bus_prot_reg_update);
> -               if (ret)
> -                       goto err_pwr_ack;
> -       }
> +       ret = scpsys_bus_protect_onoff(scpd, false);
> +       if (ret < 0)
> +               goto err_sram;
>
>         return 0;
>
> +err_sram:
> +       scpsys_subsys_clk_onoff(scpd, false);
>  err_pwr_ack:
> -       for (i = MAX_CLKS - 1; i >= 0; i--) {
> -               if (scpd->clk[i])
> -                       clk_disable_unprepare(scpd->clk[i]);
> -       }
> +       scpsys_basic_clk_onoff(scpd, false);
>  err_clk:
> -       if (scpd->supply)
> -               regulator_disable(scpd->supply);
> +       scpsys_regulator_onoff(scpd, false);
>
>         dev_err(scp->dev, "Failed to power on domain %s\n", genpd->name);
>
> @@ -283,29 +438,21 @@ static int scpsys_power_off(struct generic_pm_domain *genpd)
>         struct scp_domain *scpd = container_of(genpd, struct scp_domain, genpd);
>         struct scp *scp = scpd->scp;
>         void __iomem *ctl_addr = scp->base + scpd->data->ctl_offs;
> -       u32 pdn_ack = scpd->data->sram_pdn_ack_bits;
>         u32 val;
>         int ret, tmp;
> -       int i;
>
> -       if (scpd->data->bus_prot_mask) {
> -               ret = mtk_infracfg_set_bus_protection(scp->infracfg,
> -                               scpd->data->bus_prot_mask,
> -                               scp->bus_prot_reg_update);
> -               if (ret)
> -                       goto out;
> -       }
> -
> -       val = readl(ctl_addr);
> -       val |= scpd->data->sram_pdn_bits;
> -       writel(val, ctl_addr);
> +       ret = scpsys_bus_protect_onoff(scpd, true);
> +       if (ret < 0)
> +               goto out;
>
> -       /* wait until SRAM_PDN_ACK all 1 */
> -       ret = readl_poll_timeout(ctl_addr, tmp, (tmp & pdn_ack) == pdn_ack,
> -                                MTK_POLL_DELAY_US, MTK_POLL_TIMEOUT);
> +       ret = scpsys_sram_onoff(scpd, ctl_addr, false);
>         if (ret < 0)
>                 goto out;
>
> +       ret = scpsys_subsys_clk_onoff(scpd, false);
> +
> +       /* subsys power off */
> +       val = readl(ctl_addr);
>         val |= PWR_ISO_BIT;
>         writel(val, ctl_addr);
>
> @@ -327,11 +474,9 @@ static int scpsys_power_off(struct generic_pm_domain *genpd)
>         if (ret < 0)
>                 goto out;
>
> -       for (i = 0; i < MAX_CLKS && scpd->clk[i]; i++)
> -               clk_disable_unprepare(scpd->clk[i]);
> +       scpsys_basic_clk_onoff(scpd, false);
>
> -       if (scpd->supply)
> -               regulator_disable(scpd->supply);
> +       scpsys_regulator_onoff(scpd, false);
>
>         return 0;
>
> @@ -341,6 +486,69 @@ static int scpsys_power_off(struct generic_pm_domain *genpd)
>         return ret;
>  }
>
> +static int init_subsys_clks(struct platform_device *pdev,
> +               const char *prefix, struct clk **clk)
> +{
> +       struct device_node *node = pdev->dev.of_node;
> +       u32 sub_clk_cnt = 0;
> +       u32 prefix_len = 0;
> +       int str_sz = 0;

These last 2 don't need to be initialized to 0.

> +       int clk_idx;
> +       int ret = 0;

No need to initialize to 0.

> +
> +       if (!node) {
> +               dev_err(&pdev->dev, "Cannot find scpsys node: %ld\n",
> +                       PTR_ERR(node));
> +               return PTR_ERR(node);
> +       }
> +
> +       str_sz = of_property_count_strings(node, "clock-names");
> +       if (str_sz < 0) {
> +               dev_err(&pdev->dev, "Cannot get any subsys strings: %d\n",
> +                               str_sz);
> +               return str_sz;
> +       }
> +
> +       prefix_len = strlen(prefix);
> +
> +       for (clk_idx = 0; clk_idx < str_sz; clk_idx++) {
> +               const char *clk_name;
> +
> +               ret = of_property_read_string_index(node, "clock-names",
> +                                       clk_idx, &clk_name);
> +               if (ret < 0) {
> +                       dev_err(&pdev->dev,
> +                                       "Cannot read subsys string[%d]: %d\n",
> +                                       clk_idx, ret);
> +                       return ret;
> +               }
> +
> +               if (!strncmp(clk_name, prefix, prefix_len)
> +                               && (strchr(clk_name + prefix_len, '-')

Shouldn't this just be clk_name[prefix_len] == '-' ? At least that's
how it seems to work right now ("mm" matches "mm-0", "mm-1", etc.)

Also, I'm wondering if this prefix matching approach is best, but I'll
let other people comment.

> +                               != NULL)) {
> +                       if (sub_clk_cnt >= MAX_SUBSYS_CLKS) {
> +                               dev_err(&pdev->dev,
> +                                       "subsys clk out of range %d\n",
> +                                       sub_clk_cnt);
> +                               return -ENOMEM;
> +                       }
> +
> +                       clk[sub_clk_cnt] = devm_clk_get(
> +                                       &pdev->dev, clk_name);
> +
> +                       if (IS_ERR(clk)) {
> +                               dev_err(&pdev->dev,
> +                                       "Subsys clk read fail %ld\n",
> +                                       PTR_ERR(clk));
> +                               return PTR_ERR(clk);
> +                       }
> +                       sub_clk_cnt++;
> +               }
> +       }
> +
> +       return sub_clk_cnt;
> +}
> +
>  static void init_clks(struct platform_device *pdev, struct clk **clk)
>  {
>         int i;
> @@ -396,6 +604,17 @@ static struct scp *init_scp(struct platform_device *pdev,
>                 return ERR_CAST(scp->infracfg);
>         }
>
> +       scp->smi_common = syscon_regmap_lookup_by_phandle(pdev->dev.of_node,
> +                       "smi_comm");
> +
> +       if (scp->smi_common == ERR_PTR(-ENODEV)) {
> +               scp->smi_common = NULL;
> +       } else if (IS_ERR(scp->smi_common)) {
> +               dev_err(&pdev->dev, "Cannot find smi_common controller: %ld\n",
> +                               PTR_ERR(scp->smi_common));
> +               return ERR_CAST(scp->smi_common);
> +       }
> +
>         for (i = 0; i < num; i++) {
>                 struct scp_domain *scpd = &scp->domains[i];
>                 const struct scp_domain_data *data = &scp_domain_data[i];
> @@ -417,22 +636,42 @@ static struct scp *init_scp(struct platform_device *pdev,
>                 struct scp_domain *scpd = &scp->domains[i];
>                 struct generic_pm_domain *genpd = &scpd->genpd;
>                 const struct scp_domain_data *data = &scp_domain_data[i];
> +               int clk_cnt = 0;

No need to init to 0.

>
>                 pd_data->domains[i] = genpd;
>                 scpd->scp = scp;
>
>                 scpd->data = data;
>
> -               for (j = 0; j < MAX_CLKS && data->clk_id[j]; j++) {
> -                       struct clk *c = clk[data->clk_id[j]];
> +               if (data->clk_id[0])
> +                       for (j = 0; j < MAX_CLKS && data->clk_id[j]; j++) {
> +                               struct clk *c = clk[data->clk_id[j]];
> +
> +                               if (IS_ERR(c)) {
> +                                       dev_err(&pdev->dev,
> +                                               "%s: clk unavailable\n",
> +                                               data->name);
> +                                       return ERR_CAST(c);
> +                               }
>
> -                       if (IS_ERR(c)) {
> -                               dev_err(&pdev->dev, "%s: clk unavailable\n",
> +                               scpd->clk[j] = c;
> +                       }
> +               else if (data->basic_clk_name[0])

Please use brackets {} here, makes the code clearer (even though
technically there is only one statement below).

> +                       for (j = 0; j < MAX_CLKS
> +                                       && data->basic_clk_name[j]; j++)
> +                               scpd->clk[j] = devm_clk_get(&pdev->dev,
> +                                               data->basic_clk_name[j]);
> +
> +               if (data->subsys_clk_prefix) {
> +                       clk_cnt = init_subsys_clks(pdev,
> +                                       data->subsys_clk_prefix,
> +                                       scpd->subsys_clk);
> +                       if (clk_cnt < 0) {
> +                               dev_err(&pdev->dev,
> +                                       "%s: subsys clk unavailable\n",
>                                         data->name);
> -                               return ERR_CAST(c);
> +                               return ERR_PTR(clk_cnt);
>                         }
> -
> -                       scpd->clk[j] = c;
>                 }
>
>                 genpd->name = data->name;
> diff --git a/include/linux/soc/mediatek/scpsys-ext.h b/include/linux/soc/mediatek/scpsys-ext.h
> new file mode 100644
> index 000000000000..d0ed295c88a7
> --- /dev/null
> +++ b/include/linux/soc/mediatek/scpsys-ext.h
> @@ -0,0 +1,39 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +#ifndef __SOC_MEDIATEK_SCPSYS_EXT_H
> +#define __SOC_MEDIATEK_SCPSYS_EXT_H
> +
> +#define MAX_STEPS      4
> +
> +#define BUS_PROT(_type, _set_ofs, _clr_ofs,                    \
> +               _en_ofs, _sta_ofs, _mask, _clr_ack_mask) {      \
> +               .type = _type,                                  \
> +               .set_ofs = _set_ofs,                            \
> +               .clr_ofs = _clr_ofs,                            \
> +               .en_ofs = _en_ofs,                              \
> +               .sta_ofs = _sta_ofs,                            \
> +               .mask = _mask,                                  \
> +               .clr_ack_mask = _clr_ack_mask,                  \
> +       }
> +
> +enum regmap_type {
> +       IFR_TYPE,
> +       SMI_TYPE,
> +       MAX_REGMAP_TYPE,
> +};
> +
> +struct bus_prot {
> +       enum regmap_type type;
> +       u32 set_ofs;
> +       u32 clr_ofs;
> +       u32 en_ofs;
> +       u32 sta_ofs;
> +       u32 mask;
> +       u32 clr_ack_mask;
> +};
> +
> +int mtk_scpsys_ext_set_bus_protection(const struct bus_prot *bp_table,
> +       struct regmap *infracfg, struct regmap *smi_common);
> +int mtk_scpsys_ext_clear_bus_protection(const struct bus_prot *bp_table,
> +       struct regmap *infracfg, struct regmap *smi_common);
> +
> +#endif /* __SOC_MEDIATEK_SCPSYS_EXT_H */
> --
> 2.18.0
>
