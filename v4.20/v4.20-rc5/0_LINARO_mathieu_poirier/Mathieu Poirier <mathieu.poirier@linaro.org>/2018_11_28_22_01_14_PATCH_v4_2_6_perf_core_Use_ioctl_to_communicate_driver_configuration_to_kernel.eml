Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:41:25 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E3D7D5803ED;
	Wed, 28 Nov 2018 14:01:28 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 14:01:28 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Arf63uhMCvop2291zpIwl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj+ocbcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Xymp4aV2Rx/ykC?=
 =?us-ascii?q?oJNyA3/nzZhMJzi6xUohyhpwdnw4PWe4yZKOZyc7nBcd4AWWZNQsBcXDFBDIOm?=
 =?us-ascii?q?aIsPCvIMM+FCoInhp1sOrAWxBRSxD+31zT9Ih2X23awk3OQ7DArL2wkgEMgSsH?=
 =?us-ascii?q?TUrdX6KroSXfqtzKnPzDXDdfJW1inn6IXTdhAhoPeMUqhqccrW00UvEBnFjlqJ?=
 =?us-ascii?q?pIHjIjib1fwNvnCF4+Z8Ue+jkXMrpg9vrjS128shiZXFipgUx13G7Sl0wYU4Kc?=
 =?us-ascii?q?elREN0Y9OoCphduzuEO4Z2Tc4vRXxjtjwgxb0co5G7eTAHyJQ5yB7bbPyKa5aI?=
 =?us-ascii?q?4h39W+aLOzt4h2xqeKi5hxms9Uis0Or8VtO70FpSrypFlMfDtmwV2hDN9sSKTu?=
 =?us-ascii?q?Fx8lqv1DqRzQzf9+JJLVwumafaKZMt2rswmYASsUTHEC/2gkL2jKqOe0Ug++io?=
 =?us-ascii?q?7fnnY7r/qp+fKYB0kAf+PboqmsCmBuQ5PA4OUHaB+emnyr3j8lP2QK9Qgv01jK?=
 =?us-ascii?q?bZqpbaKtofpqKjBA9VyIkj5w6lDzi6yNQYgWUHLFVddRKDjojpOE/BLOr3DPei?=
 =?us-ascii?q?mFmslDZrx/bbPrzuGJnNL37DkKv/crZ58UJT1A0zzdVH7ZJOFr4BOO7zWlP2tN?=
 =?us-ascii?q?HADh82KQ20w/r9B9V6zI8eWX+PDbWfMKPdqlKI4uMvI++RZI4aojr9Kv4l5+Lw?=
 =?us-ascii?q?gn89g1MSYa6p3Z4PYnCiAvtmO1mZYWbrgtoZE2cKuRQxQPbpiF2FVz5TYXGyUr?=
 =?us-ascii?q?k45jE6DoKmEIjCSpqsgLyHwCe0AJlWanpaBVCLFHfib5+EVOsUaCKOPs9hlSQJ?=
 =?us-ascii?q?WqK6S48h0hGutxX2y6B9IerW4SAYsZPj1N5o5+zcjx0y9Dp0D9iD3GGJVW17gm?=
 =?us-ascii?q?QIRzou1qBlvUN90kuD0bR/g/FAFtxc/fVJXh0+NZ7d1eN6Dd/yVxnFfteITlam?=
 =?us-ascii?q?X9qnDSswTtI3398BfUJ9F8++gRDE2iqgG6UVmKCTBJwo7qLc2GD8KNtnxHbYyq?=
 =?us-ascii?q?YtlVkmTdFJNW29mKF/8Q/fB4rKk0Wck6anbqAc3C/L9GeewmuCpkBYUAhsUarb?=
 =?us-ascii?q?WXATfFfZrdP85knaVb+hFawnMhddyc6FMqZFd8fmjUtYS/v5ONTReWSxm3yuCh?=
 =?us-ascii?q?aO3b6MaIvqe2MA3CTSEkQEkgYT/WqYOgg6HCuuv2XeDDl2H1L1f0zs6fV+qG+8?=
 =?us-ascii?q?TkIs0wGKbkhh172p+h4Vhf2QUe8T0qgDuCc7rzV0HVC9393NBtqEpgpherhcYN?=
 =?us-ascii?q?wn7FdG02LZqxJyPpi6I69+gV4edhx9v1ny2BVvFoVAjc8qoWswwwp2N62Z301O?=
 =?us-ascii?q?djOC0Z/rJ73YN3P9/Basa67RxFHTy9KW+qYJ6PQlpFTvpgCpFkw+83p519lZyW?=
 =?us-ascii?q?eT5pLPDAAKS5L+Tl439wRmp7HdeiQ8557U2WdwPqWusz7C28gmBO0qyhu7e9df?=
 =?us-ascii?q?MaWEFBL9EsEABsiuLvAqlEatbh4eIO9S86s0Ndu8d/SawK6rIPpgnDW+gGRd4Y?=
 =?us-ascii?q?ByzliD9zBhRe7PxZoFxe+X3hGGVzvlkFiuqMT3lp1aajEIGWq/zzPpBIpQZq10?=
 =?us-ascii?q?YIYKBn2iI8yxxtVimZHtX2RU+0KkB1MDwMWpYwadb0Th3Q1M0kQauXymmSqiwz?=
 =?us-ascii?q?10iT0ptbef3CrVzuTmdRoHPHNLRWZ4gVftJ4i0k84VXEyyYwc1kxul4F7wx7JH?=
 =?us-ascii?q?q6RnM2nTXUBIcjD0L254SKuwtbmCY8lV5JMzqypXU+e8YVGcSrHjpRsXyCfjH2?=
 =?us-ascii?q?pYxDAmeDCmoJT5nxpmiG2DKHZ/tmbWecZ1xR3H/tzTWeZR3iYaRCl/kTTWBkKz?=
 =?us-ascii?q?P96z8dWWlpfDtPuzV2agVp1VbCnqwpmMtCq95W12HxK/m+q/lcHgEQg/ySX7zc?=
 =?us-ascii?q?VlVT3UrBbgZYnmz6e6PvhmfkVyBF/89tB1GodxkoYrgJEQ2H4ahoia/HYdkGfz?=
 =?us-ascii?q?N8lb1rz6bHYXWTELxNvV6hD/2EJ/NnKJ2575VnKFz8tkZtm6YXkZ1jgz7s9UE6?=
 =?us-ascii?q?eU8KJLnTFurVWmtwLRbuNwnjMcyfso9X4bjPsFuAsrziWBHL8SGVNUMjDrlxSN?=
 =?us-ascii?q?99q+trlYZH6zcbis00pzhcyhDLaHog1GWXf2YJEiHTJr7sVkMVLBy3nz6oDieN?=
 =?us-ascii?q?nNYtMfrByUkxHcj+dLLJI9jOYFhS1iOWjlp30q1/Y7jQBy3ZG9pIWIMH9i/KW9?=
 =?us-ascii?q?Ah5FLDH1Y94T9yrpjaZfmMaWwo+uEo9gGjUNQJvnU/aoHCgOuvTgMgaECCc8pW?=
 =?us-ascii?q?uDGbrDAQ+f719rr3DVHJCuKX6XP2MVzcl4SBmeOUxfgx0UXDMgkZ4iDQ2qwM3h?=
 =?us-ascii?q?cEFk5jEe/FL4qx1Myv52OBn7SGvQuACoajIsQpiFMBVW9h1C51vSMcGG7uNzGD?=
 =?us-ascii?q?xY/oS8rAOXLGyXfR9IDWYPWkyLHF3jOriu5d/d8+mXHOa+Lv3OYamQpuxaTfuH?=
 =?us-ascii?q?2ZWv0o5+9TaWKsqPJmViD+E82kdbXXB2BcXZmzYMSywWjS7NbNSbpBCz+iJptM?=
 =?us-ascii?q?C/7e/rVRnr5YuODbtSLNpu9wq3gaeFK+6fmiJ5JSxE2ZMLwH/C0KIf00IKiyFy?=
 =?us-ascii?q?azmtFqwNujTQTK3LgK9YER4aZzl3NMtJ9K882ghNOcjGitL6zLJ4j/g1C0tbWl?=
 =?us-ascii?q?zlgM2mecsKI2SlPlPdGEmLLKiGJSHMw8zvfaO8SLhQgP9IuBGqpTmbE1HsPjKY?=
 =?us-ascii?q?mjntVhCvN/xMjS6BMBxfvoG9bghiCWz5QN36bR27Ncd9jScqzr0smnPKKWkcPC?=
 =?us-ascii?q?B8ckxXqL2Q6CJYgvNnFG1A7npqN++EmymC4uncK5YWt+ZrAytum+Jb5nQ616Va?=
 =?us-ascii?q?7CVeSPNpnyvSq40mn1bzm+KKxxJkXQBIpzINg5iE+Q16NLnU7ItoWHDK5hsB4G?=
 =?us-ascii?q?ycTRMQqJ8tD9zptKd40NXDlKvvbjxF9oH658wZUu3dNMKGPWdpCR3oAj/ZFkNR?=
 =?us-ascii?q?SDe3NWDSmgpFl/CI93CPhpw7rJH2n9wJULANBw99Le8TFkkwRI9KG5xwRD5xyb?=
 =?us-ascii?q?M=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AmAAC/Dv9bh0O0hNFkHQEBBQEHBQGBU?=
 =?us-ascii?q?gcBCwGBWoIRJ4xwiymCIZcugXMSAQEYEwGHbiI1CA0BAwEBAQEBAQIBEwEBAQg?=
 =?us-ascii?q?NCQgpIwyCNiKCZQMDAQIkGQEBNwEFCQEBPhIDMQEFARwHEgWCUUuCAgWbVjyKH?=
 =?us-ascii?q?YFsM4J2AQEFhycIEodZgw+BHIFXP4NuB4sKiRkOhnaQAAcCghwEjxECFolYhz2?=
 =?us-ascii?q?Ido8rAgQCCQIFDyGBJwKCCTMaMIMvghsMFxKITIVfIDKBBQEBixgrgiABAQ?=
X-IPAS-Result: =?us-ascii?q?A0AmAAC/Dv9bh0O0hNFkHQEBBQEHBQGBUgcBCwGBWoIRJ4x?=
 =?us-ascii?q?wiymCIZcugXMSAQEYEwGHbiI1CA0BAwEBAQEBAQIBEwEBAQgNCQgpIwyCNiKCZ?=
 =?us-ascii?q?QMDAQIkGQEBNwEFCQEBPhIDMQEFARwHEgWCUUuCAgWbVjyKHYFsM4J2AQEFhyc?=
 =?us-ascii?q?IEodZgw+BHIFXP4NuB4sKiRkOhnaQAAcCghwEjxECFolYhz2Ido8rAgQCCQIFD?=
 =?us-ascii?q?yGBJwKCCTMaMIMvghsMFxKITIVfIDKBBQEBixgrgiABAQ?=
X-IronPort-AV: E=Sophos;i="5.56,292,1539673200"; 
   d="scan'208";a="53755881"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 14:01:27 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726621AbeK2JE3 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 04:04:29 -0500
Received: from mail-pg1-f196.google.com ([209.85.215.196]:37079 "EHLO
        mail-pg1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726580AbeK2JE2 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 04:04:28 -0500
Received: by mail-pg1-f196.google.com with SMTP id 80so10109966pge.4
        for <linux-kernel@vger.kernel.org>; Wed, 28 Nov 2018 14:01:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=9ArLK6lkyYJGZT2BBz1S2MAD3wdLFqaTbbWFM/1RhoE=;
        b=JvaGhXCakBbgKtMuu7Am5WMIKyL1OD2YnkifjxC6dd5PMwaDyoS43382toposAuZ7F
         7bZkjfvqkB2o70f5BnoJI6GvdJ634Yi8Fc4/P8AXBwzcJbS3j8tj7iZ+iHWsjnoC4he3
         roYh+HXd59ZaRQ7y9WJ64ySRMP0dCOyTh3iZs=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=9ArLK6lkyYJGZT2BBz1S2MAD3wdLFqaTbbWFM/1RhoE=;
        b=I9XfabEI6He3j3r+ZyFGzykPMTiryXwMTPoiAuqs0BcbnWmjpHYtRdtTesNckWeS0J
         22rKkH/kgpcPN/nqMnhE00d39xSvpVh9skeIhawGpP6pAmFhmibjSUT4YpQKQpmiWEBC
         8/r5L3UCvSEyUiyy09t37gS+hLwe6fY4GIBKgo+iLGqVDI3GqlfGMDIe5Uo9eTpCaNhM
         ZpBEk4vGrsotvSUTTWTNMsg8YuA4mKhu3NJ7j7sD+AvZ3Oq2i4bKg6vNhW7x64Bh/aLs
         Yx9z5H4PelSDKvVRc4Y/RGDh5DkRwGv+lrdQDlB4eVqXOujTNKtTld1D6MIOnqtkCAyG
         DLCw==
X-Gm-Message-State: AA+aEWZP73KN6eSzxWT7rPDZFlzfk5aJBraIUt0T3LZ1MI0+KabFQpAq
        Gug0ny/t7vIXJjS6yePdMW9XqA==
X-Google-Smtp-Source: AFSGD/WX8mg2zVz0dQESUQF17S7pzkAkjFnynFmyFVZK1sdqJou+E2d1RI98Ta1GWAPEzibgqwnplg==
X-Received: by 2002:a65:41c2:: with SMTP id b2mr34325372pgq.67.1543442483779;
        Wed, 28 Nov 2018 14:01:23 -0800 (PST)
Received: from xps15.cg.shawcable.net (S0106002369de4dac.cg.shawcable.net. [68.147.8.254])
        by smtp.gmail.com with ESMTPSA id 12sm8698051pgd.35.2018.11.28.14.01.22
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Wed, 28 Nov 2018 14:01:23 -0800 (PST)
From: Mathieu Poirier <mathieu.poirier@linaro.org>
To: acme@kernel.org, peterz@infradead.org, mingo@redhat.com
Cc: tglx@linutronix.de, alexander.shishkin@linux.intel.com,
        schwidefsky@de.ibm.com, heiko.carstens@de.ibm.com,
        will.deacon@arm.com, mark.rutland@arm.com, jolsa@redhat.com,
        namhyung@kernel.org, adrian.hunter@intel.com, ast@kernel.org,
        gregkh@linuxfoundation.org, hpa@zytor.com, suzuki.poulosi@arm.com,
        linux-s390@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org
Subject: [PATCH v4 2/6] perf/core: Use ioctl to communicate driver configuration to kernel
Date: Wed, 28 Nov 2018 15:01:14 -0700
Message-Id: <1543442478-31465-3-git-send-email-mathieu.poirier@linaro.org>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543442478-31465-1-git-send-email-mathieu.poirier@linaro.org>
References: <1543442478-31465-1-git-send-email-mathieu.poirier@linaro.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This patch adds the mechanic needed for user space to send PMU specific
configuration to the kernel driver using an ioctl() command.  That way
events can keep track of options that don't fit in the perf_event_attr
structure like the selection of a CoreSight sink to use for the session.

Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
---
 include/linux/perf_event.h | 38 +++++++++++++++++++++++++
 kernel/events/core.c       | 69 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 107 insertions(+)

diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index 53c500f0ca79..629fa1e1d6cf 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -114,6 +114,14 @@ struct hw_perf_event_extra {
 	int		idx;	/* index in shared_regs->regs[] */
 };
 
+/*
+ * PMU driver configuration
+ */
+struct pmu_drv_config {
+	void		*config;
+	raw_spinlock_t	lock;
+};
+
 /**
  * struct hw_perf_event - performance event hardware details:
  */
@@ -178,6 +186,9 @@ struct hw_perf_event {
 	/* Last sync'ed generation of filters */
 	unsigned long			addr_filters_gen;
 
+	/* PMU driver configuration */
+	struct pmu_drv_config		drv_config;
+
 /*
  * hw_perf_event::state flags; used to track the PERF_EF_* state.
  */
@@ -447,6 +458,17 @@ struct pmu {
 	 * Filter events for PMU-specific reasons.
 	 */
 	int (*filter_match)		(struct perf_event *event); /* optional */
+
+	/*
+	 * Validate complex PMU configuration that don't fit in the
+	 * perf_event_attr struct.  Returns a PMU specific pointer or an error
+	 * value < 0.
+	 *
+	 * As with addr_filters_validate(), runs in the context of the ioctl()
+	 * process and is not serialized with the rest of the PMU callbacks.
+	 */
+	void *(*drv_config_validate)	(struct perf_event *event,
+					 char *config_str);
 };
 
 enum perf_addr_filter_action_t {
@@ -1235,6 +1257,11 @@ static inline bool has_addr_filter(struct perf_event *event)
 	return event->pmu->nr_addr_filters;
 }
 
+static inline bool has_drv_config(struct perf_event *event)
+{
+	return event->pmu->drv_config_validate;
+}
+
 /*
  * An inherited event uses parent's filters
  */
@@ -1249,6 +1276,17 @@ perf_event_addr_filters(struct perf_event *event)
 	return ifh;
 }
 
+static inline struct pmu_drv_config *
+perf_event_get_drv_config(struct perf_event *event)
+{
+	struct pmu_drv_config *cfg = &event->hw.drv_config;
+
+	if (event->parent)
+		cfg = &event->parent->hw.drv_config;
+
+	return cfg;
+}
+
 extern void perf_event_addr_filters_sync(struct perf_event *event);
 
 extern int perf_output_begin(struct perf_output_handle *handle,
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 84530ab358c3..a76c0ce39c4e 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -5003,6 +5003,8 @@ static inline int perf_fget_light(int fd, struct fd *p)
 static int perf_event_set_output(struct perf_event *event,
 				 struct perf_event *output_event);
 static int perf_event_set_filter(struct perf_event *event, void __user *arg);
+static int perf_event_set_drv_config(struct perf_event *event,
+				     void __user *arg);
 static int perf_event_set_bpf_prog(struct perf_event *event, u32 prog_fd);
 static int perf_copy_attr(struct perf_event_attr __user *uattr,
 			  struct perf_event_attr *attr);
@@ -5089,6 +5091,10 @@ static long _perf_ioctl(struct perf_event *event, unsigned int cmd, unsigned lon
 
 		return perf_event_modify_attr(event,  &new_attr);
 	}
+
+	case PERF_EVENT_IOC_SET_DRV_CONFIG:
+		return perf_event_set_drv_config(event, (void __user *)arg);
+
 	default:
 		return -ENOTTY;
 	}
@@ -9128,6 +9134,68 @@ static int perf_event_set_filter(struct perf_event *event, void __user *arg)
 	return ret;
 }
 
+static void perf_drv_config_replace(struct perf_event *event, void *drv_data)
+{
+	unsigned long flags;
+	struct pmu_drv_config *drv_config = &event->hw.drv_config;
+
+	if (!has_drv_config(event))
+		return;
+
+	/* Children take their configuration from their parent */
+	if (event->parent)
+		return;
+
+	/* Make sure the PMU doesn't get a handle on the data */
+	raw_spin_lock_irqsave(&drv_config->lock, flags);
+	drv_config->config = drv_data;
+	raw_spin_unlock_irqrestore(&drv_config->lock, flags);
+}
+
+static int
+perf_event_process_drv_config(struct perf_event *event, char *config_str)
+{
+	int ret = -EINVAL;
+	void *drv_data;
+
+	/* Make sure ctx.mutex is held */
+	lockdep_assert_held(&event->ctx->mutex);
+
+	/* Children take their configuration from their parent */
+	if (WARN_ON_ONCE(event->parent))
+		goto out;
+
+	drv_data = event->pmu->drv_config_validate(event, config_str);
+	if (IS_ERR(drv_data)) {
+		ret = PTR_ERR(drv_data);
+		goto out;
+	}
+
+	perf_drv_config_replace(event, drv_data);
+
+	ret = 0;
+out:
+	return ret;
+}
+
+static int perf_event_set_drv_config(struct perf_event *event, void __user *arg)
+{
+	int ret = -EINVAL;
+	char *config_str;
+
+	if (!has_drv_config(event))
+		return ret;
+
+	config_str = strndup_user(arg, PAGE_SIZE);
+	if (IS_ERR(config_str))
+		return PTR_ERR(config_str);
+
+	ret = perf_event_process_drv_config(event, config_str);
+
+	kfree(config_str);
+	return ret;
+}
+
 /*
  * hrtimer based swevent callback
  */
@@ -10052,6 +10120,7 @@ perf_event_alloc(struct perf_event_attr *attr, int cpu,
 	if (attr->freq && attr->sample_freq)
 		hwc->sample_period = 1;
 	hwc->last_period = hwc->sample_period;
+	raw_spin_lock_init(&hwc->drv_config.lock);
 
 	local64_set(&hwc->period_left, hwc->sample_period);
 
-- 
2.7.4

