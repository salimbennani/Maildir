Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 27 Nov 2018 19:19:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga007.jf.intel.com (orsmga007.jf.intel.com [10.7.209.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 122E05802E4;
	Tue, 27 Nov 2018 02:18:31 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga007-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 02:18:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AG6KbFRZkkb4YvhWzqojnOTn/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm5Yx7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM38H/ZhNF+gqxYpxyupRJ/w5XMYIyXL/dyYr/RcMkGSWdbQspdSypMCZ68?=
 =?us-ascii?q?YYsVCOoBOP5VoIb8p1sQsxS+BhSnCuL1xT9Vmn/5x6g62PkmHAHY3QwgAcwBsH?=
 =?us-ascii?q?fOoNX6LqgSTPy1w7PNzTjYc/xW3iry55bSfRA8u/GMWqhwftDLxUkoDQPFgUyd?=
 =?us-ascii?q?pIr4ND2WzuQAq3aX4/ZkWO61lmIqpR99riKyysovloXFnIMYx1Lc+Slk3Io4K8?=
 =?us-ascii?q?e0RFBlbdOgCpdcqiKXO5FrTs4mRWxjpTw0xaccuZGheSgH0JQnyADba/yAa4WI?=
 =?us-ascii?q?/B3jW/iLITtih3JqZqi/hxCs/kik0OH8UdO00FlSoipElNnDqGwN2gTN5sSbTv?=
 =?us-ascii?q?Zx5Fqt1DiR2wzJ9+1JIlw4mbDaJpMj2rIwk4AcsUXHHi/4gkX2i6qWe10g+uip?=
 =?us-ascii?q?7eTnf7rnqoafN4BqkAH+NLohmsimDeQ/PAkOWXaU+f6n2b398k32Xq9Kguc1kq?=
 =?us-ascii?q?bHqpDaI9oUpqqjDw9SyIYj5A6zDy2639QAgXkHMFVFdQqDj4joOFHBPur0DPii?=
 =?us-ascii?q?g1m3lDdrxvbGPqDuA5nXL3jDlqvhcqh560JG1AUzytVf7YpOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAx85KQO0wvrnB8961o8EWWKPH7WWMKXdsVKT4uIvIu+MZJIauTrnKvgl4eLu?=
 =?us-ascii?q?gmE9mVMHYaap2p4XYmiiHvt6O0WZfWbsgtAZHGcIuQoxUvbmiF6FUT5VYXayWL?=
 =?us-ascii?q?kx5jU6CIKgEIfCSZqhgL2H3CenAJJWYnpKBUyLEXftb4+EQesDaDqOIs99lTwJ?=
 =?us-ascii?q?TaKuS5Qh1RGptw/20aBnIfDW+iADsZLj1d515/DclB0o9Dx0Cdid3H+JT21ugm?=
 =?us-ascii?q?wIQDo21rhloUNh0leDzbR4g/tAGNxQ/fxJVB02NZrdz+NgDdDyVRnMftOISFag?=
 =?us-ascii?q?X9WnDis9TtM3w98SfUl9H8+ugQzE3yqvG7UVjaCEBIQo8qLA2Hj8P9tyxGzY1K?=
 =?us-ascii?q?Y/lVUmQtFANWu9hqFh8QjfAIrJk0acl6aubqkc2C/N9GGezWuBpk1YUQhwUbnb?=
 =?us-ascii?q?UnAbfEfZsdP55kbaRb+0FbsnKhdBydKFKqZSd9Lml0tGS+n5NNTeeW2xnXywCg?=
 =?us-ascii?q?iOxr6XaIrqemMd3DjSCUQekgAT+2qGOhY6Biu7v23eCzluH0r1Y0zw6el+tG+7?=
 =?us-ascii?q?TkgswgGWbk1h0r21+gIVhf2cUf8TwqgIuCA7qzVwHVa92d3WBsGEpwpgeqVcfN?=
 =?us-ascii?q?w87E1G1WLfqwxyIJigI7p+iV4ZdgR9p1nu2AlvCoVcjcgqq2snwxB2Ka2G31JO?=
 =?us-ascii?q?aTOZ0YrrNb3KN2b95hava63R2lHAy9uW/qYP6PIlq1Tspg2pF0wi82l53NlRyX?=
 =?us-ascii?q?eT+pLKDA8KW5LrTkk37wR6p63dYiQl54LUyGdgPrWuvj7D29ImHu0lyhm7ctdb?=
 =?us-ascii?q?MaOEEhLyEsIAC8ivLuwqh0ambhYeMO9O8640Otusd+Ga166zIOZggDWmgHxd4I?=
 =?us-ascii?q?B8zk2D7TB8RfPP35ofxfGXwBGHVzblgFi9qM/3nZ1Lai8IHmq4zyjpH4pRZqx0?=
 =?us-ascii?q?fYYWBmaiOcy3xtNih5HzX35U7kKsB1QD2MWxYxqdc0T93RFM1UQQuXGmmSq4wy?=
 =?us-ascii?q?Z0kj0ztaqfwSrOzv/mdBoGPG5LWWZjgU3tIYiyk9AVQkyoYxI1mxui4Ebw37Jb?=
 =?us-ascii?q?q7hnL2nPXUdIeDD7L2N4XauqtbqCYMlP5IkzsSpNU+S8YlGaSrjjrBscyC7jG2?=
 =?us-ascii?q?pexDYmdzCloJn5nhp6iH6DI3Z3tnbWZcZwxRLH7tzGWfFRxiYGRDV/iTTPBlmz?=
 =?us-ascii?q?Jd6p8c+Wl5fCtOCzTGahVpxVcSn2woKMriq75Wt2ARKhm/C/gMHoEQ8/0SXjzd?=
 =?us-ascii?q?llST3IrArgYonsz6m6MvhofkhyCF/89sp1AId+koQriZEU2HgagIiV/HUdnWfy?=
 =?us-ascii?q?N9VbxbzxbH4XSTEXxN7V5RDv2Fd/IXKR24L5SnKdz9NkZ9m7YWMZwDgx7s5UB6?=
 =?us-ascii?q?eP8LxLgzF1rUGmogLLbvhwhTMdyfoo6H4HjOAFogstziOBAr8MGUlUJzDjlxON?=
 =?us-ascii?q?79qmtqVYeH6vcaSs1Ep5hd2hELaCogRGVHf4YJgiGzJw7t5kMFLNy3Dz7oDkeN?=
 =?us-ascii?q?/NbdMcrBGUkhHAj/RLJ5I1jPYFmS1nOWflt30/1+E7lQBu3Y29vIWfMGpi5qW5?=
 =?us-ascii?q?AhpFNjHvY8MT5yrgjaJfnsaQwoCuEY9tGjQNXJv0U/2oFCgeuujgNwaLCDc8sG?=
 =?us-ascii?q?uUGaLDHQ+D70drt3DPHIquN36JP3kV18liSAOeJExCgwAUQTM6kYQiFg2xwMzh?=
 =?us-ascii?q?cUF55i0e51LiqxtMzP5oOAf7UmvFuAiobTI0QoCFLBVK9gFC+1vVMcuG4+NzGC?=
 =?us-ascii?q?FY44ShrBGXJWydfQhIFmYJWkqLB134Ormu5N/A8/WXB+akLvvOZ6mOpvJaV/uS?=
 =?us-ascii?q?2Z2v1Y5m9S6WNsqTJnliE+E72k1bUHB5BcvZmjYPSy8Wly7XbM6bvhC8+iJpoc?=
 =?us-ascii?q?Cl7fTrQxni5Y+OC7tULNVu9Aq6gaaFN+6Mmil5LSxU2Y8LxX/N0LIfxkIdizly?=
 =?us-ascii?q?dzmxFrQNrTTCTL/Lla9NEREaazl/NM9J768n2glNOMjbis7617Jij/41DUtFWk?=
 =?us-ascii?q?Llms2zecMKJGS9PkvdBEmXLLSGOSHLw8bvbKOgSL1Qif9YuAGqtTmHE0/sIDKD?=
 =?us-ascii?q?miLtVxCuN+FMkS6aMAZfuIG7bhZiF2zjQMj6ZR28Nd99lSc2zqEshnPWKW4cNi?=
 =?us-ascii?q?BxckNXob2W6CNYg/N/FHRA73plN+aEnSmZ4vLcKpYXt/trHyt1m/hb4HQ817ta?=
 =?us-ascii?q?8iVESOZplyvVq949622hx+uI0D1PABBftjtQwoWRsgEqI6LT9tpMRV7H8QgL4G?=
 =?us-ascii?q?HWDA4F45N/DdfuveZV18LXlLPbIS1HtdnT+I9UGMnQLISLPXMqNhzBESTRSgAC?=
 =?us-ascii?q?SHrjNGbaglF1lPCJ6mbTqpk8t4iplp0TTLNSSF0yELUdEEshVNAPPpZ8Uy8+nL?=
 =?us-ascii?q?OzksEF/zy9oQPXScEcuYrIBdyIBvC6FjeHgLoMSBIV3br9ZdANN5P22AptY0Rm?=
 =?us-ascii?q?lYHiEE3cUNlQuCp7Z0kzukoboys2dXE6x0+wMlDl23QUD/PhxhM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0DiAAC9Gf1bh0O0hNFOFoIXggGBayeMc?=
 =?us-ascii?q?I00FJcsgXMUGBMBiHIiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmUDAwE?=
 =?us-ascii?q?CJBkBATcBBQkBAR8WGwMpKwcKCAWDHIIBAQWkQIFsM4J2AQEFhywIh2KDD4Ecg?=
 =?us-ascii?q?Vc/gRGHUCeFd4kFhxOPMEYHAoIcBI8FI4lShzksgk2VPoFGgg0zGjCDL4InFxK?=
 =?us-ascii?q?ITIVHODKBBQEBjWoBAQ?=
X-IPAS-Result: =?us-ascii?q?A0DiAAC9Gf1bh0O0hNFOFoIXggGBayeMcI00FJcsgXMUGBM?=
 =?us-ascii?q?BiHIiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYigmUDAwECJBkBATcBBQkBA?=
 =?us-ascii?q?R8WGwMpKwcKCAWDHIIBAQWkQIFsM4J2AQEFhywIh2KDD4EcgVc/gRGHUCeFd4k?=
 =?us-ascii?q?FhxOPMEYHAoIcBI8FI4lShzksgk2VPoFGgg0zGjCDL4InFxKITIVHODKBBQEBj?=
 =?us-ascii?q?WoBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,286,1539673200"; 
   d="scan'208";a="53475391"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 02:18:25 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730657AbeK0VJo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 16:09:44 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:53404 "EHLO
        smtp.codeaurora.org" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730329AbeK0VJn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 16:09:43 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
        id 4DE596143C; Tue, 27 Nov 2018 10:12:17 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543313539;
        bh=1LnbsREdQIHGDodCqSeS2XIFZ8gvU/BMdYYK0rziX74=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=K0dnAHOPMxuOaH/1q/ldK6WUeDRjDsXLUHeI+hpZcaAOxN+boC2R5fDzd2Pc1JGYB
         vMxuLlk8A5RjYARK41VKvH+3UuZm3764MvnNAnthI53vMq0bIgEQddxoEFwyeimWVH
         a6MViPu3aKRHRseLj1o2s6gpp20FwOfJfYtuuH5U=
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
        pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
        DKIM_INVALID,DKIM_SIGNED autolearn=no autolearn_force=no version=3.4.0
Received: from blr-ubuntu-41.ap.qualcomm.com (blr-bdr-fw-01_globalnat_allzones-outside.qualcomm.com [103.229.18.19])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: vivek.gautam@smtp.codeaurora.org)
        by smtp.codeaurora.org (Postfix) with ESMTPSA id DDA4B60C48;
        Tue, 27 Nov 2018 10:12:09 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
        s=default; t=1543313535;
        bh=1LnbsREdQIHGDodCqSeS2XIFZ8gvU/BMdYYK0rziX74=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=AyDW52QZ4m1oYfOs3MYobSroCiSULBXk1O9tn3p04LefHWXNqE0zXEJ/lWvJaxuQc
         b57cigrhqsoLPsEe14EK/hBUVaV2pni7uDFO+PfnDP3izz/RCY3uu044vwMTrRShOR
         FLgpUbdnRX9veDVp4riy2uhsYb9QmLeiRzATh/Ns=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org DDA4B60C48
Authentication-Results: pdx-caf-mail.web.codeaurora.org; dmarc=none (p=none dis=none) header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org; spf=none smtp.mailfrom=vivek.gautam@codeaurora.org
From: Vivek Gautam <vivek.gautam@codeaurora.org>
To: joro@8bytes.org, robh+dt@kernel.org, robin.murphy@arm.com,
        will.deacon@arm.com, iommu@lists.linux-foundation.org,
        devicetree@vger.kernel.org
Cc: alex.williamson@redhat.com, mark.rutland@arm.com,
        rjw@rjwysocki.net, robdclark@gmail.com,
        linux-kernel@vger.kernel.org, linux-pm@vger.kernel.org,
        freedreno@lists.freedesktop.org, sboyd@kernel.org,
        tfiga@chromium.org, jcrouse@codeaurora.org,
        sricharan@codeaurora.org, m.szyprowski@samsung.com,
        architt@codeaurora.org, linux-arm-msm@vger.kernel.org,
        thor.thayer@linux.intel.com,
        Vivek Gautam <vivek.gautam@codeaurora.org>
Subject: [PATCH v18 2/5] iommu/arm-smmu: Invoke pm_runtime during probe, add/remove device
Date: Tue, 27 Nov 2018 15:41:42 +0530
Message-Id: <20181127101145.7682-3-vivek.gautam@codeaurora.org>
X-Mailer: git-send-email 2.16.1.72.g5be1f00a9a70
In-Reply-To: <20181127101145.7682-1-vivek.gautam@codeaurora.org>
References: <20181127101145.7682-1-vivek.gautam@codeaurora.org>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Sricharan R <sricharan@codeaurora.org>

The smmu device probe/remove and add/remove master device callbacks
gets called when the smmu is not linked to its master, that is without
the context of the master device. So calling runtime apis in those places
separately.
Global locks are also initialized before enabling runtime pm as the
runtime_resume() calls device_reset() which does tlb_sync_global()
that ultimately requires locks to be initialized.

Signed-off-by: Sricharan R <sricharan@codeaurora.org>
[vivek: Cleanup pm runtime calls]
Signed-off-by: Vivek Gautam <vivek.gautam@codeaurora.org>
Reviewed-by: Tomasz Figa <tfiga@chromium.org>
Tested-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Reviewed-by: Robin Murphy <robin.murphy@arm.com>
---
 drivers/iommu/arm-smmu.c | 108 ++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 98 insertions(+), 10 deletions(-)

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index e47c840fc6a8..5610cc736f9d 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -271,6 +271,20 @@ static struct arm_smmu_option_prop arm_smmu_options[] = {
 	{ 0, NULL},
 };
 
+static inline int arm_smmu_rpm_get(struct arm_smmu_device *smmu)
+{
+	if (pm_runtime_enabled(smmu->dev))
+		return pm_runtime_get_sync(smmu->dev);
+
+	return 0;
+}
+
+static inline void arm_smmu_rpm_put(struct arm_smmu_device *smmu)
+{
+	if (pm_runtime_enabled(smmu->dev))
+		pm_runtime_put(smmu->dev);
+}
+
 static struct arm_smmu_domain *to_smmu_domain(struct iommu_domain *dom)
 {
 	return container_of(dom, struct arm_smmu_domain, domain);
@@ -930,11 +944,15 @@ static void arm_smmu_destroy_domain_context(struct iommu_domain *domain)
 	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);
 	struct arm_smmu_device *smmu = smmu_domain->smmu;
 	struct arm_smmu_cfg *cfg = &smmu_domain->cfg;
-	int irq;
+	int ret, irq;
 
 	if (!smmu || domain->type == IOMMU_DOMAIN_IDENTITY)
 		return;
 
+	ret = arm_smmu_rpm_get(smmu);
+	if (ret < 0)
+		return;
+
 	/*
 	 * Disable the context bank and free the page tables before freeing
 	 * it.
@@ -949,6 +967,8 @@ static void arm_smmu_destroy_domain_context(struct iommu_domain *domain)
 
 	free_io_pgtable_ops(smmu_domain->pgtbl_ops);
 	__arm_smmu_free_bitmap(smmu->context_map, cfg->cbndx);
+
+	arm_smmu_rpm_put(smmu);
 }
 
 static struct iommu_domain *arm_smmu_domain_alloc(unsigned type)
@@ -1230,10 +1250,15 @@ static int arm_smmu_attach_dev(struct iommu_domain *domain, struct device *dev)
 		return -ENODEV;
 
 	smmu = fwspec_smmu(fwspec);
+
+	ret = arm_smmu_rpm_get(smmu);
+	if (ret < 0)
+		return ret;
+
 	/* Ensure that the domain is finalised */
 	ret = arm_smmu_init_domain_context(domain, smmu);
 	if (ret < 0)
-		return ret;
+		goto rpm_put;
 
 	/*
 	 * Sanity check the domain. We don't support domains across
@@ -1243,49 +1268,74 @@ static int arm_smmu_attach_dev(struct iommu_domain *domain, struct device *dev)
 		dev_err(dev,
 			"cannot attach to SMMU %s whilst already attached to domain on SMMU %s\n",
 			dev_name(smmu_domain->smmu->dev), dev_name(smmu->dev));
-		return -EINVAL;
+		ret = -EINVAL;
+		goto rpm_put;
 	}
 
 	/* Looks ok, so add the device to the domain */
-	return arm_smmu_domain_add_master(smmu_domain, fwspec);
+	ret = arm_smmu_domain_add_master(smmu_domain, fwspec);
+
+rpm_put:
+	arm_smmu_rpm_put(smmu);
+	return ret;
 }
 
 static int arm_smmu_map(struct iommu_domain *domain, unsigned long iova,
 			phys_addr_t paddr, size_t size, int prot)
 {
 	struct io_pgtable_ops *ops = to_smmu_domain(domain)->pgtbl_ops;
+	struct arm_smmu_device *smmu = to_smmu_domain(domain)->smmu;
+	int ret;
 
 	if (!ops)
 		return -ENODEV;
 
-	return ops->map(ops, iova, paddr, size, prot);
+	arm_smmu_rpm_get(smmu);
+	ret = ops->map(ops, iova, paddr, size, prot);
+	arm_smmu_rpm_put(smmu);
+
+	return ret;
 }
 
 static size_t arm_smmu_unmap(struct iommu_domain *domain, unsigned long iova,
 			     size_t size)
 {
 	struct io_pgtable_ops *ops = to_smmu_domain(domain)->pgtbl_ops;
+	struct arm_smmu_device *smmu = to_smmu_domain(domain)->smmu;
+	size_t ret;
 
 	if (!ops)
 		return 0;
 
-	return ops->unmap(ops, iova, size);
+	arm_smmu_rpm_get(smmu);
+	ret = ops->unmap(ops, iova, size);
+	arm_smmu_rpm_put(smmu);
+
+	return ret;
 }
 
 static void arm_smmu_flush_iotlb_all(struct iommu_domain *domain)
 {
 	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);
+	struct arm_smmu_device *smmu = smmu_domain->smmu;
 
-	if (smmu_domain->tlb_ops)
+	if (smmu_domain->tlb_ops) {
+		arm_smmu_rpm_get(smmu);
 		smmu_domain->tlb_ops->tlb_flush_all(smmu_domain);
+		arm_smmu_rpm_put(smmu);
+	}
 }
 
 static void arm_smmu_iotlb_sync(struct iommu_domain *domain)
 {
 	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);
+	struct arm_smmu_device *smmu = smmu_domain->smmu;
 
-	if (smmu_domain->tlb_ops)
+	if (smmu_domain->tlb_ops) {
+		arm_smmu_rpm_get(smmu);
 		smmu_domain->tlb_ops->tlb_sync(smmu_domain);
+		arm_smmu_rpm_put(smmu);
+	}
 }
 
 static phys_addr_t arm_smmu_iova_to_phys_hard(struct iommu_domain *domain,
@@ -1300,6 +1350,11 @@ static phys_addr_t arm_smmu_iova_to_phys_hard(struct iommu_domain *domain,
 	u32 tmp;
 	u64 phys;
 	unsigned long va, flags;
+	int ret;
+
+	ret = arm_smmu_rpm_get(smmu);
+	if (ret < 0)
+		return 0;
 
 	cb_base = ARM_SMMU_CB(smmu, cfg->cbndx);
 
@@ -1328,6 +1383,8 @@ static phys_addr_t arm_smmu_iova_to_phys_hard(struct iommu_domain *domain,
 		return 0;
 	}
 
+	arm_smmu_rpm_put(smmu);
+
 	return (phys & GENMASK_ULL(39, 12)) | (iova & 0xfff);
 }
 
@@ -1432,7 +1489,13 @@ static int arm_smmu_add_device(struct device *dev)
 	while (i--)
 		cfg->smendx[i] = INVALID_SMENDX;
 
+	ret = arm_smmu_rpm_get(smmu);
+	if (ret < 0)
+		goto out_cfg_free;
+
 	ret = arm_smmu_master_alloc_smes(dev);
+	arm_smmu_rpm_put(smmu);
+
 	if (ret)
 		goto out_cfg_free;
 
@@ -1452,7 +1515,7 @@ static void arm_smmu_remove_device(struct device *dev)
 	struct iommu_fwspec *fwspec = dev->iommu_fwspec;
 	struct arm_smmu_master_cfg *cfg;
 	struct arm_smmu_device *smmu;
-
+	int ret;
 
 	if (!fwspec || fwspec->ops != &arm_smmu_ops)
 		return;
@@ -1460,8 +1523,15 @@ static void arm_smmu_remove_device(struct device *dev)
 	cfg  = fwspec->iommu_priv;
 	smmu = cfg->smmu;
 
+	ret = arm_smmu_rpm_get(smmu);
+	if (ret < 0)
+		return;
+
 	iommu_device_unlink(&smmu->iommu, dev);
 	arm_smmu_master_free_smes(fwspec);
+
+	arm_smmu_rpm_put(smmu);
+
 	iommu_group_remove_device(dev);
 	kfree(fwspec->iommu_priv);
 	iommu_fwspec_free(dev);
@@ -2255,6 +2325,17 @@ static int arm_smmu_device_probe(struct platform_device *pdev)
 	arm_smmu_device_reset(smmu);
 	arm_smmu_test_smr_masks(smmu);
 
+	/*
+	 * We want to avoid touching dev->power.lock in fastpaths unless
+	 * it's really going to do something useful - pm_runtime_enabled()
+	 * can serve as an ideal proxy for that decision. So, conditionally
+	 * enable pm_runtime.
+	 */
+	if (dev->pm_domain) {
+		pm_runtime_set_active(dev);
+		pm_runtime_enable(dev);
+	}
+
 	/*
 	 * For ACPI and generic DT bindings, an SMMU will be probed before
 	 * any device which might need it, so we want the bus ops in place
@@ -2290,10 +2371,17 @@ static int arm_smmu_device_remove(struct platform_device *pdev)
 	if (!bitmap_empty(smmu->context_map, ARM_SMMU_MAX_CBS))
 		dev_err(&pdev->dev, "removing device with active domains!\n");
 
+	arm_smmu_rpm_get(smmu);
 	/* Turn the thing off */
 	writel(sCR0_CLIENTPD, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);
+	arm_smmu_rpm_put(smmu);
+
+	if (pm_runtime_enabled(smmu->dev))
+		pm_runtime_force_suspend(smmu->dev);
+	else
+		clk_bulk_disable(smmu->num_clks, smmu->clks);
 
-	clk_bulk_disable_unprepare(smmu->num_clks, smmu->clks);
+	clk_bulk_unprepare(smmu->num_clks, smmu->clks);
 
 	return 0;
 }
-- 
QUALCOMM INDIA, on behalf of Qualcomm Innovation Center, Inc. is a member
of Code Aurora Forum, hosted by The Linux Foundation

