Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:17:22 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga008.fm.intel.com (fmsmga008.fm.intel.com [10.253.24.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 45477580213;
	Fri, 30 Nov 2018 04:24:07 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by fmsmga008-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 04:24:07 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AfWzOghErxyu0akgFT8Ojgp1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75oc29bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJSiJPHI28?=
 =?us-ascii?q?YYsMAeQPM+lXoIvyqEcBoxulHQmhBvjiyiNLi3LswaE2z+osHAPA0Qc9H9wOqn?=
 =?us-ascii?q?PUrNDtOaoMUeC11qjIzS7fb/NXwzj97pXDfRMgofGDWrJwbcvQyUovFgjYiVif?=
 =?us-ascii?q?tYzlPjKU1uQCtGib8+thVeGvimM8pAB+vD6vxsA3ionOiIIV1krI+jhnz4ssI9?=
 =?us-ascii?q?CzVUB1YdmhEJRKtiGaMZN7QsA8TGFyviY11LkGtYS8fCgQx5Qr3x/fa/qJc4iS?=
 =?us-ascii?q?+B3sSfieLi1li35/f7K/nRmy/VCnyuz9Usm7yk1FrjFfntnLrHAN2Bre4dWERP?=
 =?us-ascii?q?tl5kqtxyqD2gTJ5u1ZL004i7DXJ4Miz7IsjJYesEbOEjfolErskKOaaEAp9+u1?=
 =?us-ascii?q?5+j7Zrjro4WTOoBohg3iN6kih82yDfokPQULQmSW+uax2bzm8EHnXrpFlOA6n6?=
 =?us-ascii?q?zXsJ3YPssWqKu0DxFW34sn9hmyCSqt3s4CknkdNl1FfQqKj4j3NFHKJ/D1Fem/?=
 =?us-ascii?q?g1uynzdx3fzGPaPuAo/LLnfdlLftZ7F961RTyAYrzNBf4YxbCq0ZLf7tRkP8sM?=
 =?us-ascii?q?bUAgI3PgCq2errFdZw2p8EVW+OAKKVKKbSvkWJ5uIrLemMfogVuDPlJvgh5v7u?=
 =?us-ascii?q?i2I5mFAEcamqw5QXcna4EepiI0mAZnrtjNEBHnkQvgclUuzqh0ONUSRJa3axQa?=
 =?us-ascii?q?08/Dc7B5yiDYvZQYCtmrOB0D+hHpJKfmBGFkyMEXDweoWAWvcMazydLtVukzwZ?=
 =?us-ascii?q?TrWhT44h1ReztA710bZnL+zU+jEGupLnztR6++rTlRQq/zxuE8udy32NT31znm?=
 =?us-ascii?q?4QRz85xqF/oVBnxVeEy6R4g+FYGsZV5/NGSQo6MZ/cz+pnC9H9QA7Bf9GJSEq4?=
 =?us-ascii?q?TdWiGz0+UtUxw9oWaUZnB9qilgzD3zatA7INlbyLA4I7/rjf33j2IcZ9zXHG2b?=
 =?us-ascii?q?Ilj1knRMtPKGKnirR+9wjVG47GjUGZm7y2eqQb2S7H7H2DwnaWvEFETA5wVr3I?=
 =?us-ascii?q?UmoEZkvWqtT55VnOT6W0BrQlKQZBzc+CKq1Xatzml1lGRfHjOMjAbGK1gWu/GR?=
 =?us-ascii?q?GIxraUZorwZ2odxDndCFQDkw0L/naJLw4+Cj2lo2LfFjNuE13vbljo8el/rnO7?=
 =?us-ascii?q?U0A1wxuLb01ny7q65BoVieaARPMU27IOoD0hpClsHFahw9LWDMKNqBd7c6VCf9?=
 =?us-ascii?q?wx+ldH2njftwxmIJOgKaduhlodcwRyu0PjzBF3CoRGkcg3o3Im1gtyKaSE0Fxf?=
 =?us-ascii?q?czOUx4z/OrrSKmPq5hCgd7bW2k3C0NaR4qoA9e43q0v9sw2zFkot6XNn08JL3H?=
 =?us-ascii?q?ua/ZjKCAsSUZTsUkc47RR6prfaYjUj6IPQz3FjLa60sjra0dIzGOQl0gqgf8tY?=
 =?us-ascii?q?MK6cCA/yEsgaB8+yKOwqm1mldA4EMPpV9K4uO8Omdv2G2KGwMeZknTKmi3lH4Y?=
 =?us-ascii?q?9n3kKN8Sp8VvDH35Ifz/6E2QuHUi/2jE29vcDvhYBEeTYSE3KlxijgGoFQabN9?=
 =?us-ascii?q?fIYRBWi1Ps24289xh5juW35f6l6uHFcG2M6veRqPYF3xxwxQ1UILoXO5nSu01S?=
 =?us-ascii?q?B7kzYsrqCHxizB3/zidAYbOm5MXGRjjUrsLZKogNwAXUmobxImlB2q5Uvhw6hb?=
 =?us-ascii?q?paJ/L3TcQEtSfij2KX1iXbW0traYf8FP75Youz1NUOugeVCaVqL9oxwC3iP5Hm?=
 =?us-ascii?q?tR2Co0dyu3tZX+hRB6jnySLGxyrHbAZc5/3xPf68HCSv5L2ToGQjJ1iT3WBli6?=
 =?us-ascii?q?Itmo8s+Yl5bFsuCiSW2hUodffjXszYOFrCG7/3FlAQWjn/Cvnd3qCQg70S7h29?=
 =?us-ascii?q?hqTynItwv8Yo/w2qS+MOJneFRoBVDm58p7HIF+jpU/hJUK1XcGgZWV+GINkX3v?=
 =?us-ascii?q?PtVDxaL+cH0NSCYJw9HP+gjl205jLnWTy4LiTHqdwchhZ9i8YmwI3CIw9MRKCK?=
 =?us-ascii?q?aS7LxZkip5uFu4rQTNYfdjmjcR0+ch6Hkfg+sRogoi0j2dAqwOHUlfJSHtlw6H?=
 =?us-ascii?q?79ekoKVVZWavd6O91E5/ndCnEbGDrRtQWHf/epc+AyBw6t9zP07L0H328ovkYs?=
 =?us-ascii?q?XfbcoPth2IlBfNl+tVJ4gwlvYQhSpnJHjyvXsqy+MgiRxu3Je6vJWIKml3/aK5?=
 =?us-ascii?q?BAJYOSPxZ88J5j7tiqNelN6M34+zBpVhBikLXJzwQPKtETIStu7oOxyAETIisX?=
 =?us-ascii?q?ebBaTQHRWE50h4tXLPHIumN3WWJHkf0NVjSwORJE1ZgAAIQjo6moQ1GRytxMzk?=
 =?us-ascii?q?aE15/Cwe5kbkqhtQzeJlLwX/UmDapAuyazY7Up6fLAdN7gFZ5kfYKsie7uN1Hy?=
 =?us-ascii?q?FF8Zyttg2NKmqHZwtWCWEFQFCLB1fmPrO2/9nP7/CYBvaiL/vJebiBsvZRV/CM?=
 =?us-ascii?q?xZKyyIdm+yuMO96LPnljCf07x0VCUWp4G8TfhzUAVSgXmzjRYM6coRe24jd3od?=
 =?us-ascii?q?yn8PT3RALv4pOCC7lIPtVq5R+2mr2PN/KKiCZ6NDZY1Y4MxXnSx7gEx1MSjyBu?=
 =?us-ascii?q?dz+wEbUPryLNTaTQmrNJAB4fcS98KMxI76ck1AlXJcHbks/11qJ/jvMtC1ZFUk?=
 =?us-ascii?q?Hhmti0ZcMQJWGxLkjHBEGNNLSJPjDLx8D3YaWhSbxflulUthuwuSqFHE/nJDiM?=
 =?us-ascii?q?iz7pVxW3O+FWkC6bJABeuJ26cht1CWjsUtPmah64MN92lzE2wqc0hnTFNWECKz?=
 =?us-ascii?q?h8blhNo6aU7SNZhPV/BmNA4mBkLemChyaW8e3YJowKvvtsByR+j/ha72giy7tJ?=
 =?us-ascii?q?8CFEQ+R4lzHPrtF1uVGpjOmOxiBjUBpPsTtLgIOLvUN/OaTW7JVAWHDE/A4T4m?=
 =?us-ascii?q?WUERgFu9xlCtj3saBK1tfPjL7zKCtF89/M4cscBs3UJNibP3Y7LRXpGCDbDA0e?=
 =?us-ascii?q?QD6vNGHfgVFdkf6I+n2UqJg6tobjmJ4URrBHU1w1E+sQCl55E9waPJd3QjQknK?=
 =?us-ascii?q?abjcES43q+qRjRRMNCsZHGVvKdG/PvKDmCgLlAZhsIx674LIsJOo363Uxidkd1?=
 =?us-ascii?q?nIDQF0XMWtBNp34pUghhi0VX8WNiSXUzk2Lobgey4XBbQf6/njYykRc4bel7px?=
 =?us-ascii?q?n25FJiDVrQpTAskUA30efkjjeNYj3gZPO7XZNXBC3opUsgGoP2RQFuagOu20Bp?=
 =?us-ascii?q?YmSXD4lNhqdtIDg4wDTXvoFCTLsFFfVJ?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AuAQCBKwFch0O0hNFjH4F4gTGBOYECJ?=
 =?us-ascii?q?4N5lCCBYC0UlzSBdhEYDwQBh3UiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjY?=
 =?us-ascii?q?kAYJiAQIDAQIgBAsBBQgBAR4ZAQUJAQEIAg4EBgICJgICAyUhDgYNBgIBAQGDH?=
 =?us-ascii?q?AGCAQEDAQqKepocETNwfDOCdgEBBYEwAQsBgQaEZQiBC4sQF4FAP4ERJ4JrgwU?=
 =?us-ascii?q?ZAwEBF4EgAYMqgleJFhSXCQmBE4VshhuEFx6BW4UQgm4LhzuNX4gKgnGBRoINT?=
 =?us-ascii?q?SRcDIJTCYIeF4N9hGGFQD8yAQl7AQGLTgElgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AuAQCBKwFch0O0hNFjH4F4gTGBOYECJ4N5lCCBYC0UlzS?=
 =?us-ascii?q?BdhEYDwQBh3UiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDAQIgB?=
 =?us-ascii?q?AsBBQgBAR4ZAQUJAQEIAg4EBgICJgICAyUhDgYNBgIBAQGDHAGCAQEDAQqKepo?=
 =?us-ascii?q?cETNwfDOCdgEBBYEwAQsBgQaEZQiBC4sQF4FAP4ERJ4JrgwUZAwEBF4EgAYMqg?=
 =?us-ascii?q?leJFhSXCQmBE4VshhuEFx6BW4UQgm4LhzuNX4gKgnGBRoINTSRcDIJTCYIeF4N?=
 =?us-ascii?q?9hGGFQD8yAQl7AQGLTgElgicBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="64738461"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 30 Nov 2018 04:24:05 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726789AbeK3XdI (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 18:33:08 -0500
Received: from mo4-p01-ob.smtp.rzone.de ([85.215.255.50]:30952 "EHLO
        mo4-p01-ob.smtp.rzone.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726564AbeK3XdI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 18:33:08 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; t=1543580636;
        s=strato-dkim-0002; d=xenosoft.de;
        h=In-Reply-To:Date:Message-ID:From:References:Cc:To:Subject:
        X-RZG-CLASS-ID:X-RZG-AUTH:From:Subject:Sender;
        bh=7OXAcV0i7l4t9ksTBCuTXa3DqFyqNQpHglaLUHqhXps=;
        b=RGSGhNgNRhBdlJnXMIOqlCbB9HRpTXhmtv93JCDEDqgyGq1R7J80NVXsNp0cjCOzxc
        LzoRvorsgN00Vtn95EZhyMsb4S9oEN6WiHfO1opCTlavfeKBLYXedvC2AGdm/pusnbaN
        h1rb0fdHHd0bd+uqlYWoRJc9rGaBcj7Wy2LYxAfysYnCFwXyLEW+n8kLF4vyhD07zneQ
        A4BctwzBVgkDaSrQT3+DrqUL2xXiowH2JdovtB5siLhLyKvOnWbGb2710nwyxj1ajxjB
        T6XVVNBt5ZKXX7PsQCRFKHZDXcX+uowRiD09lS+zsXK/1PFw8M7GR8t89Y2+Tc3+yZf3
        NmMw==
X-RZG-AUTH: ":L2QefEenb+UdBJSdRCXu93KJ1bmSGnhMdmOod1DhGM4l4Hio94KKxRySfLxnHfJ+Dkjp5G5MdirQj0WG7CkOhtXRWqPjJ5MV2zvh/ExgOBPpsw=="
X-RZG-CLASS-ID: mo00
Received: from [IPv6:2a02:8109:a400:162c:1876:2ea1:f7b3:289d]
        by smtp.strato.de (RZmta 44.6 AUTH)
        with ESMTPSA id 404b20uAUCNKHE8
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (curve secp521r1 with 521 ECDH bits, eq. 15360 bits RSA))
        (Client did not present a certificate);
        Fri, 30 Nov 2018 13:23:20 +0100 (CET)
Subject: Re: use generic DMA mapping code in powerpc V4
To: Christoph Hellwig <hch@lst.de>
Cc: Michael Ellerman <mpe@ellerman.id.au>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>, linux-arch@vger.kernel.org,
        linux-mm@kvack.org, iommu@lists.linux-foundation.org,
        linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
        Olof Johansson <olof@lixom.net>
References: <20181114082314.8965-1-hch@lst.de> <20181127074253.GB30186@lst.de>
 <87zhttfonk.fsf@concordia.ellerman.id.au>
 <4d4e3cdd-d1a9-affe-0f63-45b8c342bbd6@xenosoft.de>
 <20181129170351.GC27951@lst.de>
 <d0e04a85-f17d-414e-6fea-971414417430@xenosoft.de>
 <20181130105346.GB26765@lst.de>
From: Christian Zigotzky <chzigotzky@xenosoft.de>
Message-ID: <8694431d-c669-b7b9-99fa-e99db5d45a7d@xenosoft.de>
Date: Fri, 30 Nov 2018 13:23:20 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.3.1
MIME-Version: 1.0
In-Reply-To: <20181130105346.GB26765@lst.de>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit
Content-Language: de-DE
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Christoph,

Thanks a lot for your fast reply.

On 30 November 2018 at 11:53AM, Christoph Hellwig wrote:
> Hi Christian,
>
> for such a diverse architecture like powerpc we'll have to rely on
> users / non core developers like you to help with testing.
I see. I will help as good as I can.
>
> Can you try the patch below for he cyrus config?
Yes, of course. I patched your Git kernel and after that I compiled it 
again. U-Boot loads the kernel and the dtb file. Then the kernel starts 
but it doesn't find any hard disks (partitions).

@All
Could you please also test Christoph's kernel on your PASEMI and NXP 
boards? Download: 'git clone git://git.infradead.org/users/hch/misc.git 
-b powerpc-dma.4 a'
*PLEASE*
>
> For the nemo one I have no idea yet,
We had some problems with the PASEMI ethernet and DMA two years ago. I 
had to deactivate the option PASEMI_IOMMU_DMA_FORCE.

commit 416f37d0816b powerpc/pasemi: Fix coherent_dma_mask for dma engine:

Commit 817820b0 ("powerpc/iommu: Support "hybrid" iommu/direct DMA
ops for coherent_mask < dma_mask) adds a check of coherent_dma_mask for
dma allocations.

Unfortunately current PASemi code does not set this value for the DMA
engine, which ends up with the default value of 0xffffffff, the result
is on a PASemi system with >2Gb ram and iommu enabled the onboard
ethernet stops working due to an inability to allocate memory. Add an
initialisation to pci_dma_dev_setup_pasemi().
Signed-off-by: Darren Stevens <darren@stevens-zone.net>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

Links:
https://lists.ozlabs.org/pipermail/linuxppc-dev/2016-July/146701.html
https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=416f37d0816b9720b8227953e55954d81456f991

FYI: DMA handling has been rewritten in 2015. We had some problems with 
the new DMA code in 2015. I had to revert the commit ' [RFC/PATCH,v2] 
powerpc/iommu: Support "hybrid" iommu/direct DMA ops for coherent_mask < 
dma_mask' in 2015.

Link: https://patchwork.ozlabs.org/patch/472535/

I had to create a patch in 2015:

     diff -rupN linux-4.4/arch/powerpc/Kconfig 
linux-4.4-nemo/arch/powerpc/Kconfig
     --- linux-4.4/arch/powerpc/Kconfig    2015-12-07 00:43:12.000000000 
+0100
     +++ linux-4.4-nemo/arch/powerpc/Kconfig    2015-12-07 
14:48:23.371987988 +0100
     @@ -158,8 +155,6 @@ config PPC
          select HAVE_PERF_EVENTS_NMI if PPC64
          select EDAC_SUPPORT
          select EDAC_ATOMIC_SCRUB
     -    select ARCH_HAS_DMA_SET_COHERENT_MASK
     -    select HAVE_ARCH_SECCOMP_FILTER

      config GENERIC_CSUM
          def_bool CPU_LITTLE_ENDIAN
     @@ -419,8 +414,7 @@ config PPC64_SUPPORTS_MEMORY_FAILURE

      config KEXEC
          bool "kexec system call"
     -    depends on (PPC_BOOK3S || FSL_BOOKE || (44x && !SMP)) || 
PPC_BOOK3E
     -    select KEXEC_CORE
     +    depends on (PPC_BOOK3S || FSL_BOOKE || (44x && !SMP))
          help
            kexec is a system call that implements the ability to 
shutdown your
            current kernel, and to start another kernel.  It is like a 
reboot

     diff -rupN linux-4.4/arch/powerpc/kernel/dma.c 
linux-4.4-nemo/arch/powerpc/kernel/dma.c
     --- linux-4.4/arch/powerpc/kernel/dma.c    2015-12-07 
00:43:12.000000000 +0100
     +++ linux-4.4-nemo/arch/powerpc/kernel/dma.c    2015-12-07 
14:49:38.098286892 +0100
     @@ -40,31 +39,9 @@ static u64 __maybe_unused get_pfn_limit(
          return pfn;
      }

     -static int dma_direct_dma_supported(struct device *dev, u64 mask)
     -{
     -#ifdef CONFIG_PPC64
     -    u64 limit = get_dma_offset(dev) + (memblock_end_of_DRAM() - 1);
     -
     -    /* Limit fits in the mask, we are good */
     -    if (mask >= limit)
     -        return 1;
     -
     -#ifdef CONFIG_FSL_SOC
     -    /* Freescale gets another chance via ZONE_DMA/ZONE_DMA32, however
     -     * that will have to be refined if/when they support iommus
     -     */
     -    return 1;
     -#endif
     -    /* Sorry ... */
     -    return 0;
     -#else
     -    return 1;
     -#endif
     -}
     -
     -void *__dma_direct_alloc_coherent(struct device *dev, size_t size,
     -                  dma_addr_t *dma_handle, gfp_t flag,
     -                  struct dma_attrs *attrs)
     +void *dma_direct_alloc_coherent(struct device *dev, size_t size,
     +                dma_addr_t *dma_handle, gfp_t flag,
     +                struct dma_attrs *attrs)
      {
          void *ret;
      #ifdef CONFIG_NOT_COHERENT_CACHE
     @@ -119,9 +96,9 @@ void *__dma_direct_alloc_coherent(struct
      #endif
      }

     -void __dma_direct_free_coherent(struct device *dev, size_t size,
     -                void *vaddr, dma_addr_t dma_handle,
     -                struct dma_attrs *attrs)
     +void dma_direct_free_coherent(struct device *dev, size_t size,
     +                  void *vaddr, dma_addr_t dma_handle,
     +                  struct dma_attrs *attrs)
      {
      #ifdef CONFIG_NOT_COHERENT_CACHE
          __dma_free_coherent(size, vaddr);
     @@ -130,51 +107,6 @@ void __dma_direct_free_coherent(struct d
      #endif
      }

     -static void *dma_direct_alloc_coherent(struct device *dev, size_t 
size,
     -                       dma_addr_t *dma_handle, gfp_t flag,
     -                       struct dma_attrs *attrs)
     -{
     -    struct iommu_table *iommu;
     -
     -    /* The coherent mask may be smaller than the real mask, check if
     -     * we can really use the direct ops
     -     */
     -    if (dma_direct_dma_supported(dev, dev->coherent_dma_mask))
     -        return __dma_direct_alloc_coherent(dev, size, dma_handle,
     -                           flag, attrs);
     -
     -    /* Ok we can't ... do we have an iommu ? If not, fail */
     -    iommu = get_iommu_table_base(dev);
     -    if (!iommu)
     -        return NULL;
     -
     -    /* Try to use the iommu */
     -    return iommu_alloc_coherent(dev, iommu, size, dma_handle,
     -                    dev->coherent_dma_mask, flag,
     -                    dev_to_node(dev));
     -}
     -
     -static void dma_direct_free_coherent(struct device *dev, size_t size,
     -                     void *vaddr, dma_addr_t dma_handle,
     -                     struct dma_attrs *attrs)
     -{
     -    struct iommu_table *iommu;
     -
     -    /* See comments in dma_direct_alloc_coherent() */
     -    if (dma_direct_dma_supported(dev, dev->coherent_dma_mask))
     -        return __dma_direct_free_coherent(dev, size, vaddr, 
dma_handle,
     -                          attrs);
     -    /* Maybe we used an iommu ... */
     -    iommu = get_iommu_table_base(dev);
     -
     -    /* If we hit that we should have never allocated in the first
     -     * place so how come we are freeing ?
     -     */
     -    if (WARN_ON(!iommu))
     -        return;
     -    iommu_free_coherent(iommu, size, vaddr, dma_handle);
     -}
     -
      int dma_direct_mmap_coherent(struct device *dev, struct 
vm_area_struct *vma,
                       void *cpu_addr, dma_addr_t handle, size_t size,
                       struct dma_attrs *attrs)
     @@ -215,6 +147,18 @@ static void dma_direct_unmap_sg(struct d
      {
      }

     +static int dma_direct_dma_supported(struct device *dev, u64 mask)
     +{
     +#ifdef CONFIG_PPC64
     +    /* Could be improved so platforms can set the limit in case
     +     * they have limited DMA windows
     +     */
     +    return mask >= get_dma_offset(dev) + (memblock_end_of_DRAM() - 1);
     +#else
     +    return 1;
     +#endif
     +}
     +
      static u64 dma_direct_get_required_mask(struct device *dev)
      {
          u64 end, mask;
     @@ -286,25 +230,6 @@ struct dma_map_ops dma_direct_ops = {
      };
      EXPORT_SYMBOL(dma_direct_ops);

     -int dma_set_coherent_mask(struct device *dev, u64 mask)
     -{
     -    if (!dma_supported(dev, mask)) {
     -        /*
     -         * We need to special case the direct DMA ops which can
     -         * support a fallback for coherent allocations. There
     -         * is no dma_op->set_coherent_mask() so we have to do
     -         * things the hard way:
     -         */
     -        if (get_dma_ops(dev) != &dma_direct_ops ||
     -            get_iommu_table_base(dev) == NULL ||
     -            !dma_iommu_dma_supported(dev, mask))
     -            return -EIO;
     -    }
     -    dev->coherent_dma_mask = mask;
     -    return 0;
     -}
     -EXPORT_SYMBOL(dma_set_coherent_mask);
     -
      #define PREALLOC_DMA_DEBUG_ENTRIES (1 << 16)

      int __dma_set_mask(struct device *dev, u64 dma_mask)

Interesting PASEMI ethernet files:

arch/powerpc/platforms/pasemi/iommu.c
drivers/net/ethernet/pasemi/pasemi_mac.c
drivers/net/ethernet/pasemi/pasemi_mac.h
drivers/net/ethernet/pasemi/pasemi_mac_ethtool.c
drivers/net/ethernet/pasemi/Makefile
drivers/net/ethernet/pasemi/Kconfig

I know this is a lot of information but I hope it helps.

Thanks,
Christian
