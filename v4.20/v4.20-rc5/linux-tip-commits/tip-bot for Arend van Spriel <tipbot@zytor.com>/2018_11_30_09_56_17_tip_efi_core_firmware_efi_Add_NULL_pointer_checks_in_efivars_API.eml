Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:15:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id C452B580213;
	Fri, 30 Nov 2018 01:57:30 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 01:57:30 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A9b/hyBYP9V/FDUN6E9H4KFL/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpMy5YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v6bpgRh31hy?=
 =?us-ascii?q?cdLzM3/mHZhM9qjK1ZrhKvuQFxzYnbb4+aKPVxY7jdfcsYSGdaQsZcVDZMDp+m?=
 =?us-ascii?q?YocTDecMO/tToYnnp1sJqBuzHRWsBOL3yjNRnXD22rE62PkvEQHBxgwrAs4DsG?=
 =?us-ascii?q?7Ko9XzKagZTP61w7POzT7ecv1WwS396InWfRAlvPqBWq5wccvJyUY0EAPFkk6d?=
 =?us-ascii?q?qI3lPjOJ0eQNqXKX4PZnVeKqkmMqrRx6rDaoxscpkIbJh4QVx0jH9Spn2oY1I8?=
 =?us-ascii?q?O3SEphbd6jCptQuCeXPJZ1TMM6W2xkpjo2x7kctZKmciUG1o4rywPcZvCbaYSF?=
 =?us-ascii?q?4xDuWP6MLTp8h39pYq+zihiw/ES61OHwSte43ExXoidLk9TBsG0G2QbJ5cidUP?=
 =?us-ascii?q?R9+1+s2TaR2ADX7eFJOV40laXFJJ472LIwlYQcsV7FHiDonEX6lqiWdl8r+uSw?=
 =?us-ascii?q?6uTnZKvppoOEOoNqlg3zNr4iltGxDOgmKAQCQmuW9fim2LDi/0D1WLBKgec3kq?=
 =?us-ascii?q?ndvpDaP8MbpquhDg9R04Yj7Qu/Dji/3NQbg3YHNlRFdwyDj4TwPFHPLvb4Auml?=
 =?us-ascii?q?g1m3jjdryO7JPqf7DpXOMHfDirHhcqh560JGzwoz199f64pOCr4dOPLzRlPxtN?=
 =?us-ascii?q?vAAx89Mgy0wPjoBM9y14MDQm+PBq6ZMKXPsV6H/O4vIu+MZJMLtzb5MfQq+/nu?=
 =?us-ascii?q?jXohk18HYaapxYcXaGy/Hvl+I0WWe3vsgssbHmcNpAY+TPHqh0eEUT5cfHuyW6?=
 =?us-ascii?q?M85jcmCIOpF4vDR4atgKCf0ye/BJFZemdGClWUG3fya4qEQ+sMaD6VIsJ5kDwE?=
 =?us-ascii?q?UqauR5Ui1RGpsg/6zb1nI/HQ+i0Zs5Ljydd06/fSlRE06Tx7EcCd33uRQGFzm2?=
 =?us-ascii?q?MCXyU207xnoUxh1leD1rB1jOZDFdxT4PNJUR02NYTGwOx4EN3yXgPBftGUSFep?=
 =?us-ascii?q?WNmmADcxTs4vzN8KeUpyB9KijhXb1SqwH7AVj6CLBIAz8q/E3Hj+PcB9x2zC1K?=
 =?us-ascii?q?kglVYmRMRPOHaihq5+8QjTGoHIn1+Yl6asaaQTwirN+H2fwmqJuUFSSBRwXrnd?=
 =?us-ascii?q?XXADekvWqsz06V7YQL+wF7srKAtBxtSEKqtRdNLpi1JKRPPgONTbZ2K8gGOwBR?=
 =?us-ascii?q?eOxrORY4vmYWQd3CPBCEcalwAf52qJNQ87Bi25uWLRECRuFU7zY0Pr6eRxtWm0?=
 =?us-ascii?q?TlEqwA2Qb01uzby1+gULivyaUP4T2rMEuCE8qzR7Blq93tTWC8aeqAplZqlTfd?=
 =?us-ascii?q?Q94FJf32LDqwN9JoCgL7xlhlMGbwR3vkbu1xJrCoVAkckmtm8qwBB1KaKC1FNB?=
 =?us-ascii?q?djWY3Z/rN73TK2ny+g2vaqHM1lHf1taW5rkA6PAip1r/uwGpE1Io82973NlNz3?=
 =?us-ascii?q?uc+pLKARIIXpL1TEk2+AZ1prHAbiYm+oPbyGdjMa+3sj/FxdIkH+8lyhemf9dC?=
 =?us-ascii?q?P6KIDg7yE8sGB8ewLOwmgUSmbhUBPOpK7q47I9umd+ea2K6sJOthnC+mgX5b74?=
 =?us-ascii?q?xn00OM9zBzSujH35sex/GY3w2HVyrzjVu7s8D3n5xEai8WHmal1SfkA4tRbLVo?=
 =?us-ascii?q?fYkXEWeuP9G3xtJmip73Wn5X6ESsB0kb18+uYxaSaULy3RdR1UgOvXOogy+4wC?=
 =?us-ascii?q?FqnDEzqaqf2jfDw+DjdBoBJ25KS3NujVbqIYiokd8aWFKkYBQulBug/Uz63bRU?=
 =?us-ascii?q?pLxjL2nPRkdFZyj3L2B4XqqwrLaCeNNP6JUzvCVTUeS8Z02aS7Hnrxsb1SPjA3?=
 =?us-ascii?q?VRxDQhez62vZX5mgRwiHiBI3ZrsHrZZcZwyA/d5NPGX/5R3TkGRC5ihTnMHFe8?=
 =?us-ascii?q?PNqp/dSSl5jdtOCzTGahVpxVcSn2woKMriq75Wt2ARKhm/C/gMHoEQ8/0SXjzd?=
 =?us-ascii?q?llST3IrArgYonsz6m7Mfhofk5yCF/+6sp6HJpzko8xhJEWxHgbiY+Z/XsBkWfv?=
 =?us-ascii?q?L9pb3bjyY2YKRT4O29TV+hTq2FV/LnKVwIL0TnadzdFgZ9WgYmMWxzgy78ZFCK?=
 =?us-ascii?q?qP6LxEnC11oke3rA7LYPh9mCsdxuUq6HIAn+4Jvw8txD2HAr8OBUlYITDslxOQ?=
 =?us-ascii?q?4tC7raVXZ3ygfaK+1UVghtChEK+NohtHV3nnYJciEjR97sF+MFLKzX3y5ZvoeN?=
 =?us-ascii?q?jWbdIPqBKUlw3MgPRSKJI0jvAKnzZoOXrhvX05zO42lQBu3Za/vISdKmRi5qS5?=
 =?us-ascii?q?AgNDNj3uZsMe4TXtjadYnsaL0IGjBJRhGjMXXJT2SfKkCi4dtfPiNwyWCj0ztm?=
 =?us-ascii?q?+bGabDHQ+Y8EpptGjAE5evN3GKPnUZychiSQKZJExehgAUQTo7koQ4FgCs2Mzu?=
 =?us-ascii?q?bkN56ioN6V7/rxtG0vhoOAXnUmfDuAeobS85SJqFIxpT8A5C/F3ZMdCE4uJwAi?=
 =?us-ascii?q?FY/YChrAqXJWyAfAlICWAJWkqZB1HsJLWu5N/A8/SGCeq6NffBfbKOqelGXfeS?=
 =?us-ascii?q?2Z2vypdm/yqLNsiXPnhiCOA72lNeXX9jHcTVgS4PSysRlyLCdMOboBa8+itqrs?=
 =?us-ascii?q?Gw6vjrWQTv5ZeRBLtWK9lg5xe2gaKbPe6KmCl5MSpY1o8LxXLQyLgQwl8SiyJt?=
 =?us-ascii?q?dzmsC7gAtjTNTKXfmqBJFR4bdjhzOdBM76I92AlNJMHahsn01r5+kv46FVNFWU?=
 =?us-ascii?q?b9lcGuYMwAO3u9O0/fBEaXKLSGIiXGzNvqYaynU71fkuVVuwe0uTaaCELjOjWD?=
 =?us-ascii?q?lz/0VxGgK+1MjSebPABAt4G5aBpiFW/jTNf+YB2hLNB3lSE2waEzhn7SKW4cMD?=
 =?us-ascii?q?18f1lRobGK8SxYgutwG2pa43phLOmEnTuZ7ubCJpYXt/trHjp7l+ZA7HsmzLtV?=
 =?us-ascii?q?6TlOROZplyvKst5uv1amn/GPyzV9VhpOrzdLhISTskRjOaXW7J9AWXnf8RIJ7G?=
 =?us-ascii?q?WQDQkKptR/Bt3uvaBQ1sbAlKbpJDhe9NLU+JhUO8+BLMOBLWpkLRvxXTXTCQ4E?=
 =?us-ascii?q?USWDK27SnQpeneuU+3nTqYI1+aLhgJ4fdrgOVlszH+8aA0JlNNocIZt2V3Uvlr?=
 =?us-ascii?q?vfxMwP6FKmoQPaRMhB+JvAU7baC/X0KD+DiLBsfRYEwbrka48UM8mz3k1kZV5S?=
 =?us-ascii?q?n4nQHUfUG9dXrWkpaAYorU5N+X51Q2k33FjNZQak4XtVHvmx2lYqjRFgaOAh7x?=
 =?us-ascii?q?/o4lEqNh/EozY2nEAtmNLjxzeLf3q5Ib2xVsdNDS3rvUUrPbv8WQ9+aQD0lkth?=
 =?us-ascii?q?cH/fTrMXl6Fpc21mlA+aoYFGGv5NRIVFZgMdwbecYPBsmU9Rpiy7g0NG4ebGIZ?=
 =?us-ascii?q?RnnQouN5WrqjYI0RpLZdo0KKqAYqZEihBVj7iF+D250O8wzRU2LlwItmiVfWpA?=
 =?us-ascii?q?vUUUKpEtICal9Ohx5BSYmj1fPmMLEecp5rpu6186E+eN1STt1/hEME/1f/6fMr?=
 =?us-ascii?q?KYtWXBzJ/ZE3s/00oJkw9O+r0ymd8ub0eORWguyrWLHhgEPMaELhtaK4JS+HXc?=
 =?us-ascii?q?eiuCvM3XzJ51Npn7HeftCaeMqaIVj0TiAAYoEp4W/+wIBJzq20bdaY/jLbgY2V?=
 =?us-ascii?q?Au6R7tKVGtEvtEYlSInS0BrsX5y4V4mcFRLy8QR2V0Nz664J7WoBMnhLyIW9Jy?=
 =?us-ascii?q?KmsVWpssMnMwRdGgnChYrzJMAX3/2/gUzgTE8Tb6vTzKDTT4R9B5Y/6YbhRpTt?=
 =?us-ascii?q?qx/HF387C/oUzG7pLEYWr9MJAqs8XDr+kbqo2HBu5KQL1Vt0bakpNfAXuwXD3h?=
 =?us-ascii?q?C9mwcoTxc8wmasC8BHGgGnWlhjQ5B9n4Op6WNrKJjAWgEZpVqIOcwBgxJNO6DH?=
 =?us-ascii?q?cVHBIm9LJL3751eQBWO8lzWhXvrQlrb6E=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0C/AgCHCAFch0O0hNFjH4F4AoJogQIng?=
 =?us-ascii?q?3mId4spAYIhgwOFeoUtM4F0hmMggVYPAQEYDQYBh3QiNAkNAQMBAQEBAQECARM?=
 =?us-ascii?q?BAQEIDQkIKSMMQgEQAYFiIoJlAwMBAggYBAQBBgFGBgkBASQCJgICAx4OAQ4BG?=
 =?us-ascii?q?BkFA4MZAYFpAQEBFQUKpll8Mw0RhA8BgQOCLgQKGQ2CHBN4ixAXgX+BEYJkgwW?=
 =?us-ascii?q?BZINKglcCiSIGBDGFTHxQjnYYLgmGf4cLg0WCKIkaCgERP4UCimuCdIELiUkCB?=
 =?us-ascii?q?AIEBQIUWmyCDU0jFYFvDgsBDAQGgQgJCoIUF4hehWAeATIBAQEHewEBhHCGbYI?=
 =?us-ascii?q?+AQE?=
X-IPAS-Result: =?us-ascii?q?A0C/AgCHCAFch0O0hNFjH4F4AoJogQIng3mId4spAYIhgwO?=
 =?us-ascii?q?FeoUtM4F0hmMggVYPAQEYDQYBh3QiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMQ?=
 =?us-ascii?q?gEQAYFiIoJlAwMBAggYBAQBBgFGBgkBASQCJgICAx4OAQ4BGBkFA4MZAYFpAQE?=
 =?us-ascii?q?BFQUKpll8Mw0RhA8BgQOCLgQKGQ2CHBN4ixAXgX+BEYJkgwWBZINKglcCiSIGB?=
 =?us-ascii?q?DGFTHxQjnYYLgmGf4cLg0WCKIkaCgERP4UCimuCdIELiUkCBAIEBQIUWmyCDU0?=
 =?us-ascii?q?jFYFvDgsBDAQGgQgJCoIUF4hehWAeATIBAQEHewEBhHCGbYI+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="54994389"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 01:57:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727293AbeK3VGD (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 16:06:03 -0500
Received: from terminus.zytor.com ([198.137.202.136]:52829 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726557AbeK3VGC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 16:06:02 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wAU9uHxN3261037
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Fri, 30 Nov 2018 01:56:18 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wAU9uHUv3261034;
        Fri, 30 Nov 2018 01:56:17 -0800
Date: Fri, 30 Nov 2018 01:56:17 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Arend van Spriel <tipbot@zytor.com>
Message-ID: <tip-ab2180a15ce54739fed381efb4cb12e78dfb1561@git.kernel.org>
Cc: sedat.dilek@gmail.com, luto@kernel.org, zhuyifei1999@gmail.com,
        peterz@infradead.org, bp@alien8.de, marc.zyngier@arm.com,
        matt@codeblueprint.co.uk, linux-kernel@vger.kernel.org,
        dave.hansen@intel.com, julien.thierry@arm.com, hdegoede@redhat.com,
        ard.biesheuvel@linaro.org, tglx@linutronix.de,
        arend.vanspriel@broadcom.com, hpa@zytor.com, joe@perches.com,
        jonathanh@nvidia.com, bhsharma@redhat.com,
        eric.snowberg@oracle.com, sai.praneeth.prakhya@intel.com,
        mingo@kernel.org, natechancellor@gmail.com,
        torvalds@linux-foundation.org
Reply-To: jonathanh@nvidia.com, joe@perches.com, bhsharma@redhat.com,
          mingo@kernel.org, natechancellor@gmail.com,
          torvalds@linux-foundation.org, eric.snowberg@oracle.com,
          sai.praneeth.prakhya@intel.com, sedat.dilek@gmail.com,
          bp@alien8.de, marc.zyngier@arm.com, matt@codeblueprint.co.uk,
          luto@kernel.org, zhuyifei1999@gmail.com, peterz@infradead.org,
          hdegoede@redhat.com, julien.thierry@arm.com,
          linux-kernel@vger.kernel.org, dave.hansen@intel.com,
          tglx@linutronix.de, arend.vanspriel@broadcom.com, hpa@zytor.com,
          ard.biesheuvel@linaro.org
In-Reply-To: <20181129171230.18699-9-ard.biesheuvel@linaro.org>
References: <20181129171230.18699-9-ard.biesheuvel@linaro.org>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:efi/core] firmware/efi: Add NULL pointer checks in efivars API
 functions
Git-Commit-ID: ab2180a15ce54739fed381efb4cb12e78dfb1561
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=1.6 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_48_96,FREEMAIL_FORGED_REPLYTO,
        FREEMAIL_REPLYTO_END_DIGIT autolearn=no autolearn_force=no
        version=3.4.2
X-Spam-Level: *
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  ab2180a15ce54739fed381efb4cb12e78dfb1561
Gitweb:     https://git.kernel.org/tip/ab2180a15ce54739fed381efb4cb12e78dfb1561
Author:     Arend van Spriel <arend.vanspriel@broadcom.com>
AuthorDate: Thu, 29 Nov 2018 18:12:27 +0100
Committer:  Ingo Molnar <mingo@kernel.org>
CommitDate: Fri, 30 Nov 2018 09:06:32 +0100

firmware/efi: Add NULL pointer checks in efivars API functions

Since commit:

   ce2e6db554fa ("brcmfmac: Add support for getting nvram contents from EFI variables")

we have a device driver accessing the efivars API. Several functions in
the efivars API assume __efivars is set, i.e., that they will be accessed
only after efivars_register() has been called. However, the following NULL
pointer access was reported calling efivar_entry_size() from the brcmfmac
device driver:

  Unable to handle kernel NULL pointer dereference at virtual address 00000008
  pgd = 60bfa5f1
  [00000008] *pgd=00000000
  Internal error: Oops: 5 [#1] SMP ARM
  ...
  Hardware name: NVIDIA Tegra SoC (Flattened Device Tree)
  Workqueue: events request_firmware_work_func
  PC is at efivar_entry_size+0x28/0x90
  LR is at brcmf_fw_complete_request+0x3f8/0x8d4 [brcmfmac]
  pc : [<c0c40718>]    lr : [<bf2a3ef4>]    psr: a00d0113
  sp : ede7fe28  ip : ee983410  fp : c1787f30
  r10: 00000000  r9 : 00000000  r8 : bf2b2258
  r7 : ee983000  r6 : c1604c48  r5 : ede7fe88  r4 : edf337c0
  r3 : 00000000  r2 : 00000000  r1 : ede7fe88  r0 : c17712c8
  Flags: NzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
  Control: 10c5387d  Table: ad16804a  DAC: 00000051

Disassembly showed that the local static variable __efivars is NULL,
which is not entirely unexpected given that it is a non-EFI platform.

So add a NULL pointer check to efivar_entry_size(), and to related
functions while at it. In efivars_register() a couple of sanity checks
are added as well.

Reported-by: Jon Hunter <jonathanh@nvidia.com>
Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Bhupesh Sharma <bhsharma@redhat.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Eric Snowberg <eric.snowberg@oracle.com>
Cc: Hans de Goede <hdegoede@redhat.com>
Cc: Joe Perches <joe@perches.com>
Cc: Julien Thierry <julien.thierry@arm.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Marc Zyngier <marc.zyngier@arm.com>
Cc: Matt Fleming <matt@codeblueprint.co.uk>
Cc: Nathan Chancellor <natechancellor@gmail.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
Cc: Sedat Dilek <sedat.dilek@gmail.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: YiFei Zhu <zhuyifei1999@gmail.com>
Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/20181129171230.18699-9-ard.biesheuvel@linaro.org
Signed-off-by: Ingo Molnar <mingo@kernel.org>
---
 drivers/firmware/efi/vars.c | 99 +++++++++++++++++++++++++++++++++++----------
 1 file changed, 78 insertions(+), 21 deletions(-)

diff --git a/drivers/firmware/efi/vars.c b/drivers/firmware/efi/vars.c
index 9336ffdf6e2c..fceaafd67ec6 100644
--- a/drivers/firmware/efi/vars.c
+++ b/drivers/firmware/efi/vars.c
@@ -318,7 +318,12 @@ EXPORT_SYMBOL_GPL(efivar_variable_is_removable);
 static efi_status_t
 check_var_size(u32 attributes, unsigned long size)
 {
-	const struct efivar_operations *fops = __efivars->ops;
+	const struct efivar_operations *fops;
+
+	if (!__efivars)
+		return EFI_UNSUPPORTED;
+
+	fops = __efivars->ops;
 
 	if (!fops->query_variable_store)
 		return EFI_UNSUPPORTED;
@@ -329,7 +334,12 @@ check_var_size(u32 attributes, unsigned long size)
 static efi_status_t
 check_var_size_nonblocking(u32 attributes, unsigned long size)
 {
-	const struct efivar_operations *fops = __efivars->ops;
+	const struct efivar_operations *fops;
+
+	if (!__efivars)
+		return EFI_UNSUPPORTED;
+
+	fops = __efivars->ops;
 
 	if (!fops->query_variable_store)
 		return EFI_UNSUPPORTED;
@@ -429,13 +439,18 @@ static void dup_variable_bug(efi_char16_t *str16, efi_guid_t *vendor_guid,
 int efivar_init(int (*func)(efi_char16_t *, efi_guid_t, unsigned long, void *),
 		void *data, bool duplicates, struct list_head *head)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	unsigned long variable_name_size = 1024;
 	efi_char16_t *variable_name;
 	efi_status_t status;
 	efi_guid_t vendor_guid;
 	int err = 0;
 
+	if (!__efivars)
+		return -EFAULT;
+
+	ops = __efivars->ops;
+
 	variable_name = kzalloc(variable_name_size, GFP_KERNEL);
 	if (!variable_name) {
 		printk(KERN_ERR "efivars: Memory allocation failed.\n");
@@ -583,12 +598,14 @@ static void efivar_entry_list_del_unlock(struct efivar_entry *entry)
  */
 int __efivar_entry_delete(struct efivar_entry *entry)
 {
-	const struct efivar_operations *ops = __efivars->ops;
 	efi_status_t status;
 
-	status = ops->set_variable(entry->var.VariableName,
-				   &entry->var.VendorGuid,
-				   0, 0, NULL);
+	if (!__efivars)
+		return -EINVAL;
+
+	status = __efivars->ops->set_variable(entry->var.VariableName,
+					      &entry->var.VendorGuid,
+					      0, 0, NULL);
 
 	return efi_status_to_err(status);
 }
@@ -607,12 +624,17 @@ EXPORT_SYMBOL_GPL(__efivar_entry_delete);
  */
 int efivar_entry_delete(struct efivar_entry *entry)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	efi_status_t status;
 
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
 
+	if (!__efivars) {
+		up(&efivars_lock);
+		return -EINVAL;
+	}
+	ops = __efivars->ops;
 	status = ops->set_variable(entry->var.VariableName,
 				   &entry->var.VendorGuid,
 				   0, 0, NULL);
@@ -650,13 +672,19 @@ EXPORT_SYMBOL_GPL(efivar_entry_delete);
 int efivar_entry_set(struct efivar_entry *entry, u32 attributes,
 		     unsigned long size, void *data, struct list_head *head)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	efi_status_t status;
 	efi_char16_t *name = entry->var.VariableName;
 	efi_guid_t vendor = entry->var.VendorGuid;
 
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
+
+	if (!__efivars) {
+		up(&efivars_lock);
+		return -EINVAL;
+	}
+	ops = __efivars->ops;
 	if (head && efivar_entry_find(name, vendor, head, false)) {
 		up(&efivars_lock);
 		return -EEXIST;
@@ -687,12 +715,17 @@ static int
 efivar_entry_set_nonblocking(efi_char16_t *name, efi_guid_t vendor,
 			     u32 attributes, unsigned long size, void *data)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	efi_status_t status;
 
 	if (down_trylock(&efivars_lock))
 		return -EBUSY;
 
+	if (!__efivars) {
+		up(&efivars_lock);
+		return -EINVAL;
+	}
+
 	status = check_var_size_nonblocking(attributes,
 					    size + ucs2_strsize(name, 1024));
 	if (status != EFI_SUCCESS) {
@@ -700,6 +733,7 @@ efivar_entry_set_nonblocking(efi_char16_t *name, efi_guid_t vendor,
 		return -ENOSPC;
 	}
 
+	ops = __efivars->ops;
 	status = ops->set_variable_nonblocking(name, &vendor, attributes,
 					       size, data);
 
@@ -727,9 +761,13 @@ efivar_entry_set_nonblocking(efi_char16_t *name, efi_guid_t vendor,
 int efivar_entry_set_safe(efi_char16_t *name, efi_guid_t vendor, u32 attributes,
 			  bool block, unsigned long size, void *data)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	efi_status_t status;
 
+	if (!__efivars)
+		return -EINVAL;
+
+	ops = __efivars->ops;
 	if (!ops->query_variable_store)
 		return -ENOSYS;
 
@@ -829,13 +867,18 @@ EXPORT_SYMBOL_GPL(efivar_entry_find);
  */
 int efivar_entry_size(struct efivar_entry *entry, unsigned long *size)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	efi_status_t status;
 
 	*size = 0;
 
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
+	if (!__efivars) {
+		up(&efivars_lock);
+		return -EINVAL;
+	}
+	ops = __efivars->ops;
 	status = ops->get_variable(entry->var.VariableName,
 				   &entry->var.VendorGuid, NULL, size, NULL);
 	up(&efivars_lock);
@@ -861,12 +904,14 @@ EXPORT_SYMBOL_GPL(efivar_entry_size);
 int __efivar_entry_get(struct efivar_entry *entry, u32 *attributes,
 		       unsigned long *size, void *data)
 {
-	const struct efivar_operations *ops = __efivars->ops;
 	efi_status_t status;
 
-	status = ops->get_variable(entry->var.VariableName,
-				   &entry->var.VendorGuid,
-				   attributes, size, data);
+	if (!__efivars)
+		return -EINVAL;
+
+	status = __efivars->ops->get_variable(entry->var.VariableName,
+					      &entry->var.VendorGuid,
+					      attributes, size, data);
 
 	return efi_status_to_err(status);
 }
@@ -882,14 +927,19 @@ EXPORT_SYMBOL_GPL(__efivar_entry_get);
 int efivar_entry_get(struct efivar_entry *entry, u32 *attributes,
 		     unsigned long *size, void *data)
 {
-	const struct efivar_operations *ops = __efivars->ops;
 	efi_status_t status;
 
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
-	status = ops->get_variable(entry->var.VariableName,
-				   &entry->var.VendorGuid,
-				   attributes, size, data);
+
+	if (!__efivars) {
+		up(&efivars_lock);
+		return -EINVAL;
+	}
+
+	status = __efivars->ops->get_variable(entry->var.VariableName,
+					      &entry->var.VendorGuid,
+					      attributes, size, data);
 	up(&efivars_lock);
 
 	return efi_status_to_err(status);
@@ -921,7 +971,7 @@ EXPORT_SYMBOL_GPL(efivar_entry_get);
 int efivar_entry_set_get_size(struct efivar_entry *entry, u32 attributes,
 			      unsigned long *size, void *data, bool *set)
 {
-	const struct efivar_operations *ops = __efivars->ops;
+	const struct efivar_operations *ops;
 	efi_char16_t *name = entry->var.VariableName;
 	efi_guid_t *vendor = &entry->var.VendorGuid;
 	efi_status_t status;
@@ -940,6 +990,11 @@ int efivar_entry_set_get_size(struct efivar_entry *entry, u32 attributes,
 	if (down_interruptible(&efivars_lock))
 		return -EINTR;
 
+	if (!__efivars) {
+		err = -EINVAL;
+		goto out;
+	}
+
 	/*
 	 * Ensure that the available space hasn't shrunk below the safe level
 	 */
@@ -956,6 +1011,8 @@ int efivar_entry_set_get_size(struct efivar_entry *entry, u32 attributes,
 		}
 	}
 
+	ops = __efivars->ops;
+
 	status = ops->set_variable(name, vendor, attributes, *size, data);
 	if (status != EFI_SUCCESS) {
 		err = efi_status_to_err(status);
