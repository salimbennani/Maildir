Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 08:37:03 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id DCF405802E4;
	Wed, 28 Nov 2018 06:31:01 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 06:31:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AJm0E9xTSijxLZOx/HavosPMAR9psv+yvbD5Q0YIu?=
 =?us-ascii?q?jvd0So/mwa65ZBSHt8tkgFKBZ4jH8fUM07OQ7/iwHzRYqb+681k6OKRWUBEEjc?=
 =?us-ascii?q?hE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRo?=
 =?us-ascii?q?LerpBIHSk9631+ev8JHPfglEnjWwba9xIRmssQndqtQdjJd/JKo21hbHuGZDdf?=
 =?us-ascii?q?5MxWNvK1KTnhL86dm18ZV+7SleuO8v+tBZX6nicKs2UbJXDDI9M2Ao/8LrrgXM?=
 =?us-ascii?q?TRGO5nQHTGoblAdDDhXf4xH7WpfxtTb6tvZ41SKHM8D6Uaw4VDK/5KptVRTmij?=
 =?us-ascii?q?oINyQh/W/ZisJ+j7hbrxCvpxJh3oDaZ46aOvVicazAZtMaXWhMU91NVyFCGI6w?=
 =?us-ascii?q?c5ECA/YDMOtesoLzp0EOrRy7BQS0GOPvyydIimbt0q09z+QqDA/G3As6H9kTrn?=
 =?us-ascii?q?rUrdD1P7oMXOC10qbIyyjIYvRK2Tf88IjHaRchoe2XULNxccvR1U4vFxnfglqM?=
 =?us-ascii?q?rozlOiqY2+IQuGaV6OpgUPigi28hqwxpoTig2N0sio/XiYIR0FzE8j95wIkzKN?=
 =?us-ascii?q?alS0B7ecapHIVMuyyeLYd6X80vT39ytConybAKpYS3cSkIxZg/2hLSb/+Kf5KV?=
 =?us-ascii?q?7h/tVuudOyl0iG57dL6lmhq//0mtx+vhXceuyllKtDBKktzUu3ANyRPT7s+HR+?=
 =?us-ascii?q?Nj/keuxzmPzRrf6uJaLkAuk6rUNZohzqQ3lpoJvkTPBi72mEPog6+Kbkgo5PSk?=
 =?us-ascii?q?5uD9brn7qJKQKZV4hhz9P6gygMCyAOY1PhALX2eB+OS80LPj/Vf+QLVPlvA2lq?=
 =?us-ascii?q?jZsJbHJcUUv6K5ABFa0pwl6xmhCzeqydMYnHcBLF1bYhKKlJbpO17QL/DiF/u/?=
 =?us-ascii?q?gEqjkC1tx//YOr3tGJLNLmLMkLv5Z7Zy91ZcyBYvzdBY/59UDrABIPHtVUPru9?=
 =?us-ascii?q?3YEwQ0Mwi1w+bhFdV82ZkSWWOJAq+FLqzStUWE6f4oI+mJfIUVoiryK+A55/7y?=
 =?us-ascii?q?in80gV8dcrOo3ZsLcn+4Ge5qI0WEYXX2hNcBHnwHvg4/TOzslV2DXiRfZ3e0X6?=
 =?us-ascii?q?Ig+D47DJiqApvERoComLaBxju0HoVKZmBaDVCBCXXod4KaVPsWayKSJclhkjoD?=
 =?us-ascii?q?VbW6T48h1BeutBL1yrZ9L+rU/DEYuozn1NRv++LTkhQy/yRuD8uBy2GNU310nm?=
 =?us-ascii?q?QQSjAsx6B/oUt9ylSZ3ahimfNYF8de5/dIUgc8KJ7dwPZ2C9H0WgLdYNiJTEyq?=
 =?us-ascii?q?TcmhATE0Vtgx2cMBY15hG9W+iRDOxymqDKUTl7CRAJw087jT337+J8tmz3bG1a?=
 =?us-ascii?q?8hj0QpQ8dVNG2mgLJ/+BbXB4LTj0qZkKOqf7wG3CHR7GeD0XaOvEZAXQFtS6rF?=
 =?us-ascii?q?Q24QalHWrdvj4EPCVKGhCbIgPgtFys6CL69KZ8btjVVHQvfjJdvfb3iwm2e2GR?=
 =?us-ascii?q?aH2LeMYJD2dGUa2SXXEFIEnBwL/XaaKQg+AT+srH/EAzxwC13jeUPs/vN4qHOg?=
 =?us-ascii?q?UEA0yRqHb0lg17qz5x4UiuaQS/IV3rIYpighry94E0q639LTE9CAvRZufL1AYd?=
 =?us-ascii?q?Mh51dKzX7Ztw14PpynM6Bihl4ffx5rv0/00BV3EIFAkcksrHMl1wdyLaOY0FVc?=
 =?us-ascii?q?dzKXx5zwO7vXKnXs8xCrcaLZxlbe0NOO8KcV9Ps4s0njvB2uFkc66Xpn18da0n?=
 =?us-ascii?q?SC6ZTKFgYdSo/xXVst+Bh8pLHaZTc96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9a4pP8+8a/SKwq+qPOZ6kzKggmRK+4?=
 =?us-ascii?q?R90kOK9yphRe/ExZcFw/eE3gSZUzfwlkuussfymYpcfzEdAnK/yTT4BI5WfqBy?=
 =?us-ascii?q?Z4cLBnu0LM2t29p+gIThW3hG+165BlMKwdOmdgCWb1PgwwJQz0MXoXq8lCu8zj?=
 =?us-ascii?q?x0lSwpr6WF0CzPxeTiaAQIOmpRSGZ+ilfsJJC+j8oGU0iwcwgpiByl6F76xqha?=
 =?us-ascii?q?vqh+L3PfQVxVfyjwNGxiVqqwtryfY89A8p8osCNXUPiiblCeULLyvxwa0yb7FW?=
 =?us-ascii?q?tE2D87by2quon+nxFiimKSNmxzrHnaecF33xvf/8bTRf1S3joHQil3lz/XC0O4?=
 =?us-ascii?q?P9mo+9WUipjCvvq/V2KnSp1cby3rwZmcuyu84G1gGQe/kOyrmt37DQg61jf21t?=
 =?us-ascii?q?lwWiXPthr8YIjr16KhPOJjf0loAkL86sVgFoF/lIswmI8f2XwAipqJ+noHlH/5?=
 =?us-ascii?q?Mc9H1qLmcHoNWTkLzsbW4Af/2U1vNHKJx5/jWXWbzctsfN26YmIQ2iIg4MFGEq?=
 =?us-ascii?q?aU7LpYnSRrplq0tx7eYf94nj0F0/sh9GYag/0VuAoq1iidB7ESHUpCMiD2mRWH?=
 =?us-ascii?q?8cu+rLlJa2a1are/ylB+nd+6AbGGowFcXmv5e5g4ES9x6MV/LEzD0Hnp5o74f9?=
 =?us-ascii?q?nQaMoZtgeInBfYk+hVNJUxm+IWhSpgPGLxp3wkxPQ9jRxzxpG6p4mHJn5p/KK4?=
 =?us-ascii?q?BB5YKzL0a9kS+jHrkaZRgMKW05qzEZVmHzUBRIHoQu6wEDIOqfTnMB6DHyYmpX?=
 =?us-ascii?q?ecHbrfABWT6EN7r3/UF5CrNneXJGQWzNl4RRmdIlBfjx4QXDkggpE5EQWqztT7?=
 =?us-ascii?q?cEhl/jAR+kL4qhxUx+JqLRb/V3nQpByyZjcoUpSfLwdW7gJf50fTK8Oe9fl+Hy?=
 =?us-ascii?q?VZ/p2nsQyMJXaXZwVODWEVREOEA0rvMaWp5dnF6+KYHPaxL+PSYbWSruxTT/eJ?=
 =?us-ascii?q?xZWy0ot/4jaDLMOPMmN5D/083EpDUmt0G8DYmzUJViwWmDjBb8+dpBeg5CJ3qt?=
 =?us-ascii?q?qz/+jsWALq/YGPEaddMc1z+xCqhqeOL+6Qizh4KTZb1ZMMxGXEyLsF3F4VhCFh?=
 =?us-ascii?q?aSOtEakbtSPWSKLQm6lXDwMUai9pNctI6b480RdJOcLBltz10bt4hOYvC1hZTV?=
 =?us-ascii?q?zhht2pZcsSLm6nKVPIH1yLO6qGJDHRx8H3YLixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9LrcgG7MN5yjTEs3bI4nG/FNW4CPj?=
 =?us-ascii?q?h6aE5NqryQ7SVFgvRwAWBB73xlLfWalCad9eXXNpEWsf5zCCRui+1a+Gg6y6dS?=
 =?us-ascii?q?7CxcRP16gi3Srttvo1GgiuaOyzpnXwBIqjZEn4+LuURiOaPE9phPQ3rE/RQN7X?=
 =?us-ascii?q?mOBBQOvddqFtrvu6UDguTIwabyLipSts7V5Y4XAM3RKd6cGGQuPACvGzPOCgYB?=
 =?us-ascii?q?CzmxOjLlilRZgc2Vo2WYspUguLDtnpQUQ7NWXVBzEekVTgxpFcIDLNF8GCg4nK?=
 =?us-ascii?q?GSltIg5HyioR2XT8Jf+tjFTvWTBP/oJR6DgLVEbgdOyrT9acwPMZfl0khucXF+?=
 =?us-ascii?q?nYLXCw/eWs1LriR9bwgy5kJX/zw2RWQo1lOjcQit6WIdEfOuth8wlgZ6J+8q8X?=
 =?us-ascii?q?Ok6k01L1zioCo2jVl3mNP5jDTXezn0aO+5VJtdAiz7umArP5/7ShozZgq32QRn?=
 =?us-ascii?q?OTrfTLVWjJNrdXpsjQ7BvN1IA/EYBaRfYQNWxreSbvEs0F9fgiSh2UJDo+DCDN?=
 =?us-ascii?q?8qmxEnfp2sh3ZB3R9zYtkoI6DZOKtOyB5XnK3K9iOhyO13wAYYPEsL2GKUZCMM?=
 =?us-ascii?q?/kcPM/1uJzKh1v599QuY3TBEfSxEVfktufNs/2smJv+NiSnyl/ZfKke0PvfZK6?=
 =?us-ascii?q?6ft2HLlt+gS1Y8kEgPkg0N+Llw3sALcEeOUU0riryLGFBBKcXGOSlRbsxP6GLU?=
 =?us-ascii?q?eyee9+nAhdp3NICVDO3kTeaS8q0ThwbsAAcsWY9K5cQMGLGo0UfFPYHmKqIIzV?=
 =?us-ascii?q?Mm4wGvbFmaCethcReCgjAB5cq4ioJ0mcFZJzcAESB+PD+x67L/uAAnmryAUc0w?=
 =?us-ascii?q?b3NcWZELcjo/W+W+mihErzJBCiW61qQSzw3GpzvhuiP4DzTmaddnIvCOalckDN?=
 =?us-ascii?q?aw9jA29fnt2AL//ZDXJmW8PtNn6fHV7uZPu5efTvlTUfFztF2Up4hdD1eqXmiH?=
 =?us-ascii?q?RcK0P5L3d6E+fMDzEDCxVVnp2GF9dNv4INv4dvvAugrvX4sB6IQ=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0A4AABDpv5bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?QGCaIECJ4N5iHeLKQGCIYMDhXmFXoFzhmEggVMSAQEYCwgBh24iNAkNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMQgEQAYFiIoJlAwMBAggYBAQBBgFGBgkBASQCJgICA?=
 =?us-ascii?q?x4OAQ4BGBkFA4MZAYFpAQEBFQUKpjZ8Mw0RhA8BgQOCPAQKGQ2CFwUTeIsLF4F?=
 =?us-ascii?q?AP4ERgmSDBYUuglcCiQWHFo86GC4Jhn2HCINEgVqJYgoBET+Efol5g1uBC4lCA?=
 =?us-ascii?q?gQCBAUCFFpsgg1NIxWBbw4LAQwEBoEIE4IUFxKITIVgHgEyAQEIewEBhFSIXwE?=
 =?us-ascii?q?B?=
X-IPAS-Result: =?us-ascii?q?A0A4AABDpv5bh0O0hNFkHgEGBwaBUQkLAQGCaIECJ4N5iHe?=
 =?us-ascii?q?LKQGCIYMDhXmFXoFzhmEggVMSAQEYCwgBh24iNAkNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMQgEQAYFiIoJlAwMBAggYBAQBBgFGBgkBASQCJgICAx4OAQ4BGBkFA4M?=
 =?us-ascii?q?ZAYFpAQEBFQUKpjZ8Mw0RhA8BgQOCPAQKGQ2CFwUTeIsLF4FAP4ERgmSDBYUug?=
 =?us-ascii?q?lcCiQWHFo86GC4Jhn2HCINEgVqJYgoBET+Efol5g1uBC4lCAgQCBAUCFFpsgg1?=
 =?us-ascii?q?NIxWBbw4LAQwEBoEIE4IUFxKITIVgHgEyAQEIewEBhFSIXwEB?=
X-IronPort-AV: E=Sophos;i="5.56,290,1539673200"; 
   d="scan'208";a="54670675"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 28 Nov 2018 06:31:00 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728783AbeK2Bcp (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 20:32:45 -0500
Received: from terminus.zytor.com ([198.137.202.136]:59493 "EHLO
        terminus.zytor.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727941AbeK2Bcp (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 20:32:45 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
        by terminus.zytor.com (8.15.2/8.15.2) with ESMTPS id wASEUCVU2323468
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO);
        Wed, 28 Nov 2018 06:30:12 -0800
Received: (from tipbot@localhost)
        by terminus.zytor.com (8.15.2/8.15.2/Submit) id wASEUBJb2323465;
        Wed, 28 Nov 2018 06:30:11 -0800
Date: Wed, 28 Nov 2018 06:30:11 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to tipbot@zytor.com using -f
From: tip-bot for Tim Chen <tipbot@zytor.com>
Message-ID: <tip-5bfbe3ad5840d941b89bcac54b821ba14f50a0ba@git.kernel.org>
Cc: tim.c.chen@linux.intel.com, jcm@redhat.com, tglx@linutronix.de,
        mingo@kernel.org, longman9394@gmail.com, luto@kernel.org,
        ak@linux.intel.com, linux-kernel@vger.kernel.org,
        dwmw@amazon.co.uk, arjan@linux.intel.com,
        casey.schaufler@intel.com, jpoimboe@redhat.com,
        torvalds@linux-foundation.org, peterz@infradead.org,
        david.c.stewart@intel.com, thomas.lendacky@amd.com,
        jkosina@suse.cz, hpa@zytor.com, dave.hansen@intel.com,
        gregkh@linuxfoundation.org, asit.k.mallick@intel.com,
        keescook@chromium.org, aarcange@redhat.com
Reply-To: peterz@infradead.org, david.c.stewart@intel.com,
          jpoimboe@redhat.com, torvalds@linux-foundation.org,
          casey.schaufler@intel.com, arjan@linux.intel.com,
          aarcange@redhat.com, keescook@chromium.org,
          asit.k.mallick@intel.com, gregkh@linuxfoundation.org,
          dave.hansen@intel.com, hpa@zytor.com, jkosina@suse.cz,
          thomas.lendacky@amd.com, mingo@kernel.org, tglx@linutronix.de,
          jcm@redhat.com, tim.c.chen@linux.intel.com, dwmw@amazon.co.uk,
          linux-kernel@vger.kernel.org, ak@linux.intel.com,
          luto@kernel.org, longman9394@gmail.com
In-Reply-To: <20181125185005.176917199@linutronix.de>
References: <20181125185005.176917199@linutronix.de>
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/pti] x86/speculation: Prepare for per task indirect branch
 speculation control
Git-Commit-ID: 5bfbe3ad5840d941b89bcac54b821ba14f50a0ba
X-Mailer: tip-git-log-daemon
Robot-ID: <tip-bot.git.kernel.org>
Robot-Unsubscribe: Contact <mailto:hpa@kernel.org> to get blacklisted from
 these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=1.5 required=5.0 tests=ALL_TRUSTED,BAYES_00,
        DATE_IN_FUTURE_24_48,FREEMAIL_FORGED_REPLYTO,
        FREEMAIL_REPLYTO_END_DIGIT autolearn=no autolearn_force=no
        version=3.4.2
X-Spam-Level: *
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on terminus.zytor.com
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Commit-ID:  5bfbe3ad5840d941b89bcac54b821ba14f50a0ba
Gitweb:     https://git.kernel.org/tip/5bfbe3ad5840d941b89bcac54b821ba14f50a0ba
Author:     Tim Chen <tim.c.chen@linux.intel.com>
AuthorDate: Sun, 25 Nov 2018 19:33:46 +0100
Committer:  Thomas Gleixner <tglx@linutronix.de>
CommitDate: Wed, 28 Nov 2018 11:57:10 +0100

x86/speculation: Prepare for per task indirect branch speculation control

To avoid the overhead of STIBP always on, it's necessary to allow per task
control of STIBP.

Add a new task flag TIF_SPEC_IB and evaluate it during context switch if
SMT is active and flag evaluation is enabled by the speculation control
code. Add the conditional evaluation to x86_virt_spec_ctrl() as well so the
guest/host switch works properly.

This has no effect because TIF_SPEC_IB cannot be set yet and the static key
which controls evaluation is off. Preparatory patch for adding the control
code.

[ tglx: Simplify the context switch logic and make the TIF evaluation
  	depend on SMP=y and on the static key controlling the conditional
  	update. Rename it to TIF_SPEC_IB because it controls both STIBP and
  	IBPB ]

Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Reviewed-by: Ingo Molnar <mingo@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Jiri Kosina <jkosina@suse.cz>
Cc: Tom Lendacky <thomas.lendacky@amd.com>
Cc: Josh Poimboeuf <jpoimboe@redhat.com>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: David Woodhouse <dwmw@amazon.co.uk>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Casey Schaufler <casey.schaufler@intel.com>
Cc: Asit Mallick <asit.k.mallick@intel.com>
Cc: Arjan van de Ven <arjan@linux.intel.com>
Cc: Jon Masters <jcm@redhat.com>
Cc: Waiman Long <longman9394@gmail.com>
Cc: Greg KH <gregkh@linuxfoundation.org>
Cc: Dave Stewart <david.c.stewart@intel.com>
Cc: Kees Cook <keescook@chromium.org>
Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/20181125185005.176917199@linutronix.de


---
 arch/x86/include/asm/msr-index.h   |  5 +++--
 arch/x86/include/asm/spec-ctrl.h   | 12 ++++++++++++
 arch/x86/include/asm/thread_info.h |  5 ++++-
 arch/x86/kernel/cpu/bugs.c         |  4 ++++
 arch/x86/kernel/process.c          | 20 ++++++++++++++++++--
 5 files changed, 41 insertions(+), 5 deletions(-)

diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 80f4a4f38c79..c8f73efb4ece 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -41,9 +41,10 @@
 
 #define MSR_IA32_SPEC_CTRL		0x00000048 /* Speculation Control */
 #define SPEC_CTRL_IBRS			(1 << 0)   /* Indirect Branch Restricted Speculation */
-#define SPEC_CTRL_STIBP			(1 << 1)   /* Single Thread Indirect Branch Predictors */
+#define SPEC_CTRL_STIBP_SHIFT		1	   /* Single Thread Indirect Branch Predictor (STIBP) bit */
+#define SPEC_CTRL_STIBP			(1 << SPEC_CTRL_STIBP_SHIFT)	/* STIBP mask */
 #define SPEC_CTRL_SSBD_SHIFT		2	   /* Speculative Store Bypass Disable bit */
-#define SPEC_CTRL_SSBD			(1 << SPEC_CTRL_SSBD_SHIFT)   /* Speculative Store Bypass Disable */
+#define SPEC_CTRL_SSBD			(1 << SPEC_CTRL_SSBD_SHIFT)	/* Speculative Store Bypass Disable */
 
 #define MSR_IA32_PRED_CMD		0x00000049 /* Prediction Command */
 #define PRED_CMD_IBPB			(1 << 0)   /* Indirect Branch Prediction Barrier */
diff --git a/arch/x86/include/asm/spec-ctrl.h b/arch/x86/include/asm/spec-ctrl.h
index 8e2f8411c7a7..27b0bce3933b 100644
--- a/arch/x86/include/asm/spec-ctrl.h
+++ b/arch/x86/include/asm/spec-ctrl.h
@@ -53,12 +53,24 @@ static inline u64 ssbd_tif_to_spec_ctrl(u64 tifn)
 	return (tifn & _TIF_SSBD) >> (TIF_SSBD - SPEC_CTRL_SSBD_SHIFT);
 }
 
+static inline u64 stibp_tif_to_spec_ctrl(u64 tifn)
+{
+	BUILD_BUG_ON(TIF_SPEC_IB < SPEC_CTRL_STIBP_SHIFT);
+	return (tifn & _TIF_SPEC_IB) >> (TIF_SPEC_IB - SPEC_CTRL_STIBP_SHIFT);
+}
+
 static inline unsigned long ssbd_spec_ctrl_to_tif(u64 spec_ctrl)
 {
 	BUILD_BUG_ON(TIF_SSBD < SPEC_CTRL_SSBD_SHIFT);
 	return (spec_ctrl & SPEC_CTRL_SSBD) << (TIF_SSBD - SPEC_CTRL_SSBD_SHIFT);
 }
 
+static inline unsigned long stibp_spec_ctrl_to_tif(u64 spec_ctrl)
+{
+	BUILD_BUG_ON(TIF_SPEC_IB < SPEC_CTRL_STIBP_SHIFT);
+	return (spec_ctrl & SPEC_CTRL_STIBP) << (TIF_SPEC_IB - SPEC_CTRL_STIBP_SHIFT);
+}
+
 static inline u64 ssbd_tif_to_amd_ls_cfg(u64 tifn)
 {
 	return (tifn & _TIF_SSBD) ? x86_amd_ls_cfg_ssbd_mask : 0ULL;
diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h
index 523c69efc38a..fa583ec99e3e 100644
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@ -83,6 +83,7 @@ struct thread_info {
 #define TIF_SYSCALL_EMU		6	/* syscall emulation active */
 #define TIF_SYSCALL_AUDIT	7	/* syscall auditing active */
 #define TIF_SECCOMP		8	/* secure computing */
+#define TIF_SPEC_IB		9	/* Indirect branch speculation mitigation */
 #define TIF_USER_RETURN_NOTIFY	11	/* notify kernel of userspace return */
 #define TIF_UPROBE		12	/* breakpointed or singlestepping */
 #define TIF_PATCH_PENDING	13	/* pending live patching update */
@@ -110,6 +111,7 @@ struct thread_info {
 #define _TIF_SYSCALL_EMU	(1 << TIF_SYSCALL_EMU)
 #define _TIF_SYSCALL_AUDIT	(1 << TIF_SYSCALL_AUDIT)
 #define _TIF_SECCOMP		(1 << TIF_SECCOMP)
+#define _TIF_SPEC_IB		(1 << TIF_SPEC_IB)
 #define _TIF_USER_RETURN_NOTIFY	(1 << TIF_USER_RETURN_NOTIFY)
 #define _TIF_UPROBE		(1 << TIF_UPROBE)
 #define _TIF_PATCH_PENDING	(1 << TIF_PATCH_PENDING)
@@ -146,7 +148,8 @@ struct thread_info {
 
 /* flags to check in __switch_to() */
 #define _TIF_WORK_CTXSW							\
-	(_TIF_IO_BITMAP|_TIF_NOCPUID|_TIF_NOTSC|_TIF_BLOCKSTEP|_TIF_SSBD)
+	(_TIF_IO_BITMAP|_TIF_NOCPUID|_TIF_NOTSC|_TIF_BLOCKSTEP|		\
+	 _TIF_SSBD|_TIF_SPEC_IB)
 
 #define _TIF_WORK_CTXSW_PREV (_TIF_WORK_CTXSW|_TIF_USER_RETURN_NOTIFY)
 #define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW)
diff --git a/arch/x86/kernel/cpu/bugs.c b/arch/x86/kernel/cpu/bugs.c
index 3a223cce1fac..1e13dbfc0919 100644
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@ -148,6 +148,10 @@ x86_virt_spec_ctrl(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl, bool setguest)
 		    static_cpu_has(X86_FEATURE_AMD_SSBD))
 			hostval |= ssbd_tif_to_spec_ctrl(ti->flags);
 
+		/* Conditional STIBP enabled? */
+		if (static_branch_unlikely(&switch_to_cond_stibp))
+			hostval |= stibp_tif_to_spec_ctrl(ti->flags);
+
 		if (hostval != guestval) {
 			msrval = setguest ? guestval : hostval;
 			wrmsrl(MSR_IA32_SPEC_CTRL, msrval);
diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
index 70e9832379e1..574b144d2b53 100644
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@ -404,11 +404,17 @@ static __always_inline void amd_set_ssb_virt_state(unsigned long tifn)
 static __always_inline void __speculation_ctrl_update(unsigned long tifp,
 						      unsigned long tifn)
 {
+	unsigned long tif_diff = tifp ^ tifn;
 	u64 msr = x86_spec_ctrl_base;
 	bool updmsr = false;
 
-	/* If TIF_SSBD is different, select the proper mitigation method */
-	if ((tifp ^ tifn) & _TIF_SSBD) {
+	/*
+	 * If TIF_SSBD is different, select the proper mitigation
+	 * method. Note that if SSBD mitigation is disabled or permanentely
+	 * enabled this branch can't be taken because nothing can set
+	 * TIF_SSBD.
+	 */
+	if (tif_diff & _TIF_SSBD) {
 		if (static_cpu_has(X86_FEATURE_VIRT_SSBD)) {
 			amd_set_ssb_virt_state(tifn);
 		} else if (static_cpu_has(X86_FEATURE_LS_CFG_SSBD)) {
@@ -420,6 +426,16 @@ static __always_inline void __speculation_ctrl_update(unsigned long tifp,
 		}
 	}
 
+	/*
+	 * Only evaluate TIF_SPEC_IB if conditional STIBP is enabled,
+	 * otherwise avoid the MSR write.
+	 */
+	if (IS_ENABLED(CONFIG_SMP) &&
+	    static_branch_unlikely(&switch_to_cond_stibp)) {
+		updmsr |= !!(tif_diff & _TIF_SPEC_IB);
+		msr |= stibp_tif_to_spec_ctrl(tifn);
+	}
+
 	if (updmsr)
 		wrmsrl(MSR_IA32_SPEC_CTRL, msr);
 }
