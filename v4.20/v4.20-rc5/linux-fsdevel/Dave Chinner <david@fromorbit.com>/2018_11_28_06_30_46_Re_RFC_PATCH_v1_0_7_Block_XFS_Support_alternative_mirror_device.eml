Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 18:09:58 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga007.fm.intel.com (fmsmga007.fm.intel.com [10.253.24.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 67A59580460;
	Tue, 27 Nov 2018 22:30:58 -0800 (PST)
Received: from fmsmga105.fm.intel.com ([10.1.193.10])
  by fmsmga007-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 22:30:58 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALibk8RKkLLaJwRklu9mcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgULvr+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDJ6/?=
 =?us-ascii?q?YYsBAOUOIftXoIvzqFsVtRuzBxKhBP/zxjJSmnP6wbc33/onHArb3AIgBdUOsH?=
 =?us-ascii?q?HModv7LqgST/66x7TWwDXDbvNW3zH955bSchs8pvyDQKh/cdTQyUYyDA7FgE+Q?=
 =?us-ascii?q?qYvgPzOSzOQCqGmb7/Z6We2zjG4nrhh8rz6yzckvkonEnpwZxkzA+Clj3Yo4K8?=
 =?us-ascii?q?O0RFRmbdOnDJdcrSCXOoluTs4iR2xkojs2x7wEtJKhYSQG1pAqywTBZ/GHbYSF?=
 =?us-ascii?q?5A/oWvyLLjdinn1lfaqyhxas/kikze3xTte00FlUoSpfiNXMtW4C1wbV6seZTv?=
 =?us-ascii?q?tx5ECh2SyA1wzL6+FEJ147lbbDJpI/3rI9koAfvVnNEyPogkn6kaybelk+9uWp?=
 =?us-ascii?q?6enrerDmqYWdN49whAH+KKMumsmnDOQ8MwgOWXWb+Oul2L3g40L5WrNKgeMykq?=
 =?us-ascii?q?XAt5DbK8IbqbCjAwJOzIYj5AiwDy283NQbg3YHNlRFdwyDj4TzPFHOOv/4Ae+l?=
 =?us-ascii?q?g1uwiDdr2+zGPrr5D5XJL3jDk6nucaxy6k5B0wczydFf55RJCrAOOv7zW0nxtM?=
 =?us-ascii?q?DGAR89KQC73+HnCNBl3IMERW2PGrOZML/VsVKQ5uIgOeiMZJMPtzb6MfQl5+Pu?=
 =?us-ascii?q?gmU/mV8SZqSp2ZoXaHalHvVpOUmZYHzsgssfHmcOpAYxUOvqiFiaWz5Je3myR7?=
 =?us-ascii?q?485i08CI++D4fDQZ6ijKaC3Ce8GJ1WYGdGB0uIEXfpcYWERvgNZDiTIs9njjwL?=
 =?us-ascii?q?S7yhR5U92hGpsQ/w06BnIfbM+i0EqZLj08B46PfIlREy8jx0DN6R03uXQGF2hW?=
 =?us-ascii?q?4IQz423KZioU1y0FuD0K54g+BGGtxX/f9GTgA6NZvExexgF9/yQh7BfsuOSFu+?=
 =?us-ascii?q?QdWpGzcxQsg1w98PeUl9HdqigwvH3yqrBb8VirOKCIY18qLaw3j+OcJ9x2za26?=
 =?us-ascii?q?kmilksWtFPOnG+hq5j6wjTAJbEnFiDmKa0a6sQxi7N+32FzWqVok5YVgl8UaHG?=
 =?us-ascii?q?XXAaYkvbttD55kLET7+zBrUrKApBycieKqRUbt3ll0lJRPDmON7GeWK+h3+wBQ?=
 =?us-ascii?q?qUxrOLdIflZn8S3DvDB0QekwAc53CGNRMgCSenuG/eCD1uFVTyY0Lj6+V+qXW7?=
 =?us-ascii?q?TlMqwAGOdUFuy721+hsNj/yGV/wTxq4EuDsmqzhsAFa93tfWC92cpwphfKRQe8?=
 =?us-ascii?q?897E1A1WLDswx9P5qgL695i14acgR3uV7u1hptBoVBl8gqsG0lzA5oJa2E11NB?=
 =?us-ascii?q?ciuS3YrsNb3PNmny4BevZrbM1VHaztmX9bkA6fQip1r4oQGmC1At83Nk09lSzX?=
 =?us-ascii?q?uR/ZHKDAsUUZLsXUc77Rl6p7fGYiYj44PYz2FjMa6xsjXawdImGPMlygq8f9dY?=
 =?us-ascii?q?KK6FFBLyH9cGCMS0Ke0qm0KmbhQLPO1J8K40PsWmd+aJ2aKxPeZgmi6mgnpD4I?=
 =?us-ascii?q?xnzk2M8C98QPbS35kZ2/GYwheHVzDkgVe7s8D4hZpLZSsPEWq40yTkApBeZrdz?=
 =?us-ascii?q?fYoSFWihOcm3ychgiJ73XH5Y8kWuB1cH2M+vZBqTYEbx3QxW1UQLv3OnnTG0wC?=
 =?us-ascii?q?BzkzEstqCfxjDBw/z+dBobPW5GXGljjVb2LYm0ldwaR1Wobw4ymRuh5Eb6wbVb?=
 =?us-ascii?q?patlI2nSR0dIYzb5L2V4XqSssbqCZtZF6Ik0viVPTOS8fVeaR6b/oxQAySPjHG?=
 =?us-ascii?q?hexDchezGxoJr5nB96iGObLHltqnrUYsVwxRbZ5NzBSv9dxDsGRC9kiTbJAliw?=
 =?us-ascii?q?JcWm/dKRl53bqOCxS3qhVoFPcSns1Y6BtDG05WpwDR29nvCznMbqEQw70S/9yt?=
 =?us-ascii?q?lrWj/ErBf6Yon3yau6NfhrcVVvBF/588B6AJ1xkpMshJEM3ngXnpaV8mAGkWvp?=
 =?us-ascii?q?MdVbxLjxbHwCRTMQx97V4Q7l2FBsL36TxoL5UGmdzdVlZ9WgfmwW3Sc95dhQCK?=
 =?us-ascii?q?iI9LxEgTd1ol2goALUYPh9nS0SxeEg6XEEmOEJpBQizj+GDb8MB0lYMjfhlxCJ?=
 =?us-ascii?q?79C4saVWa3yjcbm21Epig9+hCKuOrR1bWHb8Yp0iBzN/7t1jMFLQ133+8p3keN?=
 =?us-ascii?q?7Vbd4JtxybiRHAj/VOKJIql/oHni5nOWP7vX04xO83lx1u3ZemvIeZL2Vh5r62?=
 =?us-ascii?q?AhldNjftfcMc5intjbpCnsaRx42gBY9uGjIPXJv1V/6oFC8SuO/jNwaPFj08t3?=
 =?us-ascii?q?iaFaDeHQ+Z9EdpsXbPH4q3OHGQIXkT1c9iSwWFJExDnAAUWy03npwjGQCv2sPh?=
 =?us-ascii?q?a1115iwL6l77txtMyf9oNx/lXWfEvwqobjY0SJ6CLBtZ9A1C5kHVMdCA4eJ3BS?=
 =?us-ascii?q?1X4pqhrAmVIGyBewtIFX0JWlCDB137Priu4sTA8/GFBuWkKfvCe66OqetYV/eH?=
 =?us-ascii?q?3p+v1opm/zCRNsSAJHViDvs72lZdUnB9AcjWhzIPSykPnSLXc8GbvAu8+jFwrs?=
 =?us-ascii?q?2n8PTkRgPv5YiMC7tTK9lv+Aq2gaCMN+GOniZ5NC1Y24gIxX/JzrgfwVEThztv?=
 =?us-ascii?q?dzmrDbQPqyrNQLjMla9QCh4RczlzO9dQ76IgwglNPtbWhcno1rFjlP46FVdEWU?=
 =?us-ascii?q?blmsGofsEKJ2C9NFXaBEeELriGJDvLw93pbqO4U7FfkOJUtxioszaBD0DjJiiD?=
 =?us-ascii?q?lyXuVx23LeFMjSSbMAZCt42nbhltCXbsTNT9Zx2/Md93iyA2wLIuinPLM24cLS?=
 =?us-ascii?q?Zzc0dXorKM6iNYh+11G3Zd4Xp9MemEhyGZ4vHYK5kMt/trByV0l+RC73U7y7ta?=
 =?us-ascii?q?9idERPNulSvWr95upUymk+aVxjpmVhpOtihEhIaRsUp+PqXZ88oIZXGRtj4E93?=
 =?us-ascii?q?+RABdChZ0tNdrptOoYntTGjrjyIzQE7NXS8uMbHcHfLM/BO30kZ0nHAjnRWScM?=
 =?us-ascii?q?UzPjHmHegUpQirnG+nSLr5QSpILrnZ0UQL5HElcyE6VJWQxeANUeLcIvDXsfmr?=
 =?us-ascii?q?mBgZtNvCLmoQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AIAAChNf5bh0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBVAIBAQEBCwGDWRInhFuIFYsqUgaBNRSJCoRqEYscLBMBh14iNwY?=
 =?us-ascii?q?NAQMBAQEBAQECARMBAQEIDQkIKS+CNiQBgmEBAQEBAgEBAiQTPwUBCQEBChgJJ?=
 =?us-ascii?q?QMMBSghEwWDHIF1BQcBBacvM4pOIotwF3iBB4QjhG2FbwKJBSAyljwJkSYjCoF?=
 =?us-ascii?q?QiDGHA4J5hF+CG5AmgXczGggbFYMngicXjjEsMoECAwEBAwEdEwsBiVsBJQSCI?=
 =?us-ascii?q?wEB?=
X-IPAS-Result: =?us-ascii?q?A0AIAAChNf5bh0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBVAI?=
 =?us-ascii?q?BAQEBCwGDWRInhFuIFYsqUgaBNRSJCoRqEYscLBMBh14iNwYNAQMBAQEBAQECA?=
 =?us-ascii?q?RMBAQEIDQkIKS+CNiQBgmEBAQEBAgEBAiQTPwUBCQEBChgJJQMMBSghEwWDHIF?=
 =?us-ascii?q?1BQcBBacvM4pOIotwF3iBB4QjhG2FbwKJBSAyljwJkSYjCoFQiDGHA4J5hF+CG?=
 =?us-ascii?q?5AmgXczGggbFYMngicXjjEsMoECAwEBAwEdEwsBiVsBJQSCIwEB?=
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="139869800"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 22:30:56 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727519AbeK1RbZ (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 12:31:25 -0500
Received: from ipmail03.adl6.internode.on.net ([150.101.137.143]:31656 "EHLO
        ipmail03.adl6.internode.on.net" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726972AbeK1RbY (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 12:31:24 -0500
Received: from ppp59-167-129-252.static.internode.on.net (HELO dastard) ([59.167.129.252])
  by ipmail03.adl6.internode.on.net with ESMTP; 28 Nov 2018 17:00:49 +1030
Received: from dave by dastard with local (Exim 4.80)
        (envelope-from <david@fromorbit.com>)
        id 1gRtN0-0004DR-Iy; Wed, 28 Nov 2018 17:30:46 +1100
Date: Wed, 28 Nov 2018 17:30:46 +1100
From: Dave Chinner <david@fromorbit.com>
To: "Darrick J. Wong" <darrick.wong@oracle.com>
Cc: Allison Henderson <allison.henderson@oracle.com>,
        linux-block@vger.kernel.org, linux-xfs@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-fsdevel@vger.kernel.org,
        martin.petersen@oracle.com, shirley.ma@oracle.com,
        bob.liu@oracle.com
Subject: Re: [RFC PATCH v1 0/7] Block/XFS: Support alternative mirror device
 retry
Message-ID: <20181128063046.GO6311@dastard>
References: <1543376991-5764-1-git-send-email-allison.henderson@oracle.com>
 <20181128053303.GL6311@dastard>
 <20181128054923.GF8125@magnolia>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20181128054923.GF8125@magnolia>
User-Agent: Mutt/1.5.21 (2010-09-15)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 09:49:23PM -0800, Darrick J. Wong wrote:
> On Wed, Nov 28, 2018 at 04:33:03PM +1100, Dave Chinner wrote:
> > On Tue, Nov 27, 2018 at 08:49:44PM -0700, Allison Henderson wrote:
> > > Motivation:
> > > When fs data/metadata checksum mismatch, lower block devices may have other
> > > correct copies. e.g. If XFS successfully reads a metadata buffer off a raid1 but
> > > decides that the metadata is garbage, today it will shut down the entire
> > > filesystem without trying any of the other mirrors.  This is a severe
> > > loss of service, and we propose these patches to have XFS try harder to
> > > avoid failure.
> > > 
> > > This patch prototype this mirror retry idea by:
> > > * Adding @nr_mirrors to struct request_queue which is similar as
> > >   blk_queue_nonrot(), filesystem can grab device request queue and check max
> > >   mirrors this block device has.
> > >   Helper functions were also added to get/set the nr_mirrors.
> > > 
> > > * Expanding bi_write_hint to bi_rw_hint, now @bi_rw_hint has three meanings.
> > >  1.Original write_hint.
> > >  2.end_io() will update @bi_rw_hint to reflect which mirror this i/o really happened.
> > >  3.Fs set @bi_rw_hint to force driver e.g raid1 read from a specific mirror.
> > > 
> > > * Modify md/raid1 to support this retry feature.
> > > 
> > > * Add b_rw_hint to xfs_buf
> > >   This patch adds a new field b_rw_hint to xfs_buf.  We will use this to set the
> > >   new bio->bi_rw_hint when submitting the read request, and also to store the
> > >   returned mirror when the read compleates
> > 
> > One thing that is going to make this more complex at the XFS layer
> > is discontiguous buffers. They require multiple IOs (and therefore
> > bios) and so we are going to need to ensure that all the bios use
> > the same bi_rw_hint.
> 
> Hmm, we hadn't thought about that.  What happens if we have a
> discontiguous buffer mapped to multiple blocks, and there's only one
> good copy of each block on separate disks in the whole array?
> 
> e.g. we have 8k directory blocks on a 4k block filesystem, only disk 0
> has a good copy of block 0 and only disk 1 has a good copy of block 1?

Then the user has a disaster on their hands because they have
multiple failing disks. 

> I think we're just stuck with failing the whole thing because we can't
> check the halves of the 8k block independently and there's too much of a
> combinatoric explosion potential to try to mix and match.

Yup, user needs to fix their storage before the filesystem can
attempt recovery.

> > > We're not planning to take over all 16 bits of the read hint field; just looking for
> > > feedback about the sanity of the overall approach.
> > 
> > It seems conceptually simple enough - the biggest questions I have
> > are:
> > 
> > 	- how does propagation through stacked layers work?
> 
> Right now it doesn't, though once we work out how to make stacking work
> through device mapper (my guess is that simple dm targets like linear
> and crypt can set the mirror count to min(all underlying devices).
> 
> > 	- is it generic/abstract enough to be able to work with
> > 	  RAID5/6 to trigger verification/recovery from the parity
> > 	  information in the stripe?
> 
> In theory we could supply a raid5 implementation, wherein rw_hint == 0
> lets the raid do as it pleases; rw_hint == 1 reads from the stripe; and
> rw_hint == 2 forces stripe recovery for the given block.

So more magic numbers to define complex behaviours? :P

> A trickier scenario that I have no idea how to solve is the question of
> how to handle dynamic redundancy levels.  We don't have a standard bio
> error value that means "this mirror is temporarily offline", so if you

We can get ETIMEDOUT, ENOLINK, EBUSY and EAGAIN from the block layer
which all indicate temporary errors (see blk_errors[]). Whether the
specific storage layers are actually using them is another matter...

> have a raid1 of two disks and disk 0 goes offline, the retry loop in xfs
> will hit the EIO and abort without even asking disk 1.  It's also
> unclear if we need to designate a second bio error value to mean "this
> mirror is permanently gone".

If we have a mirror based retries, we should probably consider EIO
as "try next mirror", not as a hard failure.

> [Also insert handwaving about whether or not online fsck will want to
> control retries and automatic rewrite; I suspect the answer is that it
> doesn't care.]

Don't care - have the storage fix itself, then check what comes
back and fix it from there.

> [[Also insert severe handwaving about do we expose this to userspace so
> that xfs_repair can use it?]]

I suspect the answer there is through the AIO interfaces....

Cheers,

Dave.
-- 
Dave Chinner
david@fromorbit.com
