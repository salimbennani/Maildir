Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:10:18 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga008.jf.intel.com (orsmga008.jf.intel.com [10.7.209.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 0FE26580460;
	Tue, 27 Nov 2018 19:52:44 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga008-1.jf.intel.com with ESMTP; 27 Nov 2018 19:52:43 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A6LuXSBJhyQysDIqqHtmcpTZWNBhigK39O0sv0rFi?=
 =?us-ascii?q?tYgUL/ryrarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr8zRDqi6L1rSAP2hy?=
 =?us-ascii?q?gaKzA27n3Yis1ojK5FvRmtoxNyz5LRbIyTKfFwfL7SfckCSGRBQMhfSiJPDIC7?=
 =?us-ascii?q?YYQNAeoBJv5YoovmqlcSsRezHxWgCfnzxjNUgHL9wK000/4mEQHDxAEtA9YOsH?=
 =?us-ascii?q?DVrNXuM6cSV/2+wqvWwjXFcvxZxy396JPPchAnvPqBWqh/cc7VyUkuDAPFiVOQ?=
 =?us-ascii?q?pZblPzyL0OQCrnaU7/B7VeKojW4qsAZxoiK1ycgwjonGmJgZxUzD9SV82Ys4I8?=
 =?us-ascii?q?CzRk1jYdO8DpdcqyWXO5FrTs4sXW1kojs2x74atZKhfSUHyowrywPQZvCaaYSE?=
 =?us-ascii?q?/x3uWeeLLTtlmX5oeaiziwiu/UWm1+byTNO70ExQoSpAitTMtm4C1xjU6sWfVP?=
 =?us-ascii?q?t98Vmu2SyV2wDQ9O5EO0Y0mrTfK5I7xb4wjJUTvVzCHi/whkr2kLebels49uWs?=
 =?us-ascii?q?8ejrf7vrqoGGO4NpiQzyLr4il829DOggNwgBRWmb+eCy1L35+k35Ra1Hjvk3kq?=
 =?us-ascii?q?nfrZDbKt0Xpq2nDA9P1IYs9RK/Ay6h0NUWm3kIMkhFdQmZj4jmJV7OOur0DfSh?=
 =?us-ascii?q?jFS2ljdk2fTGMqfmApXXIXjPiK3hcqpl605A1AozyshS55ZVCrECPv3/QEDwtM?=
 =?us-ascii?q?HDAx89Mgy0xfvnCdpn2oMfX2KPHrGWMKfIvVCU4eIvJvGGZJUJtzblN/gl+/nu?=
 =?us-ascii?q?gGc5mVAHfKmpwYEYaHeiEvRmPkWWe3zsgtgaHGcOvwo+SvHqiVKYXT5SYXayQ7?=
 =?us-ascii?q?wz5jUhBI26CofDQ5ingKad0yejAp1WemdGB0iOEXfvaYqIQfQMaCWUIs9nlTwJ?=
 =?us-ascii?q?TryhS44n1RGzuw720btnLuzI+iIGsZLvzsR65+rWlRsq7zx7E9yd032RT2Fzhm?=
 =?us-ascii?q?4HXSQ23KB4oUx+0FuDy7J3g/5DGNxX5vNJVBo6NJHGw+x7DdDyRhzOftOTRFm6?=
 =?us-ascii?q?RdWmBCk7TsgtzN8Wf0Z9B9KigwjA3yWwBb8ZjbiLBJ0u/aLa0Hj8PMJ9y3fA1K?=
 =?us-ascii?q?k8gFgqWMpPNWu6hqFh8wjfHZLGk0Kcl6yyb6QTwDbN9HufzWqJpExXTRR/Ubvb?=
 =?us-ascii?q?UnwFZkvZt9L55ljcQL+oDrgnNghBycuGKqZRbt3pjFNGROrsOdjEYmKxnXuwCg?=
 =?us-ascii?q?iMxr+WcIXqfGAd1j3HCEcYiwAT4WqGNQ8mCyi8uW3eEiJhGUjvY0z29+l+s220?=
 =?us-ascii?q?TkkvwgGObk1h0ae1+xEPifydTfMTwqwLuCM7pzpoG1a92srcC8CcqAp5YKVcfd?=
 =?us-ascii?q?Q97U9b1WLYsgx9OYCgL6Bih1IEbwR7pUTu1w9zCoVBl8gqo2gnzA5zKaKezVNA?=
 =?us-ascii?q?eCmU3ZH2Or3LNGby+AqjZLLR2lHbyNyW4LsA6Owkq1X/uwGkDlAt83F53NhazX?=
 =?us-ascii?q?Sd5o/GAxEPUZ3sSEk38Rt6p7bEYiQm44PU1HtsMbS7szPY2tIpAvclxQikf9tF?=
 =?us-ascii?q?LKyEEwryGdUAB8eyMOwqh0SpbhUcMeFS6a44Jd+pe+GH2a6rJulgmj2mgH9D4I?=
 =?us-ascii?q?B81EKM6iV9RvTJ35YD3/GXwA+HWy3gg1emt8D9gZpEai0KHmqj1SjkA5ZcZrdz?=
 =?us-ascii?q?fYkXE2iuOdC4xtJki57rRXFY7l+jC0oa18CzfRqdckLy3RdX1UQRunGnnSq4zz?=
 =?us-ascii?q?ppkzAmtKaf3SrOw/j8exoDIGJEWG5ijVL0K4iuk98aRFSobxQulBa95Uf6xrJX?=
 =?us-ascii?q?paRlI2nIXEdIeTP7L2VjUqu2q7qDbNRD6JIusSVLTuu8ZUqWRaL6oxsfyynjBX?=
 =?us-ascii?q?dRxCgndzG2vZX0hx56h3iHLHZwr3rZftt8xQzF69zfRv5R3zwGSzd+iTTMAli8?=
 =?us-ascii?q?Pt+p/ciblpvZs+C+UX6hWYNXcSXx0YyAsy6773VwARKjh/CzhsHnEQ8i3C77zd?=
 =?us-ascii?q?ZqUj/ErBT9YontzKm6NeNnfk91BF7z8cZ6G4d+kpcui5EUw3QVmpKV/X8fm2fp?=
 =?us-ascii?q?Ldpbwb7+bGYKRTMTwN7a+gnl1FdjLnKU3Y35UHqdz9BlZ9m7ZGMWxy0849pLCK?=
 =?us-ascii?q?eS8LxLgy91rkCkogLWZPh3hi0dxuc26H4Gn+EJvxIgziCcArARB0ZUJyLtmAqT?=
 =?us-ascii?q?79CisqpXfn2gfqaq1Epxht2hCLCCogdBWHf2YJsiHClw7tlhP1LIynH89obkeN?=
 =?us-ascii?q?zIZ9IJqhKUiwvAj/RSKJ8pivoKgi9nNXj8vHI/ze47kAdu3Yq7vIWcL2Vt/aS5?=
 =?us-ascii?q?AgNXNzHvZsMT/C3tgrhansqMw4+vGZBhEC0RXJT0VfKoDC4StfP/OgmVCjI8rX?=
 =?us-ascii?q?ObGafFEQ+b9UdrtHbPE5GtN3GKK3gV19RiRB+BJENBhAAYRik1npk8Fgqy3szu?=
 =?us-ascii?q?bF955iwN5l7/shZMyPhnNxzhXWfEvguodi04SJuCLBpV8wFC4V3aMdeF4+J3Hi?=
 =?us-ascii?q?FY+IChrQOXJmyaYQRIEX8GWkieC1//Obmu4MHK8/KECeqmM/vOfbKOpPReVveP?=
 =?us-ascii?q?2JKvy5Zm8CyKNsmVJXliCPs72kVYUHB9GsTZnSgPSiMNmyLMac6buAmz+iltos?=
 =?us-ascii?q?+j9/TrXRrl5ZGTBLtKLdVv5xe2jL+DN+GOhSZ5KjVY1pIWyX/L0rgf21EShD90?=
 =?us-ascii?q?dzmwCrQNrirNTKPWmq9KAB8XcSJzNM1U760i2glBI9LUitTw1rRglP46F09FVU?=
 =?us-ascii?q?D9msGufcEFOXy9O0jdBEmVNLWKPznLw8DsbKO4SL1QivhUthKqtTaaFU/jIiqM?=
 =?us-ascii?q?lz3zWx+zNuFMiTmRPAZCt4GlbhZtFW/jQcr6ah26Nd97lyE5zacoiXPKK2EcNy?=
 =?us-ascii?q?Nxc0dMrr2W8CNZje9zG21H7np5M+aEnzyV4PXfKpYTqfFrGDh7l/pG4HQmzLtY?=
 =?us-ascii?q?9CFFS+ZzmCvXr95upUmpk+iPyjV9VhpOpS1GhIaKvUVkJKXY+YNMWXfC/BIR82?=
 =?us-ascii?q?qQDw4GqMdiCt3q6OhszY3LlaTuOHJI99Xf/uMCCMXObsGKKnwsNVzuAjGQRA8E?=
 =?us-ascii?q?SyO7cHHRnGRDn/yIsH6YtJ43rt7rgpVKArtaUkElU/AXEEJoGPQcL5ptGDApi7?=
 =?us-ascii?q?iWiIgP/3X65B3QQthK+57cWv+MDPHHNjmUl/9HagEOzLe+Kp4cZaPh3Ek3Q11+?=
 =?us-ascii?q?nZ/NHQLwUNZBrzd6aQl89ExJ9HllSWt120/jZg63+3gVPfmulxUyh011ZuF7p2?=
 =?us-ascii?q?Sk2Es+Olef/Hh4q0I2g9iw3Wic?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAC5EP5bh0O0hNFkGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUQQBAQEBAQsBg2snjBFfjTYUlyyBcxIBARgTAYdaIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2DIJ7AwMBAiQZAQE3AQUJAQEfMQNUBxIFg?=
 =?us-ascii?q?xyCAgQBpViBbDOCdgEBBYdMCIdihCuBVz+FZAGJGpAZj3UHAoIcBI8RAhaBWYg?=
 =?us-ascii?q?vhwMsl2UCBAIEBQITAYFGgg1NBB+DPIIbDAwLg0qKc1KBBQEBjFcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ABAAC5EP5bh0O0hNFkGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUQQBAQEBAQsBg2snjBFfjTYUlyyBcxIBARgTAYdaIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2DIJ7AwMBAiQZAQE3AQUJAQEfMQNUBxIFgxyCAgQBpViBbDO?=
 =?us-ascii?q?CdgEBBYdMCIdihCuBVz+FZAGJGpAZj3UHAoIcBI8RAhaBWYgvhwMsl2UCBAIEB?=
 =?us-ascii?q?QITAYFGgg1NBB+DPIIbDAwLg0qKc1KBBQEBjFcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="41843211"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 19:52:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727270AbeK1Owk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 09:52:40 -0500
Received: from userp2130.oracle.com ([156.151.31.86]:50934 "EHLO
        userp2130.oracle.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726847AbeK1Owk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 09:52:40 -0500
Received: from pps.filterd (userp2130.oracle.com [127.0.0.1])
        by userp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id wAS3mp2q033441;
        Wed, 28 Nov 2018 03:52:31 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com; h=from : to : cc :
 subject : date : message-id : in-reply-to : references; s=corp-2018-07-02;
 bh=BJnmFYQQlGRu/5A4+zMVKg4kh2H7+FpVmnF4JYWo4q4=;
 b=wkK785TJDZl3d3oYaFCYpE0DxZz8WoqFzGoHUH2P2KEUVnsPz9EREcaPfrtpW40WP5lE
 QlTjVLAHueQfS9uTXIzE0sYc3G/ahSdKC0AF49h3qgTfbDJ8KxtZ3P0tfy9HevGPsI3H
 51/tKC5/TBmWO4R+7nPRn2KthnJWthLoMbgRK6iD0hGCpsZnZz2KMFaJOxzKF4XMm5S+
 iiS7cJgt+cc+y7d0pc5YPqxTgpzZkK+YBfgsc3q98yArG2SmBk1Ir6aZ3f5+NjEBXrqL
 13nJVEnWO2rhl88DB5fnq8QNKU5BBCF3WltBa7WDdwR1hV43ImN5CwsgGejtENWyyKNg 6A== 
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
        by userp2130.oracle.com with ESMTP id 2nxx2u7tkm-1
        (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Wed, 28 Nov 2018 03:52:31 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
        by aserv0021.oracle.com (8.14.4/8.14.4) with ESMTP id wAS3qU2Q018655
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
        Wed, 28 Nov 2018 03:52:30 GMT
Received: from abhmp0014.oracle.com (abhmp0014.oracle.com [141.146.116.20])
        by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id wAS3qUt4005857;
        Wed, 28 Nov 2018 03:52:30 GMT
Received: from localhost.localdomain (/70.176.225.12)
        by default (Oracle Beehive Gateway v4.0)
        with ESMTP ; Tue, 27 Nov 2018 19:52:30 -0800
From: Allison Henderson <allison.henderson@oracle.com>
To: linux-block@vger.kernel.org, linux-xfs@vger.kernel.org,
        linux-kernel@vger.kernel.org, linux-fsdevel@vger.kernel.org
Cc: martin.petersen@oracle.com, shirley.ma@oracle.com,
        bob.liu@oracle.com, allison.henderson@oracle.com
Subject: [PATCH v1 1/7] block: add nr_mirrors to request_queue
Date: Tue, 27 Nov 2018 20:49:45 -0700
Message-Id: <1543376991-5764-2-git-send-email-allison.henderson@oracle.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543376991-5764-1-git-send-email-allison.henderson@oracle.com>
References: <1543376991-5764-1-git-send-email-allison.henderson@oracle.com>
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=9090 signatures=668685
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 suspectscore=0 malwarescore=0
 phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
 adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.0.1-1810050000 definitions=main-1811280033
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Bob Liu <bob.liu@oracle.com>

When fs data/metadata checksum mismatch, lower block devices may have other
correct copies. e.g if we did raid1 for protecting fs metadata.
Then fs could try other copies of metadata instead of panic, but fs need be
awared how many mirrors the block devices have and specify which mirror/copy to
retry.

This patch add @nr_mirrors to struct request_queue which is similar as
blk_queue_nonrot(), filesystem can grab device request queue and check the
number of mirrors of this block device.

@nr_mirrors is 0 by default which means no mirrors, drivers e.g raid1 are
responsible for setting the right value.

Also added helper functions for get/set the number of mirrors for a specific
device request queue.

Todo:
* Export nr_mirrors through /sysfs.

Signed-off-by: Bob Liu <bob.liu@oracle.com>
---
 block/blk-core.c       |  3 +++
 block/blk-settings.c   | 18 ++++++++++++++++++
 include/linux/blkdev.h |  3 +++
 3 files changed, 24 insertions(+)

diff --git a/block/blk-core.c b/block/blk-core.c
index ce12515f..50779c8 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1082,6 +1082,9 @@ struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id,
 	if (blkcg_init_queue(q))
 		goto fail_ref;
 
+	/* Set queue default mirrors to 0 explicitly. */
+	blk_queue_set_mirrors(q, 0);
+
 	return q;
 
 fail_ref:
diff --git a/block/blk-settings.c b/block/blk-settings.c
index 696c04c..6f4f9c7 100644
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@ -904,6 +904,24 @@ void blk_queue_write_cache(struct request_queue *q, bool wc, bool fua)
 }
 EXPORT_SYMBOL_GPL(blk_queue_write_cache);
 
+/*
+ * Get the number of read redundant mirrors.
+ */
+unsigned short blk_queue_get_mirrors(struct request_queue *q)
+{
+	return q->nr_mirrors;
+}
+EXPORT_SYMBOL(blk_queue_get_mirrors);
+
+/*
+ * Set the number of read redundant mirrors.
+ */
+void blk_queue_set_mirrors(struct request_queue *q, unsigned short mirrors)
+{
+	q->nr_mirrors = mirrors;
+}
+EXPORT_SYMBOL(blk_queue_set_mirrors);
+
 static int __init blk_settings_init(void)
 {
 	blk_max_low_pfn = max_low_pfn - 1;
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 4293dc1..fac35da 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -680,6 +680,7 @@ struct request_queue {
 
 #define BLK_MAX_WRITE_HINTS	5
 	u64			write_hints[BLK_MAX_WRITE_HINTS];
+	unsigned short		nr_mirrors; /* Default value is zero */
 };
 
 #define QUEUE_FLAG_QUEUED	0	/* uses generic tag queueing */
@@ -1267,6 +1268,8 @@ extern void blk_queue_rq_timed_out(struct request_queue *, rq_timed_out_fn *);
 extern void blk_queue_rq_timeout(struct request_queue *, unsigned int);
 extern void blk_queue_flush_queueable(struct request_queue *q, bool queueable);
 extern void blk_queue_write_cache(struct request_queue *q, bool enabled, bool fua);
+extern unsigned short blk_queue_get_mirrors(struct request_queue *q);
+extern void blk_queue_set_mirrors(struct request_queue *q, unsigned short mirrors);
 
 /*
  * Number of physical segments as sent to the device.
-- 
2.7.4

