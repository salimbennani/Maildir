Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:46:23 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 6B517580213;
	Thu, 29 Nov 2018 07:08:08 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 07:08:08 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3ALZAxzRDlXZ6ZHhnF2ulLUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7+psWwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95RWSJfH428?=
 =?us-ascii?q?c4UBAekPPelaoYb9pkcBoxSxCgm3HOPiyCRFhmPv3aAgz+gtDRvL0BImEtkTsH?=
 =?us-ascii?q?rUttL1NKIKXO2o1qnIzC/Mb/VL0jng9IjHaAohofKSUrNwbMHczlQiFxnEjlqK?=
 =?us-ascii?q?r4zpJS6b1vgXvGiB7OpvS+KuhnU9pAFrpzij3Nsjio7Mho8MzF3P6CZ3wJ4tKN?=
 =?us-ascii?q?GmVEJ2ZcSoHIZeui2ELYd6X8AvT31ytCs7yLAKoYC3cDUIxZg92hLSZOCLf5KV?=
 =?us-ascii?q?7h7/VeudOzd1iG59dLKxmRm/8lSsx+j5W8auzVpHrjdKn9zWuX0M2BHe5c2KR/?=
 =?us-ascii?q?tm8Uqg3TuC0h7f5+VHLE0wk6fQNoQvzaQqlpUJtETOBi/2l1vyjK+Rbkgk5Oeo?=
 =?us-ascii?q?5Pr9Yrn8pZ+TKZV0igfgPaQqgMC/Bv44MgcWU2ia/+SzyqHj8FXnTLlWivA6iL?=
 =?us-ascii?q?TVvZ7EKcgBu6K0ABNZ3pwi5hu9Fzum1c4XnXgDLFJLYhKHiI3pNknKIPD5C/e/?=
 =?us-ascii?q?nlutnC5ox//YJL3hBIvCLnzanLfmc7d97VBTyBAowNBB6JJbFKsBLOjwWkDvrt?=
 =?us-ascii?q?zYCAE2Mwiuz+bgEtV92ZsSWXiTDa+BLKPSrViI6/orI+mNZ48apizxKvc45/P1?=
 =?us-ascii?q?iX85mFkdfbSm3JcNaXC4GOhmLFudYXb2ntgBFmIKtBIkTOP2kF2CTSJTZ3GqUq?=
 =?us-ascii?q?I8/D47CZ6mAp3ERoy3gLyBwT20HptZZm1dDlCMEHHod5iLWvsWaSKSJNNhnSIA?=
 =?us-ascii?q?VbS7V4Ah0hSuvhfgy7V7NurU5jEYtZX72dh34O3ciws+9T9zD8Sb1WGNSHp5nm?=
 =?us-ascii?q?cJRz8wwaB+rlZxylaF0ahknfNYEcZf6O9OUgc/LZTc1fB1C8juWgLdedeEUEyp?=
 =?us-ascii?q?Qs6mATE2TdI92cUObFx/G9i5ihDD3iyqA6IalrCRBZw09L7c0Gb1J8pn13nG06?=
 =?us-ascii?q?whhUE8QsRTLW2mmrJ/9w/LCo7KiUqZkbymdaAd3CHX8meDwnGDvEVZUA52TKXE?=
 =?us-ascii?q?UmoTZkrQrdTl+EzCS6WiBqggMgtE0cSCMLdFasX1jVVaQ/fuIMnRbHivm2iuHx?=
 =?us-ascii?q?qIxqmDbIzxe2oD2iXRD0wEkwMW/XaCLgU+Aiaho2TDDD1hD17vYkXs8fVgp3O/?=
 =?us-ascii?q?VEM70waKb0h53bqv5hEVneCcS+8U3r8cpSgusSt0E0in09LWEdWAoRFhc7taYd?=
 =?us-ascii?q?4m5FdH1GTZtxFyP5C6LqBigEIefBpzv0/0yxp3DYBAm9AwrHw21ApyNb6Y0FRZ?=
 =?us-ascii?q?ejOE3JDwP7rXKnXy/BGvcaLWxkvS0NGM+qcL6fQ4rVrjsRqtFkoj9XVnztZU32?=
 =?us-ascii?q?Gd5pXMEAodT5bxXlwr+Bh9orHQejM96J/M1X1wLam0tSfP1MgtBOQ7xRevYdde?=
 =?us-ascii?q?PLmfGw/vDsIVHc6uKO8tm1i3dR8EOOFS9KgpP8KpbfeG2airPPp+kzKil2hI/I?=
 =?us-ascii?q?d90keU/SpmVuHIx4oFw+2f3gafVzb8kU2tvdztlYFFZTEdBGy/ySf/CY5VZ61y?=
 =?us-ascii?q?e5sLCGi0L822wNV+m4DiW3pC+FG/AFMG3dejeQCOYFzlwQ1QyUMXrGS9mSu50z?=
 =?us-ascii?q?N7iSspobeY3CDUxeTtagAHOm9SSGZ+l1jsJZW7gM4AXEivaQgkjx+l5Uf8x6hG?=
 =?us-ascii?q?q6VzNWjTQUFUfyfoK2FuSLe/tr2HY8RX8pMnrT1XUPigYVCdUrP8oxoa3znjHm?=
 =?us-ascii?q?dE3zA7ajeqt479nxx7jmKdMXlyoGDYecF22RfQ+tjcSeRN0ToBQSlykSPXCUSk?=
 =?us-ascii?q?P9m14dWUkI/OsuKkWGK7VZ1Tci7rwZmbtCSh5m1qAhy/n/atld3hCgU61S7719?=
 =?us-ascii?q?93VSTHthr8Y4/r17ikPuJjZEVnGFj8689iEIFkjoQwnI0Q2WQdhpiN/XsIi2Dz?=
 =?us-ascii?q?Pc9Z2aL/anoAXjoLw9/T4Aj410xvNHOJx4TlVnqDxsttfcW1YmQT2igl9cBFFL?=
 =?us-ascii?q?+U7KBYnStyule4rhjeYflnkjcd1Psh8ngag+4StQopzyWdBK0SHEZCMSztkRSI?=
 =?us-ascii?q?886xrKFNaGmzdriw0VJ0ncq9A7GavgFcRHH5d48nHS9x7cVwKkjA0XPt5YH/ZN?=
 =?us-ascii?q?nfc8gTuQaKnBfagOhYM5YxlvsMhSp6NmPxp3wly+gnjRNw2ZG2ppSIK2Jo/Kih?=
 =?us-ascii?q?GB5XKiX1Z98P+jHqlategsGW34W1EpRgADoLWoboTemzEDITrvnnMweOEDshqn?=
 =?us-ascii?q?aUA7bfHAmf6Ft4oHLLCZykK3aXJHwBx9V4WBadPFBfgBwTXDgihZE2DAeqxMj8?=
 =?us-ascii?q?cEtj4jAR+0X1qh9NyuJuKhn+XX3TpAauajcoVpefKABa4R1F50fQKcae9P58Hz?=
 =?us-ascii?q?lE/p29qwyAMm6baB5NDW4XQUyIHUzjMqOt5dnd8OiYG+y+IOHVYbiVrexeVvGI?=
 =?us-ascii?q?xY+g04d8/jaMMNmPMWdmD/EhxkVDWnV5EdzDmzoTUywXiz7Nb8mDqRa8/S13s9?=
 =?us-ascii?q?m/8OnxVwLp/4ePELxSMdNg+x2thaeDNuiQhDt2KDpC15MMw2PIx6Yb3FIIly5u?=
 =?us-ascii?q?cDytG6watSHRVKLQhrNXDxkDZiNzKsRI7qE83gpMOcLBidP1zLl4jvErBFdfSF?=
 =?us-ascii?q?zhgdqkZcgLI2G7KVPGC1yHNLWAJT3X3c73ZbmwRqFXjOVRrxewoyqUE1f/PjSf?=
 =?us-ascii?q?kDnkTwqgMfxXgyGBIhNfuJuxchJsCWX4SNLmaxu7MMJ4jDEswL00gG/KOnAYMT?=
 =?us-ascii?q?Rmb0xNqbiQ5ztCgvpjA2xB8mZlLe6cliaF7unYL4wavudxDitol+JV/nI6xqBR?=
 =?us-ascii?q?7CFFQvx1hSTTosRvo1GgjumA1D5nXABSpTZMgYKBpV9iNrnB9plcRXbE+woA7G?=
 =?us-ascii?q?WKBBQMottlC9vvtLhRy9jPjq3zLjhC/snQ/csdAcjUNc2GPGAgMRrvBD7bEg8F?=
 =?us-ascii?q?QSS3OmHYgkwO2M2Vo1mUp51yj5H2m9JaTrpSTl8dHfQWB014BtsYKdFwRDxywp?=
 =?us-ascii?q?CBi8tdz2C/pR+Zf9lTpJPKR7rGK+/uITDftqVNfRgF0JvxN4FVPYr+jR8xImJm?=
 =?us-ascii?q?lZjHThKDFetGpTdsO0pt+B1A?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BAAAAO/f9bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBVAQBAQsBgTBQgVwECycKhzYDkAxKgg0UmFQDXwErAYRAgzQiNwYNAQMBAQE?=
 =?us-ascii?q?BAQECARMBAQEIDQkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBAREmAQQBCQEBAQEID?=
 =?us-ascii?q?goJFRADDCMlAgQOChaDBoFqAw0IAQIBAZsNAooHgWwzgnYBAQWFBxiCCQiMFoF?=
 =?us-ascii?q?XP4MlSQcuhQGFW4kJghKUNQ9GBwKCIY8GEBOBWog0hw6VGoMNAgQCBAUCDQEBB?=
 =?us-ascii?q?YFcgXczGiODPIIbDBcSgziKU3KBBQEBIYt6AYEeAQE?=
X-IPAS-Result: =?us-ascii?q?A0BAAAAO/f9bh0O0hNFkHAEBAQQBAQcEAQGBVAQBAQsBgTB?=
 =?us-ascii?q?QgVwECycKhzYDkAxKgg0UmFQDXwErAYRAgzQiNwYNAQMBAQEBAQECARMBAQEID?=
 =?us-ascii?q?QkIKSMMgjYkAYJhAQEBAQIBAQIkEwYBAREmAQQBCQEBAQEIDgoJFRADDCMlAgQ?=
 =?us-ascii?q?OChaDBoFqAw0IAQIBAZsNAooHgWwzgnYBAQWFBxiCCQiMFoFXP4MlSQcuhQGFW?=
 =?us-ascii?q?4kJghKUNQ9GBwKCIY8GEBOBWog0hw6VGoMNAgQCBAUCDQEBBYFcgXczGiODPII?=
 =?us-ascii?q?bDBcSgziKU3KBBQEBIYt6AYEeAQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="42828939"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 07:08:06 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728989AbeK3BTj (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 20:19:39 -0500
Received: from mail-eopbgr70080.outbound.protection.outlook.com ([40.107.7.80]:11232
        "EHLO EUR04-HE1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728902AbeK3BTi (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 20:19:38 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=armh.onmicrosoft.com;
 s=selector1-arm-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=wQKAe95NCXTuAd8gLusSd8EGj4rFbjdJkx7vI9FnfnU=;
 b=rPJy1qjzRNg8CDPTtd3j6eq1xZh1pcGdbxS3sYtTne18NfkUbbDkiX5VVsc+zKZrC4kuW/kIAy3hoyaNMItqecTCWDnOGkTPGfTcofzAcQohkYXH3ZJq9rZSd8nSQ9zoYBPYmlT01opefigHXO/1EAAOXO0s+SGvBm/Wx1CcIw8=
Received: from AM6PR08MB3030.eurprd08.prod.outlook.com (52.135.163.139) by
 AM6PR08MB3717.eurprd08.prod.outlook.com (20.178.88.22) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1361.14; Thu, 29 Nov 2018 14:14:05 +0000
Received: from AM6PR08MB3030.eurprd08.prod.outlook.com
 ([fe80::a15d:a644:5b69:2989]) by AM6PR08MB3030.eurprd08.prod.outlook.com
 ([fe80::a15d:a644:5b69:2989%5]) with mapi id 15.20.1361.019; Thu, 29 Nov 2018
 14:14:05 +0000
From: Brian Starkey <Brian.Starkey@arm.com>
To: Liam Mark <lmark@codeaurora.org>
CC: nd <nd@arm.com>, Sumit Semwal <sumit.semwal@linaro.org>,
        "linux-arm-kernel@lists.infradead.org" 
        <linux-arm-kernel@lists.infradead.org>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "devel@driverdev.osuosl.org" <devel@driverdev.osuosl.org>,
        Martijn Coenen <maco@android.com>,
        dri-devel <dri-devel@lists.freedesktop.org>,
        John Stultz <john.stultz@linaro.org>,
        Todd Kjos <tkjos@android.com>,
        Arve Hjonnevag <arve@android.com>,
        "linaro-mm-sig@lists.linaro.org" <linaro-mm-sig@lists.linaro.org>,
        Laura Abbott <labbott@redhat.com>
Subject: Re: [RFC PATCH v2] android: ion: How to properly clean caches for
 uncached allocations
Thread-Topic: [RFC PATCH v2] android: ion: How to properly clean caches for
 uncached allocations
Thread-Index: AQHUcjBnSvenHVoYw0amObMa8s0GR6VY/NIAgAo60wCAAF3pgIABUiWAgABJ+ACAAU1AgIAAeD+A
Date: Thu, 29 Nov 2018 14:14:05 +0000
Message-ID: <20181129141359.s2b5fafnj24oj2bv@DESKTOP-E1NTVVP.localdomain>
References: <alpine.DEB.2.02.1802282111320.22860@lmark-linux.qualcomm.com>
 <b1479541-13bd-85ea-f9c7-25264c91f9b9@redhat.com>
 <alpine.DEB.2.02.1803081635170.20592@lmark-linux.qualcomm.com>
 <alpine.DEB.2.10.1811011454430.23412@lmark-linux.qualcomm.com>
 <20181120164636.jcw7li2uaa3cmwc3@DESKTOP-E1NTVVP.localdomain>
 <alpine.DEB.2.10.1811262051310.9248@lmark-linux.qualcomm.com>
 <20181127103551.3phyldvtjbdsxetf@DESKTOP-E1NTVVP.localdomain>
 <alpine.DEB.2.10.1811272231460.20916@lmark-linux.qualcomm.com>
 <20181128111052.q2xokwcpuucynoft@DESKTOP-E1NTVVP.localdomain>
 <alpine.DEB.2.10.1811282249350.28066@lmark-linux.qualcomm.com>
In-Reply-To: <alpine.DEB.2.10.1811282249350.28066@lmark-linux.qualcomm.com>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
user-agent: NeoMutt/20180716-849-147d51
x-originating-ip: [217.140.106.50]
x-clientproxiedby: CWLP265CA0332.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:401:57::32) To AM6PR08MB3030.eurprd08.prod.outlook.com
 (2603:10a6:209:45::11)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Brian.Starkey@arm.com; 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-publictraffictype: Email
x-microsoft-exchange-diagnostics: 1;AM6PR08MB3717;6:LaJkTWjguUw0onTK3okru9QBmtDDTaEw6I6LqQlSkDpBDqxNravD2L41EtZRLrkroQiBuk2MfX2wTf2eKEHzsuAf6PKjIIlyuGBi+bnJgTUBUEo+hweh/QwPr741RIIicrgkSSOZAFtp4lTzPHKVJnkYS+2xpmrfiXsCzw4NEVQTT1EvmjvyPZupAPF71FCDtz+jp261GPmFJQBcIx9KoF/cK+jEttQVq3QoUtcfIyDMggcmd/g+MoEfdk6Xyrlng0GNo69YR+9Yxmut3mmM1AvyTg0pFc24Wx+oFdpvwgI5Lr/xHhTv4tJ9orinB/ns6mqGnKIlujtgaClzkMNOF5F85p1TRQK4oFxTz/JjC3nfPI9TwTAf7ctpPGk3p4uzNIIDySEjg2Me5dvBrN2nvBQLYTLqG2LdZ4aMFkVfhj9kauT4Snifnhhv6CnG45dRzTQUVfnqvJC19Gk+jNkrZg==;5:9mCcdeL52BqnKv5wzJTyiXkK2b7krhOwcMOOQJaIGAhdVWZapt2oBD2FhkLIdRZwAsSObcbFX9s8xmSHdgS94188jMRcCMmN2KjYR+G92KbG3gskq+IK1bxzm3Qokx1WGIaT3R/eNC/e1I8w8MbdOnaEn1R1yuP23HFR52sg72M=;7:eckaeHy+eglO3U7U/dk3LPCiezyNqUlM3YOx8mCnR+eIlIbEDflyNE1jBHR2SR9U/YDowCxk0S6kBrsbpxLSlqJw83sXgZ0kU+6ufXT/uCzcLVGWIZNyLuBG+wf03NZXVOzqmbASdyNPLXpjd37Z4w==
x-ms-office365-filtering-correlation-id: 12d4764e-a0a4-4a35-d41d-08d65604eb52
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4618075)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060)(7193020);SRVR:AM6PR08MB3717;
x-ms-traffictypediagnostic: AM6PR08MB3717:
nodisclaimer: True
x-microsoft-antispam-prvs: <AM6PR08MB371745B2DB5E08F468695D54F0D20@AM6PR08MB3717.eurprd08.prod.outlook.com>
x-ms-exchange-senderadcheck: 1
x-exchange-antispam-report-cfa-test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(5005006)(8121501046)(93006095)(93001095)(3231453)(999002)(944501410)(52105112)(3002001)(10201501046)(6055026)(148016)(149066)(150057)(6041310)(20161123562045)(20161123558120)(20161123560045)(20161123564045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(201708071742011)(7699051)(76991095);SRVR:AM6PR08MB3717;BCL:0;PCL:0;RULEID:;SRVR:AM6PR08MB3717;
x-forefront-prvs: 0871917CDA
x-forefront-antispam-report: SFV:NSPM;SFS:(10009020)(39860400002)(396003)(366004)(376002)(346002)(136003)(189003)(199004)(76176011)(7416002)(476003)(5660300001)(186003)(6512007)(71190400001)(71200400001)(86362001)(6486002)(2906002)(7736002)(6116002)(3846002)(305945005)(1076002)(6436002)(229853002)(9686003)(97736004)(68736007)(561944003)(54906003)(256004)(6916009)(5024004)(217873002)(58126008)(14444005)(106356001)(25786009)(66066001)(4326008)(316002)(81156014)(72206003)(8676002)(105586002)(81166006)(446003)(14454004)(8936002)(486006)(478600001)(11346002)(386003)(102836004)(33896004)(6506007)(93886005)(53936002)(52116002)(99286004)(6246003)(44832011)(26005);DIR:OUT;SFP:1101;SCL:1;SRVR:AM6PR08MB3717;H:AM6PR08MB3030.eurprd08.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;MX:1;A:1;
x-microsoft-antispam-message-info: g5RQ4HYTM5DCG/+qbEQc8ky6rOIHhfiTAvvtvQOlqWm16gsaBaZ14WFzF3AJLl/rKkyy+7KbnAD0MsjB+HTw8eEaPg4xcxMSn79TVnK/cjXiaOVX64/rkJU3sI6U04al19Wd8mDi192tQdKwTM6yGtOaUoB33FCNE0EOZix5nheECkeXKMrMnR3GgrbuYC77RuqIZSk4wxdqJaM/+DzxRhV2R7ktELm/wLXP668BB+pKHwbh+kqTozrnndvuvfoCEiELZUG85kCx2/3aezTyjijLaJxOwJlEbPGwS+2mwXlgapb5up2uc6z2Pzc6G01BqiRqsnH3dJ7LXLfaFKa7W1PDMHpHLED1Jyqr9AG2Juo=
spamdiagnosticoutput: 1:99
spamdiagnosticmetadata: NSPM
Content-Type: text/plain; charset="us-ascii"
Content-ID: <71534B3F7525504B8B47A731A1A188F4@eurprd08.prod.outlook.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-OriginatorOrg: arm.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 12d4764e-a0a4-4a35-d41d-08d65604eb52
X-MS-Exchange-CrossTenant-originalarrivaltime: 29 Nov 2018 14:14:05.3119
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: f34e5979-57d9-4aaa-ad4d-b122a662184d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM6PR08MB3717
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 11:03:37PM -0800, Liam Mark wrote:
> On Wed, 28 Nov 2018, Brian Starkey wrote:
> > On Tue, Nov 27, 2018 at 10:46:07PM -0800, Liam Mark wrote:
> > > On Tue, 27 Nov 2018, Brian Starkey wrote:
> > > > On Mon, Nov 26, 2018 at 08:59:44PM -0800, Liam Mark wrote:
> > > > > On Tue, 20 Nov 2018, Brian Starkey wrote:

[snip]

> > > >=20
> > >=20
> > > Sounds like you are suggesting using carveouts to support uncached?
> > >=20
> >=20
> > No, I'm just saying that ion can't give out uncached _CPU_ mappings
> > for pages which are already mapped on the CPU as cached.

Probably this should have been: s/can't/shouldn't/

> >=20
>=20
> Okay then I guess I am not clear on where you would get this memory=20
> which doesn't have a cached kernel mapping.
> It sounded like you wanted to define sections of memory in the DT as not=
=20
> mapped in the kernel and then hand this memory to=20
> dma_declare_coherent_memory (so that it can be managed) and then use an=20
> ION heap as the allocator.  If the memory was defined this way it sounded=
=20
> a lot like a carveout. But I guess you have some thoughts on how this=20
> memory which doesn't have a kernel mapping can be made available for gene=
ral
> use (for example available in buddy)?
>=20
> Perhaps you were thinking of dynamically removing the kernel mappings=20
> before handing it out as uncached, but this would have a general system=20
> performance impact as this memory could come from anywhere so we would=20
> quickly lose our 1GB block mappings (and likely many of our 2MB block=20
> mappings as well).
>=20

All I'm saying, with respect to non-cached memory and mappings, is
this:

I don't think ion should create non-cached CPU mappings of memory
which is mapped in the kernel as cached.

By extension, that means that in my opinion, the only way userspace
should be able to get a non-cached mapping, is by allocating from a
carveout.

However, I don't think this should be what we do in our complicated
media-heavy systems - carveouts are clearly impractical, as is
removing memory from the kernel map. What I think we should do, is
always do CPU access via cached mappings, for memory which is mapped
in the kernel as cached.

[snip]

> >=20
>=20
> I am not sure I am properly understanding as this is what my V2 patch=20
> does, then when it gets an opportunity it allows the memory to be=20
> re-mapped as uncached.

It's the remapping as uncached part which I'm not so keen on. It just
seems rather fragile to have mappings for the same memory with
different attributes around.

>=20
> Or are you perhaps suggesting that if the memory is allocated from a=20
> cached region then it always remains as cached, so only provide uncached=
=20
> if it was allocated from an uncached region? If so I view all memory=20
> available to the ION system heap for uncached allocations as having a=20
> cached mapping (since it is all part of the kernel logical mappigns), so =
I=20
> can't see how this would ever be able to support uncached allocations.

Yeah, that's exactly what I'm saying. The system heap should not
allow uncached allocations, and, memory allocated from the system heap
should always be mapped as cached for CPU accesses.

Non-cached allocations would only be allowed from carveouts (but as
discussed, I don't think carveouts are a practical solution for the
general case).

The summary of my proposal is that instead of focussing on getting
non-cached allocations, we should make cached allocations work better,
so that non-cached aliases of cached memory aren't required.

[snip]

>=20
> Unfortunately if are only using cached mappings it isn't only the first=20
> time you dma map the buffer you need to do cache maintenance, you need to=
=20
> almost always do it because you don't know what CPU access happened (or=20
> will happen) without a device.

I think you can always know if CPU _has_ accessed the buffer - in
begin_cpu_access, ion can set a flag, which it checks in map_dma_buf.
If that flag says it's been touched, then a cache clean is needed.

Of course you can't predict the future - there's no way to know if the
CPU _will_ access the buffer - which I think is what you're getting at
below.

> Explained more below.
>=20
> > > But with this cached memory you get poor performance because you are=
=20
> > > frequently doing cache mainteance uncessarily because there *could* b=
e CPU access.
> > >=20
> > > The reason we want to use uncached allocations, with uncached mapping=
s, is=20
> > > to avoid all this uncessary cache maintenance.
> > >=20
> >=20
> > OK I think this is the key - you don't actually care whether the
> > mappings are non-cached, you just don't want to pay a sync penalty if
> > the CPU never touched the buffer.
> >=20
> > In that case, then to me the right thing to do is make ion use
> > dma_map_sg_attrs(..., DMA_ATTR_SKIP_CPU_SYNC) in ion_map_dma_buf(), if
> > it knows that the CPU hasn't touched the buffer (which it does - from
> > {begin,end}_cpu_access).
> >=20
>=20
> Unfortunately that isn't the case we are trying to optimize for,  we=20
> aren't trying to optimize for the case where CPU *never* touches the=20
> buffer we are trying to optimize for the case where the CPU may *rarely*=
=20
> touch the buffer.
>=20
> If a client allocates cached memory the driver calling dma map and dma=20
> unmap has no way of knowing if at some pointe further down the pipeline=20
> there will be some userspace module which will attempt to do some kind
> of CPU access (example image library post processing).  This userspace=20
> moduel will call the required DMA_BUF_IOCTL_SYNC  IOCTLs, however there=20
> may no longer be a device attached, therefore these calls won't=20
> necessarily do the appropriate cache maintenance.

(as a slight aside: Is cache maintenance really slower than the CPU
running image processing algorithms on a non-cached mapping?
Intuitively it seems that doing processing on a cached mapping with
cache maintenance should far outperform direct non-cached access. I
understand that this isn't the real issue, and what you really care
about is being able to do device<->device operation without paying a
cache maintenance penalty. I'm just surprised that CPU processing on
non-cached mappings isn't *so bad* that it makes non-cached CPU access
totally untenable)

>=20
> So what this means is that if a cached buffers is used you have to at=20
> least  always to a cache invalidating when dma unmapping (from a device=20
> which isn't io-coherrent that did a write)  otherwise there could be a CP=
U=20
> attempted to read that data using a cached mapping which could end up=20
> reading a stale cache line (for example acquired through speculative=20
> access).

OK now I'm with you. As you say, before CPU access you would need to
invalidate, and the only way that's currently possible (at least on
arm64) is in unmap_dma_buf - so you're paying an invalidate penalty on
every unmap. That is the only penalty though; there's no need to do a
clean on map_dma_buf unless the CPU really did touch it.

With your patch I think you are still doing that invalidation right?
Is the performance of this patch OK, or you'll follow up with skipping
the invalidation?

It does seem a bit strange to me that begin_cpu_access() with no
device won't even invalidate the CPU cache. I had a bit of a poke
around, and that seems to be relatively specific to the arm64 dummy
ops. I'd have thought defaulting to dma_noncoherent_ops would work
better, but I don't know the specifics of those decisions.

If it were possible to skip the invalidation in unmap_dma_buf, would
cached mappings work for you? I think it should even be faster (in all
cases) than any non-cached approach.

Cheers,
-Brian

>=20
> This frequent uncessary cache maintenance adds a significant performance=
=20
> impact and that is why we use uncached memory because it allows us to ski=
p=20
> all this cache maintenance.
> Basically your driver can't predict the future so it has to play it safe=
=20
> when cached ION buffers are involved.
>=20
> Liam
>=20
> Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum,
> a Linux Foundation Collaborative Project
