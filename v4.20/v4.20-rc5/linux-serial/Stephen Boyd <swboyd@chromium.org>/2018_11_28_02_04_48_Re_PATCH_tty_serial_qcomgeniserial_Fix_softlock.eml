Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:09:52 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 2A8E1580322;
	Tue, 27 Nov 2018 18:04:57 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by orsmga005-1.jf.intel.com with ESMTP; 27 Nov 2018 18:04:57 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A1ulzVBa8hb8UHqUtNvaB5yD/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcizYh7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTzBODYyz?=
 =?us-ascii?q?YYURD+QOP+hYoYrzqFUToxW+HhGsCeH0xz9Un3/7x7E23/g7HAzE2gErAtIAsG?=
 =?us-ascii?q?7TrNXwLKocTPy1w7fQzTXDcfxW3yr25ZXPchEhvP6HQLV9cdHfyEY0EAPEjkif?=
 =?us-ascii?q?pJf5MDOVzOQNtG2b7+t9VeKqkWInrBtxoje2y8oql4LHhZoVx0ja+SllxIs5P8?=
 =?us-ascii?q?C0RUBlbdK+DZddtD2WO5F3T84gW21kpic3xqMatZO+YSQHyIgoyhvBZ/CbbYSF?=
 =?us-ascii?q?5w/vWeOfIThmmX1odreyihKz/EWuyODxU9O73EtEoyVfl9TBt2wC2wHT58WBV/?=
 =?us-ascii?q?Bz5F2u2SyV2ADW8uxEIV47la7cK5M53L4wmYQcsV7ZEi/1hkr2lqmWeVsg+uSy?=
 =?us-ascii?q?7OTneLrmqoedN49ylA7+LrwjltKjDek8KAQCQmaW9fqm2LH+/kD1XK9Gg/w0n6?=
 =?us-ascii?q?XBtZDVP8Ubpqq3Aw9P1YYj7g6yDzOn0NQegHkGI0tJeBGZgIjzPVHBPvT4Ae64?=
 =?us-ascii?q?g1Wiljdk2erGM6b/ApXCMHfDiq3tfbVj5E5Gzgo809Rf64hTCrEbL/L/QlXxu8?=
 =?us-ascii?q?DADh8lLwy0xP7qCNF81oMdR22DGKCYML7JvF+M5+IvJfSMZYAPtDb8Lfgl++Dh?=
 =?us-ascii?q?jXsjlVABeqmp2IMdaGqkEfR+P0WZfX3sj88BEWgQvwo+UPbliFqYXT5Tena9Ra?=
 =?us-ascii?q?Q85j4gBYKiDIfDQJ2tgbOb0Ce6GJ1Wen5JClSWHXj0cIWEXu8GaDiOLc95jjwE?=
 =?us-ascii?q?Sb+hRpcj1RGpqgD20blnLu3S+i0espLuz9x15+zVlREv+j14FcWd02eRT25qmm?=
 =?us-ascii?q?MEXSM53Kd6oUZl0FeMzbB4g+BEFdxU//5GSBw6NZ7bz+x5EdzyQBjOftWSRVai?=
 =?us-ascii?q?Q9WmBywxT90rz98PZUZ9B8utjhTZ0yW2BL8VkqSBBIYo/aLEw3jxO8F9xm7F1K?=
 =?us-ascii?q?Y7iVkqWM9PNWy8ia55+AjeHIrJk0Sfl6a3eqUQxi/N9GGfzWWQuEFUShJ/UaLA?=
 =?us-ascii?q?XXoHfEvZscz55l/eT7+pEbkoLxFOydCcJadQat3ml1NGROz9N9TYZG6xn2SwBR?=
 =?us-ascii?q?OMxr6XaIrqemMd3DjSCUQekgAT+2qGOhY6Biu7v23eCzluH0r1Y0zw6el+tG+7?=
 =?us-ascii?q?Tkgswg6XdUJhyaS69gQVhfOGTfMTxawLuCE6pjVwHVa92c/WCtWaqwpgeqVcfc?=
 =?us-ascii?q?0y4FNd2W3FsAx9O4SqL7p+iV4GbwR3o0Tu2g1rCoVBlMgqq28qzApyKK6CzFNN?=
 =?us-ascii?q?bTSY3Yr0Or3WLGny8wuia6rX2lHYzdaX9b0D6PU+q1X/og6pElAu/Glg09lQy3?=
 =?us-ascii?q?Gc/InFDBIOUZLtVUY67wJ1p7XEbSgy+YzV1WdgPrKpsjDfwd0pAuglyhG+f9pE?=
 =?us-ascii?q?NKOEFQnyE9AVBsS0KewqnUSpYQwAPOxI6KE0OMamfeOc2KG3JOZggC6mjWNf7Y?=
 =?us-ascii?q?F9z0KA7TZzRvTJ3pYF2f6Y2ASHWiz4jFegtMD3hI9FaSsTHmq51SjrGopRardu?=
 =?us-ascii?q?coYMDGekO9e3yclmh57xR35Y80auB0kH2MC1YxWSdUHy3QpK2UQRv3Ongyq4wy?=
 =?us-ascii?q?VonD4zqqqQwTLBw/7ldBoBIWNLQGhijVHxIYm7ldwaXU6obxQ3mxuh/0r1269b?=
 =?us-ascii?q?pKFnJWnJXUhIZzT2L31lUqaotruCYtRD6ZMyvSVMTeS8Z0uXSrr8oxscziPiEH?=
 =?us-ascii?q?FSxDE9dzG2pJr5mwZ2h36aLHZ2tHDZY91/xQ/D5NzAQv5cxjgGSzNiiTnUBVi8?=
 =?us-ascii?q?OMOl/c6OmJfAseC+VmShWYNVcSTwyYOAtS275XBlABGlnvCznMHnHhY+0SPhy9?=
 =?us-ascii?q?ZqUiDIpg7mYob3z6S6Lf5nfk5wCV788cV6HZtykokxhJEWwnUagpSV/XwakWb8?=
 =?us-ascii?q?K9lb2KT+bGYTSj4P2dLa/A/l2Eh7JHKT2435TmmdwtdmZ9SiYWMZwCM949pKCK?=
 =?us-ascii?q?eJ9rNEmyR1r0G8rQLQZ/h9gzgcxeEv6H4cn+EGpg4twj+BDbAVGElSJTbsmAiQ?=
 =?us-ascii?q?79CisKVXY36icb2x1Ep9h9+tFr+DrR9HWHblZJgiBzR/4dtlMFLDy3Dz7oDkeN?=
 =?us-ascii?q?/NbdMcrBGUkhHAj/RLJ5I1jPYFmS1nOWflt30/1+E7lQBu3Y29vIWfN2Vt+6e5?=
 =?us-ascii?q?DgRZNzLvYcMT5yrtjb1fnsuN24CvH5NhGigEXZfyTPKoFi4SuurjNwqUDDI8rX?=
 =?us-ascii?q?KbE6LFHQCD8Edms27PE5ezOn6MPnYZytFiRASHKExbnQAZRzE6np8/FgC3y83t?=
 =?us-ascii?q?akZ55jYN5lHmrhtA0P5nNx76Um3Hvgendi80SISDLBpR9gxC5V3aMcmA4eJoBS?=
 =?us-ascii?q?1Y4oetrA+QKmyYegRIC3sGWlefClDnP7mu48TA8ueCCuq/KfvOfauBqehEW/iU?=
 =?us-ascii?q?wpKv15Ns/yyQOcWXInliE/o711JDXHB+BsTZgigPRDYRly7XdM6boxG8+iJso8?=
 =?us-ascii?q?C78fTrXh/v5ISVB7tTN9Vv5w65gaOZO+GMgyZ5LC5S1okQyn/Q1LgfwFkShjlu?=
 =?us-ascii?q?dzazELQAti3NTKPKlq9UFR4bbCxzO9VS76IhxQlAIsrbitLz1r5lgf85EVZFVV?=
 =?us-ascii?q?r9ms63YcwGOX2yNFTCBEyTLrSJOSXLw93rYaO7UbBflvhUuAaquTmFE07vJDCD?=
 =?us-ascii?q?lzjyWhCrMOFMijybPRNEtIG8dBZtFXbsTNb8ZhKnN993iCU8wacoiXPSKW4cLT?=
 =?us-ascii?q?98fltRrr2R6CNUmOlwF3Zd4XplM+aEnT2U7+3ZKpYQrPtqDT54l+Nc4HQm1bRV?=
 =?us-ascii?q?6DtIS+BymCvXttRuuU2pkvGTyjp7VxpDsjZKi5iNvUVnOKXZ8IFPWHfE/B0X62?=
 =?us-ascii?q?WQBA8Hp99kCt3ppqBRxcLDlKP1KDde7d3U+dEQCNTTKMKCYzIdNk/TCTfSRCAM?=
 =?us-ascii?q?VjPjYXvOjkpRm/iJ+1WeroI9r5nxndwJULANB3IvEfZPMVhoBNwPJt9dWSIo2e?=
 =?us-ascii?q?qAk8QP9HaWpxnLQ8Bbo5WBUeidV6a8YA2FhKVJMkNbiYjzKp4eY8iigxRv?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAABG9/1bh0O0hNFcCBwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwgjsUE4N5iBiNcCUUkjWEd4FzEgEBGBMBhDsDAoMaIjQJDQE?=
 =?us-ascii?q?DAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKGAICJ?=
 =?us-ascii?q?gICAzEBBQEMEAYKCQWDHIICAQSaezyKHXB8M4J2AQEFh0cIEnmLAheBf4ERM4J?=
 =?us-ascii?q?fhFwlgwSCV48id491CZExGIFZh3k2hwMsiUOOIgYCCQcPIYElgg0zGggoCHgLV?=
 =?us-ascii?q?oFOghsMF4hehWAfMoECAwEBIROMIwEB?=
X-IPAS-Result: =?us-ascii?q?A0AUAABG9/1bh0O0hNFcCBwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wgjsUE4N5iBiNcCUUkjWEd4FzEgEBGBMBhDsDAoMaIjQJDQEDAQEBAQEBAgETA?=
 =?us-ascii?q?QEBCA0JCCkjDII2JAGCYgECAwECIAQZAQE3AQUJAQEKGAICJgICAzEBBQEMEAY?=
 =?us-ascii?q?KCQWDHIICAQSaezyKHXB8M4J2AQEFh0cIEnmLAheBf4ERM4JfhFwlgwSCV48id?=
 =?us-ascii?q?491CZExGIFZh3k2hwMsiUOOIgYCCQcPIYElgg0zGggoCHgLVoFOghsMF4hehWA?=
 =?us-ascii?q?fMoECAwEBIROMIwEB?=
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="55122003"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 18:04:55 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727074AbeK1NEo (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 08:04:44 -0500
Received: from mail-pf1-f194.google.com ([209.85.210.194]:44947 "EHLO
        mail-pf1-f194.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726567AbeK1NEo (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 08:04:44 -0500
Received: by mail-pf1-f194.google.com with SMTP id u6so9348674pfh.11
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 18:04:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:content-transfer-encoding:to:from:in-reply-to:cc
         :references:message-id:user-agent:subject:date;
        bh=AbH+FYzoIRbXx2BNyctyObI8XbY0kxw355SDW4Ev9IA=;
        b=A+cYqftvoeQyasjPOxr6hLNnErGbIVw+QpDldpETOyZyC4LL1vjDNZf6HftsVwQNP8
         7n0slAaozOYq2lRdbFm/puIdMGFK35MlYDj1cwYL2V6UQC6DbZkz4QnE+cQuhzFRGCVs
         Mn1TekgA+p7lfL1Fzzo+tSGxEgnX/VDSB76SA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:content-transfer-encoding:to:from
         :in-reply-to:cc:references:message-id:user-agent:subject:date;
        bh=AbH+FYzoIRbXx2BNyctyObI8XbY0kxw355SDW4Ev9IA=;
        b=VaJ1QkaIA7Pak1L8Psx7w7OIGTkz2qkMrz9nCbFAWPCSAhaadcPV2iaO1tl/bInIBr
         jlyuWqBEis1c732EQWIJWjQunVkVodH7fITbwRI1Qv2KVU2axbg3OIEzh6uHwHQt8PrW
         a7aGM9Gq8tH/0/iYUq7ORLRWAGMJrSanSkYbk3rSOWvWau8cB3wfSGREFMRGiQmQB6/e
         dWYS91RDPvKK3C8CuYidfwGRVDg7QH+1NH5XtxmIEXWIB4gm6Smjb13vj9yPHTm2JMS5
         9Hm+94z1F65RL3B3Ewfq85v91uj+nntF32xWxgo57SqNj+qQw0QZtdOk4HLGlrDHSZtX
         WoFg==
X-Gm-Message-State: AA+aEWaNDuSi4HMsRF7X7/poOJSefYzlAPy5SPdbrnKtQUUfLbAboIlf
        0HZwriA94HQ12pCUYZMmEV7NGw==
X-Google-Smtp-Source: AFSGD/UNUu7zODu5KTPXaod5L1Xz4H5CkgRkqJTdvdEpIA7nEKzQQ682W9ib6GNjAwibpFr2vvpabA==
X-Received: by 2002:a62:3ac1:: with SMTP id v62mr31134681pfj.87.1543370690585;
        Tue, 27 Nov 2018 18:04:50 -0800 (PST)
Received: from localhost ([2620:15c:202:1:fed3:9637:a13a:6c15])
        by smtp.gmail.com with ESMTPSA id i4sm6988508pfj.82.2018.11.27.18.04.49
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Tue, 27 Nov 2018 18:04:49 -0800 (PST)
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
To: Ryan Case <ryandcase@chromium.org>
From: Stephen Boyd <swboyd@chromium.org>
In-Reply-To: <CACjz--n6eXtT6-CDhVEStSD_59yJ-fdmfHzo9SH_da5ZzL_mDw@mail.gmail.com>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Jiri Slaby <jslaby@suse.com>,
        Evan Green <evgreen@chromium.org>,
        Doug Anderson <dianders@chromium.org>,
        linux-kernel@vger.kernel.org, linux-serial@vger.kernel.org
References: <20181127022536.104663-1-ryandcase@chromium.org>
 <154336440880.88331.11610393939844825622@swboyd.mtv.corp.google.com>
 <CACjz--n6eXtT6-CDhVEStSD_59yJ-fdmfHzo9SH_da5ZzL_mDw@mail.gmail.com>
Message-ID: <154337068886.88331.5708018437286125025@swboyd.mtv.corp.google.com>
User-Agent: alot/0.7
Subject: Re: [PATCH] tty: serial: qcom_geni_serial: Fix softlock
Date: Tue, 27 Nov 2018 18:04:48 -0800
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Quoting Ryan Case (2018-11-27 17:24:44)
> On Tue, Nov 27, 2018 at 4:20 PM Stephen Boyd <swboyd@chromium.org> wrote:
> >
> > Quoting Ryan Case (2018-11-26 18:25:36)
> > > Transfers were being divided into device FIFO sized (64 byte max)
> > > operations which would poll for completion within a spin_lock_irqsave=
 /
> > > spin_unlock_irqrestore block. This both made things slow by waiting f=
or
> > > the FIFO to completely drain before adding further data and would also
> > > result in softlocks on large transmissions.
> > >
> > > This patch allows larger transfers with continuous FIFO additions as
> > > space becomes available and removes polling from the interrupt handle=
r.
> > >
> > > Signed-off-by: Ryan Case <ryandcase@chromium.org>
> > > Version: 1
> >
> > I've never seen a Version tag before. Did you manually add this?
> =

> I submitted with patman, this should have been Series-version:

Hmm ok. I'm not aware of this being a kernel idiom so I would remove
this tag before sending.

> =

> >
> > >
> > >         WARN_ON(co->index < 0 || co->index >=3D GENI_UART_CONS_PORTS);
> > >
> > > @@ -465,9 +470,17 @@ static void qcom_geni_serial_console_write(struc=
t console *co, const char *s,
> > >                 }
> > >                 writel_relaxed(M_CMD_CANCEL_EN, uport->membase +
> > >                                                         SE_GENI_M_IRQ=
_CLEAR);
> > > -       }
> > > +       } else if ((geni_status & M_GENI_CMD_ACTIVE) && !port->cur_tx=
_remaining)
> > > +               /* It seems we can interrupt existing transfers unles=
s all data
> >
> > Nitpick: Have /* on a line by itself
> >
> > Is this comment supposed to say "we can't interrupt existing transfers"?
> =

> Nope, comment is correct as is.

Ok. I fail at parsing it then. Perhaps

"It seems we can interrupt existing transfers except for when all data
has been sent"

would make it easier for me to read.

> =

> >
> > >
> > >         __qcom_geni_serial_console_write(uport, s, count);
> > > +
> > > +       if (port->cur_tx_remaining)
> > > +               qcom_geni_serial_setup_tx(uport, port->cur_tx_remaini=
ng);
> >
> > Does this happen? Is the console being used as a tty at the same time?
> =

> Yup, happens quite a bit.

So its being used in both modes at the same time?

> =

> >
> > > +
> > >         if (locked)
> > >                 spin_unlock_irqrestore(&uport->lock, flags);
> > >  }
> > > @@ -701,40 +714,47 @@ static void qcom_geni_serial_handle_rx(struct u=
art_port *uport, bool drop)
> > >         port->handle_rx(uport, total_bytes, drop);
> > >  }
> > >
> > > -static void qcom_geni_serial_handle_tx(struct uart_port *uport)
> > > +static void qcom_geni_serial_handle_tx(struct uart_port *uport, bool=
 done,
> > > +               bool active)
> > >  {
> > >         struct qcom_geni_serial_port *port =3D to_dev_port(uport, upo=
rt);
> > >         struct circ_buf *xmit =3D &uport->state->xmit;
> > >         size_t avail;
> > >         size_t remaining;
> > > +       size_t pending;
> > >         int i;
> > >         u32 status;
> > >         unsigned int chunk;
> > >         int tail;
> > > -       u32 irq_en;
> > >
> > > -       chunk =3D uart_circ_chars_pending(xmit);
> > >         status =3D readl_relaxed(uport->membase + SE_GENI_TX_FIFO_STA=
TUS);
> > > -       /* Both FIFO and framework buffer are drained */
> > > -       if (!chunk && !status) {
> > > +
> > > +       /* Complete the current tx command before taking newly added =
data */
> > > +       if (active)
> > > +               pending =3D port->cur_tx_remaining;
> > > +       else
> > > +               pending =3D uart_circ_chars_pending(xmit);
> > > +
> > > +       /* All data has been transmitted and acknowledged as received=
 */
> > > +       if (!pending && !status && done) {
> >
> > Nitpick: status is a poor variable name to test here. I don't understand
> > what this line is doing. Maybe it would help to have another local
> > variable like 'needs_attention'?
> =

> It could be renamed but since this isn't a general file cleanup patch
> I was avoiding non-functional changes. It is the TX_FIFO_STATUS
> register, if non-zero there is still data in the FIFO or related
> activity ongoing.

Ok.

> =

> >
> > >                 qcom_geni_serial_stop_tx(uport);
> > >                 goto out_write_wakeup;
> > >         }
> > >
> > > -       if (!uart_console(uport)) {
> > > -               irq_en =3D readl_relaxed(uport->membase + SE_GENI_M_I=
RQ_EN);
> > > -               irq_en &=3D ~(M_TX_FIFO_WATERMARK_EN);
> > > -               writel_relaxed(0, uport->membase + SE_GENI_TX_WATERMA=
RK_REG);
> > > -               writel_relaxed(irq_en, uport->membase + SE_GENI_M_IRQ=
_EN);
> > > -       }
> > > +       avail =3D port->tx_fifo_depth - (status & TX_FIFO_WC);
> > > +       avail *=3D port->tx_bytes_pw;
> > > +       if (avail < 0)
> > > +               avail =3D 0;
> >
> > How can 'avail' be less than 0? It's size_t which is unsigned? If
> > underflow is happening from that subtraction or overflow from the
> > multiply that could be bad but I hope that is impossible.
> =

> I hope underflow is impossible as well. However, if the hardware did
> wind up in a strange state I wanted to err on the side of not throwing
> away data and being able to resume later if things recovered. I can
> remove the defensive checks if that's the custom, otherwise I'll
> update the comparison logic accordingly.

Well it looks like impossible code because an unsigned value can't be
less than zero. So it's not about customs, more about dead code removal.

> =

> >
> > >
> > > -       avail =3D (port->tx_fifo_depth - port->tx_wm) * port->tx_byte=
s_pw;
> > >         tail =3D xmit->tail;
> > > -       chunk =3D min3((size_t)chunk, (size_t)(UART_XMIT_SIZE - tail)=
, avail);
> > > +       chunk =3D min3((size_t)pending, (size_t)(UART_XMIT_SIZE - tai=
l), avail);
> >
> > Nitpick: If we made 'avail' unsigned int would we be able to drop the
> > casts on this min3() call? This line is quite hard to read.
> =

> Seems they can go away without any changes.

Ok!

