Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 12:09:42 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga006.jf.intel.com (orsmga006.jf.intel.com [10.7.209.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id E64A6580322;
	Tue, 27 Nov 2018 17:25:01 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga006-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 17:25:01 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AC4oMLh05x5RSf7dPsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segSL/7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJOUcZfVSNPAo2y?=
 =?us-ascii?q?YYgSAeQfIelYtJH9qlkVoBuiGQWhHv/jxiNUinL026AxzuQvERvB3AwlB98ArH?=
 =?us-ascii?q?TVo8/zNKwPT+261rLIwiveZP5Rwzf86JLHchY8rv6QR71watTexFIzGAPFlFWQ?=
 =?us-ascii?q?ronlPzKI1uQIqWSb6PBgVe22hmMhtgp/oSCvy98yhoXVgo8Z0E3I+CtnzIovON?=
 =?us-ascii?q?G1S1J3bcSlHZZSry2WKZd6T8c4T2xruCs20KAKtJ+6cSQQ1ZgqwxDSZvqaeIaS?=
 =?us-ascii?q?+B3jTvyeITJgiXJlZr2/gxGy/FC+yu3zSMa0ykxGrilbndnWsHACyRjT5tKASv?=
 =?us-ascii?q?tn8UetwTeP1wbN5eFYOU04i7bXJpo7zrItmJcfr17PEjL1lUnqlqObd0cp9vCt?=
 =?us-ascii?q?6+v9Y7XmopGcN5VzigH7Kqkuns2/AeIlMgkBRmSb+vqz1Kfl/ULnRLVGl/o2k6?=
 =?us-ascii?q?ffsJ/EP8QWvbC5AwBL3YY58Rq/DCmp0M4enXYZKFJJYhWHj5LmO13WOvD3Ee+/?=
 =?us-ascii?q?g0iwkDds3/3GOrzhApbTIXTZn7bhYK1w60pdyAo10NBe6IhYCrAHIPLvREDxsM?=
 =?us-ascii?q?bUAQM+Mwyx2+znEsly1psCWWKTBa+UKKPSvkWJ5uIzOeaMY5UZuDbgK/c/4f7u?=
 =?us-ascii?q?gmQ0mVscfamvwJsWZ2q0HvVgI0WFf3Xshs0NHnsNvgo7VObqkkGNUSZPZ3auWK?=
 =?us-ascii?q?Ix/jM7CIW4AovZRYCth7qB3CG8HpBNYmBGC1aMEWrndomeWvcMbj6SLdFlkjAe?=
 =?us-ascii?q?SbehTIoh3wm0tADm07pnMvbU+ioAuJ35z9h15+rTlRIo+TxuFcud0XqAT2V1nm?=
 =?us-ascii?q?MOWj8307pzoU17ylefz6d4h+ZUGsBU5/NMSg06L4LTz/RmC9DuXQLMZtSJR0yg?=
 =?us-ascii?q?Qtm8BTExT8g+w9kBY0tmH9WijxbD3zelArMPlryLAoA0/bzY33TrO8l9zHPG3r?=
 =?us-ascii?q?E7j1Y6WstPKXGmhqln+gfOHYHJjVuWm7yqdasG2i7N73mMzWyJsEFcUw5wVKHF?=
 =?us-ascii?q?UGsbZkvXq9T5+0zDQ6WvCbQhLgtO18qCJrFWZd3uiFVMXO3jN8jGY2Kth2ewAg?=
 =?us-ascii?q?6Fya6WY4r0ZWoRxiXdB1ICkwAI43mGMxMzBiOgo2LYETxvGkjjY0Lq8elitny7?=
 =?us-ascii?q?SlU4wB2Nb01kz7C14AIaheSAS/MP2bIJoDshqzRxHFa6w9LWC9qBqxB9fKlGZt?=
 =?us-ascii?q?M9+lNH1WPftwxyJZGgK6FihlgDcwV4pU/u1hN3Cplensgutn8l0A1yKaeA2lNb?=
 =?us-ascii?q?azyYxYzwOqHQKmTq5h+vb7DZ217A39eW4KsA8+k4pEj5swGvFUoi9Gtn3sJR03?=
 =?us-ascii?q?ud4JXKEQUTXYjwUkYx6xh1ubXabjMh6IPT0H1mKbO0vSPa29I1GOslzQ6tftdC?=
 =?us-ascii?q?MK+eCAD+CcwbB8i0J+wslFikdRYEPOFU9K4pMMKqbfqG2Ki3POl+mDKql3hI4I?=
 =?us-ascii?q?d40kiU7SpzVvbI34oZw/GfxgaHTTb8g0u7vcDthI9EYiseHmyhxij+BY5df7F9?=
 =?us-ascii?q?cpwPCWizPcK33NJ+h5j2Vn5c9V6jAU4G2cCzdRqTaVz9wRNf1UANrXO7niu4yi?=
 =?us-ascii?q?R+kys1oaqHwCzO3+PieQIHO25KXmVjjU3gIZOpj9AcR0WoawkplB245Uf13aRb?=
 =?us-ascii?q?paJ/L3XNTkdMZST5M2ZiUq6ovLqYf8FP8I8osTlQUOmkY1CVUKT9oxgZ0yPkBW?=
 =?us-ascii?q?de3yo0dzKpupX4mRx1lmSdIW13rHrYf8Fw2Bje6MbdRf5XwjoJWi14hSPLCVi7?=
 =?us-ascii?q?Otmj5c+UmIvbsuCiS2KhUYVecCnxwoOHrie752xqARukkvC3m93nFxU60CDh29?=
 =?us-ascii?q?lrUyXIsAjzYo3x26umNuJne1FiBEXg5MpiBoF+jowwiYkT2XcAh5WZ53oHkXrp?=
 =?us-ascii?q?PtVd1qLzd34NRT8Nw97I7wnpwkxjLnSVx43nUnWR2NduZ96/YmkOwCIy89hKCL?=
 =?us-ascii?q?uI7LxDhSZ1p1u4rQHLbvRnkDYS1+Au6GIEjOETowUi0D+dAr8JEElcPCzskQmI?=
 =?us-ascii?q?7t+koKVWYmavbaa/1E5kkd+9C7GCpxlWWGzldZc6AS9w8sJ/PUrQ0H3074HoYt?=
 =?us-ascii?q?jRYsgVth2JiBfAlOlVJYk1lvoLgypnJG38sWcky+49kRxhw5W6sJKbJGVq+aKz?=
 =?us-ascii?q?GgRYOSHtZ8MP5jHtir5Tkd2M0ICoGpVhBy8HXJ/1Tf+zFDIStPLnNxuBETEmq3?=
 =?us-ascii?q?ebH6bfEhGb6Et8s33PFJWrPWmNJHYF1dViWAWdJEtHjQAWRjo6m4A2FhuwyMz9?=
 =?us-ascii?q?akt55S0R5l3lqhtK0O1oLALyUmPepAeudzc1R4KTLBtQ7gFe+UjVNdaS4f50Hy?=
 =?us-ascii?q?Fd5pehthCCKnSHZwRUCmEEQkyFB1f+Prm3+NnP6e6YCvClL/vJZ7WOpvdTV/OJ?=
 =?us-ascii?q?xZKpz4tn8CyANsSJPnl+EfI73lBPUmx+G8Tcgz8PUTAYlzrRb86Hoxex4i13od?=
 =?us-ascii?q?6+8PToWwLv5JGDC7hIMdVo9BC5n72DN/OLhCtiLTZY15UMxWLHybQF3V4SjT1u?=
 =?us-ascii?q?eCepEbgaqSHNS6fQkLdNDxEHcyNzKNdI76Uk0wZXJM7Ukcn12aB4j/IvD1dFVE?=
 =?us-ascii?q?fsmsWoZcwMPmG8O0nLBEeNNLSaOzLLx9v7br+7Sb1VlO9UrQG/uS6HE0//OTSO?=
 =?us-ascii?q?jyXpVxGqMe1WkC6XJgBRuIGjfRZrEmXjSNPmahumMN54lzE2wLs0hm/UOm4YKz?=
 =?us-ascii?q?Rzb0RNrriI5yNCnvp/A3BB7mZiLeScmyeW9e/YKpMXsfttGit1luJa7248y7ta?=
 =?us-ascii?q?9yxEQP11mC3Prt9huV2mk++PyiZ5XxpKsDpEmIWLvUAxcZneo6JcVG7E8RRFx2?=
 =?us-ascii?q?KBB1xevMRvDczjk6tQ0N/Klb/2bjBY/ISH09EbAp3uOcuBeFEoKhehTCTFBQ0J?=
 =?us-ascii?q?RjewOEnUh1ZalfCP8zuStJds+cuko4YHVrIODA99LfgdEEkwWYVaeJo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AkAADW7f1bh0O0hNFcCB4BBgcGgVEJC?=
 =?us-ascii?q?wGBVYIWFBODeZYtFJI1hHeBcywTAYdaIjQJDQEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2JAGCYQEBAQECAQECIAQZAQE3AQUJAQEKCwMKAgImAgIDHxIBBQEcBgoJB?=
 =?us-ascii?q?YMcgXoIBZsKPIodcHwNJoJ2AQEFhz8IEnmLAheBf4ERgxKEXIMpglePIneFKIp?=
 =?us-ascii?q?NCYIgjxEYgVmFC4MkhwMsiUOOOjCBJYINMxowdAaCNYIbDBeIXoVgHjOBBQEBj?=
 =?us-ascii?q?FcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AkAADW7f1bh0O0hNFcCB4BBgcGgVEJCwGBVYIWFBODeZY?=
 =?us-ascii?q?tFJI1hHeBcywTAYdaIjQJDQEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYQEBA?=
 =?us-ascii?q?QECAQECIAQZAQE3AQUJAQEKCwMKAgImAgIDHxIBBQEcBgoJBYMcgXoIBZsKPIo?=
 =?us-ascii?q?dcHwNJoJ2AQEFhz8IEnmLAheBf4ERgxKEXIMpglePIneFKIpNCYIgjxEYgVmFC?=
 =?us-ascii?q?4MkhwMsiUOOOjCBJYINMxowdAaCNYIbDBeIXoVgHjOBBQEBjFcBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,288,1539673200"; 
   d="scan'208";a="42565429"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 17:24:59 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727027AbeK1MYn (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 07:24:43 -0500
Received: from mail-it1-f193.google.com ([209.85.166.193]:37291 "EHLO
        mail-it1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726548AbeK1MYn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 07:24:43 -0500
Received: by mail-it1-f193.google.com with SMTP id b5so1757822iti.2
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 17:24:55 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=chromium.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=MrYZpIjfJ0dF0rQ5MnZA/6U9z+XGfUm+2P/kzbGeD3A=;
        b=Q/vH3oaP47H0RxERJrfjnQ40vxqbigC6s3Dn3J9NEXMuo/r9BFJOk5wKxtDHiQQewG
         EG1jkkEv9HWpAsrQgi50NsXLZnY77Y8MuOm43mx63jfprrzczSyJVQKF2HlKxXg/dnTn
         B7JeYeE2TEgMgGb6x98mDMO8fyPV1h/Q58lQY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=MrYZpIjfJ0dF0rQ5MnZA/6U9z+XGfUm+2P/kzbGeD3A=;
        b=C45fdbtcUmNpLJSEcRa721Ax13NE4puljHjCgGDBTslcK2zbmTQ8Pr22TQfqQamUas
         dJba4JPe61YHnuVvQDzOrLkeY4QIDNnqoShSBA6SczDWTeNVyYp/Mi7IbqL7LMdoZs//
         iuEYCyzx7XcFOrN3RF2DUb+QUun+Za8BJ310z5tvORu9P+kVgfududSPOs6WlQChTkYH
         kRIlPWRwbKy5EacpexU2tgHS2qQBwYQGIIZKC9sPXAerZBxpX9jegG791dY3m7V/5P87
         TQ4FflqwnZyk9+9hS1sNByYpyJXS6TyELsJq2OrLEOlWEIK3Tw/d3/OQZs4E0FJN3yKy
         ZRNA==
X-Gm-Message-State: AA+aEWbgDbtav8L1Jk9h+Hexu2Ml4akqHtx4WhFvukqh0W4w0JZu8/8n
        DLmsGuD2ia8uJSeC3betbbCXUJ5QlreNcsqsJPtoNA==
X-Google-Smtp-Source: AFSGD/XRZCX6030pUZv+RvHJO39BsUZ8xHD49k1wmRp43fUakW/SzCgZ0ldwITOMc70cqy54pM08B96Yz70hlVpF634=
X-Received: by 2002:a24:a507:: with SMTP id k7mr1163511itf.98.1543368295463;
 Tue, 27 Nov 2018 17:24:55 -0800 (PST)
MIME-Version: 1.0
References: <20181127022536.104663-1-ryandcase@chromium.org> <154336440880.88331.11610393939844825622@swboyd.mtv.corp.google.com>
In-Reply-To: <154336440880.88331.11610393939844825622@swboyd.mtv.corp.google.com>
From: Ryan Case <ryandcase@chromium.org>
Date: Tue, 27 Nov 2018 17:24:44 -0800
Message-ID: <CACjz--n6eXtT6-CDhVEStSD_59yJ-fdmfHzo9SH_da5ZzL_mDw@mail.gmail.com>
Subject: Re: [PATCH] tty: serial: qcom_geni_serial: Fix softlock
To: Stephen Boyd <swboyd@chromium.org>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Jiri Slaby <jslaby@suse.com>,
        Evan Green <evgreen@chromium.org>,
        Doug Anderson <dianders@chromium.org>,
        linux-kernel@vger.kernel.org, linux-serial@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Nov 27, 2018 at 4:20 PM Stephen Boyd <swboyd@chromium.org> wrote:
>
> Quoting Ryan Case (2018-11-26 18:25:36)
> > Transfers were being divided into device FIFO sized (64 byte max)
> > operations which would poll for completion within a spin_lock_irqsave /
> > spin_unlock_irqrestore block. This both made things slow by waiting for
> > the FIFO to completely drain before adding further data and would also
> > result in softlocks on large transmissions.
> >
> > This patch allows larger transfers with continuous FIFO additions as
> > space becomes available and removes polling from the interrupt handler.
> >
> > Signed-off-by: Ryan Case <ryandcase@chromium.org>
> > Version: 1
>
> I've never seen a Version tag before. Did you manually add this?

I submitted with patman, this should have been Series-version:

>
> > diff --git a/drivers/tty/serial/qcom_geni_serial.c b/drivers/tty/serial/qcom_geni_serial.c
> > index 7ded51081add..835a184e0b7d 100644
> > --- a/drivers/tty/serial/qcom_geni_serial.c
> > +++ b/drivers/tty/serial/qcom_geni_serial.c
> > @@ -117,6 +117,8 @@ struct qcom_geni_serial_port {
> >         u32 *rx_fifo;
> >         u32 loopback;
> >         bool brk;
> > +
> > +       u32 cur_tx_remaining;
>
> Nitpick: Can it just be tx_remaining? And why u32? Why not unsigned int?

Sure, and unsigned int is fine.

>
> >  };
> >
> >  static const struct uart_ops qcom_geni_console_pops;
> > @@ -439,6 +441,7 @@ static void qcom_geni_serial_console_write(struct console *co, const char *s,
> >         struct qcom_geni_serial_port *port;
> >         bool locked = true;
> >         unsigned long flags;
> > +       unsigned int geni_status;
>
> Nitpick: Use u32 for register reads.

will do.

>
> >
> >         WARN_ON(co->index < 0 || co->index >= GENI_UART_CONS_PORTS);
> >
> > @@ -465,9 +470,17 @@ static void qcom_geni_serial_console_write(struct console *co, const char *s,
> >                 }
> >                 writel_relaxed(M_CMD_CANCEL_EN, uport->membase +
> >                                                         SE_GENI_M_IRQ_CLEAR);
> > -       }
> > +       } else if ((geni_status & M_GENI_CMD_ACTIVE) && !port->cur_tx_remaining)
> > +               /* It seems we can interrupt existing transfers unless all data
>
> Nitpick: Have /* on a line by itself
>
> Is this comment supposed to say "we can't interrupt existing transfers"?

Nope, comment is correct as is.

>
> > +                * has been sent, in which case we need to look for done first.
> > +                */
> > +               qcom_geni_serial_poll_tx_done(uport);
>
> Another nitpick: Please put braces around multi-line if branches for
> greater code clarity.

will do.

>
> >
> >         __qcom_geni_serial_console_write(uport, s, count);
> > +
> > +       if (port->cur_tx_remaining)
> > +               qcom_geni_serial_setup_tx(uport, port->cur_tx_remaining);
>
> Does this happen? Is the console being used as a tty at the same time?

Yup, happens quite a bit.

>
> > +
> >         if (locked)
> >                 spin_unlock_irqrestore(&uport->lock, flags);
> >  }
> > @@ -701,40 +714,47 @@ static void qcom_geni_serial_handle_rx(struct uart_port *uport, bool drop)
> >         port->handle_rx(uport, total_bytes, drop);
> >  }
> >
> > -static void qcom_geni_serial_handle_tx(struct uart_port *uport)
> > +static void qcom_geni_serial_handle_tx(struct uart_port *uport, bool done,
> > +               bool active)
> >  {
> >         struct qcom_geni_serial_port *port = to_dev_port(uport, uport);
> >         struct circ_buf *xmit = &uport->state->xmit;
> >         size_t avail;
> >         size_t remaining;
> > +       size_t pending;
> >         int i;
> >         u32 status;
> >         unsigned int chunk;
> >         int tail;
> > -       u32 irq_en;
> >
> > -       chunk = uart_circ_chars_pending(xmit);
> >         status = readl_relaxed(uport->membase + SE_GENI_TX_FIFO_STATUS);
> > -       /* Both FIFO and framework buffer are drained */
> > -       if (!chunk && !status) {
> > +
> > +       /* Complete the current tx command before taking newly added data */
> > +       if (active)
> > +               pending = port->cur_tx_remaining;
> > +       else
> > +               pending = uart_circ_chars_pending(xmit);
> > +
> > +       /* All data has been transmitted and acknowledged as received */
> > +       if (!pending && !status && done) {
>
> Nitpick: status is a poor variable name to test here. I don't understand
> what this line is doing. Maybe it would help to have another local
> variable like 'needs_attention'?

It could be renamed but since this isn't a general file cleanup patch
I was avoiding non-functional changes. It is the TX_FIFO_STATUS
register, if non-zero there is still data in the FIFO or related
activity ongoing.

>
> >                 qcom_geni_serial_stop_tx(uport);
> >                 goto out_write_wakeup;
> >         }
> >
> > -       if (!uart_console(uport)) {
> > -               irq_en = readl_relaxed(uport->membase + SE_GENI_M_IRQ_EN);
> > -               irq_en &= ~(M_TX_FIFO_WATERMARK_EN);
> > -               writel_relaxed(0, uport->membase + SE_GENI_TX_WATERMARK_REG);
> > -               writel_relaxed(irq_en, uport->membase + SE_GENI_M_IRQ_EN);
> > -       }
> > +       avail = port->tx_fifo_depth - (status & TX_FIFO_WC);
> > +       avail *= port->tx_bytes_pw;
> > +       if (avail < 0)
> > +               avail = 0;
>
> How can 'avail' be less than 0? It's size_t which is unsigned? If
> underflow is happening from that subtraction or overflow from the
> multiply that could be bad but I hope that is impossible.

I hope underflow is impossible as well. However, if the hardware did
wind up in a strange state I wanted to err on the side of not throwing
away data and being able to resume later if things recovered. I can
remove the defensive checks if that's the custom, otherwise I'll
update the comparison logic accordingly.

>
> >
> > -       avail = (port->tx_fifo_depth - port->tx_wm) * port->tx_bytes_pw;
> >         tail = xmit->tail;
> > -       chunk = min3((size_t)chunk, (size_t)(UART_XMIT_SIZE - tail), avail);
> > +       chunk = min3((size_t)pending, (size_t)(UART_XMIT_SIZE - tail), avail);
>
> Nitpick: If we made 'avail' unsigned int would we be able to drop the
> casts on this min3() call? This line is quite hard to read.

Seems they can go away without any changes.

>
> >         if (!chunk)
> >                 goto out_write_wakeup;
> >
> > -       qcom_geni_serial_setup_tx(uport, chunk);
> > +       if (!port->cur_tx_remaining) {
> > +               qcom_geni_serial_setup_tx(uport, pending);
> > +               port->cur_tx_remaining = pending;
> > +       }
> >
> >         remaining = chunk;
> >         for (i = 0; i < chunk; ) {
> > @@ -767,6 +786,7 @@ static irqreturn_t qcom_geni_serial_isr(int isr, void *dev)
> >  {
> >         unsigned int m_irq_status;
> >         unsigned int s_irq_status;
> > +       unsigned int geni_status;
>
> Nitpick: I guess this driver isn't using u32 for registers already.
> Would be nice to mop this up in another patch.
>
> >         struct uart_port *uport = dev;
> >         unsigned long flags;
> >         unsigned int m_irq_en;
> >
