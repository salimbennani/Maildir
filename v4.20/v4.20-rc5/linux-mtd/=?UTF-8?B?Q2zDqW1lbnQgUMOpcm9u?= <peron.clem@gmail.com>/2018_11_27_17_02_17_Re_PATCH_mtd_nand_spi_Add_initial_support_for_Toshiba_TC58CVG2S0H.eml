Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:47:37 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D195B58041B;
	Tue, 27 Nov 2018 09:02:37 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga004-1.jf.intel.com with ESMTP; 27 Nov 2018 09:02:37 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A32liAhEz1IL3L7a11TEFsZ1GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ75o8W5bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJWCNBDIGz?=
 =?us-ascii?q?YYsBAeQCIOhWsZXyqVQVrRumBwShH//vyiZSi3PqwaE2z+YsHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3rOacWS+e1ybfHzTPfb/hLwzn68pLIchcnofqRWr9wadTeyVMoFwPDlFmf?=
 =?us-ascii?q?tYjlMC2Q1ukWvGib6vBvVeOri2I9tw5xpT2vy94qh4LUiIwVzVXE+j94wIYzPd?=
 =?us-ascii?q?C3VU97YdGlEJtTqS6bN5F6Td8lQ2Ftvisx174IuYajcSQU1JgqwwTTZ+GJfoSW?=
 =?us-ascii?q?+B7vSeWcLStiiH9ker+znwi+/VSkx+HmVcS50ExGojRYntTIrHwByhje58aBR/?=
 =?us-ascii?q?Bg5EmuwyyP2BrW6uxcIUA7i67bK5k5z74umZocr17DEjX1mErolq+WcFsr+uyy?=
 =?us-ascii?q?5+TgeLXmqYeQN45yig7gLqQjgtKzDfg8PwQUQmSW9/qw2Kf+8UD6XLlGlPw7n6?=
 =?us-ascii?q?vBvJDfP8sbp6q5AwFP0oYk7hayFzOm0NUenXkaI1NJYRGHgJbzO1HIPv/4Ce6z?=
 =?us-ascii?q?g1OikTdt2f/GJKbsAovCLnfdirftZ7V95FBGyAo1099f44hYCrYbIPL8QkPxrs?=
 =?us-ascii?q?DXDgclMwyoxObqENF91oIdWW2RGKOYP77SvESM5uIuJemMeYAUtCz8K/gj+/7h?=
 =?us-ascii?q?k3s5lUUBcqmu2JsdcGq4Eeh+I0WFfXrshc8MEWcQsQo/UOzlklqCXSRTZ3avRa?=
 =?us-ascii?q?084D47BZmiDYfCQICtnbOA0D26Hp1QemBJFFSMHW30eIWDXvcGcDiSLdN5kjwY?=
 =?us-ascii?q?SbihTJcs1ROptADk0bZnLe3U+isetZLkz9V14+zTlRcv9T17Fcid0meNT31qkW?=
 =?us-ascii?q?MMXTM5wKd/oUllwFeZzad4m+BYFcBU5/5RSAg6Lp7cz+t5C9zoQALOZNWJRU2i?=
 =?us-ascii?q?QtWnBzExU90wz8UPY0Z7B9WtkBTD0zC2DL8SkryBHIY0/b7E33jtO8Z9zG7L1K?=
 =?us-ascii?q?o7gFkgWMdPMWymibR59wjcHIPJl0SZl6C3daUTxiLN9WGDzXaQs0FcSgJ/TaLF?=
 =?us-ascii?q?XXUHbEvMsdv5/l/CT6OpCbk/LwRO09CCJbVQZt3pl1pGQuzjN8rYY262n2ewBh?=
 =?us-ascii?q?OIxreXYYruemUd2jjdCUcenwAS+3aGKRYxBiO7r23CCzxuEErlY1nw/ulmtHO7?=
 =?us-ascii?q?Ukg0whmXYEJ7ybq65AQZhfyGRPMVxbILpiEhpi5wHFa82dLWFtWBqxBgfKVafd?=
 =?us-ascii?q?My/lNH2XjFuAx6O5yqN7piiUIGcwRro0Pu0A16CplBkcgvq3Mq0ApyKKKC3FNd?=
 =?us-ascii?q?bT+Y2orwOrnWKmn08xCicKrW2lDY0NaL9aYD8vU4q1P/vA63Ekou6Wlo095Q03?=
 =?us-ascii?q?GE/JXFEBISUY7tUkYw7xV1vbXabTcy5ozK1XxgK7K7siLf1N0zAuslyRGgf8lE?=
 =?us-ascii?q?PaOAFQ/yFdAaBse0JOwrnVipcgwLPORI+KEoOMOmcuOM2LS3M+Z4gDKmkWNH7Z?=
 =?us-ascii?q?h900KR7SZzVvTE3pcFw/6C2AuHWCzxjFOgssDxhIBFaiseHmu5ySj4GoFRYrd+?=
 =?us-ascii?q?cpoMCWerO8e33Mlxh4bxW35E816uH0kG2M61dhWIdVzywApQ2V4RoXO5gyu4zi?=
 =?us-ascii?q?V4nC0zoaqbwSPB3f7idB0BOmNQQGlijFHsIZW7jtwAXUioaRQpmwWh5Urg26db?=
 =?us-ascii?q?o6F/JXHJQUhUZyj2M31iUqyou7uCYs5D8pMpvT9MUOShZ1CXUbr9oxoc0yP+EG?=
 =?us-ascii?q?pS3jE7dze2uprnmxx2kn6SLHF2rHDBY8F/2Q/f5MDARf5WxjcGRjN3iSPUBli/?=
 =?us-ascii?q?ONml586UmI3AsuC9VmKhUINccS/wwIOEtSu743BqABKlk/CynN3nDRY10Svh29?=
 =?us-ascii?q?Z2UiXIqQ72YpP32KSiLeJnYk5oCUf86sVgHYFyiIkwhJAW2XUBgpWV/HwHkXr8?=
 =?us-ascii?q?MNlB2KL+amYNSiAPw9LP/Afl30hjJGqTx43lTnWd3tdhZ96ib2MVwC097tpGCK?=
 =?us-ascii?q?eJ7LNemyt1rUG1rQbQYfh7gzccxuEi6H8cg+EVpgUtyj+RDawVHUldJSbsjQiH?=
 =?us-ascii?q?78iirKVLY2aiab2w1Et9nd+7Fr2DrB9TWG3lepg8By9/9dtwMEjD0HDo7oHked?=
 =?us-ascii?q?/Qbc8ctxGOkhfAifRVJ4w1lvYQmSVnPmf9t2U/y+EnlRxuwY26vI+fJmVx+6K5?=
 =?us-ascii?q?BwRUNzzvaMMV5zHtlr1enseN0oCrH5VhHCgLXZTyQfKpFjISqeroNwKUHDIgrX?=
 =?us-ascii?q?ebHKLVHRWD50d+s3LPD5erOmmMK3YDytViQASdKFZbgAAJRzg6mp85Fga3xM3u?=
 =?us-ascii?q?akt55zYR5kLmpRtI0O5nKx7/UmLHrgeydjg0UISfLAZR7gxa5UfaK8me4fxoHy?=
 =?us-ascii?q?1C4p2ttg+NKnGYZwRVC2EGQFeECkvnPrmv49nA7ueZCvC/L/vIfbWBt+heW+2U?=
 =?us-ascii?q?ypKo14ts5yyMOdmXPnl+E/073VJOXHB+G8TEgjUPVjYYlyTXY86Aoxe8/CJ3o9?=
 =?us-ascii?q?u78PTqXgLv+ISOB6FTMdVp5xC5n6ODO/SMiyZ+LDZSzokMymPQyLgDwF4SjDlj?=
 =?us-ascii?q?dzmzHrQBti7NT6PQlrVUDx4BbCNzO9VH77gh3glWIsPbjtL11rhljv86EVtFVF?=
 =?us-ascii?q?rhmt23aswOOW2yKFTHBEOTPrScOTLL2933Yb+7SbBIlupUqga/uSyFHE7jJDiD?=
 =?us-ascii?q?kzjpWgurMeFNiiGbIRNftJu8chZrFWjsUtbmZgenP99wiD082ac0iW/SNW4ALT?=
 =?us-ascii?q?h8dFtArqGR7SNdmPlwB3ZN4WZlLeaanSaU9O3YKpcQsft2DSV4jeNa4HImy7RL?=
 =?us-ascii?q?6CFIXuB6mCzXrtR2uVGpjvGPyiZ7UBpJsjtKhJiEvUNnOaXY8JlPQXfF/BIX4m?=
 =?us-ascii?q?WWBBQHvN9lCtzpu6BNxdnDjqPzKDFe893K+csQHdTbKMWCMClpDR28FiTVAQcI?=
 =?us-ascii?q?V3iwPmHFiklFntmR8XuJtJ887JThy7QUTboOf1i0E/4cFgxdncYFJt8jRj4+lr?=
 =?us-ascii?q?jdh8oF4FKxqRDQQINRuZWRBaHaOunmNDvM1eoMXBAP276taN1LboA=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BsAAAOeP1bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?QGCaIECJ4N5g3uQJYINFGiGeIIRCY0yFIFiKQ0GAYFLgnWEOiI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpIwxCFgGBXSQBgmEBAQEBAQEBAQIgBBkBGx0BAwIJAQEFB?=
 =?us-ascii?q?QsNAgImAgIDHwERAQUBHBkFgxwBgWgBAw0IBQqZazyLDXwWBQEXgncFgTEBAwO?=
 =?us-ascii?q?DAgoZJw1dMYEGAgEFEnmLAoIWgRGCXQcugwUZAwEBgSMEBjGDBIJXAokDghKEC?=
 =?us-ascii?q?4YkikgHAoZ8gy2HBxiBWYgvhwONRoc+gyQwgSWCDXCBAYI7ghsJAxeDSopUPjM?=
 =?us-ascii?q?BAYEDAQGJekgBJYInAQE?=
X-IPAS-Result: =?us-ascii?q?A0BsAAAOeP1bh0O0hNFkHgEGBwaBUQkLAQGCaIECJ4N5g3u?=
 =?us-ascii?q?QJYINFGiGeIIRCY0yFIFiKQ0GAYFLgnWEOiI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpIwxCFgGBXSQBgmEBAQEBAQEBAQIgBBkBGx0BAwIJAQEFBQsNAgImAgIDHwE?=
 =?us-ascii?q?RAQUBHBkFgxwBgWgBAw0IBQqZazyLDXwWBQEXgncFgTEBAwODAgoZJw1dMYEGA?=
 =?us-ascii?q?gEFEnmLAoIWgRGCXQcugwUZAwEBgSMEBjGDBIJXAokDghKEC4YkikgHAoZ8gy2?=
 =?us-ascii?q?HBxiBWYgvhwONRoc+gyQwgSWCDXCBAYI7ghsJAxeDSopUPjMBAYEDAQGJekgBJ?=
 =?us-ascii?q?YInAQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="41759217"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 09:02:35 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730005AbeK1EBC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Tue, 27 Nov 2018 23:01:02 -0500
Received: from mail-yb1-f193.google.com ([209.85.219.193]:34087 "EHLO
        mail-yb1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726338AbeK1EBC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 27 Nov 2018 23:01:02 -0500
Received: by mail-yb1-f193.google.com with SMTP id a67-v6so7819491ybg.1
        for <linux-kernel@vger.kernel.org>; Tue, 27 Nov 2018 09:02:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=aJywAevii2RT5FY+K1FiO59eTApeSkzVEUb16XGRmlU=;
        b=O9Oast7AggQiUYblGK7Xae2Vn2+uHa7a7zxQE2V0yJcX0ZjkMpxZHTXZP0KNQv5u0I
         tj5/TRVqQGo6c7Lt7OJziOXEae7ZnRp1CeFPL01oS/SZmRUclE0zQOwrhmxS9vM+nLxV
         qh27KHqbhAivIhK5Ssd5YKVaqAlWx9/9hh/mRkHElnX2tySQm6SMd13Av5/IEqDTY982
         NzHH3HXcBWgiJaxFet15dtoULspzTqBXM+Mvbzw0iPQUtfLSgIvxGhH/xmd59sZbWDid
         /eZPWkhaBgxV6UjMgTTac/MjLxNewKWFLSgYzwWL/5ezKHRcI/0RGfEJkan5ILp16Xdw
         gUXA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=aJywAevii2RT5FY+K1FiO59eTApeSkzVEUb16XGRmlU=;
        b=WC6UXggvRgOKOpP2Izg2O3ETwPANHqf5/CbBYzsGxW73POcj2yePr29EEmEfzZRKfO
         aJiINa7IQ56/vAdiuXKgdT8dsaDKVng1em3JPuUURm98PnAMPjJ3hXB7yp3h8wTdEJBB
         UxlCT5N0N8+92TfMyjlIUzXa2LfHK6M7MJcuxBhO5JE8Vdy6PYPtfR0c455HmOlP78uH
         vxAfV0F4Vrb3qaWNL8Nk1b784oxPiCNtGTAkpRWsEvpWgNHgBiiBbqipjKEzp+WA/wuZ
         nNvwowdALShmNrKOTKgupY/VrPPB/K42d4XF7Gn97zXMgkuNc0X6rDeBa786sdDY0MVC
         VsCg==
X-Gm-Message-State: AA+aEWa1GZXQ6NVDu4/MSv3OaTjVSfUsTsW9G0c/hVlxNUn7f5Ef9tU4
        vXgXyNdSbTNiiEZobPintpWdWjooHI6QCedvhFQ=
X-Google-Smtp-Source: AJdET5dzuRvgMtQ2qHUUEkXPUl5ePN9DJoPtPwf8t8n4Zaped+S+6a0hVKWhGVIed8GlLCZPTEzSQIDXI5WFxAOidbc=
X-Received: by 2002:a25:6604:: with SMTP id a4-v6mr34046006ybc.92.1543338148596;
 Tue, 27 Nov 2018 09:02:28 -0800 (PST)
MIME-Version: 1.0
References: <1541665796-21092-1-git-send-email-frieder.schrempf@kontron.de>
 <0fc1f198-0e87-01af-5a0e-3d21613c39f3@kontron.de> <CAJiuCceD=qyasCUPqjyGQso3JGoxz4g_yg3uj18wP-2CKY9wyg@mail.gmail.com>
 <1655b66f-37e2-427f-a047-8305f86fc22c@kontron.de>
In-Reply-To: <1655b66f-37e2-427f-a047-8305f86fc22c@kontron.de>
From: =?UTF-8?B?Q2zDqW1lbnQgUMOpcm9u?= <peron.clem@gmail.com>
Date: Tue, 27 Nov 2018 18:02:17 +0100
Message-ID: <CAJiuCcdnqeJO4MQh8Ru010amQkvG1Wc3=N3o1_X4QAhF-_M7tA@mail.gmail.com>
Subject: Re: [PATCH] mtd: nand: spi: Add initial support for Toshiba TC58CVG2S0H
To: frieder.schrempf@kontron.de
Cc: Boris Brezillon <boris.brezillon@bootlin.com>,
        Miquel Raynal <miquel.raynal@bootlin.com>, richard@nod.at,
        David Woodhouse <dwmw2@infradead.org>,
        Brian Norris <computersforpeace@gmail.com>,
        =?UTF-8?B?TWFyZWsgVmHFoXV0?= <marek.vasut@gmail.com>,
        linux-kernel@vger.kernel.org, linux-mtd@lists.infradead.org
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Frieder,

On Tue, 27 Nov 2018 at 17:42, Schrempf Frieder
<frieder.schrempf@kontron.de> wrote:
>
> Hi Cl=C3=A9ment,
>
> On 27.11.18 16:18, Cl=C3=A9ment P=C3=A9ron wrote:
> > Hi Frieder,
> >
> > On Tue, 27 Nov 2018 at 16:08, Schrempf Frieder
> > <frieder.schrempf@kontron.de> wrote:
> >>
> >> +Cl=C3=A9ment P=C3=A9ron
> >>
> >> Hi Cl=C3=A9ment,
> >>
> >> FYI, this has already been merged to nand/next.
> > Just want to point the difference that I made when I try to introduce m=
y driver.
> > The datasheet I used is this one :
> > https://media.digikey.com/pdf/Data%20Sheets/Toshiba%20PDFs/TC58CVG2S0Hx=
AIx_Rev1.1_2016-11-08.pdf
> >
> >>
> >> Regards,
> >> Frieder
> >>
> >> On 08.11.18 09:29, Frieder Schrempf wrote:
> >>> Add minimal support for the Toshiba TC58CVG2S0H SPI NAND chip.
> >>>
> >>> Signed-off-by: Frieder Schrempf <frieder.schrempf@kontron.de>
> >>> ---
> >>>    drivers/mtd/nand/spi/Makefile  |   2 +-
> >>>    drivers/mtd/nand/spi/core.c    |   1 +
> >>>    drivers/mtd/nand/spi/toshiba.c | 136 +++++++++++++++++++++++++++++=
+++++++
> >>>    include/linux/mtd/spinand.h    |   1 +
> >>>    4 files changed, 139 insertions(+), 1 deletion(-)
> >>>
> >>> diff --git a/drivers/mtd/nand/spi/Makefile b/drivers/mtd/nand/spi/Mak=
efile
> >>> index b74e074..be5f735 100644
> >>> --- a/drivers/mtd/nand/spi/Makefile
> >>> +++ b/drivers/mtd/nand/spi/Makefile
> >>> @@ -1,3 +1,3 @@
> >>>    # SPDX-License-Identifier: GPL-2.0
> >>> -spinand-objs :=3D core.o macronix.o micron.o winbond.o
> >>> +spinand-objs :=3D core.o macronix.o micron.o toshiba.o winbond.o
> >>>    obj-$(CONFIG_MTD_SPI_NAND) +=3D spinand.o
> >>> diff --git a/drivers/mtd/nand/spi/core.c b/drivers/mtd/nand/spi/core.=
c
> >>> index 30f8364..87bdf2a 100644
> >>> --- a/drivers/mtd/nand/spi/core.c
> >>> +++ b/drivers/mtd/nand/spi/core.c
> >>> @@ -766,6 +766,7 @@ static const struct nand_ops spinand_ops =3D {
> >>>    static const struct spinand_manufacturer *spinand_manufacturers[] =
=3D {
> >>>        &macronix_spinand_manufacturer,
> >>>        &micron_spinand_manufacturer,
> >>> +     &toshiba_spinand_manufacturer,
> >>>        &winbond_spinand_manufacturer,
> >>>    };
> >>>
> >>> diff --git a/drivers/mtd/nand/spi/toshiba.c b/drivers/mtd/nand/spi/to=
shiba.c
> >>> new file mode 100644
> >>> index 0000000..294bcf6
> >>> --- /dev/null
> >>> +++ b/drivers/mtd/nand/spi/toshiba.c
> >>> @@ -0,0 +1,136 @@
> >>> +// SPDX-License-Identifier: GPL-2.0
> >>> +/*
> >>> + * Copyright (c) 2018 exceet electronics GmbH
> >>> + * Copyright (c) 2018 Kontron Electronics GmbH
> >>> + *
> >>> + * Author: Frieder Schrempf <frieder.schrempf@kontron.de>
> >>> + */
> >>> +
> >>> +#include <linux/device.h>
> >>> +#include <linux/kernel.h>
> >>> +#include <linux/mtd/spinand.h>
> >>> +
> >>> +#define SPINAND_MFR_TOSHIBA          0x98
> >>> +
> >>> +static SPINAND_OP_VARIANTS(read_cache_variants,
> >>> +             SPINAND_PAGE_READ_FROM_CACHE_X4_OP(0, 1, NULL, 0),
> >>> +             SPINAND_PAGE_READ_FROM_CACHE_X2_OP(0, 1, NULL, 0),
> >>> +             SPINAND_PAGE_READ_FROM_CACHE_OP(true, 0, 1, NULL, 0),
> >>> +             SPINAND_PAGE_READ_FROM_CACHE_OP(false, 0, 1, NULL, 0));
> >>> +
> >>> +static SPINAND_OP_VARIANTS(write_cache_variants,
> >>> +             SPINAND_PROG_LOAD(true, 0, NULL, 0));
> >>> +
> >>> +static SPINAND_OP_VARIANTS(update_cache_variants,
> >>> +             SPINAND_PROG_LOAD(false, 0, NULL, 0));
> >>> +
> >>> +static int tc58cvg2s0h_ooblayout_ecc(struct mtd_info *mtd, int secti=
on,
> >>> +                                  struct mtd_oob_region *region)
> >>> +{
> >>> +     if (section > 7)
> >>> +             return -ERANGE;
> >>> +
> >>> +     region->offset =3D 128 + 16 * section;
> >>> +     region->length =3D 16;
> >
> > Here you expose the ECC bits has 8 sections of 16 bytes.
> > But regarding the datasheet this should not be accessed page 32.
> > "The ECC parity code generated by internal ECC is stored in column
> > addresses 4224-4351 and the users cannot access to these specific
> > addresses when internal ECC is enabled."
>
> This is just to let the other layers know, where the bytes used for ECC
> are. As long as the driver uses the on-chip ECC it won't write to this
> area. So this is correct unless I misunderstood this concept. All the
> other supported SPI NAND chips use the same approach.

Ok for not write, but are you sure that if we try to read them the SPI
will respond something logic and not some garbage ?
When I read the datasheet it looks like that the read cmd will stop or
send some random value when trying to read these columns.

>
> >
> >>> +
> >>> +
> >>> +     return 0;
> >>> +}
> >>> +
> >>> +static int tc58cvg2s0h_ooblayout_free(struct mtd_info *mtd, int sect=
ion,
> >>> +                                   struct mtd_oob_region *region)
> >>> +{
> >>> +     if (section > 7)
> >>> +             return -ERANGE;
> >>> +
> >>> +     region->offset =3D 2 + 16 * section;
> >>> +     region->length =3D 14;
> >
> > This reserved 2 bytes for BBM for each section.
> > But maybe we could declare this as 1 section of 128bytes:
> >
> > if (section)
> >           return -ERANGE;
> >
> > region->offset =3D 2;
> > region->length =3D 126;
>
> The datasheet (p. 32) describes that the OOB data of a page is divided
> into 8 sections. So why should we not reflect this in the software?
> Probably it would be sufficient to reserve two bytes for the bad block
> marker at the beginning, instead of two bytes in each section. But I'm
> not sure about this and it doesn't really hurt.

If the OOB are used one day (I think it's not the case actually), It
will be more efficient to do only one request.

Regards, Clement

> >
> >>> +
> >>>
> >>> +     return 0;
> >>> +}
> >>> +
> >>> +static const struct mtd_ooblayout_ops tc58cvg2s0h_ooblayout =3D {
> >>> +     .ecc =3D tc58cvg2s0h_ooblayout_ecc,
> >>> +     .free =3D tc58cvg2s0h_ooblayout_free,
> >>> +};
> >>> +
> >>> +static int tc58cvg2s0h_ecc_get_status(struct spinand_device *spinand=
,
> >>> +                                   u8 status)
> >>> +{
> >>> +     struct nand_device *nand =3D spinand_to_nand(spinand);
> >>> +     u8 mbf =3D 0;
> >>> +     struct spi_mem_op op =3D SPINAND_GET_FEATURE_OP(0x30, &mbf);
> >>> +
> >>> +     switch (status & STATUS_ECC_MASK) {
> >>> +     case STATUS_ECC_NO_BITFLIPS:
> >>> +             return 0;
> >>> +
> >>> +     case STATUS_ECC_UNCOR_ERROR:
> >>> +             return -EBADMSG;
> >>> +
> >>> +     case STATUS_ECC_HAS_BITFLIPS:
> >>> +             /*
> >>> +              * Let's try to retrieve the real maximum number of bit=
flips
> >>> +              * in order to avoid forcing the wear-leveling layer to=
 move
> >>> +              * data around if it's not necessary.
> >>> +              */
> >>> +             if (spi_mem_exec_op(spinand->spimem, &op))
> >>> +                     return nand->eccreq.strength;
> >>> +
> >>> +             mbf >>=3D 4;
> >>> +
> >>> +             if (WARN_ON(mbf > nand->eccreq.strength || !mbf))
> >>> +                     return nand->eccreq.strength;
> >>> +
> >>> +             return mbf;
> >>> +
> >
> > These take take care of 0, 0x1 and 0x2 but not 0x3 which is valid
>
> Hm, you're right. We don't care if it is 0x1 or 0x3 (both mean that
> bitflips were corrected), but we currently only check for 0x1.
>
> I will send a fix for this tomorrow.
>
> Thanks,
> Frieder
>
> > page 26 of the datasheet :
> >
> > ECC status bits indicate the status of internal ECC operation
> > 00b: No bit flips were detected in previous page read.
> > 01b: Bit flips were detected and corrected. Bit flip count did not
> > exceed the bit flip detection threshold. The threshold is set by bits
> > [7:4] in address 10h in the feature table.
> > 10b: Multiple bit flips were detected and not corrected.
> > 11b: Bit flips were detected and corrected. Bit flip count exceeded
> > the bit flip detection threshold. The threshold is set by bits [7:4]
> > in address 10h in the feature table
> >
> > Regards,
> > Clement
> >
> >>> +     default:
> >>> +             break;
> >>> +     }
> >>> +
> >>> +     return -EINVAL;
> >>> +}
> >>> +
> >>> +static const struct spinand_info toshiba_spinand_table[] =3D {
> >>> +     SPINAND_INFO("TC58CVG2S0H", 0xCD,
> >>> +                  NAND_MEMORG(1, 4096, 256, 64, 2048, 1, 1, 1),
> >>> +                  NAND_ECCREQ(8, 512),
> >>> +                  SPINAND_INFO_OP_VARIANTS(&read_cache_variants,
> >>> +                                           &write_cache_variants,
> >>> +                                           &update_cache_variants),
> >>> +                  SPINAND_HAS_QE_BIT,
> >>> +                  SPINAND_ECCINFO(&tc58cvg2s0h_ooblayout,
> >>> +                                  tc58cvg2s0h_ecc_get_status)),
> >>> +};
> >>> +
> >>> +static int toshiba_spinand_detect(struct spinand_device *spinand)
> >>> +{
> >>> +     u8 *id =3D spinand->id.data;
> >>> +     int ret;
> >>> +
> >>> +     /*
> >>> +      * Toshiba SPI NAND read ID needs a dummy byte,
> >>> +      * so the first byte in id is garbage.
> >>> +      */
> >>> +     if (id[1] !=3D SPINAND_MFR_TOSHIBA)
> >>> +             return 0;
> >>> +
> >>> +     ret =3D spinand_match_and_init(spinand, toshiba_spinand_table,
> >>> +                                  ARRAY_SIZE(toshiba_spinand_table),
> >>> +                                  id[2]);
> >>> +     if (ret)
> >>> +             return ret;
> >>> +
> >>> +     return 1;
> >>> +}
> >>> +
> >>> +static const struct spinand_manufacturer_ops toshiba_spinand_manuf_o=
ps =3D {
> >>> +     .detect =3D toshiba_spinand_detect,
> >>> +};
> >>> +
> >>> +const struct spinand_manufacturer toshiba_spinand_manufacturer =3D {
> >>> +     .id =3D SPINAND_MFR_TOSHIBA,
> >>> +     .name =3D "Toshiba",
> >>> +     .ops =3D &toshiba_spinand_manuf_ops,
> >>> +};
> >>> diff --git a/include/linux/mtd/spinand.h b/include/linux/mtd/spinand.=
h
> >>> index 088ff96..816c4b0 100644
> >>> --- a/include/linux/mtd/spinand.h
> >>> +++ b/include/linux/mtd/spinand.h
> >>> @@ -196,6 +196,7 @@ struct spinand_manufacturer {
> >>>    /* SPI NAND manufacturers */
> >>>    extern const struct spinand_manufacturer macronix_spinand_manufact=
urer;
> >>>    extern const struct spinand_manufacturer micron_spinand_manufactur=
er;
> >>> +extern const struct spinand_manufacturer toshiba_spinand_manufacture=
r;
> >>>    extern const struct spinand_manufacturer winbond_spinand_manufactu=
rer;
> >>>
> >>>    /**
> >>>
