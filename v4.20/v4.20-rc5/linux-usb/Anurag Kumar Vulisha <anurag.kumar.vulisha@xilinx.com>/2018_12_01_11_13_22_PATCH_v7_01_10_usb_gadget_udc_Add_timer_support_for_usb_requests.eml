Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:25:20 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from mta-temp.ostc.intel.com (mta-temp.ostc.intel.com [10.54.63.100])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 5910B580BFE;
	Sat,  1 Dec 2018 18:20:38 -0800 (PST)
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mta-temp.ostc.intel.com (Postfix) with ESMTPS id AA8FE62710;
	Sat,  1 Dec 2018 09:35:05 -0800 (PST)
Received: from orsmga103.jf.intel.com ([10.7.208.35])
  by fmsmga006-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 01 Dec 2018 09:34:12 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AS37FlRF4VY6pa+CyCvYDF51GYnF86YWxBRYc798d?=
 =?us-ascii?q?s5kLTJ74p8y8bnLW6fgltlLVR4KTs6sC17KG9fi4EUU7or+5+EgYd5JNUxJXwe?=
 =?us-ascii?q?43pCcHRPC/NEvgMfTxZDY7FskRHHVs/nW8LFQHUJ2mPw6arXK99yMdFQviPgRp?=
 =?us-ascii?q?OOv1BpTSj8Oq3Oyu5pHfeQpFiCa+bL9oMBm6sRjau9ULj4dlNqs/0AbCrGFSe+?=
 =?us-ascii?q?RRy2NoJFaTkAj568yt4pNt8Dletuw4+cJYXqr0Y6o3TbpDDDQ7KG81/9HktQPC?=
 =?us-ascii?q?TQSU+HQRVHgdnwdSDAjE6BH6WYrxsjf/u+Fg1iSWIdH6QLYpUjm58axlVAHnhz?=
 =?us-ascii?q?sGNz4h8WHYlMpwjL5AoBm8oxBz2pPYbJ2JOPZ7eK7WYNEUSndbXstJVyJPHJ6y?=
 =?us-ascii?q?YYUMAeQGP+lYoYbyqEcVrRumBwShH//vxiNSi3Pqx6A2z/gtHAfb1wIgBdIOt3?=
 =?us-ascii?q?HUoc3pOacUTOC11rPHzTreZP1TxDf97ZLHcgo8qv6DQLJwdcvRyVIvFwzfk16d?=
 =?us-ascii?q?rpbqPzWI1uQXqWeb4PBsVeGyi24isQ5xuCKjxtkxionNh4IV0VDE+j9izYc6JN?=
 =?us-ascii?q?24TE97YdirEZdKqy6aMI52T9okTmp1uyg60qULtYCncCUO0pgr2hDSZ+Kdf4SV?=
 =?us-ascii?q?4R/vSPydLDZ6iX59Zb6yiBK//VK9xuD4UsS4ylhHoylfntTNt30A0QHY5NKdRf?=
 =?us-ascii?q?tn5Eih3C6C1wDN5eFAJkA5jbTbK5E/zb4qjJYTslrMHjXwmEroiK+abEIk+vKn?=
 =?us-ascii?q?6+j/Y7XmoIGTN5Nshw3gLqgjntazDfk2PwQQRWSX5Oex2KH58UD4QrhGlvg2nb?=
 =?us-ascii?q?PYsJDeK8QbvKm5AwpN34Yn6ha/CSqm0dsBkXkEMl1FYhSHgJbtO13XJ/D5A/G/?=
 =?us-ascii?q?jEq2kDpw2fDGMaPuAo/XInjAjrjhZ7B95FBYyAYpytBf/Z1UBqkbIP3vQk/xqM?=
 =?us-ascii?q?DYDhghPgywwubnC8ty2pkRWGKSGaKZNKLSsVmV5uMgOeWMZYkVuCrjJPgh/fLh?=
 =?us-ascii?q?kXg5mVoFd6mzwZQXcGy4HuhhI0iBYXrjmNYBEXsQsQo5VuDqiECCXiRVZ3a9RK?=
 =?us-ascii?q?884jA7CIS7DYbMXIytgbqB3DulEZ1SfGxJFleMEXLwfYWeR/gMcD6SItNmkjEc?=
 =?us-ascii?q?V7ihTJEu2QuttA/9zbpnKO3U9zYctZLi0th1+uLSmQsz9TxyE8SSzWWNQ3tokW?=
 =?us-ascii?q?MPQj88xLp/rlBlylefzah4hORVGsZI5/NJVQc6NoTQz/ZgBNDwQQ/BetaJSFC7?=
 =?us-ascii?q?QtSpGz0xT9Qxw8MQbEZ5AdmtkhfD3y+yCb8Pi7OLHIA08r7b33XpJMZy0XDG2L?=
 =?us-ascii?q?Mlj1knWMRPM2Kmi7V79wjSAY7JjkqYm7yrdaQawC7C6mODwXCSs0FfVQ56Sb/F?=
 =?us-ascii?q?UmwHZkvKsdT54VvPQKK0BrQ5LARN086CJbFMat3yk1pGQvDvONDdY2K0n2e9Hh?=
 =?us-ascii?q?KIxrKKbIr3dGQRxiTdCE4Ykw8N+XaKLxQxBiCko2jGFjxhCUrvY1/w8el5sH60?=
 =?us-ascii?q?U1U7zx+UYEF717q64BgVheeCRPMVxb8EvCYhqzNpHFeyxd7WCtyApxZ/c6VYe9?=
 =?us-ascii?q?8y/FBH1WfBvQxnIpOgN7xihkIZcwlvo0Pu1hB3CoJckcgqrHIm1hZyJbif0FNb?=
 =?us-ascii?q?czOY3JbwOrLMJ2n2/RCvbbPW217E3NaX/KcP9Oo3q1H5sA61EUoi9m1t08NJ3H?=
 =?us-ascii?q?uE+pXKEA0SXIrrXUYz6Rd7qK/VYykn64zPyH1jLLO7sjnB29IuGuso0RKgf9ZZ?=
 =?us-ascii?q?MKOZGw7+CcwaB86yKOM0n1ildA4LPOdX9KQsJcOpa+OG2LK3POZnhD+njXlH7J?=
 =?us-ascii?q?ph3U6W9it8SvTH35AKw/yD2guHVjH8jEqus8ztmIBEYy0SEXS7yST+GIFRYahy?=
 =?us-ascii?q?d54RCWiyO8232sl+h5n1Vn5C9V6sG0kJ2NW0dhqVdVD92xNf1V4WoXC+hSS31T?=
 =?us-ascii?q?h0nCw3oaqF2yzOxf/vdB4GOm5NWWljgk3gIYmyj9AGQkeoaxIlmwei5Ub/36Jb?=
 =?us-ascii?q?vrhwL3HPQUdUeCj7N2FjUqqquruCecJP844osSNMXeS4YFCaTKP9ohQA3yPiGW?=
 =?us-ascii?q?te2C40dzWwtprlmBx6jXqXLGxvo3rBZcFw2RDf6cTeRfFLxDoGRyp4iT7NClin?=
 =?us-ascii?q?Jdap/taUl5bFsu+gUWKsTZlTcSjtzYOduyq3/2xqARujn/+tnt3rCxQ10Sj+19?=
 =?us-ascii?q?NyTyXHsA78YpX316S9Ke9mflNnBFjm58p4G4F+lJA9hJUR2Xgcm5WU8mALkWb1?=
 =?us-ascii?q?MdVHx63+aGABSiIMw97Q+ALlwlFsLmqVx4LlUXWQ2shhaMO7Ym8M2iI98tpFCK?=
 =?us-ascii?q?Gb7LFfmSt1o1y4rR/eYPRnnzcdz+cu52Aeg+0TpAUtySCdCKgIHUZEJSzsiwiI?=
 =?us-ascii?q?79emoaVSZWavcqK/2FBwnN+/F7GCvh9TWGzidZg8By9w4d5yMFbN0H3194Hld8?=
 =?us-ascii?q?PcbdMVth2IjRjAi/JZJ442lvoPnSBnI37yvWU5y+4nihxjxY26vI+CK2l3/aO2?=
 =?us-ascii?q?GBhYNiDuZ8MI+zHglqJenseQ34CyEZRtADQLXJ30Tf22FDIer+joNwGLEDcksH?=
 =?us-ascii?q?eUBaLfHROD6Edht3/ACIqkN3aTJHkE19liQASdKVdbgAAVWjU6g5E4GhqrxMzn?=
 =?us-ascii?q?bEd2+DQR6kTkpRtLz+JiLwP/XXvHpAe0djc0T4CSLBhM4QFH+UjVKtaS7v5pEy?=
 =?us-ascii?q?Fb452hrxGNKmqBaARTFmwJXk2EB1b+Prih/9XA8u6YBvagIPvKe7mBteteV/KQ?=
 =?us-ascii?q?z5K1zoRm5yqMNtmIPnR6D/w73VdDXWlkG8vDnTUDUTcXlyXLb86Uvxq8/ix3rs?=
 =?us-ascii?q?ai8PXkQg7v5I2PC6dMPtVr4Ry5naCDN+uIjiZjNTlYzo8MxWPPyLUH3F4dlSBu?=
 =?us-ascii?q?dzquEbQBryLNT7jQmqhYDxEFcSNzKdBI4rk43glMP87bl9z02qR5jv4zF1dKS1?=
 =?us-ascii?q?jhltu1aswNJmG3LEnHC1qTNLSaOT3LxNn6brmhSbJLluVbqR2xtSyfE0/iJTmD?=
 =?us-ascii?q?kzjpVxayMeBDli2bPRpeuJ2jfRZpE2TsUNXmahijOt9tkTI22aE0hm/NNWMELT?=
 =?us-ascii?q?h8ckZNoqeM4i9Cnvp/G3JO7nx+IOmAmiaZ6fTYK5kMvftqBCR0i/xV4HAgx7RJ?=
 =?us-ascii?q?6yFEQeR/mDHOod52v1Gmju6PxyJnURVUrDZLgYOLvUN6NqTY9plPQ3DE/B0W4G?=
 =?us-ascii?q?WUChQKocZlC9L1t6BRzNjPiLz8KDNY/93I+sscApucFMXSHnclMALkUBTdCAEE?=
 =?us-ascii?q?BWqhPGXVhmReneuU+3nTqYI1/Nykt4ADRfd4Tls8FrY6A155GdUEaMN4RD4rkr?=
 =?us-ascii?q?6ziM8O+GqwqwTXSMxGv5fBEPWIDqOrYA2ZkLBELzgIyLWweZ8TK4T7809vcF93?=
 =?us-ascii?q?mMLNAUWGGZhkpiRnJjQorV9LuCxlUmAp3Wr/bRyp6XkfU/69hAA/kAc4bOgwon?=
 =?us-ascii?q?OkwVA3L1yChCwul0090YHnhjCYdhbyIb22UIUQDDD74Qx5EJr2QQFyawL6vk1h?=
 =?us-ascii?q?fGPPQ7NUhbFqM2NqjSfTvJJOHbhXSqgSJFc6yPeVbvAp1xx8pz+9yElc7uvACJ?=
 =?us-ascii?q?d+3F8gfJish3FNwQRuaJg+P6XLJKtPwR5XnK3Y+meS0e882kcnOk8B6mSJMHoS?=
 =?us-ascii?q?v0MFLKAOOyvu9etpv0jKvjJFZSAjXuc2q/ciokYyMvmcxifI2LlPJ0msLeuFJu?=
 =?us-ascii?q?WeoWeW0YbcR1oqykIO0VFI4bVsysolW02OXksrwf2aEBFfcYLoIBtJJ/Rb8jD6?=
 =?us-ascii?q?Zj2FseiFlZhrNoO0DfvjTeKmva0RxEW+E1BtV6EN7clJNZm20VrELMqveLsOyQ?=
 =?us-ascii?q?8s/xjqDE+IAPRAZFSAlzJR54maxYNr3YRCbg4cBW56IW3j+bfToh4CgfyNRt46?=
 =?us-ascii?q?b34WGIweOSRyEOa9ny9f91VJCnGU0+QWgFyJ6Dv9oGLTDT/zR9FqYvCSZBhlDJ?=
 =?us-ascii?q?e9/jBpoIasjluC25PDPWj1ffd/v9bVod0Ho5ecC/ocGbB7rl3VlM9bWnmjSSjR?=
 =?us-ascii?q?DNq0PJj5Q5ktad3yGjCxVVnp2GF9dNv4INv4dvvAugrvX4sB9dDDhD0=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAABxxQJch0O0hNFjDg8BAQUBBwUBg?=
 =?us-ascii?q?VEIAQsBgTAqJoFcBwgnh0EBhE9fimGCMjloiW6DDolQFIEQA08PAQEYEwGHdiI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQoLCQgpIwyCNiQBgmIDAwECJBkBATcBBQkBAVADK?=
 =?us-ascii?q?SsGAQkBAwUFglFLgWoDFQECAppHAgKKBYFsM4J2AQEFgQQBAYN4GIIJCBSHWYQ?=
 =?us-ascii?q?veoEcgREzgioHgW8BgxkOhXOJDhgCCoFvhQpRjnFVBwKDE4cfhwoCFolrFIcni?=
 =?us-ascii?q?QSPQgICAgIEBQINAQEFgUaCDTMaI1CCbIIbDAwLg0qKGAQBPmoBgQQBAQcBGYp?=
 =?us-ascii?q?QAQMigicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AYAABxxQJch0O0hNFjDg8BAQUBBwUBgVEIAQsBgTAqJoF?=
 =?us-ascii?q?cBwgnh0EBhE9fimGCMjloiW6DDolQFIEQA08PAQEYEwGHdiI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQoLCQgpIwyCNiQBgmIDAwECJBkBATcBBQkBAVADKSsGAQkBAwUFglF?=
 =?us-ascii?q?LgWoDFQECAppHAgKKBYFsM4J2AQEFgQQBAYN4GIIJCBSHWYQveoEcgREzgioHg?=
 =?us-ascii?q?W8BgxkOhXOJDhgCCoFvhQpRjnFVBwKDE4cfhwoCFolrFIcniQSPQgICAgIEBQI?=
 =?us-ascii?q?NAQEFgUaCDTMaI1CCbIIbDAwLg0qKGAQBPmoBgQQBAQcBGYpQAQMigicBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,303,1539673200"; 
   d="scan'208";a="54527115"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 01 Dec 2018 09:34:10 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727109AbeLBErC (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Sat, 1 Dec 2018 23:47:02 -0500
Received: from mail-eopbgr730045.outbound.protection.outlook.com ([40.107.73.45]:36259
        "EHLO NAM05-DM3-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726788AbeLBErC (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 1 Dec 2018 23:47:02 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=xilinx.onmicrosoft.com; s=selector1-xilinx-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=pAeWIpde05s6gDOiVtppofyLiUtuO5xWab/uKuFbCb4=;
 b=MRsjgc6hGQD7k3xIaPxD3AXSJJ3K8Xy3LhhMJJ68Nofmp+EuGK2AIvDvY+nncR47aH1XC18iK/dNIbd+wbh/wW37cczCwu6wZvwag9b2hmOVZFYT/PD0HYXdVDtU4HHOCbtlQRyjD5Pa3VZ7tk2A87zPYAtxxRPEpCliUAypwjk=
Received: from SN4PR0201MB3518.namprd02.prod.outlook.com
 (2603:10b6:803:44::16) by SN4PR0201MB3518.namprd02.prod.outlook.com
 (2603:10b6:803:44::16) with TransportReplication id Version 15.20 (Build
 1382.22); Sat, 1 Dec 2018 17:33:51 +0000
Received: from DM6PR02CA0022.namprd02.prod.outlook.com (2603:10b6:5:1c::35) by
 CY4PR0201MB3508.namprd02.prod.outlook.com (2603:10b6:910:95::14) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.1361.16; Sat, 1 Dec
 2018 11:13:46 +0000
Received: from CY1NAM02FT004.eop-nam02.prod.protection.outlook.com
 (2a01:111:f400:7e45::200) by DM6PR02CA0022.outlook.office365.com
 (2603:10b6:5:1c::35) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.1382.22 via Frontend
 Transport; Sat, 1 Dec 2018 11:13:46 +0000
Authentication-Results: spf=pass (sender IP is 149.199.60.83)
 smtp.mailfrom=xilinx.com; vger.kernel.org; dkim=none (message not signed)
 header.d=none;vger.kernel.org; dmarc=bestguesspass action=none
 header.from=xilinx.com;
Received: from xsj-pvapsmtpgw01 (149.199.60.83) by
 CY1NAM02FT004.mail.protection.outlook.com (10.152.74.112) with Microsoft SMTP
 Server (version=TLS1_0, cipher=TLS_RSA_WITH_AES_256_CBC_SHA) id 15.20.1382.18
 via Frontend Transport; Sat, 1 Dec 2018 11:13:45 +0000
Received: from unknown-38-66.xilinx.com ([149.199.38.66] helo=xsj-pvapsmtp01)
        by xsj-pvapsmtpgw01 with esmtp (Exim 4.63)
        (envelope-from <anurag.kumar.vulisha@xilinx.com>)
        id 1gT3DU-0002W6-HS; Sat, 01 Dec 2018 03:13:44 -0800
Received: from [127.0.0.1] (helo=localhost)
        by xsj-pvapsmtp01 with smtp (Exim 4.63)
        (envelope-from <anurag.kumar.vulisha@xilinx.com>)
        id 1gT3DP-0001kp-Dj; Sat, 01 Dec 2018 03:13:39 -0800
Received: from xsj-pvapsmtp01 (xsj-smtp.xilinx.com [149.199.38.66])
        by xsj-smtp-dlp2.xlnx.xilinx.com (8.13.8/8.13.1) with ESMTP id wB1BDXen015251;
        Sat, 1 Dec 2018 03:13:34 -0800
Received: from [172.23.64.8] (helo=xhdvnc108.xilinx.com)
        by xsj-pvapsmtp01 with esmtp (Exim 4.63)
        (envelope-from <anuragku@xilinx.com>)
        id 1gT3DJ-0001jj-DU; Sat, 01 Dec 2018 03:13:33 -0800
Received: by xhdvnc108.xilinx.com (Postfix, from userid 15427)
        id 96953604E9; Sat,  1 Dec 2018 16:43:32 +0530 (IST)
From: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
To: Felipe Balbi <balbi@kernel.org>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Shuah Khan <shuah@kernel.org>,
        Alan Stern <stern@rowland.harvard.edu>,
        Johan Hovold <johan@kernel.org>,
        Jaejoong Kim <climbbb.kim@gmail.com>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Roger Quadros <rogerq@ti.com>,
        Manu Gautam <mgautam@codeaurora.org>,
        <martin.petersen@oracle.com>, Bart Van Assche <bvanassche@acm.org>,
        Mike Christie <mchristi@redhat.com>,
        Matthew Wilcox <willy@infradead.org>,
        Colin Ian King <colin.king@canonical.com>
CC: <linux-usb@vger.kernel.org>, <linux-kernel@vger.kernel.org>,
        <v.anuragkumar@gmail.com>, Thinh Nguyen <thinhn@synopsys.com>,
        Tejas Joglekar <tejas.joglekar@synopsys.com>,
        Ajay Yugalkishore Pandey <APANDEY@xilinx.com>,
        Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
Subject: [PATCH v7 01/10] usb: gadget: udc: Add timer support for usb requests
Date: Sat, 1 Dec 2018 16:43:22 +0530
Message-ID: <1543662811-5194-2-git-send-email-anurag.kumar.vulisha@xilinx.com>
X-Mailer: git-send-email 2.1.1
In-Reply-To: <1543662811-5194-1-git-send-email-anurag.kumar.vulisha@xilinx.com>
References: <1543662811-5194-1-git-send-email-anurag.kumar.vulisha@xilinx.com>
X-RCIS-Action: ALLOW
X-TM-AS-Product-Ver: IMSS-7.1.0.1224-8.2.0.1013-23620.005
X-TM-AS-User-Approved-Sender: Yes;Yes
X-EOPAttributedMessage: 0
X-MS-Office365-Filtering-HT: Tenant
X-Forefront-Antispam-Report: CIP:149.199.60.83;IPV:NLI;CTRY:US;EFV:NLI;SFV:NSPM;SFS:(10009020)(346002)(136003)(396003)(39860400002)(376002)(2980300002)(199004)(189003)(106002)(186003)(336012)(48376002)(426003)(11346002)(446003)(2616005)(50466002)(476003)(2906002)(4744004)(551934003)(356004)(6666004)(7416002)(76176011)(5660300001)(51416003)(478600001)(47776003)(14444005)(305945005)(316002)(42186006)(2171002)(16586007)(6266002)(63266004)(36386004)(4326008)(90966002)(103686004)(52956003)(107886003)(81166006)(81156014)(486006)(106466001)(110136005)(54906003)(126002)(39060400002)(50226002)(26005)(36756003)(8936002)(8676002)(921003)(107986001)(1121003)(83996005)(2101003);DIR:OUT;SFP:1101;SCL:1;SRVR:SN4PR0201MB3518;H:xsj-pvapsmtpgw01;FPR:;SPF:Pass;LANG:en;PTR:unknown-60-83.xilinx.com;A:1;MX:1;
X-Microsoft-Exchange-Diagnostics: 1;CY1NAM02FT004;1:vxHfQc15iGxZNxEi7xB4ogz5DeDDKTDALztA+crBwEw53WeeYFzSuyfgtuApAvAZ7Mr1rqtYeVtK3b0bscdRA/1wqLdP//VzJIQAQ5pbD7/C2JPDf7LF9eLjuRb4EjYf
MIME-Version: 1.0
Content-Type: text/plain
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ab7de776-acf3-4c78-50ec-08d6577e0fbc
X-Microsoft-Antispam: BCL:0;PCL:0;RULEID:(2390098)(7020095)(4652040)(8989299)(5600074)(711020)(4608076)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(2017052603328)(7153060);SRVR:CY4PR0201MB3508;
X-Microsoft-Exchange-Diagnostics: 1;CY4PR0201MB3508;3:PAahK4VhaIm8X9aXO0D2CNx8ViTCzrYOHEBHPnx8VE37hxzjVJtFnEnqAvotInHw+ThbpKT+H5nSmOaM7LerojNxAD/38YCFzNnfij8taS4ZQGwh7Gc5WrgvXTLJqIM3ChRyn6gD9eiIiwY5pKeVq4eEsi++2Fb+r340yxnCPFJddni3dy14FBm6dOfVa0NE3MjIwow1WGSc4XtQXswoH8C0ky1wBSzDsRD2g9SVEtJb1HvdLUGjKLIWOS8MlLzby347mSzqAYVUOdh/4VYI7XkvSp6t9Iv1RIYQo8THcaAmZM8Ek86Z2vko/dpu2rg9TVw4DswlS4W2ZYrFwgPlKlFdYL2dqMQLiIblJskvqpQ=
X-MS-TrafficTypeDiagnostic: SN4PR0201MB3518:
X-Microsoft-Exchange-Diagnostics: 1;SN4PR0201MB3518;25:o5sENBwvxyIXgoMTC5IGBqShDtHY2G6JhQhp8xQ6FiqywvK7wYjOHfaZlLGTboVuPpRxcgU9kE38mfY9HYmQq8x0R593lS/BYt3O9d4HG04nL4+IH2C+WD7lvpnuBr8Zh6NdDjFIZ6NzqdZU2XF8CXjBFIoIhO3QucY3gF1/nas2pRVE+ALC+GfyD1L/7ISCxCDyCUK4n4rpbD2ge3NnDZnSjfUFfJtRLYxdF4ZMDfo3n0zFiuYCw6PGvvI9tQet4kHt5jHgx6hTubHP1ONvesQVLz8qXg24WwlEpPO43z39GCgVw/fVygwIPuFWPbNWcXD6YXEgO7b9qqlDHdxoVA==;31:2JxedLZ/+XwgBWYTkb/Fjjr8x4W/UyqIupRY5sjJ2RI1RqgT6JGNXscY/BmsY+PuHsItDatbmAxbmaFCEn+pxw+esjhZ4TQq8zBY5Sjux3+C7JbfB9i+XNISxWQ9ZdE6WiH0gKzy6eRItrQlknELie0/k7OG/rp+mmpOsgGD78Kns91trzQoslUAHv4pc0lJSfcR3TA5er/BHGKS8kzS4wngjbcZVoc8jCUEzCzwsx0=
X-Auto-Response-Suppress: DR, RN, NRN, OOF, AutoReply
X-Microsoft-Exchange-Diagnostics: 1;SN4PR0201MB3518;20:PCC3CswuNjnhpWmyYnzg7M4i2ktbPnjLqA0XML3hyRHuz1T9JEwYFOBpiob/15OjTJwkCwqmNowUIAu67l4ShN7A+fY5v1xQYLUDJQkbiVSvj9bKkTuV6/1+qHH4HB3RlnXW2AHw/FoQOWcdc941i4WF/FEN+sWp4BMkGmJzX/xoMRmHPXH7sVdjanxxr35Yktq7YmIj7wwPApoM/GnZ1vHDJGAvLvqH6M5xT+nLyhXZfOOP4BSopsO1mSxMw9JBGxEA6vfhxe/Ch6T4CtOmJbO8MozwzVLxw364mBF8J80iTyQiGEhbHVX0uemKoPHkA1SCJkvCI1nyNG7VKpJe+q2MpSu18kSHnXjTsBl3xesfgMBrJFCwQjEDKBktHHXLM0utyxMYJE1A8yB4u4+vnNeKkm392/OX2TPspZt+POP2hv9x6s9eyyII+jVzfbySPheGKHKPfkh7lBObzO6ovHl4Y21rQ34vsbBG18D17CsttLtOTXL8kVi0/qEdt7w6;4:gYs3HbvYFROdeUNofyNxYVJ9vdYyByMWipgvPBZCmX3hWmKbA131wbH2zDhfb016wRroqJNFj5pmEmbT3u4xcahGG8JwcTtwDz1Jm0uOgiFswXBp3Axy/ffPLUsyO2bBr6aRjbwNeK9oinaYMIeYsTLwEB8oHtDTnvuzgYM6npFuJC0SoNqj2VVjGtrr9BaRi/QUQENQeN42b6eYWB1SqIMe75jisHPJdAdeafckvianI3+r6RmX3b/mUV1hSfvRrSmJwNqMWYL8Aqhcs3U5Yw==
X-Microsoft-Antispam-PRVS: <SN4PR0201MB35186DEA0531549D82F89246A7AC0@SN4PR0201MB3518.namprd02.prod.outlook.com>
X-MS-Exchange-SenderADCheck: 1
X-Exchange-Antispam-Report-CFA-Test: BCL:0;PCL:0;RULEID:(8211001083)(6040522)(2401047)(8121501046)(5005006)(10201501046)(93006095)(93004095)(3231455)(999002)(944501410)(52105112)(3002001)(6055026)(148016)(149066)(150057)(6041310)(20161123560045)(20161123558120)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123564045)(20161123562045)(201708071742011)(7699051)(76991095);SRVR:SN4PR0201MB3518;BCL:0;PCL:0;RULEID:;SRVR:SN4PR0201MB3518;
X-Forefront-PRVS: 087396016C
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1;SN4PR0201MB3518;23:VZJJlF0QMS8XeWErWBcfmr3VgXlvJx8LHn8ybGg?=
 =?us-ascii?Q?KZ9Wyu23EeLvvUNpgd3x0B62KE5WAUckXVQWfTSOEmQbKLoIvvMfzh0+s/6W?=
 =?us-ascii?Q?lrVj7LXh/0QBOMbEoZ/I/4x6CfKfVaDjYyk8eVDtgHurycZfwM1Wc36y/YMa?=
 =?us-ascii?Q?YlCt0MDYmdcBHtMnURjN6KR4+piFdUTtbOa4RDXoHRPomWzY4c3kwytcgoA1?=
 =?us-ascii?Q?NMQJyqOst0rJVaRPJA6KE4AiJQYGyEj2baSHY3AweWI/96oeV0GLram8pP40?=
 =?us-ascii?Q?yIEz0Tq4I1JnbaEp2GA+mzFYmibo5jj8Zmrb6PcLTHdpna+MorbCfTzcHQdB?=
 =?us-ascii?Q?XB8yXquGGG6hJC6KsUEiJ0uDtV4jO6rv+OwAd+HRnPnAfiu4t53kYwiP/9Jk?=
 =?us-ascii?Q?f6a1oi1W7DH6zmHvpyyLfY417kH5upBQzzgF6yaVFsZLsffW56MD0CSHBvPI?=
 =?us-ascii?Q?u1q0sP7BCtVw/7pz3AbvkQoyGJIyJndwFZKjkKwQ5/M/Xo4Cqd8m0Cn00meR?=
 =?us-ascii?Q?uGNJ+vh1Fu9yxGZiDEPNCtckDWsdEG/s52Ap8OWW0bvF8T3CBMckUDqCL6bU?=
 =?us-ascii?Q?hcdbmHNbzBzhatqHm9KXHaU0nOm58BXWZAk+wXRwLUEpuFJbXZVY+6aunyoG?=
 =?us-ascii?Q?2hz+ZXKnBt2P0ZqxTDuxzaeU56A2gnHHiJCneM8SKGn2zZOgspR3Uca9EP5F?=
 =?us-ascii?Q?waB+qVHlcj9IdTO2QgU+W3oaYqN/6BglilIbl6YoQSH/dtLJxGo3IVgAtIlG?=
 =?us-ascii?Q?0fWmBKG751MSxkJojUrsFEhwrdGG42R02dxmFK/d7dWky+Nl5pUDdEk2Y4qM?=
 =?us-ascii?Q?VbTWNLaDPHM5qirXRiGNMyX7xporDitkfBiRnBlNwNooXbH82FO4f88VJdYy?=
 =?us-ascii?Q?4ZBQcc2Dc74aKDkZ3JtBrwVF2f8bFYKF8WJQivlMnuV/OLthdgI41dPpl+9a?=
 =?us-ascii?Q?pl7sLzLzcmcN9jTOrvpi7v7Q4vBeyLfvM5pmNYPFJ1ysZDoZulHOc2y+KhQp?=
 =?us-ascii?Q?B0jsRduOS12eNYgseGqNX1zPyTq2P9U7OaV7+ivMfIx8j7LEMvE5KG7ZSFs3?=
 =?us-ascii?Q?Wqf069sckSBEy6El/yVnaAwM0vu2xy8qRiMqrLi+3nej0RggzD339VBxkVEB?=
 =?us-ascii?Q?yCVoVmZNs9NQQQJQ41lNFxCtgIP5AadWsOCAf5P6Yom+g6SINnJN4R2JuN7c?=
 =?us-ascii?Q?YgnkZJieS2J3eh135IBZsddVL1Kdmho7AjudXHlAih+gwmyXUJKyoxDFxZ31?=
 =?us-ascii?Q?vx9FBYkZkpS+y2EdLka94yUR/T2L/g3KkysCFNEisThgYmwVbeKyILMQrvld?=
 =?us-ascii?Q?NIjdAOkUEV7nUEVC0Wj4j504ed0FZNEKGoQn/Dx1HwaEk?=
X-Microsoft-Antispam-Message-Info: NLtIcFQKeAd2KpoWq4FMMDmT8h/psV7i3F9WNZ3ejqlmXH7R2dGkWxKxNN19HHIc/kOwQUKNXsYTninCewWvAC03IwG26nuTPp9ddMPROOIuT/C+txOehEYCQs8qw0DzLltAEsqLxFCUNS9uRwFzG7wQcRUSCJOZG3ndJm3jrguESEr7iFkR+56/phSYfq2APVHSA7Cj5DN5wsoCC4pWtAJJ2PzzjobODNslqBuxapb0O6eBeiPBXsYxiORl43IThRmeaJIqIx7xzowO4gYIzHpVz+eKowjIYzrTseq4gDUDVsC5ShEab+U6Jg62VsxDlQImz0joLjTBWuT6J28iHJsMXwIt2oA66RsOU9DkvqM=
X-Microsoft-Exchange-Diagnostics: 1;SN4PR0201MB3518;6:YJukLNrx3O/39+uKeVtN6QqfIXU/nV22IqbEjRkuf03xzL4URCBJ+44RKS36sSr49GzCwl6sDdohPdL/2j+MFfp2S5C5OCElutzYU8RVx2Nsvb67RKiE22Iqp30x8RsC/ta/rUi3AJEHPyOLM5sH1GMFR+7EhUVUVnG3QQU+D3muEfBveINbhliBdtZn4VQeQ/CY1i6kY0h8C1Ko9lFhUkpb17vtrdPa2xz/AZzqCWx0vuPfpOLFbnRNxuWhggdmR411MgdzK2tqChy5jEO8AFy26QCBCsUgpRwni0wTlzoTx6Qp7zZ1nn653tZsISgky0w5i05taFRaFWEKvy6ZaqTLH8Ki7ueD9r9xvaGbO4+ipEuvRxA2Vk6UDV5i9cC7GGLqbPOhaOEa7dvF64/O0WGbV2SP9DbUBoH1Cy9QiMJa5BKygH/z7WrdErCh9K6DeT0hf8vrC+Z56Tm/gte3vQ==;5:HtN8zT7p17bfXb06ngm7PiHSPzL+HoQ8DzV95OfOg14Zam0CsaUDwO6SgAoxfUnf2+bZbRFSIRyIgZ6L0sSGyJgE7M5rvYtacI6N+Pz7uQCVmnXlrOv4y4OFV5LkkDBZNgeZQ2AS+k+Ciku2JmSd7fo+eyRFPJZe/q3theZHRZQ=;7:M2tuIPEMakZ50Chjt32osivamL8Pz4TsKiClcoxpF7gAXhjJZ48cPEcDjX2Rqyco3wVVFCeDTNWBMQUfwHtkFNw46Poqs6w8I1oRiJL/PqgEA75WAWia9d3I8HlkJPLZed6vyoDKUYIpjUh6+7q53Q==
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: xilinx.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Dec 2018 11:13:45.0061
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: ab7de776-acf3-4c78-50ec-08d6577e0fbc
X-MS-Exchange-CrossTenant-Id: 657af505-d5df-48d0-8300-c31994686c5c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=657af505-d5df-48d0-8300-c31994686c5c;Ip=[149.199.60.83];Helo=[xsj-pvapsmtpgw01]
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN4PR0201MB3518
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In some corner cases the gadget controller may get out of sync
with host and may get into hang state, thus creating a dealock.
For example when bulk streams are enabled for an endpoint, there
can be a condition where the gadget controller waits for the host
to issue prime transaction and the host controller waits for the
gadget to issue ERDY. This condition could create a deadlock.

To avoid such potential deadlocks, a timer is started after queuing
any request for the endpoint in usb_ep_queue(). The gadget driver
is expected to stop the timer if a valid event is found (ex: stream
event for stream capable endpoints). If no valid event is found, the
timer expires after the programmed timeout value and a timeout
callback function registered would be called. This callback function
dequeues the request and re-queues it again, doing so makes the
controller restart the transfer, thus avoiding deadlocks.

This kind of behaviour is observed in dwc3 controller and expected
to be generic issue with other controllers supporting bulk streams.

Signed-off-by: Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
---
 Changes in v7:
	1. Added usb_ep_dequeue() & usb_ep_queue() logic into the timeout
	   handler as suggested by "Felipe Balbi"
	2. Created a usb_ep_queue_timeout() & __usb_ep_queue() functions

 Changes in v6:
	1. This patch is newly added in this series to add timer into udc/core.c
---
 drivers/usb/gadget/udc/core.c | 119 +++++++++++++++++++++++++++++++++++++-----
 include/linux/usb/gadget.h    |  16 ++++++
 2 files changed, 121 insertions(+), 14 deletions(-)

diff --git a/drivers/usb/gadget/udc/core.c b/drivers/usb/gadget/udc/core.c
index 87d6b12..daeb9bf 100644
--- a/drivers/usb/gadget/udc/core.c
+++ b/drivers/usb/gadget/udc/core.c
@@ -52,6 +52,25 @@ static int udc_bind_to_driver(struct usb_udc *udc,
 /* ------------------------------------------------------------------------- */
 
 /**
+ * usb_request_timeout - callback function for endpoint stream timeout timer
+ * @arg: pointer to struct timer_list
+ *
+ * This function gets called only when bulk streams are enabled in the endpoint
+ * and only after req->req_timeout_timer has expired. This timer gets expired
+ * only when the gadget controller failed to find a valid stream event for this
+ * request. On timer expiry, this function dequeues the request and requeues it
+ * again to restart the transfer.
+ */
+static void usb_request_timeout(struct timer_list *arg)
+{
+	struct usb_request *req = from_timer(req, arg, req_timeout_timer);
+	struct usb_ep *ep = req->ep;
+
+	usb_ep_dequeue(ep, req);
+	usb_ep_queue_timeout(ep, req, GFP_ATOMIC, req->timeout_ms);
+}
+
+/**
  * usb_ep_set_maxpacket_limit - set maximum packet size limit for endpoint
  * @ep:the endpoint being configured
  * @maxpacket_limit:value of maximum packet size limit
@@ -190,6 +209,47 @@ void usb_ep_free_request(struct usb_ep *ep,
 EXPORT_SYMBOL_GPL(usb_ep_free_request);
 
 /**
+ * __usb_ep_queue - queues (submits) an I/O request to an endpoint.
+ * @ep:the endpoint associated with the request
+ * @req:the request being submitted
+ * @gfp_flags: GFP_* flags to use in case the lower level driver couldn't
+ *	pre-allocate all necessary memory with the request.
+ * @timeout: The timeout value in msecs used by the usb_request timer.
+ *
+ * This should only be called from usb_ep_queue() or usb_ep_queue_timeout().
+ * This function queues the requests to the controller driver and starts the
+ * timer if the timeout value is not zero.
+ */
+static int __usb_ep_queue(struct usb_ep *ep, struct usb_request *req,
+			  gfp_t gfp_flags, const unsigned int timeout)
+{
+	int ret = 0;
+
+	if (WARN_ON_ONCE(!ep->enabled && ep->address)) {
+		ret = -ESHUTDOWN;
+		goto out;
+	}
+
+	ret = ep->ops->queue(ep, req, gfp_flags);
+
+	if (timeout != 0) {
+		timer_setup(&req->req_timeout_timer, usb_request_timeout, 0);
+		req->req_timeout_timer.expires = jiffies +
+				msecs_to_jiffies(timeout);
+		mod_timer(&req->req_timeout_timer,
+			  req->req_timeout_timer.expires);
+		req->timeout_ms = timeout;
+	}
+
+	/* Assign the ep to req for future usage */
+	req->ep = ep;
+out:
+	trace_usb_ep_queue(ep, req, ret);
+
+	return ret;
+}
+
+/**
  * usb_ep_queue - queues (submits) an I/O request to an endpoint.
  * @ep:the endpoint associated with the request
  * @req:the request being submitted
@@ -260,23 +320,45 @@ EXPORT_SYMBOL_GPL(usb_ep_free_request);
 int usb_ep_queue(struct usb_ep *ep,
 			       struct usb_request *req, gfp_t gfp_flags)
 {
-	int ret = 0;
-
-	if (WARN_ON_ONCE(!ep->enabled && ep->address)) {
-		ret = -ESHUTDOWN;
-		goto out;
-	}
-
-	ret = ep->ops->queue(ep, req, gfp_flags);
-
-out:
-	trace_usb_ep_queue(ep, req, ret);
-
-	return ret;
+	return __usb_ep_queue(ep, req, gfp_flags, 0);
 }
 EXPORT_SYMBOL_GPL(usb_ep_queue);
 
 /**
+ * usb_ep_queue_timeout - queues (submits) an I/O request to an endpoint.
+ * @ep:the endpoint associated with the request
+ * @req:the request being submitted
+ * @gfp_flags: GFP_* flags to use in case the lower level driver couldn't
+ *	pre-allocate all necessary memory with the request.
+ * @timeout: The timeout value used by the timer present in usb_request.
+ *
+ * This functions starts the timer for the requests queued to the controller.
+ * This routine does the same as usb_ep_queue() but takes an extra timeout
+ * argument which is used for setting the timeout value for the timer. There
+ * can be some corner case where the endpoint may go out of sync with the host
+ * and enter into deadlock situation. To avoid such potential deadlocks a timer
+ * is started at the time of queuing the request. This timer should be stopped
+ * by the controller driver on valid conditions otherwise the timer gets
+ * timedout and the handler is called which handles the deadlock.
+ *
+ * For example, when streams are enabled the host and gadget can go out sync,the
+ * gadget may wait until the host issues prime transaction and the host may wait
+ * until gadget issues a ERDY. This behaviour may create a deadlock situation.
+ * To avoid such a deadlock, when request is queued to an endpoint, the timer
+ * present in usb_request is started. If a valid stream event is found the
+ * gadget driver stops the timer. If no valid stream event is found, the timer
+ * keeps running until expired and the timeout handler registered to the timer
+ * usb_request_timeout() gets called, which dequeues the request and requeues
+ * the request to avoid the deadlock condition.
+ */
+int usb_ep_queue_timeout(struct usb_ep *ep, struct usb_request *req,
+			 gfp_t gfp_flags, const unsigned int timeout)
+{
+	return __usb_ep_queue(ep, req, gfp_flags, timeout);
+}
+EXPORT_SYMBOL_GPL(usb_ep_queue_timeout);
+
+/**
  * usb_ep_dequeue - dequeues (cancels, unlinks) an I/O request from an endpoint
  * @ep:the endpoint associated with the request
  * @req:the request being canceled
@@ -291,6 +373,8 @@ EXPORT_SYMBOL_GPL(usb_ep_queue);
  * restrictions prevent drivers from supporting configuration changes,
  * even to configuration zero (a "chapter 9" requirement).
  *
+ * If a timer is started in usb_ep_queue(), it would be removed.
+ *
  * This routine may be called in interrupt context.
  */
 int usb_ep_dequeue(struct usb_ep *ep, struct usb_request *req)
@@ -300,6 +384,9 @@ int usb_ep_dequeue(struct usb_ep *ep, struct usb_request *req)
 	ret = ep->ops->dequeue(ep, req);
 	trace_usb_ep_dequeue(ep, req, ret);
 
+	if (timer_pending(&req->req_timeout_timer))
+		del_timer(&req->req_timeout_timer);
+
 	return ret;
 }
 EXPORT_SYMBOL_GPL(usb_ep_dequeue);
@@ -883,7 +970,8 @@ EXPORT_SYMBOL_GPL(usb_gadget_unmap_request);
  * Context: in_interrupt()
  *
  * This is called by device controller drivers in order to return the
- * completed request back to the gadget layer.
+ * completed request back to the gadget layer. If a timer is started
+ * in usb_ep_queue(), it would be removed.
  */
 void usb_gadget_giveback_request(struct usb_ep *ep,
 		struct usb_request *req)
@@ -891,6 +979,9 @@ void usb_gadget_giveback_request(struct usb_ep *ep,
 	if (likely(req->status == 0))
 		usb_led_activity(USB_LED_EVENT_GADGET);
 
+	if (timer_pending(&req->req_timeout_timer))
+		del_timer(&req->req_timeout_timer);
+
 	trace_usb_gadget_giveback_request(ep, req, 0);
 
 	req->complete(ep, req);
diff --git a/include/linux/usb/gadget.h b/include/linux/usb/gadget.h
index e5cd84a..5b2516b 100644
--- a/include/linux/usb/gadget.h
+++ b/include/linux/usb/gadget.h
@@ -61,6 +61,13 @@ struct usb_ep;
  *	invalidated by the error may first be dequeued.
  * @context: For use by the completion callback
  * @list: For use by the gadget driver.
+ * @req_timeout_timer: Some endpoints may go out of sync with host and
+ *	enter into deadlock. For example, stream capable endpoints may enter
+ *	into deadlock where the host waits on gadget to issue ERDY and gadget
+ *	waits for host to issue prime transaction. To avoid such deadlock this
+ *	timer is used.
+ * @timeout_ms: timeout value in msecs used by the req_timeout_timer.
+ * @ep: pointer to the endpoint for which this request is queued.
  * @status: Reports completion code, zero or a negative errno.
  *	Normally, faults block the transfer queue from advancing until
  *	the completion callback returns.
@@ -111,6 +118,9 @@ struct usb_request {
 					struct usb_request *req);
 	void			*context;
 	struct list_head	list;
+	unsigned		timeout_ms;
+	struct timer_list	req_timeout_timer;
+	struct usb_ep		*ep;
 
 	int			status;
 	unsigned		actual;
@@ -243,6 +253,8 @@ int usb_ep_disable(struct usb_ep *ep);
 struct usb_request *usb_ep_alloc_request(struct usb_ep *ep, gfp_t gfp_flags);
 void usb_ep_free_request(struct usb_ep *ep, struct usb_request *req);
 int usb_ep_queue(struct usb_ep *ep, struct usb_request *req, gfp_t gfp_flags);
+int usb_ep_queue_timeout(struct usb_ep *ep, struct usb_request *req,
+			 gfp_t gfp_flags, const unsigned int timeout);
 int usb_ep_dequeue(struct usb_ep *ep, struct usb_request *req);
 int usb_ep_set_halt(struct usb_ep *ep);
 int usb_ep_clear_halt(struct usb_ep *ep);
@@ -266,6 +278,10 @@ static inline void usb_ep_free_request(struct usb_ep *ep,
 static inline int usb_ep_queue(struct usb_ep *ep, struct usb_request *req,
 		gfp_t gfp_flags)
 { return 0; }
+static inline int usb_ep_queue_timeout(struct usb_ep *ep,
+				       struct usb_request *req, gfp_t gfp_flags,
+				       const unsigned int timeout)
+{ return 0; }
 static inline int usb_ep_dequeue(struct usb_ep *ep, struct usb_request *req)
 { return 0; }
 static inline int usb_ep_set_halt(struct usb_ep *ep)
-- 
2.1.1

