Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:17:38 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 846BB580213
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 04:54:31 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga003-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 04:54:31 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AQvrfrBPVTlA+ex0E9fcl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0I/v+rarrMEGX3/hxlliBBdydt6oUzbKO+4nbGkU4qa6bt34DdJEeHzQksu?=
 =?us-ascii?q?4x2zIaPcieFEfgJ+TrZSFpVO5LVVti4m3peRMNQJW2aFLduGC94iAPERvjKwV1?=
 =?us-ascii?q?Ov71GonPhMiryuy+4ZLebxlLiTanfb9+MAi9oBnMuMURnYZsMLs6xAHTontPde?=
 =?us-ascii?q?RWxGdoKkyWkh3h+Mq+/4Nt/jpJtf45+MFOTav1f6IjTbxFFzsmKHw65NfqtRbY?=
 =?us-ascii?q?UwSC4GYXX3gMnRpJBwjF6wz6Xov0vyDnuOdxxDWWMMvrRr0vRz+s87lkRwPpiC?=
 =?us-ascii?q?cfNj427mfXitBrjKlGpB6tvgFzz5LIbI2QMvd1Y6HTcs4ARWdZUMhfVzJPDIC+?=
 =?us-ascii?q?YIsBAOUOIelWoZTlp1YMrxWzChSgCe3zxjBWnX/7xrE60/07HA3awAAsA9ADvX?=
 =?us-ascii?q?LJp9v1LqcSVuW1wbHLwzXMaPNWwyr25o/SfRAkpPGDQ69/cc3PyUIyEA7Fj1CQ?=
 =?us-ascii?q?ppbgPzOQyOsCrm+b4vF6Ve2xlmEnqxt+oiS1ysgwjYnJg5sYx1bZ/it62IY4Pc?=
 =?us-ascii?q?O0RFJ4bNK+DZdcqiKXO5FoTs4sQ2xkojs2x78etZKlYCQHzI4rywPRZvCZaYSE?=
 =?us-ascii?q?/xHuWeiLLTtmh39ofq+0iQyo/ki60OL8U9G50FZUoSpBldnBrnQN1x3I6sibUf?=
 =?us-ascii?q?tx5Eih2TCS1wzJ7eFEO080mbLaK54n3LEwioIevVrfEiL1gkn6kbKae0Y+9uS2?=
 =?us-ascii?q?5enqYq/qqoKeOoNsjwHxKKUumsixAeQiNQgOWnCW+f2i273m4E31WahFgeMokq?=
 =?us-ascii?q?bHtJDWPN8UpqmkAw9Tzoks9Q2/AzCi0NQZnnkIMkhJeR2aj4XxP1HOIfb4Deqw?=
 =?us-ascii?q?gli2kTdrwezGMaPlApnXMnfDl7LhcK17605bzgozwtZf549OBrEGOvLzVVf9tM?=
 =?us-ascii?q?bEAR8hLwy03+HnBc151oMfWmKAHLWVMazPsVKT4uIvIu+MZJIauTrnKvgl4eLu?=
 =?us-ascii?q?gmE9mVMHYaap2p4XOziFGO97KRCZfWb0mYVGVmMLpRYlCurtjlKETHhUfXn1Wq?=
 =?us-ascii?q?s94jQyDsWhFZvCQYa2x6WM2Tr+EpBIa2QVN1aXDH29coyFX+sLOjufJ9IknjEa?=
 =?us-ascii?q?WLzkUYI4yBy1qCf8zLxoKPeS/TcX4on+3tp47PGGiBcp6DZvBN6c2Wzec2Yhs2?=
 =?us-ascii?q?8VTiU62+hfqEZ+zUyfmfx1g/VSFttI+9tTXws6PIKaxOt/XYPcQAXEK/aGT0zu?=
 =?us-ascii?q?Z9yjBDw9Scx5l94LakN4FtmlpgrO0yqjH/kekLndV898yb7Vw3Wkf5U18H3Bzq?=
 =?us-ascii?q?R0ygB+GsY=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AgAACQMgFchxHrdtBjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgTAqgiUTg3mId4spgg2JH44pgXMUGBSEQIM1IjUIDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOL4I2BQIDGgEGglsBAQEBAgEBAiAEHwopAwIBAQIGAQEKD?=
 =?us-ascii?q?goCAgUdBAICAwELSAYTBYMcgXUFCAEEpmB8M4VAhG2BC4sQF4FAP4QjghCCcYM?=
 =?us-ascii?q?EglcCoDEJkSwLGIlZh0aYWoFIAoIJTSMVgyeCJxd/AQyNEkAxgQccjAiBdwEB?=
X-IPAS-Result: =?us-ascii?q?A0AgAACQMgFchxHrdtBjHAEBAQQBAQcEAQGBUgYBAQsBgTA?=
 =?us-ascii?q?qgiUTg3mId4spgg2JH44pgXMUGBSEQIM1IjUIDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOL4I2BQIDGgEGglsBAQEBAgEBAiAEHwopAwIBAQIGAQEKDgoCAgUdBAICAwE?=
 =?us-ascii?q?LSAYTBYMcgXUFCAEEpmB8M4VAhG2BC4sQF4FAP4QjghCCcYMEglcCoDEJkSwLG?=
 =?us-ascii?q?IlZh0aYWoFIAoIJTSMVgyeCJxd/AQyNEkAxgQccjAiBdwEB?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="64740593"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 04:54:30 -0800
Received: from localhost ([::1]:59699 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSiJS-0005Y5-45
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 07:54:30 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:58298)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gSiFv-00006F-M2
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 07:50:56 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <imammedo@redhat.com>) id 1gSi0e-0002G0-2y
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 07:35:07 -0500
Received: from mx1.redhat.com ([209.132.183.28]:58308)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <imammedo@redhat.com>) id 1gSi0d-0002Fr-PS
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 07:35:04 -0500
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
	[10.5.11.23])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 396B67D0DA
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 12:35:03 +0000 (UTC)
Received: from localhost (unknown [10.43.2.182])
	by smtp.corp.redhat.com (Postfix) with ESMTP id C98F959445;
	Fri, 30 Nov 2018 12:34:57 +0000 (UTC)
Date: Fri, 30 Nov 2018 13:34:56 +0100
From: Igor Mammedov <imammedo@redhat.com>
To: Eduardo Habkost <ehabkost@redhat.com>
Message-ID: <20181130133456.727fe935@redhat.com>
In-Reply-To: <20181129174900.GP18284@habkost.net>
References: <20181127092801.21777-1-marcandre.lureau@redhat.com>
	<20181127092801.21777-26-marcandre.lureau@redhat.com>
	<20181129174900.GP18284@habkost.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Fri, 30 Nov 2018 12:35:03 +0000 (UTC)
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: Re: [Qemu-devel] [PATCH for-3.2 v4 25/28] machine: add compat-props
 interface
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: =?UTF-8?B?TWFyYy1BbmRyw6k=?= Lureau <marcandre.lureau@redhat.com>,
	qemu-devel@nongnu.org
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

On Thu, 29 Nov 2018 15:49:00 -0200
Eduardo Habkost <ehabkost@redhat.com> wrote:

> On Tue, Nov 27, 2018 at 01:27:58PM +0400, Marc-Andr=C3=A9 Lureau wrote:
> > Let's make compatiblity properties an interface, so that objects other
> > than QDev can benefit from having machine compatiblity properties.
> >=20
> > Signed-off-by: Marc-Andr=C3=A9 Lureau <marcandre.lureau@redhat.com> =20
> [...]
> > diff --git a/hw/core/qdev.c b/hw/core/qdev.c
> > index 3b31b2c025..b0ee05f837 100644
> > --- a/hw/core/qdev.c
> > +++ b/hw/core/qdev.c
> > @@ -970,28 +970,8 @@ static void device_initfn(Object *obj)
> >      QLIST_INIT(&dev->gpios);
> >  }
> > =20
> > -static const GPtrArray *ac_compat_props;
> > -static const GPtrArray *mc_compat_props;
> > -
> > -void accel_register_compat_props(const GPtrArray *props)
> > -{
> > -    ac_compat_props =3D props;
> > -}
> > -
> > -void machine_register_compat_props(const GPtrArray *props)
> > -{
> > -    mc_compat_props =3D props;
> > -}
> > -
> >  static void device_post_init(Object *obj)
> >  {
> > -    if (ac_compat_props) {
> > -        object_apply_global_props(obj, ac_compat_props, &error_abort);
> > -    }
> > -    if (mc_compat_props) {
> > -        object_apply_global_props(obj, mc_compat_props, &error_abort);
> > -    }
> > -
> >      qdev_prop_set_globals(DEVICE(obj));
> >  }
> > =20
> > @@ -1124,6 +1104,10 @@ static const TypeInfo device_type_info =3D {
> >      .class_init =3D device_class_init,
> >      .abstract =3D true,
> >      .class_size =3D sizeof(DeviceClass),
> > +    .interfaces =3D (InterfaceInfo[]) {
> > +        { TYPE_COMPAT_PROPS },
> > +        { }
> > +    } =20
>=20
> At first I thought TYPE_COMPAT_PROPS was a practical way to
> implement this feature, but now I'm worried: the ordering between
> compat_props_post_init() qdev_prop_set_globals() is very
> important (user-provided globals must always be set after compat
> props), and here the ordering is implicit and easy to break
> accidentally.
>=20
> What if instead of a QOM interface we just provide a simple
> object_apply_compat_props() function?  e.g.:
>=20
> qdev.c:
>=20
>   static void device_post_init(Object *obj)
>   {
>       object_apply_compat_props(obj);
>       apply_user_provided_globals(obj);
>   }
>=20
> object_interface.c:
>=20
>   void user_creatable_complete(Object *obj, Error **errp)
>   {
>       object_apply_compat_props(obj);
>       ...
>       ucc->complete(...)
>   }
this would work as long as nothing is happening between
object_new() ... user_creatable_complete() but look at
current users of user_creatable_complete() so it's
fragile too.

Reasons for compat props interface are the same as for
instance_post_init/device_post_init.

the thing we can do here is getting rid of device_post_init
and making device override TYPE_COMPAT_PROPS::instance_post_init
to make explicit ordering like we do everywhere else:

diff --git a/hw/core/qdev.c b/hw/core/qdev.c
index 6b3cc55..46ad6f5 100644
--- a/hw/core/qdev.c
+++ b/hw/core/qdev.c
@@ -1033,11 +1033,19 @@ static void device_unparent(Object *obj)
     }
 }
=20
+device_compat_props()
+{
+    dc->parent_compat_props()
+    apply_global_props()
+}
+
 static void device_class_init(ObjectClass *class, void *data)
 {
     DeviceClass *dc =3D DEVICE_CLASS(class);
=20
     class->unparent =3D device_unparent;
+    dc->parent_compat_props =3D COMPAT_PROPS_GET_CLASS(class)->instance_po=
st_init
+    COMPAT_PROPS_GET_CLASS(class)->instance_post_init =3D device_compat_pr=
ops()
=20
     /* by default all devices were considered as hotpluggable,
      * so with intent to check it in generic qdev_unplug() /

> Most people don't understand QOM interfaces and their
> initialization ordering rules.  Everybody understands C function
> calls.
>=20
> > [...] =20
>=20


