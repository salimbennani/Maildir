Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:47:45 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga003.jf.intel.com (orsmga003.jf.intel.com [10.7.209.27])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id BC83C580213;
	Thu, 29 Nov 2018 08:20:17 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by orsmga003-1.jf.intel.com with ESMTP; 29 Nov 2018 08:20:17 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AegHMtBC3fGhEyPXZC5eBUyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/r8WwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekcM+hGs4b9vEMOoBmlCAmwGO/i0CNEimPq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nbo9T1NKEOXu+ryqnI0SjIYfJL2Tf89IjIbhchoe2RVr93b8rRyE8vGB/bgVWW?=
 =?us-ascii?q?tYzpJTyV1vkMs2iH8+pgUv6vhnUjqwFwpDig3N0sio7TioIS0FDE+jx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdUui2AKod7TN0uT3t1tCs51rEKo5+2cSoSxJg52xLSb+aLfouI?=
 =?us-ascii?q?7x75SeqcIDZ1iGh4dL+7hxu/91WrxPfmWcmuyllKqzJIktnSuXAJ0Bze8taHSv?=
 =?us-ascii?q?Rj8Ue7wzqP1B7c6vtCIU8qkarXMZkhwqQ/lpYLsETDGDH5mFnugaOIakkp/vKk?=
 =?us-ascii?q?5/npb7n4vJOQKox5hh3kPqkvmMGzGeE4PRIPX2if9+S8zrrj/UjhTbVOj/02lL?=
 =?us-ascii?q?TZsZ/DKcQYuKG5GQlV3Zgn6xqmCDen3tIYkmcdLF9eZhKHgJbmO0vULPD7E/i/?=
 =?us-ascii?q?mVKsnylvx/zcOb3hGJrNImDZkLj9ZbZ991JcyA0rwNBb5pJUCa8OLOj8W0/sr9?=
 =?us-ascii?q?HYCh45Mwqpw+foEtl914UeWX6RDa+dKq/drViI5uc3KemWeIAVoCr9K+Qi5/P2?=
 =?us-ascii?q?jX82g14dfbWz0psQcny4HulmLF+fYXrjmdoBFWYKvgwjTO3lklGCUDhTZ2qsUK?=
 =?us-ascii?q?I4/D00FIWmDYLbTIC3nLOBxDu7HoFRZm1eCFCMFmnne5+HW/cLbiKSJMhhnycA?=
 =?us-ascii?q?VbigTY8hyB6vuBX7y7phMurb5CkYuYj/29hy4u3ZjQsy+iBsD8SBz2GNSHl5kX?=
 =?us-ascii?q?kTRz8226B/olZxyk2Z3qh6mPFYEd1T5/VUUgY1L5Lczup6C8zsVQLFZNuGVFGm?=
 =?us-ascii?q?QtC+CzErUt0x28MOY1p6G9i6jRDMxSyqD6URl7yKHpM09K3c0mP1J8Z8zXbGya?=
 =?us-ascii?q?Ygg0MnQstJKW2pmKp/+xLPCI7OlkWTj7yqergE3C7R6GeDynKDs1xCXw5uT6rJ?=
 =?us-ascii?q?R3AfaVHQrdTi+EzCSbiiCbAkMgtEzc6PMa9KatzvjVVbS/bvItXeY2Stm2iuAR?=
 =?us-ascii?q?aE3K+DbI3ve28FxiXSFFAEkxwP/XaBLQUxGz2uo3zAAzB0FVLgeUXs8fJgp3O9?=
 =?us-ascii?q?VUI0ywCKb0t817u64BIVhPqcS+8N0bIAoisutzJ0HFOl1dLMF9WAvxZhfLlbYd?=
 =?us-ascii?q?4l/FdH1GfZtwthPpygL6FunEIefx5wv0P00xV3C4NAkccxoXMuzQpyL7+Y0Vxb?=
 =?us-ascii?q?ezOZ25DwJqPYKm3o8B+zbK7W30nU0MyK9acX9PQ4t1LjsRmzGUom7Xpm3Mda0n?=
 =?us-ascii?q?uG6prREQodTIj+UkA09xh9ubHXeS0954LS1X1xPqi4qD7C29Q1BOQ7zhasZctQ?=
 =?us-ascii?q?MKSBFAXqCc0VG9CuKPA2m1iudh8FPP1S+LQoMM+8dvqG2LSkPOBvnD+9iWRH4Y?=
 =?us-ascii?q?Z90l+D9iZmS+7I2YoFzO+c3gedSzj8i1KhuNjtmY9YfTESAna/yS/8CY5LZ619?=
 =?us-ascii?q?YZwECX2zLM2w3Nl+gYDiW2RZ9FK6G1wJwsupdgeMYFzn2g1Q018aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjBuk5Ufgy6lb?=
 =?us-ascii?q?vqh/NHTTQUFTcijyLmFiVLawt7WYb85O7pMorTtYUOCmbV+GTb79pgMQ0zn/EG?=
 =?us-ascii?q?tG2DA7azaqt437nxNgkmKdL3VzrH3DdcFr3xjf59/cRf9X3jUYQil1kj3XBlm6?=
 =?us-ascii?q?P9m08tSYjZbDsuaiV22/Up1fazXkzYSFtCGj/21lHQW/n+yvmt3gCQU70TX019?=
 =?us-ascii?q?5wWSXKrRb8ZJLm16C7MeJhY0lpC0Xw68t8GoFijIQwgIsc1mQdhpWQ5XAHi3v8?=
 =?us-ascii?q?Mc1H2aLia3oAXT0LzMTU4AT/2E1jM2iGx4T2VniGxsthZt+6Yn4Z2y4n7sBKDr?=
 =?us-ascii?q?uU46JAnSdvvlW4qgfRa+BnnjgB0fsu9GIag+YRtQoozyWdAaodEVNWPCPyjBSI?=
 =?us-ascii?q?886xrL9Ma2mxa7iw21FzndSgDLGEvwFdV2z1epYkHS9s8Mp/NEjA32H06oHhYN?=
 =?us-ascii?q?PQd84ctgWIkxfciOhYMI4xlv0PhSZ9OGPyp3sly/MgjRx13JG3p4yHK2Rr/KKk?=
 =?us-ascii?q?DR9ULDz1Z8UP+j7ziaZShNqZ34eqHp95ADUEQIPoTe60EDIVrfnoLByBEDo4qn?=
 =?us-ascii?q?eGA7bfGRKf5Vxir3LOFZCrKn6WKGMYzdVkWBmSOkhfjBoIUzU9m54zDhqqy9D5?=
 =?us-ascii?q?cEdl+jAR4Ub1qhlWxeJtKRb/SX3TpBuyZjc3VZifLwdW7gdY6EfOKsGe6uNzHy?=
 =?us-ascii?q?dF/pyutgCNK2qbZxhWAmENQECLG1fjPry279na7+eYHva+L+fJYbiWqe1eUOqI?=
 =?us-ascii?q?xYuy0oR8+TaALN6PPn5kD/00wUdDWXF5G8LEmzQAUSAXliTNb9KFqxe44CF4ss?=
 =?us-ascii?q?e/8PHzUgL1+YSPE6dSMclo+x2ugaeMKe+QhCV6KTZZzJ8MxmXIyL8Q3FEMkSFu?=
 =?us-ascii?q?aiKtHK8EtS7MSqLQh6BWAwQaayN1KMtH8aY80hNRNs7cj9P/zqR4geItC1dZSV?=
 =?us-ascii?q?zhndmkatYXI26mLlPIGkaKOK6CJT3K2Mz3ZaK8SbtNjORbrRGwuDCbE1P9MTSH?=
 =?us-ascii?q?jTXmSxevMeRUhiGBIBNeoJ29cgpqCWX7UNLmaxi7PMVrgjEs3bI0hm3FNWgHPD?=
 =?us-ascii?q?h4ckNNqKCQ7CxCjvV+HWxB8mRqLe2elymF6OnYL44cseF3DSRsi+Ja/HM6xqNV?=
 =?us-ascii?q?7S5eQvx1nSrSrth2rFCnkumA0DxnUBVVpzZPhYKLu1hiOKrD+plBX3bE4AwC7W?=
 =?us-ascii?q?GKBxsWoNtlD46nh6cF8tHTjqP4K39o/tbQ9NAdT5zMId6dMXEidxDkHDrdFwot?=
 =?us-ascii?q?RCSuc2rYghoOvuuV8yirr54xp57w0LUTS6NHU0B9Qu0bDE9oGsBEL4p2Qi8jjZ?=
 =?us-ascii?q?afjcgB/334qwPeEpYJ9qvbX+6fVK28YA2SiqNJMl5Rmev1?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0BYAACkEABch0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQGBZYNsJ4N5lCCCDRRomD4pEwGHdCI4EgEDAQEBAQEBAgETAQEBCA0JCCk?=
 =?us-ascii?q?jDII2JAGCYgECAwECCxUdAQEjFAEFCQEBCgsNAgImAgIDHxIBBQEcBhMFFIMIg?=
 =?us-ascii?q?gIFmnE8ih1wgS+CdgEBBYcmCBJ5iwuBVz+BEYIUSTWETYM4gleJBQRMgUaVCgc?=
 =?us-ascii?q?Cgh0EjxEYgVqPQol7i2gvgi0wgTyBdjMaMHQGgjWCGwwXiF6FQD4zgQUBAY06A?=
 =?us-ascii?q?QE?=
X-IPAS-Result: =?us-ascii?q?A0BYAACkEABch0O0hNFkGwEBAQEDAQEBBwMBAQGBZYNsJ4N?=
 =?us-ascii?q?5lCCCDRRomD4pEwGHdCI4EgEDAQEBAQEBAgETAQEBCA0JCCkjDII2JAGCYgECA?=
 =?us-ascii?q?wECCxUdAQEjFAEFCQEBCgsNAgImAgIDHxIBBQEcBhMFFIMIggIFmnE8ih1wgS+?=
 =?us-ascii?q?CdgEBBYcmCBJ5iwuBVz+BEYIUSTWETYM4gleJBQRMgUaVCgcCgh0EjxEYgVqPQ?=
 =?us-ascii?q?ol7i2gvgi0wgTyBdjMaMHQGgjWCGwwXiF6FQD4zgQUBAY06AQE?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="42096067"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 08:20:15 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729143AbeK3DZ6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 22:25:58 -0500
Received: from mail-it1-f195.google.com ([209.85.166.195]:32854 "EHLO
        mail-it1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1728136AbeK3DZ6 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 22:25:58 -0500
Received: by mail-it1-f195.google.com with SMTP id m8so7802248itk.0
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 08:20:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=8tNdDKfnX+NF9A6VQrISB+YaCjA1m3+eKAOu/O8h0g4=;
        b=KbdSnpnEGwPAn6/lnwDGBpADlZvoH2vbcM8p2PARdR0ryPQw92HiT5ztL+jt7j6nq/
         bszPl5BuVtu3WY9ezxUBajrxj2u3LT2pV5fJXHetePunL/oNN/Wq1rc8IVWf4c5XFBBs
         HWj1JQukfszt/CrZkp9D9+HhMM3A1Gx+HvNDc=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=8tNdDKfnX+NF9A6VQrISB+YaCjA1m3+eKAOu/O8h0g4=;
        b=MdY73uyRMU3jbMqbRoV3RN0uOo6jgQcA6Zl9cJ3D0ob2iqOIzTl4D6MJyHFbf5FQPN
         7r3003L8o/qzLXpwHVmwFHGvQcFtf0MNhSo25kBS5H4E0tQOdJWx0jchnXVwuZ5M2l5r
         Z1jAivJHIZh17V5wc1B6QLAl9/V34JPzYahfnDv9sPych114ns3IlV5LHQjZtn1Ae/sq
         xHKb4WDHeMikgKCUdaYxG1muHRnRcKA/VYEe5jtf4jCUeozCHGEFu8yo6oRakywhPZFM
         cia9OKi0fP3n+Y41srhSHUgZ+y3rvkL5Fvep6v/WaCcODRCX0MUo6Cr83sPJPzaVrLgV
         iZ/g==
X-Gm-Message-State: AA+aEWaKBObfjcy30dFLh3Vk74fOZE1OUdwtN83Mmc6o4ZGhJ7wAxxIy
        gl/uXk8s6AN8d+mKYmbXmKiu9CafQ8DM7UV9yZx4kw==
X-Google-Smtp-Source: AFSGD/XIyn/Up8+odtLv6TZaLVXxuv3eBffzZqWBJ47JHsps4Fdu2hin1ADqt9EtQUMijkDjLfR46KPRhvdBY5Ly7vA=
X-Received: by 2002:a24:a20e:: with SMTP id j14mr2128698itf.14.1543508403247;
 Thu, 29 Nov 2018 08:20:03 -0800 (PST)
MIME-Version: 1.0
References: <CAKfTPtD=sV3zJiZMfCFi92_f6j-jTO9D5RsEBAXHVa6VN3Urwg@mail.gmail.com>
 <20181128100241.GA2131@hirez.programming.kicks-ass.net> <20181128115336.GB23094@e110439-lin>
 <CAKfTPtBsKc7v5gc=XUrzO-_4kahGfdNteo=t9W5fLv0Ee8co_w@mail.gmail.com>
 <20181128144039.GC23094@e110439-lin> <CAKfTPtAR7otTTwKYbg5OWbgrUYNKBNsUnOcMS9CfQtbYspvO5A@mail.gmail.com>
 <20181128152133.GD23094@e110439-lin> <CAKfTPtDTSXiVsPepiJDFT9ZCXfUVYTQhRvgfZbF=_w87girPAQ@mail.gmail.com>
 <20181128163545.GE23094@e110439-lin> <CAKfTPtAd8V=Qst82HPb1HW7ZdvrHGgaVhZ=rAdzbHNednp+ztg@mail.gmail.com>
 <20181129150020.GF23094@e110439-lin>
In-Reply-To: <20181129150020.GF23094@e110439-lin>
From: Vincent Guittot <vincent.guittot@linaro.org>
Date: Thu, 29 Nov 2018 17:19:51 +0100
Message-ID: <CAKfTPtB_uVBx85vWVOhqUYyKGFipa4HGECsC-YZMvaz8wK6oCA@mail.gmail.com>
Subject: Re: [PATCH v7 2/2] sched/fair: update scale invariance of PELT
To: Patrick Bellasi <patrick.bellasi@arm.com>
Cc: Peter Zijlstra <peterz@infradead.org>,
        Ingo Molnar <mingo@kernel.org>,
        linux-kernel <linux-kernel@vger.kernel.org>,
        "Rafael J. Wysocki" <rjw@rjwysocki.net>,
        Dietmar Eggemann <dietmar.eggemann@arm.com>,
        Morten Rasmussen <Morten.Rasmussen@arm.com>,
        Paul Turner <pjt@google.com>, Ben Segall <bsegall@google.com>,
        Thara Gopinath <thara.gopinath@linaro.org>,
        pkondeti@codeaurora.org, Quentin Perret <quentin.perret@arm.com>,
        Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 29 Nov 2018 at 16:00, Patrick Bellasi <patrick.bellasi@arm.com> wrote:
>
> On 29-Nov 11:43, Vincent Guittot wrote:
> > On Wed, 28 Nov 2018 at 17:35, Patrick Bellasi <patrick.bellasi@arm.com> wrote:
> > > On 28-Nov 16:42, Vincent Guittot wrote:
> > > > On Wed, 28 Nov 2018 at 16:21, Patrick Bellasi <patrick.bellasi@arm.com> wrote:
> > > > > On 28-Nov 15:55, Vincent Guittot wrote:
> > > > > > On Wed, 28 Nov 2018 at 15:40, Patrick Bellasi <patrick.bellasi@arm.com> wrote:
> > > > > > > On 28-Nov 14:33, Vincent Guittot wrote:
> > > > > > > > On Wed, 28 Nov 2018 at 12:53, Patrick Bellasi <patrick.bellasi@arm.com> wrote:
> > > > > > > > > On 28-Nov 11:02, Peter Zijlstra wrote:
> > > > > > > > > > On Wed, Nov 28, 2018 at 10:54:13AM +0100, Vincent Guittot wrote:
> > > > > > > > > >
> > > > > > > > > > > Is there anything else that I should do for these patches ?
> > > > > > > > > >
> > > > > > > > > > IIRC, Morten mention they break util_est; Patrick was going to explain.
> > > > > > > > >
> > > > > > > > > I guess the problem is that, once we cross the current capacity,
> > > > > > > > > strictly speaking util_avg does not represent anymore a utilization.
> > > > > > > > >
> > > > > > > > > With the new signal this could happen and we end up storing estimated
> > > > > > > > > utilization samples which will overestimate the task requirements.
> > > > > > > > >
> > > > > > > > > We will have a spike in estimated utilization at next wakeup, since we
> > > > > > > > > use MAX(util_avg@dequeue_time, ewma). Potentially we also inflate the EWMA in
> > > > > > > > > case we collect multiple samples above the current capacity.
> > > > > > > >
> > > > > > > > TBH I don't see how it's different from current implementation with a
> > > > > > > > task that was scheduled on big core and now wakes up on little core.
> > > > > > > > The util_est is overestimated as well.
> > > > > > >
> > > > > > > While running below the capacity of a CPU, either big or LITTLE, we
> > > > > > > can still measure the actual used bandwidth as long as we have idle
> > > > > > > time. If the task is then moved into a lower capacity core, I think
> > > > > > > it's still safe to assume that, likely, it would need more capacity.
> > > > > > >
> > > > > > > Why do you say it's the same ?
> > > > > >
> > > > > > In the example of a task that runs 39ms in period of 80ms that we used
> > > > > > during previous version,
> > > > > > the utilization on the big core will reach 709 so will util_est too
> > > > > > When the task migrates on little core (512), util_est is higher than
> > > > > > current cpu capacity
> > > > >
> > > > > Right, and what's the problem ?
> > > >
> > > > you worry about an util_est being higher than capacity which is the case there
> > >
> > > I worry about util_est being higher then the capacity the task WAS
> > > running... not the capacity the task IS running... if that value does
> > > not correspond to what the task really need... (more on that at the
> > > end).
> > >
> > > > > 1) We know that PELT is calibrated to 32ms period task and in your
> > > > >    example, since the runtime is higher then the half-life, it's
> > > > >    correct to estimate a utilization higher then 50%.
> > > > >
> > > > >    PELT utilization is defined _based on the half-life_: thus
> > > > >    your task having a 50% duty cycle does not mean we are not correct
> > > > >    if report a utilization != 50%.
> > > > >    It would be as broken as reporting 10% utilization for a task
> > > > >    running 100ms every 1s.
> > > > >
> > > > > 2) If it was a 70% task on a previous activation, once it's moved into
> > > > >    a lower capacity CPU it's still correct to assume that it's likely
> > > > >    going to require the same bandwidth and thus will be
> > > > >    under-provisioned.
> > > > >
> > > > > I still don't see where we are wrong in this case :/
> > > > >
> > > > > To me it looks different then the problem I described.
> > > > >
> > > > > > > With your new signal instead, once we cross the current capacity,
> > > > > > > utilization is just not anymore utilization. Thus, IMHO it make sense
> > > > > > > avoid to accumulate a sample for what we call "estimated utilization".
> > > >
> > > > This is not true. With the example above, the util_est will be exactly the same
> > > >  on big and little cores with the new signal
> > >
> > > ... AFAIU only if we have idle time...
> > >
> > > > > > > I would also say that, with the current implementation which caps
> > > > > > > utilization to the current capacity, we get better estimation in
> > > > > > > general. At least we can say with absolute precision:
> > > > > > >
> > > > > > >    "the task needs _at least_ that amount of capacity".
> > > > > > >
> > > > > > > Potentially we can also flag the task as being under-provisioned, in
> > > > > > > case there was not idle time, and _let a policy_ decide what to do
> > > > > > > with it and the granted information we have.
> > > > > > >
> > > > > > > While, with your new signal, once we are over the current capacity,
> > > > > > > the "utilization" is just a sort of "random" number at best useful to
> > > > > > > drive some conclusions about how long the task has been delayed.
> > > >
> > > > see my comment above
> > > >
> > > > > > >
> > > > > > > IOW, I fear that we are embedding a policy within a signal which is
> > > > > > > currently representing something very well defined: how much cpu
> > > > > > > bandwidth a task used. While, latency/under-provisioning policies
> > > > > > > perhaps should be better placed somewhere else.
> > > > > > >
> > > > > > > Perhaps I've missed it in some of the previous discussions:
> > > > > > > have we have considered/discussed this signal-vs-policy aspect ?
> > > > >
> > > > > What's your opinion on the above instead ?
> > > >
> > > > It's not a policy but it gives better knowledge about the amount a work done
> > > > I have put below discussion on the  subject on previous version
> > >
> > > Thanks, I think I've skimmed through it, but it's sill useful...
> > >
> > > > > > With contribution scaling the PELT utilization of a task is a _minimum_
> > > > > > utilization. Regardless of where the task is currently/was running (and
> > > > > > provided that it doesn't change behaviour) its PELT utilization will
> > > > > > approximate its _minimum_ utilization on an idle 1024 capacity CPU.
> > > > >
> > > > > The main drawback is that the _minimum_ utilization depends on the CPU
> > > > > capacity on which the task runs. The two 25% tasks on a 256 capacity
> > > > > CPU will have an utilization of 128 as an example
> > > > >
> > > > > >
> > > > > > With time scaling the PELT utilization doesn't really have a meaning on
> > > > > > its own. It has to be compared to the capacity of the CPU where it
> > > > > > is/was running to know what the its current PELT utilization means. When
> > > > >
> > > > > I would have said the opposite. The utilization of the task will
> > > > > always reflect the same amount of work that has been already done
> > > > > whatever the CPU capacity.
> > > > > In fact, the new scaling mechanism uses the real amount of work that
> > > > > has been already done to compute the utilization signal which is not
> > > > > the case currently. This gives more information about the real amount
> > > > > of worked that has been computed in the over utilization case.
> > > > >
> > > > > > the utilization over-shoots the capacity its value is no longer
> > > > > > represents utilization, it just means that it has a higher compute
> > > > > > demand than is offered on its current CPU and a high value means that it
> > > > > > has been suffering longer. It can't be used to predict the actual
> > > > > > utilization on an idle 1024 capacity any better than contribution scaled
> > > > > > PELT utilization.
> > > > >
> > > > > I think that it provides earlier detection of over utilization and
> > > > > more accurate signal for a longer time duration which can help the
> > > > > load balance
> > > > > Coming back to 50% task example . I will use a 50ms running time
> > > > > during a 100ms period for the example below to make it easier
> > > > >
> > > > > Starting from 0, the evolution of the utilization is:
> > > > >
> > > > > With contribution scaling:
> > > > >          time  0ms  50ms  100ms  150ms  200ms
> > > > > capacity
> > > > > 1024           0    666
> > > > > 512            0    333   453
> > > > > When the CPU start to be over utilized (@100ms), the utilization is
> > > > > already too low (453 instead of 666) and scheduler doesn't detect yet
> > > > > that we are over utilized
> > > > > 256            0    169   226    246    252
> > > > > That's even worse with this lower capacity
> > > > >
>
>
>
>
> > > > > With time scaling,
> > > > >          time  0ms  50ms  100ms  150ms  200ms
> > > > > capacity
> > > > > 1024           0    666
> > > > > 512            0    428   677
> > > > > 256            0    234   468    564    677
>
> [...]
>
> > > I like the idea that we ramp up faster and always get to the same
> > > value. I like also the idea that we always reach the same value on
> > > both LITTLE and big.
> > >
> > > As long as there is idle time this is working fine, in these cases we
> > > should probably also collect util_est samples.
> > >
> > > But what happens when we don't have idle time ?
> >
> > As shown above, the utilization stays correct for a longer time frame
> > even after the over utilization point and provides better over
> > utilization detection
> >
> > >
> > > Let say we have 2 15% tasks, co-scheduled on a cpu with <300 capacity.
> > >
> > > Are not these two tasks being reported as 50% tasks (after a while) ?
> >
> > Yes they will but similarly to above they will stay correct for longer
> > time even when they become higher than current cpu capacity
>
> Seems we agree that, when there is no idle time:
> - the two 15% tasks will be overestimated
> - their utilization will reach 50% after a while
>
> If I'm not wrong, we will have:
> - 30% CPU util in  ~16ms @1024 capacity
>                    ~64ms  @256 capacity
>
> Thus, the tasks will be certainly over-estimated after ~64ms.
> Is that correct ?

From a pure util_avg pov it's correct
But i'd like to weight that a bit with the example below

>
> > > If that's the case, these are samples we should not store...
>
> Now, we can argue that 64ms is a pretty long time and thus it's quite
> unlucky we will have no idle for such a long time.
>
> Still, I'm wondering if we should keep collecting those samples or
> better find a way to detect that and skip the sampling.

The problem is that you can have util_avg above capacity even with idle time
In the 1st example of this thread, the 39ms/80ms task will reach 709
which is the value saved by util_est on a big core
But on core with half capacity, there is still idle time so 709 is a
correct value although above 512

In fact, max will be always above the linear ratio because it's based
on geometric series

And this is true even with 15.6ms/32ms (same ratio as above) task
although the impact is smaller (max value, which should be saved by
util est, becomes  587 in this case).






>
> --
> #include <best/regards.h>
>
> Patrick Bellasi
