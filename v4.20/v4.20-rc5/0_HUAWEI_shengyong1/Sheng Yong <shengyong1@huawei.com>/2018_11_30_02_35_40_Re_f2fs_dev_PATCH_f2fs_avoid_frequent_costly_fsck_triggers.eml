Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 11:05:59 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from FMSMGA003.fm.intel.com (fmsmga003.fm.intel.com [10.253.24.29])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 4EBAE580213;
	Thu, 29 Nov 2018 18:35:55 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by FMSMGA003-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 18:35:54 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AqVmPDRV1XTdO8588KYU0q48vW+3V8LGtZVwlr6E/?=
 =?us-ascii?q?grcLSJyIuqrYZhGBuadThVPEFb/W9+hDw7KP9fy4CSpYud6oizMrSNR0TRgLiM?=
 =?us-ascii?q?EbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpTEdFQ/iOgVr?=
 =?us-ascii?q?O+/7BpDdj9it1+C15pbffxhEiCCybL9uLxi6txndutULioZ+N6g9zQfErGFVcO?=
 =?us-ascii?q?pM32NoIlyTnxf45siu+ZNo7jpdtfE8+cNeSKv2Z6s3Q6BWAzQgKGA1+dbktQLf?=
 =?us-ascii?q?QguV53sTSXsZnxxVCAXY9h76X5Pxsizntuph3SSRIMP7QawoVTmk8qxmUwHjhj?=
 =?us-ascii?q?sZODEl8WHXks1wg7xdoBK9vBx03orYbJiIOPZiYq/ReNUXTndDUMlMTSxMGp6y?=
 =?us-ascii?q?YZUBD+QBPuhWoYfyqFQMohSiCgesBfjvyidKi3Ltwa030f4sHR3a0AEuHd8Dtm?=
 =?us-ascii?q?nfotXvNKcVVOC41LTGzTXdYPNQ1jf29YrHchcnofGDQLl9dtHRyUkxGAPDgVWR?=
 =?us-ascii?q?qYvlPzWa1ugQqGWb7/dgWvihimE5qgF9uCSgxsApioTQgI8e117K9SJ8wIkvJN?=
 =?us-ascii?q?24TlZ2YcWjEJtNrSGVK5V5Qs0lQ2FytyY11KcKuZilcygWzpks2h3Ra+SffoSW?=
 =?us-ascii?q?/h7uUPydLSp2iX57Yr6zmhW//VS6xuD9VMS4yEtGojZfntXRq3wBygbf5taZRv?=
 =?us-ascii?q?dg5EutxDeC2gDL5uxLIU04j7TXJpElz7IqiJYfrFrPEjXrlEjykaObcFgv9PKy?=
 =?us-ascii?q?5OT9eLrmo4eRN49qhQH6NaQjgtK/AesmPQgURWSb+vqz1Kfl/ULnRLVGlPo2kr?=
 =?us-ascii?q?PWsJzCJMQboLC2AxNN34o99xqyCy2q3MkWkHUZNl5JZRGKg5TzN1zPIv30FfK/?=
 =?us-ascii?q?jE6tkDdvyfDGJLrhApDVI3jHkbfhe6t96kFFxAow099f/ZRUBa8FIP7qXU/wut?=
 =?us-ascii?q?rYAQEjMwGv3ebnB8ty1pkEVWKMHKCZKqXSvkGM5u41JOmMfoAVtC7nK/c5//7u?=
 =?us-ascii?q?kWM5mVgFcKmt3JsXa263Eu5pIkWEenfshtYBEWEXvgsxVuDqiVuCUSJNaHa2Ra?=
 =?us-ascii?q?4z+jY7CIe+B4fZWo+tmKCB3Du8HpBOZmBJEFGMEWvyeIWDQfsMaD+SLdVnkjwL?=
 =?us-ascii?q?TrWhT44h1ReztA710bZnL+zU+jEGupLnztR6++rTlRQq/zxuE8udy32NT31znm?=
 =?us-ascii?q?4QRT82275wrVZ+yleE16h4hftYGMdX5/NIVAc6KJHdw/Z7C9D0RgLOYNOJREy6?=
 =?us-ascii?q?TdWhBDE7VsgxzMMWY0ZhB9WiiQjO0DCxA78VkLyLB4Y48rjG0HjzPMt9z3fG1K?=
 =?us-ascii?q?88j1gpWMdPNGumhrJh+AjXHYLGj0KZl6Oyf6QGwCHN7HuDzXaJvExAUw5/S6PF?=
 =?us-ascii?q?UWobZkvXt9v54EzCQqSqCbQmNAtB1MGDJrFLat3vkVVJWvPjNM7CbGK2nme6HQ?=
 =?us-ascii?q?yIya+UbIr2Z2Ud2z3QB1UenAAN43mKLwg+CT2no2LFEjNuE1XjY0fv8el7rHO2?=
 =?us-ascii?q?VUs0zwCMb0182Lu54B8VhfqAS/wN2rIIojsuqzJxHFylxdLZF8KApxZ9fKVbed?=
 =?us-ascii?q?4y/U1I1XzHuABnPpyvNaZihkUAfARxpE7u0xR3CoNdkckltn8qzQxyKb6G31NF?=
 =?us-ascii?q?bT+XwZfwOrjPIGno4B+vc7LW2k3Z0NuO5qcP6fE4q1L/vAGpFksu6Wln38NS03?=
 =?us-ascii?q?uG4pXKDQwSUZ3qX0Yz9hh6oazaYyYn64PV031sLbe7sjvY1901A+slzw6qf81D?=
 =?us-ascii?q?P6OcCA/yD8oaCtC0J+wuhVeoYQwLPeBI+KEvIsOpauGJ2KioPOZngjKrlmBH4I?=
 =?us-ascii?q?F70kKR+CtwUO/I35AZw/6G2guLTSvzjFCkssrvg4BLeSkSHnajySjjHINQZrBy?=
 =?us-ascii?q?cZwXBmu0Isy3xs9xh5jiW3ND8F6jBlUG2NKmeBaIblz92xFQ2loToXC9hSS4yD?=
 =?us-ascii?q?l0mSkzrqWDxCzO3/jidB0fN25RRWltkU3jIZKpgNAdRkSoaRYmlAGk5Urj26dU?=
 =?us-ascii?q?vqB/IHTNTkdSeCj2KXpvUq+xtrqEfs5O54kksSRRUOSgf1+aTqTxrAcd0yPmB2?=
 =?us-ascii?q?Fe3iw0dym2upXlmBx3kGKcLHdpoHvZY81w3grf5NrHSP5V3zoGQjR4iDbNCli9?=
 =?us-ascii?q?Odmp4cubl5PZvu+iUGKhU4VZcTP3woOYqCu7+WpqDAW9n/+pgN3nEgs60Sjh29?=
 =?us-ascii?q?lxTyrIrxX8Yojt16ukN+JqZU1oBF7668pnFYByiIowhJcM2XcEgpWZ52YIkWD2?=
 =?us-ascii?q?Md9Dw6LxcGINRSIXw97S+AXk2FdsLnWTy4L7V3WdxNBsZ927YmMQxyI84NpGCK?=
 =?us-ascii?q?aS7LxYgyR1pkC0oh7WYfh4hj0d0+ch6GYGg+EVvwog1iadDaoTHUVCPSzsig6H?=
 =?us-ascii?q?79axrKhMYGavcL6w1FdxnNy7DbGCpB1cV2j9eps4ASBw6cB/OkrW0HLv8oHkZM?=
 =?us-ascii?q?XQbdULux2RkhfAjPJaJIg/l/UUnipnJXzyvWc+xOEllxxu0oq3vIyGK2Vr4aK4?=
 =?us-ascii?q?DQRUNjzzZ8MP5D7tibxSkdqR34CqBp9hACkEXIP0TfK0FzIfrejnNwGLEDEmq3?=
 =?us-ascii?q?aUA7zfHRKE6Ed9rnLCCJSrN3CRJHkEwtRuXhidJEpDgA8KWDU2hII2FgevxMb5?=
 =?us-ascii?q?akd2+igR5kLkqhtL0u9nLAPwUmDbpAe1cDs0TIWfIQFS7gFD4UfVLMOf4vhyHy?=
 =?us-ascii?q?Fe4p2usgiNJnaHaARPCGEDQlaECEz7Prmy+dnA9PCVBuikIPvLf7qOsvZSV+uS?=
 =?us-ascii?q?yZKsz4tm/CuMNsOVMXl5FPA73ktDXXZkG8XWgTkPSioXlz7TYM6fvhuz5ip3rs?=
 =?us-ascii?q?Wn+vTxRA3v/ZePC6dVMdh3+xG2hrqDN/eNhCljLzZUzIgMxXjOyLgQx1MSjyBu?=
 =?us-ascii?q?dz+wEbUPryLNTaTQmrNJAB4fcS98KMxI76ck1AlXJcHbks/11qJ/jvMtC1dKS1?=
 =?us-ascii?q?3hmsKqZcwLOW29N0nHBEGENLuYPz3L3tr3bLi4Sb1RiuVUqhKxtSyaE0/lIjSM?=
 =?us-ascii?q?iT3pWwqzPuFLiSGRJAZet52lchZxFWjjS8rrZQemMNBslz053701imnONW4dKj?=
 =?us-ascii?q?V8d0JNrruN7SJXmPl/GmpB7mZ7IumAgSqW8+7YKpMOu/txHit0j/5a4Gg9y7ZN?=
 =?us-ascii?q?8CFERfl1lDHOodJ0v16mkveAyjx8XRpKqzZLgp+LvEp4NaXY8JlARWjL/BYX4W?=
 =?us-ascii?q?qMDBQKosNvCsfztKBI1tjPiKXzJS9C8t3O+8scAsnUKMSfP3sgMRrmAjjUDAQe?=
 =?us-ascii?q?QD6vNGHfgVFdkf6I+n2UqJg6tobjmJ4URrBHU1w1E6BSNkMwPtUPL5pqXXsHkL?=
 =?us-ascii?q?vT2MwB6HWzsRr5R8hAuJ3DEPWIDqOrYB2ZhL4MVgZAlaLlJoQaMdXT21FrdVR7?=
 =?us-ascii?q?2o/NHhyDc8pKp3habgIyrw18935xBjko20/jZRKq5nBKPf6plwE7i011ZuF7p2?=
 =?us-ascii?q?Sk2Es+Olef/Hh4q0I2g9iwxGnJKDM=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AnAABDoQBch0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUgYBAQsBgVqBDwN/JwqDb5QhgWAtFJcwgXMsCwgBh3QiNQgNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJhAQEBAQMBAQEgBBE2CwYJAQEKEQMBAgECAiYCA?=
 =?us-ascii?q?gMkAR8ICAYBDAEFAgEBAYMcAYIBBQqoVXwzhUCEbAWBC4sLghaBOIJrgx4BBIE?=
 =?us-ascii?q?nHAeDGIJXAoEqAYdchmMzkAYGA4IhhF2DLYJrhBYGGIlohzSIeIRghBGILQKCC?=
 =?us-ascii?q?TMaI1CBHoFOgicXfwEJhxqGBzIBATGBBAEBAQ6KXgElgQiBHwEB?=
X-IPAS-Result: =?us-ascii?q?A0AnAABDoQBch0O0hNFkHAEBAQQBAQcEAQGBUgYBAQsBgVq?=
 =?us-ascii?q?BDwN/JwqDb5QhgWAtFJcwgXMsCwgBh3QiNQgNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJhAQEBAQMBAQEgBBE2CwYJAQEKEQMBAgECAiYCAgMkAR8ICAYBDAE?=
 =?us-ascii?q?FAgEBAYMcAYIBBQqoVXwzhUCEbAWBC4sLghaBOIJrgx4BBIEnHAeDGIJXAoEqA?=
 =?us-ascii?q?YdchmMzkAYGA4IhhF2DLYJrhBYGGIlohzSIeIRghBGILQKCCTMaI1CBHoFOgic?=
 =?us-ascii?q?XfwEJhxqGBzIBATGBBAEBAQ6KXgElgQiBHwEB?=
X-IronPort-AV: E=Sophos;i="5.56,297,1539673200"; 
   d="scan'208";a="54962050"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 18:35:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727152AbeK3Nnb (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 08:43:31 -0500
Received: from szxga05-in.huawei.com ([45.249.212.191]:15176 "EHLO huawei.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726392AbeK3Nnb (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 08:43:31 -0500
Received: from DGGEMS403-HUB.china.huawei.com (unknown [172.30.72.58])
        by Forcepoint Email with ESMTP id 8FBD8BDACF8A6;
        Fri, 30 Nov 2018 10:35:47 +0800 (CST)
Received: from [127.0.0.1] (10.111.221.165) by DGGEMS403-HUB.china.huawei.com
 (10.3.19.203) with Microsoft SMTP Server id 14.3.408.0; Fri, 30 Nov 2018
 10:35:41 +0800
Subject: Re: [f2fs-dev] [PATCH] f2fs: avoid frequent costly fsck triggers
To: Jaegeuk Kim <jaegeuk@kernel.org>, Chao Yu <yuchao0@huawei.com>
CC: <linux-kernel@vger.kernel.org>,
        <linux-f2fs-devel@lists.sourceforge.net>
References: <20181128073125.39102-1-jaegeuk@kernel.org>
 <724de929-6ee1-3ad7-cfa7-6e80d4e7a3da@huawei.com>
 <20181128081035.GA41969@jaegeuk-macbookpro.roam.corp.google.com>
 <4f43735a-d01f-f194-18ce-4fbbe10ad8d4@huawei.com>
 <20181128174805.GB41969@jaegeuk-macbookpro.roam.corp.google.com>
From: Sheng Yong <shengyong1@huawei.com>
Message-ID: <234cabcd-a1c1-9fb6-13aa-94fe681731dc@huawei.com>
Date: Fri, 30 Nov 2018 10:35:40 +0800
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
 Thunderbird/52.2.0
MIME-Version: 1.0
In-Reply-To: <20181128174805.GB41969@jaegeuk-macbookpro.roam.corp.google.com>
Content-Type: text/plain; charset="utf-8"; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.111.221.165]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi, Jaegeuk and Chao,

On 2018/11/29 1:48, Jaegeuk Kim wrote:
> On 11/28, Chao Yu wrote:
>> On 2018/11/28 16:10, Jaegeuk Kim wrote:
>>> On 11/28, Chao Yu wrote:
>>>> Hi Jaeguek,
>>>>
>>>> On 2018/11/28 15:31, Jaegeuk Kim wrote:
>>>>> If we want to re-enable nat_bits, we rely on fsck which requires full scan
>>>>> of directory tree. Let's do that by regular fsck or unclean shutdown.
>>>>
>>>> Reviewed-by: Chao Yu <yuchao0@huawei.com>
>>>>
>>>> BTW, I have patch made some month ago...
>>>>
>>>> In order to detect nat_bits disabling, could we introduce one more flag for
>>>> fsck?
>>>
>>> Do we have a way to enable nat_bits very quickly in fsck?
>>
>> For image with SBI_NATBIT_NEED_REPAIR flag, can we just check metadata and
>> rebuild nat_bits based on verified nat blocks/journals?
> 
> I'm leaning to rely on full scan to enable nat_bits again. We may add a mount
> count or timer to trigger fsck regularly?

I'm afraid regular full fsck would give us bad experience of booting time.
FYI, 256GB storage, which is filled with small files, costs almost 10 min
to do a full fsck. And it seems larger capacity storages are on the way.
So, is it worth doing that only to enable nat_bits (plus checking f2fs
consistent not that necessarily)?

Thanks
> 
>>
>> Thanks,
>>
>>>
>>>>
>>>> >From 86e8bdb2faeec904944bb6621073f4f7de51cc2d Mon Sep 17 00:00:00 2001
>>>> From: Chao Yu <yuchao0@huawei.com>
>>>> Date: Sun, 9 Sep 2018 05:40:20 +0800
>>>> Subject: [PATCH] f2fs: set specified flag after invalidating nat_bits
>>>>
>>>> Signed-off-by: Chao Yu <yuchao0@huawei.com>
>>>> ---
>>>>   fs/f2fs/checkpoint.c    | 12 +++++++++++-
>>>>   fs/f2fs/f2fs.h          |  3 ++-
>>>>   fs/f2fs/node.c          |  3 +++
>>>>   include/linux/f2fs_fs.h |  1 +
>>>>   4 files changed, 17 insertions(+), 2 deletions(-)
>>>>
>>>> diff --git a/fs/f2fs/checkpoint.c b/fs/f2fs/checkpoint.c
>>>> index 7e17bb3dfcb1..f7fb14e0f5f9 100644
>>>> --- a/fs/f2fs/checkpoint.c
>>>> +++ b/fs/f2fs/checkpoint.c
>>>> @@ -1226,13 +1226,16 @@ static void update_ckpt_flags(struct f2fs_sb_info
>>>> *sbi, struct cp_control *cpc)
>>>>   	unsigned long orphan_num = sbi->im[ORPHAN_INO].ino_num;
>>>>   	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
>>>>   	unsigned long flags;
>>>> +	bool disable_natbits = false;
>>>>
>>>>   	spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>
>>>>   	if ((cpc->reason & CP_UMOUNT) &&
>>>>   			le32_to_cpu(ckpt->cp_pack_total_block_count) >
>>>> -			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks)
>>>> +			sbi->blocks_per_seg - NM_I(sbi)->nat_bits_blocks) {
>>>>   		disable_nat_bits(sbi, false);
>>>> +		disable_natbits = true;
>>>> +	}
>>>>
>>>>   	if (cpc->reason & CP_TRIMMED)
>>>>   		__set_ckpt_flags(ckpt, CP_TRIMMED_FLAG);
>>>> @@ -1270,11 +1273,18 @@ static void update_ckpt_flags(struct f2fs_sb_info
>>>> *sbi, struct cp_control *cpc)
>>>>   	if (is_sbi_flag_set(sbi, SBI_QUOTA_NEED_REPAIR))
>>>>   		__set_ckpt_flags(ckpt, CP_QUOTA_NEED_FSCK_FLAG);
>>>>
>>>> +	if (is_sbi_flag_set(sbi, SBI_NATBIT_NEED_REPAIR))
>>>> +		__set_ckpt_flags(ckpt, CP_NATBIT_NEED_FSCK_FLAG);
>>>> +
>>>>   	/* set this flag to activate crc|cp_ver for recovery */
>>>>   	__set_ckpt_flags(ckpt, CP_CRC_RECOVERY_FLAG);
>>>>   	__clear_ckpt_flags(ckpt, CP_NOCRC_RECOVERY_FLAG);
>>>>
>>>>   	spin_unlock_irqrestore(&sbi->cp_lock, flags);
>>>> +
>>>> +	if (disable_natbits)
>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
>>>> +			"No enough space in CP area, disable nat_bits.");
>>>>   }
>>>>
>>>>   static void commit_checkpoint(struct f2fs_sb_info *sbi,
>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>> index f0cedbe0c536..b55341c269b2 100644
>>>> --- a/fs/f2fs/f2fs.h
>>>> +++ b/fs/f2fs/f2fs.h
>>>> @@ -1107,6 +1107,7 @@ enum {
>>>>   	SBI_QUOTA_NEED_FLUSH,			/* need to flush quota info in CP */
>>>>   	SBI_QUOTA_SKIP_FLUSH,			/* skip flushing quota in current CP */
>>>>   	SBI_QUOTA_NEED_REPAIR,			/* quota file may be corrupted */
>>>> +	SBI_NATBIT_NEED_REPAIR,			/* nat full/empty bitmaps need repair */
>>>>   };
>>>>
>>>>   enum {
>>>> @@ -1628,7 +1629,7 @@ static inline void disable_nat_bits(struct
>>>> f2fs_sb_info *sbi, bool lock)
>>>>   {
>>>>   	unsigned long flags;
>>>>
>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
>>>> +	set_sbi_flag(sbi, SBI_NATBIT_NEED_REPAIR);
>>>>
>>>>   	if (lock)
>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
>>>> diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
>>>> index e57add1e8966..0c6f8312a087 100644
>>>> --- a/fs/f2fs/node.c
>>>> +++ b/fs/f2fs/node.c
>>>> @@ -2902,6 +2902,9 @@ static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)
>>>>
>>>>   	cp_ver |= (cur_cp_crc(ckpt) << 32);
>>>>   	if (cpu_to_le64(cp_ver) != *(__le64 *)nm_i->nat_bits) {
>>>> +		f2fs_msg(sbi->sb, KERN_NOTICE,
>>>> +			"Disable nat_bits due to incorrect cp_ver (%llu, %llu)",
>>>> +			cp_ver, le64_to_cpu(*(__le64 *)nm_i->nat_bits));
>>>>   		disable_nat_bits(sbi, true);
>>>>   		return 0;
>>>>   	}
>>>> diff --git a/include/linux/f2fs_fs.h b/include/linux/f2fs_fs.h
>>>> index 7196653833fa..1f3ae1504573 100644
>>>> --- a/include/linux/f2fs_fs.h
>>>> +++ b/include/linux/f2fs_fs.h
>>>> @@ -117,6 +117,7 @@ struct f2fs_super_block {
>>>>   /*
>>>>    * For checkpoint
>>>>    */
>>>> +#define CP_NATBIT_NEED_FSCK_FLAG	0X00002000
>>>>   #define CP_DISABLED_FLAG		0x00001000
>>>>   #define CP_QUOTA_NEED_FSCK_FLAG		0x00000800
>>>>   #define CP_LARGE_NAT_BITMAP_FLAG	0x00000400
>>>> -- 
>>>> 2.18.0.rc1
>>>>
>>>>
>>>>
>>>>>
>>>>> Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
>>>>> ---
>>>>>   fs/f2fs/f2fs.h | 6 +++++-
>>>>>   1 file changed, 5 insertions(+), 1 deletion(-)
>>>>>
>>>>> diff --git a/fs/f2fs/f2fs.h b/fs/f2fs/f2fs.h
>>>>> index c28a9d1cb278..aa500239baf2 100644
>>>>> --- a/fs/f2fs/f2fs.h
>>>>> +++ b/fs/f2fs/f2fs.h
>>>>> @@ -1621,7 +1621,11 @@ static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)
>>>>>   {
>>>>>   	unsigned long flags;
>>>>>   
>>>>> -	set_sbi_flag(sbi, SBI_NEED_FSCK);
>>>>> +	/*
>>>>> +	 * In order to re-enable nat_bits we need to call fsck.f2fs by
>>>>> +	 * set_sbi_flag(sbi, SBI_NEED_FSCK). But it may give huge cost,
>>>>> +	 * so let's rely on regular fsck or unclean shutdown.
>>>>> +	 */
>>>>>   
>>>>>   	if (lock)
>>>>>   		spin_lock_irqsave(&sbi->cp_lock, flags);
>>>>>
>>>
>>> .
>>>
> 
> 
> _______________________________________________
> Linux-f2fs-devel mailing list
> Linux-f2fs-devel@lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/linux-f2fs-devel
> 
> .
> 

