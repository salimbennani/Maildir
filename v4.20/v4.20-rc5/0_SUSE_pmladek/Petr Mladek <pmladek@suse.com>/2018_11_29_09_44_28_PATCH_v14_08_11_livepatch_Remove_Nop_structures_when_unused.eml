Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:19:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga001.jf.intel.com (orsmga001.jf.intel.com [10.7.209.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 3FB175803ED;
	Thu, 29 Nov 2018 01:46:15 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga001-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 01:46:04 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AxxIfsR18bqooWX9OsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?segTKvvxwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPSiJPDICy?=
 =?us-ascii?q?YYwNAOoPJuZYt4vwqkASoReiHwSgGPnixiNUinLwwKY00/4hEQbD3AE4BdwBrm?=
 =?us-ascii?q?jUrM/oP6kVVeC61rTHwivAb/hL3jr98I3IchQ7rv6RQ71wctHcyVIyFwPekFqc?=
 =?us-ascii?q?s5DqPzSQ1ukUtWWQ8uluVfq3hmI5tw18piKjytoih4XXnI4Z11PJ+TljzIs0J9?=
 =?us-ascii?q?C0UFN3bNqkHZdKqi2XOYt7Ttk8T212pCo20KMKtJ60cSUM1Z8p3QTQa+adfIiN?=
 =?us-ascii?q?+h/jVPieITN/hH99ZrK/iAi98VK6xu3/SMa0ylBKoTRBktXWsXANzRPT5tCGSv?=
 =?us-ascii?q?t74EihxS6C2x7P5uxAO0w4iKTWJ4A7zrItlZcfrV7PEy70lUnuia+ZbEQk+uym?=
 =?us-ascii?q?6+T9ZbXmo4eRN4t1igH4L6QvldWzAecmPQgUWWiU5+C82KTk/Uz3RrVFkOc2n7?=
 =?us-ascii?q?LHsJDVO8sbvLS1AwxL3YY57RawETOm3M4fnXkdI1JJYAiHgJTxO1HSPPD4Cu+y?=
 =?us-ascii?q?g1CtkDdo2f/KJLLgAojWI3jHkbfhe6t96kFGxAoyy9Bf+4xbCrUbLP3vXU/xsc?=
 =?us-ascii?q?TSDgUlPAys3+bnFNJ925seWW2VA6+ZLLndsViS6uIvPumDfokVuDnmJvgh5v7u?=
 =?us-ascii?q?i2I5mFAHcamo25sXdG63HvB8L0qFZnrsh88LEX0WsQomUOzqlFqCXCZRZ3a1Qa?=
 =?us-ascii?q?0w/DI7CIWgDYfFQYCgm7iB3Ca9Hp1LaWFKEFGMEXH0d4qaX/cAcj6dIshkkjYc?=
 =?us-ascii?q?T7iuV5ch1Q2ytA/907doNPHU+i0ftZLgztR1/ffclRMp+DxwDsSd1XyNTm5ukm?=
 =?us-ascii?q?MJQT82wL5woUhnxlif1qh4huRSFcZP6PNRTgc6KZncwvR5C9/oXALNZNOJSFe8?=
 =?us-ascii?q?TdWgDjE8VdYxw94IY0ZgFNSulBHD3yy2A7ALk7yHHoA78qXZ33LpPcZy127G1L?=
 =?us-ascii?q?U9j1khWsZAKHephrBh+ATJB47GiUOZl720eqQa2yLN8GSDzW+KvExDVA5wUKPF?=
 =?us-ascii?q?XW0QZ0fMrNT54F/CQKGqCbg9LgRBzsuCILNQatL1lVVGWOvjONPGbm2sgWiwGw?=
 =?us-ascii?q?iHyqmMbIXwfWUdxzvSCE4fngAX/HaGMxU+Byi7r2LfCjxuCUzgY0f2/eZir3O7?=
 =?us-ascii?q?S1c+zxuWYE15y7q15hkViOSAS/MS27IEvzshqzV0HVqnw9LaEd2ApxBlfKVdZ9?=
 =?us-ascii?q?M970xK1WbYtwx7I5yhILpuhl8YcwRroUzu0w97BZlHkcgvtHkq1hZ9KbqE0FNd?=
 =?us-ascii?q?cDOVxYr/OrnJJWj94h+ua7Ta1UrD0NmL4KgP7vc4q1L9vAyyEkoi8nNn08Ra0n?=
 =?us-ascii?q?eG55XKChYSXoz1Ukot6xd6oLTaaDEn54zIzX1sLbW0sjja1tMpGesp0Aqvc81e?=
 =?us-ascii?q?MaOEDgDyFcIaCtOqKOwrnVipcx0FMPpT9K4yI8Opaf+G1LS3M+ZnmTKslX5H75?=
 =?us-ascii?q?xl0kKQ6yp8TfbF34wEw/6ExASHTSrzjFC7vsDxh49EfzASEnOjxif+AI5ee7N9?=
 =?us-ascii?q?fZwMCWeoOMC3wtR+h5jwW39X7lKjBlUG2NO3dhqWdVDywQpQ1UEPq3y9hSS41y?=
 =?us-ascii?q?B0ky0urqeH3C3Owv7udRodNm5QWWlii0zhIYy1j9AcQUipYBIllBqj5Ubm2adb?=
 =?us-ascii?q?oL5zIHXUQUdNZyL2NX1tUrOstrqeZM5C8JEovj9NUOS/YlCaTaTxowAA3CPgHG?=
 =?us-ascii?q?texTY7eC+supjimxx6iWSdLGt8rXbDeMFwwwvf68LYRfJLwjUGQyx4gyHNBleg?=
 =?us-ascii?q?J9mp4cmUl5Dbv+G+TW2hUYdfcSvqzYOGrya74WxqARuin/G8gNHnEA460TPl2N?=
 =?us-ascii?q?luTynHsBH8Yozz3aSgLe1nZlVoBEP768diGYFxiIowiIsQ2XgHnJqV+3UHnHz3?=
 =?us-ascii?q?MdVa36L+cXUMSSQKw97T/AjqxkljImiVyIL+U3WX2tFhaMWiYmMKxiI96NhHCK?=
 =?us-ascii?q?KV7LxHhyR5uFS5ohzKYfhhgDgd0+Ah52AAg+EGowctyiSdArYPHUhXJyDslhKI?=
 =?us-ascii?q?78ygo6VTfmqgbb+w1E9ml9C7EL6Cuh1cWGr+epo6AS9w6cB/PEjN0XLp7IHkZc?=
 =?us-ascii?q?LQbckSthCPlxfAju5VKI8+l/YQhCpnP379smMhy+IhkRNu2pS6tpCdK2px5KK5?=
 =?us-ascii?q?HgJYNjrtaswI4D7tiqJentuM04CrA5VsATELXJruTfK1HzMer/XnNwCSEDIirn?=
 =?us-ascii?q?eXA6bQHQia6E1+tXLAD4irN22LJHke1dhiRgOSJElBjwAPRjk6goQ1FgO3xMzi?=
 =?us-ascii?q?bUd54Coe5kXjpxtIy+JoMQT/U2jFqAepbDc0VIaQLB5M4g5e4EfVNNSU7vhvEC?=
 =?us-ascii?q?FA4p2hsAuNJ3SbZgRPEGEJQ1GECErlPrW0/tnA9O6YBuWlIvvKYLWOr/FeVviS?=
 =?us-ascii?q?yZKu1Itm4yiDNsGVMnZ+CP0731JJXWplFMTBhzUPVysXmjrNb8GFpRe8+S53rs?=
 =?us-ascii?q?Gl/PToQgLv4oSPBKVIMdVy4BC7mqODN++WhCZkJjdUzJIMxXnUyLcB2F4ekT1h?=
 =?us-ascii?q?dz6oEb4Yry7CULrQmrNLDx4ccy58LtZI4Lkm3gZTOc/XkNf11r9jg/4xCldFU0?=
 =?us-ascii?q?Hhm86zacwLJWG9KE3IBEKROLuaIj3Lxtn9YbmgRr1IkOVUqxqwtC6HE0/iOzSP?=
 =?us-ascii?q?jSXmWwqzPuFMki6bOgdTuIW8chZrFGjiQ8jqahy9MN9rkzI2xac4iW/NNW4ZKT?=
 =?us-ascii?q?J8aV9CrqWM7SNEhfVyA2xA4WBjLemBmiaZ6fHXK5cWsfRxBCR0mPlX4HA7y7tT?=
 =?us-ascii?q?8SFFS+Z5mCrUrt5yvV6mlvODxSZgUBpL+X53g9epvF9jcYbe7ZhGUD6Q/hMO6n?=
 =?us-ascii?q?64CBkQodZhTNr1tPYUgvrIj6K7EDBD9tjT8NYST5zWMMWGNXAmPDLzFTLUBRdD?=
 =?us-ascii?q?RjmuYyWXok1Hl+qW/2PdhJU8p4OkzJ8ER7lWT3QuC+gXTE93So8sOpByCwspja?=
 =?us-ascii?q?TTqcoB6Xe95E3JQcFTsp3EfumPGvipIzGc2+oXLyAUyK/1eNxAfrbw3FZvPxwj?=
 =?us-ascii?q?xNzH?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AtAAACtf9bh0O0hNFlHQEBBQEHBQGBU?=
 =?us-ascii?q?wYBCwGDayeYGYIhly4UgWIpEwGHciI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL4I?=
 =?us-ascii?q?2JAGCYgMDAQIkUgYJAQEYJhIDVAYBEgWDHIICBAGnNDOKLYdrhCsXgUA/gRGHb?=
 =?us-ascii?q?AEOhXMCiQchhX6GEooWVQmRJwsYiWOBTYVsiHiRIAGCBjMaCBsVO4JsgicXjh4?=
 =?us-ascii?q?/MoEFAQGKawElgicBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AtAAACtf9bh0O0hNFlHQEBBQEHBQGBUwYBCwGDayeYGYI?=
 =?us-ascii?q?hly4UgWIpEwGHciI2Bw0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2JAGCYgMDAQIkU?=
 =?us-ascii?q?gYJAQEYJhIDVAYBEgWDHIICBAGnNDOKLYdrhCsXgUA/gRGHbAEOhXMCiQchhX6?=
 =?us-ascii?q?GEooWVQmRJwsYiWOBTYVsiHiRIAGCBjMaCBsVO4JsgicXjh4/MoEFAQGKawElg?=
 =?us-ascii?q?icBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="64525671"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 29 Nov 2018 01:45:42 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728151AbeK2Ut6 (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 15:49:58 -0500
Received: from mx2.suse.de ([195.135.220.15]:48092 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1728063AbeK2Ut5 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 15:49:57 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id B0372AE8A;
        Thu, 29 Nov 2018 09:45:10 +0000 (UTC)
From: Petr Mladek <pmladek@suse.com>
To: Jiri Kosina <jikos@kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Miroslav Benes <mbenes@suse.cz>
Cc: Jason Baron <jbaron@akamai.com>,
        Joe Lawrence <joe.lawrence@redhat.com>,
        Evgenii Shatokhin <eshatokhin@virtuozzo.com>,
        live-patching@vger.kernel.org, linux-kernel@vger.kernel.org,
        Petr Mladek <pmladek@suse.com>
Subject: [PATCH v14 08/11] livepatch: Remove Nop structures when unused
Date: Thu, 29 Nov 2018 10:44:28 +0100
Message-Id: <20181129094431.7801-9-pmladek@suse.com>
X-Mailer: git-send-email 2.13.7
In-Reply-To: <20181129094431.7801-1-pmladek@suse.com>
References: <20181129094431.7801-1-pmladek@suse.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Replaced patches are removed from the stack when the transition is
finished. It means that Nop structures will never be needed again
and can be removed. Why should we care?

  + Nop structures make false feeling that the function is patched
    even though the ftrace handler has no effect.

  + Ftrace handlers are not completely for free. They cause slowdown that
    might be visible in some workloads. The ftrace-related slowdown might
    actually be the reason why the function is not longer patched in
    the new cumulative patch. One would expect that cumulative patch
    would allow to solve these problems as well.

  + Cumulative patches are supposed to replace any earlier version of
    the patch. The amount of NOPs depends on which version was replaced.
    This multiplies the amount of scenarios that might happen.

    One might say that NOPs are innocent. But there are even optimized
    NOP instructions for different processor, for example, see
    arch/x86/kernel/alternative.c. And klp_ftrace_handler() is much
    more complicated.

  + It sounds natural to clean up a mess that is not longer needed.
    It could only be worse if we do not do it.

This patch allows to unpatch and free the dynamic structures independently
when the transition finishes.

The free part is a bit tricky because kobject free callbacks are called
asynchronously. We could not wait for them easily. Fortunately, we do
not have to. Any further access can be avoided by removing them from
the dynamic lists.

Signed-off-by: Petr Mladek <pmladek@suse.com>
---
 include/linux/livepatch.h     |  6 ++++
 kernel/livepatch/core.c       | 64 ++++++++++++++++++++++++++++++++++++++-----
 kernel/livepatch/core.h       |  1 +
 kernel/livepatch/patch.c      | 31 +++++++++++++++++----
 kernel/livepatch/patch.h      |  1 +
 kernel/livepatch/transition.c |  4 ++-
 6 files changed, 94 insertions(+), 13 deletions(-)

diff --git a/include/linux/livepatch.h b/include/linux/livepatch.h
index a44bc730cc47..ad29f17e1f55 100644
--- a/include/linux/livepatch.h
+++ b/include/linux/livepatch.h
@@ -180,6 +180,9 @@ struct klp_patch {
 #define klp_for_each_object_static(patch, obj) \
 	for (obj = patch->objs; obj->funcs || obj->name; obj++)
 
+#define klp_for_each_object_safe(patch, obj, tmp_obj)		\
+	list_for_each_entry_safe(obj, tmp_obj, &patch->obj_list, node)
+
 #define klp_for_each_object(patch, obj)	\
 	list_for_each_entry(obj, &patch->obj_list, node)
 
@@ -188,6 +191,9 @@ struct klp_patch {
 	     func->old_name || func->new_func || func->old_sympos; \
 	     func++)
 
+#define klp_for_each_func_safe(obj, func, tmp_func)			\
+	list_for_each_entry_safe(func, tmp_func, &obj->func_list, node)
+
 #define klp_for_each_func(obj, func)	\
 	list_for_each_entry(func, &obj->func_list, node)
 
diff --git a/kernel/livepatch/core.c b/kernel/livepatch/core.c
index 7092d288cfa6..0ce752e9e8bb 100644
--- a/kernel/livepatch/core.c
+++ b/kernel/livepatch/core.c
@@ -611,11 +611,20 @@ static struct kobj_type klp_ktype_func = {
 	.sysfs_ops = &kobj_sysfs_ops,
 };
 
-static void klp_free_funcs(struct klp_object *obj)
+static void __klp_free_funcs(struct klp_object *obj, bool free_all)
 {
-	struct klp_func *func;
+	struct klp_func *func, *tmp_func;
+
+	klp_for_each_func_safe(obj, func, tmp_func) {
+		if (!free_all && !func->nop)
+			continue;
+
+		/*
+		 * Avoid double free. It would be tricky to wait for kobject
+		 * callbacks when only NOPs are handled.
+		 */
+		list_del(&func->node);
 
-	klp_for_each_func(obj, func) {
 		/* Might be called from klp_init_patch() error path. */
 		if (func->kobj_alive) {
 			func->kobj_alive = false;
@@ -641,12 +650,21 @@ static void klp_free_object_loaded(struct klp_object *obj)
 	}
 }
 
-static void klp_free_objects(struct klp_patch *patch)
+static void __klp_free_objects(struct klp_patch *patch, bool free_all)
 {
-	struct klp_object *obj;
+	struct klp_object *obj, *tmp_obj;
 
-	klp_for_each_object(patch, obj) {
-		klp_free_funcs(obj);
+	klp_for_each_object_safe(patch, obj, tmp_obj) {
+		__klp_free_funcs(obj, free_all);
+
+		if (!free_all && !obj->dynamic)
+			continue;
+
+		/*
+		 * Avoid double free. It would be tricky to wait for kobject
+		 * callbacks when only dynamic objects are handled.
+		 */
+		list_del(&obj->node);
 
 		/* Might be called from klp_init_patch() error path. */
 		if (obj->kobj_alive) {
@@ -658,6 +676,16 @@ static void klp_free_objects(struct klp_patch *patch)
 	}
 }
 
+static void klp_free_objects(struct klp_patch *patch)
+{
+	__klp_free_objects(patch, true);
+}
+
+static void klp_free_objects_dynamic(struct klp_patch *patch)
+{
+	__klp_free_objects(patch, false);
+}
+
 /*
  * This function implements the free operations that can be called safely
  * under klp_mutex.
@@ -1089,6 +1117,28 @@ void klp_discard_replaced_patches(struct klp_patch *new_patch)
 }
 
 /*
+ * This function removes the dynamically allocated 'nop' functions.
+ *
+ * We could be pretty aggressive. NOPs do not change the existing
+ * behavior except for adding unnecessary delay by the ftrace handler.
+ *
+ * It is safe even when the transition was forced. The ftrace handler
+ * will see a valid ops->func_stack entry thanks to RCU.
+ *
+ * We could even free the NOPs structures. They must be the last entry
+ * in ops->func_stack. Therefore unregister_ftrace_function() is called.
+ * It does the same as klp_synchronize_transition() to make sure that
+ * nobody is inside the ftrace handler once the operation finishes.
+ *
+ * IMPORTANT: It must be called right after removing the replaced patches!
+ */
+void klp_discard_nops(struct klp_patch *new_patch)
+{
+	klp_unpatch_objects_dynamic(klp_transition_patch);
+	klp_free_objects_dynamic(klp_transition_patch);
+}
+
+/*
  * Remove parts of patches that touch a given kernel module. The list of
  * patches processed might be limited. When limit is NULL, all patches
  * will be handled.
diff --git a/kernel/livepatch/core.h b/kernel/livepatch/core.h
index f6a853adcc00..e6200f38701f 100644
--- a/kernel/livepatch/core.h
+++ b/kernel/livepatch/core.h
@@ -9,6 +9,7 @@ extern struct list_head klp_patches;
 
 void klp_free_patch_start(struct klp_patch *patch);
 void klp_discard_replaced_patches(struct klp_patch *new_patch);
+void klp_discard_nops(struct klp_patch *new_patch);
 
 static inline bool klp_is_object_loaded(struct klp_object *obj)
 {
diff --git a/kernel/livepatch/patch.c b/kernel/livepatch/patch.c
index fe27709d13ea..37da868859a5 100644
--- a/kernel/livepatch/patch.c
+++ b/kernel/livepatch/patch.c
@@ -246,15 +246,26 @@ static int klp_patch_func(struct klp_func *func)
 	return ret;
 }
 
-void klp_unpatch_object(struct klp_object *obj)
+static void __klp_unpatch_object(struct klp_object *obj, bool unpatch_all)
 {
 	struct klp_func *func;
 
-	klp_for_each_func(obj, func)
+	klp_for_each_func(obj, func) {
+		if (!unpatch_all && !func->nop)
+			continue;
+
 		if (func->patched)
 			klp_unpatch_func(func);
+	}
 
-	obj->patched = false;
+	if (unpatch_all || obj->dynamic)
+		obj->patched = false;
+}
+
+
+void klp_unpatch_object(struct klp_object *obj)
+{
+	__klp_unpatch_object(obj, true);
 }
 
 int klp_patch_object(struct klp_object *obj)
@@ -277,11 +288,21 @@ int klp_patch_object(struct klp_object *obj)
 	return 0;
 }
 
-void klp_unpatch_objects(struct klp_patch *patch)
+static void __klp_unpatch_objects(struct klp_patch *patch, bool unpatch_all)
 {
 	struct klp_object *obj;
 
 	klp_for_each_object(patch, obj)
 		if (obj->patched)
-			klp_unpatch_object(obj);
+			__klp_unpatch_object(obj, unpatch_all);
+}
+
+void klp_unpatch_objects(struct klp_patch *patch)
+{
+	__klp_unpatch_objects(patch, true);
+}
+
+void klp_unpatch_objects_dynamic(struct klp_patch *patch)
+{
+	__klp_unpatch_objects(patch, false);
 }
diff --git a/kernel/livepatch/patch.h b/kernel/livepatch/patch.h
index 2bc8db4e9973..ce761c5d08a6 100644
--- a/kernel/livepatch/patch.h
+++ b/kernel/livepatch/patch.h
@@ -30,5 +30,6 @@ struct klp_ops *klp_find_ops(void *old_func);
 int klp_patch_object(struct klp_object *obj);
 void klp_unpatch_object(struct klp_object *obj);
 void klp_unpatch_objects(struct klp_patch *patch);
+void klp_unpatch_objects_dynamic(struct klp_patch *patch);
 
 #endif /* _LIVEPATCH_PATCH_H */
diff --git a/kernel/livepatch/transition.c b/kernel/livepatch/transition.c
index aee073c8293b..aed32e09f041 100644
--- a/kernel/livepatch/transition.c
+++ b/kernel/livepatch/transition.c
@@ -85,8 +85,10 @@ static void klp_complete_transition(void)
 		 klp_transition_patch->mod->name,
 		 klp_target_state == KLP_PATCHED ? "patching" : "unpatching");
 
-	if (klp_transition_patch->replace && klp_target_state == KLP_PATCHED)
+	if (klp_transition_patch->replace && klp_target_state == KLP_PATCHED) {
 		klp_discard_replaced_patches(klp_transition_patch);
+		klp_discard_nops(klp_transition_patch);
+	}
 
 	if (klp_target_state == KLP_UNPATCHED) {
 		/*
-- 
2.13.7

