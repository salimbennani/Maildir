Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:17:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga006.fm.intel.com (fmsmga006.fm.intel.com [10.253.24.20])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 42788580224;
	Fri, 30 Nov 2018 04:15:25 -0800 (PST)
Received: from orsmga106.jf.intel.com ([10.7.208.65])
  by fmsmga006-1.fm.intel.com with ESMTP; 30 Nov 2018 04:15:24 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AIizZBhO1IozFdzVgNZYl6mtUPXoX/o7sNwtQ0KIM?=
 =?us-ascii?q?zox0KPj+r8bcNUDSrc9gkEXOFd2Cra4c26yO6+jJYi8p2d65qncMcZhBBVcuqP?=
 =?us-ascii?q?49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL1LdrWev4jEMBx7xKRR6?=
 =?us-ascii?q?JvjvGo7Vks+7y/2+94fcbglUhzexe69+IAmrpgjNq8cahpdvJLwswRXTuHtIfO?=
 =?us-ascii?q?pWxWJsJV2Nmhv3+9m98p1+/SlOovwt78FPX7n0cKQ+VrxYES8pM3sp683xtBnM?=
 =?us-ascii?q?VhWA630BWWgLiBVIAgzF7BbnXpfttybxq+Rw1DWGMcDwULs5Qiqp4bt1RxD0iS?=
 =?us-ascii?q?cHLz85/3/Risxsl6JQvRatqwViz4LIfI2ZMfxzdb7fc9wHX2pMRshfWSxfDI2h?=
 =?us-ascii?q?bYQBDOQBMuhXoIbhvFsOtRmzCBKwBO/z0DJEmmP60Lck3+knDArI3BYgH9ULsH?=
 =?us-ascii?q?nMstv1NKASUeWvw6nT0D7NbvdW1in86InHdBAuv+uMVq93fMrNxkkvEwzEg06U?=
 =?us-ascii?q?qYzkOTOVy/gNs3Kc7+pmVOKuhHQrpBxvrTW2wMonl4rHhpoNx1za6Sl0xJw5Kc?=
 =?us-ascii?q?C2RUJle9KoDZhduz2AO4Z3QM4uW2FltDwnxrAGupO3ZjUGxZQpyhLFa/GLbY6F?=
 =?us-ascii?q?6Q/5WumLOzd3nndldaq/hxms9UigzfXxVte70FlUtCpJiNrMuW4X1xzV9MeHTu?=
 =?us-ascii?q?Fx/kC72TaAzwzT6+dELl4olafDNZIt3ro9moAOvUnNACP6glj6gayKekk+++Wl?=
 =?us-ascii?q?6fzrYrD8qZ+dM490hBv+MqMrmsGnBeQ4Mw4OX3WU+Oil173s41f5QLNUgf0yi6?=
 =?us-ascii?q?XZt57bJcIFqa6jGAJVzIkj5AilDzu809QXg2MHLFRbdxKDlYTpPEvOIP/gAfel?=
 =?us-ascii?q?n1usiCtrx+zBPrD5BpXNL3vDn6n7cbdy9k5R0w4zzdFZ55JJBbANOvPzWknttN?=
 =?us-ascii?q?PGCh81KRC7w+HiCN9lzIMRRXqPArOFMKPVqVKI5vggI+iQZIAPvzbxMfgl5+P0?=
 =?us-ascii?q?gn8/ll8QZq2p3ZoRaHClEfVqOUSZYXzwgtgfFWcGpBYxTOvviFeaSz5ce26yX7?=
 =?us-ascii?q?4g5jE8EI+mD4DDSZ63jLyC2ye7GJtWZmddB1CIEHfocZiEWvgWZCKTJM9hjiIL?=
 =?us-ascii?q?Vby7R4A90hGusRfwy6B7IerM5i0YqZXj2cBv6O3IlREy8j90A96H026XTWF5hW?=
 =?us-ascii?q?cIRz4w3KBirk1x0FaD0a5kg/NGEdxf/e9GUgA/NZTE1ex1F8jyWh7dfteOUFum?=
 =?us-ascii?q?Qc+pATcrQtI1wt8BeUB9G9q5gxDH3iqqBaIVlrORCJw19KLcw2b+J8Jnx3na06?=
 =?us-ascii?q?khikEsQtFTOm2+mq5/6w/TCpbUnEqDiaala74Q3C7X+2eF1mqBokdYXAl0UaXG?=
 =?us-ascii?q?WHAfYlDbrdD45kPEUr+vBq4rMgpHyc6eNKRKbsflgklBRPfmIN7eeX6+m3+sBR?=
 =?us-ascii?q?aUwbOBdJfldH8D3CrDEkQEkxoc/XCdNQcgACesuGbeDD1oFVLybELg6+h+qHWn?=
 =?us-ascii?q?TkAqywGGdVFu172w+hQNn/yTV+sT3q4YuCcmszh0AFe939fRC9qcpwpgfL9QYc?=
 =?us-ascii?q?8n7FdAz2LZsw19PpqvL615gl4ecgJ3v17h1hltC4VAl9Qqo20uzAZoNa2Y11ZB?=
 =?us-ascii?q?fSuC3Z/sIr3XNnXy/Be3ZqHM3lHRztmX9bkP6fgisFrjoRymGVAk83Vk1NlVzW?=
 =?us-ascii?q?CR5pHLDAoUTJLwXVw79xl8p7HGfCY945nY2mFrMamxqjXCwc4mBPM5yha8eNdS?=
 =?us-ascii?q?KKOFFBLoH8IGHcSvKewqlEKvbhILJ+1S8K80P8W7d/qJwqKrPeBgnC64gmRD+o?=
 =?us-ascii?q?xyzkWM9y9kQO7Sw5kF2+2Y3heAVzrkllehs9z4lppeZT4PGWqz0y7kC5BLZq1z?=
 =?us-ascii?q?ZIoEFX2hI8mqydpgnZ7tXHhY+UWnB1MH3s+pZBWTY0b83Q1WyUQYv3inlTGkwD?=
 =?us-ascii?q?xzljEjtrCf0zDWw+T+aBoHPXZGRWljjVv2IYm4lcsaXFWubwUykBul5ED6x7VU?=
 =?us-ascii?q?pahlLmnTR1tIcDbyL214TqSwsb+CadZV6Jw0qSVXTPi8YVeCR77/uRQaySDjH2?=
 =?us-ascii?q?hZxDwhbDGloJb5nx97iGKbMnlzqmHUecVxxRfZ+dzdSuRd3jsARClklzbXAkKw?=
 =?us-ascii?q?MMWu/dWRj53DqPyxV3q9Vp1Pdinm1YOBuzG85WFwAx2/nvazl8bjEQg71y/7yt?=
 =?us-ascii?q?ZrWT/JrBb6fonkyaC6Pfh7cUlvAV/289B6FZ1mkossmJEQ3mAXhpaP8noGi2vz?=
 =?us-ascii?q?Mchb1rj4bHoCXjMLx9/V4A742ExsNH6JxoT5VmmDzctlfdW1fmQW2icl5cBQFK?=
 =?us-ascii?q?iU9KBEnTdyolegqALRYPt9kS0Hxfog9nEamP0JtxQ3ziqGHL8SB0ZYMDfolxSJ?=
 =?us-ascii?q?6dC+sapWaHyucbi2yEpxg9ShAKuerQFbXXbzYo0iEjNo7sVjLFLM12X+6p3jeN?=
 =?us-ascii?q?nVd94StwebkxHdj+hOM5Ixl+EHhS5mOWL7oH0kxPQ3jR1o3ZGmooeHL39h876+?=
 =?us-ascii?q?Ah5dLjf1fd8c+inxjaZCmcabx5ugEY9mGjUPQZvkV/aoEC8JuPTjNgaOFiA8q3?=
 =?us-ascii?q?iBFbreGw+f9Flpr3bVH5+3MHGXIWETzc9+SxmFOExfnAcUUS04npEjEwCl2tfh?=
 =?us-ascii?q?fF1l5jwL5V74txhMyv9uNxblSWfSvwOoajYySJiCIxta9ABC50HJMcOA6uJ/BT?=
 =?us-ascii?q?1X/pqkrAaVMGyUexxIDX0VWkyDH13iPr6u5cTZ8+iFHOW+KeHCYa6JqexYWPeF?=
 =?us-ascii?q?3pav0opg/zaROcSDJHhiD/sn2kVdWXB1AdjWmzIKSyYPjSLCc9abpAug+i1wts?=
 =?us-ascii?q?2/8OrkWAPs5YuMCrteK9Zv+wqxgaeMKeGQnjt5KS1D25MIxH/IzqUf3VEIhyFv?=
 =?us-ascii?q?cTmtDaoPtSrXQK3Mna9XCgYRazlvO8tQ86I8wg5NNNbBhdPozbF4lOA6CldfWV?=
 =?us-ascii?q?zlm8GkfsgKI2C7NFPaC0eHLrWGJTvXw87pZaOwU6FfjOJRtxeoozaUD1fjPiif?=
 =?us-ascii?q?lznuTx2vLeBMjCSBMBNCoo2ybhZtBnblTN/9bh27Mdl3jSA5wLEuh3PKM3IcPi?=
 =?us-ascii?q?Z4c09XsrKQ6iZYiO1lG2Nd9nplMfWEmyGB4ujYMJkWt/5rAiVyl+1C4XU6y6Fa?=
 =?us-ascii?q?7CdLRPFunCvSr9huo0ypk+WVyzpnVgZOpShPhI6RoUpiPqDZpdF8XiPi+wgH4H?=
 =?us-ascii?q?+MQzEDocdlB8yn76ZVw97TlK/iAD5H+sDT+40QCp6HBtiANS8dMR3sESWcIw8I?=
 =?us-ascii?q?TC6tOHuX01BSlOG68nyTs4QgrZ7tiNwCR+kIBxQOCvoGBxE9T5Q5K5BtU2ZhyO?=
 =?us-ascii?q?bDgQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAQAoKQFch0O0hNFjHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBZYNsJ4xwiylQAQEGUj4lFIENh36QHBQYEwGHdCI4EgEDAQEBAQEBAgETAQE?=
 =?us-ascii?q?BCA0JCCkvgjYkAYJhAQEBAQIBAQI3PwUBCQEBCg4JHRIDTAgGEwUWgwaBdQUIB?=
 =?us-ascii?q?AGoAootjBsXeIEHgUSCKjWESoYSAoksgW+KPIpaCYETkCQYgVuFEIJ5K4cQLJg?=
 =?us-ascii?q?ugV2Bdk0kFIMngicXjh4/MoEFAQGLToJNAQE?=
X-IPAS-Result: =?us-ascii?q?A0AUAQAoKQFch0O0hNFjHAEBAQQBAQcEAQGBZYNsJ4xwiyl?=
 =?us-ascii?q?QAQEGUj4lFIENh36QHBQYEwGHdCI4EgEDAQEBAQEBAgETAQEBCA0JCCkvgjYkA?=
 =?us-ascii?q?YJhAQEBAQIBAQI3PwUBCQEBCg4JHRIDTAgGEwUWgwaBdQUIBAGoAootjBsXeIE?=
 =?us-ascii?q?HgUSCKjWESoYSAoksgW+KPIpaCYETkCQYgVuFEIJ5K4cQLJgugV2Bdk0kFIMng?=
 =?us-ascii?q?icXjh4/MoEFAQGLToJNAQE?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="42231638"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 30 Nov 2018 04:15:09 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726618AbeK3XYK (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 18:24:10 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:37302 "EHLO
        Galois.linutronix.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726512AbeK3XYK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 18:24:10 -0500
Received: from hsi-kbw-5-158-153-52.hsi19.kabel-badenwuerttemberg.de ([5.158.153.52] helo=nanos.tec.linutronix.de)
        by Galois.linutronix.de with esmtpsa (TLS1.2:DHE_RSA_AES_256_CBC_SHA256:256)
        (Exim 4.80)
        (envelope-from <tglx@linutronix.de>)
        id 1gShhC-00038v-Ct; Fri, 30 Nov 2018 13:14:58 +0100
Date: Fri, 30 Nov 2018 13:14:57 +0100 (CET)
From: Thomas Gleixner <tglx@linutronix.de>
To: Norbert Manthey <nmanthey@amazon.de>
cc: linux-kernel@vger.kernel.org, David Woodhouse <dwmw@amazon.co.uk>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        "H. Peter Anvin" <hpa@zytor.com>, x86@kernel.org,
        "Eric W. Biederman" <ebiederm@xmission.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Mike Rapoport <rppt@linux.vnet.ibm.com>,
        Baoquan He <bhe@redhat.com>, Nicolai Stange <nstange@suse.de>,
        Jan Beulich <JBeulich@suse.com>,
        Jan Kiszka <jan.kiszka@siemens.com>
Subject: Re: [PATCH] io_apic: initialize irq with -EINVAL
In-Reply-To: <1543403393-6004-1-git-send-email-nmanthey@amazon.de>
Message-ID: <alpine.DEB.2.21.1811301239460.17702@nanos.tec.linutronix.de>
References: <1543403393-6004-1-git-send-email-nmanthey@amazon.de>
User-Agent: Alpine 2.21 (DEB 202 2017-01-01)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Norbert,

On Wed, 28 Nov 2018, Norbert Manthey wrote:

thanks for the patch.

> Subject: [PATCH] io_apic: initialize irq with -EINVAL

io_apic is not a proper subsystem prefix. git log should give you a hint:

   x86/ioapic: ....

Also please start the first word after the colon with an uppercase letter.

Now 'Initialize irq with -EINVAL' is not really informative. It tells what
the patch does, but does not give a consise hint, what this is about and
why you want to do it. Something like:

   x86/ioapic: Prevent uninitialized return value

provides precise information about the scope of the patch.

> To catch the case where the uninitialized variable irq might be
> returned.

I had to read this incomplete sentence 3 times until I discovered that this
is the second part of the subject line. Please don't do that.

> As the path that might lead to this situation can only
> occur based on invalid arguments, we initialize this variable with
> the value -EINVAL, so that callers are notified accordingly, and no
> uninitialized value is returned.
> 
> The path that would allow to return an uninitialized value for the
> variable irq would require legacy IRQs without the ALLOC flag.

Ideally you describe the problem first and not elaborate lengthy on the
solution, because the solution is obvious once the problem is
clear. Something like this:

  mp_map_pin_to_irq() has an exit path which returns an uninitialized
  variable. This is reached, when  called with arguments ......

  Initialize 'irq' with -EINVAL to prevent that.

> Signed-off-by: Norbert Manthey <nmanthey@amazon.de>
> Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>

This SOB chain is wrong. How is David involved in this? If he co-developed
the patch, then a 'Co-Developed-by: David...' tag is missing. If not, then
his SOB is just wrong here.

> ---
>  arch/x86/kernel/apic/io_apic.c | 2 +-
>  1 file changed, 1 insertion(+), 1 deletion(-)
> 
> diff --git a/arch/x86/kernel/apic/io_apic.c b/arch/x86/kernel/apic/io_apic.c
> index 2953bbf..219dbc1 100644
> --- a/arch/x86/kernel/apic/io_apic.c
> +++ b/arch/x86/kernel/apic/io_apic.c
> @@ -1031,7 +1031,7 @@ static int alloc_isa_irq_from_domain(struct irq_domain *domain,
>  static int mp_map_pin_to_irq(u32 gsi, int idx, int ioapic, int pin,
>  			     unsigned int flags, struct irq_alloc_info *info)
>  {
> -	int irq;
> +	int irq = -EINVAL;
>  	bool legacy = false;
>  	struct irq_alloc_info tmp;
>  	struct mp_chip_data *data;

Now, lets look at the actual error path:

        if (!(flags & IOAPIC_MAP_ALLOC)) {
                if (!legacy) {
                        irq = irq_find_mapping(domain, pin);
                        if (irq == 0)
                                irq = -ENOENT;
                }
		 <----------- (i.e. if legacy == true)
	}

That looks about right, but to get there something must set legacy to
'true' and the only code path which does so is:

        if (idx >= 0 && test_bit(mp_irqs[idx].srcbus, mp_bus_not_pci)) {
                irq = mp_irqs[idx].srcbusirq;
                legacy = mp_is_legacy_irq(irq);
        }

and this code path actually initializes 'irq'. So returning uninitialized
'irq' cannot happen.

How did you find that? Code inspection, static checker, ... ?

Thanks,

	tglx
