Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 18:10:02 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga001.fm.intel.com (fmsmga001.fm.intel.com [10.253.24.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B4269580322;
	Tue, 27 Nov 2018 22:47:56 -0800 (PST)
Received: from orsmga102-1.jf.intel.com (HELO mga09.intel.com) ([10.7.208.27])
  by fmsmga001-1.fm.intel.com with ESMTP; 27 Nov 2018 22:47:55 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AdD7WRRe2HX14kbJTIvM1nmH6lGMj4u6mDksu8pMi?=
 =?us-ascii?q?zoh2WeGdxc6+YxaN2/xhgRfzUJnB7Loc0qyK6/CmATRIyK3CmUhKSIZLWR4BhJ?=
 =?us-ascii?q?detC0bK+nBN3fGKuX3ZTcxBsVIWQwt1Xi6NU9IBJS2PAWK8TW94jEIBxrwKxd+?=
 =?us-ascii?q?KPjrFY7OlcS30P2594HObwlSizexfbB/IA+qoQnNq8IbnZZsJqEtxxXTv3BGYf?=
 =?us-ascii?q?5WxWRmJVKSmxbz+MK994N9/ipTpvws6ddOXb31cKokQ7NYCi8mM30u683wqRbD?=
 =?us-ascii?q?VwqP6WACXWgQjxFFHhLK7BD+Xpf2ryv6qu9w0zSUMMHqUbw5Xymp4rx1QxH0li?=
 =?us-ascii?q?gIKz858HnWisNuiqJbvAmhrAF7z4LNfY2ZKOZycqbbcNgHR2ROQ9xRWjRBDI2i?=
 =?us-ascii?q?coUBAekPM+FaoInzqFQBsRSwBRK0BO7t0TJImnz70Lcm3+k7DQ3L3gotFM8Ovn?=
 =?us-ascii?q?TOq9X1Mb8fX++vzKnJ0TrIcu5b2Tby6IjHbB8hu+qMVq93fMXP0kYvFgzFjlqO?=
 =?us-ascii?q?poz/JDOYzecNvHaB7+pmS+2vj3QrqwZrojig38ohjJTCiIwSylDB7yp5wYA1KM?=
 =?us-ascii?q?W5RUN0e9KkC4BfuieHPIV1WsMvW39ktDo+x7EcpJK2cjYGxI46yxPcd/CLaYmF?=
 =?us-ascii?q?7xD7WOqPLjp0nmxpdbylixqv/kWs1PfwW8qy3V1XtCRKiMPMuWoI1xHL6siIVP?=
 =?us-ascii?q?99/kC51DaR2ADc9PtELVo3laXFMZ4hxKA/lp4JvUTEBC/2l136jK6Qdko65uil?=
 =?us-ascii?q?8/rrbqniq5OGKoN5hB/yPr4zlsG8Heg0KAkDUmqD9eS5zrLj/En5QLtQjv0xl6?=
 =?us-ascii?q?nUqJTaJcUdpq6kDA5Zy4Uj5AilDzegztsYmWALLFVLeRKBkYfpIUrDIO73Dfih?=
 =?us-ascii?q?mVSgijRryO7cPr3nHJrNKmLPkLD7fbZy80Jc0hY8zchD55JIDbEMOPbzWk7ytN?=
 =?us-ascii?q?PGFBM4PBG0zv3jCNV80IMeRG2ODrWYMKPUrV+H+OYvL/OQa48SvTb3M+Il6OL2?=
 =?us-ascii?q?jX8lhV8derGk3ZsNZ3C5AvRpOUKZbWDsgtccC2gKuAU+QffuiF2DVz5TenmzU7?=
 =?us-ascii?q?g95jE9FIKpE4PDSpqxj7yG2SexBodWaXxeClCQDXfocJ2JW/ULaC2MOMNhkTsE?=
 =?us-ascii?q?Vb6nS48mzhyusA76y7x6Luvb4CEYtJTj1MRr6O3Xjx096Tt0D8GF2WGXU250hn?=
 =?us-ascii?q?8IRyMx3K1nu0N90VeD0a97g/BCD9xc/fFJXxw+NZ7dyex6Ft/zVhjAftePVFap?=
 =?us-ascii?q?XNGmDSstQdI2xt8Ee1x9FMm6jhDfwyqqBKcYl7+RC5wy6K7c23nxKNx7y3bJz6?=
 =?us-ascii?q?Qhi1gmQs1SNWypnKJ/9g7TB5LXnEWdjaqlaaMc3CvV/meZ0WWOpF1YUBJ3Uajd?=
 =?us-ascii?q?QH8QfFXWosrj6kPCVbCuD68nPRVHycKFLqtKadjpjVFdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRzGl31fUPj7/NyqHOh?=
 =?us-ascii?q?QU8y1AGFcUth2qGx+h4Ug/ycVvwS0qgFuCcntzV7AlK908jKBNqHogprZL9cbs?=
 =?us-ascii?q?8l4FdbyWLZsBRwPoChL6BngV4ebwR3vkP02xVrEIlAltIqrHcrzAp0JqKVy1dB?=
 =?us-ascii?q?dzKe3ZDtNbzbMGjy/Baza6HI3lHSysqZ+qAK6P4gsVXsoBmpFlY+83Vgy9RayX?=
 =?us-ascii?q?+c6YvFDQUMUZP9SF049wVnqL7AZCk95ITU1WN3PKmwsz/C3c8pBeQ/xhaheddf?=
 =?us-ascii?q?LL2LFAvoH8IGAMiuLfQgm0K1YRIcIOBS6Kk0MtumdvubwqKkIPxsnTOmjWtd5o?=
 =?us-ascii?q?B93VmB9y59Su7OwpYEzOuU3gqBVzfgklihttr7lpxDZTEXBmC/0zTrBJZNZq1u?=
 =?us-ascii?q?eoYGEX2uI8yrydpknZ7iRnlY+ESlB1wYws+peAOeYEDn0g1UyEsYv2anmSy+zz?=
 =?us-ascii?q?FvlzEpr6yf3DHBwuj4dRoHPHJLS3dmjVv2PYe0iNUaVlCybwc1jBul+Vr6x69D?=
 =?us-ascii?q?qaV/LmnfW0dJczLtL2F/VKu9rb6CY89J6JM1viRbSuW8YVaGSrHjpxsWyT/sH2?=
 =?us-ascii?q?xbxDojbTGlpo35nwBmiGKaNHtzrmDWedtzxRfc49zQX+VR0SAFRCl7iDnXAEaz?=
 =?us-ascii?q?P9+y8NWQlpfDtP2+Vm27Wp1Sdynr0Z2PtC+h6WJ2Bh2/mui5msf7HggizS/7y9?=
 =?us-ascii?q?5qWD3IrRnmZYnnzaa6MeNhfkRzAF/86sx6Gpxxk4cqhZEQ32QaiYuR/XYdjWjz?=
 =?us-ascii?q?NtBb07rkbHURXT4L38LV4A/91U1gNH2Jxpj1VnWAwsR7Ydm6bXgb2iY878BMFa?=
 =?us-ascii?q?eV46ZInSpzolqksw3RZeJxkSsayfsr8HQamf0GuBIxziWBBbAfBUxYPS3vlxuS?=
 =?us-ascii?q?9dy/ortYZH2zcbeuzkpxhs6uDKuNogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NGLhun0lzvQ3jB100pG8oYiHMH5t/KOi?=
 =?us-ascii?q?Dx5cNz31Yd4T+z73gaZfmMaWw56gHpF7FjoXW5voSOqiECgOuvT/KwaODDo8p2?=
 =?us-ascii?q?+AFrXFGg+f7Fpmo2jLE5C2LHyXIHgZzdN/RBiSPkBfgQYUXCkkkZ49DAyl2Mvh?=
 =?us-ascii?q?cEJh7DAL+lH4sgdMyv5vNxTnUGfQvgKoZSkvSJSFMBpa9AJC51rWMcyD6OJ8BT?=
 =?us-ascii?q?pY84alrAyMLGybegtJAXsIWkyCG1DsIL2u6cPc/OifA+q0N+HObqmWqexCS/eI?=
 =?us-ascii?q?woqi04th/zaRL8WPI2NtD/sh1kpYWnB5HcvZli4LSywWkSLNcsGaqA29+i1xss?=
 =?us-ascii?q?Cw7vDrVBjz6ouIDrtYKc9v9AyugaefK+6Qgz50KTZG2ZMNxn/Iy7kf0EQRiyF0?=
 =?us-ascii?q?cDmtHqoPtTTQTKLLgaJXCx8bayVuNMpH9a483w9NOdLFhdPxzLJ3kvk1C1JdX1?=
 =?us-ascii?q?z7hs6pfdAKI326NF7fHkmLKa+JJSfVzMD3e6+8TbxQgf5Qtx2xvzabDkDiMi6C?=
 =?us-ascii?q?lznvSxCgL+VMgDuHMxxZvYG3agxtBnT7TNL6dh27N8d6jSE3wb0xnH/FKXQQPi?=
 =?us-ascii?q?R8c0xTqL2d9idYgvR5G2xc4XtpN+iEmyCF7+bGLpYaq+dkAiNxl+hC+nQ116NV?=
 =?us-ascii?q?7D1YRPxygCbTrsRho1ejkumOzDpoSBtPqjZRi4KNskVvIqHZ9phGWXbZ8xMB92?=
 =?us-ascii?q?SQCxIWp9R7Dt3jobxfyt/KlPG7FDAX99PS4NtZDNLFMN6AGGQuPACvGzPOCgYB?=
 =?us-ascii?q?CzmxOjLxnUtYxdyI93bdhJk1pZX2g9JaR7VaW1M4DOgyCUl/GtEGZpBtUWV3wv?=
 =?us-ascii?q?agkMcU6C/m/1HqT8JAs8WCD6rKDA=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ALAADsOP5bh0O0hNFkHAEBAQQBAQcEA?=
 =?us-ascii?q?QGBUQcBAQsBg2sng3mIGF+LKoINFJcuFIEQA0wUGBMBh14iNAkNAQMBAQEBAQE?=
 =?us-ascii?q?CARMBAQEIDQkIKSMMgjYkAYJiAwMBAiAPAQ0BATcBBQkBAR8FAiYCAgNUGQWDH?=
 =?us-ascii?q?IICBaVCcIEvgnYBAQWHSQiBC4ZcgmkmgRwXgUA/gRGHWIM/gleJB4cWj3gJkSY?=
 =?us-ascii?q?LGIFajzSCeIZ7jkqBRmyBITMaCCgIgyeCGwsBF4hehWAfMoEEAQEBjGgBAQ?=
X-IPAS-Result: =?us-ascii?q?A0ALAADsOP5bh0O0hNFkHAEBAQQBAQcEAQGBUQcBAQsBg2s?=
 =?us-ascii?q?ng3mIGF+LKoINFJcuFIEQA0wUGBMBh14iNAkNAQMBAQEBAQECARMBAQEIDQkIK?=
 =?us-ascii?q?SMMgjYkAYJiAwMBAiAPAQ0BATcBBQkBAR8FAiYCAgNUGQWDHIICBaVCcIEvgnY?=
 =?us-ascii?q?BAQWHSQiBC4ZcgmkmgRwXgUA/gRGHWIM/gleJB4cWj3gJkSYLGIFajzSCeIZ7j?=
 =?us-ascii?q?kqBRmyBITMaCCgIgyeCGwsBF4hehWAfMoEEAQEBjGgBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,289,1539673200"; 
   d="scan'208";a="55143400"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 22:47:53 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727769AbeK1RsW (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 12:48:22 -0500
Received: from mail.kernel.org ([198.145.29.99]:49532 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1727285AbeK1Rry (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 12:47:54 -0500
Received: from sol.localdomain (c-24-23-142-8.hsd1.ca.comcast.net [24.23.142.8])
        (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 1481F2086B;
        Wed, 28 Nov 2018 06:47:19 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=default; t=1543387639;
        bh=bTlMXr+t5cuKbUgfcmMEVyPhJAJOn7VTSPafvijPEYU=;
        h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
        b=Vk+znVi+bIH2NLiyVyDvb6RYfg/3taWpRBQ9lEQcGFVm3UuD4kbTKf16K75ZS5Iqx
         FH82lpMoi9GOTRcrLOxd4uA/o3QPWlV4ViUGLPGrZifdDMKUvBIfapaFAhat15lTPZ
         9MVImB0UahRPV4Rkqf5GajVHcZKjPzEEYoM9B11E=
From: Eric Biggers <ebiggers@kernel.org>
To: linux-crypto@vger.kernel.org
Cc: Paul Crowley <paulcrowley@google.com>,
        Martin Willi <martin@strongswan.org>,
        Milan Broz <gmazyland@gmail.com>,
        "Jason A . Donenfeld" <Jason@zx2c4.com>,
        linux-kernel@vger.kernel.org
Subject: [PATCH 1/6] crypto: x86/nhpoly1305 - add SSE2 accelerated NHPoly1305
Date: Tue, 27 Nov 2018 22:44:40 -0800
Message-Id: <20181128064445.3813-2-ebiggers@kernel.org>
X-Mailer: git-send-email 2.19.2
In-Reply-To: <20181128064445.3813-1-ebiggers@kernel.org>
References: <20181128064445.3813-1-ebiggers@kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

From: Eric Biggers <ebiggers@google.com>

Add a 64-bit SSE2 implementation of NHPoly1305, an ε-almost-∆-universal
hash function used in the Adiantum encryption mode.  For now, only the
NH portion is actually SSE2-accelerated; the Poly1305 part is less
performance-critical so is just implemented in C.

Signed-off-by: Eric Biggers <ebiggers@google.com>
---
 arch/x86/crypto/Makefile               |   4 +
 arch/x86/crypto/nh-sse2-x86_64.S       | 123 +++++++++++++++++++++++++
 arch/x86/crypto/nhpoly1305-sse2-glue.c |  76 +++++++++++++++
 crypto/Kconfig                         |   8 ++
 4 files changed, 211 insertions(+)
 create mode 100644 arch/x86/crypto/nh-sse2-x86_64.S
 create mode 100644 arch/x86/crypto/nhpoly1305-sse2-glue.c

diff --git a/arch/x86/crypto/Makefile b/arch/x86/crypto/Makefile
index a4b0007a54e17..49dc3d50041c9 100644
--- a/arch/x86/crypto/Makefile
+++ b/arch/x86/crypto/Makefile
@@ -46,6 +46,8 @@ obj-$(CONFIG_CRYPTO_MORUS1280_GLUE) += morus1280_glue.o
 obj-$(CONFIG_CRYPTO_MORUS640_SSE2) += morus640-sse2.o
 obj-$(CONFIG_CRYPTO_MORUS1280_SSE2) += morus1280-sse2.o
 
+obj-$(CONFIG_CRYPTO_NHPOLY1305_SSE2) += nhpoly1305-sse2.o
+
 # These modules require assembler to support AVX.
 ifeq ($(avx_supported),yes)
 	obj-$(CONFIG_CRYPTO_CAMELLIA_AESNI_AVX_X86_64) += \
@@ -84,6 +86,8 @@ aegis256-aesni-y := aegis256-aesni-asm.o aegis256-aesni-glue.o
 morus640-sse2-y := morus640-sse2-asm.o morus640-sse2-glue.o
 morus1280-sse2-y := morus1280-sse2-asm.o morus1280-sse2-glue.o
 
+nhpoly1305-sse2-y := nh-sse2-x86_64.o nhpoly1305-sse2-glue.o
+
 ifeq ($(avx_supported),yes)
 	camellia-aesni-avx-x86_64-y := camellia-aesni-avx-asm_64.o \
 					camellia_aesni_avx_glue.o
diff --git a/arch/x86/crypto/nh-sse2-x86_64.S b/arch/x86/crypto/nh-sse2-x86_64.S
new file mode 100644
index 0000000000000..51f52d4ab4bbc
--- /dev/null
+++ b/arch/x86/crypto/nh-sse2-x86_64.S
@@ -0,0 +1,123 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * NH - ε-almost-universal hash function, x86_64 SSE2 accelerated
+ *
+ * Copyright 2018 Google LLC
+ *
+ * Author: Eric Biggers <ebiggers@google.com>
+ */
+
+#include <linux/linkage.h>
+
+#define		PASS0_SUMS	%xmm0
+#define		PASS1_SUMS	%xmm1
+#define		PASS2_SUMS	%xmm2
+#define		PASS3_SUMS	%xmm3
+#define		K0		%xmm4
+#define		K1		%xmm5
+#define		K2		%xmm6
+#define		K3		%xmm7
+#define		T0		%xmm8
+#define		T1		%xmm9
+#define		T2		%xmm10
+#define		T3		%xmm11
+#define		T4		%xmm12
+#define		T5		%xmm13
+#define		T6		%xmm14
+#define		T7		%xmm15
+#define		KEY		%rdi
+#define		MESSAGE		%rsi
+#define		MESSAGE_LEN	%rdx
+#define		HASH		%rcx
+
+.macro _nh_stride	k0, k1, k2, k3, offset
+
+	// Load next message stride
+	movdqu		\offset(MESSAGE), T1
+
+	// Load next key stride
+	movdqu		\offset(KEY), \k3
+
+	// Add message words to key words
+	movdqa		T1, T2
+	movdqa		T1, T3
+	paddd		T1, \k0    // reuse k0 to avoid a move
+	paddd		\k1, T1
+	paddd		\k2, T2
+	paddd		\k3, T3
+
+	// Multiply 32x32 => 64 and accumulate
+	pshufd		$0x10, \k0, T4
+	pshufd		$0x32, \k0, \k0
+	pshufd		$0x10, T1, T5
+	pshufd		$0x32, T1, T1
+	pshufd		$0x10, T2, T6
+	pshufd		$0x32, T2, T2
+	pshufd		$0x10, T3, T7
+	pshufd		$0x32, T3, T3
+	pmuludq		T4, \k0
+	pmuludq		T5, T1
+	pmuludq		T6, T2
+	pmuludq		T7, T3
+	paddq		\k0, PASS0_SUMS
+	paddq		T1, PASS1_SUMS
+	paddq		T2, PASS2_SUMS
+	paddq		T3, PASS3_SUMS
+.endm
+
+/*
+ * void nh_sse2(const u32 *key, const u8 *message, size_t message_len,
+ *		u8 hash[NH_HASH_BYTES])
+ *
+ * It's guaranteed that message_len % 16 == 0.
+ */
+ENTRY(nh_sse2)
+
+	movdqu		0x00(KEY), K0
+	movdqu		0x10(KEY), K1
+	movdqu		0x20(KEY), K2
+	add		$0x30, KEY
+	pxor		PASS0_SUMS, PASS0_SUMS
+	pxor		PASS1_SUMS, PASS1_SUMS
+	pxor		PASS2_SUMS, PASS2_SUMS
+	pxor		PASS3_SUMS, PASS3_SUMS
+
+	sub		$0x40, MESSAGE_LEN
+	jl		.Lloop4_done
+.Lloop4:
+	_nh_stride	K0, K1, K2, K3, 0x00
+	_nh_stride	K1, K2, K3, K0, 0x10
+	_nh_stride	K2, K3, K0, K1, 0x20
+	_nh_stride	K3, K0, K1, K2, 0x30
+	add		$0x40, KEY
+	add		$0x40, MESSAGE
+	sub		$0x40, MESSAGE_LEN
+	jge		.Lloop4
+
+.Lloop4_done:
+	and		$0x3f, MESSAGE_LEN
+	jz		.Ldone
+	_nh_stride	K0, K1, K2, K3, 0x00
+
+	sub		$0x10, MESSAGE_LEN
+	jz		.Ldone
+	_nh_stride	K1, K2, K3, K0, 0x10
+
+	sub		$0x10, MESSAGE_LEN
+	jz		.Ldone
+	_nh_stride	K2, K3, K0, K1, 0x20
+
+.Ldone:
+	// Sum the accumulators for each pass, then store the sums to 'hash'
+	movdqa		PASS0_SUMS, T0
+	movdqa		PASS2_SUMS, T1
+	punpcklqdq	PASS1_SUMS, T0		// => (PASS0_SUM_A PASS1_SUM_A)
+	punpcklqdq	PASS3_SUMS, T1		// => (PASS2_SUM_A PASS3_SUM_A)
+	punpckhqdq	PASS1_SUMS, PASS0_SUMS	// => (PASS0_SUM_B PASS1_SUM_B)
+	punpckhqdq	PASS3_SUMS, PASS2_SUMS	// => (PASS2_SUM_B PASS3_SUM_B)
+	paddq		PASS0_SUMS, T0
+	paddq		PASS2_SUMS, T1
+	movdqu		T0, 0x00(HASH)
+	movdqu		T1, 0x10(HASH)
+	ret
+ENDPROC(nh_sse2)
diff --git a/arch/x86/crypto/nhpoly1305-sse2-glue.c b/arch/x86/crypto/nhpoly1305-sse2-glue.c
new file mode 100644
index 0000000000000..ed68d164ce140
--- /dev/null
+++ b/arch/x86/crypto/nhpoly1305-sse2-glue.c
@@ -0,0 +1,76 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * NHPoly1305 - ε-almost-∆-universal hash function for Adiantum
+ * (SSE2 accelerated version)
+ *
+ * Copyright 2018 Google LLC
+ */
+
+#include <crypto/internal/hash.h>
+#include <crypto/nhpoly1305.h>
+#include <linux/module.h>
+#include <asm/fpu/api.h>
+
+asmlinkage void nh_sse2(const u32 *key, const u8 *message, size_t message_len,
+			u8 hash[NH_HASH_BYTES]);
+
+/* wrapper to avoid indirect call to assembly, which doesn't work with CFI */
+static void _nh_sse2(const u32 *key, const u8 *message, size_t message_len,
+		     __le64 hash[NH_NUM_PASSES])
+{
+	nh_sse2(key, message, message_len, (u8 *)hash);
+}
+
+static int nhpoly1305_sse2_update(struct shash_desc *desc,
+				  const u8 *src, unsigned int srclen)
+{
+	if (srclen < 64 || !irq_fpu_usable())
+		return crypto_nhpoly1305_update(desc, src, srclen);
+
+	do {
+		unsigned int n = min_t(unsigned int, srclen, PAGE_SIZE);
+
+		kernel_fpu_begin();
+		crypto_nhpoly1305_update_helper(desc, src, n, _nh_sse2);
+		kernel_fpu_end();
+		src += n;
+		srclen -= n;
+	} while (srclen);
+	return 0;
+}
+
+static struct shash_alg nhpoly1305_alg = {
+	.base.cra_name		= "nhpoly1305",
+	.base.cra_driver_name	= "nhpoly1305-sse2",
+	.base.cra_priority	= 200,
+	.base.cra_ctxsize	= sizeof(struct nhpoly1305_key),
+	.base.cra_module	= THIS_MODULE,
+	.digestsize		= POLY1305_DIGEST_SIZE,
+	.init			= crypto_nhpoly1305_init,
+	.update			= nhpoly1305_sse2_update,
+	.final			= crypto_nhpoly1305_final,
+	.setkey			= crypto_nhpoly1305_setkey,
+	.descsize		= sizeof(struct nhpoly1305_state),
+};
+
+static int __init nhpoly1305_mod_init(void)
+{
+	if (!boot_cpu_has(X86_FEATURE_XMM2))
+		return -ENODEV;
+
+	return crypto_register_shash(&nhpoly1305_alg);
+}
+
+static void __exit nhpoly1305_mod_exit(void)
+{
+	crypto_unregister_shash(&nhpoly1305_alg);
+}
+
+module_init(nhpoly1305_mod_init);
+module_exit(nhpoly1305_mod_exit);
+
+MODULE_DESCRIPTION("NHPoly1305 ε-almost-∆-universal hash function (SSE2-accelerated)");
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Eric Biggers <ebiggers@google.com>");
+MODULE_ALIAS_CRYPTO("nhpoly1305");
+MODULE_ALIAS_CRYPTO("nhpoly1305-sse2");
diff --git a/crypto/Kconfig b/crypto/Kconfig
index b6376d5d973e0..b85133966d643 100644
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -501,6 +501,14 @@ config CRYPTO_NHPOLY1305
 	select CRYPTO_HASH
 	select CRYPTO_POLY1305
 
+config CRYPTO_NHPOLY1305_SSE2
+	tristate "NHPoly1305 hash function (x86_64 SSE2 implementation)"
+	depends on X86 && 64BIT
+	select CRYPTO_NHPOLY1305
+	help
+	  SSE2 optimized implementation of the hash function used by the
+	  Adiantum encryption mode.
+
 config CRYPTO_ADIANTUM
 	tristate "Adiantum support"
 	select CRYPTO_CHACHA20
-- 
2.19.2

