Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:49:36 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id B8351580213;
	Thu, 29 Nov 2018 10:11:31 -0800 (PST)
Received: from fmsmga103.fm.intel.com ([10.1.193.90])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 10:11:31 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A8U+fmB+4vRrAwP9uRHKM819IXTAuvvDOBiVQ1KB9?=
 =?us-ascii?q?1+oWIJqq85mqBkHD//Il1AaPAd2Lraocw8Pt8InYEVQa5piAtH1QOLdtbDQizf?=
 =?us-ascii?q?ssogo7HcSeAlf6JvO5JwYzHcBFSUM3tyrjaRsdF8nxfUDdrWOv5jAOBBr/KRB1?=
 =?us-ascii?q?JuPoEYLOksi7ze+/94HQbglSmDaxfa55IQmrownWqsQYm5ZpJLwryhvOrHtIeu?=
 =?us-ascii?q?BWyn1tKFmOgRvy5dq+8YB6/ShItP0v68BPUaPhf6QlVrNYFygpM3o05MLwqxbO?=
 =?us-ascii?q?SxaE62YGXWUXlhpIBBXF7A3/U5zsvCb2qvZx1S+HNsDwULs6Wymt771zRRHmiC?=
 =?us-ascii?q?kJKSM38G/YhcNska1UohyuqR9kw47MYoyYL+Z+cr/HcN8GWWZMRNhdWipcCY28?=
 =?us-ascii?q?dYsPCO8BMP5foYn8pFsBswa1CxW2C+P3zT9Innj23bcm0+88FgzGxhQgH8oSsH?=
 =?us-ascii?q?nPqNX1NaESUf26zaXSzDXMdPZW1S3h54jPdxAsuPeBVq9zf8rJ0UQjCR/Jg1GK?=
 =?us-ascii?q?pYD4MT6ZyP4Bv3WY4uZ8T+6iimwqpxl1rzS128shhYrEipgLxlzY+ih12pg5Kc?=
 =?us-ascii?q?GlREN9fNWqCoFftzuAOItzWs4iQ39nuCI9yrAep567czYFyI49yx7cdfOHaY6I?=
 =?us-ascii?q?7QznVOqLJjd4nn1ldKq+hxa070eg1vXxWteo3FtOtCZJj9fBum4X2xDO6cWLVu?=
 =?us-ascii?q?Fx80aj1DqX0gDc8OBEIUQ6larBLJ4hx6Y9lp4SsUTFAy/3l1z6jKyIeUU+/Oin?=
 =?us-ascii?q?9eDnbqzhpp6SMY97lBv+P78wmsywH+s4KBICX2uF9uSm0r3s40n5TK9Njv0sna?=
 =?us-ascii?q?nVqIraKtgDpq6lHw9V1Z4u6xK+DzelztsUh3YGLE9edRKDjojpPUzOIf/iAfe+?=
 =?us-ascii?q?hVSsjClkx/TcMrL9BZXNK2DJkK39crZl905c1A0zwMhf551OC7EBPOj8WkjruN?=
 =?us-ascii?q?zYEx82KQq0w+n8BdV514MeX3+PA6CDPKPTt1+I+vwgI+2WaIAJvzb9LuAv5+Ty?=
 =?us-ascii?q?gn8hhV8dYa6p0IMVaHC/APtqOUaZYX3qgtcHFmcHpQ4+TO3siF2fXj9ffXeyX6?=
 =?us-ascii?q?Qg5j4lDIKqF5vMRoeogLaZxie0AoVWZnxaClCLCXrnbZ6EW/cLaCKROMNhiCYL?=
 =?us-ascii?q?Vbq6Ro8l1BGushL6yrV9IurV/C0YqYzs1Nxv6+LPkhEy8CR+D96B3GGVU2F0gm?=
 =?us-ascii?q?QISic13K9lp0xx0FOD0alijPxeGtxe/PdJUgY8NZ7BwO12EdHyWgTdftiXTFaq?=
 =?us-ascii?q?WMmpATY0Ttgp2d8Bf159G8m+jhDExyelHqUal6KVC5Au8qLTxX7xJ91jxHbA06?=
 =?us-ascii?q?Uhi1omQs5LNWC9gq5/9g7TB5PGkkmDlqaqc7gc0zDJ9GuZ0WWOu0RYWhZqUarZ?=
 =?us-ascii?q?RXAfelfWrdPh60zfVbCuF6ooPhFBycGYLKtKccPmjVNdSffnOdTeZX+xmmiqCR?=
 =?us-ascii?q?aJwLOMcJTle2EH0CrBD0gElhgZ/WyaOggmGiehv2XeASRyFVLuZkPs9vV+qHO7?=
 =?us-ascii?q?T0Mu0wGGdUph16Cx+h4Ug/ycROge3rYFuCcntjV1E0yx39PQC9qcuQVheL9Qbs?=
 =?us-ascii?q?864FdCzWjZrRByPoS8L6B+gV4Tax54v0fw2BR4FIpBkdImo2g3zAVvM62Y1lBB?=
 =?us-ascii?q?dzSG3Z3rPr3XK2/y/A2gaqLM21He1sqW9bkL6Pgit1rjuwSpHFI483p7y9lVz2?=
 =?us-ascii?q?ec5pLSAQsSTJL9SFo4+wJ7prHaeCY94YzU2GZoMam1tD/Cxt0oCPEkyhamY9dQ?=
 =?us-ascii?q?LqeEGBXuHM0dAsikMPYqlESxbhIYIOBS87Y5P9mnd/SawqGrJvtvnDW8gWRB/o?=
 =?us-ascii?q?99yEOM+zNgReHS25YK3u+X3hGAVzf6l1qhtsH3mYZZZTAdBGa/yC7kBJJPaa12?=
 =?us-ascii?q?Z4oEFWCuI8ivzNVkm5HtQ2JY9EKkB14e2M6peACeblzn0Q1LyEQXp2eqmS+5zz?=
 =?us-ascii?q?xyjjEoobCT3C3Iw+T+ahUHPnRHS3VljVfpOYK0lcwVXFC0bwg1kxuo/UT6yLJB?=
 =?us-ascii?q?pKR8LGnTRl1EfzPsIGFhUauwt7yCbNBJ6J4ztSVXUeK8YU2VS7Lnohsa1T/jEH?=
 =?us-ascii?q?VaxDwhaz6qvZD5lQRgiG2BNHZzsGbZecZoyBbf/tPcQuRd3jgHRCl+kjTXAlm8?=
 =?us-ascii?q?P9+0/dSbjZvDs+a+V36/WZ1XayXk0YSAtC6j721wHRK/h+yzmsHgEQUi0i/0zd?=
 =?us-ascii?q?hqWT/IrBbheIbr0au6PPljfklpAl/89sV7Fpt/kos2mJEfx3waio+J8noAlGf5?=
 =?us-ascii?q?Kc9b1r7mbHoRWT4LxMbY4A3k2E1gNH2F3Yz4WWuGwst9eda6eHgZ1Twn78BFE6?=
 =?us-ascii?q?qU6L1EnS1oolu3tw7RYP59nisDxvsq8nIVn+YJuA81xCWHHr8SBVVYPTDrlxmQ?=
 =?us-ascii?q?89C+q6BXaHyucLeq0kp+gMuhDKqDogxHXHb5e5EiHTJ/78llMVLM1mHz5Z/geN?=
 =?us-ascii?q?XKcd0TsRiUmQ/aj+dJMJIxiuYKhS1/NG3mp3IlzOo7jQF00ZG+oYiKMGFt/KO/?=
 =?us-ascii?q?Ah5FOTz5fcIT+jfxjalAmsaaxZygHpJkGj8TRpvnUeqoEC4OtfTgLwuOEiczqn?=
 =?us-ascii?q?KFFrrEBwOf9F1qr3HSE5CoKnGXImMWzc55SRmZJUxfhh0UXTogkp44EACq2NLu?=
 =?us-ascii?q?cENj6j8N4V74rwNGyvh0OBnnTmffuACoZy80SZiYMRpW9xxC6F3TMcCE9eJzGC?=
 =?us-ascii?q?dY/pK6oQyJK2ybYRlIDG4TVkyFAVDjIqeh5d3a/+eEAeq+KuPEYa+SpuxGS/eI?=
 =?us-ascii?q?2ZWv35Nm/zmSN8WPPXpiD/wh1kpAR3B5HMvZlCsVSywKjCLAdMqbpBa6+i1qoc?=
 =?us-ascii?q?Gz6vXrWATz5YSRD7teK8lg+xezga2bLe6fmD55KSpE1pML3XLH0qUf00UIiy5w?=
 =?us-ascii?q?dzihC7AAtS/WQaLUm69XCQMbaixpOMtJ6aI8whdCOcrBhtzp0b54i+Y/C01ZWl?=
 =?us-ascii?q?z5hsGpecsKLnmhNFPGAUaHLqiJKSfXzMH3f6y8T6ZdjOFVtx22pDaaHFXvPjWF?=
 =?us-ascii?q?lzn1SR+vNftAgz2cPBxboIu9aApiCXD/TNL6bR22KN92gicwwb0xh3PKM3YTMD?=
 =?us-ascii?q?l8c0xXqL2Q4jhVgvF+G2xH83pkIvOImyef7+nENJkWteFnDThzl+JfszwGzO5s?=
 =?us-ascii?q?7ShCDNd8mWOGpddvi16jgq+S0Ww0fgBJr2NuhYGG9X9rIaLB8YNcESLe5AoRxW?=
 =?us-ascii?q?GRDQka4dpvD5vkvKUGmYuHr776NDoXq4GcxsAbHcWBcM8=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ABAAACKwBch0O0hNFkGgEBAQEBAgEBA?=
 =?us-ascii?q?QEHAgEBAQGBUQUBAQEBCwGDayeMEV+LKVABAQaBNRSJCo4mgXMSAQEYEwGHdCI?=
 =?us-ascii?q?0CQ0BAwEBAQEBAQIBEwEBAQgNCQgpL4I2IoJlAQEBAwECDxUTOQYGCQEBChgJJ?=
 =?us-ascii?q?QMMBUkTBR2Cf4FqAwgNAwEBnGOJWAEBAYFqM4oujBYXeIEHhCOCV4VfgiYCiQc?=
 =?us-ascii?q?ah02PNQmRJyMKApEQLJd7AgQGBQITAYFGgg1NIxWDJ4InF44fcIEFAQEhjRkBA?=
 =?us-ascii?q?Q?=
X-IPAS-Result: =?us-ascii?q?A0ABAAACKwBch0O0hNFkGgEBAQEBAgEBAQEHAgEBAQGBUQU?=
 =?us-ascii?q?BAQEBCwGDayeMEV+LKVABAQaBNRSJCo4mgXMSAQEYEwGHdCI0CQ0BAwEBAQEBA?=
 =?us-ascii?q?QIBEwEBAQgNCQgpL4I2IoJlAQEBAwECDxUTOQYGCQEBChgJJQMMBUkTBR2Cf4F?=
 =?us-ascii?q?qAwgNAwEBnGOJWAEBAYFqM4oujBYXeIEHhCOCV4VfgiYCiQcah02PNQmRJyMKA?=
 =?us-ascii?q?pEQLJd7AgQGBQITAYFGgg1NIxWDJ4InF44fcIEFAQEhjRkBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,295,1539673200"; 
   d="scan'208";a="53891575"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 10:11:29 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727407AbeK3FRk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Fri, 30 Nov 2018 00:17:40 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:44112 "EHLO
        mx0a-001b2d01.pphosted.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1725928AbeK3FRk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 30 Nov 2018 00:17:40 -0500
Received: from pps.filterd (m0098409.ppops.net [127.0.0.1])
        by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id wATI4Kur119629
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 13:11:25 -0500
Received: from e06smtp07.uk.ibm.com (e06smtp07.uk.ibm.com [195.75.94.103])
        by mx0a-001b2d01.pphosted.com with ESMTP id 2p2jn57tqu-1
        (version=TLSv1.2 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 13:11:25 -0500
Received: from localhost
        by e06smtp07.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted
        for <linux-kernel@vger.kernel.org> from <rppt@linux.ibm.com>;
        Thu, 29 Nov 2018 18:11:22 -0000
Received: from b06cxnps3074.portsmouth.uk.ibm.com (9.149.109.194)
        by e06smtp07.uk.ibm.com (192.168.101.137) with IBM ESMTP SMTP Gateway: Authorized Use Only! Violators will be prosecuted;
        (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256/256)
        Thu, 29 Nov 2018 18:11:18 -0000
Received: from d06av23.portsmouth.uk.ibm.com (d06av23.portsmouth.uk.ibm.com [9.149.105.59])
        by b06cxnps3074.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id wATIBHMa50725060
        (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL);
        Thu, 29 Nov 2018 18:11:18 GMT
Received: from d06av23.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id DFF69A4053;
        Thu, 29 Nov 2018 18:11:17 +0000 (GMT)
Received: from d06av23.portsmouth.uk.ibm.com (unknown [127.0.0.1])
        by IMSVA (Postfix) with ESMTP id CDE26A4051;
        Thu, 29 Nov 2018 18:11:16 +0000 (GMT)
Received: from rapoport-lnx (unknown [9.148.204.201])
        by d06av23.portsmouth.uk.ibm.com (Postfix) with ESMTPS;
        Thu, 29 Nov 2018 18:11:16 +0000 (GMT)
Date: Thu, 29 Nov 2018 20:11:15 +0200
From: Mike Rapoport <rppt@linux.ibm.com>
To: Qian Cai <cai@gmx.us>
Cc: akpm@linux-foundation.org, catalin.marinas@arm.com,
        mhocko@suse.com, rppt@linux.ibm.com, aryabinin@virtuozzo.com,
        glider@google.com, dvyukov@google.com, kasan-dev@googlegroups.com,
        linux-mm@kvack.org, linux-kernel@vger.kernel.org
Subject: Re: [PATCH v2] mm/memblock: skip kmemleak for kasan_init()
References: <1543442925-17794-1-git-send-email-cai@gmx.us>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1543442925-17794-1-git-send-email-cai@gmx.us>
User-Agent: Mutt/1.5.24 (2015-08-30)
X-TM-AS-GCONF: 00
x-cbid: 18112918-0028-0000-0000-000003237AE3
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18112918-0029-0000-0000-000023DF8CC5
Message-Id: <20181129181114.GB4295@rapoport-lnx>
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10434:,, definitions=2018-11-29_11:,,
 signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0 priorityscore=1501
 malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
 clxscore=1015 lowpriorityscore=0 mlxscore=0 impostorscore=0
 mlxlogscore=999 adultscore=0 classifier=spam adjust=0 reason=mlx
 scancount=1 engine=8.0.1-1810050000 definitions=main-1811290149
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 28, 2018 at 05:08:45PM -0500, Qian Cai wrote:
> Kmemleak does not play well with KASAN (tested on both HPE Apollo 70 and
> Huawei TaiShan 2280 aarch64 servers).
> 
> After calling start_kernel()->setup_arch()->kasan_init(), kmemleak early
> log buffer went from something like 280 to 260000 which caused kmemleak
> disabled and crash dump memory reservation failed. The multitude of
> kmemleak_alloc() calls is from nested loops while KASAN is setting up
> full memory mappings, so let early kmemleak allocations skip those
> memblock_alloc_internal() calls came from kasan_init() given that those
> early KASAN memory mappings should not reference to other memory.
> Hence, no kmemleak false positives.
> 
> kasan_init
>   kasan_map_populate [1]
>     kasan_pgd_populate [2]
>       kasan_pud_populate [3]
>         kasan_pmd_populate [4]
>           kasan_pte_populate [5]
>             kasan_alloc_zeroed_page
>               memblock_alloc_try_nid
>                 memblock_alloc_internal
>                   kmemleak_alloc
> 
> [1] for_each_memblock(memory, reg)
> [2] while (pgdp++, addr = next, addr != end)
> [3] while (pudp++, addr = next, addr != end && pud_none(READ_ONCE(*pudp)))
> [4] while (pmdp++, addr = next, addr != end && pmd_none(READ_ONCE(*pmdp)))
> [5] while (ptep++, addr = next, addr != end && pte_none(READ_ONCE(*ptep)))
> 
> Signed-off-by: Qian Cai <cai@gmx.us>

Reviewed-by: Mike Rapoport <rppt@linux.ibm.com> # memblock parts

> ---
> 
> Changes since v1:
> * only skip memblock_alloc_internal() calls came from kasan_int().
> 
>  arch/arm64/mm/kasan_init.c |  2 +-
>  include/linux/memblock.h   |  1 +
>  mm/memblock.c              | 19 +++++++++++--------
>  3 files changed, 13 insertions(+), 9 deletions(-)
> 
> diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c
> index 63527e5..fcb2ca3 100644
> --- a/arch/arm64/mm/kasan_init.c
> +++ b/arch/arm64/mm/kasan_init.c
> @@ -39,7 +39,7 @@ static phys_addr_t __init kasan_alloc_zeroed_page(int node)
>  {
>  	void *p = memblock_alloc_try_nid(PAGE_SIZE, PAGE_SIZE,
>  					      __pa(MAX_DMA_ADDRESS),
> -					      MEMBLOCK_ALLOC_ACCESSIBLE, node);
> +					      MEMBLOCK_ALLOC_KASAN, node);
>  	return __pa(p);
>  }
> 
> diff --git a/include/linux/memblock.h b/include/linux/memblock.h
> index aee299a..3ef3086 100644
> --- a/include/linux/memblock.h
> +++ b/include/linux/memblock.h
> @@ -320,6 +320,7 @@ static inline int memblock_get_region_node(const struct memblock_region *r)
>  /* Flags for memblock allocation APIs */
>  #define MEMBLOCK_ALLOC_ANYWHERE	(~(phys_addr_t)0)
>  #define MEMBLOCK_ALLOC_ACCESSIBLE	0
> +#define MEMBLOCK_ALLOC_KASAN		1
> 
>  /* We are using top down, so it is safe to use 0 here */
>  #define MEMBLOCK_LOW_LIMIT 0
> diff --git a/mm/memblock.c b/mm/memblock.c
> index 9a2d5ae..abb9f7f 100644
> --- a/mm/memblock.c
> +++ b/mm/memblock.c
> @@ -262,7 +262,8 @@ phys_addr_t __init_memblock memblock_find_in_range_node(phys_addr_t size,
>  	phys_addr_t kernel_end, ret;
> 
>  	/* pump up @end */
> -	if (end == MEMBLOCK_ALLOC_ACCESSIBLE)
> +	if (end == MEMBLOCK_ALLOC_ACCESSIBLE ||
> +	    end == MEMBLOCK_ALLOC_KASAN)
>  		end = memblock.current_limit;
> 
>  	/* avoid allocating the first page */
> @@ -1412,13 +1413,15 @@ static void * __init memblock_alloc_internal(
>  done:
>  	ptr = phys_to_virt(alloc);
> 
> -	/*
> -	 * The min_count is set to 0 so that bootmem allocated blocks
> -	 * are never reported as leaks. This is because many of these blocks
> -	 * are only referred via the physical address which is not
> -	 * looked up by kmemleak.
> -	 */
> -	kmemleak_alloc(ptr, size, 0, 0);
> +	/* Skip kmemleak for kasan_init() due to high volume. */
> +	if (max_addr != MEMBLOCK_ALLOC_KASAN)
> +		/*
> +		 * The min_count is set to 0 so that bootmem allocated
> +		 * blocks are never reported as leaks. This is because many
> +		 * of these blocks are only referred via the physical
> +		 * address which is not looked up by kmemleak.
> +		 */
> +		kmemleak_alloc(ptr, size, 0, 0);
> 
>  	return ptr;
>  }
> -- 
> 1.8.3.1
> 

-- 
Sincerely yours,
Mike.

