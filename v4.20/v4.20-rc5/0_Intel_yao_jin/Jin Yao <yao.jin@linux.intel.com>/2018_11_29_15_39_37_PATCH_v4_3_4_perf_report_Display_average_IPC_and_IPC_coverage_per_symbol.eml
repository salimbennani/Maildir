Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 29 Nov 2018 18:17:46 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id D84E55803ED;
	Wed, 28 Nov 2018 23:48:20 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 23:48:18 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3AMMctBhx1d0v//efXCy+O+j09IxM/srCxBDY+r6Qd?=
 =?us-ascii?q?0e4eKfad9pjvdHbS+e9qxAeQG9mDu7Qc06L/iOPJYSQ4+5GPsXQPItRndiQuro?=
 =?us-ascii?q?EopTEmG9OPEkbhLfTnPGQQFcVGU0J5rTngaRAGUMnxaEfPrXKs8DUcBgvwNRZv?=
 =?us-ascii?q?JuTyB4Xek9m72/q99pHPYAhEniaxba9vJxiqsAvdsdUbj5F/Iagr0BvJpXVIe+?=
 =?us-ascii?q?VSxWx2IF+Yggjx6MSt8pN96ipco/0u+dJOXqX8ZKQ4UKdXDC86PGAv5c3krgfM?=
 =?us-ascii?q?QA2S7XYBSGoWkx5IAw/Y7BHmW5r6ryX3uvZh1CScIMb7S60/Vza/4KdxUBLmiD?=
 =?us-ascii?q?kJOSM3/m/UjcJ/jqxboAm5pxF92IPYfJ2ZOeBicq7HYd8WWWxMVdtRWSxbBYO8?=
 =?us-ascii?q?apMCAe4APeZesoLypUEBrRyjDgSrBOLg0DhIimX03a071eQsCgXG3A0mH9ITv3?=
 =?us-ascii?q?XYttT1NKEOUe+ryKnE1ynMb/RT2Trk7oXDbxMvoemUUL5ubcbczVMjGx7Lg1mO?=
 =?us-ascii?q?s4DpIjCY2vgXv2Wa7edsTf+jhmAopg1rvzSiyMghhpPUio8by13I7zh1zJopKd?=
 =?us-ascii?q?C+VUV1e8SrEIFKuCGfL4Z2Qt0tQ2VvuCsi1L0GtoC0fDIQxJQk2RHfcfqHfJaM?=
 =?us-ascii?q?4h75U+aROzh4iGpkeLK5mRmy7VCtxvPgWsSwylpGsyRInsfWunwQ1BHf9tKLR/?=
 =?us-ascii?q?p/80u53DaAzQHT6uVKIUAukqrbLoYswroxlpoVrETCETb6mEbog6+McEUr5Oyo?=
 =?us-ascii?q?5/3gYrTooJ+TKZV0hxrgMqQhhMO/G/40MgsQUGiB/+Szyrnj8Vf+QLVQgf06ir?=
 =?us-ascii?q?PZv4zCJcQHuq65BBdY0oIi6xa8ETiqytsZnWQcIVJBeRKHiZXpOl7ULPD5C/e/?=
 =?us-ascii?q?n0qjkDNxy//aOb3hB43HLmLfn7f5YbZ990lcxRIzzd9F5pJUFqsOIPXpVk/xqd?=
 =?us-ascii?q?zXFBk5MwOvzubjCdV90J4eWG2VDq+YNqPSrUGH5uY1L+aQY48VvS73K+I56P72?=
 =?us-ascii?q?kX85hVgdcLGr3ZsQdn+0BPdmI0KfYXrqhdcMCmMKvgs4TOz3h1yOSz9TZ3CuX6?=
 =?us-ascii?q?0i4jE3Ep6pDYDGRoq1mryOwD+7HoFKZmBBEl2DC2zod4WDW/cPci6SONVukj4f?=
 =?us-ascii?q?WLilSo8h0wyutQDgx7pmKOrU5jMXtZb52Ndp4O3TkAk49SZoAMSFz2GNU2Z0k3?=
 =?us-ascii?q?sLRzAs2qBzu0h9ylaZ3qh+jPxVDthT5/JPUgcnOp/Q1e16C9buWg3feteFUkqp?=
 =?us-ascii?q?QtKjATspVNI+38cOY1phG9Wllh3MwjClA6ELmLCRBJw76KTc32PvKMZ7zHrG0K?=
 =?us-ascii?q?ohj1wiQsZUMW2mh6h/9xXcBoLTkkWZkbqqeroY3CLX6GiDym+OtllCUAFsSaXF?=
 =?us-ascii?q?QWwfZkzOoNvk/EzCUaGhBa4nMgRbz86CMbVFatvygFVCRffjPsneYm2rl2exAx?=
 =?us-ascii?q?aI2q2DbI7wd2oB2yXdDVAOkxoP8naeKQg+GiChrnrCDDxvEFLvZF/s8el+qX+h?=
 =?us-ascii?q?Uk841QaKb1dl17q0/B4ViueRS/cS3rICpScgpC94HFe739LKFdWAoxBtc7lbYd?=
 =?us-ascii?q?M4+F1Hz37WtxRhPpy8KKBvnkQRcwBpsELhyRp2Cp9MntM3rHw31gVyL6GY0FRf?=
 =?us-ascii?q?dz6D2ZDwO7vXKnT9/Ry1aq7W3E3e38iS+qsV9Ps4rFDjthmzFkU+63Vnz8VV03?=
 =?us-ascii?q?yE65TKEQoeS47+Xlw29hh6vb7aZCY96pjQ1X1tN6m0rzDD18goBOsj1havYdNf?=
 =?us-ascii?q?PLmYGw/1Fs0QH9KuJ/Aym1i1chIEO/hf9LQ1P8y6bfSGwrOkPOF6kDKgk2tH+o?=
 =?us-ascii?q?F93luQ+CVmTu7HwogKw+uf3guBTDr8iFahssbqmYFLfz0SH2y/yTT6C45VfKF9?=
 =?us-ascii?q?YYELCWK2Kc2t2tp+n4LtW2Jf9FO7B1IG2dWleBqIY1zmwA1Q018aoXimmSu+0j?=
 =?us-ascii?q?x1nCslrquZ3CzS3evicAALNXJMRGlnlV3sO5S7j8gGXEi0aAgkjBml6lzgx6hY?=
 =?us-ascii?q?p6R/KHPfQVxScCj1LGFiU62wuaSEY8NU7JMosCNXUPmzYFyAS779pQca3D3nH2?=
 =?us-ascii?q?dE2D87cDSqsI3jnxNmkGKdMGpzrH3BdMBw3xjf48bQRfxQ3joAXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/Egg1yy7728?=
 =?us-ascii?q?NqVSXVthn8ZIbr2r++MeJmeEloGVD959B7GoF4jos/mpUQ1WIGiZWS+HoNiX3z?=
 =?us-ascii?q?PslD2aLicHoNQiYGw9vU4AjmwkJvNHyIyJziVnWB3MRhfcK1bX0M2iIy9M1KDK?=
 =?us-ascii?q?aU7LpZnSp6uFa4rATRYeRjkTcZ0/ch9Hkag+QRsgo30iqdGqwSHVVfPSH0ixSI?=
 =?us-ascii?q?6NW+oL9WZWm1d7iwyVF+ncugDLyZpgFcWXD5eootHCNq78V/Nk7M32P36o3+ZN?=
 =?us-ascii?q?bQatcTvAWOkxjcl+hVNI4xlv0SiCV8I239unkly/MhgRxqwJG3p4yHK2Rr/KKk?=
 =?us-ascii?q?DR9ULDz1Z8UP+j7ziaZShNqZ34eqHp95ADUEQIPoTe60EDIVrfnnNRyBEDgipX?=
 =?us-ascii?q?eAA7bfARWT6ER7r3LMDpCrMWuYJGICwNVmRRmdIlFfgQ8OUDU7mJ45Ch6lxMj7?=
 =?us-ascii?q?fEhl4TAR40byqgFQxeJwKxn/TmDfqR+oazczVZifNQdW4RtE50vPKsye6eRzHy?=
 =?us-ascii?q?5D852lrQyNLHGbZgtSAWEIXEyEG07sPr206dbc9OiYA/K0L+HSbrWWtexeS/CI?=
 =?us-ascii?q?yIqv0oR4/jaMNcaPPnh4A/04wEpDWn95FNrDmzUSUCwajCbNb8+dpBeh9Sx7tM?=
 =?us-ascii?q?G/8PL3WA3x4YuDEaddMdJq+xqum6eMK/aQhDplKTZfzp4D32LIx6MF3FEMiyBi?=
 =?us-ascii?q?bT2tEbUbuC7JTaLQnLJXDhEBZyNyMstI87wz3g1XNcHHjdP106ZyjuQpBFddSV?=
 =?us-ascii?q?zhhsapaNQWI2G8MVPLHlqEOK6aKj3L3c73Z7ixSblRjOVSqh2xtiyXE07lPjSf?=
 =?us-ascii?q?iTbpUwqjPv1LjCGeJBZeop2ycg5xCWj/S9Lrch26P8VxjT0zwL00gGvFNG8cMT?=
 =?us-ascii?q?dmdUNNoaad7SdZgvV5BmxA4WBpLeiCmyaF8ebYLowavudsAiRxxKpm5yEzwL5Y?=
 =?us-ascii?q?xCJJXvp4nG3VtNEq61OhlvKG4jlqShxDrnBMno3P9V1vJajD5LFBX3je9R4A5G?=
 =?us-ascii?q?nWDA4F45NgC9vgvIhKx9TPnb61IzBHt5rd+cYMDs7YJdjBK3ogKhrqGTj8CAoD?=
 =?us-ascii?q?UC7tNGfDikgbm/aXpVOPqZ1viJnq0KsHTfcPRVUyUPEbDGxhHdofMNF2WC8plf?=
 =?us-ascii?q?iQi8tetin2lwXYWMgP5sOPbfmVG/i6cDs=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AJAAC7mP9bh0O0hNFkGwEBAQEDAQEBB?=
 =?us-ascii?q?wMBAQEugSMGAQEBCwGBWoIRJ4wRjAiCIWiWRhSBXxQYEwGHcSI0CQ0BAwEBAQE?=
 =?us-ascii?q?BAQIBEwEBAQgNCQgpL4I2IoJlAwMBAiRSBgkBAVADVAcSBYJRS4ICBaZ4M4oth?=
 =?us-ascii?q?2uEK4IWgRGCXQeBVINDhXMCkBuPL1UHApEyAhZekDyBXocZj1OBRoINTSODPII?=
 =?us-ascii?q?nF44qMgEBMQGBBAEBjTIBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AJAAC7mP9bh0O0hNFkGwEBAQEDAQEBBwMBAQEugSMGAQE?=
 =?us-ascii?q?BCwGBWoIRJ4wRjAiCIWiWRhSBXxQYEwGHcSI0CQ0BAwEBAQEBAQIBEwEBAQgNC?=
 =?us-ascii?q?QgpL4I2IoJlAwMBAiRSBgkBAVADVAcSBYJRS4ICBaZ4M4oth2uEK4IWgRGCXQe?=
 =?us-ascii?q?BVINDhXMCkBuPL1UHApEyAhZekDyBXocZj1OBRoINTSODPIInF44qMgEBMQGBB?=
 =?us-ascii?q?AEBjTIBAQ?=
X-IronPort-AV: E=Sophos;i="5.56,293,1539673200"; 
   d="scan'208";a="64510035"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mga01b.intel.com with ESMTP; 28 Nov 2018 23:48:16 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727837AbeK2Swk (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 13:52:40 -0500
Received: from mga07.intel.com ([134.134.136.100]:12758 "EHLO mga07.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726639AbeK2Swi (ORCPT <rfc822;Linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 13:52:38 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
  by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 28 Nov 2018 23:48:11 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,293,1539673200"; 
   d="scan'208";a="278627329"
Received: from skl.sh.intel.com ([10.239.161.125])
  by orsmga005.jf.intel.com with ESMTP; 28 Nov 2018 23:48:09 -0800
From: Jin Yao <yao.jin@linux.intel.com>
To: acme@kernel.org, jolsa@kernel.org, peterz@infradead.org,
        mingo@redhat.com, alexander.shishkin@linux.intel.com
Cc: Linux-kernel@vger.kernel.org, ak@linux.intel.com,
        kan.liang@intel.com, yao.jin@intel.com,
        Jin Yao <yao.jin@linux.intel.com>
Subject: [PATCH v4 3/4] perf report: Display average IPC and IPC coverage per symbol
Date: Thu, 29 Nov 2018 23:39:37 +0800
Message-Id: <1543505978-19808-4-git-send-email-yao.jin@linux.intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1543505978-19808-1-git-send-email-yao.jin@linux.intel.com>
References: <1543505978-19808-1-git-send-email-yao.jin@linux.intel.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Support displaying the average IPC and IPC coverage per symbol
in perf report TUI and stdio modes.

For example,

$ perf record -b ...
$ perf report -s symbol

Overhead  Symbol                           IPC   [IPC Coverage]
  39.60%  [.] __random                     2.30  [ 54.8%]
  18.02%  [.] main                         0.43  [ 54.3%]
  14.21%  [.] compute_flag                 2.29  [100.0%]
  14.16%  [.] rand                         0.36  [100.0%]
   7.06%  [.] __random_r                   2.57  [ 70.5%]
   6.85%  [.] rand@plt                     0.00  [  0.0%]

Jiri Olsa <jolsa@redhat.com> provides the patch to support the
stdio mode. I merge Jiri's code in this patch.

$ perf report -s symbol --stdio

  # Overhead  Symbol                       IPC   [IPC Coverage]
  # ........  ...........................  ....................
  #
    39.60%  [.] __random                   2.30  [ 54.8%]
    18.02%  [.] main                       0.43  [ 54.3%]
    14.21%  [.] compute_flag               2.29  [100.0%]
    14.16%  [.] rand                       0.36  [100.0%]
     7.06%  [.] __random_r                 2.57  [ 70.5%]
     6.85%  [.] rand@plt                   0.00  [  0.0%]
     0.02%  [k] run_timer_softirq          1.60  [ 57.2%]

The columns "IPC" and "[IPC Coverage]" are automatically enabled
when the sort-key "symbol" is specified. If the perf.data doesn't
contain timed LBR information, columns are filled with "-".

For example,

  # Overhead  Symbol                       IPC   [IPC Coverage]
  # ........  ...........................  ....................
  #
      46.57%  [.] main                     -      -
      17.60%  [.] rand                     -      -
      15.84%  [.] __random_r               -      -
      11.90%  [.] __random                 -      -
       6.50%  [.] compute_flag             -      -
       1.59%  [.] rand@plt                 -      -
       0.00%  [.] _dl_relocate_object      -      -
       0.00%  [k] tlb_flush_mmu            -      -
       0.00%  [k] perf_event_mmap          -      -
       0.00%  [k] native_sched_clock       -      -
       0.00%  [k] intel_pmu_handle_irq_v4  -      -
       0.00%  [k] native_write_msr         -      -

v3:
---
Removed the sortkey 'ipc' from command-line. The columns "IPC"
and "[IPC Coverage]" are automatically enabled when "symbol"
is specified.

v2:
---
Merge in Jiri's patch to support stdio mode

Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
---
 tools/perf/builtin-report.c | 26 ++++++++++++++++---
 tools/perf/util/hist.h      |  1 +
 tools/perf/util/sort.c      | 61 +++++++++++++++++++++++++++++++++++++++++++++
 tools/perf/util/sort.h      |  2 ++
 4 files changed, 87 insertions(+), 3 deletions(-)

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 257c9c1..4958095 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -85,6 +85,7 @@ struct report {
 	int			socket_filter;
 	DECLARE_BITMAP(cpu_bitmap, MAX_NR_CPUS);
 	struct branch_type_stat	brtype_stat;
+	bool			symbol_ipc;
 };
 
 static int report__config(const char *var, const char *value, void *cb)
@@ -129,7 +130,7 @@ static int hist_iter__report_callback(struct hist_entry_iter *iter,
 	struct mem_info *mi;
 	struct branch_info *bi;
 
-	if (!ui__has_annotation())
+	if (!ui__has_annotation() && !rep->symbol_ipc)
 		return 0;
 
 	hist__account_cycles(sample->branch_stack, al, sample,
@@ -174,7 +175,7 @@ static int hist_iter__branch_callback(struct hist_entry_iter *iter,
 	struct perf_evsel *evsel = iter->evsel;
 	int err;
 
-	if (!ui__has_annotation())
+	if (!ui__has_annotation() && !rep->symbol_ipc)
 		return 0;
 
 	hist__account_cycles(sample->branch_stack, al, sample,
@@ -1133,6 +1134,7 @@ int cmd_report(int argc, const char **argv)
 		.mode  = PERF_DATA_MODE_READ,
 	};
 	int ret = hists__init();
+	char sort_tmp[128];
 
 	if (ret < 0)
 		return ret;
@@ -1284,6 +1286,24 @@ int cmd_report(int argc, const char **argv)
 	else
 		use_browser = 0;
 
+	if (sort_order && strstr(sort_order, "ipc")) {
+		parse_options_usage(report_usage, options, "s", 1);
+		goto error;
+	}
+
+	if (sort_order && strstr(sort_order, "symbol")) {
+		if (sort__mode == SORT_MODE__BRANCH) {
+			snprintf(sort_tmp, sizeof(sort_tmp), "%s,%s",
+				 sort_order, "ipc_lbr");
+			report.symbol_ipc = true;
+		} else {
+			snprintf(sort_tmp, sizeof(sort_tmp), "%s,%s",
+				 sort_order, "ipc_null");
+		}
+
+		sort_order = sort_tmp;
+	}
+
 	if (setup_sorting(session->evlist) < 0) {
 		if (sort_order)
 			parse_options_usage(report_usage, options, "s", 1);
@@ -1311,7 +1331,7 @@ int cmd_report(int argc, const char **argv)
 	 * so don't allocate extra space that won't be used in the stdio
 	 * implementation.
 	 */
-	if (ui__has_annotation()) {
+	if (ui__has_annotation() || report.symbol_ipc) {
 		ret = symbol__annotation_init();
 		if (ret < 0)
 			goto error;
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index 3badd7f..664b5ed 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -62,6 +62,7 @@ enum hist_column {
 	HISTC_TRACE,
 	HISTC_SYM_SIZE,
 	HISTC_DSO_SIZE,
+	HISTC_SYMBOL_IPC,
 	HISTC_NR_COLS, /* Last entry */
 };
 
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index f96c005..0477935 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -13,6 +13,7 @@
 #include "strlist.h"
 #include <traceevent/event-parse.h>
 #include "mem-events.h"
+#include "annotate.h"
 #include <linux/kernel.h>
 
 regex_t		parent_regex;
@@ -422,6 +423,64 @@ struct sort_entry sort_srcline_to = {
 	.se_width_idx	= HISTC_SRCLINE_TO,
 };
 
+static int hist_entry__sym_ipc_snprintf(struct hist_entry *he, char *bf,
+					size_t size, unsigned int width)
+{
+
+	struct symbol *sym = he->ms.sym;
+	struct map *map = he->ms.map;
+	struct perf_evsel *evsel = hists_to_evsel(he->hists);
+	struct annotation *notes;
+	double ipc = 0.0, coverage = 0.0;
+	char tmp[64];
+
+	if (!sym)
+		return repsep_snprintf(bf, size, "%-*s", width, "-");
+
+	if (!sym->annotate2 && symbol__annotate2(sym, map, evsel,
+		&annotation__default_options, NULL) < 0) {
+		return 0;
+	}
+
+	notes = symbol__annotation(sym);
+
+	if (notes->hit_cycles)
+		ipc = notes->hit_insn / ((double)notes->hit_cycles);
+
+	if (notes->total_insn) {
+		coverage = notes->cover_insn * 100.0 /
+			((double)notes->total_insn);
+	}
+
+	snprintf(tmp, sizeof(tmp), "%-5.2f [%5.1f%%]", ipc, coverage);
+	return repsep_snprintf(bf, size, "%-*s", width, tmp);
+}
+
+struct sort_entry sort_sym_ipc = {
+	.se_header	= "IPC   [IPC Coverage]",
+	.se_cmp		= sort__sym_cmp,
+	.se_snprintf	= hist_entry__sym_ipc_snprintf,
+	.se_width_idx	= HISTC_SYMBOL_IPC,
+};
+
+static int hist_entry__sym_ipc_null_snprintf(struct hist_entry *he
+					     __maybe_unused,
+					     char *bf, size_t size,
+					     unsigned int width)
+{
+	char tmp[64];
+
+	snprintf(tmp, sizeof(tmp), "%-5s %2s", "-", "-");
+	return repsep_snprintf(bf, size, "%-*s", width, tmp);
+}
+
+struct sort_entry sort_sym_ipc_null = {
+	.se_header	= "IPC   [IPC Coverage]",
+	.se_cmp		= sort__sym_cmp,
+	.se_snprintf	= hist_entry__sym_ipc_null_snprintf,
+	.se_width_idx	= HISTC_SYMBOL_IPC,
+};
+
 /* --sort srcfile */
 
 static char no_srcfile[1];
@@ -1574,6 +1633,7 @@ static struct sort_dimension common_sort_dimensions[] = {
 	DIM(SORT_SYM_SIZE, "symbol_size", sort_sym_size),
 	DIM(SORT_DSO_SIZE, "dso_size", sort_dso_size),
 	DIM(SORT_CGROUP_ID, "cgroup_id", sort_cgroup_id),
+	DIM(SORT_SYM_IPC_NULL, "ipc_null", sort_sym_ipc_null),
 };
 
 #undef DIM
@@ -1591,6 +1651,7 @@ static struct sort_dimension bstack_sort_dimensions[] = {
 	DIM(SORT_CYCLES, "cycles", sort_cycles),
 	DIM(SORT_SRCLINE_FROM, "srcline_from", sort_srcline_from),
 	DIM(SORT_SRCLINE_TO, "srcline_to", sort_srcline_to),
+	DIM(SORT_SYM_IPC, "ipc_lbr", sort_sym_ipc),
 };
 
 #undef DIM
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index a97cf8e..130fe37 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -229,6 +229,7 @@ enum sort_type {
 	SORT_SYM_SIZE,
 	SORT_DSO_SIZE,
 	SORT_CGROUP_ID,
+	SORT_SYM_IPC_NULL,
 
 	/* branch stack specific sort keys */
 	__SORT_BRANCH_STACK,
@@ -242,6 +243,7 @@ enum sort_type {
 	SORT_CYCLES,
 	SORT_SRCLINE_FROM,
 	SORT_SRCLINE_TO,
+	SORT_SYM_IPC,
 
 	/* memory mode specific sort keys */
 	__SORT_MEMORY_MODE,
-- 
2.7.4

