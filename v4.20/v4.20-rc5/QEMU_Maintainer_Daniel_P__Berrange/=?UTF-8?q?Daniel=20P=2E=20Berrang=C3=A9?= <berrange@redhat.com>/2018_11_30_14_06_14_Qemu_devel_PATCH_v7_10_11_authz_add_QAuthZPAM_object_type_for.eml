Return-Path: <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 02 Dec 2018 19:18:44 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga005.jf.intel.com (orsmga005.jf.intel.com [10.7.209.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id AEB11580224
	for <like.xu@linux.intel.com>; Fri, 30 Nov 2018 06:18:51 -0800 (PST)
Received: from fmsmga101.fm.intel.com ([10.1.193.65])
  by orsmga005-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 30 Nov 2018 06:18:51 -0800
IronPort-PHdr: =?us-ascii?q?9a23=3AfoCpmx1lT5KW47ZSsmDT+DRfVm0co7zxezQtwd8Z?=
 =?us-ascii?q?sesWLf7xwZ3uMQTl6Ol3ixeRBMOHs6IC07KempujcFRI2YyGvnEGfc4EfD4+ou?=
 =?us-ascii?q?JSoTYdBtWYA1bwNv/gYn9yNs1DUFh44yPzahANS47xaFLIv3K98yMZFAnhOgpp?=
 =?us-ascii?q?POT1HZPZg9iq2+yo9JDffwZFiCChbb9uMR67sRjfus4KjIV4N60/0AHJonxGe+?=
 =?us-ascii?q?RXwWNnO1eelAvi68mz4ZBu7T1et+ou+MBcX6r6eb84TaFDAzQ9L281/szrugLd?=
 =?us-ascii?q?QgaJ+3ART38ZkhtMAwjC8RH6QpL8uTb0u+ZhxCWXO9D9QKsqUjq+8ahkVB7oiD?=
 =?us-ascii?q?8GNzEn9mHXltdwh79frB64uhBz35LYbISTOfFjfK3SYMkaSHJBUMhPWSJPAYGz?=
 =?us-ascii?q?b4UAAOQOIOhYt4vwqVkBoBejCwSgGP3gyiRTi3PqxK03yfgtHR3a0AEiGd8FrX?=
 =?us-ascii?q?TarM/yNKcXSe27wrPHzTPCb/xI3Tf29ZLGfgo8qvyRQ71wa9DRxlMpFwPKlFKb?=
 =?us-ascii?q?tIvoMCiL2eQXqWiU9exgVe2xhGM8sQF+vCWgxsc2hYnVnI4a1lfE9SBgzYszON?=
 =?us-ascii?q?a2Rkl7Ydu+H5tRsSGXL5B5Td04Q2Fyoik6zLIGtoChcCcWz5QnwgbTZOCZfIiS?=
 =?us-ascii?q?/hLvTvqeLi1khH59Zr2+iAy98U24yu34SMa4ykpFri1AktXUuXAN0QHT5tKASv?=
 =?us-ascii?q?tn8Ues3yuE2QPL6uxcP0w4ianWJ4Q8zrItlZcfq1rPEyH2lUnskaObdF0o9va0?=
 =?us-ascii?q?5+njeLnqu5GRO5Fuhg3jMakjlNazDfo7PwUIQmOV4/6z1Kf58k38WLhKjuM5kq?=
 =?us-ascii?q?3esJ3CIcQbp7W5AxNO0oo55Ba/CSqm3M4fnXkdI1JJYBOHj473NFHSOP30E+uz?=
 =?us-ascii?q?jle2nDt22vzLPaftDovDI3XDirvtYLRw51ZZyAUpzNBf45xUCqsGIPL2QkLxrc?=
 =?us-ascii?q?LXDhokMwCt3unoFst92Z0aWW6WGaCZN77SsVmU6e0xOOmAY4sVuDf+K/c7/fLv?=
 =?us-ascii?q?gmI5lEcZfamo25sXdX+5Eu5nI0WffXrjnNMBHX0WsQo5Seznk1uCUTlVZ3a9Wa?=
 =?us-ascii?q?I8+ys3CIW8DYfMXoytmqCO3D+nHp1KYWBLElSMEXbrd4qaQfsNZz+SL9RlkjwF?=
 =?us-ascii?q?U7ihVoAg2QuvtA/817poMO7U9jcEupLk0dgmr9DVjgw4oDxoE9yGgSbKS2Bvgn?=
 =?us-ascii?q?hOQTgw06Zi50tnxRCG2Kl8hvVeUttL+/JOVBx9LJPZ0ql2Bs7/XlH8eMyUQgOj?=
 =?us-ascii?q?S9SiHTZjV9803poCblhwH5C4gwne0jG2K7kSkbONGdoz6K2LxGX7Jct21yPb0r?=
 =?us-ascii?q?I8hUItWMpFOD6agftm+g3OQoLEjUidv6Ctc6sawWjK7mjQ43CJuRR0WQhxXKGN?=
 =?us-ascii?q?ZTZXTEbMt93/6cKKG7WjE64uNARM4dSPJqtDdpviilAQF6SrA8jXf2/kwzT4Ph?=
 =?us-ascii?q?2P3L7ZKdOyI2g=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AUAACDRgFchxHrdtBbCRwBAQEEAQEHB?=
 =?us-ascii?q?AEBgVEHAQELAYEwgTmBKYwRX4spgg2XSBSBWxgYBw2BS4YrIjQJDQEDAQEBAQE?=
 =?us-ascii?q?BAgETAQEBCgsJCBsOIwyCNgUCAxoBBoJcAwMBAiQfCikDAwECBgEBHxgRCAMBU?=
 =?us-ascii?q?xkFBIMYAYIBAQSnKjODQYF/g2CBDYgxg2kRBoF/gRGGJYEpChEHDVWFHAKJGAO?=
 =?us-ascii?q?GD4FMjnlGBwKGQD+KLQsYgiiHMYdGkDSIKYFGgg1wFTuCbAmCHhcSiEyBXYNiQ?=
 =?us-ascii?q?TGBBxyKYispgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0AUAACDRgFchxHrdtBbCRwBAQEEAQEHBAEBgVEHAQELAYE?=
 =?us-ascii?q?wgTmBKYwRX4spgg2XSBSBWxgYBw2BS4YrIjQJDQEDAQEBAQEBAgETAQEBCgsJC?=
 =?us-ascii?q?BsOIwyCNgUCAxoBBoJcAwMBAiQfCikDAwECBgEBHxgRCAMBUxkFBIMYAYIBAQS?=
 =?us-ascii?q?nKjODQYF/g2CBDYgxg2kRBoF/gRGGJYEpChEHDVWFHAKJGAOGD4FMjnlGBwKGQ?=
 =?us-ascii?q?D+KLQsYgiiHMYdGkDSIKYFGgg1wFTuCbAmCHhcSiEyBXYNiQTGBBxyKYispgXc?=
 =?us-ascii?q?BAQ?=
X-IronPort-AV: E=Sophos;i="5.56,298,1539673200"; 
   d="scan'208";a="64751289"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from lists.gnu.org ([208.118.235.17])
  by mga01b.intel.com with ESMTP/TLS/AES256-SHA; 30 Nov 2018 06:18:43 -0800
Received: from localhost ([::1]:60372 helo=lists.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>)
	id 1gSjcw-00015x-SQ
	for like.xu@linux.intel.com; Fri, 30 Nov 2018 09:18:42 -0500
Received: from eggs.gnu.org ([2001:4830:134:3::10]:49957)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <berrange@redhat.com>) id 1gSjS7-0005cs-CN
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 09:07:33 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <berrange@redhat.com>) id 1gSjRz-0005mv-9g
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 09:07:31 -0500
Received: from mx1.redhat.com ([209.132.183.28]:55693)
	by eggs.gnu.org with esmtps (TLS1.0:DHE_RSA_AES_256_CBC_SHA1:32)
	(Exim 4.71) (envelope-from <berrange@redhat.com>) id 1gSjRy-0005lM-QF
	for qemu-devel@nongnu.org; Fri, 30 Nov 2018 09:07:23 -0500
Received: from smtp.corp.redhat.com (int-mx02.intmail.prod.int.phx2.redhat.com
	[10.5.11.12])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 124FE307D846
	for <qemu-devel@nongnu.org>; Fri, 30 Nov 2018 14:07:22 +0000 (UTC)
Received: from localhost.localdomain.com (unknown [10.42.22.189])
	by smtp.corp.redhat.com (Postfix) with ESMTP id C1D5B60C61;
	Fri, 30 Nov 2018 14:07:08 +0000 (UTC)
From: =?UTF-8?q?Daniel=20P=2E=20Berrang=C3=A9?= <berrange@redhat.com>
To: qemu-devel@nongnu.org
Date: Fri, 30 Nov 2018 14:06:14 +0000
Message-Id: <20181130140615.19937-11-berrange@redhat.com>
In-Reply-To: <20181130140615.19937-1-berrange@redhat.com>
References: <20181130140615.19937-1-berrange@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.12
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.48]);
	Fri, 30 Nov 2018 14:07:22 +0000 (UTC)
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: GNU/Linux 2.2.x-3.x [generic]
	[fuzzy]
X-Received-From: 209.132.183.28
Subject: [Qemu-devel] [PATCH v7 10/11] authz: add QAuthZPAM object type for
 authorizing using PAM
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.21
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/qemu-devel/>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
	<mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Cc: Markus Armbruster <armbru@redhat.com>, Gerd Hoffmann <kraxel@redhat.com>,
	=?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@redhat.com>,
	=?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <philmd@redhat.com>
Errors-To: qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org
Sender: "Qemu-devel" <qemu-devel-bounces+like.xu=linux.intel.com@nongnu.org>

From: "Daniel P. Berrange" <berrange@redhat.com>

Add an authorization backend that talks to PAM to check whether the user
identity is allowed. This only uses the PAM account validation facility,
which is essentially just a check to see if the provided username is perm=
itted
access. It doesn't use the authentication or session parts of PAM, since
that's dealt with by the relevant part of QEMU (eg VNC server).

Consider starting QEMU with a VNC server and telling it to use TLS with
x509 client certificates and configuring it to use an PAM to validate
the x509 distinguished name. In this example we're telling it to use PAM
for the QAuthZ impl with a service name of "qemu-vnc"

 $ qemu-system-x86_64 \
     -object tls-creds-x509,id=3Dtls0,dir=3D/home/berrange/security/qemut=
ls,\
             endpoint=3Dserver,verify-peer=3Dyes \
     -object authz-pam,id=3Dauthz0,service=3Dqemu-vnc \
     -vnc :1,tls-creds=3Dtls0,tls-authz=3Dauthz0

This requires an /etc/pam/qemu-vnc file to be created with the auth
rules. A very simple file based whitelist can be setup using

  $ cat > /etc/pam/qemu-vnc <<EOF
  account         requisite       pam_listfile.so item=3Duser sense=3Dall=
ow file=3D/etc/qemu/vnc.allow
  EOF

The /etc/qemu/vnc.allow file simply contains one username per line. Any
username not in the file is denied. The usernames in this example are
the x509 distinguished name from the client's x509 cert.

  $ cat > /etc/qemu/vnc.allow <<EOF
  CN=3Dlaptop.berrange.com,O=3DBerrange Home,L=3DLondon,ST=3DLondon,C=3DG=
B
  EOF

More interesting would be to configure PAM to use an LDAP backend, so
that the QEMU authorization check data can be centralized instead of
requiring each compute host to have file maintained.

The main limitation with this PAM module is that the rules apply to all
QEMU instances on the host. Setting up different rules per VM, would
require creating a separate PAM service name & config file for every
guest. An alternative approach for the future might be to not pass in
the plain username to PAM, but instead combine the VM name or UUID with
the username. This requires further consideration though.

Signed-off-by: Daniel P. Berrange <berrange@redhat.com>
---
 authz/Makefile.objs     |   3 +
 authz/pamacct.c         | 149 ++++++++++++++++++++++++++++++++++++++++
 authz/trace-events      |   3 +
 configure               |  37 ++++++++++
 include/authz/pamacct.h | 100 +++++++++++++++++++++++++++
 qemu-options.hx         |  35 ++++++++++
 tests/Makefile.include  |   2 +
 tests/test-authz-pam.c  | 124 +++++++++++++++++++++++++++++++++
 8 files changed, 453 insertions(+)
 create mode 100644 authz/pamacct.c
 create mode 100644 include/authz/pamacct.h
 create mode 100644 tests/test-authz-pam.c

diff --git a/authz/Makefile.objs b/authz/Makefile.objs
index 8351bf181d..ed7b273596 100644
--- a/authz/Makefile.objs
+++ b/authz/Makefile.objs
@@ -2,3 +2,6 @@ authz-obj-y +=3D base.o
 authz-obj-y +=3D simple.o
 authz-obj-y +=3D list.o
 authz-obj-y +=3D listfile.o
+authz-obj-$(CONFIG_AUTH_PAM) +=3D pamacct.o
+
+pamacct.o-libs =3D -lpam
diff --git a/authz/pamacct.c b/authz/pamacct.c
new file mode 100644
index 0000000000..8fe4c8ee11
--- /dev/null
+++ b/authz/pamacct.c
@@ -0,0 +1,149 @@
+/*
+ * QEMU PAM authorization driver
+ *
+ * Copyright (c) 2018 Red Hat, Inc.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/lice=
nses/>.
+ *
+ */
+
+#include "qemu/osdep.h"
+#include "authz/pamacct.h"
+#include "authz/trace.h"
+#include "qom/object_interfaces.h"
+
+#include <security/pam_appl.h>
+
+
+static bool qauthz_pam_is_allowed(QAuthZ *authz,
+                                  const char *identity,
+                                  Error **errp)
+{
+    QAuthZPAM *pauthz =3D QAUTHZ_PAM(authz);
+    const struct pam_conv pam_conversation =3D { 0 };
+    pam_handle_t *pamh =3D NULL;
+    int ret;
+
+    trace_qauthz_pam_check(authz, identity, pauthz->service);
+    ret =3D pam_start(pauthz->service,
+                    identity,
+                    &pam_conversation,
+                    &pamh);
+    if (ret !=3D PAM_SUCCESS) {
+        error_setg(errp, "Unable to start PAM transaction: %s",
+                   pam_strerror(NULL, ret));
+        return false;
+    }
+
+    ret =3D pam_acct_mgmt(pamh, PAM_SILENT);
+    if (ret !=3D PAM_SUCCESS) {
+        error_setg(errp, "Unable to authorize user '%s': %s",
+                   identity, pam_strerror(pamh, ret));
+        goto cleanup;
+    }
+
+ cleanup:
+    pam_end(pamh, ret);
+    return ret =3D=3D PAM_SUCCESS;
+}
+
+
+static void
+qauthz_pam_prop_set_service(Object *obj,
+                            const char *service,
+                            Error **errp G_GNUC_UNUSED)
+{
+    QAuthZPAM *pauthz =3D QAUTHZ_PAM(obj);
+
+    g_free(pauthz->service);
+    pauthz->service =3D g_strdup(service);
+}
+
+
+static char *
+qauthz_pam_prop_get_service(Object *obj,
+                            Error **errp G_GNUC_UNUSED)
+{
+    QAuthZPAM *pauthz =3D QAUTHZ_PAM(obj);
+
+    return g_strdup(pauthz->service);
+}
+
+
+static void
+qauthz_pam_complete(UserCreatable *uc, Error **errp)
+{
+}
+
+
+static void
+qauthz_pam_finalize(Object *obj)
+{
+    QAuthZPAM *pauthz =3D QAUTHZ_PAM(obj);
+
+    g_free(pauthz->service);
+}
+
+
+static void
+qauthz_pam_class_init(ObjectClass *oc, void *data)
+{
+    UserCreatableClass *ucc =3D USER_CREATABLE_CLASS(oc);
+    QAuthZClass *authz =3D QAUTHZ_CLASS(oc);
+
+    ucc->complete =3D qauthz_pam_complete;
+    authz->is_allowed =3D qauthz_pam_is_allowed;
+
+    object_class_property_add_str(oc, "service",
+                                  qauthz_pam_prop_get_service,
+                                  qauthz_pam_prop_set_service,
+                                  NULL);
+}
+
+
+QAuthZPAM *qauthz_pam_new(const char *id,
+                          const char *service,
+                          Error **errp)
+{
+    return QAUTHZ_PAM(
+        object_new_with_props(TYPE_QAUTHZ_PAM,
+                              object_get_objects_root(),
+                              id, errp,
+                              "service", service,
+                              NULL));
+}
+
+
+static const TypeInfo qauthz_pam_info =3D {
+    .parent =3D TYPE_QAUTHZ,
+    .name =3D TYPE_QAUTHZ_PAM,
+    .instance_size =3D sizeof(QAuthZPAM),
+    .instance_finalize =3D qauthz_pam_finalize,
+    .class_size =3D sizeof(QAuthZPAMClass),
+    .class_init =3D qauthz_pam_class_init,
+    .interfaces =3D (InterfaceInfo[]) {
+        { TYPE_USER_CREATABLE },
+        { }
+    }
+};
+
+
+static void
+qauthz_pam_register_types(void)
+{
+    type_register_static(&qauthz_pam_info);
+}
+
+
+type_init(qauthz_pam_register_types);
diff --git a/authz/trace-events b/authz/trace-events
index fb65349a90..72c411927d 100644
--- a/authz/trace-events
+++ b/authz/trace-events
@@ -13,3 +13,6 @@ qauthz_list_default_policy(void *authz, const char *ide=
ntity, int policy) "AuthZ
 # auth/listfile.c
 qauthz_list_file_load(void *authz, const char *filename) "AuthZ file %p =
load filename=3D%s"
 qauthz_list_file_refresh(void *authz, const char *filename, int success)=
 "AuthZ file %p load filename=3D%s success=3D%d"
+
+# auth/pam.c
+qauthz_pam_check(void *authz, const char *identity, const char *service)=
 "AuthZ PAM %p identity=3D%s service=3D%s"
diff --git a/configure b/configure
index 0a3c6a72c3..e1b1730679 100755
--- a/configure
+++ b/configure
@@ -460,6 +460,7 @@ gnutls=3D""
 nettle=3D""
 gcrypt=3D""
 gcrypt_hmac=3D"no"
+auth_pam=3D""
 vte=3D""
 virglrenderer=3D""
 tpm=3D"yes"
@@ -1373,6 +1374,10 @@ for opt do
   ;;
   --enable-gcrypt) gcrypt=3D"yes"
   ;;
+  --disable-auth-pam) auth_pam=3D"no"
+  ;;
+  --enable-auth-pam) auth_pam=3D"yes"
+  ;;
   --enable-rdma) rdma=3D"yes"
   ;;
   --disable-rdma) rdma=3D"no"
@@ -1701,6 +1706,7 @@ disabled with --disable-FEATURE, default is enabled=
 if available:
   gnutls          GNUTLS cryptography support
   nettle          nettle cryptography support
   gcrypt          libgcrypt cryptography support
+  auth-pam        PAM access control
   sdl             SDL UI
   --with-sdlabi     select preferred SDL ABI 1.2 or 2.0
   gtk             gtk UI
@@ -2851,6 +2857,33 @@ else
 fi
=20
=20
+##########################################
+# PAM probe
+
+if test "x$auth_pam" !=3D "no"; then
+    cat > $TMPC <<EOF
+#include <security/pam_appl.h>
+#include <stdio.h>
+int main(void) {
+   const char *service_name =3D "qemu";
+   const char *user =3D "frank";
+   const struct pam_conv *pam_conv =3D NULL;
+   pam_handle_t *pamh =3D NULL;
+   pam_start(service_name, user, pam_conv, &pamh);
+   return 0;
+}
+EOF
+    if compile_prog "" "-lpam" ; then
+	auth_pam=3Dyes
+    else
+	if test "$auth_pam" =3D "yes"; then
+	    feature_not_found "PAM" "Install PAM development package"
+	else
+	    auth_pam=3Dno
+	fi
+    fi
+fi
+
 ##########################################
 # getifaddrs (for tests/test-io-channel-socket )
=20
@@ -5997,6 +6030,7 @@ echo "GNUTLS support    $gnutls"
 echo "libgcrypt         $gcrypt"
 echo "nettle            $nettle $(echo_version $nettle $nettle_version)"
 echo "libtasn1          $tasn1"
+echo "PAM               $auth_pam"
 echo "curses support    $curses"
 echo "virgl support     $virglrenderer $(echo_version $virglrenderer $vi=
rgl_version)"
 echo "curl support      $curl"
@@ -6457,6 +6491,9 @@ fi
 if test "$tasn1" =3D "yes" ; then
   echo "CONFIG_TASN1=3Dy" >> $config_host_mak
 fi
+if test "$auth_pam" =3D "yes" ; then
+    echo "CONFIG_AUTH_PAM=3Dy" >> $config_host_mak
+fi
 if test "$have_ifaddrs_h" =3D "yes" ; then
     echo "HAVE_IFADDRS_H=3Dy" >> $config_host_mak
 fi
diff --git a/include/authz/pamacct.h b/include/authz/pamacct.h
new file mode 100644
index 0000000000..6e3046e528
--- /dev/null
+++ b/include/authz/pamacct.h
@@ -0,0 +1,100 @@
+/*
+ * QEMU PAM authorization driver
+ *
+ * Copyright (c) 2018 Red Hat, Inc.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/lice=
nses/>.
+ *
+ */
+
+#ifndef QAUTHZ_PAM_H__
+#define QAUTHZ_PAM_H__
+
+#include "authz/base.h"
+
+
+#define TYPE_QAUTHZ_PAM "authz-pam"
+
+#define QAUTHZ_PAM_CLASS(klass) \
+     OBJECT_CLASS_CHECK(QAuthZPAMClass, (klass), \
+                        TYPE_QAUTHZ_PAM)
+#define QAUTHZ_PAM_GET_CLASS(obj) \
+     OBJECT_GET_CLASS(QAuthZPAMClass, (obj), \
+                      TYPE_QAUTHZ_PAM)
+#define QAUTHZ_PAM(obj) \
+     INTERFACE_CHECK(QAuthZPAM, (obj), \
+                     TYPE_QAUTHZ_PAM)
+
+typedef struct QAuthZPAM QAuthZPAM;
+typedef struct QAuthZPAMClass QAuthZPAMClass;
+
+
+/**
+ * QAuthZPAM:
+ *
+ * This authorization driver provides a PAM mechanism
+ * for granting access by matching user names against a
+ * list of globs. Each match rule has an associated policy
+ * and a catch all policy applies if no rule matches
+ *
+ * To create an instance of this class via QMP:
+ *
+ *  {
+ *    "execute": "object-add",
+ *    "arguments": {
+ *      "qom-type": "authz-pam",
+ *      "id": "authz0",
+ *      "parameters": {
+ *        "service": "qemu-vnc-tls"
+ *      }
+ *    }
+ *  }
+ *
+ * The driver only uses the PAM "account" verification
+ * subsystem. The above config would require a config
+ * file /etc/pam.d/qemu-vnc-tls. For a simple file
+ * lookup it would contain
+ *
+ *   account requisite  pam_listfile.so item=3Duser sense=3Dallow \
+ *           file=3D/etc/qemu/vnc.allow
+ *
+ * The external file would then contain a list of usernames.
+ * If x509 cert was being used as the username, a suitable
+ * entry would match the distinguish name:
+ *
+ *  CN=3Dlaptop.berrange.com,O=3DBerrange Home,L=3DLondon,ST=3DLondon,C=3D=
GB
+ *
+ * On the command line it can be created using
+ *
+ *   -object authz-pam,id=3Dauthz0,service=3Dqemu-vnc-tls
+ *
+ */
+struct QAuthZPAM {
+    QAuthZ parent_obj;
+
+    char *service;
+};
+
+
+struct QAuthZPAMClass {
+    QAuthZClass parent_class;
+};
+
+
+QAuthZPAM *qauthz_pam_new(const char *id,
+                          const char *service,
+                          Error **errp);
+
+
+#endif /* QAUTHZ_PAM_H__ */
diff --git a/qemu-options.hx b/qemu-options.hx
index afc90dec2c..32d94ca960 100644
--- a/qemu-options.hx
+++ b/qemu-options.hx
@@ -4473,6 +4473,41 @@ would look like:
      ...
 @end example
=20
+@item -object authz-pam,id=3D@var{id},service=3D@var{string}
+
+Create an authorization object that will control access to network servi=
ces.
+
+The @option{service} parameter provides the name of a PAM service to use
+for authorization. It requires that a file @code{/etc/pam.d/@var{service=
}}
+exist to provide the configuration for the @code{account} subsystem.
+
+An example authorization object to validate a TLS x509 distinguished
+name would look like:
+
+@example
+ # $QEMU \
+     ...
+     -object authz-pam,id=3Dauth0,service=3Dqemu-vnc
+     ...
+@end example
+
+There would then be a corresponding config file for PAM at
+@code{/etc/pam.d/qemu-vnc} that contains:
+
+@example
+account requisite  pam_listfile.so item=3Duser sense=3Dallow \
+           file=3D/etc/qemu/vnc.allow
+@end example
+
+Finally the @code{/etc/qemu/vnc.allow} file would contain
+the list of x509 distingished names that are permitted
+access
+
+@example
+CN=3Dlaptop.example.com,O=3DExample Home,L=3DLondon,ST=3DLondon,C=3DGB
+@end example
+
+
 @end table
=20
 ETEXI
diff --git a/tests/Makefile.include b/tests/Makefile.include
index a3f9134e85..3ff42db3a2 100644
--- a/tests/Makefile.include
+++ b/tests/Makefile.include
@@ -115,6 +115,7 @@ check-unit-y +=3D tests/test-util-sockets$(EXESUF)
 check-unit-y +=3D tests/test-authz-simple$(EXESUF)
 check-unit-y +=3D tests/test-authz-list$(EXESUF)
 check-unit-y +=3D tests/test-authz-listfile$(EXESUF)
+check-unit-$(CONFIG_AUTH_PAM) +=3D tests/test-authz-pam$(EXESUF)
 check-unit-y +=3D tests/test-io-task$(EXESUF)
 check-unit-y +=3D tests/test-io-channel-socket$(EXESUF)
 check-unit-y +=3D tests/test-io-channel-file$(EXESUF)
@@ -648,6 +649,7 @@ tests/test-util-sockets$(EXESUF): tests/test-util-soc=
kets.o \
 tests/test-authz-simple$(EXESUF): tests/test-authz-simple.o $(test-authz=
-obj-y)
 tests/test-authz-list$(EXESUF): tests/test-authz-list.o $(test-authz-obj=
-y)
 tests/test-authz-listfile$(EXESUF): tests/test-authz-listfile.o $(test-a=
uthz-obj-y)
+tests/test-authz-pam$(EXESUF): tests/test-authz-pam.o $(test-authz-obj-y=
)
 tests/test-io-task$(EXESUF): tests/test-io-task.o $(test-io-obj-y)
 tests/test-io-channel-socket$(EXESUF): tests/test-io-channel-socket.o \
         tests/io-channel-helpers.o tests/socket-helpers.o $(test-io-obj-=
y)
diff --git a/tests/test-authz-pam.c b/tests/test-authz-pam.c
new file mode 100644
index 0000000000..93d5ac8bbf
--- /dev/null
+++ b/tests/test-authz-pam.c
@@ -0,0 +1,124 @@
+/*
+ * QEMU PAM authorization object tests
+ *
+ * Copyright (c) 2018 Red Hat, Inc.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, see <http://www.gnu.org/lice=
nses/>.
+ *
+ */
+
+#include "qemu/osdep.h"
+#include "qapi/error.h"
+#include "authz/pamacct.h"
+
+#include <security/pam_appl.h>
+
+static bool failauth;
+
+/*
+ * These two functions are exported by libpam.so.
+ *
+ * By defining them again here, our impls are resolved
+ * by the linker instead of those in libpam.so
+ *
+ * The test suite is thus isolated from the host system
+ * PAM setup, so we can do predictable test scenarios
+ */
+int
+pam_start(const char *service_name, const char *user,
+          const struct pam_conv *pam_conversation,
+          pam_handle_t **pamh)
+{
+    failauth =3D true;
+    if (!g_str_equal(service_name, "qemu-vnc")) {
+        return PAM_AUTH_ERR;
+    }
+
+    if (g_str_equal(user, "fred")) {
+        failauth =3D false;
+    }
+
+    return PAM_SUCCESS;
+}
+
+
+int
+pam_acct_mgmt(pam_handle_t *pamh, int flags)
+{
+    if (failauth) {
+        return PAM_AUTH_ERR;
+    }
+
+    return PAM_SUCCESS;
+}
+
+
+static void test_authz_unknown_service(void)
+{
+    Error *local_err =3D NULL;
+    QAuthZPAM *auth =3D qauthz_pam_new("auth0",
+                                     "qemu-does-not-exist",
+                                     &error_abort);
+
+    g_assert_nonnull(auth);
+
+    g_assert_false(qauthz_is_allowed(QAUTHZ(auth), "fred", &local_err));
+
+    error_free_or_abort(&local_err);
+    object_unparent(OBJECT(auth));
+}
+
+
+static void test_authz_good_user(void)
+{
+    QAuthZPAM *auth =3D qauthz_pam_new("auth0",
+                                     "qemu-vnc",
+                                     &error_abort);
+
+    g_assert_nonnull(auth);
+
+    g_assert_true(qauthz_is_allowed(QAUTHZ(auth), "fred", &error_abort))=
;
+
+    object_unparent(OBJECT(auth));
+}
+
+
+static void test_authz_bad_user(void)
+{
+    Error *local_err =3D NULL;
+    QAuthZPAM *auth =3D qauthz_pam_new("auth0",
+                                     "qemu-vnc",
+                                     &error_abort);
+
+    g_assert_nonnull(auth);
+
+    g_assert_false(qauthz_is_allowed(QAUTHZ(auth), "bob", &local_err));
+
+    error_free_or_abort(&local_err);
+    object_unparent(OBJECT(auth));
+}
+
+
+int main(int argc, char **argv)
+{
+    g_test_init(&argc, &argv, NULL);
+
+    module_call_init(MODULE_INIT_QOM);
+
+    g_test_add_func("/auth/pam/unknown-service", test_authz_unknown_serv=
ice);
+    g_test_add_func("/auth/pam/good-user", test_authz_good_user);
+    g_test_add_func("/auth/pam/bad-user", test_authz_bad_user);
+
+    return g_test_run();
+}
--=20
2.19.2


