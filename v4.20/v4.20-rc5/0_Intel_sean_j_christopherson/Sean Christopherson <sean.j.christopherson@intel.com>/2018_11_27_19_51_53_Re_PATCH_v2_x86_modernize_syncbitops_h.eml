Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 28 Nov 2018 08:49:16 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from fmsmga004.fm.intel.com (fmsmga004.fm.intel.com [10.253.24.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 1E86B580322;
	Tue, 27 Nov 2018 11:52:00 -0800 (PST)
Received: from fmsmga102.fm.intel.com ([10.1.193.69])
  by fmsmga004-1.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 11:52:00 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3Aw0J2sxbaAyPXiF998xtjxAH/LSx+4OfEezUN459i?=
 =?us-ascii?q?sYplN5qZpcm7YR7h7PlgxGXEQZ/co6odzbaO4+a4ASQp2tWoiDg6aptCVhsI24?=
 =?us-ascii?q?09vjcLJ4q7M3D9N+PgdCcgHc5PBxdP9nC/NlVJSo6lPwWB6nK94iQPFRrhKAF7?=
 =?us-ascii?q?Ovr6GpLIj8Swyuu+54Dfbx9HiTahYr5+Ngm6oRnMvcQKnIVuLbo8xAHUqXVSYe?=
 =?us-ascii?q?RWwm1oJVOXnxni48q74YBu/SdNtf8/7sBMSar1cbg2QrxeFzQmLns65Nb3uhnZ?=
 =?us-ascii?q?TAuA/WUTX2MLmRdVGQfF7RX6XpDssivms+d2xSeXMdHqQb0yRD+v9LlgRgP2hy?=
 =?us-ascii?q?gbNj456GDXhdJ2jKJHuxKquhhzz5fJbI2JKPZye6XQds4YS2VcRMZcTyJPDIOi?=
 =?us-ascii?q?YYUSDOQBM+lXoJXgqFUBrxSxCxKsBPvtxzJTmn/73rc33/g9HQzc3gEtGc8Fvn?=
 =?us-ascii?q?TOrNXyMacfSf27w7fSwjXFcvhbxzf96JLJchA6vfGMWqpwccrPxkk1DAPFiVOQ?=
 =?us-ascii?q?opHiMjOOyOsCqW6b4/BiVe61l2Enqxtxojm0xscwjYnJnoIVxU7e9SVix4Y1I8?=
 =?us-ascii?q?a1SE99Yd64DpRQszuWOJdxQsMnWmxlvjsxxL4euZOjYiQG1JAqywTCZ/GJbYSE?=
 =?us-ascii?q?+A/vWeWNLTtihX9oeqqziwu2/ES+0OHxVsm53ExKoyZbiNXBtXMA2hrO4cadUP?=
 =?us-ascii?q?R95F2u2TOX2gDT9O5EJUc0mLLFK54u3LEwjIAfsUfdES/snkX5kquWel8j+uiy?=
 =?us-ascii?q?5OTrerTmppmCOI9okgzyLLgil8ilDeglPAUCQXKX9fm/2bH/50H0QbdHguUzkq?=
 =?us-ascii?q?bDsZDaIcobprS+Aw9Qyosj7xe/DzG70NUXhHUHL0xKeAiBj4f3P1HCOff4DPm5?=
 =?us-ascii?q?g1uyijdm3O7GPrL/DZXXNHTDk6nufax760FCzAo/19df54hbCr0ZOvL8RlfxtM?=
 =?us-ascii?q?DEDh8+KwG0x+fnCNZj2Y8EVmOPH7SUMKfTsV+O++IuLPOAZI4TuDbhNfcl4+Ti?=
 =?us-ascii?q?gmM+mV8YZaOpx4cYaGikHvR6JEWUeXrsjc0AEWcWpAU+S/bmiF2fUTFJYXayUL?=
 =?us-ascii?q?kx5jU6CIKgEIfCSZqhgL2H3CenAJJWYnpKBUyLEXftb4+EQesDaDqOIs99lTwJ?=
 =?us-ascii?q?TbqhS4g/2h20tw/6zLxnLuzT+iADsZLj1d515/DclB0o9Dx0Cdid3H+JT21ugm?=
 =?us-ascii?q?wIQDo21rhloUNh0leDzbR4g/tAGNNJ/PNJUgA6NZ3Gw+xgEd/yWBnMftOISFag?=
 =?us-ascii?q?X9WnDis9TtM3w98SfUl9H8+ugQzE3yqvG7UVjaCEBIQo8qLA2Hj8P8V9xGzA1K?=
 =?us-ascii?q?U7i1kmQ9FANWuphqNk8wjTBojJk1iWlqqwdKQc2jLN+3mHzWaUoE5YVwtwW73f?=
 =?us-ascii?q?XX8DfkvWscj55kTaQrCzE7snLBVOxdSCKqRQbN3plktJRPHkNNTaYGKxnmOwCA?=
 =?us-ascii?q?2MxrONaorqZmoc0D/cCEgCjwAc43KGORIiCSempmLUFCZuGk73Y0Pw7el+r2u2?=
 =?us-ascii?q?QVIuwAGUcUJtzbq19QQThfyHVfwT2KkJuCMgqzVyAVa80MjaC9uGpwp9YqpcZc?=
 =?us-ascii?q?kx70tA1WLcrwZ9JICvL7h+hl4CdAR6p1/u1xRyCoVHjcgqrHMrwBBuKa6C11NB?=
 =?us-ascii?q?bTeY3ZH2Or3YMWTy+BGva6jL2lDRytqW+6EP6OgmpFXnpg2mCk0i83B/2dlPz3?=
 =?us-ascii?q?Sc/onKDBYVUZ/pSEk38wZ1pr7EbSg9/Y/bzmBsPrSuvT/E2NIpA/Ulxw2kf9de?=
 =?us-ascii?q?NqOECQDzH9cbB8ioNOwlhVypYggYM+BV8a4+J9mmeOee2K63IOZgmyqrjGRa4I?=
 =?us-ascii?q?xnzk2A7St9Su7S0JYDzPGVxQ+HVzb6jFe8vcH7g4FEZTcOHmWhzSjoHpJeZqp3?=
 =?us-ascii?q?fYwTE2ehP9W3xslih57qQ3NY7l+jCE8c18+zZBWSaEbx3QtO2kQNoHyrgDe3wC?=
 =?us-ascii?q?Zwkz40sKWfxivOw+L5eRoDO25LQnRijFj2LYi1idAaQFanbwwzmBS54kb6wrBR?=
 =?us-ascii?q?pL5jIGnLXUdIYy/2InliU6uxrLaDY9RD6Ig1sSVRS+m8ZVGaSrjgoxoVyS/jHm?=
 =?us-ascii?q?1exCwleDGuoJn2gxt6iGeFJnZpsHXZYd1wxQvY5NHER/5exCAGRCp7iTnQHFS8?=
 =?us-ascii?q?JMOm/daXl5fCtOCxSWShW4ZXcSnqy4OAqSS66XdrAR25g/C8hNnnHRIm3i/80t?=
 =?us-ascii?q?lgTT/IowrkYon3y6S6Nvpqf0lyC1/78cZ6GIB+ko0riZEU2HgagIiV/HUdnWfy?=
 =?us-ascii?q?N9VbxbzxbH4XSTEXxN7V5RDv2Fd/IXKR24L5SnKdz9NiZ9agY2MawCI9791QB6?=
 =?us-ascii?q?eS47xJhi91olu+rQLMbvlxhDYdyf0y6HEEh+EFohYiziKYAroKB0lXITTslwiU?=
 =?us-ascii?q?79C5tKhXYWevcbuq20Zkk9GuEqqCoh1CV3bjYZgtAzVw7spkPVLI0X3z7Jzked?=
 =?us-ascii?q?bKYdISsB2UjwnPj+xPJJ0tkfoKgDJtOXjhsn091+47kRtu0ImmvIiALmVh5qO4?=
 =?us-ascii?q?DQReNj3ofMMT4TDtgL1ansaX2YCvA5pgFi8KXJvuUfKnDjYSue77OAaJFT02sm?=
 =?us-ascii?q?2bFqbHHQ+D9EdmqGrCHIuxOHGQIHkZ0M9uRB2AJEFEhAAUXTM6noM2Fwywxczh?=
 =?us-ascii?q?dlt56S4V5lLithRMzedoPQHlUmjDvAeodis0SJ+HIRpU9A5C4lnaMdeE4uJvBS?=
 =?us-ascii?q?1Y/YChrA+QKmydfQtIFnoEWkiFB1DlI7mv6sPM8+meBuqiMfTOZa+CpvBZV/eN?=
 =?us-ascii?q?3ZivyJdp/y6QNsWTOXlvF/062k1eXXBgBsTWgTMPRzYMlyLKac6bqwyx+il2rs?=
 =?us-ascii?q?C57fTqVxjj5YqJC7tOL9pv/wq6jruEN+6VnCx5MypX1osQxX/Uz7gSxF4ShD9v?=
 =?us-ascii?q?dzmuErQAtDTBTKHKmq9QAB4UdTlzNNZT768n2glNOMjbis7617Jij/41DUtFWk?=
 =?us-ascii?q?Llms2zecMKJGS9PkvdBEmXLLSGOSHLw8bvbKymVL1fl/9UuAOwuDqBF0/jPy+O?=
 =?us-ascii?q?lz3oVxCpLOFNgzuXPB1YuIGhbBltDXLvQ87hah2+KNV3lyE5waUohnPWMm4RKS?=
 =?us-ascii?q?R8c0JIrrGK8SxUmOlwG2xf4XpjNuSEnyeZ7+/FKpcZq/drAyJ0l/5E73Q+0bda?=
 =?us-ascii?q?8CZERPltkivIstFuu02mkvWIyjd/UBtBsDBLhIeKvUVkIarY95lAVmzC/BIC9m?=
 =?us-ascii?q?iQDxUKp914CtzgoaxQy97PlL7tJzdG6d7b4cwcB82HYP6AZVYoLxvlUBrdDQQF?=
 =?us-ascii?q?UXb/GWjBhkAbtPiT+X2JhrERl7zFstwlbZoNB3IvEfZPMUlsGpQpII12RS8jib?=
 =?us-ascii?q?6WltUP4zLqtxTYQoNY+JvHTPOJHfL3KDuDlr5CTxoO3b78a48UM9uoiARZdlBm?=
 =?us-ascii?q?kdGSSALrVtdXr3gkN1dsrQ=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAAAfn/1bh0O0hNFjGQEBAQEBAQEBA?=
 =?us-ascii?q?QEBAQcBAQEBAQGBUgMBAQEBAQsBgVqCESeDeYh3iygpgWQRA2iWRIFzFBgTAYR?=
 =?us-ascii?q?AAoMYIjUIDQEDAQEBAQEBAgETAQEBCA0JCCkvgjYkAYJhAQEBAQIBAQIgDwE/B?=
 =?us-ascii?q?wUBBgMBAQoRBAEBAQICBR4DAgIDDAUyCQ4TBYMcgXoIBaYSgS+KL4ELiwJ6gRy?=
 =?us-ascii?q?BEQGCXDWEO4NKMYImAok2gV+EC3ePdQcCiimGfAsYgVmFC4MkhwMsmAuBRwGCC?=
 =?us-ascii?q?3CDPIIkGn8BAY09HgEBMYEFAQGKSII+AQE?=
X-IPAS-Result: =?us-ascii?q?A0ADAAAfn/1bh0O0hNFjGQEBAQEBAQEBAQEBAQcBAQEBAQG?=
 =?us-ascii?q?BUgMBAQEBAQsBgVqCESeDeYh3iygpgWQRA2iWRIFzFBgTAYRAAoMYIjUIDQEDA?=
 =?us-ascii?q?QEBAQEBAgETAQEBCA0JCCkvgjYkAYJhAQEBAQIBAQIgDwE/BwUBBgMBAQoRBAE?=
 =?us-ascii?q?BAQICBR4DAgIDDAUyCQ4TBYMcgXoIBaYSgS+KL4ELiwJ6gRyBEQGCXDWEO4NKM?=
 =?us-ascii?q?YImAok2gV+EC3ePdQcCiimGfAsYgVmFC4MkhwMsmAuBRwGCC3CDPIIkGn8BAY0?=
 =?us-ascii?q?9HgEBMYEFAQGKSII+AQE?=
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="54560511"
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 27 Nov 2018 11:51:58 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726512AbeK1Gux (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Wed, 28 Nov 2018 01:50:53 -0500
Received: from mga01.intel.com ([192.55.52.88]:37211 "EHLO mga01.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725872AbeK1Gux (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 28 Nov 2018 01:50:53 -0500
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 27 Nov 2018 11:51:54 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.56,287,1539673200"; 
   d="scan'208";a="91395942"
Received: from sjchrist-coffee.jf.intel.com (HELO linux.intel.com) ([10.54.74.154])
  by fmsmga007.fm.intel.com with ESMTP; 27 Nov 2018 11:51:54 -0800
Date: Tue, 27 Nov 2018 11:51:53 -0800
From: Sean Christopherson <sean.j.christopherson@intel.com>
To: David Laight <David.Laight@ACULAB.COM>
Cc: 'Jan Beulich' <JBeulich@suse.com>, "mingo@elte.hu" <mingo@elte.hu>,
        "tglx@linutronix.de" <tglx@linutronix.de>,
        Boris Ostrovsky <boris.ostrovsky@oracle.com>,
        Juergen Gross <jgross@suse.com>,
        "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "hpa@zytor.com" <hpa@zytor.com>
Subject: Re: [PATCH v2] x86: modernize sync_bitops.h
Message-ID: <20181127195153.GE27075@linux.intel.com>
References: <5B30C2C302000078001CD6D1@prv1-mh.provo.novell.com>
 <5B30C2C302000000000FA99B@prv1-mh.provo.novell.com>
 <5B30C2C302000078001FE5A0@prv1-mh.provo.novell.com>
 <5BF52F4D02000078001FE5C1@prv1-mh.provo.novell.com>
 <92f590595593498eaa1f91a17875126f@AcuMS.aculab.com>
 <5BF5577202000078001FE7AC@prv1-mh.provo.novell.com>
 <47f7dfd9b32f4425ac8466c8b0065c6e@AcuMS.aculab.com>
 <5BF56EA502000078001FE90E@prv1-mh.provo.novell.com>
 <9dc88b57164e481184dfbb4b2079086e@AcuMS.aculab.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <9dc88b57164e481184dfbb4b2079086e@AcuMS.aculab.com>
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 21, 2018 at 03:53:05PM +0000, David Laight wrote:
> 
> 
> > -----Original Message-----
> > From: Jan Beulich [mailto:JBeulich@suse.com]
> > Sent: 21 November 2018 14:42
> > To: David Laight
> > Cc: mingo@elte.hu; tglx@linutronix.de; Boris Ostrovsky; Juergen Gross; linux-kernel@vger.kernel.org;
> > hpa@zytor.com
> > Subject: RE: [PATCH v2] x86: modernize sync_bitops.h
> > 
> > >>> On 21.11.18 at 14:49, <David.Laight@ACULAB.COM> wrote:
> > > From: Jan Beulich
> > >> Sent: 21 November 2018 13:03
> > >>
> > >> >>> On 21.11.18 at 12:55, <David.Laight@ACULAB.COM> wrote:
> > >> > From: Jan Beulich
> > >> >> Sent: 21 November 2018 10:11
> > >> >>
> > >> >> Add missing insn suffixes and use rmwcc.h just like was (more or less)
> > >> >> recently done for bitops.h as well.
> > >> >
> > >> > Why? bts (etc) on memory don't really have an 'operand size'.
> > >>
> > >> Of course they do - depending on operand size they operate on
> > >> 2-, 4-, or 8-byte quantities. When the second operand is a
> > >> register, the suffix is redundant (but doesn't hurt), but when
> > >> the second operand is an immediate, the assembler (in AT&T
> > >> syntax) has no way of knowing what operand size you mean.
> > >
> > > You need to RTFM.
> > 
> > Excuse me? How about you look at this table from the SDM
> > (format of course comes out better in the .pdf):
> > 
> > 0F AB /r BTS r/m16, r16 MR Valid Valid Store selected bit in CF flag and set.
> > 0F AB /r BTS r/m32, r32 MR Valid Valid Store selected bit in CF flag and set.
> > REX.W + 0F AB /r BTS r/m64, r64 MR Valid N.E. Store selected bit in CF flag and set.
> > 0F BA /5 ib BTS r/m16, imm8 MI Valid Valid Store selected bit in CF flag and set.
> > 0F BA /5 ib BTS r/m32, imm8 MI Valid Valid Store selected bit in CF flag and set.
> > REX.W + 0F BA /5 ib BTS r/m64, imm8 MI Valid N.E. Store selected bit in CF flag and set.
> > 
> > Please read manuals yourself before making such statements.
> > 
> > > Regardless of the 'operand size' the 'bit' instructions do a 32 bit aligned
> > > 32 bit wide read/modify/write cycle.
> > >
> > > The 'operand size' does affect whether the bit number (which is signed)
> > > comes from %cl (8 bits), %cx (16 bits), %rcx (32 bits) or (%ecx) 64 bits.
> > > But that is implicit in the register name used.
> > 
> > There is no form with %cl as operand. Instead there are forms with
> > an immediate operand.
> 
> See also section 3.1.1.9 (in the copy of 325462.pdf I have):
> (edited out references to the figures)
> 
> Bit(BitBase, BitOffset) — Returns the value of a bit within a bit string.
>    The bit string is a sequence of bits in memory or a register. Bits are
>    numbered from low-order to high-order within registers and within memory
>    bytes. If the BitBase is a register, the BitOffset can be in the range 0
>    to [15, 31, 63] depending on the mode and register size.
> 
>    If BitBase is a memory address, the BitOffset can range has different ranges
>    depending on the operand size (see Table 3-2).
> 
>    The addressed bit is numbered (Offset MOD 8) within the byte at address
>    (BitBase + (BitOffset DIV 8)) where DIV is signed division with rounding
>    towards negative infinity and MOD returns a positive number.
> 
> Table 3-2. Range of Bit Positions Specified by Bit Offset Operands
> Operand Size Immediate BitOffset   Register BitOffset
>     16             0 to 15         2**15 to 2**15 − 1
>     32             0 to 31         2**31 to 2**31 − 1
>     64             0 to 63         2**63 to 2**63 − 1
> 
> For Bit test it says:
> 
> When accessing a bit in memory, the processor may access 4 bytes starting from
> the memory address for a 32-bit operand size, using by the following relationship:
>     Effective Address + (4 ∗ (BitOffset DIV 32))
> Or, it may access 2 bytes starting from the memory address for a 16-bit operand, using this relationship:
>     Effective Address + (2 ∗ (BitOffset DIV 16))
> It may do so even when only a single byte needs to be accessed to reach the given bit.

This agrees with what Jan is saying, e.g. "4 bytes ... for a 32-bit op size"
and "2 bytes ... for a 16-bit op size".  For whatever reason the 64-bit op
size is omitted, but the normal behavior applies.

> 
> (That is the text I remember being in the old docs, but I don't think it
> used to refer to the address being aligned.
> My 8086, 286 and 386 books are all at home.)
> 
> The other instructions (eg btc) say:
> 
> If the bit base operand specifies a memory location, the operand represents the
> address of the byte in memory that contains the bit base (bit 0 of the specified byte)
> of the bit string. The range of the bit position that can be
> referenced by the offset operand depends on the operand size.
> 
> So the 'operand size' gives the size of the bit offset, not the size of
> the memory cycle.

No, it determines both.  Here's rough pseudocode for how the op size
affects what memory is read.  Note that there isn't alignment per se,
but rather the memory accessed is offset by a modulo calculation of
the bit number, i.e. by the bits "above" the op_size.  This doesn't
apply to the imm8 encoding because bits above the op_size are ignored.

	mem = decode_mem(op1);

	if (is_reg(op2)) {
		bit = read_reg(op2);

		/* sign-extend and align the offset */
		offset = sign_extend(bit, op_size);
		if (op_size == 2)
			offset &= ~0x1;
		else if (op_size == 4)
			offset &= ~0x3;
		else if (op_size == 8)
			offset &= ~0x7;

		/* memory displacement adjusted by offset */
		mem.displacement += offset;
	} else {
		bit = decode_imm(op2);
	}

	/* imm8 ignores bits above op_size, reg adjusts offset (above) */
	if (op_size == 2)
		bit &= 0xf;
	else if (op_size == 4)
		bit &= 0x1f;
	else if (op_size == 8)
		bit &= 0x3f;

	tmp = read_mem(mem, op_size);
	tmp = bit_op(tmp, bit);
	write_mem(mem, op_size);

> Maybe I'll run some instructions against a PCIe slave and monitor the TLPs.
> 
> 	David
> 
> -
> Registered Address Lakeside, Bramley Road, Mount Farm, Milton Keynes, MK1 1PT, UK
> Registration No: 1397386 (Wales)
