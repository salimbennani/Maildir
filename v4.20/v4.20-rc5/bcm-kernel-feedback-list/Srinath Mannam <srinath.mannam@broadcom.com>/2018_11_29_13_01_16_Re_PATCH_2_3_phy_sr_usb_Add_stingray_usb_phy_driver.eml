Return-Path: <linux-kernel-owner@vger.kernel.org>
Delivered-To: unknown
Received: from linux.intel.com (10.54.29.200:995) by likexu-workstation with
  POP3-SSL; 30 Nov 2018 08:41:30 -0000
X-Original-To: like.xu@linux.intel.com
Delivered-To: like.xu@linux.intel.com
Received: from orsmga004.jf.intel.com (orsmga004.jf.intel.com [10.7.209.38])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by linux.intel.com (Postfix) with ESMTPS id 9350A5802E4;
	Thu, 29 Nov 2018 05:01:45 -0800 (PST)
Received: from orsmga101.jf.intel.com ([10.7.208.22])
  by orsmga004-1.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 29 Nov 2018 05:01:45 -0800
X-SG-BADATTACHMENTNOREPLY: True
IronPort-PHdr: =?us-ascii?q?9a23=3A7fAitxC740iGfEGfHHr3UyQJP3N1i/DPJgcQr6Af?=
 =?us-ascii?q?oPdwSP7/r8iwAkXT6L1XgUPTWs2DsrQY07qQ6/iocFdDyK7JiGoFfp1IWk1Nou?=
 =?us-ascii?q?QttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXdrXKo8DEdBAj0OxZr?=
 =?us-ascii?q?KeTpAI7SiNm82/yv95HJbAhEmDmwbaluIBmqsA7cqtQYjYx+J6gr1xDHuGFIe+?=
 =?us-ascii?q?NYxWNpIVKcgRPx7dqu8ZBg7ipdpesv+9ZPXqvmcas4S6dYDCk9PGAu+MLrrxjD?=
 =?us-ascii?q?QhCR6XYaT24bjwBHAwnB7BH9Q5fxri73vfdz1SWGIcH7S60/VC+85Kl3VhDnlC?=
 =?us-ascii?q?YHNyY48G7JjMxwkLlbqw+lqxBm3oLYfJ2ZOP94c6jAf90VWHBBU95eWCxPAIyy?=
 =?us-ascii?q?b4UBAekcM+hGs4b9vEMOoBmlCAmwGO/i0CNEimPq0aA41ekqDAHI3BYnH9ILqH?=
 =?us-ascii?q?nasc/1NKYUUe+v0KnIzSjIYfRM1jf77ojHaBUhquyLULJra8rRyE8vGBnZjlWQ?=
 =?us-ascii?q?s4DlOima1uILs2eB6uptTvmgi3Qgqw5rvzeg2sAsiozTio0JzVDE8Dx0zYAoLt?=
 =?us-ascii?q?O7UE52ecCoHIdUui2AKod7TN0uT3t1tCs51rEKo5+2cSoSxJg52xLSb+aLfouI?=
 =?us-ascii?q?7x75SuqdPyp0iGhkdb++gRu57FKuxffmVsau1VZHtipFncfItnAKzxHT9MeHRe?=
 =?us-ascii?q?Vn/ku72jaAyRrT6udaLkAwj6bbLIQhwrEompoSt0TMADP2lV3ogKOKckgo4PWk?=
 =?us-ascii?q?5ur5brn8u5ORNJN4hhv/P6ksgsC/BP43MgkKX2iV4+S807jj8FX9QLVLiP02j6?=
 =?us-ascii?q?bYvInZJcsFvK65BRFa0oI65xa4ATam1soXnWMcIVJbdxKIkZLpN0vNIP/mF/e/?=
 =?us-ascii?q?hUqjkDNxy/DBJL3hDY3BLmLfn7f5YbZ990lcxRI3zdBe5JJbFKsNIf3uWkLqsN?=
 =?us-ascii?q?zYDxk5MxG7wur9CdV90J8eVnyLAqODLKzStlqI7Po1I+aQfI8VpCr9K/896v7u?=
 =?us-ascii?q?l3A5mEMdcrOu3ZcNaHC4A+5pI0OWYXf3htcBEGEKvhcxTeDwiV2CVyJTaGi2X6?=
 =?us-ascii?q?4m+j47D4emB5/ZRo+xmLyBwDu7HppOa2BEDVCDD23kd4aDW/cKbiKSJdRskjgF?=
 =?us-ascii?q?VbinVo8g2guitA78y7p7MOXU/jcUuo7k1Nhw/+fTjw099SRoD8SB1GGAV3t7nn?=
 =?us-ascii?q?gIRz8x36Bzu1Z9xU2B0aVjh/xYFNpT5+5GUwsgNJ7cyfB6BM72Wg7bYtiJT1Om?=
 =?us-ascii?q?SM28AT4tVtIx38MOY0FlFtWhlB/D2TCmA7sUl7ORApw0/bnR33zwJ8Z71nbH27?=
 =?us-ascii?q?Mtj1ggQstTK2KmgrRz+BTUB47Mi0+ZjbqldbwA3C7R82eO1XeBs1tGUAFuS6nF?=
 =?us-ascii?q?XWoQZk3Nrdvn4EPOSLuuCbciMgtF0sOCLqpKatv0jVRJXvvjOdLeY36vlGe0Hx?=
 =?us-ascii?q?qH2rSMbI/ycWUHwCrdEFQEkxwU/XueKAcxHDmhrHzEADxuD13vZVjs/vd4qH6g?=
 =?us-ascii?q?Sk80zgeKb1Bu1rav+x4Vg+CcRO0X3r4epCghrDB0Fk6n393KE9qAuxZhfKJEbN?=
 =?us-ascii?q?Mh4VdH0GXZtxB9Pp2gNaximkQScwNtv0Pq1hV3DIpAnNMurHMrygpyNK2Z3ElA?=
 =?us-ascii?q?dzOewZD/JLnXJnPu8xCobq7cwkve38qO+qcT9PQ4rE3usxutFkU8/HRozdlU32?=
 =?us-ascii?q?GH6ZXXEQUdS5TxUkUw9xhkvLzaZig954XJ1XxjK6W0sznC2843C+sh0BqvY9Bf?=
 =?us-ascii?q?MKacHg/oD8IaH9SuKPAtm1WxbhMEIfpe+7IuM8Knd/uJwqirPOl7kTKijGRH5p?=
 =?us-ascii?q?19002W+yp9TO7Iw4gKw/WC0gSbUDf8iU+rstrrloBceTESAm2/xDD+BI5QeqJ9?=
 =?us-ascii?q?Z5wLBnqpI8GtwNVxmYTtW39B+FG/HVwG3NKmdgSIb1z62w1dzkAXoX2hmSulwD?=
 =?us-ascii?q?14iTAprqyD3CPQx+TubgYIOmlORGN6l1fjPZC0j8wGXEivdwUolBql6Vz6xqRB?=
 =?us-ascii?q?v6R/Mm/TTFxMfyj3KWFiT6SxuqCDY85J9JMnryFXXP6gblCdT773uwEa3D/7H2?=
 =?us-ascii?q?tC2DA7cCmnupfjkBxgi2KdL3FzoGDCec5qxhff593cRfhP0ToAXyR4jTjXBl6h?=
 =?us-ascii?q?P9im59mUlpHDsvygWGKlTJFcbS7rzYaYviuh+WJqGQG/n+y0mtD/EQk1yyj728?=
 =?us-ascii?q?NoVSXJqhbxeY3r16W8MeJ6cUhkHl7868xmGo5glos8no0f2X8fhp+N53oIjX/z?=
 =?us-ascii?q?MclH2aL5dHcNRiQEw9/P7AjlxU1sNHSJx43iW3WZw8thYcS6Y2wM1iI86cBKFL?=
 =?us-ascii?q?mb7LhekSRppVq4qBrbYeJhkTcF1fsu9HkajvkMuAoszSWSGKoeHEdGMiz3ixSH?=
 =?us-ascii?q?8cq+o75Ja2a1fri9z05+ndGnDLGfrQBQQnf5epE+HSBu6sVzKk7D0Hr26ov8Yt?=
 =?us-ascii?q?nfccoTtgGIkxfHl+VVNJUxlv8QiStmI239u2Aly/UgjRxvxpy6uImHK2Nw/KO2?=
 =?us-ascii?q?GBJYNzv1Z98N9THpl6pRgsGW34W3FJV7BjoLRIfoTe6vED8KrvvoLQGOEDkhqn?=
 =?us-ascii?q?uBHbrfABSS6ENnr3LJDpCqOGubJHgfzdV+WhadIFZTjxwTXDU/hpQ5DBylxNT9?=
 =?us-ascii?q?cEdl4TAc/lz4pQFJyu12LBnzSHvfqB2rajcpS5ifMRxW4RtZ50rONcye7+RzHz?=
 =?us-ascii?q?xX/5G7rQyNLHCbaBpMDW0TRkOEAFXjNKG05dbc6+iYGva+L/zWbLSOruxeSu6I?=
 =?us-ascii?q?xY+13Ytg5TqMLcKPPn9tD/Ag3kpDXHZ5G9nWmjkVSiwXkT7NYNCfpBum5iJ3qc?=
 =?us-ascii?q?W/+uzxWA3z/YuPF6dSMdJ39hC2n6iDNu2QhCV4KTpC1ZMM33jIyLcB014IliFu?=
 =?us-ascii?q?bCKgEbABtS7LUaLRlbVbDx8dayNvKsRI67gw0RVKOc7ektn1zKJ3juYpC1dZUl?=
 =?us-ascii?q?zsgtumZdERLGGnKlzGBFyHNLCHJTDQx8H3YKW8SaBfjelOth2wvyqbHFHnPjiZ?=
 =?us-ascii?q?izbpUBWvO/lWjC6HJBxepJ29chF1BGj/TdLmbwe3P8NtgTIqwb07mHXKOHUYMT?=
 =?us-ascii?q?h9dUNNs7KR4TlZgvV5B2xO8H5lIfOYlCae6unSMowWvudzAiRoi+Ja52w3yrtP?=
 =?us-ascii?q?4yFCQfx1mS3SocZvolGmiOaPzDVnXQFKqjZKgoKLoEpjNb/Y9plGRXbL4hYN4X?=
 =?us-ascii?q?+MBBQNots2QuHo7oNR0djIkurNKTVL4pr999EVB8HRYOPPZHkgKhruHhbIDU0O?=
 =?us-ascii?q?Sjv9Zk/FgEkIq+uT8HSJrtAfo57qkZ9GHqRBVVo8CvNcD01jGtUHCJ1tWToomr?=
 =?us-ascii?q?meysUP4Czt/1HqWMxGs8WfBbqpCvL1JWPc1OEcag=3D=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0AYAADt4f9bh0O0hNFkHgEGBwaBUQkLA?=
 =?us-ascii?q?YNrJ4N5lCCCDRSIfI4yFIFiKRMBh3MiNAkNAQMBAQEBAQECARMBAQEIDQkIKSM?=
 =?us-ascii?q?MgjYkAYJiAQIDAQIaBgQZAQE3AQUJAQEKCw0CAiYCAgMeARIBBQEcBgsIBYMcg?=
 =?us-ascii?q?WoDFQWaNTyKHXB8M4J2AQEFhQcNghQIEnmLC4FXP4ERgxKCV4FvJIMbgleJGwi?=
 =?us-ascii?q?GBXdRjwcuBwKCHQSLZYMsGIFahRCKMo5ihnqCYTCBJYINMxojgQEGgjWCGwwXg?=
 =?us-ascii?q?0qKWzczgQUBAY04AQE?=
X-IPAS-Result: =?us-ascii?q?A0AYAADt4f9bh0O0hNFkHgEGBwaBUQkLAYNrJ4N5lCCCDRS?=
 =?us-ascii?q?IfI4yFIFiKRMBh3MiNAkNAQMBAQEBAQECARMBAQEIDQkIKSMMgjYkAYJiAQIDA?=
 =?us-ascii?q?QIaBgQZAQE3AQUJAQEKCw0CAiYCAgMeARIBBQEcBgsIBYMcgWoDFQWaNTyKHXB?=
 =?us-ascii?q?8M4J2AQEFhQcNghQIEnmLC4FXP4ERgxKCV4FvJIMbgleJGwiGBXdRjwcuBwKCH?=
 =?us-ascii?q?QSLZYMsGIFahRCKMo5ihnqCYTCBJYINMxojgQEGgjWCGwwXg0qKWzczgQUBAY0?=
 =?us-ascii?q?4AQE?=
X-IronPort-AV: E=Sophos;i="5.56,294,1539673200"; 
   d="scan'208";a="42810829"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from vger.kernel.org ([209.132.180.67])
  by mtab.intel.com with ESMTP; 29 Nov 2018 05:01:43 -0800
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728308AbeK3AGr (ORCPT <rfc822;like.xu@linux.intel.com>
        + 23 others); Thu, 29 Nov 2018 19:06:47 -0500
Received: from mail-wr1-f66.google.com ([209.85.221.66]:39240 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727040AbeK3AGr (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 29 Nov 2018 19:06:47 -0500
Received: by mail-wr1-f66.google.com with SMTP id t27so1813512wra.6
        for <linux-kernel@vger.kernel.org>; Thu, 29 Nov 2018 05:01:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=broadcom.com; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=wGkZ2ogt+Z+KYncZ0tSHcjw5kr4Xyy4ocirZNjlVp5A=;
        b=a/dxkmTtoqxjz330PD9IpdU8bc9lYoXqSCfpcre1gnZo30rYGv/Nl+SxCUW+5yZ+RK
         yFOiP6USdammRmsiYZ+/c91BrdBKvDtJNx1rTDPsy2zBnAmtwKi3fXRGjAzglyF3LgXO
         aXUB94ege067kmz7SDpgJ4MVQP5bG9xSMJff4=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=wGkZ2ogt+Z+KYncZ0tSHcjw5kr4Xyy4ocirZNjlVp5A=;
        b=gtLPmMQ1tVslN5gevYvrWvJJ5f5iooo3oNZ3/kKvLltE0RkYoSd0URnJQHwjcv4Xu8
         klfAUm25/0Y4xvfxksueVQnXuXzhekQD/dU6JCbqgt0sY1laQ9J+XpZa+KISR0KtCl3+
         pwncE4DehWxrR6580JQKP3XvgKgXnp4/UfCHo4oVQuMM0gzVbpGbxSEe5JcIK8fCJi92
         eLp7bpqc8PHx/VKuieG/u/hn7+BaD/sTR3WFeuyp3ZMyWlWeBBUPeKntY1/+sClVfZq6
         bnQcuECVJ6Lrr1mLiIZMTSDDxhLNQhdBgnbQIXchpPfLOagM4wfYoPLgydxG9wcnSZ3U
         bx3w==
X-Gm-Message-State: AA+aEWYPvqRVRbDQwvKB6h3y7Jz5YSFLur26TLMhRQloe3jEAlt67w19
        DRpKsDcPZuM8HzoN6mPR/MdWY8w38m+MHMdyYOZGe1pa
X-Google-Smtp-Source: AFSGD/XxB6wLCK5ikh7LVg+BBIq1mBO1AXxJes70HjURu4YgUe1xOgckKEpxJBf6o4sbIrY1NBuoG25p366K39hOIPk=
X-Received: by 2002:a5d:4e4a:: with SMTP id r10mr1457092wrt.54.1543496487611;
 Thu, 29 Nov 2018 05:01:27 -0800 (PST)
MIME-Version: 1.0
References: <1542082418-16675-1-git-send-email-srinath.mannam@broadcom.com>
 <1542082418-16675-3-git-send-email-srinath.mannam@broadcom.com> <b626bff7-9228-b53f-b16a-7f6fb1f27100@ti.com>
In-Reply-To: <b626bff7-9228-b53f-b16a-7f6fb1f27100@ti.com>
From: Srinath Mannam <srinath.mannam@broadcom.com>
Date: Thu, 29 Nov 2018 18:31:16 +0530
Message-ID: <CABe79T4r-20DmQoHX5HXFU0O7KXid=JuhKVtA7+yzkrb4vafkA@mail.gmail.com>
Subject: Re: [PATCH 2/3] phy: sr-usb: Add stingray usb phy driver
To: Kishon Vijay Abraham I <kishon@ti.com>
Cc: Rob Herring <robh+dt@kernel.org>,
        Mark Rutland <mark.rutland@arm.com>, Tejun Heo <tj@kernel.org>,
        Jayachandran C <jnair@caviumnetworks.com>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>,
        bcm-kernel-feedback-list@broadcom.com
Content-Type: text/plain; charset="UTF-8"
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Kishon,

Thank you for review.. Please find my answers below in line.


On Thu, Nov 29, 2018 at 3:55 PM Kishon Vijay Abraham I <kishon@ti.com> wrote:
>
> Hi,
>
> On 13/11/18 9:43 AM, Srinath Mannam wrote:
> > This driver supports all versions of stingray SS and HS
> > USB phys.
> > In version 1 is combo phy contain both SS and HS phys
> > in a common IO space.
> > In version 2 a single HS phy.
> > These phys support both xHCI host driver and
> > BDC Broadcom device controller driver.
> >
> > Signed-off-by: Srinath Mannam <srinath.mannam@broadcom.com>
> > Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
> > Reviewed-by: Scott Branden <scott.branden@broadcom.com>
> > ---
> >  drivers/phy/broadcom/Kconfig          |  11 +
> >  drivers/phy/broadcom/Makefile         |   1 +
> >  drivers/phy/broadcom/phy-bcm-sr-usb.c | 367 ++++++++++++++++++++++++++++++++++
> >  3 files changed, 379 insertions(+)
> >  create mode 100644 drivers/phy/broadcom/phy-bcm-sr-usb.c
> >
> > diff --git a/drivers/phy/broadcom/Kconfig b/drivers/phy/broadcom/Kconfig
> > index 8786a96..c1e4dd5 100644
> > --- a/drivers/phy/broadcom/Kconfig
> > +++ b/drivers/phy/broadcom/Kconfig
> > @@ -10,6 +10,17 @@ config PHY_CYGNUS_PCIE
> >         Enable this to support the Broadcom Cygnus PCIe PHY.
> >         If unsure, say N.
> >
> > +config PHY_BCM_SR_USB
> > +     tristate "Broadcom Stingray USB PHY driver"
> > +     depends on OF && (ARCH_BCM_IPROC || COMPILE_TEST)
> > +     select GENERIC_PHY
> > +     default ARCH_BCM_IPROC
> > +     help
> > +       Enable this to support the Broadcom Stingray USB PHY
> > +       driver. It supports all versions of Superspeed and
> > +       Highspeed PHYs.
> > +       If unsure, say N.
> > +
> >  config BCM_KONA_USB2_PHY
> >       tristate "Broadcom Kona USB2 PHY Driver"
> >       depends on HAS_IOMEM
> > diff --git a/drivers/phy/broadcom/Makefile b/drivers/phy/broadcom/Makefile
> > index 0f60184..f453c7d 100644
> > --- a/drivers/phy/broadcom/Makefile
> > +++ b/drivers/phy/broadcom/Makefile
> > @@ -11,3 +11,4 @@ obj-$(CONFIG_PHY_BRCM_USB)          += phy-brcm-usb-dvr.o
> >  phy-brcm-usb-dvr-objs := phy-brcm-usb.o phy-brcm-usb-init.o
> >
> >  obj-$(CONFIG_PHY_BCM_SR_PCIE)                += phy-bcm-sr-pcie.o
> > +obj-$(CONFIG_PHY_BCM_SR_USB)         += phy-bcm-sr-usb.o
> > diff --git a/drivers/phy/broadcom/phy-bcm-sr-usb.c b/drivers/phy/broadcom/phy-bcm-sr-usb.c
> > new file mode 100644
> > index 0000000..99de49f
> > --- /dev/null
> > +++ b/drivers/phy/broadcom/phy-bcm-sr-usb.c
> > @@ -0,0 +1,367 @@
> > +// SPDX-License-Identifier: GPL-2.0
> > +/*
> > + * Copyright (C) 2016-2018 Broadcom
> > + */
> > +
> > +#include <linux/delay.h>
> > +#include <linux/io.h>
> > +#include <linux/module.h>
> > +#include <linux/of.h>
> > +#include <linux/phy/phy.h>
> > +#include <linux/platform_device.h>
> > +
> > +enum bcm_usb_phy_version {
> > +     BCM_USB_PHY_V1,
> > +     BCM_USB_PHY_V2,
> > +};
> > +
> > +enum bcm_usb_phy_reg {
> > +     PLL_NDIV_FRAC,
> > +     PLL_NDIV_INT,
> > +     PLL_CTRL,
> > +     PHY_CTRL,
> > +     PHY_PLL_CTRL,
> > +};
> > +
> > +/* USB PHY registers */
> > +
> > +static const u8 bcm_usb_u3phy_v1[] = {
> > +     [PLL_CTRL]              = 0x18,
> > +     [PHY_CTRL]              = 0x14,
> > +};
> > +
> > +static const u8 bcm_usb_u2phy_v1[] = {
> > +     [PLL_NDIV_FRAC] = 0x04,
> > +     [PLL_NDIV_INT]  = 0x08,
> > +     [PLL_CTRL]      = 0x0c,
> > +     [PHY_CTRL]      = 0x10,
> > +};
> > +
> > +#define HSPLL_NDIV_INT_VAL   0x13
> > +#define HSPLL_NDIV_FRAC_VAL  0x1005
> > +
> > +static const u8 bcm_usb_u2phy_v2[] = {
> > +     [PLL_NDIV_FRAC] = 0x0,
> > +     [PLL_NDIV_INT]  = 0x4,
> > +     [PLL_CTRL]      = 0x8,
> > +     [PHY_CTRL]      = 0xc,
> > +};
> > +
> > +enum pll_ctrl_bits {
> > +     PLL_RESETB,
> > +     SSPLL_SUSPEND_EN,
> > +     PLL_SEQ_START,
> > +     PLL_LOCK,
> > +     PLL_PDIV,
> > +};
> > +
> > +static const u8 u3pll_ctrl[] = {
> > +     [PLL_RESETB]            = 0,
> > +     [SSPLL_SUSPEND_EN]      = 1,
> > +     [PLL_SEQ_START]         = 2,
> > +     [PLL_LOCK]              = 3,
> > +};
> > +
> > +#define HSPLL_PDIV_MASK              0xF
> > +#define HSPLL_PDIV_VAL               0x1
> > +
> > +static const u8 u2pll_ctrl[] = {
> > +     [PLL_PDIV]      = 1,
> > +     [PLL_RESETB]    = 5,
> > +     [PLL_LOCK]      = 6,
> > +};
> > +
> > +enum bcm_usb_phy_ctrl_bits {
> > +     CORERDY,
> > +     AFE_LDO_PWRDWNB,
> > +     AFE_PLL_PWRDWNB,
> > +     AFE_BG_PWRDWNB,
> > +     PHY_ISO,
> > +     PHY_RESETB,
> > +     PHY_PCTL,
> > +};
> > +
> > +#define PHY_PCTL_MASK        0xffff
> > +/*
> > + * 0x0806 of PCTL_VAL has below bits set
> > + * BIT-8 : refclk divider 1
> > + * BIT-3:2: device mode; mode is not effect
> > + * BIT-1: soft reset active low
> > + */
> > +#define HSPHY_PCTL_VAL       0x0806
> > +#define SSPHY_PCTL_VAL       0x0006
> > +
> > +static const u8 u3phy_ctrl[] = {
> > +     [PHY_RESETB]    = 1,
> > +     [PHY_PCTL]      = 2,
> > +};
> > +
> > +static const u8 u2phy_ctrl[] = {
> > +     [CORERDY]               = 0,
> > +     [AFE_LDO_PWRDWNB]       = 1,
> > +     [AFE_PLL_PWRDWNB]       = 2,
> > +     [AFE_BG_PWRDWNB]        = 3,
> > +     [PHY_ISO]               = 4,
> > +     [PHY_RESETB]            = 5,
> > +     [PHY_PCTL]              = 6,
> > +};
> > +
> > +struct bcm_usb_phy_cfg {
> > +     uint32_t type;
> > +     uint32_t ver;
> > +     void __iomem *regs;
> > +     struct phy *phy;
> > +     const u8 *offset;
> > +};
> > +
> > +#define PLL_LOCK_RETRY_COUNT 1000
> > +
> > +enum bcm_usb_phy_type {
> > +     USB_HS_PHY,
> > +     USB_SS_PHY,
> > +};
> > +
> > +static inline void bcm_usb_reg32_clrbits(void __iomem *addr, uint32_t clear)
> > +{
> > +     writel(readl(addr) & ~clear, addr);
> > +}
> > +
> > +static inline void bcm_usb_reg32_setbits(void __iomem *addr, uint32_t set)
> > +{
> > +     writel(readl(addr) | set, addr);
> > +}
> > +
> > +static int bcm_usb_pll_lock_check(void __iomem *addr, u32 bit)
> > +{
> > +     int retry;
> > +     u32 rd_data;
> > +
> > +     retry = PLL_LOCK_RETRY_COUNT;
> > +     do {
> > +             rd_data = readl(addr);
> > +             if (rd_data & bit)
> > +                     return 0;
> > +             udelay(1);
> > +     } while (--retry > 0);
> > +
> > +     pr_err("%s: FAIL\n", __func__);
> > +     return -ETIMEDOUT;
> > +}
> > +
> > +static int bcm_usb_ss_phy_init(struct bcm_usb_phy_cfg *phy_cfg)
> > +{
> > +     int ret = 0;
> > +     void __iomem *regs = phy_cfg->regs;
> > +     const u8 *offset;
> > +     u32 rd_data;
> > +
> > +     offset = phy_cfg->offset;
> > +
> > +     /* Set pctl with mode and soft reset */
> > +     rd_data = readl(regs + offset[PHY_CTRL]);
> > +     rd_data &= ~(PHY_PCTL_MASK << u3phy_ctrl[PHY_PCTL]);
> > +     rd_data |= (SSPHY_PCTL_VAL << u3phy_ctrl[PHY_PCTL]);
> > +     writel(rd_data, regs + offset[PHY_CTRL]);
> > +
> > +     bcm_usb_reg32_clrbits(regs + offset[PLL_CTRL],
> > +                           BIT(u3pll_ctrl[SSPLL_SUSPEND_EN]));
> > +     bcm_usb_reg32_setbits(regs + offset[PLL_CTRL],
> > +                           BIT(u3pll_ctrl[PLL_SEQ_START]));
> > +     bcm_usb_reg32_setbits(regs + offset[PLL_CTRL],
> > +                           BIT(u3pll_ctrl[PLL_RESETB]));
> > +
> > +     msleep(30);
> > +
> > +     ret = bcm_usb_pll_lock_check(regs + offset[PLL_CTRL],
> > +                                  BIT(u3pll_ctrl[PLL_LOCK]));
> > +
> > +     return ret;
> > +}
> > +
> > +static int bcm_usb_hs_phy_init(struct bcm_usb_phy_cfg *phy_cfg)
> > +{
> > +     int ret = 0;
> > +     void __iomem *regs = phy_cfg->regs;
> > +     const u8 *offset;
> > +     u32 rd_data;
> > +
> > +     offset = phy_cfg->offset;
> > +
> > +     writel(HSPLL_NDIV_INT_VAL, regs + offset[PLL_NDIV_INT]);
> > +     writel(HSPLL_NDIV_FRAC_VAL, regs + offset[PLL_NDIV_FRAC]);
> > +
> > +     rd_data = readl(regs + offset[PLL_CTRL]);
> > +     rd_data &= ~(HSPLL_PDIV_MASK << u2pll_ctrl[PLL_PDIV]);
> > +     rd_data |= (HSPLL_PDIV_VAL << u2pll_ctrl[PLL_PDIV]);
> > +     writel(rd_data, regs + offset[PLL_CTRL]);
> > +
> > +     /* Set Core Ready high */
> > +     bcm_usb_reg32_setbits(regs + offset[PHY_CTRL],
> > +                           BIT(u2phy_ctrl[CORERDY]));
> > +
> > +     msleep(100);
> > +
> > +     bcm_usb_reg32_setbits(regs + offset[PLL_CTRL],
> > +                           BIT(u2pll_ctrl[PLL_RESETB]));
> > +     bcm_usb_reg32_setbits(regs + offset[PHY_CTRL],
> > +                           BIT(u2phy_ctrl[PHY_RESETB]));
> > +
> > +
> > +     rd_data = readl(regs + offset[PHY_CTRL]);
> > +     rd_data &= ~(PHY_PCTL_MASK << u2phy_ctrl[PHY_PCTL]);
> > +     rd_data |= (HSPHY_PCTL_VAL << u2phy_ctrl[PHY_PCTL]);
> > +     writel(rd_data, regs + offset[PHY_CTRL]);
> > +
> > +     ret = bcm_usb_pll_lock_check(regs + offset[PLL_CTRL],
> > +                                  BIT(u2pll_ctrl[PLL_LOCK]));
> > +
> > +     return ret;
> > +}
> > +
> > +static int bcm_usb_phy_reset(struct phy *phy)
> > +{
> > +     struct bcm_usb_phy_cfg *phy_cfg = phy_get_drvdata(phy);
> > +     void __iomem *regs = phy_cfg->regs;
> > +     const u8 *offset;
> > +
> > +     offset = phy_cfg->offset;
> > +
> > +     if (phy_cfg->type == USB_HS_PHY) {
> > +             bcm_usb_reg32_clrbits(regs + offset[PHY_CTRL],
> > +                                   BIT(u2phy_ctrl[CORERDY]));
> > +             bcm_usb_reg32_setbits(regs + offset[PHY_CTRL],
> > +                                   BIT(u2phy_ctrl[CORERDY]));
> > +     }
> > +
> > +     return 0;
> > +}
> > +
> > +static int bcm_usb_phy_init(struct phy *phy)
> > +{
> > +     struct bcm_usb_phy_cfg *phy_cfg = phy_get_drvdata(phy);
> > +
> > +     if (phy_cfg->type == USB_SS_PHY)
> > +             bcm_usb_ss_phy_init(phy_cfg);
> > +     if (phy_cfg->type == USB_HS_PHY)
> > +             bcm_usb_hs_phy_init(phy_cfg);
> > +
> > +     return 0;
> > +}
> > +
> > +static struct phy_ops sr_phy_ops = {
> > +     .init           = bcm_usb_phy_init,
> > +     .reset          = bcm_usb_phy_reset,
> > +     .owner          = THIS_MODULE,
> > +};
> > +
> > +static int bcm_usb_phy_create(struct device *dev, struct device_node *node,
> > +                          void __iomem *regs, uint32_t version)
> > +{
> > +     struct bcm_usb_phy_cfg *phy_cfg;
> > +     struct phy_provider *phy_provider;
> > +
> > +     phy_cfg = devm_kzalloc(dev, sizeof(struct bcm_usb_phy_cfg), GFP_KERNEL);
> > +     if (!phy_cfg)
> > +             return -ENOMEM;
> > +
> > +     phy_cfg->regs = regs;
>
> Are there any registers shared by all the PHYs?
No registers shared between phys. All phys have same type of registers
but at different address offset.
In the same way few bits in registers are same but at different
position in registers.
> > +     phy_cfg->ver = version;
> > +
> > +     if (phy_cfg->ver == BCM_USB_PHY_V1) {
> > +             unsigned int id;
> > +
> > +             if (of_property_read_u32(node, "reg", &id)) {
> > +                     dev_err(dev, "missing reg property in node %s\n",
> > +                             node->name);
> > +                     return -EINVAL;
> > +             }
> > +
> > +             if (id == 0) {
> > +                     phy_cfg->offset = bcm_usb_u2phy_v1;
>
> The reg space can come from the dt itself.
This driver supports two different phys. one is combo phy which has
both USB3 and USB2 phy.
other is single phy it has only USB2 phy.
So that, from DT we passed address of either combo phy address or
single phy address.
In combo phy, USB3 phy and USB2 phy registers are at different offsets
from the base address passed through DT.
> > +                     phy_cfg->type = USB_HS_PHY;
> > +             } else if (id == 1) {
> > +                     phy_cfg->offset = bcm_usb_u3phy_v1;
> > +                     phy_cfg->type = USB_SS_PHY;
> > +             } else {
> > +                     return -ENODEV;
> > +             }
> > +     } else if (phy_cfg->ver == BCM_USB_PHY_V2) {
> > +             phy_cfg->offset = bcm_usb_u2phy_v2;
> > +             phy_cfg->type = USB_HS_PHY;
> > +     }
> > +
> > +     phy_cfg->phy = devm_phy_create(dev, node, &sr_phy_ops);
> > +     if (IS_ERR(phy_cfg->phy))
> > +             return PTR_ERR(phy_cfg->phy);
> > +
> > +     phy_set_drvdata(phy_cfg->phy, phy_cfg);
> > +     phy_provider = devm_of_phy_provider_register(&phy_cfg->phy->dev,
> > +                                                  of_phy_simple_xlate);
> > +     if (IS_ERR(phy_provider)) {
> > +             dev_err(dev, "Failed to register phy provider\n");
> > +             return PTR_ERR(phy_provider);
> > +     }
>
> No need for a separate PHY provider.
Could you please provide more details?
I thought to get phy device in the upper layer we need to register
provider. can we skip this?
In this driver, combo phy provides two usb ports to host controller,
so that I need to add separate phandlers
in host controller DT node and need to create two separate phy
devices. also phy_init and reset handlers need
to call for both phy devices separately.
>
> Thanks
> Kishon

Thank you.
Regards,
Srinath.
